   1              		.cpu arm7tdmi-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.code	16
  12              		.file	"syscalls.c"
  20              	.Ltext0:
  21              		.section	.text._close_r,"ax",%progbits
  22              		.align	2
  23              		.global	_close_r
  24              		.code	16
  25              		.thumb_func
  27              	_close_r:
  28              	.LFB4:
  29              		.file 1 "lib/Common/src/syscalls.c"
   1:lib/Common/src/syscalls.c **** /******************************************************************************/
   2:lib/Common/src/syscalls.c **** /*                                                                            */
   3:lib/Common/src/syscalls.c **** /*        Syscall support functions for newlib console I/O with stdio         */
   4:lib/Common/src/syscalls.c **** /*                                                                            */
   5:lib/Common/src/syscalls.c **** /******************************************************************************/
   6:lib/Common/src/syscalls.c **** 
   7:lib/Common/src/syscalls.c **** /* $Id: syscalls.c,v 1.4 2008/08/25 16:11:40 cvs Exp $ */
   8:lib/Common/src/syscalls.c **** /* 20090508 Nemui Fixed   scanf consideration */
   9:lib/Common/src/syscalls.c **** #include <stdlib.h>
  10:lib/Common/src/syscalls.c **** #include <string.h>
  11:lib/Common/src/syscalls.c **** #include <reent.h>
  12:lib/Common/src/syscalls.c **** #include <sys/stat.h>
  13:lib/Common/src/syscalls.c **** 
  14:lib/Common/src/syscalls.c **** /* platform dependent definitions */
  15:lib/Common/src/syscalls.c **** #include "lpc23xx.h"                        /* LPC23xx/24xx definitions */
  16:lib/Common/src/syscalls.c **** #include "type.h"							/* unique type definitions */
  17:lib/Common/src/syscalls.c **** #include "uart.h"							/* uart dredirect function */
  18:lib/Common/src/syscalls.c **** 
  19:lib/Common/src/syscalls.c **** /* platform dependent printf/scanf relation settings */
  20:lib/Common/src/syscalls.c **** #define putch(x)  UARTPutch(UART_NUM,x)
  21:lib/Common/src/syscalls.c **** #define getch()   UARTGetch(UART_NUM)
  22:lib/Common/src/syscalls.c **** /* if use scanf echoback, uncomment below it */
  23:lib/Common/src/syscalls.c **** /* #define ECHOBACK */
  24:lib/Common/src/syscalls.c **** 
  25:lib/Common/src/syscalls.c **** /*
  26:lib/Common/src/syscalls.c **** Notice: 
  27:lib/Common/src/syscalls.c **** 		Line Feed     : Dec=10 Hex=0x0A ESC='\n'
  28:lib/Common/src/syscalls.c **** 		Caridge Return: Dec=13 Hex=0x0D ESC='\r'
  29:lib/Common/src/syscalls.c **** */
  30:lib/Common/src/syscalls.c **** #ifndef	FALSE
  31:lib/Common/src/syscalls.c **** 	#define FALSE 0
  32:lib/Common/src/syscalls.c **** 	#define TRUE  1
  33:lib/Common/src/syscalls.c **** #endif
  34:lib/Common/src/syscalls.c **** 
  35:lib/Common/src/syscalls.c **** /* new code for _read_r provided by Alexey Shusharin - Thanks */
  36:lib/Common/src/syscalls.c **** _ssize_t _read_r(struct _reent *r, int file, void *ptr, size_t len)
  37:lib/Common/src/syscalls.c **** {
  38:lib/Common/src/syscalls.c ****   char c;
  39:lib/Common/src/syscalls.c ****   int  i;
  40:lib/Common/src/syscalls.c ****   unsigned char *p;
  41:lib/Common/src/syscalls.c **** 
  42:lib/Common/src/syscalls.c ****   p = (unsigned char*)ptr;
  43:lib/Common/src/syscalls.c ****   for (i = 0; i < len; i++)
  44:lib/Common/src/syscalls.c ****   {
  45:lib/Common/src/syscalls.c **** 	/* 20090521Nemui */
  46:lib/Common/src/syscalls.c **** 	do{		
  47:lib/Common/src/syscalls.c **** 		c = getch();
  48:lib/Common/src/syscalls.c **** 	}while(c == FALSE);
  49:lib/Common/src/syscalls.c **** 	/* 20090521Nemui */
  50:lib/Common/src/syscalls.c **** 	
  51:lib/Common/src/syscalls.c ****     *p++ = c;
  52:lib/Common/src/syscalls.c **** 	#ifdef ECHOBACK 
  53:lib/Common/src/syscalls.c **** 		putch(c);
  54:lib/Common/src/syscalls.c **** 	#endif
  55:lib/Common/src/syscalls.c **** 	
  56:lib/Common/src/syscalls.c ****     if (c == '\r' && i <= (len - 2)) /* 0x0D */
  57:lib/Common/src/syscalls.c ****     {
  58:lib/Common/src/syscalls.c ****       *p = '\n';					 /* 0x0A */
  59:lib/Common/src/syscalls.c **** 	  #ifdef ECHOBACK 
  60:lib/Common/src/syscalls.c **** 		putch('\n');				 /* 0x0A */
  61:lib/Common/src/syscalls.c **** 	  #endif
  62:lib/Common/src/syscalls.c ****       return i + 2;
  63:lib/Common/src/syscalls.c ****     }
  64:lib/Common/src/syscalls.c ****   }
  65:lib/Common/src/syscalls.c ****   return i;
  66:lib/Common/src/syscalls.c **** }
  67:lib/Common/src/syscalls.c **** 
  68:lib/Common/src/syscalls.c **** _ssize_t _write_r (
  69:lib/Common/src/syscalls.c ****     struct _reent *r, 
  70:lib/Common/src/syscalls.c ****     int file, 
  71:lib/Common/src/syscalls.c ****     const void *ptr, 
  72:lib/Common/src/syscalls.c ****     size_t len)
  73:lib/Common/src/syscalls.c **** {
  74:lib/Common/src/syscalls.c **** 	int i;
  75:lib/Common/src/syscalls.c **** 	const unsigned char *p;
  76:lib/Common/src/syscalls.c **** 	
  77:lib/Common/src/syscalls.c **** 	p = (const unsigned char*) ptr;
  78:lib/Common/src/syscalls.c **** 	
  79:lib/Common/src/syscalls.c **** 	for (i = 0; i < len; i++) {
  80:lib/Common/src/syscalls.c **** 		if (*p == '\n' ) putch('\r');
  81:lib/Common/src/syscalls.c **** 		putch(*p++);
  82:lib/Common/src/syscalls.c **** 	}
  83:lib/Common/src/syscalls.c **** 	
  84:lib/Common/src/syscalls.c **** 	return len;
  85:lib/Common/src/syscalls.c **** }
  86:lib/Common/src/syscalls.c **** 
  87:lib/Common/src/syscalls.c **** int _close_r(
  88:lib/Common/src/syscalls.c ****     struct _reent *r, 
  89:lib/Common/src/syscalls.c ****     int file)
  90:lib/Common/src/syscalls.c **** {
  30              		.loc 1 90 0
  31              	.LVL0:
  91:lib/Common/src/syscalls.c **** 	return 0;
  92:lib/Common/src/syscalls.c **** }
  32              		.loc 1 92 0
  33 0000 0020     		mov	r0, #0
  34              	.LVL1:
  35              		@ sp needed for prologue
  36 0002 7047     		bx	lr
  37              	.LFE4:
  39              		.section	.text._lseek_r,"ax",%progbits
  40              		.align	2
  41              		.global	_lseek_r
  42              		.code	16
  43              		.thumb_func
  45              	_lseek_r:
  46              	.LFB5:
  93:lib/Common/src/syscalls.c **** 
  94:lib/Common/src/syscalls.c **** _off_t _lseek_r(
  95:lib/Common/src/syscalls.c ****     struct _reent *r, 
  96:lib/Common/src/syscalls.c ****     int file, 
  97:lib/Common/src/syscalls.c ****     _off_t ptr, 
  98:lib/Common/src/syscalls.c ****     int dir)
  99:lib/Common/src/syscalls.c **** {
  47              		.loc 1 99 0
  48              	.LVL2:
 100:lib/Common/src/syscalls.c **** 	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
 101:lib/Common/src/syscalls.c **** }
  49              		.loc 1 101 0
  50 0000 0020     		mov	r0, #0
  51              	.LVL3:
  52              		@ sp needed for prologue
  53 0002 7047     		bx	lr
  54              	.LFE5:
  56              		.section	.text._fstat_r,"ax",%progbits
  57              		.align	2
  58              		.global	_fstat_r
  59              		.code	16
  60              		.thumb_func
  62              	_fstat_r:
  63              	.LFB6:
 102:lib/Common/src/syscalls.c **** 
 103:lib/Common/src/syscalls.c **** 
 104:lib/Common/src/syscalls.c **** int _fstat_r(
 105:lib/Common/src/syscalls.c ****     struct _reent *r, 
 106:lib/Common/src/syscalls.c ****     int file, 
 107:lib/Common/src/syscalls.c ****     struct stat *st)
 108:lib/Common/src/syscalls.c **** {
  64              		.loc 1 108 0
  65              	.LVL4:
 109:lib/Common/src/syscalls.c **** 	/*  Always set as character device.				*/
 110:lib/Common/src/syscalls.c **** 	st->st_mode = S_IFCHR;	
  66              		.loc 1 110 0
  67 0000 8023     		mov	r3, #128
  68 0002 9B01     		lsl	r3, r3, #6
 111:lib/Common/src/syscalls.c **** 		/* assigned to strong type with implicit 	*/
 112:lib/Common/src/syscalls.c **** 		/* signed/unsigned conversion.  Required by 	*/
 113:lib/Common/src/syscalls.c **** 		/* newlib.					*/
 114:lib/Common/src/syscalls.c **** 
 115:lib/Common/src/syscalls.c **** 	return 0;
 116:lib/Common/src/syscalls.c **** }
  69              		.loc 1 116 0
  70 0004 0020     		mov	r0, #0
  71              	.LVL5:
  72              		.loc 1 110 0
  73 0006 5360     		str	r3, [r2, #4]
  74              		.loc 1 116 0
  75              		@ sp needed for prologue
  76 0008 7047     		bx	lr
  77              	.LFE6:
  79              		.section	.text.isatty,"ax",%progbits
  80              		.align	2
  81              		.global	isatty
  82              		.code	16
  83              		.thumb_func
  85              	isatty:
  86              	.LFB7:
 117:lib/Common/src/syscalls.c **** 
 118:lib/Common/src/syscalls.c **** #ifdef __GNUC__
 119:lib/Common/src/syscalls.c **** int isatty(int file); /* avoid warning */
 120:lib/Common/src/syscalls.c **** #endif
 121:lib/Common/src/syscalls.c **** int isatty(int file)
 122:lib/Common/src/syscalls.c **** {
  87              		.loc 1 122 0
  88              	.LVL6:
 123:lib/Common/src/syscalls.c **** 	return 1;
 124:lib/Common/src/syscalls.c **** }
  89              		.loc 1 124 0
  90 0000 0120     		mov	r0, #1
  91              	.LVL7:
  92              		@ sp needed for prologue
  93 0002 7047     		bx	lr
  94              	.LFE7:
  96              		.section	.text._exit,"ax",%progbits
  97              		.align	2
  98              		.global	_exit
  99              		.code	16
 100              		.thumb_func
 102              	_exit:
 103              	.LFB8:
 125:lib/Common/src/syscalls.c **** 
 126:lib/Common/src/syscalls.c **** 
 127:lib/Common/src/syscalls.c **** void _exit(int n) {
 128:lib/Common/src/syscalls.c **** label:  goto label; /* endless loop */
 104              		.loc 1 128 0
 105 0000 00B5     		push	{lr}
 106              	.LCFI0:
 107              	.L10:
 108              	.LVL8:
 109              	.L11:
 110 0002 FEE7     		b	.L11
 111              	.LFE8:
 113              		.section	.text._getpid,"ax",%progbits
 114              		.align	2
 115              		.global	_getpid
 116              		.code	16
 117              		.thumb_func
 119              	_getpid:
 120              	.LFB9:
 129:lib/Common/src/syscalls.c **** }
 130:lib/Common/src/syscalls.c **** 
 131:lib/Common/src/syscalls.c **** int _getpid(int file)
 132:lib/Common/src/syscalls.c **** {
 121              		.loc 1 132 0
 122              	.LVL9:
 133:lib/Common/src/syscalls.c **** 	return 1;
 134:lib/Common/src/syscalls.c **** }
 123              		.loc 1 134 0
 124 0000 0120     		mov	r0, #1
 125              	.LVL10:
 126              		@ sp needed for prologue
 127 0002 7047     		bx	lr
 128              	.LFE9:
 130              		.section	.text._kill,"ax",%progbits
 131              		.align	2
 132              		.global	_kill
 133              		.code	16
 134              		.thumb_func
 136              	_kill:
 137              	.LFB10:
 135:lib/Common/src/syscalls.c **** 
 136:lib/Common/src/syscalls.c **** int _kill(int file)
 137:lib/Common/src/syscalls.c **** {
 138              		.loc 1 137 0
 139              	.LVL11:
 138:lib/Common/src/syscalls.c **** 	return 1;
 139:lib/Common/src/syscalls.c **** }
 140              		.loc 1 139 0
 141 0000 0120     		mov	r0, #1
 142              	.LVL12:
 143              		@ sp needed for prologue
 144 0002 7047     		bx	lr
 145              	.LFE10:
 147              		.section	.text._sbrk_r,"ax",%progbits
 148              		.align	2
 149              		.global	_sbrk_r
 150              		.code	16
 151              		.thumb_func
 153              	_sbrk_r:
 154              	.LFB11:
 140:lib/Common/src/syscalls.c **** 
 141:lib/Common/src/syscalls.c **** /* "malloc clue function" */
 142:lib/Common/src/syscalls.c **** 
 143:lib/Common/src/syscalls.c **** 	/**** Locally used variables. ****/
 144:lib/Common/src/syscalls.c **** extern char end[];              /*  end is set in the linker command 	*/
 145:lib/Common/src/syscalls.c **** 								/* file and is the end of statically 	*/
 146:lib/Common/src/syscalls.c **** 								/* allocated data (thus start of heap).	*/
 147:lib/Common/src/syscalls.c **** 
 148:lib/Common/src/syscalls.c **** static char *heap_ptr;			/* Points to current end of the heap.	*/
 149:lib/Common/src/syscalls.c **** 
 150:lib/Common/src/syscalls.c **** /************************** _sbrk_r *************************************/
 151:lib/Common/src/syscalls.c **** /*  Support function.  Adjusts end of heap to provide more memory to	*/
 152:lib/Common/src/syscalls.c **** /* memory allocator. Simple and dumb with no sanity checks.				*/
 153:lib/Common/src/syscalls.c **** /*  struct _reent *r	-- re-entrancy structure, used by newlib to 	*/
 154:lib/Common/src/syscalls.c **** /*			support multiple threads of operation.						*/
 155:lib/Common/src/syscalls.c **** /*  ptrdiff_t nbytes	-- number of bytes to add.						*/
 156:lib/Common/src/syscalls.c **** /*  Returns pointer to start of new heap area.							*/
 157:lib/Common/src/syscalls.c **** /*  Note:  This implementation is not thread safe (despite taking a		*/
 158:lib/Common/src/syscalls.c **** /* _reent structure as a parameter).  									*/
 159:lib/Common/src/syscalls.c **** /*  Since _s_r is not used in the current implementation, the following	*/
 160:lib/Common/src/syscalls.c **** /* messages must be suppressed.											*/
 161:lib/Common/src/syscalls.c **** 
 162:lib/Common/src/syscalls.c **** void * _sbrk_r(
 163:lib/Common/src/syscalls.c ****     struct _reent *_s_r, 
 164:lib/Common/src/syscalls.c ****     ptrdiff_t nbytes)
 165:lib/Common/src/syscalls.c **** {
 155              		.loc 1 165 0
 156 0000 00B5     		push	{lr}
 157              	.LCFI1:
 158              	.LVL13:
 166:lib/Common/src/syscalls.c **** 	char  *base;		/*  errno should be set to  ENOMEM on error	*/
 167:lib/Common/src/syscalls.c **** 
 168:lib/Common/src/syscalls.c **** 	if (!heap_ptr) {	/*  Initialize if first time through.		*/
 159              		.loc 1 168 0
 160 0002 064A     		ldr	r2, .L22
 161 0004 1368     		ldr	r3, [r2]
 162 0006 002B     		cmp	r3, #0
 163 0008 04D0     		beq	.L21
 164              	.L18:
 169:lib/Common/src/syscalls.c **** 		heap_ptr = end;
 170:lib/Common/src/syscalls.c **** 	}
 171:lib/Common/src/syscalls.c **** 	base = heap_ptr;	/*  Point to end of heap.					*/
 165              		.loc 1 171 0
 166 000a 1068     		ldr	r0, [r2]
 167              	.LVL14:
 168              	.LVL15:
 172:lib/Common/src/syscalls.c **** 	heap_ptr += nbytes;	/*  Increase heap.							*/
 169              		.loc 1 172 0
 170 000c 4318     		add	r3, r0, r1
 171              	.LVL16:
 172 000e 1360     		str	r3, [r2]
 173:lib/Common/src/syscalls.c **** 	
 174:lib/Common/src/syscalls.c **** 	return base;		/*  Return pointer to start of new heap area.	*/
 175:lib/Common/src/syscalls.c **** }
 173              		.loc 1 175 0
 174              		@ sp needed for prologue
 175 0010 02BC     		pop	{r1}
 176 0012 0847     		bx	r1
 177              	.LVL17:
 178              	.L21:
 179              		.loc 1 169 0
 180 0014 024B     		ldr	r3, .L22+4
 181 0016 1360     		str	r3, [r2]
 182 0018 F7E7     		b	.L18
 183              	.L23:
 184 001a C046     		.align	2
 185              	.L22:
 186 001c 00000000 		.word	.LANCHOR0
 187 0020 00000000 		.word	end
 188              	.LFE11:
 190              		.section	.text._sbrk,"ax",%progbits
 191              		.align	2
 192              		.global	_sbrk
 193              		.code	16
 194              		.thumb_func
 196              	_sbrk:
 197              	.LFB12:
 176:lib/Common/src/syscalls.c **** 
 177:lib/Common/src/syscalls.c **** 
 178:lib/Common/src/syscalls.c **** 
 179:lib/Common/src/syscalls.c **** void * _sbrk(ptrdiff_t incr)
 180:lib/Common/src/syscalls.c **** {
 198              		.loc 1 180 0
 199 0000 00B5     		push	{lr}
 200              	.LCFI2:
 201              	.LVL18:
 181:lib/Common/src/syscalls.c ****   char  *base;
 182:lib/Common/src/syscalls.c **** 
 183:lib/Common/src/syscalls.c **** /* Initialize if first time through. */
 184:lib/Common/src/syscalls.c **** 
 185:lib/Common/src/syscalls.c ****   if (!heap_ptr) heap_ptr = end;
 202              		.loc 1 185 0
 203 0002 064A     		ldr	r2, .L28
 204 0004 1368     		ldr	r3, [r2]
 205              		.loc 1 180 0
 206 0006 011C     		mov	r1, r0
 207              		.loc 1 185 0
 208 0008 002B     		cmp	r3, #0
 209 000a 04D0     		beq	.L27
 210              	.LVL19:
 211              	.L25:
 186:lib/Common/src/syscalls.c **** 
 187:lib/Common/src/syscalls.c ****   base = heap_ptr;      /*  Point to end of heap.                       */
 212              		.loc 1 187 0
 213 000c 1068     		ldr	r0, [r2]
 214              	.LVL20:
 215              	.LVL21:
 188:lib/Common/src/syscalls.c ****   heap_ptr += incr;     /*  Increase heap.                              */
 216              		.loc 1 188 0
 217 000e 4318     		add	r3, r0, r1
 218              	.LVL22:
 219 0010 1360     		str	r3, [r2]
 189:lib/Common/src/syscalls.c **** 
 190:lib/Common/src/syscalls.c ****   return base;          /*  Return pointer to start of new heap area.   */
 191:lib/Common/src/syscalls.c **** }
 220              		.loc 1 191 0
 221              		@ sp needed for prologue
 222 0012 02BC     		pop	{r1}
 223 0014 0847     		bx	r1
 224              	.LVL23:
 225              	.L27:
 226              		.loc 1 185 0
 227 0016 024B     		ldr	r3, .L28+4
 228 0018 1360     		str	r3, [r2]
 229 001a F7E7     		b	.L25
 230              	.L29:
 231              		.align	2
 232              	.L28:
 233 001c 00000000 		.word	.LANCHOR0
 234 0020 00000000 		.word	end
 235              	.LFE12:
 237              		.section	.text._open,"ax",%progbits
 238              		.align	2
 239              		.global	_open
 240              		.code	16
 241              		.thumb_func
 243              	_open:
 244              	.LFB13:
 192:lib/Common/src/syscalls.c **** 
 193:lib/Common/src/syscalls.c **** int _open(const char *path, int flags, ...)
 194:lib/Common/src/syscalls.c **** {
 245              		.loc 1 194 0
 246 0000 0EB4     		push	{r1, r2, r3}
 247              	.LCFI3:
 248              	.LVL24:
 195:lib/Common/src/syscalls.c ****   return 1;
 196:lib/Common/src/syscalls.c **** }
 249              		.loc 1 196 0
 250 0002 0120     		mov	r0, #1
 251              	.LVL25:
 252              		@ sp needed for prologue
 253 0004 03B0     		add	sp, sp, #12
 254 0006 7047     		bx	lr
 255              	.LFE13:
 257              		.section	.text._close,"ax",%progbits
 258              		.align	2
 259              		.global	_close
 260              		.code	16
 261              		.thumb_func
 263              	_close:
 264              	.LFB14:
 197:lib/Common/src/syscalls.c **** 
 198:lib/Common/src/syscalls.c **** int _close(int fd)
 199:lib/Common/src/syscalls.c **** {
 265              		.loc 1 199 0
 266              	.LVL26:
 200:lib/Common/src/syscalls.c ****   return 0;
 201:lib/Common/src/syscalls.c **** }
 267              		.loc 1 201 0
 268 0000 0020     		mov	r0, #0
 269              	.LVL27:
 270              		@ sp needed for prologue
 271 0002 7047     		bx	lr
 272              	.LFE14:
 274              		.section	.text._fstat,"ax",%progbits
 275              		.align	2
 276              		.global	_fstat
 277              		.code	16
 278              		.thumb_func
 280              	_fstat:
 281              	.LFB15:
 202:lib/Common/src/syscalls.c **** 
 203:lib/Common/src/syscalls.c **** int _fstat(int fd, struct stat *st)
 204:lib/Common/src/syscalls.c **** {
 282              		.loc 1 204 0
 283              	.LVL28:
 205:lib/Common/src/syscalls.c ****   st->st_mode = S_IFCHR;
 284              		.loc 1 205 0
 285 0000 8023     		mov	r3, #128
 286 0002 9B01     		lsl	r3, r3, #6
 206:lib/Common/src/syscalls.c ****   return 0;
 207:lib/Common/src/syscalls.c **** }
 287              		.loc 1 207 0
 288 0004 0020     		mov	r0, #0
 289              	.LVL29:
 290              		.loc 1 205 0
 291 0006 4B60     		str	r3, [r1, #4]
 292              		.loc 1 207 0
 293              		@ sp needed for prologue
 294 0008 7047     		bx	lr
 295              	.LFE15:
 297              		.section	.text._isatty,"ax",%progbits
 298              		.align	2
 299              		.global	_isatty
 300              		.code	16
 301              		.thumb_func
 303              	_isatty:
 304              	.LFB16:
 208:lib/Common/src/syscalls.c **** 
 209:lib/Common/src/syscalls.c **** int _isatty(int fd)
 210:lib/Common/src/syscalls.c **** {
 305              		.loc 1 210 0
 306              	.LVL30:
 211:lib/Common/src/syscalls.c ****   return 1;
 212:lib/Common/src/syscalls.c **** }
 307              		.loc 1 212 0
 308 0000 0120     		mov	r0, #1
 309              	.LVL31:
 310              		@ sp needed for prologue
 311 0002 7047     		bx	lr
 312              	.LFE16:
 314              		.section	.text._lseek,"ax",%progbits
 315              		.align	2
 316              		.global	_lseek
 317              		.code	16
 318              		.thumb_func
 320              	_lseek:
 321              	.LFB17:
 213:lib/Common/src/syscalls.c **** 
 214:lib/Common/src/syscalls.c **** 
 215:lib/Common/src/syscalls.c **** int _lseek(int fd, off_t pos, int whence)
 216:lib/Common/src/syscalls.c **** {
 322              		.loc 1 216 0
 323              	.LVL32:
 217:lib/Common/src/syscalls.c ****   return 0;
 218:lib/Common/src/syscalls.c **** }
 324              		.loc 1 218 0
 325 0000 0020     		mov	r0, #0
 326              	.LVL33:
 327              		@ sp needed for prologue
 328 0002 7047     		bx	lr
 329              	.LFE17:
 331              		.section	.text._write,"ax",%progbits
 332              		.align	2
 333              		.global	_write
 334              		.code	16
 335              		.thumb_func
 337              	_write:
 338              	.LFB19:
 219:lib/Common/src/syscalls.c **** 
 220:lib/Common/src/syscalls.c **** int _read(int fd, char *buf, size_t cnt)
 221:lib/Common/src/syscalls.c **** {
 222:lib/Common/src/syscalls.c ****   *buf = getch();
 223:lib/Common/src/syscalls.c **** 
 224:lib/Common/src/syscalls.c ****   return 1;
 225:lib/Common/src/syscalls.c **** }
 226:lib/Common/src/syscalls.c **** 
 227:lib/Common/src/syscalls.c **** int _write(int fd, const char *buf, size_t cnt)
 228:lib/Common/src/syscalls.c **** {
 339              		.loc 1 228 0
 340 0000 70B5     		push	{r4, r5, r6, lr}
 341              	.LCFI4:
 342              	.LVL34:
 343              		.loc 1 228 0
 344 0002 0E1C     		mov	r6, r1
 345 0004 151C     		mov	r5, r2
 229:lib/Common/src/syscalls.c ****   int i;
 230:lib/Common/src/syscalls.c **** 
 231:lib/Common/src/syscalls.c ****   for (i = 0; i < cnt; i++)
 346              		.loc 1 231 0
 347 0006 002A     		cmp	r2, #0
 348 0008 09D0     		beq	.L41
 349              	.LVL35:
 350 000a 0024     		mov	r4, #0
 351              	.LVL36:
 352 000c 0023     		mov	r3, #0
 353              	.L42:
 232:lib/Common/src/syscalls.c ****     putch(buf[i]);
 354              		.loc 1 232 0
 355 000e F15C     		ldrb	r1, [r6, r3]
 356 0010 0020     		mov	r0, #0
 357              	.LVL37:
 358              		.loc 1 231 0
 359 0012 0134     		add	r4, r4, #1
 360              		.loc 1 232 0
 361 0014 FFF7FEFF 		bl	UARTPutch
 362              	.LVL38:
 363              		.loc 1 231 0
 364 0018 231C     		mov	r3, r4
 365 001a A542     		cmp	r5, r4
 366 001c F7D8     		bhi	.L42
 367              	.LVL39:
 368              	.L41:
 233:lib/Common/src/syscalls.c **** 
 234:lib/Common/src/syscalls.c ****   return cnt;
 235:lib/Common/src/syscalls.c **** }
 369              		.loc 1 235 0
 370 001e 281C     		mov	r0, r5
 371              	.LVL40:
 372              		@ sp needed for prologue
 373              	.LVL41:
 374              	.LVL42:
 375              	.LVL43:
 376 0020 70BC     		pop	{r4, r5, r6}
 377 0022 02BC     		pop	{r1}
 378 0024 0847     		bx	r1
 379              	.LFE19:
 381 0026 C046     		.section	.text._write_r,"ax",%progbits
 382              		.align	2
 383              		.global	_write_r
 384              		.code	16
 385              		.thumb_func
 387              	_write_r:
 388              	.LFB3:
 389              		.loc 1 73 0
 390 0000 70B5     		push	{r4, r5, r6, lr}
 391              	.LCFI5:
 392              	.LVL44:
 393              		.loc 1 73 0
 394 0002 1E1C     		mov	r6, r3
 395              		.loc 1 79 0
 396 0004 002B     		cmp	r3, #0
 397 0006 16D0     		beq	.L46
 398 0008 141C     		mov	r4, r2
 399 000a D518     		add	r5, r2, r3
 400              	.LVL45:
 401 000c 05E0     		b	.L48
 402              	.LVL46:
 403              	.L47:
 404              		.loc 1 81 0
 405 000e 0020     		mov	r0, #0
 406              	.LVL47:
 407 0010 0134     		add	r4, r4, #1
 408 0012 FFF7FEFF 		bl	UARTPutch
 409              	.LVL48:
 410              		.loc 1 79 0
 411 0016 AC42     		cmp	r4, r5
 412 0018 0DD0     		beq	.L46
 413              	.LVL49:
 414              	.L48:
 415              		.loc 1 80 0
 416 001a 2178     		ldrb	r1, [r4]
 417              	.LVL50:
 418 001c 0A29     		cmp	r1, #10
 419 001e F6D1     		bne	.L47
 420              	.LVL51:
 421 0020 0020     		mov	r0, #0
 422              	.LVL52:
 423 0022 0D21     		mov	r1, #13
 424 0024 FFF7FEFF 		bl	UARTPutch
 425              	.LVL53:
 426 0028 2178     		ldrb	r1, [r4]
 427              		.loc 1 81 0
 428 002a 0020     		mov	r0, #0
 429 002c 0134     		add	r4, r4, #1
 430 002e FFF7FEFF 		bl	UARTPutch
 431              		.loc 1 79 0
 432 0032 AC42     		cmp	r4, r5
 433 0034 F1D1     		bne	.L48
 434              	.LVL54:
 435              	.L46:
 436              		.loc 1 85 0
 437 0036 301C     		mov	r0, r6
 438              	.LVL55:
 439              		@ sp needed for prologue
 440              	.LVL56:
 441 0038 70BC     		pop	{r4, r5, r6}
 442 003a 02BC     		pop	{r1}
 443 003c 0847     		bx	r1
 444              	.LFE3:
 446 003e C046     		.section	.text._read,"ax",%progbits
 447              		.align	2
 448              		.global	_read
 449              		.code	16
 450              		.thumb_func
 452              	_read:
 453              	.LFB18:
 454              		.loc 1 221 0
 455 0000 10B5     		push	{r4, lr}
 456              	.LCFI6:
 457              	.LVL57:
 458              		.loc 1 222 0
 459 0002 0020     		mov	r0, #0
 460              	.LVL58:
 461              		.loc 1 221 0
 462 0004 0C1C     		mov	r4, r1
 463              		.loc 1 222 0
 464 0006 FFF7FEFF 		bl	UARTGetch
 465              	.LVL59:
 466              		.loc 1 225 0
 467              		@ sp needed for prologue
 468              		.loc 1 222 0
 469 000a 2070     		strb	r0, [r4]
 470              		.loc 1 225 0
 471 000c 0120     		mov	r0, #1
 472              	.LVL60:
 473 000e 10BC     		pop	{r4}
 474 0010 02BC     		pop	{r1}
 475 0012 0847     		bx	r1
 476              	.LFE18:
 478              		.section	.text._read_r,"ax",%progbits
 479              		.align	2
 480              		.global	_read_r
 481              		.code	16
 482              		.thumb_func
 484              	_read_r:
 485              	.LFB2:
 486              		.loc 1 37 0
 487 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 488              	.LCFI7:
 489 0002 4746     		mov	r7, r8
 490 0004 80B4     		push	{r7}
 491              	.LCFI8:
 492              	.LVL61:
 493              		.loc 1 37 0
 494 0006 1E1C     		mov	r6, r3
 495              		.loc 1 43 0
 496 0008 002B     		cmp	r3, #0
 497 000a 1DD0     		beq	.L62
 498              		.loc 1 56 0
 499 000c 023B     		sub	r3, r3, #2
 500              	.LVL62:
 501              		.loc 1 42 0
 502 000e 151C     		mov	r5, r2
 503              	.LVL63:
 504 0010 0024     		mov	r4, #0
 505              	.LVL64:
 506 0012 0027     		mov	r7, #0
 507              		.loc 1 56 0
 508 0014 9846     		mov	r8, r3
 509              	.L61:
 510              		.loc 1 47 0
 511 0016 0020     		mov	r0, #0
 512              	.LVL65:
 513 0018 FFF7FEFF 		bl	UARTGetch
 514              	.LVL66:
 515              		.loc 1 48 0
 516 001c 0028     		cmp	r0, #0
 517 001e FAD0     		beq	.L61
 518              		.loc 1 51 0
 519 0020 2870     		strb	r0, [r5]
 520 0022 0135     		add	r5, r5, #1
 521              		.loc 1 56 0
 522 0024 0D28     		cmp	r0, #13
 523 0026 09D0     		beq	.L63
 524              	.L57:
 525              		.loc 1 43 0
 526 0028 0134     		add	r4, r4, #1
 527 002a 271C     		mov	r7, r4
 528 002c A642     		cmp	r6, r4
 529 002e F2D8     		bhi	.L61
 530              	.LVL67:
 531              	.L55:
 532              		.loc 1 66 0
 533 0030 201C     		mov	r0, r4
 534              	.LVL68:
 535              		@ sp needed for prologue
 536              	.LVL69:
 537              	.LVL70:
 538              	.LVL71:
 539 0032 04BC     		pop	{r2}
 540 0034 9046     		mov	r8, r2
 541 0036 F0BC     		pop	{r4, r5, r6, r7}
 542 0038 02BC     		pop	{r1}
 543 003a 0847     		bx	r1
 544              	.LVL72:
 545              	.L63:
 546              		.loc 1 56 0
 547 003c B845     		cmp	r8, r7
 548 003e F3D3     		bcc	.L57
 549              		.loc 1 58 0
 550 0040 0A23     		mov	r3, #10
 551 0042 2B70     		strb	r3, [r5]
 552              		.loc 1 62 0
 553 0044 0234     		add	r4, r4, #2
 554 0046 F3E7     		b	.L55
 555              	.LVL73:
 556              	.L62:
 557              		.loc 1 43 0
 558 0048 0024     		mov	r4, #0
 559              	.LVL74:
 560 004a F1E7     		b	.L55
 561              	.LFE2:
 563              		.global	__exidx_start
 564              		.global	__exidx_end
 565              		.section	.bss.__exidx_end,"aw",%nobits
 566              		.align	2
 569              	__exidx_end:
 570 0000 00000000 		.space	4
 571              		.section	.bss.__exidx_start,"aw",%nobits
 572              		.align	2
 575              	__exidx_start:
 576 0000 00000000 		.space	4
 577              		.section	.bss.heap_ptr,"aw",%nobits
 578              		.align	2
 579              		.set	.LANCHOR0,. + 0
 582              	heap_ptr:
 583 0000 00000000 		.space	4
 818              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
     /tmp/cc3gAaRQ.s:22     .text._close_r:00000000 $t
     /tmp/cc3gAaRQ.s:27     .text._close_r:00000000 _close_r
     /tmp/cc3gAaRQ.s:40     .text._lseek_r:00000000 $t
     /tmp/cc3gAaRQ.s:45     .text._lseek_r:00000000 _lseek_r
     /tmp/cc3gAaRQ.s:57     .text._fstat_r:00000000 $t
     /tmp/cc3gAaRQ.s:62     .text._fstat_r:00000000 _fstat_r
     /tmp/cc3gAaRQ.s:80     .text.isatty:00000000 $t
     /tmp/cc3gAaRQ.s:85     .text.isatty:00000000 isatty
     /tmp/cc3gAaRQ.s:97     .text._exit:00000000 $t
     /tmp/cc3gAaRQ.s:102    .text._exit:00000000 _exit
     /tmp/cc3gAaRQ.s:114    .text._getpid:00000000 $t
     /tmp/cc3gAaRQ.s:119    .text._getpid:00000000 _getpid
     /tmp/cc3gAaRQ.s:131    .text._kill:00000000 $t
     /tmp/cc3gAaRQ.s:136    .text._kill:00000000 _kill
     /tmp/cc3gAaRQ.s:148    .text._sbrk_r:00000000 $t
     /tmp/cc3gAaRQ.s:153    .text._sbrk_r:00000000 _sbrk_r
     /tmp/cc3gAaRQ.s:186    .text._sbrk_r:0000001c $d
     /tmp/cc3gAaRQ.s:191    .text._sbrk:00000000 $t
     /tmp/cc3gAaRQ.s:196    .text._sbrk:00000000 _sbrk
     /tmp/cc3gAaRQ.s:233    .text._sbrk:0000001c $d
     /tmp/cc3gAaRQ.s:238    .text._open:00000000 $t
     /tmp/cc3gAaRQ.s:243    .text._open:00000000 _open
     /tmp/cc3gAaRQ.s:258    .text._close:00000000 $t
     /tmp/cc3gAaRQ.s:263    .text._close:00000000 _close
     /tmp/cc3gAaRQ.s:275    .text._fstat:00000000 $t
     /tmp/cc3gAaRQ.s:280    .text._fstat:00000000 _fstat
     /tmp/cc3gAaRQ.s:298    .text._isatty:00000000 $t
     /tmp/cc3gAaRQ.s:303    .text._isatty:00000000 _isatty
     /tmp/cc3gAaRQ.s:315    .text._lseek:00000000 $t
     /tmp/cc3gAaRQ.s:320    .text._lseek:00000000 _lseek
     /tmp/cc3gAaRQ.s:332    .text._write:00000000 $t
     /tmp/cc3gAaRQ.s:337    .text._write:00000000 _write
     /tmp/cc3gAaRQ.s:382    .text._write_r:00000000 $t
     /tmp/cc3gAaRQ.s:387    .text._write_r:00000000 _write_r
     /tmp/cc3gAaRQ.s:447    .text._read:00000000 $t
     /tmp/cc3gAaRQ.s:452    .text._read:00000000 _read
     /tmp/cc3gAaRQ.s:479    .text._read_r:00000000 $t
     /tmp/cc3gAaRQ.s:484    .text._read_r:00000000 _read_r
     /tmp/cc3gAaRQ.s:575    .bss.__exidx_start:00000000 __exidx_start
     /tmp/cc3gAaRQ.s:569    .bss.__exidx_end:00000000 __exidx_end
     /tmp/cc3gAaRQ.s:566    .bss.__exidx_end:00000000 $d
     /tmp/cc3gAaRQ.s:572    .bss.__exidx_start:00000000 $d
     /tmp/cc3gAaRQ.s:578    .bss.heap_ptr:00000000 $d
     /tmp/cc3gAaRQ.s:582    .bss.heap_ptr:00000000 heap_ptr
     /tmp/cc3gAaRQ.s:822    .debug_loc:00000000 $d

UNDEFINED SYMBOLS
end
UARTPutch
UARTGetch
