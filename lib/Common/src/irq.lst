   1              		/* Sample initialization file */
   2              	
   3              		.extern main
   4              		.extern exit
   5              	
   6              		.text
   7              		.code 32
   8              	
   9              	
  10              		.align  0
  11              	
  12              		.extern __bss_beg__
  13              		.extern __bss_end__
  14              		.extern __stack_end__
  15              		.extern __data_beg__
  16              		.extern __data_end__
  17              		.extern __data+beg_src__
  18              	
  19              		.global start
  20              		.global _startup
  21              		.global endless_loop
  22              	
  23              		/* Stack Sizes */
  24              	    .set  UND_STACK_SIZE, 0x00000004
  25              	    .set  ABT_STACK_SIZE, 0x00000004
  26              	    .set  FIQ_STACK_SIZE, 0x00000004
  27              	    .set  IRQ_STACK_SIZE, 0X00000100
  28              	    .set  SVC_STACK_SIZE, 0x00000100
  29              	
  30              		/* Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs */
  31              	    .set  MODE_USR, 0x10            /* User Mode */
  32              	    .set  MODE_FIQ, 0x11            /* FIQ Mode */
  33              	    .set  MODE_IRQ, 0x12            /* IRQ Mode */
  34              	    .set  MODE_SVC, 0x13            /* Supervisor Mode */
  35              	    .set  MODE_ABT, 0x17            /* Abort Mode */
  36              	    .set  MODE_UND, 0x1B            /* Undefined Mode */
  37              	    .set  MODE_SYS, 0x1F            /* System Mode */
  38              	
  39              	    .equ  I_BIT, 0x80               /* when I bit is set, IRQ is disabled */
  40              	    .equ  F_BIT, 0x40               /* when F bit is set, FIQ is disabled */
  41              	
  42              	
  43              	start:
  44              	_start:
  45              	_startup:
  46              	_mainCRTStartup:
  47              	
  48              		/* Setup a stack for each mode - note that this only sets up a usable stack
  49              		for system/user, SWI and IRQ modes.   Also each mode is setup with
  50              		interrupts initially disabled. */
  51 0000 B8009FE5 	    ldr   r0, .LC6
  52 0004 DBF021E3 	    msr   CPSR_c, #MODE_UND|I_BIT|F_BIT /* Undefined Instruction Mode */
  53 0008 00D0A0E1 	    mov   sp, r0
  54 000c 040040E2 	    sub   r0, r0, #UND_STACK_SIZE
  55 0010 D7F021E3 	    msr   CPSR_c, #MODE_ABT|I_BIT|F_BIT /* Abort Mode */
  56 0014 00D0A0E1 	    mov   sp, r0
  57 0018 040040E2 	    sub   r0, r0, #ABT_STACK_SIZE
  58 001c D1F021E3 	    msr   CPSR_c, #MODE_FIQ|I_BIT|F_BIT /* FIQ Mode */
  59 0020 00D0A0E1 	    mov   sp, r0
  60 0024 040040E2 	    sub   r0, r0, #FIQ_STACK_SIZE
  61 0028 D2F021E3 	    msr   CPSR_c, #MODE_IRQ|I_BIT|F_BIT /* IRQ Mode */
  62 002c 00D0A0E1 	    mov   sp, r0
  63 0030 010C40E2 	    sub   r0, r0, #IRQ_STACK_SIZE
  64 0034 D3F021E3 	    msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT /* Supervisor Mode */
  65 0038 00D0A0E1 	    mov   sp, r0
  66 003c 010C40E2 	    sub   r0, r0, #SVC_STACK_SIZE
  67 0040 DFF021E3 	    msr   CPSR_c, #MODE_SYS|I_BIT|F_BIT /* System Mode */
  68 0044 00D0A0E1 	    mov   sp, r0
  69              	
  70              		/* We want to start in supervisor mode.  Operation will switch to system
  71              		mode when the first task starts. */
  72 0048 D3F021E3 		msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT
  73              	
  74              		/* Clear BSS. */
  75              	
  76 004c 0010A0E3 		mov     a2, #0			/* Fill value */
  77 0050 01B0A0E1 		mov		fp, a2			/* Null frame pointer */
  78 0054 0170A0E1 		mov		r7, a2			/* Null frame pointer for Thumb */
  79              	
  80 0058 4C109FE5 		ldr		r1, .LC1		/* Start of memory block */
  81 005c 4C309FE5 		ldr		r3, .LC2		/* End of memory block */
  82 0060 013053E0 		subs	r3, r3, r1      /* Length of block */
  83 0064 0300000A 		beq		.end_clear_loop
  84 0068 0020A0E3 		mov		r2, #0
  85              	
  86              	.clear_loop:
  87 006c 0120C1E4 		strb	r2, [r1], #1
  88 0070 013053E2 		subs	r3, r3, #1
  89 0074 FCFFFFCA 		bgt		.clear_loop
  90              	
  91              	.end_clear_loop:
  92              	
  93              		/* Initialise data. */
  94              	
  95 0078 34109FE5 		ldr		r1, .LC3		/* Start of memory block */
  96 007c 34209FE5 		ldr		r2, .LC4		/* End of memory block */
  97 0080 34309FE5 		ldr		r3, .LC5
  98 0084 013053E0 		subs	r3, r3, r1		/* Length of block */
  99 0088 0300000A 		beq		.end_set_loop
 100              	
 101              	.set_loop:
 102 008c 0140D2E4 		ldrb	r4, [r2], #1
 103 0090 0140C1E4 		strb	r4, [r1], #1
 104 0094 013053E2 		subs	r3, r3, #1
 105 0098 FBFFFFCA 		bgt		.set_loop
 106              	
 107              	.end_set_loop:
 108              	
 109 009c 0000A0E3 		mov		r0, #0          /* no arguments  */
 110 00a0 0010A0E3 		mov		r1, #0          /* no argv either */
 111              	
 112 00a4 FEFFFFEB 		bl		main
 113              	
 114              	endless_loop:
 115 00a8 FEFFFFEA 		b               endless_loop
 116              	
 117              	
 118              		.align 0
 119              	
 120              		.LC1:
 121 00ac 00000000 		.word   __bss_beg__
 122              		.LC2:
 123 00b0 00000000 		.word   __bss_end__
 124              		.LC3:
 125 00b4 00000000 		.word   __data_beg__
 126              		.LC4:
 127 00b8 00000000 		.word   __data_beg_src__
 128              		.LC5:
 129 00bc 00000000 		.word   __data_end__
 130              		.LC6:
 131 00c0 00000000 		.word   __stack_end__
 132              	
 133              	
 134              		/* Setup vector table.  Note that undf, pabt, dabt, fiq just execute
 135              		a null loop. */
 136              	
 137              	.section .startup,"ax"
 138              	         .code 32
 139              	         .align 0
 140              	
 141 0000 FEFFFFEA 		b     _start						/* reset - _start			*/
 142 0004 14F09FE5 		ldr   pc, _undf						/* undefined - _undf		*/
 143 0008 14F09FE5 		ldr   pc, _swi						/* SWI - _swi				*/
 144 000c 14F09FE5 		ldr   pc, _pabt						/* program abort - _pabt	*/
 145 0010 14F09FE5 		ldr   pc, _dabt						/* data abort - _dabt		*/
 146 0014 0000A0E1 		nop									/* reserved					*/
 147 0018 20F11FE5 		ldr   pc, [pc,#-0x120]				/* IRQ - read the VIC		*/
 148 001c 0CF09FE5 		ldr   pc, _fiq						/* FIQ - _fiq				*/
 149              	
 150 0020 34000000 	_undf:  .word __undf                    /* undefined				*/
 151 0024 00000000 	_swi:   .word vPortYieldProcessor       /* SWI						*/
 152 0028 38000000 	_pabt:  .word __pabt                    /* program abort			*/
 153 002c 3C000000 	_dabt:  .word __dabt                    /* data abort				*/
 154 0030 40000000 	_fiq:   .word __fiq                     /* FIQ						*/
 155              	
 156 0034 FEFFFFEA 	__undf: b     .                         /* undefined				*/
 157 0038 FEFFFFEA 	__pabt: b     .                         /* program abort			*/
 158 003c FEFFFFEA 	__dabt: b     .                         /* data abort				*/
 159 0040 FEFFFFEA 	__fiq:  b     .                         /* FIQ						*/
DEFINED SYMBOLS
              boot.s:10     .text:00000000 $a
              boot.s:43     .text:00000000 start
              boot.s:45     .text:00000000 _startup
              boot.s:114    .text:000000a8 endless_loop
              boot.s:24     *ABS*:00000004 UND_STACK_SIZE
              boot.s:25     *ABS*:00000004 ABT_STACK_SIZE
              boot.s:26     *ABS*:00000004 FIQ_STACK_SIZE
              boot.s:27     *ABS*:00000100 IRQ_STACK_SIZE
              boot.s:28     *ABS*:00000100 SVC_STACK_SIZE
              boot.s:31     *ABS*:00000010 MODE_USR
              boot.s:32     *ABS*:00000011 MODE_FIQ
              boot.s:33     *ABS*:00000012 MODE_IRQ
              boot.s:34     *ABS*:00000013 MODE_SVC
              boot.s:35     *ABS*:00000017 MODE_ABT
              boot.s:36     *ABS*:0000001b MODE_UND
              boot.s:37     *ABS*:0000001f MODE_SYS
              boot.s:39     *ABS*:00000080 I_BIT
              boot.s:40     *ABS*:00000040 F_BIT
              boot.s:44     .text:00000000 _start
              boot.s:46     .text:00000000 _mainCRTStartup
              boot.s:91     .text:00000078 .end_clear_loop
              boot.s:86     .text:0000006c .clear_loop
              boot.s:107    .text:0000009c .end_set_loop
              boot.s:101    .text:0000008c .set_loop
              boot.s:121    .text:000000ac $d
              boot.s:139    .startup:00000000 $a
              boot.s:150    .startup:00000020 _undf
              boot.s:151    .startup:00000024 _swi
              boot.s:152    .startup:00000028 _pabt
              boot.s:153    .startup:0000002c _dabt
              boot.s:154    .startup:00000030 _fiq
              boot.s:150    .startup:00000020 $d
              boot.s:156    .startup:00000034 __undf
              boot.s:157    .startup:00000038 __pabt
              boot.s:158    .startup:0000003c __dabt
              boot.s:159    .startup:00000040 __fiq
              boot.s:156    .startup:00000034 $a
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
main
__bss_beg__
__bss_end__
__data_beg__
__data_beg_src__
__data_end__
__stack_end__
vPortYieldProcessor
