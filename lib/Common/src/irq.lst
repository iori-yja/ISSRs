   1              		.cpu arm7tdmi-s
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 18, 4
  11              		.code	16
  12              		.file	"irq.c"
  20              	.Ltext0:
  21              		.cfi_sections	.debug_frame
  22              		.section	.text.init_VIC,"ax",%progbits
  23              		.align	2
  24              		.global	init_VIC
  25              		.code	16
  26              		.thumb_func
  28              	init_VIC:
  29              	.LFB0:
  30              		.file 1 "lib/Common/src/irq.c"
   1:lib/Common/src/irq.c **** /*****************************************************************************
   2:lib/Common/src/irq.c ****  *   irq.c: Interrupt handler C file for NXP LPC23xx/24xx Family Microprocessors
   3:lib/Common/src/irq.c ****  *
   4:lib/Common/src/irq.c ****  *   Copyright(C) 2006, NXP Semiconductor
   5:lib/Common/src/irq.c ****  *   All rights reserved.
   6:lib/Common/src/irq.c ****  *
   7:lib/Common/src/irq.c ****  *   History
   8:lib/Common/src/irq.c ****  *   2006.07.13  ver 1.00    Prelimnary version, first Release
   9:lib/Common/src/irq.c ****  *
  10:lib/Common/src/irq.c ****  ******************************************************************************/ 
  11:lib/Common/src/irq.c **** 
  12:lib/Common/src/irq.c **** /* TODO mthomas - volatiles for vect_addr, vect_cntl? */
  13:lib/Common/src/irq.c **** 
  14:lib/Common/src/irq.c **** #include "LPC23xx.h"			/* LPC23XX/24xx Peripheral Registers */
  15:lib/Common/src/irq.c **** #include "target.h"
  16:lib/Common/src/irq.c **** #include "irq.h"
  17:lib/Common/src/irq.c **** 
  18:lib/Common/src/irq.c **** /* Initialize the interrupt controller */
  19:lib/Common/src/irq.c **** /******************************************************************************
  20:lib/Common/src/irq.c **** ** Function name:		init_VIC
  21:lib/Common/src/irq.c **** **
  22:lib/Common/src/irq.c **** ** Descriptions:		Initialize VIC interrupt controller.
  23:lib/Common/src/irq.c **** ** parameters:			None
  24:lib/Common/src/irq.c **** ** Returned value:		None
  25:lib/Common/src/irq.c **** ** 
  26:lib/Common/src/irq.c **** ******************************************************************************/
  27:lib/Common/src/irq.c **** void init_VIC(void) 
  28:lib/Common/src/irq.c **** {
  31              		.loc 1 28 0
  32              		.cfi_startproc
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  40              	.LVL0:
  29:lib/Common/src/irq.c ****     DWORD i = 0;
  30:lib/Common/src/irq.c ****     DWORD *vect_addr, *vect_cntl;
  31:lib/Common/src/irq.c ****    	
  32:lib/Common/src/irq.c ****     /* initialize VIC*/
  33:lib/Common/src/irq.c ****     VICIntEnClr = 0xffffffff;
  41              		.loc 1 33 0
  42 0002 0D48     		ldr	r0, .L6
  34:lib/Common/src/irq.c ****     VICVectAddr = 0;
  43              		.loc 1 34 0
  44 0004 0D4B     		ldr	r3, .L6+4
  33:lib/Common/src/irq.c ****     VICIntEnClr = 0xffffffff;
  45              		.loc 1 33 0
  46 0006 0121     		mov	r1, #1
  47              		.loc 1 34 0
  48 0008 0025     		mov	r5, #0
  33:lib/Common/src/irq.c ****     VICIntEnClr = 0xffffffff;
  49              		.loc 1 33 0
  50 000a 4A42     		neg	r2, r1
  51 000c 0260     		str	r2, [r0]
  52              		.loc 1 34 0
  53 000e 1D60     		str	r5, [r3]
  35:lib/Common/src/irq.c ****     VICIntSelect = 0;
  54              		.loc 1 35 0
  55 0010 0B4B     		ldr	r3, .L6+8
  56 0012 0C48     		ldr	r0, .L6+12
  36:lib/Common/src/irq.c **** 
  37:lib/Common/src/irq.c ****     /* set all the vector and vector control register to 0 */
  38:lib/Common/src/irq.c ****     for ( i = 0; i < VIC_SIZE; i++ )
  57              		.loc 1 38 0
  58 0014 0C4E     		ldr	r6, .L6+16
  35:lib/Common/src/irq.c ****     VICIntSelect = 0;
  59              		.loc 1 35 0
  60 0016 1D60     		str	r5, [r3]
  39:lib/Common/src/irq.c ****     {
  40:lib/Common/src/irq.c **** 		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
  41:lib/Common/src/irq.c **** 		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
  42:lib/Common/src/irq.c **** 		*vect_addr = 0x0;
  43:lib/Common/src/irq.c **** 		*vect_cntl = 0xF;
  61              		.loc 1 43 0
  62 0018 0F24     		mov	r4, #15
  35:lib/Common/src/irq.c ****     VICIntSelect = 0;
  63              		.loc 1 35 0
  64 001a F433     		add	r3, r3, #244
  65              	.LVL1:
  66              	.L2:
  42:lib/Common/src/irq.c **** 		*vect_addr = 0x0;
  67              		.loc 1 42 0 discriminator 2
  68 001c 191C     		mov	r1, r3
  69 001e 20C1     		stmia	r1!, {r5}
  70              		.loc 1 43 0 discriminator 2
  71 0020 021C     		mov	r2, r0
  72 0022 10C2     		stmia	r2!, {r4}
  73              	.LVL2:
  42:lib/Common/src/irq.c **** 		*vect_addr = 0x0;
  74              		.loc 1 42 0 discriminator 2
  75 0024 5D60     		str	r5, [r3, #4]
  76 0026 0B1D     		add	r3, r1, #4
  77              		.loc 1 43 0 discriminator 2
  78 0028 4460     		str	r4, [r0, #4]
  79 002a 101D     		add	r0, r2, #4
  38:lib/Common/src/irq.c ****     for ( i = 0; i < VIC_SIZE; i++ )
  80              		.loc 1 38 0 discriminator 2
  81 002c B342     		cmp	r3, r6
  82 002e F5D1     		bne	.L2
  44:lib/Common/src/irq.c ****     }
  45:lib/Common/src/irq.c ****     return;
  46:lib/Common/src/irq.c **** }
  83              		.loc 1 46 0
  84              		@ sp needed for prologue
  85 0030 70BC     		pop	{r4, r5, r6}
  86 0032 01BC     		pop	{r0}
  87 0034 0047     		bx	r0
  88              	.L7:
  89 0036 C046     		.align	2
  90              	.L6:
  91 0038 14F0FFFF 		.word	-4076
  92 003c 00FFFFFF 		.word	-256
  93 0040 0CF0FFFF 		.word	-4084
  94 0044 00F2FFFF 		.word	-3584
  95 0048 80F1FFFF 		.word	-3712
  96              		.cfi_endproc
  97              	.LFE0:
  99              		.section	.text.install_irq,"ax",%progbits
 100              		.align	2
 101              		.global	install_irq
 102              		.code	16
 103              		.thumb_func
 105              	install_irq:
 106              	.LFB1:
  47:lib/Common/src/irq.c **** 
  48:lib/Common/src/irq.c **** /******************************************************************************
  49:lib/Common/src/irq.c **** ** Function name:		install_irq
  50:lib/Common/src/irq.c **** **
  51:lib/Common/src/irq.c **** ** Descriptions:		Install interrupt handler
  52:lib/Common/src/irq.c **** ** parameters:			Interrupt number, interrupt handler address, 
  53:lib/Common/src/irq.c **** **						interrupt priority
  54:lib/Common/src/irq.c **** ** Returned value:		true or false, return false if IntNum is out of range
  55:lib/Common/src/irq.c **** ** 
  56:lib/Common/src/irq.c **** ******************************************************************************/
  57:lib/Common/src/irq.c **** DWORD install_irq( DWORD IntNumber, void *HandlerAddr, DWORD Priority )
  58:lib/Common/src/irq.c **** {
 107              		.loc 1 58 0
 108              		.cfi_startproc
 109 0000 70B5     		push	{r4, r5, r6, lr}
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 16
 112              		.cfi_offset 4, -16
 113              		.cfi_offset 5, -12
 114              		.cfi_offset 6, -8
 115              		.cfi_offset 14, -4
 116              	.LVL3:
  59:lib/Common/src/irq.c ****     DWORD *vect_addr;
  60:lib/Common/src/irq.c ****     DWORD *vect_cntl;
  61:lib/Common/src/irq.c ****       
  62:lib/Common/src/irq.c ****     VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
 117              		.loc 1 62 0
 118 0002 0124     		mov	r4, #1
 119 0004 0A4B     		ldr	r3, .L11
 120 0006 251C     		mov	r5, r4
 121 0008 8540     		lsl	r5, r5, r0
 122 000a 1D60     		str	r5, [r3]
  63:lib/Common/src/irq.c ****     if ( IntNumber >= VIC_SIZE )
  64:lib/Common/src/irq.c ****     {
  65:lib/Common/src/irq.c **** 		return ( FALSE );
 123              		.loc 1 65 0
 124 000c 0023     		mov	r3, #0
  63:lib/Common/src/irq.c ****     if ( IntNumber >= VIC_SIZE )
 125              		.loc 1 63 0
 126 000e 1F28     		cmp	r0, #31
 127 0010 0AD8     		bhi	.L9
 128              	.LVL4:
  66:lib/Common/src/irq.c ****     }
  67:lib/Common/src/irq.c ****     else
  68:lib/Common/src/irq.c ****     {
  69:lib/Common/src/irq.c **** 		/* find first un-assigned VIC address for the handler */
  70:lib/Common/src/irq.c **** 		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
 129              		.loc 1 70 0
 130 0012 084E     		ldr	r6, .L11+4
 131 0014 8319     		add	r3, r0, r6
  71:lib/Common/src/irq.c **** 		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
  72:lib/Common/src/irq.c **** 		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
 132              		.loc 1 72 0
 133 0016 9E00     		lsl	r6, r3, #2
  71:lib/Common/src/irq.c **** 		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
 134              		.loc 1 71 0
 135 0018 074B     		ldr	r3, .L11+8
 136              		.loc 1 72 0
 137 001a 3160     		str	r1, [r6]
  71:lib/Common/src/irq.c **** 		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
 138              		.loc 1 71 0
 139 001c C618     		add	r6, r0, r3
  73:lib/Common/src/irq.c **** 		*vect_cntl = Priority;
  74:lib/Common/src/irq.c **** 		VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
 140              		.loc 1 74 0
 141 001e 0748     		ldr	r0, .L11+12
 142              	.LVL5:
  73:lib/Common/src/irq.c **** 		*vect_cntl = Priority;
 143              		.loc 1 73 0
 144 0020 B100     		lsl	r1, r6, #2
 145              	.LVL6:
 146 0022 0A60     		str	r2, [r1]
 147              		.loc 1 74 0
 148 0024 0560     		str	r5, [r0]
  75:lib/Common/src/irq.c **** 		return( TRUE );
 149              		.loc 1 75 0
 150 0026 231C     		mov	r3, r4
 151              	.LVL7:
 152              	.L9:
  76:lib/Common/src/irq.c ****     }
  77:lib/Common/src/irq.c **** }
 153              		.loc 1 77 0
 154 0028 181C     		mov	r0, r3
 155              		@ sp needed for prologue
 156 002a 70BC     		pop	{r4, r5, r6}
 157 002c 02BC     		pop	{r1}
 158 002e 0847     		bx	r1
 159              	.L12:
 160              		.align	2
 161              	.L11:
 162 0030 14F0FFFF 		.word	-4076
 163 0034 40FCFF3F 		.word	1073740864
 164 0038 80FCFF3F 		.word	1073740928
 165 003c 10F0FFFF 		.word	-4080
 166              		.cfi_endproc
 167              	.LFE1:
 169              		.text
 170              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 irq.c
     /tmp/cc7DBupy.s:23     .text.init_VIC:00000000 $t
     /tmp/cc7DBupy.s:28     .text.init_VIC:00000000 init_VIC
     /tmp/cc7DBupy.s:91     .text.init_VIC:00000038 $d
     /tmp/cc7DBupy.s:100    .text.install_irq:00000000 $t
     /tmp/cc7DBupy.s:105    .text.install_irq:00000000 install_irq
     /tmp/cc7DBupy.s:162    .text.install_irq:00000030 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
