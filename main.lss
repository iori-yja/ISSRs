
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e978  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000e978  0000e978  00016978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000008c8  40000000  0000e980  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002c8  400008c8  0000f248  000188c8  2**2
                  ALLOC
  4 .ARM.attributes 00000032  00000000  00000000  000188c8  2**0
                  CONTENTS, READONLY
  5 .comment      0000002a  00000000  00000000  000188fa  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006f8  00000000  00000000  00018928  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000caf  00000000  00000000  00019020  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00006247  00000000  00000000  00019ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001b58  00000000  00000000  0001ff16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002b3c  00000000  00000000  00021a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002350  00000000  00000000  000245ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001fc3  00000000  00000000  000268fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003f1e  00000000  00000000  000288bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000008ff  00000000  00000000  0002c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_undf-0x20>:

.section .startup,"ax"
         .code 32
         .align 0

	b     _start						/* reset - _start			*/
       0:	ea0010b2 	b	42d0 <_startup>
	ldr   pc, _undf						/* undefined - _undf		*/
       4:	e59ff014 	ldr	pc, [pc, #20]	; 20 <_undf>
	ldr   pc, _swi						/* SWI - _swi				*/
       8:	e59ff014 	ldr	pc, [pc, #20]	; 24 <_swi>
	ldr   pc, _pabt						/* program abort - _pabt	*/
       c:	e59ff014 	ldr	pc, [pc, #20]	; 28 <_pabt>
	ldr   pc, _dabt						/* data abort - _dabt		*/
      10:	e59ff014 	ldr	pc, [pc, #20]	; 2c <_dabt>
	nop									/* reserved					*/
      14:	e1a00000 	nop			; (mov r0, r0)
	ldr   pc, [pc,#-0x120]				/* IRQ - read the VIC		*/
      18:	e51ff120 	ldr	pc, [pc, #-288]	; ffffff00 <__batteryram_start+0x1ff7bf00>
	ldr   pc, _fiq						/* FIQ - _fiq				*/
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <_fiq>

00000020 <_undf>:
      20:	00000034 	.word	0x00000034

00000024 <_swi>:
      24:	00000098 	.word	0x00000098

00000028 <_pabt>:
      28:	00000038 	.word	0x00000038

0000002c <_dabt>:
      2c:	0000003c 	.word	0x0000003c

00000030 <_fiq>:
      30:	00000040 	.word	0x00000040

00000034 <__undf>:
_swi:   .word vPortYieldProcessor       /* SWI						*/
_pabt:  .word __pabt                    /* program abort			*/
_dabt:  .word __dabt                    /* data abort				*/
_fiq:   .word __fiq                     /* FIQ						*/

__undf: b     .                         /* undefined				*/
      34:	eafffffe 	b	34 <__undf>

00000038 <__pabt>:
__pabt: b     .                         /* program abort			*/
      38:	eafffffe 	b	38 <__pabt>

0000003c <__dabt>:
__dabt: b     .                         /* data abort				*/
      3c:	eafffffe 	b	3c <__dabt>

00000040 <__fiq>:
__fiq:  b     .                         /* FIQ						*/
      40:	eafffffe 	b	40 <__fiq>

00000044 <vPortISRStartFirstTask>:

void vPortISRStartFirstTask( void )
{
	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
      44:	e59f0044 	ldr	r0, [pc, #68]	; 90 <I_BIT+0x10>
      48:	e5900000 	ldr	r0, [r0]
      4c:	e590e000 	ldr	lr, [r0]
      50:	e59f003c 	ldr	r0, [pc, #60]	; 94 <I_BIT+0x14>
      54:	e8be0002 	ldm	lr!, {r1}
      58:	e5801000 	str	r1, [r0]
      5c:	e8be0001 	ldm	lr!, {r0}
      60:	e169f000 	msr	SPSR_fc, r0
      64:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
      68:	e1a00000 	nop			; (mov r0, r0)
      6c:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
      70:	e25ef004 	subs	pc, lr, #4
      74:	e59f000c 	ldr	r0, [pc, #12]	; 88 <I_BIT+0x8>
      78:	e5903000 	ldr	r3, [r0]
      7c:	e59f3008 	ldr	r3, [pc, #8]	; 8c <I_BIT+0xc>
      80:	e5933000 	ldr	r3, [r3]
}
      84:	e12fff1e 	bx	lr
      88:	400008c0 	.word	0x400008c0
      8c:	40000afc 	.word	0x40000afc
      90:	40000afc 	.word	0x40000afc
      94:	400008c0 	.word	0x400008c0

00000098 <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
      98:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
      9c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
      a0:	e94d2000 	stmdb	sp, {sp}^
      a4:	e1a00000 	nop			; (mov r0, r0)
      a8:	e24dd004 	sub	sp, sp, #4
      ac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
      b0:	e9204000 	stmdb	r0!, {lr}
      b4:	e1a0e000 	mov	lr, r0
      b8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
      bc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
      c0:	e1a00000 	nop			; (mov r0, r0)
      c4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
      c8:	e14f0000 	mrs	r0, SPSR
      cc:	e92e0001 	stmdb	lr!, {r0}
      d0:	e59f0064 	ldr	r0, [pc, #100]	; 13c <IRQ_STACK_SIZE+0x3c>
      d4:	e5900000 	ldr	r0, [r0]
      d8:	e92e0001 	stmdb	lr!, {r0}
      dc:	e59f005c 	ldr	r0, [pc, #92]	; 140 <IRQ_STACK_SIZE+0x40>
      e0:	e5900000 	ldr	r0, [r0]
      e4:	e580e000 	str	lr, [r0]
      e8:	e59f2044 	ldr	r2, [pc, #68]	; 134 <IRQ_STACK_SIZE+0x34>
      ec:	e59f3044 	ldr	r3, [pc, #68]	; 138 <IRQ_STACK_SIZE+0x38>
      f0:	e5921000 	ldr	r1, [r2]
      f4:	e5931000 	ldr	r1, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile( "bl			vTaskSwitchContext" );
      f8:	eb0036f6 	bl	dcd8 <__vTaskSwitchContext_from_arm>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
      fc:	e59f003c 	ldr	r0, [pc, #60]	; 140 <IRQ_STACK_SIZE+0x40>
     100:	e5900000 	ldr	r0, [r0]
     104:	e590e000 	ldr	lr, [r0]
     108:	e59f002c 	ldr	r0, [pc, #44]	; 13c <IRQ_STACK_SIZE+0x3c>
     10c:	e8be0002 	ldm	lr!, {r1}
     110:	e5801000 	str	r1, [r0]
     114:	e8be0001 	ldm	lr!, {r0}
     118:	e169f000 	msr	SPSR_fc, r0
     11c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
     120:	e1a00000 	nop			; (mov r0, r0)
     124:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
     128:	e25ef004 	subs	pc, lr, #4
     12c:	e5922000 	ldr	r2, [r2]
     130:	e5933000 	ldr	r3, [r3]
     134:	400008c0 	.word	0x400008c0
     138:	40000afc 	.word	0x40000afc
     13c:	400008c0 	.word	0x400008c0
     140:	40000afc 	.word	0x40000afc

00000144 <vPreemptiveTick>:
	saved on entry as part of the context switch. */
	void vPreemptiveTick( void ) __attribute__((naked));
	void vPreemptiveTick( void )
	{
		/* Save the context of the interrupted task. */
		portSAVE_CONTEXT();	
     144:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     148:	e94d2000 	stmdb	sp, {sp}^
     14c:	e1a00000 	nop			; (mov r0, r0)
     150:	e24dd004 	sub	sp, sp, #4
     154:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     158:	e9204000 	stmdb	r0!, {lr}
     15c:	e1a0e000 	mov	lr, r0
     160:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     164:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
     168:	e1a00000 	nop			; (mov r0, r0)
     16c:	e24ee03c 	sub	lr, lr, #60	; 0x3c
     170:	e14f0000 	mrs	r0, SPSR
     174:	e92e0001 	stmdb	lr!, {r0}
     178:	e59f0084 	ldr	r0, [pc, #132]	; 204 <vPreemptiveTick+0xc0>
     17c:	e5900000 	ldr	r0, [r0]
     180:	e92e0001 	stmdb	lr!, {r0}
     184:	e59f007c 	ldr	r0, [pc, #124]	; 208 <vPreemptiveTick+0xc4>
     188:	e5900000 	ldr	r0, [r0]
     18c:	e580e000 	str	lr, [r0]
     190:	e59f2060 	ldr	r2, [pc, #96]	; 1f8 <vPreemptiveTick+0xb4>
     194:	e59f3060 	ldr	r3, [pc, #96]	; 1fc <vPreemptiveTick+0xb8>
     198:	e5921000 	ldr	r1, [r2]
     19c:	e5931000 	ldr	r1, [r3]

		/* Increment the RTOS tick count, then look for the highest priority 
		task that is ready to run. */
		__asm volatile( "bl vTaskIncrementTick" );
     1a0:	eb0036c7 	bl	dcc4 <__vTaskIncrementTick_from_arm>
		__asm volatile( "bl vTaskSwitchContext" );
     1a4:	eb0036cb 	bl	dcd8 <__vTaskSwitchContext_from_arm>

		/* Ready for the next interrupt. */
		T0IR = 2;
     1a8:	e59f0050 	ldr	r0, [pc, #80]	; 200 <vPreemptiveTick+0xbc>
     1ac:	e3a0c002 	mov	ip, #2
     1b0:	e580c000 	str	ip, [r0]
		VICVectAddr = portCLEAR_VIC_INTERRUPT;
     1b4:	e3e01000 	mvn	r1, #0
     1b8:	e3a00000 	mov	r0, #0
     1bc:	e50100ff 	str	r0, [r1, #-255]	; 0xffffff01
		
		/* Restore the context of the new task. */
		portRESTORE_CONTEXT();
     1c0:	e59f0040 	ldr	r0, [pc, #64]	; 208 <vPreemptiveTick+0xc4>
     1c4:	e5900000 	ldr	r0, [r0]
     1c8:	e590e000 	ldr	lr, [r0]
     1cc:	e59f0030 	ldr	r0, [pc, #48]	; 204 <vPreemptiveTick+0xc0>
     1d0:	e8be0002 	ldm	lr!, {r1}
     1d4:	e5801000 	str	r1, [r0]
     1d8:	e8be0001 	ldm	lr!, {r0}
     1dc:	e169f000 	msr	SPSR_fc, r0
     1e0:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
     1e4:	e1a00000 	nop			; (mov r0, r0)
     1e8:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
     1ec:	e25ef004 	subs	pc, lr, #4
     1f0:	e5922000 	ldr	r2, [r2]
     1f4:	e5933000 	ldr	r3, [r3]
     1f8:	400008c0 	.word	0x400008c0
     1fc:	40000afc 	.word	0x40000afc
     200:	e0004000 	.word	0xe0004000
     204:	400008c0 	.word	0x400008c0
     208:	40000afc 	.word	0x40000afc

0000020c <vPortDisableInterruptsFromThumb>:
	void vPortDisableInterruptsFromThumb( void ) __attribute__ ((naked));
	void vPortEnableInterruptsFromThumb( void ) __attribute__ ((naked));

	void vPortDisableInterruptsFromThumb( void )
	{
		__asm volatile ( 
     20c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     210:	e10f0000 	mrs	r0, CPSR
     214:	e38000c0 	orr	r0, r0, #192	; 0xc0
     218:	e129f000 	msr	CPSR_fc, r0
     21c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     220:	e12fff1e 	bx	lr

00000224 <vPortEnableInterruptsFromThumb>:
			"BX		R14" );					/* Return back to thumb.					*/
	}
			
	void vPortEnableInterruptsFromThumb( void )
	{
		__asm volatile ( 
     224:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     228:	e10f0000 	mrs	r0, CPSR
     22c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
     230:	e129f000 	msr	CPSR_fc, r0
     234:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     238:	e12fff1e 	bx	lr

0000023c <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
     23c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     240:	e10f0000 	mrs	r0, CPSR
     244:	e38000c0 	orr	r0, r0, #192	; 0xc0
     248:	e129f000 	msr	CPSR_fc, r0
     24c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
     250:	e59f300c 	ldr	r3, [pc, #12]	; 264 <vPortEnterCritical+0x28>
     254:	e5930000 	ldr	r0, [r3]
     258:	e2802001 	add	r2, r0, #1
     25c:	e5832000 	str	r2, [r3]
}
     260:	e12fff1e 	bx	lr
     264:	400008c0 	.word	0x400008c0

00000268 <vPortExitCritical>:

void vPortExitCritical( void )
{
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
     268:	e59f3038 	ldr	r3, [pc, #56]	; 2a8 <vPortExitCritical+0x40>
     26c:	e5932000 	ldr	r2, [r3]
     270:	e3520000 	cmp	r2, #0
     274:	012fff1e 	bxeq	lr
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
     278:	e5931000 	ldr	r1, [r3]
     27c:	e2410001 	sub	r0, r1, #1
     280:	e5830000 	str	r0, [r3]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
     284:	e5933000 	ldr	r3, [r3]
     288:	e3530000 	cmp	r3, #0
     28c:	112fff1e 	bxne	lr
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
     290:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     294:	e10f0000 	mrs	r0, CPSR
     298:	e3c000c0 	bic	r0, r0, #192	; 0xc0
     29c:	e129f000 	msr	CPSR_fc, r0
     2a0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     2a4:	e12fff1e 	bx	lr
     2a8:	400008c0 	.word	0x400008c0

000002ac <i2enable>:
Problem	:
****************************************************************************/
void
i2enable ()
{
  PINMODE0 = 0x00000000;
     2ac:	e59f3008 	ldr	r3, [pc, #8]	; 2bc <i2enable+0x10>
     2b0:	e3a02000 	mov	r2, #0
     2b4:	e5832040 	str	r2, [r3, #64]	; 0x40
}
     2b8:	e12fff1e 	bx	lr
     2bc:	e002c000 	.word	0xe002c000

000002c0 <i2cmasterset>:
discribe	:the i2c periphrals which given number will be master
****************************************************************************/
int
i2cmasterset (int a)
{
  switch (a)
     2c0:	e3500001 	cmp	r0, #1
     2c4:	0a00000e 	beq	304 <i2cmasterset+0x44>
     2c8:	e3500002 	cmp	r0, #2
     2cc:	0a000007 	beq	2f0 <i2cmasterset+0x30>
     2d0:	e3500000 	cmp	r0, #0
     2d4:	1a000003 	bne	2e8 <i2cmasterset+0x28>
    {
    case 0:
      I20CONSET = 0x40;
     2d8:	e59f3038 	ldr	r3, [pc, #56]	; 318 <i2cmasterset+0x58>
     2dc:	e3a02040 	mov	r2, #64	; 0x40
     2e0:	e5832000 	str	r2, [r3]
      return 0;
     2e4:	e12fff1e 	bx	lr
    case 2:
      I22CONSET = 0x40;
      return 0;
      break;
    default:
      return 1;
     2e8:	e3a00001 	mov	r0, #1
    }
}
     2ec:	e12fff1e 	bx	lr
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     2f0:	e59f2024 	ldr	r2, [pc, #36]	; 31c <i2cmasterset+0x5c>
     2f4:	e3a0c040 	mov	ip, #64	; 0x40
     2f8:	e582c000 	str	ip, [r2]
      return 0;
     2fc:	e3a00000 	mov	r0, #0
     300:	e12fff1e 	bx	lr
    case 0:
      I20CONSET = 0x40;
      return 0;
      break;
    case 1:
      I21CONSET = 0x40;
     304:	e59f1014 	ldr	r1, [pc, #20]	; 320 <i2cmasterset+0x60>
     308:	e3a00040 	mov	r0, #64	; 0x40
     30c:	e5810000 	str	r0, [r1]
      return 0;
     310:	e3a00000 	mov	r0, #0
     314:	e12fff1e 	bx	lr
     318:	e001c000 	.word	0xe001c000
     31c:	e0080000 	.word	0xe0080000
     320:	e005c000 	.word	0xe005c000

00000324 <i2cstart>:
discribe	:the i2c will start
****************************************************************************/
int
i2cstart (int a)
{
  switch (a)
     324:	e3500001 	cmp	r0, #1
     328:	0a000015 	beq	384 <i2cstart+0x60>
     32c:	e3500002 	cmp	r0, #2
     330:	0a00000b 	beq	364 <i2cstart+0x40>
     334:	e3500000 	cmp	r0, #0
     338:	1a000007 	bne	35c <i2cstart+0x38>
    {
    case 0:
      I20CONSET = 0x60;
     33c:	e59f2060 	ldr	r2, [pc, #96]	; 3a4 <i2cstart+0x80>
     340:	e3a03060 	mov	r3, #96	; 0x60
     344:	e5823000 	str	r3, [r2]
      while (I20STAT != 0x08);
     348:	e5920004 	ldr	r0, [r2, #4]
     34c:	e3500008 	cmp	r0, #8
     350:	1afffffc 	bne	348 <i2cstart+0x24>
      break;
    case 2:
      I22CONSET = 0x60;
      while (I22STAT != 0x08);
//              printf("I2C now started\n");
      return 0;
     354:	e3a00000 	mov	r0, #0
     358:	e12fff1e 	bx	lr
      break;
    default:
      return 1;
     35c:	e3a00001 	mov	r0, #1
    }
}
     360:	e12fff1e 	bx	lr
      I21CONSET = 0x60;
      while (I21STAT != 0x08);
      return 0;
      break;
    case 2:
      I22CONSET = 0x60;
     364:	e59f203c 	ldr	r2, [pc, #60]	; 3a8 <i2cstart+0x84>
     368:	e3a03060 	mov	r3, #96	; 0x60
     36c:	e5823000 	str	r3, [r2]
      while (I22STAT != 0x08);
     370:	e5920004 	ldr	r0, [r2, #4]
     374:	e3500008 	cmp	r0, #8
     378:	1afffffc 	bne	370 <i2cstart+0x4c>
//              printf("I2C now started\n");
      return 0;
     37c:	e3a00000 	mov	r0, #0
     380:	e12fff1e 	bx	lr
      I20CONSET = 0x60;
      while (I20STAT != 0x08);
      return 0;
      break;
    case 1:
      I21CONSET = 0x60;
     384:	e59f2020 	ldr	r2, [pc, #32]	; 3ac <i2cstart+0x88>
     388:	e3a01060 	mov	r1, #96	; 0x60
     38c:	e5821000 	str	r1, [r2]
      while (I21STAT != 0x08);
     390:	e592c004 	ldr	ip, [r2, #4]
     394:	e35c0008 	cmp	ip, #8
     398:	1afffffc 	bne	390 <i2cstart+0x6c>
      break;
    case 2:
      I22CONSET = 0x60;
      while (I22STAT != 0x08);
//              printf("I2C now started\n");
      return 0;
     39c:	e3a00000 	mov	r0, #0
     3a0:	e12fff1e 	bx	lr
     3a4:	e001c000 	.word	0xe001c000
     3a8:	e0080000 	.word	0xe0080000
     3ac:	e005c000 	.word	0xe005c000

000003b0 <i2crestart>:
discribe	:the i2c will restart
****************************************************************************/
int
i2crestart (int a)
{
  switch (a)
     3b0:	e3500001 	cmp	r0, #1
function name	:i2crestart
discribe	:the i2c will restart
****************************************************************************/
int
i2crestart (int a)
{
     3b4:	e92d4008 	push	{r3, lr}
  switch (a)
     3b8:	0a00002d 	beq	474 <i2crestart+0xc4>
     3bc:	e3500002 	cmp	r0, #2
     3c0:	0a000017 	beq	424 <i2crestart+0x74>
     3c4:	e3500000 	cmp	r0, #0
      while ((I22STAT != 0x10) && (I22STAT != 0x08));
      printf ("restarter report...%x", I22STAT);
      return 0;
      break;
    default:
      return 1;
     3c8:	13a00001 	movne	r0, #1
discribe	:the i2c will restart
****************************************************************************/
int
i2crestart (int a)
{
  switch (a)
     3cc:	1a000012 	bne	41c <i2crestart+0x6c>
    {
    case 0:
      I20CONSET = 0x14;
     3d0:	e59f30ec 	ldr	r3, [pc, #236]	; 4c4 <i2crestart+0x114>
     3d4:	e3a01014 	mov	r1, #20
      I20CONCLR = 0x08;
     3d8:	e3a00008 	mov	r0, #8
      I20CONSET = 0x60;
     3dc:	e3a02060 	mov	r2, #96	; 0x60
i2crestart (int a)
{
  switch (a)
    {
    case 0:
      I20CONSET = 0x14;
     3e0:	e5831000 	str	r1, [r3]
      I20CONCLR = 0x08;
     3e4:	e5830018 	str	r0, [r3, #24]
      I20CONSET = 0x60;
     3e8:	e5832000 	str	r2, [r3]
      while ((I20STAT != 0x10) && (I20STAT != 0x08));
     3ec:	ea000002 	b	3fc <i2crestart+0x4c>
     3f0:	e593e004 	ldr	lr, [r3, #4]
     3f4:	e35e0008 	cmp	lr, #8
     3f8:	0a000002 	beq	408 <i2crestart+0x58>
     3fc:	e593c004 	ldr	ip, [r3, #4]
     400:	e35c0010 	cmp	ip, #16
     404:	1afffff9 	bne	3f0 <i2crestart+0x40>
      printf ("restarter report...%x", I20STAT);
     408:	e59f30b4 	ldr	r3, [pc, #180]	; 4c4 <i2crestart+0x114>
     40c:	e59f00b4 	ldr	r0, [pc, #180]	; 4c8 <i2crestart+0x118>
     410:	e5931004 	ldr	r1, [r3, #4]
     414:	eb003642 	bl	dd24 <__printf_from_arm>
      return 0;
     418:	e3a00000 	mov	r0, #0
      return 0;
      break;
    default:
      return 1;
    }
}
     41c:	e8bd4008 	pop	{r3, lr}
     420:	e12fff1e 	bx	lr
      while ((I21STAT != 0x10) && (I21STAT != 0x08));
      printf ("restarter report...%x", I21STAT);
      return 0;
      break;
    case 2:
      I22CONSET = 0x14;
     424:	e59f30a0 	ldr	r3, [pc, #160]	; 4cc <i2crestart+0x11c>
     428:	e3a01014 	mov	r1, #20
      I22CONCLR = 0x08;
     42c:	e3a00008 	mov	r0, #8
      I22CONSET = 0x60;
     430:	e3a02060 	mov	r2, #96	; 0x60
      while ((I21STAT != 0x10) && (I21STAT != 0x08));
      printf ("restarter report...%x", I21STAT);
      return 0;
      break;
    case 2:
      I22CONSET = 0x14;
     434:	e5831000 	str	r1, [r3]
      I22CONCLR = 0x08;
     438:	e5830018 	str	r0, [r3, #24]
      I22CONSET = 0x60;
     43c:	e5832000 	str	r2, [r3]
      while ((I22STAT != 0x10) && (I22STAT != 0x08));
     440:	ea000002 	b	450 <i2crestart+0xa0>
     444:	e593e004 	ldr	lr, [r3, #4]
     448:	e35e0008 	cmp	lr, #8
     44c:	0a000002 	beq	45c <i2crestart+0xac>
     450:	e593c004 	ldr	ip, [r3, #4]
     454:	e35c0010 	cmp	ip, #16
     458:	1afffff9 	bne	444 <i2crestart+0x94>
      printf ("restarter report...%x", I22STAT);
     45c:	e59f3068 	ldr	r3, [pc, #104]	; 4cc <i2crestart+0x11c>
     460:	e59f0060 	ldr	r0, [pc, #96]	; 4c8 <i2crestart+0x118>
     464:	e5931004 	ldr	r1, [r3, #4]
     468:	eb00362d 	bl	dd24 <__printf_from_arm>
      return 0;
     46c:	e3a00000 	mov	r0, #0
     470:	eaffffe9 	b	41c <i2crestart+0x6c>
      while ((I20STAT != 0x10) && (I20STAT != 0x08));
      printf ("restarter report...%x", I20STAT);
      return 0;
      break;
    case 1:
      I21CONSET = 0x14;
     474:	e59f3054 	ldr	r3, [pc, #84]	; 4d0 <i2crestart+0x120>
     478:	e3a01014 	mov	r1, #20
      I21CONCLR = 0x08;
     47c:	e3a00008 	mov	r0, #8
      I21CONSET = 0x60;
     480:	e3a02060 	mov	r2, #96	; 0x60
      while ((I20STAT != 0x10) && (I20STAT != 0x08));
      printf ("restarter report...%x", I20STAT);
      return 0;
      break;
    case 1:
      I21CONSET = 0x14;
     484:	e5831000 	str	r1, [r3]
      I21CONCLR = 0x08;
     488:	e5830018 	str	r0, [r3, #24]
      I21CONSET = 0x60;
     48c:	e5832000 	str	r2, [r3]
      while ((I21STAT != 0x10) && (I21STAT != 0x08));
     490:	ea000002 	b	4a0 <i2crestart+0xf0>
     494:	e593e004 	ldr	lr, [r3, #4]
     498:	e35e0008 	cmp	lr, #8
     49c:	0a000002 	beq	4ac <i2crestart+0xfc>
     4a0:	e593c004 	ldr	ip, [r3, #4]
     4a4:	e35c0010 	cmp	ip, #16
     4a8:	1afffff9 	bne	494 <i2crestart+0xe4>
      printf ("restarter report...%x", I21STAT);
     4ac:	e59f301c 	ldr	r3, [pc, #28]	; 4d0 <i2crestart+0x120>
     4b0:	e59f0010 	ldr	r0, [pc, #16]	; 4c8 <i2crestart+0x118>
     4b4:	e5931004 	ldr	r1, [r3, #4]
     4b8:	eb003619 	bl	dd24 <__printf_from_arm>
      return 0;
     4bc:	e3a00000 	mov	r0, #0
     4c0:	eaffffd5 	b	41c <i2crestart+0x6c>
     4c4:	e001c000 	.word	0xe001c000
     4c8:	0000e4b8 	.word	0x0000e4b8
     4cc:	e0080000 	.word	0xe0080000
     4d0:	e005c000 	.word	0xe005c000

000004d4 <i2cstop>:
discribe	:the i2c will stop
****************************************************************************/
int
i2cstop (int a)
{
  switch (a)
     4d4:	e3500002 	cmp	r0, #2
     4d8:	1a000004 	bne	4f0 <i2cstop+0x1c>
    {
    case 2:
      I22CONSET = 0x50;
     4dc:	e59f3014 	ldr	r3, [pc, #20]	; 4f8 <i2cstop+0x24>
     4e0:	e3a00050 	mov	r0, #80	; 0x50
      I22CONCLR = 0x2C;
     4e4:	e3a0202c 	mov	r2, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     4e8:	e5830000 	str	r0, [r3]
      I22CONCLR = 0x2C;
     4ec:	e5832018 	str	r2, [r3, #24]
//              printf("I2C stopped\n");
      break;
    default:
      return 1;
    }
}
     4f0:	e3a00001 	mov	r0, #1
     4f4:	e12fff1e 	bx	lr
     4f8:	e0080000 	.word	0xe0080000

000004fc <i2csender>:
*****************************************************************************/
void
i2csender (int Continue, unsigned int Data, int Keta)
{
//int i2cStatus;
  if (Continue == 0)
     4fc:	e3500000 	cmp	r0, #0
parameter 	:bus_num,data
return value	:void
*****************************************************************************/
void
i2csender (int Continue, unsigned int Data, int Keta)
{
     500:	e92d4008 	push	{r3, lr}
//int i2cStatus;
  if (Continue == 0)
     504:	0a00000d 	beq	540 <i2csender+0x44>
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     508:	e3520000 	cmp	r2, #0
	{
	  I22DAT = (Data & 0xFF);
     50c:	159f0098 	ldrne	r0, [pc, #152]	; 5ac <i2csender+0xb0>
	  I22CONCLR = 0x28;
     510:	13a0c028 	movne	ip, #40	; 0x28
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     514:	0a000022 	beq	5a4 <i2csender+0xa8>
	{
	  I22DAT = (Data & 0xFF);
     518:	e20130ff 	and	r3, r1, #255	; 0xff
     51c:	e5803008 	str	r3, [r0, #8]
	  I22CONCLR = 0x28;
     520:	e580c018 	str	ip, [r0, #24]
	  while (I22STAT != 0x28);
     524:	e5903004 	ldr	r3, [r0, #4]
     528:	e3530028 	cmp	r3, #40	; 0x28
     52c:	1afffffc 	bne	524 <i2csender+0x28>
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     530:	e2522008 	subs	r2, r2, #8
     534:	0a00001a 	beq	5a4 <i2csender+0xa8>
	{
	  I22DAT = (Data & 0xFF);
	  I22CONCLR = 0x28;
	  while (I22STAT != 0x28);
//              printf("Data%4x::::\n",Data);
	  Data = Data >> 8;
     538:	e1a01421 	lsr	r1, r1, #8
     53c:	eafffff5 	b	518 <i2csender+0x1c>
i2csender (int Continue, unsigned int Data, int Keta)
{
//int i2cStatus;
  if (Continue == 0)
    {
      I22DAT = Data;
     540:	e59f3064 	ldr	r3, [pc, #100]	; 5ac <i2csender+0xb0>
     544:	e5831008 	str	r1, [r3, #8]
      I22CONSET |= 0x04;
     548:	e593c000 	ldr	ip, [r3]
      I22CONCLR = 0x08;
     54c:	e3a02008 	mov	r2, #8
{
//int i2cStatus;
  if (Continue == 0)
    {
      I22DAT = Data;
      I22CONSET |= 0x04;
     550:	e38c0004 	orr	r0, ip, #4
     554:	e5830000 	str	r0, [r3]
      I22CONCLR = 0x08;
     558:	e5832018 	str	r2, [r3, #24]
//      printf("requesting%x",Data);
      while (I22STAT != 0x18 && I22STAT != 0x20);
     55c:	e5932004 	ldr	r2, [r3, #4]
     560:	e3520018 	cmp	r2, #24
     564:	0a000002 	beq	574 <i2csender+0x78>
     568:	e5930004 	ldr	r0, [r3, #4]
     56c:	e3500020 	cmp	r0, #32
     570:	1afffff9 	bne	55c <i2csender+0x60>
      FIO2PIN1 = 0x2;
     574:	e59f0034 	ldr	r0, [pc, #52]	; 5b0 <i2csender+0xb4>
     578:	e3a02002 	mov	r2, #2
     57c:	e54020aa 	strb	r2, [r0, #-170]	; 0xffffff56
      if (I22STAT == 0x20)
     580:	e59fc024 	ldr	ip, [pc, #36]	; 5ac <i2csender+0xb0>
     584:	e59c3004 	ldr	r3, [ip, #4]
     588:	e3530020 	cmp	r3, #32
     58c:	1a000004 	bne	5a4 <i2csender+0xa8>
	{
	  printf ("No such device%4x\n", Data);
     590:	e59f001c 	ldr	r0, [pc, #28]	; 5b4 <i2csender+0xb8>
     594:	eb0035e2 	bl	dd24 <__printf_from_arm>
	  i2cErr = 0x22;
     598:	e59f3018 	ldr	r3, [pc, #24]	; 5b8 <i2csender+0xbc>
     59c:	e3a01022 	mov	r1, #34	; 0x22
     5a0:	e5831000 	str	r1, [r3]
	}
//      if(I22STAT==0x28)i2cErr = 0;
//      break;
    }
//      return i2cErr;
}
     5a4:	e8bd4008 	pop	{r3, lr}
     5a8:	e12fff1e 	bx	lr
     5ac:	e0080000 	.word	0xe0080000
     5b0:	3fffc0ff 	.word	0x3fffc0ff
     5b4:	0000e4d0 	.word	0x0000e4d0
     5b8:	40000924 	.word	0x40000924

000005bc <novorvisesender>:

void
novorvisesender (int Continue, unsigned int Data, int Keta)
{
  if (Continue == 0)
     5bc:	e3500000 	cmp	r0, #0
//      return i2cErr;
}

void
novorvisesender (int Continue, unsigned int Data, int Keta)
{
     5c0:	e92d4038 	push	{r3, r4, r5, lr}
     5c4:	e1a04001 	mov	r4, r1
  if (Continue == 0)
     5c8:	0a000021 	beq	654 <novorvisesender+0x98>
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     5cc:	e3520000 	cmp	r2, #0
	{
	  I22DAT = (Data & 0xFF);
     5d0:	159f10a8 	ldrne	r1, [pc, #168]	; 680 <novorvisesender+0xc4>
	  I22CONCLR = 0x28;
     5d4:	13a00028 	movne	r0, #40	; 0x28
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     5d8:	0a00001b 	beq	64c <novorvisesender+0x90>
	{
	  I22DAT = (Data & 0xFF);
     5dc:	e20430ff 	and	r3, r4, #255	; 0xff
     5e0:	e5813008 	str	r3, [r1, #8]
	  I22CONCLR = 0x28;
     5e4:	e5810018 	str	r0, [r1, #24]
	  while (I22STAT != 0x28);
     5e8:	e591c004 	ldr	ip, [r1, #4]
     5ec:	e35c0028 	cmp	ip, #40	; 0x28
     5f0:	1afffffc 	bne	5e8 <novorvisesender+0x2c>
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     5f4:	e2522008 	subs	r2, r2, #8
     5f8:	0a000013 	beq	64c <novorvisesender+0x90>
	{
	  I22DAT = (Data & 0xFF);
	  I22CONCLR = 0x28;
	  while (I22STAT != 0x28);
	  Data = Data >> 8;
     5fc:	e1a04424 	lsr	r4, r4, #8
     600:	eafffff5 	b	5dc <novorvisesender+0x20>
    {
      I22DAT = Data;
      I22CONSET |= 0x04;
      I22CONCLR = 0x08;
      while (I22STAT != 0x18 && I22STAT != 0x20)
	printf (".");
     604:	e3a0002e 	mov	r0, #46	; 0x2e
     608:	eb003585 	bl	dc24 <__putchar_from_arm>
  if (Continue == 0)
    {
      I22DAT = Data;
      I22CONSET |= 0x04;
      I22CONCLR = 0x08;
      while (I22STAT != 0x18 && I22STAT != 0x20)
     60c:	e5953004 	ldr	r3, [r5, #4]
     610:	e3530018 	cmp	r3, #24
     614:	0a000002 	beq	624 <novorvisesender+0x68>
     618:	e595c004 	ldr	ip, [r5, #4]
     61c:	e35c0020 	cmp	ip, #32
     620:	1afffff7 	bne	604 <novorvisesender+0x48>
	printf (".");
      if (I22STAT == 0x20)
     624:	e59f1054 	ldr	r1, [pc, #84]	; 680 <novorvisesender+0xc4>
     628:	e5910004 	ldr	r0, [r1, #4]
     62c:	e3500020 	cmp	r0, #32
     630:	1a000005 	bne	64c <novorvisesender+0x90>
	{
	  printf ("No such device%4x\n", Data);
     634:	e59f0048 	ldr	r0, [pc, #72]	; 684 <novorvisesender+0xc8>
     638:	e1a01004 	mov	r1, r4
     63c:	eb0035b8 	bl	dd24 <__printf_from_arm>
	  i2cErr = 0x22;
     640:	e59fc040 	ldr	ip, [pc, #64]	; 688 <novorvisesender+0xcc>
     644:	e3a02022 	mov	r2, #34	; 0x22
     648:	e58c2000 	str	r2, [ip]
	}
//                              if(I22STAT==0x28)i2cErr = 0;
//                              break;
    }
//      return i2cErr;
}
     64c:	e8bd4038 	pop	{r3, r4, r5, lr}
     650:	e12fff1e 	bx	lr
void
novorvisesender (int Continue, unsigned int Data, int Keta)
{
  if (Continue == 0)
    {
      I22DAT = Data;
     654:	e59f5024 	ldr	r5, [pc, #36]	; 680 <novorvisesender+0xc4>
     658:	e5851008 	str	r1, [r5, #8]
      I22CONSET |= 0x04;
     65c:	e5952000 	ldr	r2, [r5]
      I22CONCLR = 0x08;
     660:	e3a00008 	mov	r0, #8
novorvisesender (int Continue, unsigned int Data, int Keta)
{
  if (Continue == 0)
    {
      I22DAT = Data;
      I22CONSET |= 0x04;
     664:	e3821004 	orr	r1, r2, #4
     668:	e5851000 	str	r1, [r5]
      I22CONCLR = 0x08;
     66c:	e5850018 	str	r0, [r5, #24]
      while (I22STAT != 0x18 && I22STAT != 0x20)
     670:	e5953004 	ldr	r3, [r5, #4]
     674:	e3530018 	cmp	r3, #24
     678:	1affffe6 	bne	618 <novorvisesender+0x5c>
     67c:	eaffffe8 	b	624 <novorvisesender+0x68>
     680:	e0080000 	.word	0xe0080000
     684:	0000e4d0 	.word	0x0000e4d0
     688:	40000924 	.word	0x40000924

0000068c <tinyreader>:

/***********************************************************************************************************************************
*/
int
tinyreader (int Keta, int Adr, int registernumber)
{
     68c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
upper:
  I22DAT = (Adr + 1);
     690:	e59f40e4 	ldr	r4, [pc, #228]	; 77c <tinyreader+0xf0>

/***********************************************************************************************************************************
*/
int
tinyreader (int Keta, int Adr, int registernumber)
{
     694:	e1a06000 	mov	r6, r0
     698:	e1a05002 	mov	r5, r2
      printf ("reading..  ");
      I22CONSET |= 0x04;
      I22CONCLR = 0x28;
      printf ("Wait\t");
      while (I22STAT != 0x50);
      printf ("%xreg\t%x", registernumber++, I22DAT);
     69c:	e2818001 	add	r8, r1, #1
tinyreader (int Keta, int Adr, int registernumber)
{
upper:
  I22DAT = (Adr + 1);
  I22CONSET |= 0x04;
  I22CONCLR = 0x08;
     6a0:	e3a07008 	mov	r7, #8
*/
int
tinyreader (int Keta, int Adr, int registernumber)
{
upper:
  I22DAT = (Adr + 1);
     6a4:	e5848008 	str	r8, [r4, #8]
  I22CONSET |= 0x04;
     6a8:	e5940000 	ldr	r0, [r4]
     6ac:	e3803004 	orr	r3, r0, #4
     6b0:	e5843000 	str	r3, [r4]
  I22CONCLR = 0x08;
     6b4:	e5847018 	str	r7, [r4, #24]
  while (I22STAT != 0x40 && I22STAT != 0x48);
     6b8:	e5941004 	ldr	r1, [r4, #4]
     6bc:	e3510040 	cmp	r1, #64	; 0x40
     6c0:	0a000002 	beq	6d0 <tinyreader+0x44>
     6c4:	e5942004 	ldr	r2, [r4, #4]
     6c8:	e3520048 	cmp	r2, #72	; 0x48
     6cc:	1afffff9 	bne	6b8 <tinyreader+0x2c>
  if (I22STAT == 0x48)
     6d0:	e594c004 	ldr	ip, [r4, #4]
     6d4:	e35c0048 	cmp	ip, #72	; 0x48
     6d8:	e59f309c 	ldr	r3, [pc, #156]	; 77c <tinyreader+0xf0>
     6dc:	1a000005 	bne	6f8 <tinyreader+0x6c>
    {
      printf ("no acknowlege(%x)\n", I22STAT);
     6e0:	e5941004 	ldr	r1, [r4, #4]
     6e4:	e59f0094 	ldr	r0, [pc, #148]	; 780 <tinyreader+0xf4>
     6e8:	eb00358d 	bl	dd24 <__printf_from_arm>
      i2crestart (2);
     6ec:	e3a00002 	mov	r0, #2
     6f0:	ebffff2e 	bl	3b0 <i2crestart>
      goto upper;
     6f4:	eaffffea 	b	6a4 <tinyreader+0x18>
    }
  if (I22STAT == 0x40);
  while (registernumber != (Keta + 1))
     6f8:	e2866001 	add	r6, r6, #1
     6fc:	e1550006 	cmp	r5, r6
    {
      printf ("no acknowlege(%x)\n", I22STAT);
      i2crestart (2);
      goto upper;
    }
  if (I22STAT == 0x40);
     700:	e5932004 	ldr	r2, [r3, #4]
  while (registernumber != (Keta + 1))
     704:	0a000016 	beq	764 <tinyreader+0xd8>
    {
      printf ("reading..  ");
      I22CONSET |= 0x04;
     708:	e1a04003 	mov	r4, r3
      I22CONCLR = 0x28;
     70c:	e3a08028 	mov	r8, #40	; 0x28
      printf ("Wait\t");
      while (I22STAT != 0x50);
     710:	e1a07003 	mov	r7, r3
      goto upper;
    }
  if (I22STAT == 0x40);
  while (registernumber != (Keta + 1))
    {
      printf ("reading..  ");
     714:	e59f0068 	ldr	r0, [pc, #104]	; 784 <tinyreader+0xf8>
     718:	eb003581 	bl	dd24 <__printf_from_arm>
      I22CONSET |= 0x04;
     71c:	e5941000 	ldr	r1, [r4]
     720:	e3813004 	orr	r3, r1, #4
     724:	e5843000 	str	r3, [r4]
      I22CONCLR = 0x28;
      printf ("Wait\t");
     728:	e59f0058 	ldr	r0, [pc, #88]	; 788 <tinyreader+0xfc>
  if (I22STAT == 0x40);
  while (registernumber != (Keta + 1))
    {
      printf ("reading..  ");
      I22CONSET |= 0x04;
      I22CONCLR = 0x28;
     72c:	e5848018 	str	r8, [r4, #24]
      printf ("Wait\t");
     730:	eb00357b 	bl	dd24 <__printf_from_arm>
      while (I22STAT != 0x50);
     734:	e594e004 	ldr	lr, [r4, #4]
     738:	e35e0050 	cmp	lr, #80	; 0x50
     73c:	1afffffc 	bne	734 <tinyreader+0xa8>
      printf ("%xreg\t%x", registernumber++, I22DAT);
     740:	e1a01005 	mov	r1, r5
     744:	e5972008 	ldr	r2, [r7, #8]
     748:	e59f003c 	ldr	r0, [pc, #60]	; 78c <tinyreader+0x100>
     74c:	eb003574 	bl	dd24 <__printf_from_arm>
     750:	e2855001 	add	r5, r5, #1
      vTaskDelay (10 / portTICK_RATE_MS);
     754:	e3a0000a 	mov	r0, #10
     758:	eb00353b 	bl	dc4c <__vTaskDelay_from_arm>
      printf ("no acknowlege(%x)\n", I22STAT);
      i2crestart (2);
      goto upper;
    }
  if (I22STAT == 0x40);
  while (registernumber != (Keta + 1))
     75c:	e1550006 	cmp	r5, r6
     760:	1affffeb 	bne	714 <tinyreader+0x88>
      vTaskDelay (10 / portTICK_RATE_MS);

//                                      if(a==32)return;
    }

  I22CONCLR = 0x0C;
     764:	e59f2010 	ldr	r2, [pc, #16]	; 77c <tinyreader+0xf0>
     768:	e3a0000c 	mov	r0, #12
     76c:	e5820018 	str	r0, [r2, #24]
//      return i2cErr;
}
     770:	e3a00000 	mov	r0, #0
     774:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     778:	e12fff1e 	bx	lr
     77c:	e0080000 	.word	0xe0080000
     780:	0000e4e4 	.word	0x0000e4e4
     784:	0000e4f8 	.word	0x0000e4f8
     788:	0000e504 	.word	0x0000e504
     78c:	0000e50c 	.word	0x0000e50c

00000790 <i2creader>:

int
i2creader (int Keta, int Adr, int registernumber)
{
     790:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  char Loopy;
upper:
  I22DAT = (Adr + 1);
     794:	e59f4190 	ldr	r4, [pc, #400]	; 92c <i2creader+0x19c>
//      return i2cErr;
}

int
i2creader (int Keta, int Adr, int registernumber)
{
     798:	e1a06000 	mov	r6, r0
     79c:	e1a07002 	mov	r7, r2
	  break;
	case 2:
	  Loopy = '-';
	  break;
	case 3:
	  Loopy = '\\';
     7a0:	e281a001 	add	sl, r1, #1
{
  char Loopy;
upper:
  I22DAT = (Adr + 1);
  I22CONSET |= 0x04;
  I22CONCLR = 0x08;
     7a4:	e3a08008 	mov	r8, #8
int
i2creader (int Keta, int Adr, int registernumber)
{
  char Loopy;
upper:
  I22DAT = (Adr + 1);
     7a8:	e584a008 	str	sl, [r4, #8]
  I22CONSET |= 0x04;
     7ac:	e5941000 	ldr	r1, [r4]
     7b0:	e3810004 	orr	r0, r1, #4
     7b4:	e5840000 	str	r0, [r4]
  I22CONCLR = 0x08;
     7b8:	e5848018 	str	r8, [r4, #24]
  printf ("Status is %x\n", I22STAT);
     7bc:	e59f016c 	ldr	r0, [pc, #364]	; 930 <i2creader+0x1a0>
     7c0:	e5941004 	ldr	r1, [r4, #4]
     7c4:	eb003556 	bl	dd24 <__printf_from_arm>
  while (I22STAT != 0x40 && I22STAT != 0x48)
     7c8:	e5943004 	ldr	r3, [r4, #4]
     7cc:	e3530040 	cmp	r3, #64	; 0x40
     7d0:	1a000005 	bne	7ec <i2creader+0x5c>
     7d4:	ea000007 	b	7f8 <i2creader+0x68>
    printf (".");
     7d8:	e3a0002e 	mov	r0, #46	; 0x2e
     7dc:	eb003510 	bl	dc24 <__putchar_from_arm>
upper:
  I22DAT = (Adr + 1);
  I22CONSET |= 0x04;
  I22CONCLR = 0x08;
  printf ("Status is %x\n", I22STAT);
  while (I22STAT != 0x40 && I22STAT != 0x48)
     7e0:	e5949004 	ldr	r9, [r4, #4]
     7e4:	e3590040 	cmp	r9, #64	; 0x40
     7e8:	0a000002 	beq	7f8 <i2creader+0x68>
     7ec:	e5942004 	ldr	r2, [r4, #4]
     7f0:	e3520048 	cmp	r2, #72	; 0x48
     7f4:	1afffff7 	bne	7d8 <i2creader+0x48>
    printf (".");
  if (I22STAT == 0x48)
     7f8:	e594c004 	ldr	ip, [r4, #4]
     7fc:	e35c0048 	cmp	ip, #72	; 0x48
     800:	e59f9124 	ldr	r9, [pc, #292]	; 92c <i2creader+0x19c>
     804:	1a000005 	bne	820 <i2creader+0x90>
    {
      printf ("no acknowlege(%x)\n", I22STAT);
     808:	e5941004 	ldr	r1, [r4, #4]
     80c:	e59f0120 	ldr	r0, [pc, #288]	; 934 <i2creader+0x1a4>
     810:	eb003543 	bl	dd24 <__printf_from_arm>
      i2crestart (2);
     814:	e3a00002 	mov	r0, #2
     818:	ebfffee4 	bl	3b0 <i2crestart>
      goto upper;
     81c:	eaffffe1 	b	7a8 <i2creader+0x18>
    }
  if (I22STAT == 0x40);
  printf ("Read begin[>  ");
     820:	e59f0110 	ldr	r0, [pc, #272]	; 938 <i2creader+0x1a8>
  while (registernumber++ != (Keta + 1))
     824:	e2866001 	add	r6, r6, #1
    {
      printf ("no acknowlege(%x)\n", I22STAT);
      i2crestart (2);
      goto upper;
    }
  if (I22STAT == 0x40);
     828:	e5993004 	ldr	r3, [r9, #4]
  printf ("Read begin[>  ");
     82c:	eb00353c 	bl	dd24 <__printf_from_arm>
  while (registernumber++ != (Keta + 1))
     830:	e1570006 	cmp	r7, r6
     834:	059f8100 	ldreq	r8, [pc, #256]	; 93c <i2creader+0x1ac>
     838:	0a000030 	beq	900 <i2creader+0x170>
     83c:	e59f80f8 	ldr	r8, [pc, #248]	; 93c <i2creader+0x1ac>
     840:	e2877001 	add	r7, r7, #1
    {
      I22CONSET |= 0x04;
     844:	e1a04009 	mov	r4, r9
      I22CONCLR = 0x28;
     848:	e3a0a028 	mov	sl, #40	; 0x28
    }
  if (I22STAT == 0x40);
  printf ("Read begin[>  ");
  while (registernumber++ != (Keta + 1))
    {
      I22CONSET |= 0x04;
     84c:	e5943000 	ldr	r3, [r4]
     850:	e383e004 	orr	lr, r3, #4
     854:	e584e000 	str	lr, [r4]
      I22CONCLR = 0x28;
     858:	e584a018 	str	sl, [r4, #24]
      while (I22STAT != 0x50);
     85c:	e5940004 	ldr	r0, [r4, #4]
     860:	e3500050 	cmp	r0, #80	; 0x50
     864:	1afffffc 	bne	85c <i2creader+0xcc>
      vTaskDelay (10 / portTICK_RATE_MS);
     868:	e3a0000a 	mov	r0, #10
     86c:	eb0034f6 	bl	dc4c <__vTaskDelay_from_arm>
      switch (registernumber % 4)
     870:	e1a00fc7 	asr	r0, r7, #31
     874:	e1a02f20 	lsr	r2, r0, #30
     878:	e0873002 	add	r3, r7, r2
     87c:	e203c003 	and	ip, r3, #3
     880:	e062100c 	rsb	r1, r2, ip
     884:	e3510003 	cmp	r1, #3
     888:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
     88c:	ea000019 	b	8f8 <i2creader+0x168>
     890:	000008ec 	.word	0x000008ec
     894:	000008e0 	.word	0x000008e0
     898:	000008d4 	.word	0x000008d4
     89c:	000008a0 	.word	0x000008a0
	case 2:
	  Loopy = '-';
	  break;
	case 3:
	  Loopy = '\\';
	  break;
     8a0:	e3a0105c 	mov	r1, #92	; 0x5c
	  break;
	case 2:
	  Loopy = '-';
	  break;
	case 3:
	  Loopy = '\\';
     8a4:	e1a05001 	mov	r5, r1
	  break;
	}
      printf ("\b\b\b=>%c", Loopy);
     8a8:	e59f0090 	ldr	r0, [pc, #144]	; 940 <i2creader+0x1b0>
     8ac:	eb00351c 	bl	dd24 <__printf_from_arm>
      fflush (stdout);
     8b0:	e5981000 	ldr	r1, [r8]
     8b4:	e5910008 	ldr	r0, [r1, #8]
     8b8:	eb0034dc 	bl	dc30 <__fflush_from_arm>
      vTaskDelay (10 / portTICK_RATE_MS);
     8bc:	e3a0000a 	mov	r0, #10
     8c0:	eb0034e1 	bl	dc4c <__vTaskDelay_from_arm>
      i2crestart (2);
      goto upper;
    }
  if (I22STAT == 0x40);
  printf ("Read begin[>  ");
  while (registernumber++ != (Keta + 1))
     8c4:	e1560007 	cmp	r6, r7
     8c8:	0a00000c 	beq	900 <i2creader+0x170>
     8cc:	e2877001 	add	r7, r7, #1
     8d0:	eaffffdd 	b	84c <i2creader+0xbc>
	case 1:
	  Loopy = '/';
	  break;
	case 2:
	  Loopy = '-';
	  break;
     8d4:	e3a0102d 	mov	r1, #45	; 0x2d
	  break;
	case 1:
	  Loopy = '/';
	  break;
	case 2:
	  Loopy = '-';
     8d8:	e1a05001 	mov	r5, r1
	  break;
     8dc:	eafffff1 	b	8a8 <i2creader+0x118>
	case 0:
	  Loopy = '|';
	  break;
	case 1:
	  Loopy = '/';
	  break;
     8e0:	e3a0102f 	mov	r1, #47	; 0x2f
	{
	case 0:
	  Loopy = '|';
	  break;
	case 1:
	  Loopy = '/';
     8e4:	e1a05001 	mov	r5, r1
	  break;
     8e8:	eaffffee 	b	8a8 <i2creader+0x118>
    {
      I22CONSET |= 0x04;
      I22CONCLR = 0x28;
      while (I22STAT != 0x50);
      vTaskDelay (10 / portTICK_RATE_MS);
      switch (registernumber % 4)
     8ec:	e3a0107c 	mov	r1, #124	; 0x7c
	{
	case 0:
	  Loopy = '|';
     8f0:	e1a05001 	mov	r5, r1
     8f4:	eaffffeb 	b	8a8 <i2creader+0x118>
    {
      I22CONSET |= 0x04;
      I22CONCLR = 0x28;
      while (I22STAT != 0x50);
      vTaskDelay (10 / portTICK_RATE_MS);
      switch (registernumber % 4)
     8f8:	e1a01005 	mov	r1, r5
     8fc:	eaffffe9 	b	8a8 <i2creader+0x118>
      printf ("\b\b\b=>%c", Loopy);
      fflush (stdout);
      vTaskDelay (10 / portTICK_RATE_MS);
//                                      if(a==32)return;
    }
  printf ("done.....");
     900:	e59f003c 	ldr	r0, [pc, #60]	; 944 <i2creader+0x1b4>
     904:	eb003506 	bl	dd24 <__printf_from_arm>
  fflush (stdout);
     908:	e5983000 	ldr	r3, [r8]
     90c:	e5930008 	ldr	r0, [r3, #8]
     910:	eb0034c6 	bl	dc30 <__fflush_from_arm>
  I22CONCLR = 0x0C;
     914:	e59f2010 	ldr	r2, [pc, #16]	; 92c <i2creader+0x19c>
     918:	e3a0c00c 	mov	ip, #12
     91c:	e582c018 	str	ip, [r2, #24]
//      return i2cErr;
}
     920:	e3a00000 	mov	r0, #0
     924:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
     928:	e12fff1e 	bx	lr
     92c:	e0080000 	.word	0xe0080000
     930:	0000e518 	.word	0x0000e518
     934:	0000e4e4 	.word	0x0000e4e4
     938:	0000e528 	.word	0x0000e528
     93c:	40000000 	.word	0x40000000
     940:	0000e538 	.word	0x0000e538
     944:	0000e540 	.word	0x0000e540

00000948 <tinyread>:

/*********************************************************************************************************************
*********************************************************************************************************************/
void
tinyread (int subadr, int size, int NumByte)
{
     948:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     94c:	e1a07000 	mov	r7, r0
  i2cstart (2);
     950:	e3a00002 	mov	r0, #2

/*********************************************************************************************************************
*********************************************************************************************************************/
void
tinyread (int subadr, int size, int NumByte)
{
     954:	e1a06001 	mov	r6, r1
     958:	e1a05002 	mov	r5, r2
  i2cstart (2);
  i2cErr = 0;			//i want to read!b So, start.
     95c:	e59f407c 	ldr	r4, [pc, #124]	; 9e0 <tinyread+0x98>
/*********************************************************************************************************************
*********************************************************************************************************************/
void
tinyread (int subadr, int size, int NumByte)
{
  i2cstart (2);
     960:	ebfffe6f 	bl	324 <i2cstart>
  i2cErr = 0;			//i want to read!b So, start.
     964:	e3a0c000 	mov	ip, #0
  novorvisesender (0, 0x42, 8);	//Hey, ?
     968:	e1a0000c 	mov	r0, ip
     96c:	e3a01042 	mov	r1, #66	; 0x42
     970:	e3a02008 	mov	r2, #8
*********************************************************************************************************************/
void
tinyread (int subadr, int size, int NumByte)
{
  i2cstart (2);
  i2cErr = 0;			//i want to read!b So, start.
     974:	e584c000 	str	ip, [r4]
  novorvisesender (0, 0x42, 8);	//Hey, ?
     978:	ebffff0f 	bl	5bc <novorvisesender>
  if (i2cErr == 0x22)
     97c:	e5943000 	ldr	r3, [r4]
     980:	e3530022 	cmp	r3, #34	; 0x22
     984:	0a000012 	beq	9d4 <tinyread+0x8c>
    {
      printf ("fatal");
      i2cstop (2);
      return;
    }
  i2csender (1, subadr, 8);
     988:	e1a01007 	mov	r1, r7
     98c:	e3a02008 	mov	r2, #8
     990:	e3a00001 	mov	r0, #1
     994:	ebfffed8 	bl	4fc <i2csender>
  i2crestart (2);		//if you understand, restart,please.
     998:	e3a00002 	mov	r0, #2
     99c:	ebfffe83 	bl	3b0 <i2crestart>
  tinyreader (size, 0x42, NumByte);	//
     9a0:	e1a00006 	mov	r0, r6
     9a4:	e3a01042 	mov	r1, #66	; 0x42
     9a8:	e1a02005 	mov	r2, r5
     9ac:	ebffff36 	bl	68c <tinyreader>
  vTaskDelay (30 / portTICK_RATE_MS);
     9b0:	e3a0001e 	mov	r0, #30
     9b4:	eb0034a4 	bl	dc4c <__vTaskDelay_from_arm>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     9b8:	e59f0024 	ldr	r0, [pc, #36]	; 9e4 <tinyread+0x9c>
     9bc:	e3a01050 	mov	r1, #80	; 0x50
      I22CONCLR = 0x2C;
     9c0:	e3a0202c 	mov	r2, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     9c4:	e5801000 	str	r1, [r0]
      I22CONCLR = 0x2C;
     9c8:	e5802018 	str	r2, [r0, #24]
  i2csender (1, subadr, 8);
  i2crestart (2);		//if you understand, restart,please.
  tinyreader (size, 0x42, NumByte);	//
  vTaskDelay (30 / portTICK_RATE_MS);
  i2cstop (2);
}
     9cc:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     9d0:	e12fff1e 	bx	lr
  i2cstart (2);
  i2cErr = 0;			//i want to read!b So, start.
  novorvisesender (0, 0x42, 8);	//Hey, ?
  if (i2cErr == 0x22)
    {
      printf ("fatal");
     9d4:	e59f000c 	ldr	r0, [pc, #12]	; 9e8 <tinyread+0xa0>
     9d8:	eb0034d1 	bl	dd24 <__printf_from_arm>
     9dc:	eafffff5 	b	9b8 <tinyread+0x70>
     9e0:	40000924 	.word	0x40000924
     9e4:	e0080000 	.word	0xe0080000
     9e8:	0000e54c 	.word	0x0000e54c

000009ec <SCCBread>:
  i2cstop (2);
}

void
SCCBread (int subadr, int size, int NumByte)
{
     9ec:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     9f0:	e1a07000 	mov	r7, r0
  i2cstart (2);
     9f4:	e3a00002 	mov	r0, #2
  i2cstop (2);
}

void
SCCBread (int subadr, int size, int NumByte)
{
     9f8:	e1a06001 	mov	r6, r1
     9fc:	e1a05002 	mov	r5, r2
  i2cstart (2);
//      vTaskDelay(300 / portTICK_RATE_MS);
  i2cErr = 0;			//i want to read!b So, start.
     a00:	e59f4090 	ldr	r4, [pc, #144]	; a98 <SCCBread+0xac>
}

void
SCCBread (int subadr, int size, int NumByte)
{
  i2cstart (2);
     a04:	ebfffe46 	bl	324 <i2cstart>
//      vTaskDelay(300 / portTICK_RATE_MS);
  i2cErr = 0;			//i want to read!b So, start.
     a08:	e3a0c000 	mov	ip, #0
  i2csender (0, 0x42, 8);	//Hey, ?
     a0c:	e1a0000c 	mov	r0, ip
     a10:	e3a01042 	mov	r1, #66	; 0x42
     a14:	e3a02008 	mov	r2, #8
void
SCCBread (int subadr, int size, int NumByte)
{
  i2cstart (2);
//      vTaskDelay(300 / portTICK_RATE_MS);
  i2cErr = 0;			//i want to read!b So, start.
     a18:	e584c000 	str	ip, [r4]
  i2csender (0, 0x42, 8);	//Hey, ?
     a1c:	ebfffeb6 	bl	4fc <i2csender>
  if (i2cErr == 0x22)
     a20:	e5943000 	ldr	r3, [r4]
     a24:	e3530022 	cmp	r3, #34	; 0x22
     a28:	0a000012 	beq	a78 <SCCBread+0x8c>
    {
      printf ("fatal");
      i2cstop (2);
      return;
    }
  i2csender (1, subadr, 8);
     a2c:	e1a01007 	mov	r1, r7
     a30:	e3a02008 	mov	r2, #8
     a34:	e3a00001 	mov	r0, #1
     a38:	ebfffeaf 	bl	4fc <i2csender>
//      printf("Adress read request at%4x OK\n\n", subadr);     //0x03byte? 
  i2crestart (2);		//if you understand, restart,please.
     a3c:	e3a00002 	mov	r0, #2
     a40:	ebfffe5a 	bl	3b0 <i2crestart>
  i2creader (size, 0x42, NumByte);	//
     a44:	e1a02005 	mov	r2, r5
     a48:	e1a00006 	mov	r0, r6
     a4c:	e3a01042 	mov	r1, #66	; 0x42
     a50:	ebffff4e 	bl	790 <i2creader>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     a54:	e59f3040 	ldr	r3, [pc, #64]	; a9c <SCCBread+0xb0>
     a58:	e3a02050 	mov	r2, #80	; 0x50
      I22CONCLR = 0x2C;
     a5c:	e3a0c02c 	mov	ip, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     a60:	e5832000 	str	r2, [r3]
  i2csender (1, subadr, 8);
//      printf("Adress read request at%4x OK\n\n", subadr);     //0x03byte? 
  i2crestart (2);		//if you understand, restart,please.
  i2creader (size, 0x42, NumByte);	//
  i2cstop (2);
  printf ("Debu331g\n");
     a64:	e59f0034 	ldr	r0, [pc, #52]	; aa0 <SCCBread+0xb4>
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
      I22CONCLR = 0x2C;
     a68:	e583c018 	str	ip, [r3, #24]
  i2csender (1, subadr, 8);
//      printf("Adress read request at%4x OK\n\n", subadr);     //0x03byte? 
  i2crestart (2);		//if you understand, restart,please.
  i2creader (size, 0x42, NumByte);	//
  i2cstop (2);
  printf ("Debu331g\n");
     a6c:	eb0034a2 	bl	dcfc <__puts_from_arm>
}
     a70:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     a74:	e12fff1e 	bx	lr
//      vTaskDelay(300 / portTICK_RATE_MS);
  i2cErr = 0;			//i want to read!b So, start.
  i2csender (0, 0x42, 8);	//Hey, ?
  if (i2cErr == 0x22)
    {
      printf ("fatal");
     a78:	e59f0024 	ldr	r0, [pc, #36]	; aa4 <SCCBread+0xb8>
     a7c:	eb0034a8 	bl	dd24 <__printf_from_arm>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     a80:	e59f0014 	ldr	r0, [pc, #20]	; a9c <SCCBread+0xb0>
     a84:	e3a01050 	mov	r1, #80	; 0x50
      I22CONCLR = 0x2C;
     a88:	e3a0202c 	mov	r2, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     a8c:	e5801000 	str	r1, [r0]
      I22CONCLR = 0x2C;
     a90:	e5802018 	str	r2, [r0, #24]
     a94:	eafffff5 	b	a70 <SCCBread+0x84>
     a98:	40000924 	.word	0x40000924
     a9c:	e0080000 	.word	0xe0080000
     aa0:	0000e554 	.word	0x0000e554
     aa4:	0000e54c 	.word	0x0000e54c

00000aa8 <SCCBwrite>:
  printf ("Debu331g\n");
}

int
SCCBwrite (int subadr, int size, int Data)
{
     aa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     aac:	e1a08000 	mov	r8, r0
  i2cstart (2);
     ab0:	e3a00002 	mov	r0, #2
  printf ("Debu331g\n");
}

int
SCCBwrite (int subadr, int size, int Data)
{
     ab4:	e1a06001 	mov	r6, r1
     ab8:	e1a07002 	mov	r7, r2
  i2cstart (2);
     abc:	ebfffe18 	bl	324 <i2cstart>
//      vTaskDelay(1 / portTICK_RATE_MS);
  FIO2CLR1=2; 
     ac0:	e59f3090 	ldr	r3, [pc, #144]	; b58 <SCCBwrite+0xb0>
  i2cErr = 0;
     ac4:	e59f5090 	ldr	r5, [pc, #144]	; b5c <SCCBwrite+0xb4>
     ac8:	e3a04000 	mov	r4, #0
int
SCCBwrite (int subadr, int size, int Data)
{
  i2cstart (2);
//      vTaskDelay(1 / portTICK_RATE_MS);
  FIO2CLR1=2; 
     acc:	e3a0c002 	mov	ip, #2
     ad0:	e543c0a2 	strb	ip, [r3, #-162]	; 0xffffff5e
  i2cErr = 0;
  i2csender (0, 0x42, 8);
     ad4:	e1a00004 	mov	r0, r4
     ad8:	e3a01042 	mov	r1, #66	; 0x42
     adc:	e3a02008 	mov	r2, #8
SCCBwrite (int subadr, int size, int Data)
{
  i2cstart (2);
//      vTaskDelay(1 / portTICK_RATE_MS);
  FIO2CLR1=2; 
  i2cErr = 0;
     ae0:	e5854000 	str	r4, [r5]
  i2csender (0, 0x42, 8);
     ae4:	ebfffe84 	bl	4fc <i2csender>
  if (i2cErr == 0x22)
     ae8:	e5953000 	ldr	r3, [r5]
     aec:	e3530022 	cmp	r3, #34	; 0x22
     af0:	0a00000f 	beq	b34 <SCCBwrite+0x8c>
    {
      printf ("fatal");
      i2cstop (2);
      return -1;
    }
  i2csender (1, subadr, 8);	//3byte? 
     af4:	e3a00001 	mov	r0, #1
     af8:	e1a01008 	mov	r1, r8
     afc:	e3a02008 	mov	r2, #8
     b00:	ebfffe7d 	bl	4fc <i2csender>
  i2csender (1, Data, size);
     b04:	e3a00001 	mov	r0, #1
     b08:	e1a02006 	mov	r2, r6
     b0c:	e1a01007 	mov	r1, r7
     b10:	ebfffe79 	bl	4fc <i2csender>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     b14:	e59f3044 	ldr	r3, [pc, #68]	; b60 <SCCBwrite+0xb8>
     b18:	e3a02050 	mov	r2, #80	; 0x50
      I22CONCLR = 0x2C;
     b1c:	e3a0c02c 	mov	ip, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     b20:	e5832000 	str	r2, [r3]
      I22CONCLR = 0x2C;
     b24:	e583c018 	str	ip, [r3, #24]
      return -1;
    }
  i2csender (1, subadr, 8);	//3byte? 
  i2csender (1, Data, size);
  i2cstop (2);
  return 0;
     b28:	e1a00004 	mov	r0, r4
}
     b2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     b30:	e12fff1e 	bx	lr
  FIO2CLR1=2; 
  i2cErr = 0;
  i2csender (0, 0x42, 8);
  if (i2cErr == 0x22)
    {
      printf ("fatal");
     b34:	e59f0028 	ldr	r0, [pc, #40]	; b64 <SCCBwrite+0xbc>
     b38:	eb003479 	bl	dd24 <__printf_from_arm>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     b3c:	e59f101c 	ldr	r1, [pc, #28]	; b60 <SCCBwrite+0xb8>
     b40:	e3a00050 	mov	r0, #80	; 0x50
      I22CONCLR = 0x2C;
     b44:	e3a0202c 	mov	r2, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     b48:	e5810000 	str	r0, [r1]
  i2csender (0, 0x42, 8);
  if (i2cErr == 0x22)
    {
      printf ("fatal");
      i2cstop (2);
      return -1;
     b4c:	e3e00000 	mvn	r0, #0
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
      I22CONCLR = 0x2C;
     b50:	e5812018 	str	r2, [r1, #24]
  i2csender (0, 0x42, 8);
  if (i2cErr == 0x22)
    {
      printf ("fatal");
      i2cstop (2);
      return -1;
     b54:	eafffff4 	b	b2c <SCCBwrite+0x84>
     b58:	3fffc0ff 	.word	0x3fffc0ff
     b5c:	40000924 	.word	0x40000924
     b60:	e0080000 	.word	0xe0080000
     b64:	0000e54c 	.word	0x0000e54c

00000b68 <SCCBByteWrite>:

int
SCCBByteWrite (int inp)
{
//      printf("%x,%x,%x",inp >> 8, 8, inp & 0xFF);
 return SCCBwrite ((inp >> 8 & 0xFF), 8, (inp & 0xFF)) ;
     b68:	e1a03420 	lsr	r3, r0, #8
     b6c:	e20020ff 	and	r2, r0, #255	; 0xff
     b70:	e3a01008 	mov	r1, #8
     b74:	e20300ff 	and	r0, r3, #255	; 0xff
     b78:	eaffffca 	b	aa8 <SCCBwrite>

00000b7c <vi2c>:
}

void
vi2c (void *pvParameters)
{
     b7c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  int regpointer = 0;
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
     b80:	e59f4124 	ldr	r4, [pc, #292]	; cac <vi2c+0x130>
     b84:	e3a01000 	mov	r1, #0
     b88:	e1a03001 	mov	r3, r1
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     b8c:	e3a06040 	mov	r6, #64	; 0x40
void
vi2c (void *pvParameters)
{
  int regpointer = 0;
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
     b90:	e3e02000 	mvn	r2, #0
     b94:	e5940000 	ldr	r0, [r4]
     b98:	eb003451 	bl	dce4 <__xQueueGenericReceive_from_arm>
  i2cmasterset (2);
  I22SCLH = 80;
     b9c:	e2865010 	add	r5, r6, #16
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     ba0:	e59f1108 	ldr	r1, [pc, #264]	; cb0 <vi2c+0x134>
  int regpointer = 0;
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
  i2cmasterset (2);
  I22SCLH = 80;
  I22SCLL = 180;
     ba4:	e2852064 	add	r2, r5, #100	; 0x64
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     ba8:	e5816000 	str	r6, [r1]
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
  i2cmasterset (2);
  I22SCLH = 80;
  I22SCLL = 180;
  printf ("Register Reset\n");
     bac:	e59f0100 	ldr	r0, [pc, #256]	; cb4 <vi2c+0x138>
{
  int regpointer = 0;
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
  i2cmasterset (2);
  I22SCLH = 80;
     bb0:	e5815010 	str	r5, [r1, #16]
  I22SCLL = 180;
     bb4:	e5812014 	str	r2, [r1, #20]
  printf ("Register Reset\n");
     bb8:	eb00344f 	bl	dcfc <__puts_from_arm>
  vTaskDelay (300 / portTICK_RATE_MS);
     bbc:	e3a00f4b 	mov	r0, #300	; 0x12c
     bc0:	eb003421 	bl	dc4c <__vTaskDelay_from_arm>
  RESETREG
     bc4:	e3a00d4a 	mov	r0, #4736	; 0x1280
     bc8:	ebffffe6 	bl	b68 <SCCBByteWrite>
  vTaskDelay (200 / portTICK_RATE_MS);
  printf ("Setup begin[> ");
  fflush (stdout);
     bcc:	e59f60e4 	ldr	r6, [pc, #228]	; cb8 <vi2c+0x13c>
  I22SCLH = 80;
  I22SCLL = 180;
  printf ("Register Reset\n");
  vTaskDelay (300 / portTICK_RATE_MS);
  RESETREG
  vTaskDelay (200 / portTICK_RATE_MS);
     bd0:	e3a000c8 	mov	r0, #200	; 0xc8
     bd4:	eb00341c 	bl	dc4c <__vTaskDelay_from_arm>
  printf ("Setup begin[> ");
     bd8:	e59f00dc 	ldr	r0, [pc, #220]	; cbc <vi2c+0x140>
     bdc:	eb003450 	bl	dd24 <__printf_from_arm>
  fflush (stdout);
     be0:	e5963000 	ldr	r3, [r6]
     be4:	e5930008 	ldr	r0, [r3, #8]
     be8:	eb003410 	bl	dc30 <__fflush_from_arm>
     bec:	e59f70cc 	ldr	r7, [pc, #204]	; cc0 <vi2c+0x144>
  for (regpointer = 0; regpointer != 129;)
     bf0:	e3a05000 	mov	r5, #0
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
     bf4:	e7970105 	ldr	r0, [r7, r5, lsl #2]
     bf8:	ebffffda 	bl	b68 <SCCBByteWrite>
     bfc:	e3700001 	cmn	r0, #1
     c00:	0a000026 	beq	ca0 <vi2c+0x124>
      regpointer++;
     c04:	e2855001 	add	r5, r5, #1
      	switch (regpointer % 4)
     c08:	e2051003 	and	r1, r5, #3
     c0c:	e3510002 	cmp	r1, #2
	  break;
	  case 1:
	  Loopy = '/';
	  break;
	  case 2:
	  Loopy = '-';
     c10:	03a0102d 	moveq	r1, #45	; 0x2d
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
      regpointer++;
      	switch (regpointer % 4)
     c14:	0a000005 	beq	c30 <vi2c+0xb4>
     c18:	e3510003 	cmp	r1, #3
	  break;
	  case 2:
	  Loopy = '-';
	  break;
	  case 3:
	  Loopy = '\\';
     c1c:	03a0105c 	moveq	r1, #92	; 0x5c
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
      regpointer++;
      	switch (regpointer % 4)
     c20:	0a000002 	beq	c30 <vi2c+0xb4>
	  {
	  case 0:
	  Loopy = '|';
     c24:	e3510001 	cmp	r1, #1
     c28:	03a0102f 	moveq	r1, #47	; 0x2f
     c2c:	13a0107c 	movne	r1, #124	; 0x7c
	  break;
	  case 3:
	  Loopy = '\\';
	  break;
	  }
	printf ("\b\b\b=>%c", Loopy);
     c30:	e59f008c 	ldr	r0, [pc, #140]	; cc4 <vi2c+0x148>
     c34:	eb00343a 	bl	dd24 <__printf_from_arm>
	fflush (stdout);
     c38:	e5960000 	ldr	r0, [r6]
     c3c:	e5900008 	ldr	r0, [r0, #8]
     c40:	eb0033fa 	bl	dc30 <__fflush_from_arm>
      vTaskDelay (10 / portTICK_RATE_MS);
     c44:	e3a0000a 	mov	r0, #10
     c48:	eb0033ff 	bl	dc4c <__vTaskDelay_from_arm>
  vTaskDelay (300 / portTICK_RATE_MS);
  RESETREG
  vTaskDelay (200 / portTICK_RATE_MS);
  printf ("Setup begin[> ");
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
     c4c:	e3550081 	cmp	r5, #129	; 0x81
     c50:	1affffe7 	bne	bf4 <vi2c+0x78>
	  }
	printf ("\b\b\b=>%c", Loopy);
	fflush (stdout);
      vTaskDelay (10 / portTICK_RATE_MS);
    }
  printf ("\rData transmition End!\n");
     c54:	e59f006c 	ldr	r0, [pc, #108]	; cc8 <vi2c+0x14c>
     c58:	eb003427 	bl	dcfc <__puts_from_arm>
  fflush (stdout);
     c5c:	e5967000 	ldr	r7, [r6]
     c60:	e5970008 	ldr	r0, [r7, #8]
     c64:	eb0033f1 	bl	dc30 <__fflush_from_arm>
  SCCBread (0x00, 0xca, 0);
     c68:	e3a00000 	mov	r0, #0
     c6c:	e1a02000 	mov	r2, r0
     c70:	e3a010ca 	mov	r1, #202	; 0xca
     c74:	ebffff5c 	bl	9ec <SCCBread>
  printf("Semagive");
     c78:	e59f004c 	ldr	r0, [pc, #76]	; ccc <vi2c+0x150>
     c7c:	eb003428 	bl	dd24 <__printf_from_arm>
  xSemaphoreGive (Mutex);
     c80:	e3a01000 	mov	r1, #0
     c84:	e5940000 	ldr	r0, [r4]
     c88:	e1a02001 	mov	r2, r1
     c8c:	e1a03001 	mov	r3, r1
     c90:	eb003404 	bl	dca8 <__xQueueGenericSend_from_arm>
//  vTaskResume ( g_issrhandle );
  vTaskSuspend(NULL);
     c94:	e3a00000 	mov	r0, #0
     c98:	eb0033dc 	bl	dc10 <__vTaskSuspend_from_arm>
     c9c:	eafffffe 	b	c9c <vi2c+0x120>
  vTaskDelay (300 / portTICK_RATE_MS);
  RESETREG
  vTaskDelay (200 / portTICK_RATE_MS);
  printf ("Setup begin[> ");
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
     ca0:	e3550081 	cmp	r5, #129	; 0x81
     ca4:	1affffd2 	bne	bf4 <vi2c+0x78>
     ca8:	eaffffe9 	b	c54 <vi2c+0xd8>
     cac:	40000944 	.word	0x40000944
     cb0:	e0080000 	.word	0xe0080000
     cb4:	0000e560 	.word	0x0000e560
     cb8:	40000000 	.word	0x40000000
     cbc:	0000e570 	.word	0x0000e570
     cc0:	0000e5a4 	.word	0x0000e5a4
     cc4:	0000e538 	.word	0x0000e538
     cc8:	0000e580 	.word	0x0000e580
     ccc:	0000e598 	.word	0x0000e598

00000cd0 <ymzwrite0>:
  while (1);
}

int
ymzwrite0 (int frec, int adr)
{
     cd0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
  FIO4PIN = 0x200 + adr;
  FIO4PIN = 0x100 + (frec & 0xFF);
  FIO4PIN = 0x300 + (frec & 0xFF);
  FIO4PIN = adr + 1;
  FIO4PIN = 0x201 + adr;
  highbyte = (frec >> 8) & 0xFF;
     cd4:	e1a04440 	asr	r4, r0, #8
  while (1);
}

int
ymzwrite0 (int frec, int adr)
{
     cd8:	e1a06000 	mov	r6, r0
  int highbyte;
  FIO4PIN = 0x00;
     cdc:	e59f2050 	ldr	r2, [pc, #80]	; d34 <ymzwrite0+0x64>
  FIO4PIN = adr;
  FIO4PIN = 0x200 + adr;
  FIO4PIN = 0x100 + (frec & 0xFF);
     ce0:	e20600ff 	and	r0, r6, #255	; 0xff
ymzwrite0 (int frec, int adr)
{
  int highbyte;
  FIO4PIN = 0x00;
  FIO4PIN = adr;
  FIO4PIN = 0x200 + adr;
     ce4:	e281cc02 	add	ip, r1, #512	; 0x200
  FIO4PIN = 0x100 + (frec & 0xFF);
  FIO4PIN = 0x300 + (frec & 0xFF);
  FIO4PIN = adr + 1;
  FIO4PIN = 0x201 + adr;
  highbyte = (frec >> 8) & 0xFF;
     ce8:	e20450ff 	and	r5, r4, #255	; 0xff
{
  int highbyte;
  FIO4PIN = 0x00;
  FIO4PIN = adr;
  FIO4PIN = 0x200 + adr;
  FIO4PIN = 0x100 + (frec & 0xFF);
     cec:	e2808c01 	add	r8, r0, #256	; 0x100
  FIO4PIN = 0x300 + (frec & 0xFF);
     cf0:	e2803c03 	add	r3, r0, #768	; 0x300
  FIO4PIN = adr + 1;
     cf4:	e2817001 	add	r7, r1, #1
  FIO4PIN = 0x201 + adr;
     cf8:	e28c6001 	add	r6, ip, #1
  highbyte = (frec >> 8) & 0xFF;
  FIO4PIN = 0x100 + highbyte;
     cfc:	e2855c01 	add	r5, r5, #256	; 0x100
  FIO4PIN = 0x300 + (frec >> 8);
     d00:	e2844c03 	add	r4, r4, #768	; 0x300

int
ymzwrite0 (int frec, int adr)
{
  int highbyte;
  FIO4PIN = 0x00;
     d04:	e3a00000 	mov	r0, #0
     d08:	e5020f6b 	str	r0, [r2, #-3947]	; 0xfffff095
  FIO4PIN = adr;
     d0c:	e5021f6b 	str	r1, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x200 + adr;
     d10:	e502cf6b 	str	ip, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x100 + (frec & 0xFF);
     d14:	e5028f6b 	str	r8, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x300 + (frec & 0xFF);
     d18:	e5023f6b 	str	r3, [r2, #-3947]	; 0xfffff095
  FIO4PIN = adr + 1;
     d1c:	e5027f6b 	str	r7, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x201 + adr;
     d20:	e5026f6b 	str	r6, [r2, #-3947]	; 0xfffff095
  highbyte = (frec >> 8) & 0xFF;
  FIO4PIN = 0x100 + highbyte;
     d24:	e5025f6b 	str	r5, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x300 + (frec >> 8);
     d28:	e5024f6b 	str	r4, [r2, #-3947]	; 0xfffff095
}
     d2c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     d30:	e12fff1e 	bx	lr
     d34:	3fffcfff 	.word	0x3fffcfff

00000d38 <ymzwrite1>:

int
ymzwrite1 (int value, int adr)
{
  FIO4PIN = 0x00;
     d38:	e59f3030 	ldr	r3, [pc, #48]	; d70 <ymzwrite1+0x38>
  FIO4PIN = 0x300 + (frec >> 8);
}

int
ymzwrite1 (int value, int adr)
{
     d3c:	e92d0030 	push	{r4, r5}
  FIO4PIN = 0x00;
  FIO4PIN = adr;
  FIO4PIN = (0x200 + adr);
  FIO4PIN = (0x100 + value);
     d40:	e280cc01 	add	ip, r0, #256	; 0x100
  FIO4PIN = (0x300 + value);
     d44:	e2802c03 	add	r2, r0, #768	; 0x300
int
ymzwrite1 (int value, int adr)
{
  FIO4PIN = 0x00;
  FIO4PIN = adr;
  FIO4PIN = (0x200 + adr);
     d48:	e2814c02 	add	r4, r1, #512	; 0x200
}

int
ymzwrite1 (int value, int adr)
{
  FIO4PIN = 0x00;
     d4c:	e3a05000 	mov	r5, #0
     d50:	e5035f6b 	str	r5, [r3, #-3947]	; 0xfffff095
  FIO4PIN = adr;
  FIO4PIN = (0x200 + adr);
  FIO4PIN = (0x100 + value);
  FIO4PIN = (0x300 + value);
  return adr * 16 + value;
}
     d54:	e0800201 	add	r0, r0, r1, lsl #4

int
ymzwrite1 (int value, int adr)
{
  FIO4PIN = 0x00;
  FIO4PIN = adr;
     d58:	e5031f6b 	str	r1, [r3, #-3947]	; 0xfffff095
  FIO4PIN = (0x200 + adr);
     d5c:	e5034f6b 	str	r4, [r3, #-3947]	; 0xfffff095
  FIO4PIN = (0x100 + value);
     d60:	e503cf6b 	str	ip, [r3, #-3947]	; 0xfffff095
  FIO4PIN = (0x300 + value);
     d64:	e5032f6b 	str	r2, [r3, #-3947]	; 0xfffff095
  return adr * 16 + value;
}
     d68:	e8bd0030 	pop	{r4, r5}
     d6c:	e12fff1e 	bx	lr
     d70:	3fffcfff 	.word	0x3fffcfff

00000d74 <main>:
xSemaphoreHandle Mutex;

/*-----------------------------------------------------------*/
int
main (void)
{
     d74:	b5f0      	push	{r4, r5, r6, r7, lr}
     d76:	b085      	sub	sp, #20
/*******UART initialize***************/
void
UARTint (void)
{
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
     d78:	4f1d      	ldr	r7, [pc, #116]	; (df0 <main+0x7c>)

/*-----------------------------------------------------------*/
int
main (void)
{
  TargetResetInit ();		//
     d7a:	f000 fe77 	bl	1a6c <TargetResetInit>
/*******UART initialize***************/
void
UARTint (void)
{
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
     d7e:	2483      	movs	r4, #131	; 0x83
/*-----------------------------------------------------------*/
int
main (void)
{
  TargetResetInit ();		//
  GPIOResetInit ();
     d80:	f000 fdd0 	bl	1924 <GPIOResetInit>
UARTint (void)
{
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
  Fdiv = (Fpclk / 16) / UART_BAUD;	/*baud rate */
  U0DLM = Fdiv / 256;
     d84:	4b1b      	ldr	r3, [pc, #108]	; (df4 <main+0x80>)
/*******UART initialize***************/
void
UARTint (void)
{
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
     d86:	603c      	str	r4, [r7, #0]
  Fdiv = (Fpclk / 16) / UART_BAUD;	/*baud rate */
  U0DLM = Fdiv / 256;
     d88:	2400      	movs	r4, #0
     d8a:	601c      	str	r4, [r3, #0]
  U0DLL = Fdiv % 256;
     d8c:	2513      	movs	r5, #19
     d8e:	3b04      	subs	r3, #4
     d90:	601d      	str	r5, [r3, #0]
  U0LCR = 0x03;			/* DLAB = 0 */
     d92:	2503      	movs	r5, #3
  U0FCR = 0x07;			/* Enable and reset TX and RX FIFO. */
     d94:	2107      	movs	r1, #7
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
  Fdiv = (Fpclk / 16) / UART_BAUD;	/*baud rate */
  U0DLM = Fdiv / 256;
  U0DLL = Fdiv % 256;
  U0LCR = 0x03;			/* DLAB = 0 */
     d96:	603d      	str	r5, [r7, #0]
  U0FCR = 0x07;			/* Enable and reset TX and RX FIFO. */
     d98:	3f04      	subs	r7, #4
     d9a:	6039      	str	r1, [r7, #0]

  printf ("Hello,");
     d9c:	4816      	ldr	r0, [pc, #88]	; (df8 <main+0x84>)
     d9e:	f004 fb09 	bl	53b4 <printf>
main (void)
{
  TargetResetInit ();		//
  GPIOResetInit ();
  UARTint ();
  FIO2PIN1 = 2;
     da2:	4816      	ldr	r0, [pc, #88]	; (dfc <main+0x88>)
     da4:	2702      	movs	r7, #2
     da6:	7007      	strb	r7, [r0, #0]
  Mutex = xSemaphoreCreateMutex ();
     da8:	f002 f9d6 	bl	3158 <xQueueCreateMutex>
     dac:	4e14      	ldr	r6, [pc, #80]	; (e00 <main+0x8c>)
     dae:	6030      	str	r0, [r6, #0]
  printf (" world!\n");
     db0:	4814      	ldr	r0, [pc, #80]	; (e04 <main+0x90>)
     db2:	f004 fb5b 	bl	546c <puts>
  if(Mutex != NULL){
     db6:	6833      	ldr	r3, [r6, #0]
     db8:	42a3      	cmp	r3, r4
     dba:	d018      	beq.n	dee <main+0x7a>
//      xTaskCreate (vLedTask, (signed portCHAR *) "LED",
//		   configMINIMAL_STACK_SIZE, NULL,
//		   mainCHECK_TASK_PRIORITY - 1, NULL);
      /* Start2csender the tasks defined within this file/specific to this demo. */
    xTaskCreate (ISSR, (signed portCHAR *) "issr", configMINIMAL_STACK_SIZE,
     dbc:	2204      	movs	r2, #4
     dbe:	9200      	str	r2, [sp, #0]
     dc0:	4911      	ldr	r1, [pc, #68]	; (e08 <main+0x94>)
     dc2:	2268      	movs	r2, #104	; 0x68
     dc4:	1c23      	adds	r3, r4, #0
     dc6:	4811      	ldr	r0, [pc, #68]	; (e0c <main+0x98>)
		   NULL, mainCHECK_TASK_PRIORITY +1, NULL);
     xTaskCreate (vi2c, (signed portCHAR *) "LD", configMINIMAL_STACK_SIZE,
		   NULL, mainCHECK_TASK_PRIORITY , NULL);
      vTaskStartScheduler ();
  FIO2SET1 = 2;
     dc8:	4e11      	ldr	r6, [pc, #68]	; (e10 <main+0x9c>)
  if(Mutex != NULL){
//      xTaskCreate (vLedTask, (signed portCHAR *) "LED",
//		   configMINIMAL_STACK_SIZE, NULL,
//		   mainCHECK_TASK_PRIORITY - 1, NULL);
      /* Start2csender the tasks defined within this file/specific to this demo. */
    xTaskCreate (ISSR, (signed portCHAR *) "issr", configMINIMAL_STACK_SIZE,
     dca:	9401      	str	r4, [sp, #4]
     dcc:	9402      	str	r4, [sp, #8]
     dce:	9403      	str	r4, [sp, #12]
     dd0:	f002 fb64 	bl	349c <xTaskGenericCreate>
		   NULL, mainCHECK_TASK_PRIORITY +1, NULL);
     xTaskCreate (vi2c, (signed portCHAR *) "LD", configMINIMAL_STACK_SIZE,
     dd4:	490f      	ldr	r1, [pc, #60]	; (e14 <main+0xa0>)
     dd6:	2268      	movs	r2, #104	; 0x68
     dd8:	1c23      	adds	r3, r4, #0
     dda:	480f      	ldr	r0, [pc, #60]	; (e18 <main+0xa4>)
     ddc:	9500      	str	r5, [sp, #0]
     dde:	9401      	str	r4, [sp, #4]
     de0:	9402      	str	r4, [sp, #8]
     de2:	9403      	str	r4, [sp, #12]
     de4:	f002 fb5a 	bl	349c <xTaskGenericCreate>
		   NULL, mainCHECK_TASK_PRIORITY , NULL);
      vTaskStartScheduler ();
     de8:	f002 fd76 	bl	38d8 <vTaskStartScheduler>
  FIO2SET1 = 2;
     dec:	7037      	strb	r7, [r6, #0]
     dee:	e7fe      	b.n	dee <main+0x7a>
     df0:	e000c00c 	.word	0xe000c00c
     df4:	e000c004 	.word	0xe000c004
     df8:	0000e7c8 	.word	0x0000e7c8
     dfc:	3fffc055 	.word	0x3fffc055
     e00:	40000944 	.word	0x40000944
     e04:	0000e7d0 	.word	0x0000e7d0
     e08:	0000e7d8 	.word	0x0000e7d8
     e0c:	00000ec1 	.word	0x00000ec1
     e10:	3fffc059 	.word	0x3fffc059
     e14:	0000e7e0 	.word	0x0000e7e0
     e18:	00000b7c 	.word	0x00000b7c

00000e1c <getISSI>:

//*******************************************************************************************************
//      ----------------------------------- Routines -------------------------------
void
getISSI (void)
{
     e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e1e:	465f      	mov	r7, fp
     e20:	4656      	mov	r6, sl
     e22:	464d      	mov	r5, r9
     e24:	4644      	mov	r4, r8
     e26:	b4f0      	push	{r4, r5, r6, r7}
  int bitshift = 0;
  int il = 0;
  int prv;
  int crr;
  vTaskDelay (10 / portTICK_RATE_MS);
     e28:	200a      	movs	r0, #10
     e2a:	f002 ff81 	bl	3d30 <vTaskDelay>
     e2e:	4c1b      	ldr	r4, [pc, #108]	; (e9c <getISSI+0x80>)
  while(pdTRUE!=xSemaphoreTake(Mutex, 301 / portTICK_RATE_MS))vTaskDelay( 400 / portTICK_RATE_MS);
     e30:	e003      	b.n	e3a <getISSI+0x1e>
     e32:	20c8      	movs	r0, #200	; 0xc8
     e34:	0040      	lsls	r0, r0, #1
     e36:	f002 ff7b 	bl	3d30 <vTaskDelay>
     e3a:	2100      	movs	r1, #0
     e3c:	6820      	ldr	r0, [r4, #0]
     e3e:	4a18      	ldr	r2, [pc, #96]	; (ea0 <getISSI+0x84>)
     e40:	1c0b      	adds	r3, r1, #0
     e42:	f002 f9d1 	bl	31e8 <xQueueGenericReceive>
     e46:	1c06      	adds	r6, r0, #0
     e48:	2801      	cmp	r0, #1
     e4a:	d1f2      	bne.n	e32 <getISSI+0x16>
  printf ("start ISSI connection\n");
     e4c:	4815      	ldr	r0, [pc, #84]	; (ea4 <getISSI+0x88>)
     e4e:	f004 fb0d 	bl	546c <puts>
     e52:	4a15      	ldr	r2, [pc, #84]	; (ea8 <getISSI+0x8c>)
  while (1)
    {
      il++;
      FIO2SET0 = 1;
     e54:	4b15      	ldr	r3, [pc, #84]	; (eac <getISSI+0x90>)
     e56:	4690      	mov	r8, r2
      prv = FIO2PIN0 & 3;
     e58:	4a15      	ldr	r2, [pc, #84]	; (eb0 <getISSI+0x94>)
     e5a:	4f16      	ldr	r7, [pc, #88]	; (eb4 <getISSI+0x98>)
  while(pdTRUE!=xSemaphoreTake(Mutex, 301 / portTICK_RATE_MS))vTaskDelay( 400 / portTICK_RATE_MS);
  printf ("start ISSI connection\n");
  while (1)
    {
      il++;
      FIO2SET0 = 1;
     e5c:	469b      	mov	fp, r3
     e5e:	46b1      	mov	r9, r6
      prv = FIO2PIN0 & 3;
     e60:	4692      	mov	sl, r2
  while(pdTRUE!=xSemaphoreTake(Mutex, 301 / portTICK_RATE_MS))vTaskDelay( 400 / portTICK_RATE_MS);
  printf ("start ISSI connection\n");
  while (1)
    {
      il++;
      FIO2SET0 = 1;
     e62:	464a      	mov	r2, r9
     e64:	465b      	mov	r3, fp
     e66:	701a      	strb	r2, [r3, #0]
      prv = FIO2PIN0 & 3;
      bitshift = (bitshift << 1) + ((prv & 2) >> 1);
      vTaskDelay (100 / portTICK_RATE_MS);
     e68:	2064      	movs	r0, #100	; 0x64
  printf ("start ISSI connection\n");
  while (1)
    {
      il++;
      FIO2SET0 = 1;
      prv = FIO2PIN0 & 3;
     e6a:	4653      	mov	r3, sl
     e6c:	781d      	ldrb	r5, [r3, #0]
      bitshift = (bitshift << 1) + ((prv & 2) >> 1);
      vTaskDelay (100 / portTICK_RATE_MS);
     e6e:	f002 ff5f 	bl	3d30 <vTaskDelay>
      FIO2CLR0 = 1;
     e72:	4b11      	ldr	r3, [pc, #68]	; (eb8 <getISSI+0x9c>)
  printf ("start ISSI connection\n");
  while (1)
    {
      il++;
      FIO2SET0 = 1;
      prv = FIO2PIN0 & 3;
     e74:	2403      	movs	r4, #3
      bitshift = (bitshift << 1) + ((prv & 2) >> 1);
      vTaskDelay (100 / portTICK_RATE_MS);
      FIO2CLR0 = 1;
     e76:	701e      	strb	r6, [r3, #0]
  printf ("start ISSI connection\n");
  while (1)
    {
      il++;
      FIO2SET0 = 1;
      prv = FIO2PIN0 & 3;
     e78:	4025      	ands	r5, r4
      bitshift = (bitshift << 1) + ((prv & 2) >> 1);
      vTaskDelay (100 / portTICK_RATE_MS);
      FIO2CLR0 = 1;
//      FIO2CLR1 = 2;
      FIO2SET1 = 2;
     e7a:	3b03      	subs	r3, #3
     e7c:	2002      	movs	r0, #2
     e7e:	7018      	strb	r0, [r3, #0]
      printf ("prv=%x", prv);
     e80:	1c29      	adds	r1, r5, #0
     e82:	1c38      	adds	r0, r7, #0
     e84:	f004 fa96 	bl	53b4 <printf>
      crr = FIO0PIN & 3;
     e88:	490c      	ldr	r1, [pc, #48]	; (ebc <getISSI+0xa0>)
     e8a:	6809      	ldr	r1, [r1, #0]
      printf ("Cr=%d", crr);
     e8c:	4640      	mov	r0, r8
      vTaskDelay (100 / portTICK_RATE_MS);
      FIO2CLR0 = 1;
//      FIO2CLR1 = 2;
      FIO2SET1 = 2;
      printf ("prv=%x", prv);
      crr = FIO0PIN & 3;
     e8e:	4021      	ands	r1, r4
      printf ("Cr=%d", crr);
     e90:	f004 fa90 	bl	53b4 <printf>
      if (crr & 2 != prv & 2)
	{
	  printf ("-%d\t%d\n", crr, il);
	  break;
	}
      vTaskDelay (100 / portTICK_RATE_MS);
     e94:	2064      	movs	r0, #100	; 0x64
     e96:	f002 ff4b 	bl	3d30 <vTaskDelay>
    }
     e9a:	e7e2      	b.n	e62 <getISSI+0x46>
     e9c:	40000944 	.word	0x40000944
     ea0:	0000012d 	.word	0x0000012d
     ea4:	0000e7e4 	.word	0x0000e7e4
     ea8:	0000e804 	.word	0x0000e804
     eac:	3fffc058 	.word	0x3fffc058
     eb0:	3fffc054 	.word	0x3fffc054
     eb4:	0000e7fc 	.word	0x0000e7fc
     eb8:	3fffc05c 	.word	0x3fffc05c
     ebc:	3fffc014 	.word	0x3fffc014

00000ec0 <ISSR>:
}

/*-----------------------------------------------------------*/
void
ISSR (void *pvParameters)
{
     ec0:	b510      	push	{r4, lr}
  unsigned int tmpData;
  vTaskDelay (30 / portTICK_RATE_MS);
     ec2:	201e      	movs	r0, #30
     ec4:	f002 ff34 	bl	3d30 <vTaskDelay>
     ec8:	4c0a      	ldr	r4, [pc, #40]	; (ef4 <ISSR+0x34>)
  while (!xSemaphoreTake (Mutex, 1 / portTICK_RATE_MS));
     eca:	2100      	movs	r1, #0
     ecc:	6820      	ldr	r0, [r4, #0]
     ece:	2201      	movs	r2, #1
     ed0:	1c0b      	adds	r3, r1, #0
     ed2:	f002 f989 	bl	31e8 <xQueueGenericReceive>
     ed6:	2800      	cmp	r0, #0
     ed8:	d0f7      	beq.n	eca <ISSR+0xa>
  vTaskDelay (30 / portTICK_RATE_MS);
     eda:	201e      	movs	r0, #30
     edc:	f002 ff28 	bl	3d30 <vTaskDelay>
  FIO2CLR1 = 0xFF;
     ee0:	4b05      	ldr	r3, [pc, #20]	; (ef8 <ISSR+0x38>)
     ee2:	22ff      	movs	r2, #255	; 0xff
     ee4:	701a      	strb	r2, [r3, #0]
  while (1)
    {
      getISSI ();
     ee6:	f7ff ff99 	bl	e1c <getISSI>
      vTaskDelay (300 / portTICK_RATE_MS);
     eea:	2096      	movs	r0, #150	; 0x96
     eec:	0040      	lsls	r0, r0, #1
     eee:	f002 ff1f 	bl	3d30 <vTaskDelay>
     ef2:	e7f8      	b.n	ee6 <ISSR+0x26>
     ef4:	40000944 	.word	0x40000944
     ef8:	3fffc05d 	.word	0x3fffc05d

00000efc <vApplicationTickHook>:

void
vApplicationTickHook (void)
{

}
     efc:	4770      	bx	lr
     efe:	46c0      	nop			; (mov r8, r8)

00000f00 <vtrsTask>:
    }
}

void
vtrsTask (void *pvParameters)
{
     f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f02:	465f      	mov	r7, fp
     f04:	4656      	mov	r6, sl
     f06:	464d      	mov	r5, r9
     f08:	4644      	mov	r4, r8
     f0a:	b4f0      	push	{r4, r5, r6, r7}
  vTaskDelay (300 / portTICK_RATE_MS);
     f0c:	2096      	movs	r0, #150	; 0x96
     f0e:	0040      	lsls	r0, r0, #1
     f10:	f002 ff0e 	bl	3d30 <vTaskDelay>
     f14:	4924      	ldr	r1, [pc, #144]	; (fa8 <vtrsTask+0xa8>)
     f16:	4a25      	ldr	r2, [pc, #148]	; (fac <vtrsTask+0xac>)
     f18:	4b25      	ldr	r3, [pc, #148]	; (fb0 <vtrsTask+0xb0>)
     f1a:	468a      	mov	sl, r1
     f1c:	4e25      	ldr	r6, [pc, #148]	; (fb4 <vtrsTask+0xb4>)
    {
      if ((2 * res[6]) <= (white + black))
	{
	  printf ("migi");
	  left = 0;
	  right = 10;
     f1e:	210a      	movs	r1, #10
     f20:	4d25      	ldr	r5, [pc, #148]	; (fb8 <vtrsTask+0xb8>)
     f22:	4c26      	ldr	r4, [pc, #152]	; (fbc <vtrsTask+0xbc>)
     f24:	4f26      	ldr	r7, [pc, #152]	; (fc0 <vtrsTask+0xc0>)
     f26:	4690      	mov	r8, r2
     f28:	469b      	mov	fp, r3
     f2a:	4689      	mov	r9, r1
}

void
vtrsTask (void *pvParameters)
{
  vTaskDelay (300 / portTICK_RATE_MS);
     f2c:	6832      	ldr	r2, [r6, #0]
     f2e:	682b      	ldr	r3, [r5, #0]
     f30:	18d3      	adds	r3, r2, r3
     f32:	e003      	b.n	f3c <vtrsTask+0x3c>
		 || ((2 * res[3]) <= (white + black))
		 || ((2 * res[4]) <= (white + black)));
	  left = 10;
	  right = 10;
	}
      if ((2 * res[4]) <= ((white + black)))
     f34:	6921      	ldr	r1, [r4, #16]
     f36:	0048      	lsls	r0, r1, #1
     f38:	4298      	cmp	r0, r3
     f3a:	d91b      	bls.n	f74 <vtrsTask+0x74>
vtrsTask (void *pvParameters)
{
  vTaskDelay (300 / portTICK_RATE_MS);
  for (;;)
    {
      if ((2 * res[6]) <= (white + black))
     f3c:	69a0      	ldr	r0, [r4, #24]
     f3e:	0041      	lsls	r1, r0, #1
     f40:	4299      	cmp	r1, r3
     f42:	d8f7      	bhi.n	f34 <vtrsTask+0x34>
	{
	  printf ("migi");
     f44:	4650      	mov	r0, sl
     f46:	f004 fa35 	bl	53b4 <printf>
	  left = 0;
	  right = 10;
     f4a:	6828      	ldr	r0, [r5, #0]
     f4c:	6833      	ldr	r3, [r6, #0]
     f4e:	464a      	mov	r2, r9
     f50:	603a      	str	r2, [r7, #0]
     f52:	68a1      	ldr	r1, [r4, #8]
     f54:	18c3      	adds	r3, r0, r3
     f56:	68e2      	ldr	r2, [r4, #12]
     f58:	6920      	ldr	r0, [r4, #16]
     f5a:	0049      	lsls	r1, r1, #1
     f5c:	0052      	lsls	r2, r2, #1
     f5e:	0040      	lsls	r0, r0, #1
	  while ((2 * res[2]) <= (white + black)
     f60:	4299      	cmp	r1, r3
     f62:	d920      	bls.n	fa6 <vtrsTask+0xa6>
		 || ((2 * res[3]) <= (white + black))
     f64:	4293      	cmp	r3, r2
     f66:	d2fb      	bcs.n	f60 <vtrsTask+0x60>
		 || ((2 * res[4]) <= (white + black)));
     f68:	4283      	cmp	r3, r0
     f6a:	d2f9      	bcs.n	f60 <vtrsTask+0x60>
	  left = 10;
     f6c:	4649      	mov	r1, r9
     f6e:	4642      	mov	r2, r8
     f70:	6011      	str	r1, [r2, #0]
     f72:	e7df      	b.n	f34 <vtrsTask+0x34>
	  right = 10;
	}
      if ((2 * res[4]) <= ((white + black)))
	{
	  printf ("tyuou");
     f74:	4658      	mov	r0, fp
     f76:	f004 fa1d 	bl	53b4 <printf>
	  left = 10;
     f7a:	464b      	mov	r3, r9
     f7c:	4641      	mov	r1, r8
     f7e:	600b      	str	r3, [r1, #0]
     f80:	6828      	ldr	r0, [r5, #0]
     f82:	6833      	ldr	r3, [r6, #0]
     f84:	68a1      	ldr	r1, [r4, #8]
     f86:	18c3      	adds	r3, r0, r3
     f88:	68e2      	ldr	r2, [r4, #12]
     f8a:	6920      	ldr	r0, [r4, #16]
     f8c:	0049      	lsls	r1, r1, #1
     f8e:	0052      	lsls	r2, r2, #1
     f90:	0040      	lsls	r0, r0, #1
	  right = 0;
	  while (((2 * res[2]) <= (white + black))
     f92:	4299      	cmp	r1, r3
     f94:	d906      	bls.n	fa4 <vtrsTask+0xa4>
		 || ((2 * res[3]) <= (white + black))
     f96:	4293      	cmp	r3, r2
     f98:	d2fb      	bcs.n	f92 <vtrsTask+0x92>
		 || ((2 * res[4]) <= (white + black)));
     f9a:	4283      	cmp	r3, r0
     f9c:	d2f9      	bcs.n	f92 <vtrsTask+0x92>
	  left = 10;
	  right = 10;
     f9e:	464a      	mov	r2, r9
     fa0:	603a      	str	r2, [r7, #0]
     fa2:	e7c3      	b.n	f2c <vtrsTask+0x2c>
     fa4:	e7fe      	b.n	fa4 <vtrsTask+0xa4>
     fa6:	e7fe      	b.n	fa6 <vtrsTask+0xa6>
     fa8:	0000e814 	.word	0x0000e814
     fac:	40000940 	.word	0x40000940
     fb0:	0000e81c 	.word	0x0000e81c
     fb4:	40000908 	.word	0x40000908
     fb8:	40000948 	.word	0x40000948
     fbc:	40000910 	.word	0x40000910
     fc0:	4000090c 	.word	0x4000090c

00000fc4 <ADC_Read>:
	vTaskDelay (left / portTICK_RATE_MS);
    }
}
unsigned int
ADC_Read (unsigned int ch)
{
     fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  unsigned int i;
  AD0CR = (0x00200400 | (1 << ch));	// Init ADC (Pclk = 18MHz) and select channel. Sampling rate = 4.5MHz
     fc6:	4a18      	ldr	r2, [pc, #96]	; (1028 <ADC_Read+0x64>)
     fc8:	2101      	movs	r1, #1
     fca:	4e18      	ldr	r6, [pc, #96]	; (102c <ADC_Read+0x68>)
     fcc:	4081      	lsls	r1, r0
     fce:	4311      	orrs	r1, r2
     fd0:	6031      	str	r1, [r6, #0]
  AD0CR |= 0x01000000;		// Start A/D Conversion
     fd2:	2780      	movs	r7, #128	; 0x80
     fd4:	6834      	ldr	r4, [r6, #0]
     fd6:	047d      	lsls	r5, r7, #17
  do
    {
      switch (ch)
     fd8:	4a15      	ldr	r2, [pc, #84]	; (1030 <ADC_Read+0x6c>)
unsigned int
ADC_Read (unsigned int ch)
{
  unsigned int i;
  AD0CR = (0x00200400 | (1 << ch));	// Init ADC (Pclk = 18MHz) and select channel. Sampling rate = 4.5MHz
  AD0CR |= 0x01000000;		// Start A/D Conversion
     fda:	4325      	orrs	r5, r4
  do
    {
      switch (ch)
     fdc:	0081      	lsls	r1, r0, #2
unsigned int
ADC_Read (unsigned int ch)
{
  unsigned int i;
  AD0CR = (0x00200400 | (1 << ch));	// Init ADC (Pclk = 18MHz) and select channel. Sampling rate = 4.5MHz
  AD0CR |= 0x01000000;		// Start A/D Conversion
     fde:	6035      	str	r5, [r6, #0]
  do
    {
      switch (ch)
     fe0:	188a      	adds	r2, r1, r2
	  break;
	case 6:
	  i = AD0DR6;
	  break;
	case 7:
	  i = AD0DR7;
     fe2:	4f14      	ldr	r7, [pc, #80]	; (1034 <ADC_Read+0x70>)
	  break;
	case 5:
	  i = AD0DR5;
	  break;
	case 6:
	  i = AD0DR6;
     fe4:	4e14      	ldr	r6, [pc, #80]	; (1038 <ADC_Read+0x74>)
	  break;
	case 4:
	  i = AD0DR4;
	  break;
	case 5:
	  i = AD0DR5;
     fe6:	4d15      	ldr	r5, [pc, #84]	; (103c <ADC_Read+0x78>)
	  break;
	case 3:
	  i = AD0DR3;
	  break;
	case 4:
	  i = AD0DR4;
     fe8:	4c15      	ldr	r4, [pc, #84]	; (1040 <ADC_Read+0x7c>)
	  break;
	case 2:
	  i = AD0DR2;
	  break;
	case 3:
	  i = AD0DR3;
     fea:	4916      	ldr	r1, [pc, #88]	; (1044 <ADC_Read+0x80>)
  unsigned int i;
  AD0CR = (0x00200400 | (1 << ch));	// Init ADC (Pclk = 18MHz) and select channel. Sampling rate = 4.5MHz
  AD0CR |= 0x01000000;		// Start A/D Conversion
  do
    {
      switch (ch)
     fec:	2807      	cmp	r0, #7
     fee:	d802      	bhi.n	ff6 <ADC_Read+0x32>
     ff0:	6813      	ldr	r3, [r2, #0]
     ff2:	469f      	mov	pc, r3
	  break;
	case 5:
	  i = AD0DR5;
	  break;
	case 6:
	  i = AD0DR6;
     ff4:	6833      	ldr	r3, [r6, #0]
	  i = AD0DR7;
	  break;
	}

    }
  while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
     ff6:	2b00      	cmp	r3, #0
     ff8:	daf8      	bge.n	fec <ADC_Read+0x28>
  return (i >> 6) & 0x03FF;	// bit 6:15 is 10 bit AD value
     ffa:	0418      	lsls	r0, r3, #16
     ffc:	0d80      	lsrs	r0, r0, #22
}
     ffe:	bcf0      	pop	{r4, r5, r6, r7}
    1000:	bc02      	pop	{r1}
    1002:	4708      	bx	r1
	  break;
	case 4:
	  i = AD0DR4;
	  break;
	case 5:
	  i = AD0DR5;
    1004:	682b      	ldr	r3, [r5, #0]
	  break;
    1006:	e7f6      	b.n	ff6 <ADC_Read+0x32>
	  break;
	case 3:
	  i = AD0DR3;
	  break;
	case 4:
	  i = AD0DR4;
    1008:	6823      	ldr	r3, [r4, #0]
	  break;
    100a:	e7f4      	b.n	ff6 <ADC_Read+0x32>
	  break;
	case 2:
	  i = AD0DR2;
	  break;
	case 3:
	  i = AD0DR3;
    100c:	680b      	ldr	r3, [r1, #0]
	  break;
    100e:	e7f2      	b.n	ff6 <ADC_Read+0x32>
	  break;
	case 1:
	  i = AD0DR1;
	  break;
	case 2:
	  i = AD0DR2;
    1010:	4b0d      	ldr	r3, [pc, #52]	; (1048 <ADC_Read+0x84>)
    1012:	681b      	ldr	r3, [r3, #0]
	  break;
    1014:	e7ef      	b.n	ff6 <ADC_Read+0x32>
	{
	case 0:
	  i = AD0DR0;		// Read A/D Data Register
	  break;
	case 1:
	  i = AD0DR1;
    1016:	4b0d      	ldr	r3, [pc, #52]	; (104c <ADC_Read+0x88>)
    1018:	681b      	ldr	r3, [r3, #0]
	  break;
    101a:	e7ec      	b.n	ff6 <ADC_Read+0x32>
	  break;
	case 6:
	  i = AD0DR6;
	  break;
	case 7:
	  i = AD0DR7;
    101c:	683b      	ldr	r3, [r7, #0]
	  break;
    101e:	e7ea      	b.n	ff6 <ADC_Read+0x32>
  do
    {
      switch (ch)
	{
	case 0:
	  i = AD0DR0;		// Read A/D Data Register
    1020:	4b0b      	ldr	r3, [pc, #44]	; (1050 <ADC_Read+0x8c>)
    1022:	681b      	ldr	r3, [r3, #0]
	  break;
    1024:	e7e7      	b.n	ff6 <ADC_Read+0x32>
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	00200400 	.word	0x00200400
    102c:	e0034000 	.word	0xe0034000
    1030:	0000e7a8 	.word	0x0000e7a8
    1034:	e003402c 	.word	0xe003402c
    1038:	e0034028 	.word	0xe0034028
    103c:	e0034024 	.word	0xe0034024
    1040:	e0034020 	.word	0xe0034020
    1044:	e003401c 	.word	0xe003401c
    1048:	e0034018 	.word	0xe0034018
    104c:	e0034014 	.word	0xe0034014
    1050:	e0034010 	.word	0xe0034010

00001054 <vValueTask>:
unsigned int res[5];
int white, black;
//-----------------
void
vValueTask (void *pvParameters)
{
    1054:	b5f0      	push	{r4, r5, r6, r7, lr}
    1056:	4647      	mov	r7, r8
    1058:	b480      	push	{r7}
  int i;
  unsigned int a, t;
  vTaskDelay (30 / portTICK_RATE_MS);
    105a:	201e      	movs	r0, #30
    105c:	f002 fe68 	bl	3d30 <vTaskDelay>
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    1060:	4e40      	ldr	r6, [pc, #256]	; (1164 <vValueTask+0x110>)
    1062:	4f41      	ldr	r7, [pc, #260]	; (1168 <vValueTask+0x114>)
    1064:	2300      	movs	r3, #0
    1066:	6033      	str	r3, [r6, #0]
    1068:	603b      	str	r3, [r7, #0]
    106a:	4c40      	ldr	r4, [pc, #256]	; (116c <vValueTask+0x118>)
    106c:	3314      	adds	r3, #20
    106e:	4d40      	ldr	r5, [pc, #256]	; (1170 <vValueTask+0x11c>)
    1070:	4698      	mov	r8, r3
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1072:	2000      	movs	r0, #0
    1074:	f7ff ffa6 	bl	fc4 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    1078:	2100      	movs	r1, #0
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    107a:	1c02      	adds	r2, r0, #0
    107c:	6020      	str	r0, [r4, #0]
	  printf ("  %x....%4x\t", a, res[a]);
    107e:	1c28      	adds	r0, r5, #0
    1080:	f004 f998 	bl	53b4 <printf>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1084:	2001      	movs	r0, #1
    1086:	f7ff ff9d 	bl	fc4 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    108a:	2101      	movs	r1, #1
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    108c:	1c02      	adds	r2, r0, #0
    108e:	6060      	str	r0, [r4, #4]
	  printf ("  %x....%4x\t", a, res[a]);
    1090:	1c28      	adds	r0, r5, #0
    1092:	f004 f98f 	bl	53b4 <printf>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1096:	2002      	movs	r0, #2
    1098:	f7ff ff94 	bl	fc4 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    109c:	2102      	movs	r1, #2
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    109e:	1c02      	adds	r2, r0, #0
    10a0:	60a0      	str	r0, [r4, #8]
	  printf ("  %x....%4x\t", a, res[a]);
    10a2:	1c28      	adds	r0, r5, #0
    10a4:	f004 f986 	bl	53b4 <printf>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10a8:	2003      	movs	r0, #3
    10aa:	f7ff ff8b 	bl	fc4 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    10ae:	2103      	movs	r1, #3
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10b0:	1c02      	adds	r2, r0, #0
    10b2:	60e0      	str	r0, [r4, #12]
	  printf ("  %x....%4x\t", a, res[a]);
    10b4:	1c28      	adds	r0, r5, #0
    10b6:	f004 f97d 	bl	53b4 <printf>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10ba:	2004      	movs	r0, #4
    10bc:	f7ff ff82 	bl	fc4 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    10c0:	2104      	movs	r1, #4
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10c2:	1c02      	adds	r2, r0, #0
    10c4:	6120      	str	r0, [r4, #16]
	  printf ("  %x....%4x\t", a, res[a]);
    10c6:	1c28      	adds	r0, r5, #0
    10c8:	f004 f974 	bl	53b4 <printf>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10cc:	2005      	movs	r0, #5
    10ce:	f7ff ff79 	bl	fc4 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    10d2:	2105      	movs	r1, #5
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10d4:	1c02      	adds	r2, r0, #0
    10d6:	6160      	str	r0, [r4, #20]
	  printf ("  %x....%4x\t", a, res[a]);
    10d8:	1c28      	adds	r0, r5, #0
    10da:	f004 f96b 	bl	53b4 <printf>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10de:	2006      	movs	r0, #6
    10e0:	f7ff ff70 	bl	fc4 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    10e4:	2106      	movs	r1, #6
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10e6:	1c02      	adds	r2, r0, #0
    10e8:	61a0      	str	r0, [r4, #24]
	  printf ("  %x....%4x\t", a, res[a]);
    10ea:	1c28      	adds	r0, r5, #0
    10ec:	f004 f962 	bl	53b4 <printf>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10f0:	2007      	movs	r0, #7
    10f2:	f7ff ff67 	bl	fc4 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    10f6:	2107      	movs	r1, #7
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    10f8:	1c02      	adds	r2, r0, #0
    10fa:	61e0      	str	r0, [r4, #28]
	  printf ("  %x....%4x\t", a, res[a]);
    10fc:	1c28      	adds	r0, r5, #0
    10fe:	f004 f959 	bl	53b4 <printf>
	}
      printf ("\n");
    1102:	200a      	movs	r0, #10
    1104:	f004 f970 	bl	53e8 <putchar>
      white += ((res[1] + res[3] + res[4]) / 3);
    1108:	6862      	ldr	r2, [r4, #4]
    110a:	68e1      	ldr	r1, [r4, #12]
    110c:	6923      	ldr	r3, [r4, #16]
    110e:	1888      	adds	r0, r1, r2
    1110:	18c0      	adds	r0, r0, r3
    1112:	2103      	movs	r1, #3
    1114:	f00c fda0 	bl	dc58 <____aeabi_uidiv_from_thumb>
    1118:	6832      	ldr	r2, [r6, #0]
      black += (res[2]);
    111a:	68a3      	ldr	r3, [r4, #8]
	{
	  res[a] = ADC_Read (a);
	  printf ("  %x....%4x\t", a, res[a]);
	}
      printf ("\n");
      white += ((res[1] + res[3] + res[4]) / 3);
    111c:	1881      	adds	r1, r0, r2
      black += (res[2]);
    111e:	6838      	ldr	r0, [r7, #0]
	{
	  res[a] = ADC_Read (a);
	  printf ("  %x....%4x\t", a, res[a]);
	}
      printf ("\n");
      white += ((res[1] + res[3] + res[4]) / 3);
    1120:	6031      	str	r1, [r6, #0]
      black += (res[2]);
    1122:	2101      	movs	r1, #1
    1124:	18c2      	adds	r2, r0, r3
    1126:	4248      	negs	r0, r1
    1128:	4480      	add	r8, r0
vValueTask (void *pvParameters)
{
  int i;
  unsigned int a, t;
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    112a:	3001      	adds	r0, #1
	  res[a] = ADC_Read (a);
	  printf ("  %x....%4x\t", a, res[a]);
	}
      printf ("\n");
      white += ((res[1] + res[3] + res[4]) / 3);
      black += (res[2]);
    112c:	603a      	str	r2, [r7, #0]
vValueTask (void *pvParameters)
{
  int i;
  unsigned int a, t;
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    112e:	4580      	cmp	r8, r0
    1130:	d19f      	bne.n	1072 <vValueTask+0x1e>
    1132:	4645      	mov	r5, r8
    1134:	4e0f      	ldr	r6, [pc, #60]	; (1174 <vValueTask+0x120>)
//      printf("white %x, black %x", white, black);
//      write_ROM(0x1A, 32, white);             //(int subadr, int size, int Data)
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
    1136:	2d04      	cmp	r5, #4
    1138:	d903      	bls.n	1142 <vValueTask+0xee>
	{
	  res[a] = ADC_Read (a);
	  printf ("%d\t", res[a]);
	  vTaskDelay (3 / portTICK_RATE_MS);
	}
      printf ("\n");
    113a:	200a      	movs	r0, #10
    113c:	f004 f954 	bl	53e8 <putchar>
//      printf("white %x, black %x", white, black);
//      write_ROM(0x1A, 32, white);             //(int subadr, int size, int Data)
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
    1140:	2500      	movs	r5, #0
	{
	  res[a] = ADC_Read (a);
    1142:	1c28      	adds	r0, r5, #0
    1144:	f7ff ff3e 	bl	fc4 <ADC_Read>
    1148:	00af      	lsls	r7, r5, #2
    114a:	1c01      	adds	r1, r0, #0
    114c:	51e0      	str	r0, [r4, r7]
	  printf ("%d\t", res[a]);
    114e:	1c30      	adds	r0, r6, #0
    1150:	f004 f930 	bl	53b4 <printf>
//      printf("white %x, black %x", white, black);
//      write_ROM(0x1A, 32, white);             //(int subadr, int size, int Data)
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
    1154:	3501      	adds	r5, #1
	{
	  res[a] = ADC_Read (a);
	  printf ("%d\t", res[a]);
	  vTaskDelay (3 / portTICK_RATE_MS);
    1156:	2003      	movs	r0, #3
    1158:	f002 fdea 	bl	3d30 <vTaskDelay>
//      printf("white %x, black %x", white, black);
//      write_ROM(0x1A, 32, white);             //(int subadr, int size, int Data)
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
    115c:	2d04      	cmp	r5, #4
    115e:	d8ec      	bhi.n	113a <vValueTask+0xe6>
    1160:	e7ef      	b.n	1142 <vValueTask+0xee>
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	40000908 	.word	0x40000908
    1168:	40000948 	.word	0x40000948
    116c:	40000910 	.word	0x40000910
    1170:	0000e824 	.word	0x0000e824
    1174:	0000e834 	.word	0x0000e834

00001178 <init_VIC>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void init_VIC(void) 
{
    1178:	b570      	push	{r4, r5, r6, lr}
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    117a:	480d      	ldr	r0, [pc, #52]	; (11b0 <init_VIC+0x38>)
    VICVectAddr = 0;
    117c:	4b0d      	ldr	r3, [pc, #52]	; (11b4 <init_VIC+0x3c>)
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    117e:	2101      	movs	r1, #1
    VICVectAddr = 0;
    1180:	2500      	movs	r5, #0
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    1182:	424a      	negs	r2, r1
    1184:	6002      	str	r2, [r0, #0]
    VICVectAddr = 0;
    1186:	601d      	str	r5, [r3, #0]
    VICIntSelect = 0;
    1188:	4b0b      	ldr	r3, [pc, #44]	; (11b8 <init_VIC+0x40>)
    118a:	480c      	ldr	r0, [pc, #48]	; (11bc <init_VIC+0x44>)

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    118c:	4e0c      	ldr	r6, [pc, #48]	; (11c0 <init_VIC+0x48>)
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;
    118e:	601d      	str	r5, [r3, #0]
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
		*vect_cntl = 0xF;
    1190:	240f      	movs	r4, #15
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;
    1192:	33f4      	adds	r3, #244	; 0xf4
    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
    1194:	1c19      	adds	r1, r3, #0
    1196:	c120      	stmia	r1!, {r5}
		*vect_cntl = 0xF;
    1198:	1c02      	adds	r2, r0, #0
    119a:	c210      	stmia	r2!, {r4}
    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
    119c:	605d      	str	r5, [r3, #4]
    119e:	1d0b      	adds	r3, r1, #4
		*vect_cntl = 0xF;
    11a0:	6044      	str	r4, [r0, #4]
    11a2:	1d10      	adds	r0, r2, #4
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    11a4:	42b3      	cmp	r3, r6
    11a6:	d1f5      	bne.n	1194 <init_VIC+0x1c>
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
		*vect_cntl = 0xF;
    }
    return;
}
    11a8:	bc70      	pop	{r4, r5, r6}
    11aa:	bc01      	pop	{r0}
    11ac:	4700      	bx	r0
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	fffff014 	.word	0xfffff014
    11b4:	ffffff00 	.word	0xffffff00
    11b8:	fffff00c 	.word	0xfffff00c
    11bc:	fffff200 	.word	0xfffff200
    11c0:	fffff180 	.word	0xfffff180

000011c4 <install_irq>:
**						interrupt priority
** Returned value:		true or false, return false if IntNum is out of range
** 
******************************************************************************/
DWORD install_irq( DWORD IntNumber, void *HandlerAddr, DWORD Priority )
{
    11c4:	b570      	push	{r4, r5, r6, lr}
    DWORD *vect_addr;
    DWORD *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    11c6:	2401      	movs	r4, #1
    11c8:	4b0a      	ldr	r3, [pc, #40]	; (11f4 <install_irq+0x30>)
    11ca:	1c25      	adds	r5, r4, #0
    11cc:	4085      	lsls	r5, r0
    11ce:	601d      	str	r5, [r3, #0]
    if ( IntNumber >= VIC_SIZE )
    {
		return ( FALSE );
    11d0:	2300      	movs	r3, #0
{
    DWORD *vect_addr;
    DWORD *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    if ( IntNumber >= VIC_SIZE )
    11d2:	281f      	cmp	r0, #31
    11d4:	d80a      	bhi.n	11ec <install_irq+0x28>
		return ( FALSE );
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
    11d6:	4e08      	ldr	r6, [pc, #32]	; (11f8 <install_irq+0x34>)
    11d8:	1983      	adds	r3, r0, r6
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
    11da:	009e      	lsls	r6, r3, #2
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
    11dc:	4b07      	ldr	r3, [pc, #28]	; (11fc <install_irq+0x38>)
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
    11de:	6031      	str	r1, [r6, #0]
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
    11e0:	18c6      	adds	r6, r0, r3
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
		*vect_cntl = Priority;
		VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    11e2:	4807      	ldr	r0, [pc, #28]	; (1200 <install_irq+0x3c>)
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
		*vect_cntl = Priority;
    11e4:	00b1      	lsls	r1, r6, #2
    11e6:	600a      	str	r2, [r1, #0]
		VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    11e8:	6005      	str	r5, [r0, #0]
		return( TRUE );
    11ea:	1c23      	adds	r3, r4, #0
    }
}
    11ec:	1c18      	adds	r0, r3, #0
    11ee:	bc70      	pop	{r4, r5, r6}
    11f0:	bc02      	pop	{r1}
    11f2:	4708      	bx	r1
    11f4:	fffff014 	.word	0xfffff014
    11f8:	3ffffc40 	.word	0x3ffffc40
    11fc:	3ffffc80 	.word	0x3ffffc80
    1200:	fffff010 	.word	0xfffff010

00001204 <RTCInit>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
DWORD RTCInit( void )
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	4657      	mov	r7, sl
    1208:	464e      	mov	r6, r9
    120a:	4645      	mov	r5, r8
    120c:	b4e0      	push	{r5, r6, r7}
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
    120e:	4d2d      	ldr	r5, [pc, #180]	; (12c4 <RTCInit+0xc0>)
    1210:	2200      	movs	r2, #0
    1212:	602a      	str	r2, [r5, #0]
	RTC_CIIR = 0;
	RTC_CCR = 0;
	RTC_CCR = CCR_CLKSRC ;
	RTC_PREINT = PREINT_RTC;
    1214:	21e4      	movs	r1, #228	; 0xe4
*****************************************************************************/
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
    1216:	3d04      	subs	r5, #4
	RTC_CCR = 0;
	RTC_CCR = CCR_CLKSRC ;
	RTC_PREINT = PREINT_RTC;
    1218:	4e2b      	ldr	r6, [pc, #172]	; (12c8 <RTCInit+0xc4>)
	RTC_PREFRAC = PREFRAC_RTC;
    121a:	4f2c      	ldr	r7, [pc, #176]	; (12cc <RTCInit+0xc8>)
*****************************************************************************/
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
    121c:	602a      	str	r2, [r5, #0]
	RTC_CCR = 0;
	RTC_CCR = CCR_CLKSRC ;
	RTC_PREINT = PREINT_RTC;
    121e:	004b      	lsls	r3, r1, #1
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
	RTC_CCR = 0;
    1220:	3d04      	subs	r5, #4
	RTC_CCR = CCR_CLKSRC ;
    1222:	2410      	movs	r4, #16
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
	RTC_CCR = 0;
    1224:	602a      	str	r2, [r5, #0]
	RTC_CCR = CCR_CLKSRC ;
    1226:	602c      	str	r4, [r5, #0]
	RTC_PREINT = PREINT_RTC;
    1228:	6033      	str	r3, [r6, #0]
	RTC_PREFRAC = PREFRAC_RTC;
    122a:	6077      	str	r7, [r6, #4]
** 
*****************************************************************************/
void RTCStart( void ) 
{
  /*--- Start RTC counters ---*/
  RTC_CCR |= CCR_CLKEN;
    122c:	6828      	ldr	r0, [r5, #0]
    122e:	2401      	movs	r4, #1
    1230:	4320      	orrs	r0, r4
    1232:	6028      	str	r0, [r5, #0]
  RTC_ILR = ILR_RTCCIF;
    1234:	3d08      	subs	r5, #8
    1236:	602c      	str	r4, [r5, #0]
	RTC_PREINT = PREINT_RTC;
	RTC_PREFRAC = PREFRAC_RTC;

	RTCStart(); 

	if(RTC_CONF_STAT != CONF_COMPLETED){
    1238:	4825      	ldr	r0, [pc, #148]	; (12d0 <RTCInit+0xcc>)
    123a:	4926      	ldr	r1, [pc, #152]	; (12d4 <RTCInit+0xd0>)
    123c:	6803      	ldr	r3, [r0, #0]
    123e:	468a      	mov	sl, r1
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
DWORD RTCInit( void )
{
    1240:	b088      	sub	sp, #32
	RTC_PREINT = PREINT_RTC;
	RTC_PREFRAC = PREFRAC_RTC;

	RTCStart(); 

	if(RTC_CONF_STAT != CONF_COMPLETED){
    1242:	4553      	cmp	r3, sl
    1244:	d034      	beq.n	12b0 <RTCInit+0xac>
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
    1246:	4f24      	ldr	r7, [pc, #144]	; (12d8 <RTCInit+0xd4>)
		RTC_MIN   = 43;
    1248:	4e24      	ldr	r6, [pc, #144]	; (12dc <RTCInit+0xd8>)
    124a:	232b      	movs	r3, #43	; 0x2b
		RTC_HOUR  = 23;
    124c:	4d24      	ldr	r5, [pc, #144]	; (12e0 <RTCInit+0xdc>)
	RTCStart(); 

	if(RTC_CONF_STAT != CONF_COMPLETED){
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
    124e:	603a      	str	r2, [r7, #0]
		RTC_MIN   = 43;
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
    1250:	4924      	ldr	r1, [pc, #144]	; (12e4 <RTCInit+0xe0>)

	if(RTC_CONF_STAT != CONF_COMPLETED){
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
		RTC_MIN   = 43;
    1252:	6033      	str	r3, [r6, #0]
		RTC_HOUR  = 23;
    1254:	3b14      	subs	r3, #20
    1256:	602b      	str	r3, [r5, #0]
		RTC_DOM   = 29;
		RTC_MONTH = 7;
    1258:	4a23      	ldr	r2, [pc, #140]	; (12e8 <RTCInit+0xe4>)
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
		RTC_MIN   = 43;
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
    125a:	3306      	adds	r3, #6
    125c:	600b      	str	r3, [r1, #0]
		RTC_MONTH = 7;
    125e:	3b16      	subs	r3, #22
    1260:	6013      	str	r3, [r2, #0]
		RTC_YEAR  = 2009;    
    1262:	4c22      	ldr	r4, [pc, #136]	; (12ec <RTCInit+0xe8>)
    1264:	4b22      	ldr	r3, [pc, #136]	; (12f0 <RTCInit+0xec>)
    1266:	601c      	str	r4, [r3, #0]
*****************************************************************************/
RTCTime RTCGetTime( void ) 
{
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
    1268:	683f      	ldr	r7, [r7, #0]
  LocalTime.RTC_Min = RTC_MIN;
    126a:	6836      	ldr	r6, [r6, #0]
  LocalTime.RTC_Hour = RTC_HOUR;
    126c:	682d      	ldr	r5, [r5, #0]
  LocalTime.RTC_Mday = RTC_DOM;
    126e:	6809      	ldr	r1, [r1, #0]
    1270:	4689      	mov	r9, r1
  LocalTime.RTC_Wday = RTC_DOW;
    1272:	4920      	ldr	r1, [pc, #128]	; (12f4 <RTCInit+0xf0>)
RTCTime RTCGetTime( void ) 
{
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
  LocalTime.RTC_Min = RTC_MIN;
    1274:	46b4      	mov	ip, r6
  LocalTime.RTC_Hour = RTC_HOUR;
    1276:	46a8      	mov	r8, r5
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
  LocalTime.RTC_Year = RTC_YEAR;
    1278:	4664      	mov	r4, ip
    
  LocalTime.RTC_Sec = RTC_SEC;
  LocalTime.RTC_Min = RTC_MIN;
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
    127a:	680d      	ldr	r5, [r1, #0]
  LocalTime.RTC_Yday = RTC_DOY;
    127c:	3104      	adds	r1, #4
    127e:	6809      	ldr	r1, [r1, #0]
  LocalTime.RTC_Mon = RTC_MONTH;
    1280:	6816      	ldr	r6, [r2, #0]
  LocalTime.RTC_Year = RTC_YEAR;
    1282:	681a      	ldr	r2, [r3, #0]
    1284:	9401      	str	r4, [sp, #4]
    1286:	4644      	mov	r4, r8
    1288:	9402      	str	r4, [sp, #8]
    128a:	9506      	str	r5, [sp, #24]
    128c:	464c      	mov	r4, r9
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    128e:	4d1a      	ldr	r5, [pc, #104]	; (12f8 <RTCInit+0xf4>)
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
  LocalTime.RTC_Year = RTC_YEAR;
    1290:	9700      	str	r7, [sp, #0]
    1292:	9604      	str	r6, [sp, #16]
    1294:	9205      	str	r2, [sp, #20]
    1296:	9107      	str	r1, [sp, #28]
    1298:	9403      	str	r4, [sp, #12]
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    129a:	1c2f      	adds	r7, r5, #0
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
  LocalTime.RTC_Year = RTC_YEAR;
    129c:	466b      	mov	r3, sp
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    129e:	cb70      	ldmia	r3!, {r4, r5, r6}
    12a0:	c770      	stmia	r7!, {r4, r5, r6}
    12a2:	1c3a      	adds	r2, r7, #0
    12a4:	cb70      	ldmia	r3!, {r4, r5, r6}
    12a6:	c270      	stmia	r2!, {r4, r5, r6}
		
		RTC_CONF_STAT = CONF_COMPLETED;
    12a8:	4651      	mov	r1, sl
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    12aa:	cb60      	ldmia	r3!, {r5, r6}
    12ac:	c260      	stmia	r2!, {r5, r6}
		
		RTC_CONF_STAT = CONF_COMPLETED;
    12ae:	6001      	str	r1, [r0, #0]
	}

	return (TRUE);
}
    12b0:	b008      	add	sp, #32
    12b2:	2001      	movs	r0, #1
    12b4:	bc1c      	pop	{r2, r3, r4}
    12b6:	4690      	mov	r8, r2
    12b8:	4699      	mov	r9, r3
    12ba:	46a2      	mov	sl, r4
    12bc:	bcf0      	pop	{r4, r5, r6, r7}
    12be:	bc02      	pop	{r1}
    12c0:	4708      	bx	r1
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	e0024010 	.word	0xe0024010
    12c8:	e0024080 	.word	0xe0024080
    12cc:	000061c0 	.word	0x000061c0
    12d0:	e0084004 	.word	0xe0084004
    12d4:	a5a5a5a5 	.word	0xa5a5a5a5
    12d8:	e0024020 	.word	0xe0024020
    12dc:	e0024024 	.word	0xe0024024
    12e0:	e0024028 	.word	0xe0024028
    12e4:	e002402c 	.word	0xe002402c
    12e8:	e0024038 	.word	0xe0024038
    12ec:	000007d9 	.word	0x000007d9
    12f0:	e002403c 	.word	0xe002403c
    12f4:	e0024030 	.word	0xe0024030
    12f8:	4000098c 	.word	0x4000098c

000012fc <RTCStart>:
** 
*****************************************************************************/
void RTCStart( void ) 
{
  /*--- Start RTC counters ---*/
  RTC_CCR |= CCR_CLKEN;
    12fc:	4a03      	ldr	r2, [pc, #12]	; (130c <RTCStart+0x10>)
    12fe:	6811      	ldr	r1, [r2, #0]
    1300:	2301      	movs	r3, #1
    1302:	4319      	orrs	r1, r3
    1304:	6011      	str	r1, [r2, #0]
  RTC_ILR = ILR_RTCCIF;
    1306:	3a08      	subs	r2, #8
    1308:	6013      	str	r3, [r2, #0]
  return;
}
    130a:	4770      	bx	lr
    130c:	e0024008 	.word	0xe0024008

00001310 <RTCStop>:
** 
*****************************************************************************/
void RTCStop( void )
{   
  /*--- Stop RTC counters ---*/
  RTC_CCR &= ~CCR_CLKEN;
    1310:	4b02      	ldr	r3, [pc, #8]	; (131c <RTCStop+0xc>)
    1312:	681a      	ldr	r2, [r3, #0]
    1314:	2101      	movs	r1, #1
    1316:	438a      	bics	r2, r1
    1318:	601a      	str	r2, [r3, #0]
  return;
} 
    131a:	4770      	bx	lr
    131c:	e0024008 	.word	0xe0024008

00001320 <RTC_CTCReset>:
** 
*****************************************************************************/
void RTC_CTCReset( void )
{   
  /*--- Reset CTC ---*/
  RTC_CCR |= CCR_CTCRST;
    1320:	4b02      	ldr	r3, [pc, #8]	; (132c <RTC_CTCReset+0xc>)
    1322:	681a      	ldr	r2, [r3, #0]
    1324:	2102      	movs	r1, #2
    1326:	430a      	orrs	r2, r1
    1328:	601a      	str	r2, [r3, #0]
  return;
}
    132a:	4770      	bx	lr
    132c:	e0024008 	.word	0xe0024008

00001330 <RTCSetTime>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetTime( RTCTime Time ) 
{
    1330:	b084      	sub	sp, #16
    1332:	b510      	push	{r4, lr}
    1334:	9305      	str	r3, [sp, #20]
  RTC_SEC   = Time.RTC_Sec;
    1336:	4b0b      	ldr	r3, [pc, #44]	; (1364 <RTCSetTime+0x34>)
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetTime( RTCTime Time ) 
{
    1338:	9204      	str	r2, [sp, #16]
    133a:	9002      	str	r0, [sp, #8]
    133c:	9103      	str	r1, [sp, #12]
  RTC_SEC   = Time.RTC_Sec;
    133e:	6018      	str	r0, [r3, #0]
  RTC_MIN   = Time.RTC_Min;
    1340:	9903      	ldr	r1, [sp, #12]
    1342:	6059      	str	r1, [r3, #4]
  RTC_HOUR  = Time.RTC_Hour;
    1344:	9804      	ldr	r0, [sp, #16]
    1346:	6098      	str	r0, [r3, #8]
  RTC_DOM   = Time.RTC_Mday;
    1348:	9a05      	ldr	r2, [sp, #20]
    134a:	60da      	str	r2, [r3, #12]
  RTC_DOW   = Time.RTC_Wday;
    134c:	9c08      	ldr	r4, [sp, #32]
    134e:	611c      	str	r4, [r3, #16]
  RTC_DOY   = Time.RTC_Yday;
    1350:	9909      	ldr	r1, [sp, #36]	; 0x24
    1352:	6159      	str	r1, [r3, #20]
  RTC_MONTH = Time.RTC_Mon;
    1354:	9806      	ldr	r0, [sp, #24]
    1356:	6198      	str	r0, [r3, #24]
  RTC_YEAR  = Time.RTC_Year;    
    1358:	9a07      	ldr	r2, [sp, #28]
    135a:	61da      	str	r2, [r3, #28]
  return;
}
    135c:	bc10      	pop	{r4}
    135e:	bc08      	pop	{r3}
    1360:	b004      	add	sp, #16
    1362:	4718      	bx	r3
    1364:	e0024020 	.word	0xe0024020

00001368 <RTCSetAlarm>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetAlarm( RTCTime Alarm ) 
{   
    1368:	b084      	sub	sp, #16
    136a:	b510      	push	{r4, lr}
    136c:	9305      	str	r3, [sp, #20]
  RTC_ALSEC  = Alarm.RTC_Sec;
    136e:	4b0b      	ldr	r3, [pc, #44]	; (139c <RTCSetAlarm+0x34>)
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetAlarm( RTCTime Alarm ) 
{   
    1370:	9204      	str	r2, [sp, #16]
    1372:	9002      	str	r0, [sp, #8]
    1374:	9103      	str	r1, [sp, #12]
  RTC_ALSEC  = Alarm.RTC_Sec;
    1376:	6018      	str	r0, [r3, #0]
  RTC_ALMIN  = Alarm.RTC_Min;
    1378:	9903      	ldr	r1, [sp, #12]
    137a:	6059      	str	r1, [r3, #4]
  RTC_ALHOUR = Alarm.RTC_Hour;
    137c:	9804      	ldr	r0, [sp, #16]
    137e:	6098      	str	r0, [r3, #8]
  RTC_ALDOM  = Alarm.RTC_Mday;
    1380:	9a05      	ldr	r2, [sp, #20]
    1382:	60da      	str	r2, [r3, #12]
  RTC_ALDOW  = Alarm.RTC_Wday;
    1384:	9c08      	ldr	r4, [sp, #32]
    1386:	611c      	str	r4, [r3, #16]
  RTC_ALDOY  = Alarm.RTC_Yday;
    1388:	9909      	ldr	r1, [sp, #36]	; 0x24
    138a:	6159      	str	r1, [r3, #20]
  RTC_ALMON  = Alarm.RTC_Mon;
    138c:	9806      	ldr	r0, [sp, #24]
    138e:	6198      	str	r0, [r3, #24]
  RTC_ALYEAR = Alarm.RTC_Year;    
    1390:	9a07      	ldr	r2, [sp, #28]
    1392:	61da      	str	r2, [r3, #28]
  return;
}
    1394:	bc10      	pop	{r4}
    1396:	bc08      	pop	{r3}
    1398:	b004      	add	sp, #16
    139a:	4718      	bx	r3
    139c:	e0024060 	.word	0xe0024060

000013a0 <RTCGetTime>:
** parameters:			None
** Returned value:		The data structure of the RTC time table
** 
*****************************************************************************/
RTCTime RTCGetTime( void ) 
{
    13a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13a2:	4647      	mov	r7, r8
    13a4:	b480      	push	{r7}
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
    13a6:	4a0f      	ldr	r2, [pc, #60]	; (13e4 <RTCGetTime+0x44>)
    13a8:	6813      	ldr	r3, [r2, #0]
    13aa:	469c      	mov	ip, r3
  LocalTime.RTC_Min = RTC_MIN;
    13ac:	4b0e      	ldr	r3, [pc, #56]	; (13e8 <RTCGetTime+0x48>)
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
    13ae:	490f      	ldr	r1, [pc, #60]	; (13ec <RTCGetTime+0x4c>)
RTCTime RTCGetTime( void ) 
{
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
  LocalTime.RTC_Min = RTC_MIN;
    13b0:	681f      	ldr	r7, [r3, #0]
  LocalTime.RTC_Hour = RTC_HOUR;
    13b2:	685e      	ldr	r6, [r3, #4]
  LocalTime.RTC_Mday = RTC_DOM;
    13b4:	689d      	ldr	r5, [r3, #8]
  LocalTime.RTC_Wday = RTC_DOW;
    13b6:	68da      	ldr	r2, [r3, #12]
  LocalTime.RTC_Yday = RTC_DOY;
    13b8:	3310      	adds	r3, #16
    13ba:	681b      	ldr	r3, [r3, #0]
  LocalTime.RTC_Mon = RTC_MONTH;
    13bc:	680c      	ldr	r4, [r1, #0]
  LocalTime.RTC_Year = RTC_YEAR;
    13be:	3104      	adds	r1, #4
    13c0:	6809      	ldr	r1, [r1, #0]
    13c2:	4688      	mov	r8, r1
    13c4:	4661      	mov	r1, ip
    13c6:	6001      	str	r1, [r0, #0]
    13c8:	4641      	mov	r1, r8
    13ca:	6047      	str	r7, [r0, #4]
    13cc:	6086      	str	r6, [r0, #8]
    13ce:	60c5      	str	r5, [r0, #12]
    13d0:	6104      	str	r4, [r0, #16]
    13d2:	6141      	str	r1, [r0, #20]
    13d4:	6182      	str	r2, [r0, #24]
    13d6:	61c3      	str	r3, [r0, #28]
  return ( LocalTime );    
}
    13d8:	bc04      	pop	{r2}
    13da:	4690      	mov	r8, r2
    13dc:	bcf0      	pop	{r4, r5, r6, r7}
    13de:	bc02      	pop	{r1}
    13e0:	4708      	bx	r1
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	e0024020 	.word	0xe0024020
    13e8:	e0024024 	.word	0xe0024024
    13ec:	e0024038 	.word	0xe0024038

000013f0 <RTCSetAlarmMask>:
** 
*****************************************************************************/
void RTCSetAlarmMask( DWORD AlarmMask ) 
{
  /*--- Set alarm mask ---*/    
  RTC_AMR = AlarmMask;
    13f0:	4b01      	ldr	r3, [pc, #4]	; (13f8 <RTCSetAlarmMask+0x8>)
    13f2:	6018      	str	r0, [r3, #0]
  return;
}
    13f4:	4770      	bx	lr
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	e0024010 	.word	0xe0024010

000013fc <UARTInit>:
**						interrupt handler can't be installed to the 
**						VIC table
** 
*****************************************************************************/
DWORD UARTInit( DWORD PortNum, DWORD baudrate )
{
    13fc:	b538      	push	{r3, r4, r5, lr}
    DWORD Fdiv;

	if ( PortNum == 0 )
    13fe:	1e04      	subs	r4, r0, #0
    1400:	d022      	beq.n	1448 <UARTInit+0x4c>
    	}
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
	}
	return( FALSE ); 
    1402:	2000      	movs	r0, #0
    	}
    	U0IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
	}
	else if ( PortNum == 1 )
    1404:	2c01      	cmp	r4, #1
    1406:	d002      	beq.n	140e <UARTInit+0x12>
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
	}
	return( FALSE ); 
}
    1408:	bc38      	pop	{r3, r4, r5}
    140a:	bc02      	pop	{r1}
    140c:	4708      	bx	r1
	else if ( PortNum == 1 )
	{
#if EA_BOARD_LPC24XX
		PINSEL7 |= 0x0000000F;	/* P3.16 TXD1, P3.17 RXD1 */
#else							/* Default is Keil MCB2300 board */							
		PINSEL0 |= 0x40000000;	/* Enable TxD1 P0.15 */
    140e:	4b1a      	ldr	r3, [pc, #104]	; (1478 <UARTInit+0x7c>)
    1410:	2580      	movs	r5, #128	; 0x80
    1412:	6818      	ldr	r0, [r3, #0]
    1414:	05ea      	lsls	r2, r5, #23
    1416:	4302      	orrs	r2, r0
    1418:	601a      	str	r2, [r3, #0]
		PINSEL1 |= 0x00000001;	/* Enable RxD1 P0.16 */
    141a:	685d      	ldr	r5, [r3, #4]
    141c:	4325      	orrs	r5, r4
    141e:	605d      	str	r5, [r3, #4]
#endif
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <UARTInit+0x80>)
    1422:	2083      	movs	r0, #131	; 0x83
    1424:	6028      	str	r0, [r5, #0]
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    1426:	4816      	ldr	r0, [pc, #88]	; (1480 <UARTInit+0x84>)
    1428:	f00c fc16 	bl	dc58 <____aeabi_uidiv_from_thumb>
    	U1DLM = Fdiv / 256;							
    142c:	4b15      	ldr	r3, [pc, #84]	; (1484 <UARTInit+0x88>)
    142e:	0a01      	lsrs	r1, r0, #8
    1430:	6019      	str	r1, [r3, #0]
    	U1DLL = Fdiv % 256;
    1432:	22ff      	movs	r2, #255	; 0xff
    1434:	4914      	ldr	r1, [pc, #80]	; (1488 <UARTInit+0x8c>)
    1436:	4010      	ands	r0, r2
		U1LCR = 0x03;		/* DLAB = 0 */
    	U1FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    1438:	4a14      	ldr	r2, [pc, #80]	; (148c <UARTInit+0x90>)
		PINSEL1 |= 0x00000001;	/* Enable RxD1 P0.16 */
#endif
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U1DLM = Fdiv / 256;							
    	U1DLL = Fdiv % 256;
    143a:	6008      	str	r0, [r1, #0]
		U1LCR = 0x03;		/* DLAB = 0 */
    143c:	2303      	movs	r3, #3
    	U1FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    143e:	2107      	movs	r1, #7
#endif
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U1DLM = Fdiv / 256;							
    	U1DLL = Fdiv % 256;
		U1LCR = 0x03;		/* DLAB = 0 */
    1440:	602b      	str	r3, [r5, #0]
    	{
			return (FALSE);
    	}
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
    1442:	1c20      	adds	r0, r4, #0
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U1DLM = Fdiv / 256;							
    	U1DLL = Fdiv % 256;
		U1LCR = 0x03;		/* DLAB = 0 */
    	U1FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    1444:	6011      	str	r1, [r2, #0]
    	{
			return (FALSE);
    	}
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
    1446:	e7df      	b.n	1408 <UARTInit+0xc>
{
    DWORD Fdiv;

	if ( PortNum == 0 )
	{
		PINSEL0 = 0x00000050;       /* RxD0 and TxD0 */
    1448:	4d0b      	ldr	r5, [pc, #44]	; (1478 <UARTInit+0x7c>)
    144a:	2450      	movs	r4, #80	; 0x50
    144c:	602c      	str	r4, [r5, #0]

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    144e:	4c10      	ldr	r4, [pc, #64]	; (1490 <UARTInit+0x94>)
    1450:	2083      	movs	r0, #131	; 0x83
    1452:	6020      	str	r0, [r4, #0]
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    1454:	480a      	ldr	r0, [pc, #40]	; (1480 <UARTInit+0x84>)
    1456:	f00c fbff 	bl	dc58 <____aeabi_uidiv_from_thumb>
    	U0DLM = Fdiv / 256;							
    145a:	4b0e      	ldr	r3, [pc, #56]	; (1494 <UARTInit+0x98>)
    145c:	0a02      	lsrs	r2, r0, #8
    	U0DLL = Fdiv % 256;
    145e:	25ff      	movs	r5, #255	; 0xff
    1460:	490d      	ldr	r1, [pc, #52]	; (1498 <UARTInit+0x9c>)
	{
		PINSEL0 = 0x00000050;       /* RxD0 and TxD0 */

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U0DLM = Fdiv / 256;							
    1462:	601a      	str	r2, [r3, #0]
    	U0DLL = Fdiv % 256;
    1464:	4028      	ands	r0, r5
		U0LCR = 0x03;		/* DLAB = 0 */
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    1466:	4b0d      	ldr	r3, [pc, #52]	; (149c <UARTInit+0xa0>)
		PINSEL0 = 0x00000050;       /* RxD0 and TxD0 */

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U0DLM = Fdiv / 256;							
    	U0DLL = Fdiv % 256;
    1468:	6008      	str	r0, [r1, #0]
		U0LCR = 0x03;		/* DLAB = 0 */
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    146a:	2207      	movs	r2, #7

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U0DLM = Fdiv / 256;							
    	U0DLL = Fdiv % 256;
		U0LCR = 0x03;		/* DLAB = 0 */
    146c:	2003      	movs	r0, #3
    146e:	6020      	str	r0, [r4, #0]
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    1470:	601a      	str	r2, [r3, #0]
    	{
			return (FALSE);
    	}
    	U0IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
    1472:	2001      	movs	r0, #1
    1474:	e7c8      	b.n	1408 <UARTInit+0xc>
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	e002c000 	.word	0xe002c000
    147c:	e001000c 	.word	0xe001000c
    1480:	00225510 	.word	0x00225510
    1484:	e0010004 	.word	0xe0010004
    1488:	e0010000 	.word	0xe0010000
    148c:	e0010008 	.word	0xe0010008
    1490:	e000c00c 	.word	0xe000c00c
    1494:	e000c004 	.word	0xe000c004
    1498:	e000c000 	.word	0xe000c000
    149c:	e000c008 	.word	0xe000c008

000014a0 <UARTPutch>:
** parameters:			portNum, charactor
** Returned value:		None
** 
*****************************************************************************/
void UARTPutch( DWORD portNum, BYTE charactor)
{
    14a0:	b500      	push	{lr}
	if ( portNum == 0 )
    14a2:	2800      	cmp	r0, #0
    14a4:	d108      	bne.n	14b8 <UARTPutch+0x18>
		if (charactor== '\n') {
		while (!(U0LSR & 0x20));
		U0THR = '\r';
		}
*/
		while (!(U0LSR & 0x20));
    14a6:	4808      	ldr	r0, [pc, #32]	; (14c8 <UARTPutch+0x28>)
    14a8:	2220      	movs	r2, #32
    14aa:	6803      	ldr	r3, [r0, #0]
    14ac:	4213      	tst	r3, r2
    14ae:	d0fc      	beq.n	14aa <UARTPutch+0xa>
		U0THR = charactor;
    14b0:	4806      	ldr	r0, [pc, #24]	; (14cc <UARTPutch+0x2c>)
    14b2:	6001      	str	r1, [r0, #0]
		while (!(U1LSR & 0x20));
		U1THR = charactor;
#endif
	}
    return;
}
    14b4:	bc01      	pop	{r0}
    14b6:	4700      	bx	r0
		if (charactor== '\n') {
		while (!(U1LSR & 0x20));
		U1THR = '\r';
		}
*/
		while (!(U1LSR & 0x20));
    14b8:	4805      	ldr	r0, [pc, #20]	; (14d0 <UARTPutch+0x30>)
    14ba:	2220      	movs	r2, #32
    14bc:	6803      	ldr	r3, [r0, #0]
    14be:	4213      	tst	r3, r2
    14c0:	d0fc      	beq.n	14bc <UARTPutch+0x1c>
		U1THR = charactor;
    14c2:	4a04      	ldr	r2, [pc, #16]	; (14d4 <UARTPutch+0x34>)
    14c4:	6011      	str	r1, [r2, #0]
    14c6:	e7f5      	b.n	14b4 <UARTPutch+0x14>
    14c8:	e000c014 	.word	0xe000c014
    14cc:	e000c000 	.word	0xe000c000
    14d0:	e0010014 	.word	0xe0010014
    14d4:	e0010000 	.word	0xe0010000

000014d8 <UARTGetch>:
** parameters:			portNum, charactor
** Returned value:		None
** 
*****************************************************************************/
char UARTGetch (DWORD portNum)
{
    14d8:	b500      	push	{lr}
#ifdef BUFFERING_UART
    int c;
#endif
	if ( portNum == 0 )
    14da:	2800      	cmp	r0, #0
    14dc:	d10a      	bne.n	14f4 <UARTGetch+0x1c>
		}
		else {
			return FALSE;
		}
#else
		while (!(U0LSR & 0x01));
    14de:	490a      	ldr	r1, [pc, #40]	; (1508 <UARTGetch+0x30>)
    14e0:	2201      	movs	r2, #1
    14e2:	680b      	ldr	r3, [r1, #0]
    14e4:	4213      	tst	r3, r2
    14e6:	d0fc      	beq.n	14e2 <UARTGetch+0xa>
		return (U0RBR);
    14e8:	4a08      	ldr	r2, [pc, #32]	; (150c <UARTGetch+0x34>)
    14ea:	6811      	ldr	r1, [r2, #0]
    14ec:	0608      	lsls	r0, r1, #24
    14ee:	0e00      	lsrs	r0, r0, #24
#else
		while (!(U1LSR & 0x01));
		return (U1RBR);
#endif
	}
}
    14f0:	bc02      	pop	{r1}
    14f2:	4708      	bx	r1
		}
		else {
			return FALSE;
		}
#else
		while (!(U1LSR & 0x01));
    14f4:	4906      	ldr	r1, [pc, #24]	; (1510 <UARTGetch+0x38>)
    14f6:	2201      	movs	r2, #1
    14f8:	680b      	ldr	r3, [r1, #0]
    14fa:	4213      	tst	r3, r2
    14fc:	d0fc      	beq.n	14f8 <UARTGetch+0x20>
		return (U1RBR);
    14fe:	4a05      	ldr	r2, [pc, #20]	; (1514 <UARTGetch+0x3c>)
    1500:	6811      	ldr	r1, [r2, #0]
    1502:	0608      	lsls	r0, r1, #24
    1504:	0e00      	lsrs	r0, r0, #24
    1506:	e7f3      	b.n	14f0 <UARTGetch+0x18>
    1508:	e000c014 	.word	0xe000c014
    150c:	e000c000 	.word	0xe000c000
    1510:	e0010014 	.word	0xe0010014
    1514:	e0010000 	.word	0xe0010000

00001518 <GPIOInit>:
**                  regular GPIO, direction, Mask
** Returned value:  None
**
*****************************************************************************/
void GPIOInit( DWORD PortNum, DWORD PortType, DWORD PortDir, DWORD Mask )
{
    1518:	b530      	push	{r4, r5, lr}
	if ( (PortType == REGULAR_PORT) && ((PortNum == 0) || (PortNum == 1)) )
    151a:	2501      	movs	r5, #1
    151c:	2400      	movs	r4, #0
    151e:	4285      	cmp	r5, r0
    1520:	4164      	adcs	r4, r4
    1522:	2902      	cmp	r1, #2
    1524:	d110      	bne.n	1548 <GPIOInit+0x30>
    1526:	2c00      	cmp	r4, #0
    1528:	d00e      	beq.n	1548 <GPIOInit+0x30>
	{
		SCS &= ~GPIOM;    /* set GPIOx to use regular I/O */
    152a:	4917      	ldr	r1, [pc, #92]	; (1588 <GPIOInit+0x70>)
    152c:	680c      	ldr	r4, [r1, #0]
    152e:	43ac      	bics	r4, r5
    1530:	600c      	str	r4, [r1, #0]
		if ( PortDir == DIR_OUT )
    1532:	42aa      	cmp	r2, r5
    1534:	d015      	beq.n	1562 <GPIOInit+0x4a>
				+ PortNum * REGULAR_PORT_DIR_INDEX)) |= Mask;
		}
		else
		{
			(*(volatile unsigned long *)(REGULAR_PORT_DIR_BASE
				+ PortNum * REGULAR_PORT_DIR_INDEX)) &= ~Mask;
    1536:	4a15      	ldr	r2, [pc, #84]	; (158c <GPIOInit+0x74>)
    1538:	0105      	lsls	r5, r0, #4
    153a:	18ac      	adds	r4, r5, r2
    153c:	6820      	ldr	r0, [r4, #0]
    153e:	4398      	bics	r0, r3
    1540:	6020      	str	r0, [r4, #0]
			(*(volatile unsigned long *)(HS_PORT_DIR_BASE
				+ PortNum * HS_PORT_DIR_INDEX)) &= ~Mask;
		}
	}
	return;
}
    1542:	bc30      	pop	{r4, r5}
    1544:	bc01      	pop	{r0}
    1546:	4700      	bx	r0
		{
			(*(volatile unsigned long *)(REGULAR_PORT_DIR_BASE
				+ PortNum * REGULAR_PORT_DIR_INDEX)) &= ~Mask;
		}
	}
	else if ( PortType == FAST_PORT )
    1548:	2901      	cmp	r1, #1
    154a:	d1fa      	bne.n	1542 <GPIOInit+0x2a>
	{
		if ( (PortNum == 0) || (PortNum == 1) )
    154c:	2c00      	cmp	r4, #0
    154e:	d10f      	bne.n	1570 <GPIOInit+0x58>
		{
			SCS |= GPIOM; /* set GPIOx to use Fast I/O */
		}
		if ( PortDir == DIR_OUT )
    1550:	2a01      	cmp	r2, #1
    1552:	d012      	beq.n	157a <GPIOInit+0x62>
				+ PortNum * HS_PORT_DIR_INDEX)) |= Mask;
		}
		else
		{
			(*(volatile unsigned long *)(HS_PORT_DIR_BASE
				+ PortNum * HS_PORT_DIR_INDEX)) &= ~Mask;
    1554:	4a0e      	ldr	r2, [pc, #56]	; (1590 <GPIOInit+0x78>)
    1556:	1880      	adds	r0, r0, r2
    1558:	0145      	lsls	r5, r0, #5
    155a:	6829      	ldr	r1, [r5, #0]
    155c:	4399      	bics	r1, r3
    155e:	6029      	str	r1, [r5, #0]
    1560:	e7ef      	b.n	1542 <GPIOInit+0x2a>
	{
		SCS &= ~GPIOM;    /* set GPIOx to use regular I/O */
		if ( PortDir == DIR_OUT )
		{
			(*(volatile unsigned long *)(REGULAR_PORT_DIR_BASE
				+ PortNum * REGULAR_PORT_DIR_INDEX)) |= Mask;
    1562:	490a      	ldr	r1, [pc, #40]	; (158c <GPIOInit+0x74>)
    1564:	0105      	lsls	r5, r0, #4
    1566:	1868      	adds	r0, r5, r1
    1568:	6802      	ldr	r2, [r0, #0]
    156a:	4313      	orrs	r3, r2
    156c:	6003      	str	r3, [r0, #0]
    156e:	e7e8      	b.n	1542 <GPIOInit+0x2a>
	}
	else if ( PortType == FAST_PORT )
	{
		if ( (PortNum == 0) || (PortNum == 1) )
		{
			SCS |= GPIOM; /* set GPIOx to use Fast I/O */
    1570:	4c05      	ldr	r4, [pc, #20]	; (1588 <GPIOInit+0x70>)
    1572:	6825      	ldr	r5, [r4, #0]
    1574:	4329      	orrs	r1, r5
    1576:	6021      	str	r1, [r4, #0]
    1578:	e7ea      	b.n	1550 <GPIOInit+0x38>
		}
		if ( PortDir == DIR_OUT )
		{
			(*(volatile unsigned long *)(HS_PORT_DIR_BASE
				+ PortNum * HS_PORT_DIR_INDEX)) |= Mask;
    157a:	4c05      	ldr	r4, [pc, #20]	; (1590 <GPIOInit+0x78>)
    157c:	1902      	adds	r2, r0, r4
    157e:	0151      	lsls	r1, r2, #5
    1580:	6808      	ldr	r0, [r1, #0]
    1582:	4303      	orrs	r3, r0
    1584:	600b      	str	r3, [r1, #0]
    1586:	e7dc      	b.n	1542 <GPIOInit+0x2a>
    1588:	e01fc1a0 	.word	0xe01fc1a0
    158c:	e0028008 	.word	0xe0028008
    1590:	01fffe00 	.word	0x01fffe00

00001594 <__NOP>:
/*-----------------------------------------
		   Common Basis Functions
-------------------------------------------*/
inline void __NOP(void)
{
	__asm__ __volatile__("nop"); 
    1594:	46c0      	nop			; (mov r8, r8)
}
    1596:	4770      	bx	lr

00001598 <time_waste>:

void time_waste(volatile uint32_t dv)
{
    1598:	b500      	push	{lr}
    159a:	b085      	sub	sp, #20
    159c:	9001      	str	r0, [sp, #4]
	volatile uint32_t cnt;
	for (cnt=0; cnt<dv ; cnt++ ) { ; }
    159e:	2000      	movs	r0, #0
    15a0:	9003      	str	r0, [sp, #12]
    15a2:	9a03      	ldr	r2, [sp, #12]
    15a4:	9b01      	ldr	r3, [sp, #4]
    15a6:	429a      	cmp	r2, r3
    15a8:	d206      	bcs.n	15b8 <time_waste+0x20>
    15aa:	9a03      	ldr	r2, [sp, #12]
    15ac:	3201      	adds	r2, #1
    15ae:	9203      	str	r2, [sp, #12]
    15b0:	9903      	ldr	r1, [sp, #12]
    15b2:	9b01      	ldr	r3, [sp, #4]
    15b4:	4299      	cmp	r1, r3
    15b6:	d3f8      	bcc.n	15aa <time_waste+0x12>
}
    15b8:	b005      	add	sp, #20
    15ba:	bc01      	pop	{r0}
    15bc:	4700      	bx	r0
    15be:	46c0      	nop			; (mov r8, r8)

000015c0 <_delay_us>:

void _delay_us(volatile uint32_t us)
{
    15c0:	b500      	push	{lr}
    15c2:	b083      	sub	sp, #12
    15c4:	9001      	str	r0, [sp, #4]
    15c6:	e005      	b.n	15d4 <_delay_us+0x14>
/*-----------------------------------------
		   Common Basis Functions
-------------------------------------------*/
inline void __NOP(void)
{
	__asm__ __volatile__("nop"); 
    15c8:	46c0      	nop			; (mov r8, r8)
    15ca:	46c0      	nop			; (mov r8, r8)
    15cc:	46c0      	nop			; (mov r8, r8)
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	46c0      	nop			; (mov r8, r8)
    15d2:	46c0      	nop			; (mov r8, r8)
	for (cnt=0; cnt<dv ; cnt++ ) { ; }
}

void _delay_us(volatile uint32_t us)
{
	while(--us) { __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();}
    15d4:	9801      	ldr	r0, [sp, #4]
    15d6:	3801      	subs	r0, #1
    15d8:	9001      	str	r0, [sp, #4]
    15da:	9b01      	ldr	r3, [sp, #4]
    15dc:	2b00      	cmp	r3, #0
    15de:	d1f3      	bne.n	15c8 <_delay_us+0x8>
}
    15e0:	b003      	add	sp, #12
    15e2:	bc01      	pop	{r0}
    15e4:	4700      	bx	r0
    15e6:	46c0      	nop			; (mov r8, r8)

000015e8 <dump>:

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
{
    15e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ea:	465f      	mov	r7, fp
    15ec:	4656      	mov	r6, sl
    15ee:	464d      	mov	r5, r9
    15f0:	4644      	mov	r4, r8
    15f2:	b4f0      	push	{r4, r5, r6, r7}
    15f4:	b087      	sub	sp, #28
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
    15f6:	090a      	lsrs	r2, r1, #4

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
{
    15f8:	1c04      	adds	r4, r0, #0
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
    15fa:	9201      	str	r2, [sp, #4]
    15fc:	070b      	lsls	r3, r1, #28
    15fe:	d001      	beq.n	1604 <dump+0x1c>
    1600:	3201      	adds	r2, #1
    1602:	9201      	str	r2, [sp, #4]
	DBG_print("\n");
    1604:	200a      	movs	r0, #10
    1606:	f003 feef 	bl	53e8 <putchar>
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
    160a:	9a01      	ldr	r2, [sp, #4]
    160c:	2a00      	cmp	r2, #0
    160e:	dc00      	bgt.n	1612 <dump+0x2a>
    1610:	e0f9      	b.n	1806 <dump+0x21e>
    1612:	2300      	movs	r3, #0
    1614:	4ab9      	ldr	r2, [pc, #740]	; (18fc <dump+0x314>)
    1616:	9300      	str	r3, [sp, #0]
#endif

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
    1618:	3318      	adds	r3, #24
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
    161a:	46a0      	mov	r8, r4
    161c:	4691      	mov	r9, r2
#endif

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
    161e:	446b      	add	r3, sp
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1620:	222e      	movs	r2, #46	; 0x2e
    1622:	4cb7      	ldr	r4, [pc, #732]	; (1900 <dump+0x318>)
    1624:	af02      	add	r7, sp, #8
#endif

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
    1626:	469a      	mov	sl, r3
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1628:	4693      	mov	fp, r2
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
    162a:	4641      	mov	r1, r8
    162c:	48b5      	ldr	r0, [pc, #724]	; (1904 <dump+0x31c>)
    162e:	f003 fec1 	bl	53b4 <printf>
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
    1632:	4643      	mov	r3, r8
    1634:	7819      	ldrb	r1, [r3, #0]
    1636:	4648      	mov	r0, r9
    1638:	7039      	strb	r1, [r7, #0]
    163a:	f003 febb 	bl	53b4 <printf>
    163e:	4642      	mov	r2, r8
    1640:	7851      	ldrb	r1, [r2, #1]
    1642:	4648      	mov	r0, r9
    1644:	7079      	strb	r1, [r7, #1]
    1646:	f003 feb5 	bl	53b4 <printf>
    164a:	4643      	mov	r3, r8
    164c:	7899      	ldrb	r1, [r3, #2]
    164e:	4648      	mov	r0, r9
    1650:	70b9      	strb	r1, [r7, #2]
    1652:	f003 feaf 	bl	53b4 <printf>
    1656:	4642      	mov	r2, r8
    1658:	78d1      	ldrb	r1, [r2, #3]
    165a:	4648      	mov	r0, r9
    165c:	70f9      	strb	r1, [r7, #3]
    165e:	f003 fea9 	bl	53b4 <printf>
    1662:	4643      	mov	r3, r8
    1664:	7919      	ldrb	r1, [r3, #4]
    1666:	4648      	mov	r0, r9
    1668:	7139      	strb	r1, [r7, #4]
    166a:	f003 fea3 	bl	53b4 <printf>
    166e:	4642      	mov	r2, r8
    1670:	7951      	ldrb	r1, [r2, #5]
    1672:	4648      	mov	r0, r9
    1674:	7179      	strb	r1, [r7, #5]
    1676:	f003 fe9d 	bl	53b4 <printf>
    167a:	4643      	mov	r3, r8
    167c:	7999      	ldrb	r1, [r3, #6]
    167e:	4648      	mov	r0, r9
    1680:	71b9      	strb	r1, [r7, #6]
    1682:	f003 fe97 	bl	53b4 <printf>
    1686:	4642      	mov	r2, r8
    1688:	79d1      	ldrb	r1, [r2, #7]
    168a:	4648      	mov	r0, r9
    168c:	71f9      	strb	r1, [r7, #7]
    168e:	f003 fe91 	bl	53b4 <printf>
    1692:	4643      	mov	r3, r8
    1694:	7a19      	ldrb	r1, [r3, #8]
    1696:	4648      	mov	r0, r9
    1698:	7239      	strb	r1, [r7, #8]
    169a:	f003 fe8b 	bl	53b4 <printf>
    169e:	4642      	mov	r2, r8
    16a0:	7a51      	ldrb	r1, [r2, #9]
    16a2:	4648      	mov	r0, r9
    16a4:	7279      	strb	r1, [r7, #9]
    16a6:	f003 fe85 	bl	53b4 <printf>
    16aa:	4643      	mov	r3, r8
    16ac:	7a99      	ldrb	r1, [r3, #10]
    16ae:	4648      	mov	r0, r9
    16b0:	72b9      	strb	r1, [r7, #10]
    16b2:	f003 fe7f 	bl	53b4 <printf>
    16b6:	4642      	mov	r2, r8
    16b8:	7ad1      	ldrb	r1, [r2, #11]
    16ba:	4648      	mov	r0, r9
    16bc:	72f9      	strb	r1, [r7, #11]
    16be:	f003 fe79 	bl	53b4 <printf>
    16c2:	4643      	mov	r3, r8
    16c4:	7b19      	ldrb	r1, [r3, #12]
    16c6:	4648      	mov	r0, r9
    16c8:	7339      	strb	r1, [r7, #12]
    16ca:	f003 fe73 	bl	53b4 <printf>
    16ce:	4642      	mov	r2, r8
    16d0:	7b51      	ldrb	r1, [r2, #13]
    16d2:	4648      	mov	r0, r9
    16d4:	7379      	strb	r1, [r7, #13]
    16d6:	f003 fe6d 	bl	53b4 <printf>
    16da:	4643      	mov	r3, r8
    16dc:	7b99      	ldrb	r1, [r3, #14]
    16de:	4648      	mov	r0, r9
    16e0:	73b9      	strb	r1, [r7, #14]
    16e2:	f003 fe67 	bl	53b4 <printf>
    16e6:	4642      	mov	r2, r8
    16e8:	7bd1      	ldrb	r1, [r2, #15]
    16ea:	4648      	mov	r0, r9
    16ec:	73f9      	strb	r1, [r7, #15]
    16ee:	f003 fe61 	bl	53b4 <printf>
    16f2:	2010      	movs	r0, #16
    16f4:	4480      	add	r8, r0
		DBG_putch(' ');
    16f6:	6820      	ldr	r0, [r4, #0]
    16f8:	6882      	ldr	r2, [r0, #8]
    16fa:	6893      	ldr	r3, [r2, #8]
    16fc:	3b01      	subs	r3, #1
    16fe:	6093      	str	r3, [r2, #8]
    1700:	2b00      	cmp	r3, #0
    1702:	da00      	bge.n	1706 <dump+0x11e>
    1704:	e0c4      	b.n	1890 <dump+0x2a8>
    1706:	6812      	ldr	r2, [r2, #0]
    1708:	2020      	movs	r0, #32
    170a:	7010      	strb	r0, [r2, #0]
    170c:	6820      	ldr	r0, [r4, #0]
    170e:	6882      	ldr	r2, [r0, #8]
    1710:	6811      	ldr	r1, [r2, #0]
    1712:	3101      	adds	r1, #1
    1714:	6011      	str	r1, [r2, #0]
    1716:	2301      	movs	r3, #1
    1718:	1c3d      	adds	r5, r7, #0
    171a:	43bb      	bics	r3, r7
    171c:	d040      	beq.n	17a0 <dump+0x1b8>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    171e:	7839      	ldrb	r1, [r7, #0]
    1720:	1c0b      	adds	r3, r1, #0
    1722:	3b20      	subs	r3, #32
    1724:	061d      	lsls	r5, r3, #24
    1726:	0e2e      	lsrs	r6, r5, #24
    1728:	2e5f      	cmp	r6, #95	; 0x5f
    172a:	d800      	bhi.n	172e <dump+0x146>
    172c:	e0a0      	b.n	1870 <dump+0x288>
    172e:	6893      	ldr	r3, [r2, #8]
    1730:	3b01      	subs	r3, #1
    1732:	6093      	str	r3, [r2, #8]
    1734:	2b00      	cmp	r3, #0
    1736:	da00      	bge.n	173a <dump+0x152>
    1738:	e0c7      	b.n	18ca <dump+0x2e2>
    173a:	6812      	ldr	r2, [r2, #0]
    173c:	4658      	mov	r0, fp
    173e:	7010      	strb	r0, [r2, #0]
    1740:	6821      	ldr	r1, [r4, #0]
    1742:	688a      	ldr	r2, [r1, #8]
    1744:	6810      	ldr	r0, [r2, #0]
    1746:	3001      	adds	r0, #1
    1748:	6010      	str	r0, [r2, #0]
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    174a:	6820      	ldr	r0, [r4, #0]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    174c:	1c7d      	adds	r5, r7, #1
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    174e:	6882      	ldr	r2, [r0, #8]
    1750:	e026      	b.n	17a0 <dump+0x1b8>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1752:	6893      	ldr	r3, [r2, #8]
    1754:	3b01      	subs	r3, #1
    1756:	6093      	str	r3, [r2, #8]
    1758:	2b00      	cmp	r3, #0
    175a:	db3a      	blt.n	17d2 <dump+0x1ea>
    175c:	6812      	ldr	r2, [r2, #0]
    175e:	7011      	strb	r1, [r2, #0]
    1760:	6823      	ldr	r3, [r4, #0]
    1762:	689e      	ldr	r6, [r3, #8]
    1764:	6831      	ldr	r1, [r6, #0]
    1766:	3101      	adds	r1, #1
    1768:	6031      	str	r1, [r6, #0]
    176a:	1c6e      	adds	r6, r5, #1
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
    176c:	45b2      	cmp	sl, r6
    176e:	d040      	beq.n	17f2 <dump+0x20a>
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1770:	7869      	ldrb	r1, [r5, #1]
    1772:	1c0d      	adds	r5, r1, #0
    1774:	3d20      	subs	r5, #32
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1776:	6820      	ldr	r0, [r4, #0]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1778:	062b      	lsls	r3, r5, #24
    177a:	0e1d      	lsrs	r5, r3, #24
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    177c:	6882      	ldr	r2, [r0, #8]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    177e:	2d5f      	cmp	r5, #95	; 0x5f
    1780:	d81e      	bhi.n	17c0 <dump+0x1d8>
    1782:	6893      	ldr	r3, [r2, #8]
    1784:	3b01      	subs	r3, #1
    1786:	6093      	str	r3, [r2, #8]
    1788:	2b00      	cmp	r3, #0
    178a:	db63      	blt.n	1854 <dump+0x26c>
    178c:	6810      	ldr	r0, [r2, #0]
    178e:	7001      	strb	r1, [r0, #0]
    1790:	6822      	ldr	r2, [r4, #0]
    1792:	6893      	ldr	r3, [r2, #8]
    1794:	6819      	ldr	r1, [r3, #0]
    1796:	3101      	adds	r1, #1
    1798:	6019      	str	r1, [r3, #0]
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    179a:	6820      	ldr	r0, [r4, #0]
    179c:	6882      	ldr	r2, [r0, #8]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    179e:	1c75      	adds	r5, r6, #1
    17a0:	7829      	ldrb	r1, [r5, #0]
    17a2:	1c0e      	adds	r6, r1, #0
    17a4:	3e20      	subs	r6, #32
    17a6:	0633      	lsls	r3, r6, #24
    17a8:	0e1e      	lsrs	r6, r3, #24
    17aa:	2e5f      	cmp	r6, #95	; 0x5f
    17ac:	d9d1      	bls.n	1752 <dump+0x16a>
    17ae:	6893      	ldr	r3, [r2, #8]
    17b0:	3b01      	subs	r3, #1
    17b2:	6093      	str	r3, [r2, #8]
    17b4:	2b00      	cmp	r3, #0
    17b6:	db2f      	blt.n	1818 <dump+0x230>
    17b8:	6812      	ldr	r2, [r2, #0]
    17ba:	4658      	mov	r0, fp
    17bc:	7010      	strb	r0, [r2, #0]
    17be:	e7cf      	b.n	1760 <dump+0x178>
    17c0:	6893      	ldr	r3, [r2, #8]
    17c2:	3b01      	subs	r3, #1
    17c4:	6093      	str	r3, [r2, #8]
    17c6:	2b00      	cmp	r3, #0
    17c8:	db35      	blt.n	1836 <dump+0x24e>
    17ca:	6813      	ldr	r3, [r2, #0]
    17cc:	4658      	mov	r0, fp
    17ce:	7018      	strb	r0, [r3, #0]
    17d0:	e7de      	b.n	1790 <dump+0x1a8>
    17d2:	6996      	ldr	r6, [r2, #24]
    17d4:	42b3      	cmp	r3, r6
    17d6:	db2b      	blt.n	1830 <dump+0x248>
    17d8:	6810      	ldr	r0, [r2, #0]
    17da:	7001      	strb	r1, [r0, #0]
    17dc:	6820      	ldr	r0, [r4, #0]
    17de:	6882      	ldr	r2, [r0, #8]
    17e0:	6813      	ldr	r3, [r2, #0]
    17e2:	7819      	ldrb	r1, [r3, #0]
    17e4:	290a      	cmp	r1, #10
    17e6:	d023      	beq.n	1830 <dump+0x248>
    17e8:	3301      	adds	r3, #1
    17ea:	1c6e      	adds	r6, r5, #1
    17ec:	6013      	str	r3, [r2, #0]
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
    17ee:	45b2      	cmp	sl, r6
    17f0:	d1be      	bne.n	1770 <dump+0x188>
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
		}
        DBG_print("\n");
    17f2:	200a      	movs	r0, #10
    17f4:	f003 fdf8 	bl	53e8 <putchar>
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
    17f8:	9b00      	ldr	r3, [sp, #0]
    17fa:	9d01      	ldr	r5, [sp, #4]
    17fc:	3301      	adds	r3, #1
    17fe:	9300      	str	r3, [sp, #0]
    1800:	429d      	cmp	r5, r3
    1802:	dd00      	ble.n	1806 <dump+0x21e>
    1804:	e711      	b.n	162a <dump+0x42>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
		}
        DBG_print("\n");
	}
}
    1806:	b007      	add	sp, #28
    1808:	bc3c      	pop	{r2, r3, r4, r5}
    180a:	4690      	mov	r8, r2
    180c:	4699      	mov	r9, r3
    180e:	46a2      	mov	sl, r4
    1810:	46ab      	mov	fp, r5
    1812:	bcf0      	pop	{r4, r5, r6, r7}
    1814:	bc01      	pop	{r0}
    1816:	4700      	bx	r0
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1818:	6991      	ldr	r1, [r2, #24]
    181a:	428b      	cmp	r3, r1
    181c:	db30      	blt.n	1880 <dump+0x298>
    181e:	6813      	ldr	r3, [r2, #0]
    1820:	465e      	mov	r6, fp
    1822:	701e      	strb	r6, [r3, #0]
    1824:	6820      	ldr	r0, [r4, #0]
    1826:	6882      	ldr	r2, [r0, #8]
    1828:	6813      	ldr	r3, [r2, #0]
    182a:	7819      	ldrb	r1, [r3, #0]
    182c:	290a      	cmp	r1, #10
    182e:	d1db      	bne.n	17e8 <dump+0x200>
    1830:	f006 fdce 	bl	83d0 <__swbuf_r>
    1834:	e799      	b.n	176a <dump+0x182>
    1836:	6991      	ldr	r1, [r2, #24]
    1838:	428b      	cmp	r3, r1
    183a:	db25      	blt.n	1888 <dump+0x2a0>
    183c:	6815      	ldr	r5, [r2, #0]
    183e:	465a      	mov	r2, fp
    1840:	702a      	strb	r2, [r5, #0]
    1842:	6820      	ldr	r0, [r4, #0]
    1844:	6882      	ldr	r2, [r0, #8]
    1846:	6813      	ldr	r3, [r2, #0]
    1848:	7819      	ldrb	r1, [r3, #0]
    184a:	290a      	cmp	r1, #10
    184c:	d00d      	beq.n	186a <dump+0x282>
    184e:	3301      	adds	r3, #1
    1850:	6013      	str	r3, [r2, #0]
    1852:	e7a2      	b.n	179a <dump+0x1b2>
    1854:	6995      	ldr	r5, [r2, #24]
    1856:	42ab      	cmp	r3, r5
    1858:	db07      	blt.n	186a <dump+0x282>
    185a:	6810      	ldr	r0, [r2, #0]
    185c:	7001      	strb	r1, [r0, #0]
    185e:	6820      	ldr	r0, [r4, #0]
    1860:	6882      	ldr	r2, [r0, #8]
    1862:	6813      	ldr	r3, [r2, #0]
    1864:	7819      	ldrb	r1, [r3, #0]
    1866:	290a      	cmp	r1, #10
    1868:	d1f1      	bne.n	184e <dump+0x266>
    186a:	f006 fdb1 	bl	83d0 <__swbuf_r>
    186e:	e794      	b.n	179a <dump+0x1b2>
    1870:	6893      	ldr	r3, [r2, #8]
    1872:	3b01      	subs	r3, #1
    1874:	6093      	str	r3, [r2, #8]
    1876:	2b00      	cmp	r3, #0
    1878:	db19      	blt.n	18ae <dump+0x2c6>
    187a:	6813      	ldr	r3, [r2, #0]
    187c:	7019      	strb	r1, [r3, #0]
    187e:	e75f      	b.n	1740 <dump+0x158>
    1880:	212e      	movs	r1, #46	; 0x2e
    1882:	f006 fda5 	bl	83d0 <__swbuf_r>
    1886:	e770      	b.n	176a <dump+0x182>
    1888:	212e      	movs	r1, #46	; 0x2e
    188a:	f006 fda1 	bl	83d0 <__swbuf_r>
    188e:	e784      	b.n	179a <dump+0x1b2>
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1890:	6991      	ldr	r1, [r2, #24]
    1892:	428b      	cmp	r3, r1
    1894:	db28      	blt.n	18e8 <dump+0x300>
    1896:	6816      	ldr	r6, [r2, #0]
    1898:	2520      	movs	r5, #32
    189a:	7035      	strb	r5, [r6, #0]
    189c:	6820      	ldr	r0, [r4, #0]
    189e:	6882      	ldr	r2, [r0, #8]
    18a0:	6813      	ldr	r3, [r2, #0]
    18a2:	7819      	ldrb	r1, [r3, #0]
    18a4:	290a      	cmp	r1, #10
    18a6:	d020      	beq.n	18ea <dump+0x302>
    18a8:	3301      	adds	r3, #1
    18aa:	6013      	str	r3, [r2, #0]
    18ac:	e733      	b.n	1716 <dump+0x12e>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    18ae:	6995      	ldr	r5, [r2, #24]
    18b0:	42ab      	cmp	r3, r5
    18b2:	db16      	blt.n	18e2 <dump+0x2fa>
    18b4:	6816      	ldr	r6, [r2, #0]
    18b6:	7031      	strb	r1, [r6, #0]
    18b8:	6820      	ldr	r0, [r4, #0]
    18ba:	6882      	ldr	r2, [r0, #8]
    18bc:	6813      	ldr	r3, [r2, #0]
    18be:	7819      	ldrb	r1, [r3, #0]
    18c0:	290a      	cmp	r1, #10
    18c2:	d00e      	beq.n	18e2 <dump+0x2fa>
    18c4:	3301      	adds	r3, #1
    18c6:	6013      	str	r3, [r2, #0]
    18c8:	e73f      	b.n	174a <dump+0x162>
    18ca:	6991      	ldr	r1, [r2, #24]
    18cc:	428b      	cmp	r3, r1
    18ce:	db11      	blt.n	18f4 <dump+0x30c>
    18d0:	6815      	ldr	r5, [r2, #0]
    18d2:	465e      	mov	r6, fp
    18d4:	702e      	strb	r6, [r5, #0]
    18d6:	6820      	ldr	r0, [r4, #0]
    18d8:	6882      	ldr	r2, [r0, #8]
    18da:	6813      	ldr	r3, [r2, #0]
    18dc:	7819      	ldrb	r1, [r3, #0]
    18de:	290a      	cmp	r1, #10
    18e0:	d1f0      	bne.n	18c4 <dump+0x2dc>
    18e2:	f006 fd75 	bl	83d0 <__swbuf_r>
    18e6:	e730      	b.n	174a <dump+0x162>
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    18e8:	2120      	movs	r1, #32
    18ea:	f006 fd71 	bl	83d0 <__swbuf_r>
    18ee:	6820      	ldr	r0, [r4, #0]
    18f0:	6882      	ldr	r2, [r0, #8]
    18f2:	e710      	b.n	1716 <dump+0x12e>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    18f4:	212e      	movs	r1, #46	; 0x2e
    18f6:	f006 fd6b 	bl	83d0 <__swbuf_r>
    18fa:	e726      	b.n	174a <dump+0x162>
    18fc:	0000e840 	.word	0x0000e840
    1900:	40000000 	.word	0x40000000
    1904:	0000e838 	.word	0x0000e838

00001908 <TargetInit>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void TargetInit(void)
{
    1908:	b508      	push	{r3, lr}
    /* Add your codes here */
    i2enable();
    190a:	f00c f997 	bl	dc3c <__i2enable_from_thumb>
    PCONP |= 0x00001000;
    190e:	4b04      	ldr	r3, [pc, #16]	; (1920 <TargetInit+0x18>)
    1910:	2080      	movs	r0, #128	; 0x80
    1912:	6819      	ldr	r1, [r3, #0]
    1914:	0142      	lsls	r2, r0, #5
    1916:	430a      	orrs	r2, r1
    1918:	601a      	str	r2, [r3, #0]
    return;
}
    191a:	bc08      	pop	{r3}
    191c:	bc01      	pop	{r0}
    191e:	4700      	bx	r0
    1920:	e01fc0c4 	.word	0xe01fc0c4

00001924 <GPIOResetInit>:
** 
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    1924:	4b1c      	ldr	r3, [pc, #112]	; (1998 <GPIOResetInit+0x74>)
    1926:	4a1d      	ldr	r2, [pc, #116]	; (199c <GPIOResetInit+0x78>)
    PINSEL1 = 0x00154000;
    1928:	21aa      	movs	r1, #170	; 0xaa
** 
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    192a:	601a      	str	r2, [r3, #0]
    PINSEL1 = 0x00154000;
    192c:	0348      	lsls	r0, r1, #13
    PINSEL2 = 0x00000000;
    PINSEL3 = 0xF0000000;
    192e:	22f0      	movs	r2, #240	; 0xf0
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    1930:	6058      	str	r0, [r3, #4]
    PINSEL2 = 0x00000000;
    PINSEL3 = 0xF0000000;
    1932:	0611      	lsls	r1, r2, #24
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    PINSEL2 = 0x00000000;
    1934:	481a      	ldr	r0, [pc, #104]	; (19a0 <GPIOResetInit+0x7c>)
    PINSEL7 = 0x00000000;
    PINSEL8 = 0x00000000;
    PINSEL9 = 0x00000000;
   PINSEL10 = 0x00000000;
    
     IODIR0 = 0x00000000;
    1936:	4a1b      	ldr	r2, [pc, #108]	; (19a4 <GPIOResetInit+0x80>)
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    PINSEL2 = 0x00000000;
    1938:	2300      	movs	r3, #0
    193a:	6003      	str	r3, [r0, #0]
    PINSEL3 = 0xF0000000;
    193c:	6041      	str	r1, [r0, #4]
    PINSEL4 = 0x00000000;
    193e:	6083      	str	r3, [r0, #8]
    PINSEL5 = 0x00000000;
    1940:	60c3      	str	r3, [r0, #12]
    PINSEL6 = 0x00000000;
    1942:	6103      	str	r3, [r0, #16]
    PINSEL7 = 0x00000000;
    1944:	6143      	str	r3, [r0, #20]
    PINSEL8 = 0x00000000;
    1946:	6183      	str	r3, [r0, #24]
    PINSEL9 = 0x00000000;
    1948:	61c3      	str	r3, [r0, #28]
   PINSEL10 = 0x00000000;
    194a:	6203      	str	r3, [r0, #32]
    
     IODIR0 = 0x00000000;
    194c:	6013      	str	r3, [r2, #0]
     IODIR1 = 0x00000000;
    194e:	6113      	str	r3, [r2, #16]
     IOSET0 = 0x00000000;
    1950:	3a04      	subs	r2, #4
    1952:	6013      	str	r3, [r2, #0]
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    FIO1DIR = 0x00000000;
    FIO2DIR = 0x00000201;
    1954:	4814      	ldr	r0, [pc, #80]	; (19a8 <GPIOResetInit+0x84>)
   PINSEL10 = 0x00000000;
    
     IODIR0 = 0x00000000;
     IODIR1 = 0x00000000;
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    1956:	6113      	str	r3, [r2, #16]
    
    FIO0DIR = 0x00000000;
    1958:	4a14      	ldr	r2, [pc, #80]	; (19ac <GPIOResetInit+0x88>)
    FIO1DIR = 0x00000000;
    FIO2DIR = 0x00000201;
    FIO3DIR = 0x00000000;
    FIO4DIR = 0x0000FFFF;
    195a:	4915      	ldr	r1, [pc, #84]	; (19b0 <GPIOResetInit+0x8c>)
     IODIR0 = 0x00000000;
     IODIR1 = 0x00000000;
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    195c:	6013      	str	r3, [r2, #0]
    FIO1DIR = 0x00000000;
    195e:	6213      	str	r3, [r2, #32]
    FIO2DIR = 0x00000201;
    1960:	6410      	str	r0, [r2, #64]	; 0x40
    FIO3DIR = 0x00000000;
    1962:	6613      	str	r3, [r2, #96]	; 0x60
     IODIR1 = 0x00000000;
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    FIO1DIR = 0x00000000;
    1964:	3220      	adds	r2, #32
    FIO2DIR = 0x00000201;
    FIO3DIR = 0x00000000;
    FIO4DIR = 0x0000FFFF;
    1966:	6611      	str	r1, [r2, #96]	; 0x60
    
	FIO0MASK = 0x00000000;
    1968:	3a10      	subs	r2, #16
    196a:	6013      	str	r3, [r2, #0]
	FIO0PIN = 0x00000000;
    196c:	6053      	str	r3, [r2, #4]
	FIO0SET = 0x00000000;
    196e:	6093      	str	r3, [r2, #8]
	FIO0CLR = 0x00000000;
    1970:	60d3      	str	r3, [r2, #12]
	
	FIO1MASK = 0x00000000;
    1972:	3220      	adds	r2, #32
    1974:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0x00000000;
    1976:	6053      	str	r3, [r2, #4]
	FIO1SET = 0x00000000;
    1978:	6093      	str	r3, [r2, #8]
	FIO1CLR = 0x00000000;
    197a:	60d3      	str	r3, [r2, #12]
	
	FIO2MASK = 0x00000000;
    197c:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0x00000000;
    197e:	6253      	str	r3, [r2, #36]	; 0x24
	FIO2SET = 0x00000000;
    1980:	6293      	str	r3, [r2, #40]	; 0x28
	FIO2CLR = 0x00000000;
    1982:	62d3      	str	r3, [r2, #44]	; 0x2c

	FIO3MASK = 0x00000000;
    1984:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0x00000000;
    1986:	6453      	str	r3, [r2, #68]	; 0x44
	FIO3SET = 0x00000000;
    1988:	6493      	str	r3, [r2, #72]	; 0x48
	FIO3CLR = 0x00000000;
    198a:	64d3      	str	r3, [r2, #76]	; 0x4c
	
	FIO4MASK = 0x00000000;
    198c:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0x00000000;
    198e:	6653      	str	r3, [r2, #100]	; 0x64
	FIO4SET = 0x00000000;
    1990:	6693      	str	r3, [r2, #104]	; 0x68
	FIO4CLR = 0x00000000;
    1992:	66d3      	str	r3, [r2, #108]	; 0x6c
	
    return;        
}
    1994:	4770      	bx	lr
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	e002c000 	.word	0xe002c000
    199c:	0fa00050 	.word	0x0fa00050
    19a0:	e002c008 	.word	0xe002c008
    19a4:	e0028008 	.word	0xe0028008
    19a8:	00000201 	.word	0x00000201
    19ac:	3fffc000 	.word	0x3fffc000
    19b0:	0000ffff 	.word	0x0000ffff

000019b4 <ConfigurePLL>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void ConfigurePLL ( void )
{
    19b4:	b510      	push	{r4, lr}
	DWORD MValue, NValue;

	if ( PLLSTAT & (1 << 25) )
    19b6:	4829      	ldr	r0, [pc, #164]	; (1a5c <ConfigurePLL+0xa8>)
    19b8:	6803      	ldr	r3, [r0, #0]
    19ba:	019a      	lsls	r2, r3, #6
    19bc:	d506      	bpl.n	19cc <ConfigurePLL+0x18>
    {
		PLLCON = 1;			/* Enable PLL, disconnected */
    19be:	4928      	ldr	r1, [pc, #160]	; (1a60 <ConfigurePLL+0xac>)
    19c0:	2201      	movs	r2, #1
    19c2:	600a      	str	r2, [r1, #0]
	 	PLLFEED = 0xaa;
    19c4:	32a9      	adds	r2, #169	; 0xa9
    19c6:	60ca      	str	r2, [r1, #12]
		PLLFEED = 0x55;
    19c8:	3a55      	subs	r2, #85	; 0x55
    19ca:	60ca      	str	r2, [r1, #12]
    }

    PLLCON = 0;				/* Disable PLL, disconnected */
    19cc:	4b24      	ldr	r3, [pc, #144]	; (1a60 <ConfigurePLL+0xac>)
    19ce:	2200      	movs	r2, #0
    19d0:	601a      	str	r2, [r3, #0]
    PLLFEED = 0xaa;
    19d2:	32aa      	adds	r2, #170	; 0xaa
    19d4:	60da      	str	r2, [r3, #12]
    PLLFEED = 0x55;
    19d6:	3a55      	subs	r2, #85	; 0x55
    19d8:	60da      	str	r2, [r3, #12]
    
	SCS |= 0x20;			/* Enable main OSC */
    19da:	4922      	ldr	r1, [pc, #136]	; (1a64 <ConfigurePLL+0xb0>)
    19dc:	680c      	ldr	r4, [r1, #0]
    19de:	3a35      	subs	r2, #53	; 0x35
    19e0:	4314      	orrs	r4, r2
    19e2:	600c      	str	r4, [r1, #0]
    while( !(SCS & 0x40) );	/* Wait until main OSC is usable */
    19e4:	3220      	adds	r2, #32
    19e6:	6808      	ldr	r0, [r1, #0]
    19e8:	4210      	tst	r0, r2
    19ea:	d0fc      	beq.n	19e6 <ConfigurePLL+0x32>

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
    19ec:	4b1e      	ldr	r3, [pc, #120]	; (1a68 <ConfigurePLL+0xb4>)
    19ee:	2001      	movs	r0, #1
    19f0:	6018      	str	r0, [r3, #0]
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
    19f2:	220b      	movs	r2, #11
    19f4:	3b88      	subs	r3, #136	; 0x88
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	PLLCON = 1;				/* Enable PLL */
    19f6:	4c1a      	ldr	r4, [pc, #104]	; (1a60 <ConfigurePLL+0xac>)
    while( !(SCS & 0x40) );	/* Wait until main OSC is usable */

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
    19f8:	601a      	str	r2, [r3, #0]
	PLLFEED = 0xAA;
    19fa:	21aa      	movs	r1, #170	; 0xaa
	PLLFEED = 0x55;
    19fc:	324a      	adds	r2, #74	; 0x4a

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
	PLLFEED = 0xAA;
    19fe:	6099      	str	r1, [r3, #8]
	PLLFEED = 0x55;
    1a00:	609a      	str	r2, [r3, #8]
	PLLCON = 1;				/* Enable PLL */
    1a02:	6020      	str	r0, [r4, #0]
	PLLFEED = 0xAA;
    1a04:	6099      	str	r1, [r3, #8]
	PLLFEED = 0x55;
    1a06:	609a      	str	r2, [r3, #8]

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
	PLLFEED = 0xAA;
    1a08:	3308      	adds	r3, #8
	PLLCON = 1;				/* Enable PLL */
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	

    CCLKCFG = CCLKDivValue;	        /* Fcore = 72 MHz */
    1a0a:	3a52      	subs	r2, #82	; 0x52
    1a0c:	679a      	str	r2, [r3, #120]	; 0x78
#if USE_USB
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
    1a0e:	3202      	adds	r2, #2
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    1a10:	392a      	subs	r1, #42	; 0x2a
	PLLFEED = 0x55;
	

    CCLKCFG = CCLKDivValue;	        /* Fcore = 72 MHz */
#if USE_USB
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
    1a12:	67da      	str	r2, [r3, #124]	; 0x7c
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    1a14:	4811      	ldr	r0, [pc, #68]	; (1a5c <ConfigurePLL+0xa8>)
    1a16:	04c9      	lsls	r1, r1, #19
    1a18:	6803      	ldr	r3, [r0, #0]
    1a1a:	4a10      	ldr	r2, [pc, #64]	; (1a5c <ConfigurePLL+0xa8>)
    1a1c:	420b      	tst	r3, r1
    1a1e:	d0fb      	beq.n	1a18 <ConfigurePLL+0x64>
    
    MValue = PLLSTAT & 0x00007FFF;
    1a20:	6813      	ldr	r3, [r2, #0]
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
    1a22:	6814      	ldr	r4, [r2, #0]
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    
    MValue = PLLSTAT & 0x00007FFF;
    1a24:	045a      	lsls	r2, r3, #17
    1a26:	0c52      	lsrs	r2, r2, #17
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
    1a28:	3a0b      	subs	r2, #11
    1a2a:	0220      	lsls	r0, r4, #8
    1a2c:	1e51      	subs	r1, r2, #1
    1a2e:	418a      	sbcs	r2, r1
    1a30:	0e01      	lsrs	r1, r0, #24
    while ((MValue != PLL_MValue) && ( NValue != PLL_NValue) );
    1a32:	2900      	cmp	r1, #0
    1a34:	d10f      	bne.n	1a56 <ConfigurePLL+0xa2>

    PLLCON = 3;				/* enable and connect */
    1a36:	490a      	ldr	r1, [pc, #40]	; (1a60 <ConfigurePLL+0xac>)
    1a38:	2003      	movs	r0, #3
    1a3a:	6008      	str	r0, [r1, #0]
    PLLFEED = 0xaa;
    1a3c:	30a7      	adds	r0, #167	; 0xa7
    1a3e:	60c8      	str	r0, [r1, #12]
    PLLFEED = 0x55;
    1a40:	3855      	subs	r0, #85	; 0x55
    1a42:	60c8      	str	r0, [r1, #12]
	while ( ((PLLSTAT & (1 << 25)) == 0) );	/* Check connect bit status */
    1a44:	302b      	adds	r0, #43	; 0x2b
    1a46:	4905      	ldr	r1, [pc, #20]	; (1a5c <ConfigurePLL+0xa8>)
    1a48:	0482      	lsls	r2, r0, #18
    1a4a:	680c      	ldr	r4, [r1, #0]
    1a4c:	4214      	tst	r4, r2
    1a4e:	d0fc      	beq.n	1a4a <ConfigurePLL+0x96>


	return;
}
    1a50:	bc10      	pop	{r4}
    1a52:	bc01      	pop	{r0}
    1a54:	4700      	bx	r0

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    
    MValue = PLLSTAT & 0x00007FFF;
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
    while ((MValue != PLL_MValue) && ( NValue != PLL_NValue) );
    1a56:	2a00      	cmp	r2, #0
    1a58:	d0ed      	beq.n	1a36 <ConfigurePLL+0x82>
    1a5a:	e7fe      	b.n	1a5a <ConfigurePLL+0xa6>
    1a5c:	e01fc088 	.word	0xe01fc088
    1a60:	e01fc080 	.word	0xe01fc080
    1a64:	e01fc1a0 	.word	0xe01fc1a0
    1a68:	e01fc10c 	.word	0xe01fc10c

00001a6c <TargetResetInit>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void TargetResetInit(void)
{
    1a6c:	b508      	push	{r3, lr}
#endif

#ifdef __DEBUG_RAM    
    MEMMAP = 0x2;			/* remap to internal RAM */
#else
    MEMMAP = 0x1;			/* remap to internal flash */
    1a6e:	4b0f      	ldr	r3, [pc, #60]	; (1aac <TargetResetInit+0x40>)
    1a70:	2201      	movs	r2, #1
    1a72:	601a      	str	r2, [r3, #0]
#endif 


#if USE_USB
	PCONP |= 0x80000000;		/* Turn On USB PCLK */
    1a74:	3384      	adds	r3, #132	; 0x84
    1a76:	6819      	ldr	r1, [r3, #0]
    1a78:	327f      	adds	r2, #127	; 0x7f
    1a7a:	0610      	lsls	r0, r2, #24
    1a7c:	4308      	orrs	r0, r1
    1a7e:	6018      	str	r0, [r3, #0]
#endif
	/* Configure PLL, switch from IRC to Main OSC */
	ConfigurePLL();
    1a80:	f7ff ff98 	bl	19b4 <ConfigurePLL>
#if (Fpclk / (Fcclk / 4)) == 1
    PCLKSEL0 = 0x00000000;	/* PCLK is 1/4 CCLK */
    PCLKSEL1 = 0x00000000;
#endif
#if (Fpclk / (Fcclk / 4)) == 2
    PCLKSEL0 = 0xAAAAAAAA;	/* PCLK is 1/2 CCLK */
    1a84:	4b0a      	ldr	r3, [pc, #40]	; (1ab0 <TargetResetInit+0x44>)
    1a86:	490b      	ldr	r1, [pc, #44]	; (1ab4 <TargetResetInit+0x48>)
    1a88:	600b      	str	r3, [r1, #0]
    PCLKSEL1 = 0xAAAAAAAA;	 
    1a8a:	604b      	str	r3, [r1, #4]
    PCLKSEL0 = 0x55555555;	/* PCLK is the same as CCLK */
    PCLKSEL1 = 0x55555555;	
#endif

    /* Set memory accelerater module*/
    MAMCR = 0;
    1a8c:	4b0a      	ldr	r3, [pc, #40]	; (1ab8 <TargetResetInit+0x4c>)
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
    1a8e:	480b      	ldr	r0, [pc, #44]	; (1abc <TargetResetInit+0x50>)
    PCLKSEL0 = 0x55555555;	/* PCLK is the same as CCLK */
    PCLKSEL1 = 0x55555555;	
#endif

    /* Set memory accelerater module*/
    MAMCR = 0;
    1a90:	2200      	movs	r2, #0
    1a92:	601a      	str	r2, [r3, #0]
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
    1a94:	2103      	movs	r1, #3
#endif
#endif
    MAMCR = 2;
    1a96:	2202      	movs	r2, #2
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
    1a98:	6001      	str	r1, [r0, #0]
#endif
#endif
    MAMCR = 2;
    1a9a:	601a      	str	r2, [r3, #0]
	
	init_VIC();
    1a9c:	f7ff fb6c 	bl	1178 <init_VIC>
	
	TargetInit();
    1aa0:	f7ff ff32 	bl	1908 <TargetInit>
	
    return;
}
    1aa4:	bc08      	pop	{r3}
    1aa6:	bc01      	pop	{r0}
    1aa8:	4700      	bx	r0
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	e01fc040 	.word	0xe01fc040
    1ab0:	aaaaaaaa 	.word	0xaaaaaaaa
    1ab4:	e01fc1a8 	.word	0xe01fc1a8
    1ab8:	e01fc000 	.word	0xe01fc000
    1abc:	e01fc004 	.word	0xe01fc004

00001ac0 <_read_r>:
	#define TRUE  1
#endif

/* new code for _read_r provided by Alexey Shusharin - Thanks */
_ssize_t _read_r(struct _reent *r, int file, void *ptr, size_t len)
{
    1ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ac2:	4647      	mov	r7, r8
    1ac4:	b480      	push	{r7}
    1ac6:	1c1f      	adds	r7, r3, #0
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
    1ac8:	1e1c      	subs	r4, r3, #0
    1aca:	d011      	beq.n	1af0 <_read_r+0x30>
    1acc:	2600      	movs	r6, #0
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1ace:	3b02      	subs	r3, #2
{
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
    1ad0:	1c15      	adds	r5, r2, #0
  for (i = 0; i < len; i++)
    1ad2:	1c34      	adds	r4, r6, #0
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1ad4:	4698      	mov	r8, r3
  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
  {
	/* 20090521Nemui */
	do{		
		c = getch();
    1ad6:	2000      	movs	r0, #0
    1ad8:	f7ff fcfe 	bl	14d8 <UARTGetch>
	}while(c == FALSE);
    1adc:	2800      	cmp	r0, #0
    1ade:	d0fa      	beq.n	1ad6 <_read_r+0x16>
	/* 20090521Nemui */
	
    *p++ = c;
    1ae0:	7028      	strb	r0, [r5, #0]
    1ae2:	3501      	adds	r5, #1
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1ae4:	280d      	cmp	r0, #13
    1ae6:	d009      	beq.n	1afc <_read_r+0x3c>
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
    1ae8:	3401      	adds	r4, #1
    1aea:	1c26      	adds	r6, r4, #0
    1aec:	42a7      	cmp	r7, r4
    1aee:	d8f2      	bhi.n	1ad6 <_read_r+0x16>
	  #endif
      return i + 2;
    }
  }
  return i;
}
    1af0:	1c20      	adds	r0, r4, #0
    1af2:	bc04      	pop	{r2}
    1af4:	4690      	mov	r8, r2
    1af6:	bcf0      	pop	{r4, r5, r6, r7}
    1af8:	bc02      	pop	{r1}
    1afa:	4708      	bx	r1
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1afc:	45b0      	cmp	r8, r6
    1afe:	d3f3      	bcc.n	1ae8 <_read_r+0x28>
    {
      *p = '\n';					 /* 0x0A */
    1b00:	200a      	movs	r0, #10
    1b02:	7028      	strb	r0, [r5, #0]
	  #ifdef ECHOBACK 
		putch('\n');				 /* 0x0A */
	  #endif
      return i + 2;
    1b04:	3402      	adds	r4, #2
    1b06:	e7f3      	b.n	1af0 <_read_r+0x30>

00001b08 <_write_r>:
_ssize_t _write_r (
    struct _reent *r, 
    int file, 
    const void *ptr, 
    size_t len)
{
    1b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b0a:	1c15      	adds	r5, r2, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b0c:	1e1e      	subs	r6, r3, #0
    1b0e:	d02b      	beq.n	1b68 <_write_r+0x60>
		if (*p == '\n' ) putch('\r');
    1b10:	7811      	ldrb	r1, [r2, #0]
    1b12:	1e77      	subs	r7, r6, #1
    1b14:	2301      	movs	r3, #1
    1b16:	401f      	ands	r7, r3
    1b18:	290a      	cmp	r1, #10
    1b1a:	d02f      	beq.n	1b7c <_write_r+0x74>
		putch(*p++);
    1b1c:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b1e:	2401      	movs	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1b20:	f7ff fcbe 	bl	14a0 <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b24:	42b4      	cmp	r4, r6
    1b26:	d21f      	bcs.n	1b68 <_write_r+0x60>
    1b28:	2f00      	cmp	r7, #0
    1b2a:	d008      	beq.n	1b3e <_write_r+0x36>
		if (*p == '\n' ) putch('\r');
    1b2c:	5d29      	ldrb	r1, [r5, r4]
    1b2e:	290a      	cmp	r1, #10
    1b30:	d02a      	beq.n	1b88 <_write_r+0x80>
		putch(*p++);
    1b32:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b34:	3401      	adds	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1b36:	f7ff fcb3 	bl	14a0 <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b3a:	42b4      	cmp	r4, r6
    1b3c:	d214      	bcs.n	1b68 <_write_r+0x60>
		if (*p == '\n' ) putch('\r');
    1b3e:	5d29      	ldrb	r1, [r5, r4]
    1b40:	290a      	cmp	r1, #10
    1b42:	d015      	beq.n	1b70 <_write_r+0x68>
		putch(*p++);
    1b44:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b46:	3401      	adds	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1b48:	f7ff fcaa 	bl	14a0 <UARTPutch>
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
		if (*p == '\n' ) putch('\r');
    1b4c:	5d29      	ldrb	r1, [r5, r4]
    1b4e:	290a      	cmp	r1, #10
    1b50:	d1ef      	bne.n	1b32 <_write_r+0x2a>
    1b52:	2000      	movs	r0, #0
    1b54:	210d      	movs	r1, #13
    1b56:	f7ff fca3 	bl	14a0 <UARTPutch>
    1b5a:	5d29      	ldrb	r1, [r5, r4]
		putch(*p++);
    1b5c:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b5e:	3401      	adds	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1b60:	f7ff fc9e 	bl	14a0 <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b64:	42b4      	cmp	r4, r6
    1b66:	d3ea      	bcc.n	1b3e <_write_r+0x36>
		if (*p == '\n' ) putch('\r');
		putch(*p++);
	}
	
	return len;
}
    1b68:	1c30      	adds	r0, r6, #0
    1b6a:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1b6c:	bc02      	pop	{r1}
    1b6e:	4708      	bx	r1
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
		if (*p == '\n' ) putch('\r');
    1b70:	3103      	adds	r1, #3
    1b72:	2000      	movs	r0, #0
    1b74:	f7ff fc94 	bl	14a0 <UARTPutch>
    1b78:	5d29      	ldrb	r1, [r5, r4]
    1b7a:	e7e3      	b.n	1b44 <_write_r+0x3c>
    1b7c:	210d      	movs	r1, #13
    1b7e:	2000      	movs	r0, #0
    1b80:	f7ff fc8e 	bl	14a0 <UARTPutch>
    1b84:	7829      	ldrb	r1, [r5, #0]
    1b86:	e7c9      	b.n	1b1c <_write_r+0x14>
    1b88:	3103      	adds	r1, #3
    1b8a:	2000      	movs	r0, #0
    1b8c:	f7ff fc88 	bl	14a0 <UARTPutch>
    1b90:	5d29      	ldrb	r1, [r5, r4]
    1b92:	e7ce      	b.n	1b32 <_write_r+0x2a>

00001b94 <_close_r>:
int _close_r(
    struct _reent *r, 
    int file)
{
	return 0;
}
    1b94:	2000      	movs	r0, #0
    1b96:	4770      	bx	lr

00001b98 <_lseek_r>:
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
}
    1b98:	2000      	movs	r0, #0
    1b9a:	4770      	bx	lr

00001b9c <_fstat_r>:
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
    1b9c:	2080      	movs	r0, #128	; 0x80
    1b9e:	0183      	lsls	r3, r0, #6
    1ba0:	6053      	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
}
    1ba2:	2000      	movs	r0, #0
    1ba4:	4770      	bx	lr
    1ba6:	46c0      	nop			; (mov r8, r8)

00001ba8 <isatty>:
int isatty(int file); /* avoid warning */
#endif
int isatty(int file)
{
	return 1;
}
    1ba8:	2001      	movs	r0, #1
    1baa:	4770      	bx	lr

00001bac <_exit>:


void _exit(int n) {
    1bac:	b500      	push	{lr}
    1bae:	e7fe      	b.n	1bae <_exit+0x2>

00001bb0 <_getpid>:
}

int _getpid(int file)
{
	return 1;
}
    1bb0:	2001      	movs	r0, #1
    1bb2:	4770      	bx	lr

00001bb4 <_kill>:

int _kill(int file)
{
	return 1;
}
    1bb4:	2001      	movs	r0, #1
    1bb6:	4770      	bx	lr

00001bb8 <_sbrk_r>:
/* messages must be suppressed.											*/

void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
    1bb8:	b500      	push	{lr}
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
    1bba:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <_sbrk_r+0x18>)
    1bbc:	6818      	ldr	r0, [r3, #0]
    1bbe:	2800      	cmp	r0, #0
    1bc0:	d003      	beq.n	1bca <_sbrk_r+0x12>
		heap_ptr = end;
	}
	base = heap_ptr;	/*  Point to end of heap.					*/
	heap_ptr += nbytes;	/*  Increase heap.							*/
    1bc2:	1841      	adds	r1, r0, r1
    1bc4:	6019      	str	r1, [r3, #0]
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
    1bc6:	bc02      	pop	{r1}
    1bc8:	4708      	bx	r1
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
    1bca:	4802      	ldr	r0, [pc, #8]	; (1bd4 <_sbrk_r+0x1c>)
    1bcc:	e7f9      	b.n	1bc2 <_sbrk_r+0xa>
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	400009b4 	.word	0x400009b4
    1bd4:	40000b90 	.word	0x40000b90

00001bd8 <_sbrk>:
}



void * _sbrk(ptrdiff_t incr)
{
    1bd8:	b500      	push	{lr}
  char  *base;

/* Initialize if first time through. */

  if (!heap_ptr) heap_ptr = end;
    1bda:	4a05      	ldr	r2, [pc, #20]	; (1bf0 <_sbrk+0x18>)
    1bdc:	6813      	ldr	r3, [r2, #0]
    1bde:	2b00      	cmp	r3, #0
    1be0:	d004      	beq.n	1bec <_sbrk+0x14>

  base = heap_ptr;      /*  Point to end of heap.                       */
  heap_ptr += incr;     /*  Increase heap.                              */
    1be2:	1818      	adds	r0, r3, r0
    1be4:	6010      	str	r0, [r2, #0]

  return base;          /*  Return pointer to start of new heap area.   */
}
    1be6:	1c18      	adds	r0, r3, #0
    1be8:	bc02      	pop	{r1}
    1bea:	4708      	bx	r1
{
  char  *base;

/* Initialize if first time through. */

  if (!heap_ptr) heap_ptr = end;
    1bec:	4b01      	ldr	r3, [pc, #4]	; (1bf4 <_sbrk+0x1c>)
    1bee:	e7f8      	b.n	1be2 <_sbrk+0xa>
    1bf0:	400009b4 	.word	0x400009b4
    1bf4:	40000b90 	.word	0x40000b90

00001bf8 <_open>:

  return base;          /*  Return pointer to start of new heap area.   */
}

int _open(const char *path, int flags, ...)
{
    1bf8:	b40e      	push	{r1, r2, r3}
  return 1;
}
    1bfa:	2001      	movs	r0, #1
    1bfc:	b003      	add	sp, #12
    1bfe:	4770      	bx	lr

00001c00 <_close>:

int _close(int fd)
{
  return 0;
}
    1c00:	2000      	movs	r0, #0
    1c02:	4770      	bx	lr

00001c04 <_fstat>:

int _fstat(int fd, struct stat *st)
{
  st->st_mode = S_IFCHR;
    1c04:	2080      	movs	r0, #128	; 0x80
    1c06:	0183      	lsls	r3, r0, #6
    1c08:	604b      	str	r3, [r1, #4]
  return 0;
}
    1c0a:	2000      	movs	r0, #0
    1c0c:	4770      	bx	lr
    1c0e:	46c0      	nop			; (mov r8, r8)

00001c10 <_isatty>:

int _isatty(int fd)
{
  return 1;
}
    1c10:	2001      	movs	r0, #1
    1c12:	4770      	bx	lr

00001c14 <_lseek>:


int _lseek(int fd, off_t pos, int whence)
{
  return 0;
}
    1c14:	2000      	movs	r0, #0
    1c16:	4770      	bx	lr

00001c18 <_read>:

int _read(int fd, char *buf, size_t cnt)
{
    1c18:	b510      	push	{r4, lr}
  *buf = getch();
    1c1a:	2000      	movs	r0, #0
{
  return 0;
}

int _read(int fd, char *buf, size_t cnt)
{
    1c1c:	1c0c      	adds	r4, r1, #0
  *buf = getch();
    1c1e:	f7ff fc5b 	bl	14d8 <UARTGetch>
    1c22:	7020      	strb	r0, [r4, #0]

  return 1;
}
    1c24:	2001      	movs	r0, #1
    1c26:	bc10      	pop	{r4}
    1c28:	bc02      	pop	{r1}
    1c2a:	4708      	bx	r1

00001c2c <_write>:

int _write(int fd, const char *buf, size_t cnt)
{
    1c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c2e:	1c0d      	adds	r5, r1, #0
  int i;

  for (i = 0; i < cnt; i++)
    1c30:	1e16      	subs	r6, r2, #0
    1c32:	d020      	beq.n	1c76 <_write+0x4a>
    1c34:	2401      	movs	r4, #1
    putch(buf[i]);
    1c36:	7809      	ldrb	r1, [r1, #0]
    1c38:	2000      	movs	r0, #0
    1c3a:	1e77      	subs	r7, r6, #1
    1c3c:	f7ff fc30 	bl	14a0 <UARTPutch>

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c40:	1c23      	adds	r3, r4, #0
    1c42:	4027      	ands	r7, r4
    1c44:	429e      	cmp	r6, r3
    1c46:	d916      	bls.n	1c76 <_write+0x4a>
    1c48:	2f00      	cmp	r7, #0
    1c4a:	d007      	beq.n	1c5c <_write+0x30>
    putch(buf[i]);
    1c4c:	7869      	ldrb	r1, [r5, #1]
    1c4e:	2000      	movs	r0, #0

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c50:	2402      	movs	r4, #2
    putch(buf[i]);
    1c52:	f7ff fc25 	bl	14a0 <UARTPutch>

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c56:	1c23      	adds	r3, r4, #0
    1c58:	42a6      	cmp	r6, r4
    1c5a:	d90c      	bls.n	1c76 <_write+0x4a>
    putch(buf[i]);
    1c5c:	5ce9      	ldrb	r1, [r5, r3]
    1c5e:	2000      	movs	r0, #0

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c60:	3401      	adds	r4, #1
    putch(buf[i]);
    1c62:	f7ff fc1d 	bl	14a0 <UARTPutch>
    1c66:	5d29      	ldrb	r1, [r5, r4]
    1c68:	2000      	movs	r0, #0

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c6a:	3401      	adds	r4, #1
    putch(buf[i]);
    1c6c:	f7ff fc18 	bl	14a0 <UARTPutch>

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c70:	1c23      	adds	r3, r4, #0
    1c72:	42a6      	cmp	r6, r4
    1c74:	d8f2      	bhi.n	1c5c <_write+0x30>
    putch(buf[i]);

  return cnt;
}
    1c76:	1c30      	adds	r0, r6, #0
    1c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c7a:	bc02      	pop	{r1}
    1c7c:	4708      	bx	r1
    1c7e:	46c0      	nop			; (mov r8, r8)

00001c80 <vBlockingQueueProducer>:
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
    1c80:	b570      	push	{r4, r5, r6, lr}
    1c82:	b082      	sub	sp, #8
unsigned short usValue = 0;
    1c84:	466d      	mov	r5, sp
    1c86:	3506      	adds	r5, #6
    1c88:	2600      	movs	r6, #0
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
    1c8a:	1c04      	adds	r4, r0, #0
unsigned short usValue = 0;
    1c8c:	802e      	strh	r6, [r5, #0]
    1c8e:	e000      	b.n	1c92 <vBlockingQueueProducer+0x12>

	for( ;; )
	{		
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
		{
			sErrorEverOccurred = pdTRUE;
    1c90:	2601      	movs	r6, #1

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;

	for( ;; )
	{		
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
    1c92:	6820      	ldr	r0, [r4, #0]
    1c94:	6862      	ldr	r2, [r4, #4]
    1c96:	1c29      	adds	r1, r5, #0
    1c98:	2300      	movs	r3, #0
    1c9a:	f001 f9d5 	bl	3048 <xQueueGenericSend>
    1c9e:	2801      	cmp	r0, #1
    1ca0:	d1f6      	bne.n	1c90 <vBlockingQueueProducer+0x10>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
    1ca2:	2e00      	cmp	r6, #0
    1ca4:	d105      	bne.n	1cb2 <vBlockingQueueProducer+0x32>
			{
				( *pxQueueParameters->psCheckVariable )++;
    1ca6:	68a3      	ldr	r3, [r4, #8]
    1ca8:	8819      	ldrh	r1, [r3, #0]
    1caa:	3101      	adds	r1, #1
    1cac:	0408      	lsls	r0, r1, #16
    1cae:	0c02      	lsrs	r2, r0, #16
    1cb0:	801a      	strh	r2, [r3, #0]
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
    1cb2:	882a      	ldrh	r2, [r5, #0]
    1cb4:	3201      	adds	r2, #1
    1cb6:	802a      	strh	r2, [r5, #0]
    1cb8:	e7eb      	b.n	1c92 <vBlockingQueueProducer+0x12>
    1cba:	46c0      	nop			; (mov r8, r8)

00001cbc <vBlockingQueueConsumer>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
    1cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cbe:	b083      	sub	sp, #12
unsigned short usData, usExpectedValue = 0;
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
    1cc0:	2700      	movs	r7, #0
    1cc2:	466d      	mov	r5, sp
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
    1cc4:	1c04      	adds	r4, r0, #0
unsigned short usData, usExpectedValue = 0;
    1cc6:	1c3e      	adds	r6, r7, #0
    1cc8:	3506      	adds	r5, #6

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;

	for( ;; )
	{	
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
    1cca:	6820      	ldr	r0, [r4, #0]
    1ccc:	6862      	ldr	r2, [r4, #4]
    1cce:	1c29      	adds	r1, r5, #0
    1cd0:	2300      	movs	r3, #0
    1cd2:	f001 fa89 	bl	31e8 <xQueueGenericReceive>
    1cd6:	2801      	cmp	r0, #1
    1cd8:	d1f7      	bne.n	1cca <vBlockingQueueConsumer+0xe>
		{
			if( usData != usExpectedValue )
    1cda:	882b      	ldrh	r3, [r5, #0]
    1cdc:	42b3      	cmp	r3, r6
    1cde:	d002      	beq.n	1ce6 <vBlockingQueueConsumer+0x2a>
    1ce0:	1c1e      	adds	r6, r3, #0
			{
				/* Catch-up. */
				usExpectedValue = usData;

				sErrorEverOccurred = pdTRUE;
    1ce2:	1c07      	adds	r7, r0, #0
    1ce4:	e7f1      	b.n	1cca <vBlockingQueueConsumer+0xe>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */	
				if( sErrorEverOccurred == pdFALSE )
    1ce6:	2f00      	cmp	r7, #0
    1ce8:	d105      	bne.n	1cf6 <vBlockingQueueConsumer+0x3a>
				{
					( *pxQueueParameters->psCheckVariable )++;
    1cea:	68a2      	ldr	r2, [r4, #8]
    1cec:	8816      	ldrh	r6, [r2, #0]
    1cee:	3601      	adds	r6, #1
    1cf0:	0430      	lsls	r0, r6, #16
    1cf2:	0c01      	lsrs	r1, r0, #16
    1cf4:	8011      	strh	r1, [r2, #0]
				}
							
				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
    1cf6:	1c59      	adds	r1, r3, #1
    1cf8:	040b      	lsls	r3, r1, #16
    1cfa:	0c1e      	lsrs	r6, r3, #16
    1cfc:	e7e5      	b.n	1cca <vBlockingQueueConsumer+0xe>
    1cfe:	46c0      	nop			; (mov r8, r8)

00001d00 <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( unsigned short ) 0, ( unsigned short ) 0, ( unsigned short ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( unsigned portBASE_TYPE uxPriority )
{
    1d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d02:	465f      	mov	r7, fp
    1d04:	4656      	mov	r6, sl
    1d06:	464d      	mov	r5, r9
    1d08:	4644      	mov	r4, r8
    1d0a:	b4f0      	push	{r4, r5, r6, r7}
    1d0c:	b087      	sub	sp, #28
    1d0e:	9005      	str	r0, [sp, #20]
const portTickType xDontBlock = ( portTickType ) 0;

	/* Create the first two tasks as described at the top of the file. */
	
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d10:	200c      	movs	r0, #12
    1d12:	f002 fac1 	bl	4298 <pvPortMalloc>

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1d16:	2102      	movs	r1, #2
const portTickType xDontBlock = ( portTickType ) 0;

	/* Create the first two tasks as described at the top of the file. */
	
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d18:	1c05      	adds	r5, r0, #0

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1d1a:	2001      	movs	r0, #1
    1d1c:	f001 f958 	bl	2fd0 <xQueueCreate>

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
    1d20:	27fa      	movs	r7, #250	; 0xfa

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    1d22:	4a47      	ldr	r2, [pc, #284]	; (1e40 <vStartBlockingQueueTasks+0x140>)
	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
    1d24:	00bf      	lsls	r7, r7, #2
    1d26:	606f      	str	r7, [r5, #4]
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1d28:	6028      	str	r0, [r5, #0]
	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    1d2a:	60aa      	str	r2, [r5, #8]
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d2c:	200c      	movs	r0, #12
	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    1d2e:	4692      	mov	sl, r2
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d30:	f002 fab2 	bl	4298 <pvPortMalloc>
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
    1d34:	4b43      	ldr	r3, [pc, #268]	; (1e44 <vStartBlockingQueueTasks+0x144>)
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
    1d36:	682c      	ldr	r4, [r5, #0]
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
    1d38:	6083      	str	r3, [r0, #8]
    1d3a:	4698      	mov	r8, r3


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    1d3c:	4a42      	ldr	r2, [pc, #264]	; (1e48 <vStartBlockingQueueTasks+0x148>)
    1d3e:	9b05      	ldr	r3, [sp, #20]
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
    1d40:	6004      	str	r4, [r0, #0]

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
    1d42:	2400      	movs	r4, #0
    1d44:	6044      	str	r4, [r0, #4]
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    1d46:	4693      	mov	fp, r2
	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d48:	1c06      	adds	r6, r0, #0
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    1d4a:	9300      	str	r3, [sp, #0]
    1d4c:	1c10      	adds	r0, r2, #0
    1d4e:	1c2b      	adds	r3, r5, #0
    1d50:	493e      	ldr	r1, [pc, #248]	; (1e4c <vStartBlockingQueueTasks+0x14c>)
    1d52:	2268      	movs	r2, #104	; 0x68
    1d54:	9401      	str	r4, [sp, #4]
    1d56:	9402      	str	r4, [sp, #8]
    1d58:	9403      	str	r4, [sp, #12]
    1d5a:	f001 fb9f 	bl	349c <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueProducer, ( signed char * ) "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
    1d5e:	4a3c      	ldr	r2, [pc, #240]	; (1e50 <vStartBlockingQueueTasks+0x150>)
    1d60:	1c33      	adds	r3, r6, #0
    1d62:	4691      	mov	r9, r2
    1d64:	493b      	ldr	r1, [pc, #236]	; (1e54 <vStartBlockingQueueTasks+0x154>)
    1d66:	1c10      	adds	r0, r2, #0
    1d68:	2268      	movs	r2, #104	; 0x68
    1d6a:	9400      	str	r4, [sp, #0]
    1d6c:	9401      	str	r4, [sp, #4]
    1d6e:	9402      	str	r4, [sp, #8]
    1d70:	9403      	str	r4, [sp, #12]
    1d72:	f001 fb93 	bl	349c <xTaskGenericCreate>
	

	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d76:	200c      	movs	r0, #12
    1d78:	f002 fa8e 	bl	4298 <pvPortMalloc>
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1d7c:	2102      	movs	r1, #2
	

	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d7e:	1c05      	adds	r5, r0, #0
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1d80:	2001      	movs	r0, #1
    1d82:	f001 f925 	bl	2fd0 <xQueueCreate>
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
    1d86:	2202      	movs	r2, #2
    1d88:	1c11      	adds	r1, r2, #0
    1d8a:	4441      	add	r1, r8

	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1d8c:	6028      	str	r0, [r5, #0]
	pxQueueParameters3->xBlockTime = xDontBlock;
    1d8e:	606c      	str	r4, [r5, #4]
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
    1d90:	60a9      	str	r1, [r5, #8]

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d92:	200c      	movs	r0, #12
    1d94:	f002 fa80 	bl	4298 <pvPortMalloc>
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    1d98:	2202      	movs	r2, #2
	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d9a:	1c06      	adds	r6, r0, #0
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    1d9c:	1c13      	adds	r3, r2, #0
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
    1d9e:	6828      	ldr	r0, [r5, #0]
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    1da0:	4453      	add	r3, sl
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
	pxQueueParameters4->xBlockTime = xBlockTime;
    1da2:	6077      	str	r7, [r6, #4]
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
    1da4:	6030      	str	r0, [r6, #0]
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    1da6:	60b3      	str	r3, [r6, #8]

	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QProdB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
    1da8:	4658      	mov	r0, fp
    1daa:	1c2b      	adds	r3, r5, #0
    1dac:	492a      	ldr	r1, [pc, #168]	; (1e58 <vStartBlockingQueueTasks+0x158>)
    1dae:	3266      	adds	r2, #102	; 0x66
    1db0:	9400      	str	r4, [sp, #0]
    1db2:	9401      	str	r4, [sp, #4]
    1db4:	9402      	str	r4, [sp, #8]
    1db6:	9403      	str	r4, [sp, #12]
    1db8:	f001 fb70 	bl	349c <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueProducer, ( signed char * ) "QConsB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
    1dbc:	9d05      	ldr	r5, [sp, #20]
    1dbe:	1c33      	adds	r3, r6, #0
    1dc0:	2268      	movs	r2, #104	; 0x68
    1dc2:	4648      	mov	r0, r9
    1dc4:	4925      	ldr	r1, [pc, #148]	; (1e5c <vStartBlockingQueueTasks+0x15c>)
    1dc6:	9500      	str	r5, [sp, #0]
    1dc8:	9401      	str	r4, [sp, #4]
    1dca:	9402      	str	r4, [sp, #8]
    1dcc:	9403      	str	r4, [sp, #12]
    1dce:	f001 fb65 	bl	349c <xTaskGenericCreate>



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1dd2:	200c      	movs	r0, #12
    1dd4:	f002 fa60 	bl	4298 <pvPortMalloc>
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1dd8:	2102      	movs	r1, #2



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1dda:	1c05      	adds	r5, r0, #0
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1ddc:	2005      	movs	r0, #5
    1dde:	f001 f8f7 	bl	2fd0 <xQueueCreate>
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
    1de2:	2204      	movs	r2, #4
    1de4:	1c11      	adds	r1, r2, #0
    1de6:	4441      	add	r1, r8


	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1de8:	6028      	str	r0, [r5, #0]
	pxQueueParameters5->xBlockTime = xBlockTime;
    1dea:	606f      	str	r7, [r5, #4]
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
    1dec:	60a9      	str	r1, [r5, #8]

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1dee:	200c      	movs	r0, #12
    1df0:	f002 fa52 	bl	4298 <pvPortMalloc>
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
	pxQueueParameters6->xBlockTime = xBlockTime;
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    1df4:	2204      	movs	r2, #4
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1df6:	1c06      	adds	r6, r0, #0
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
	pxQueueParameters6->xBlockTime = xBlockTime;
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    1df8:	1c13      	adds	r3, r2, #0
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
    1dfa:	6828      	ldr	r0, [r5, #0]
	pxQueueParameters6->xBlockTime = xBlockTime;
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    1dfc:	4453      	add	r3, sl
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
    1dfe:	6030      	str	r0, [r6, #0]
	pxQueueParameters6->xBlockTime = xBlockTime;
    1e00:	6077      	str	r7, [r6, #4]
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    1e02:	60b3      	str	r3, [r6, #8]

	xTaskCreate( vBlockingQueueProducer, ( signed char * ) "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
    1e04:	4648      	mov	r0, r9
    1e06:	1c2b      	adds	r3, r5, #0
    1e08:	4915      	ldr	r1, [pc, #84]	; (1e60 <vStartBlockingQueueTasks+0x160>)
    1e0a:	3264      	adds	r2, #100	; 0x64
    1e0c:	9400      	str	r4, [sp, #0]
    1e0e:	9401      	str	r4, [sp, #4]
    1e10:	9402      	str	r4, [sp, #8]
    1e12:	9403      	str	r4, [sp, #12]
    1e14:	f001 fb42 	bl	349c <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
    1e18:	4658      	mov	r0, fp
    1e1a:	1c33      	adds	r3, r6, #0
    1e1c:	4911      	ldr	r1, [pc, #68]	; (1e64 <vStartBlockingQueueTasks+0x164>)
    1e1e:	2268      	movs	r2, #104	; 0x68
    1e20:	9400      	str	r4, [sp, #0]
    1e22:	9401      	str	r4, [sp, #4]
    1e24:	9402      	str	r4, [sp, #8]
    1e26:	9403      	str	r4, [sp, #12]
    1e28:	f001 fb38 	bl	349c <xTaskGenericCreate>
}
    1e2c:	b007      	add	sp, #28
    1e2e:	bc3c      	pop	{r2, r3, r4, r5}
    1e30:	4690      	mov	r8, r2
    1e32:	4699      	mov	r9, r3
    1e34:	46a2      	mov	sl, r4
    1e36:	46ab      	mov	fp, r5
    1e38:	bcf0      	pop	{r4, r5, r6, r7}
    1e3a:	bc01      	pop	{r0}
    1e3c:	4700      	bx	r0
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	400009d0 	.word	0x400009d0
    1e44:	400009c0 	.word	0x400009c0
    1e48:	00001cbd 	.word	0x00001cbd
    1e4c:	0000e848 	.word	0x0000e848
    1e50:	00001c81 	.word	0x00001c81
    1e54:	0000e850 	.word	0x0000e850
    1e58:	0000e858 	.word	0x0000e858
    1e5c:	0000e860 	.word	0x0000e860
    1e60:	0000e868 	.word	0x0000e868
    1e64:	0000e870 	.word	0x0000e870

00001e68 <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreBlockingQueuesStillRunning( void )
{
    1e68:	b5f0      	push	{r4, r5, r6, r7, lr}
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1e6a:	4c27      	ldr	r4, [pc, #156]	; (1f08 <xAreBlockingQueuesStillRunning+0xa0>)
    1e6c:	4927      	ldr	r1, [pc, #156]	; (1f0c <xAreBlockingQueuesStillRunning+0xa4>)
    1e6e:	8825      	ldrh	r5, [r4, #0]
	}
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreBlockingQueuesStillRunning( void )
    1e70:	2200      	movs	r2, #0
    1e72:	5e8e      	ldrsh	r6, [r1, r2]
    1e74:	042f      	lsls	r7, r5, #16
    1e76:	143a      	asrs	r2, r7, #16
    1e78:	1ab6      	subs	r6, r6, r2
    1e7a:	1e73      	subs	r3, r6, #1
    1e7c:	419e      	sbcs	r6, r3
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    1e7e:	8823      	ldrh	r3, [r4, #0]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1e80:	4a23      	ldr	r2, [pc, #140]	; (1f10 <xAreBlockingQueuesStillRunning+0xa8>)
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    1e82:	800b      	strh	r3, [r1, #0]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1e84:	4b23      	ldr	r3, [pc, #140]	; (1f14 <xAreBlockingQueuesStillRunning+0xac>)
    1e86:	8810      	ldrh	r0, [r2, #0]
    1e88:	2700      	movs	r7, #0
    1e8a:	5fdd      	ldrsh	r5, [r3, r7]
    1e8c:	0400      	lsls	r0, r0, #16
    1e8e:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    1e90:	1be8      	subs	r0, r5, r7
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    1e92:	8817      	ldrh	r7, [r2, #0]
    1e94:	801f      	strh	r7, [r3, #0]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1e96:	1e45      	subs	r5, r0, #1
    1e98:	41a8      	sbcs	r0, r5
    1e9a:	4245      	negs	r5, r0
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1e9c:	8860      	ldrh	r0, [r4, #2]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1e9e:	402e      	ands	r6, r5
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1ea0:	0400      	lsls	r0, r0, #16
    1ea2:	2702      	movs	r7, #2
    1ea4:	5fcd      	ldrsh	r5, [r1, r7]
    1ea6:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    1ea8:	1be8      	subs	r0, r5, r7
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    1eaa:	8867      	ldrh	r7, [r4, #2]
    1eac:	804f      	strh	r7, [r1, #2]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1eae:	1e45      	subs	r5, r0, #1
    1eb0:	41a8      	sbcs	r0, r5
    1eb2:	4245      	negs	r5, r0
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1eb4:	8850      	ldrh	r0, [r2, #2]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1eb6:	402e      	ands	r6, r5
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1eb8:	0400      	lsls	r0, r0, #16
    1eba:	2702      	movs	r7, #2
    1ebc:	5fdd      	ldrsh	r5, [r3, r7]
    1ebe:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    1ec0:	1be8      	subs	r0, r5, r7
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    1ec2:	8857      	ldrh	r7, [r2, #2]
    1ec4:	805f      	strh	r7, [r3, #2]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1ec6:	1e45      	subs	r5, r0, #1
    1ec8:	41a8      	sbcs	r0, r5
    1eca:	4245      	negs	r5, r0
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1ecc:	88a0      	ldrh	r0, [r4, #4]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1ece:	402e      	ands	r6, r5
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1ed0:	0400      	lsls	r0, r0, #16
    1ed2:	2704      	movs	r7, #4
    1ed4:	5fcd      	ldrsh	r5, [r1, r7]
    1ed6:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    1ed8:	1be8      	subs	r0, r5, r7
    1eda:	1e45      	subs	r5, r0, #1
    1edc:	41a8      	sbcs	r0, r5
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    1ede:	88a5      	ldrh	r5, [r4, #4]
    1ee0:	808d      	strh	r5, [r1, #4]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1ee2:	8891      	ldrh	r1, [r2, #4]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1ee4:	4247      	negs	r7, r0
    1ee6:	1c30      	adds	r0, r6, #0
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1ee8:	2504      	movs	r5, #4
    1eea:	5f5c      	ldrsh	r4, [r3, r5]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1eec:	4038      	ands	r0, r7
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1eee:	040f      	lsls	r7, r1, #16
    1ef0:	143e      	asrs	r6, r7, #16
		{
			xReturn = pdFALSE;
    1ef2:	1ba5      	subs	r5, r4, r6
    1ef4:	1e6c      	subs	r4, r5, #1
    1ef6:	41a5      	sbcs	r5, r4
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    1ef8:	8892      	ldrh	r2, [r2, #4]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1efa:	4269      	negs	r1, r5
    1efc:	4008      	ands	r0, r1
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    1efe:	809a      	strh	r2, [r3, #4]
	}

	return xReturn;
}
    1f00:	bcf0      	pop	{r4, r5, r6, r7}
    1f02:	bc02      	pop	{r1}
    1f04:	4708      	bx	r1
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	400009d0 	.word	0x400009d0
    1f0c:	400009c8 	.word	0x400009c8
    1f10:	400009c0 	.word	0x400009c0
    1f14:	400009b8 	.word	0x400009b8

00001f18 <vSecondaryBlockTimeTestTask>:
	}
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
    1f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f1a:	4657      	mov	r7, sl
    1f1c:	464e      	mov	r6, r9
    1f1e:	4645      	mov	r5, r8
    1f20:	b4e0      	push	{r5, r6, r7}
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
    1f22:	2300      	movs	r3, #0
    1f24:	469a      	mov	sl, r3
    1f26:	4c24      	ldr	r4, [pc, #144]	; (1fb8 <vSecondaryBlockTimeTestTask+0xa0>)
		xTimeWhenBlocking = xTaskGetTickCount();

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
		xRunIndicator = bktRUN_INDICATOR;
    1f28:	3355      	adds	r3, #85	; 0x55
    1f2a:	4e24      	ldr	r6, [pc, #144]	; (1fbc <vSecondaryBlockTimeTestTask+0xa4>)
    1f2c:	4d24      	ldr	r5, [pc, #144]	; (1fc0 <vSecondaryBlockTimeTestTask+0xa8>)
    1f2e:	4f25      	ldr	r7, [pc, #148]	; (1fc4 <vSecondaryBlockTimeTestTask+0xac>)
	}
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
    1f30:	b082      	sub	sp, #8
		xTimeWhenBlocking = xTaskGetTickCount();

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
		xRunIndicator = bktRUN_INDICATOR;
    1f32:	4698      	mov	r8, r3
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
    1f34:	2000      	movs	r0, #0
    1f36:	f001 ffd3 	bl	3ee0 <vTaskSuspend>
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
    1f3a:	f001 fd09 	bl	3950 <xTaskGetTickCount>

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
    1f3e:	4653      	mov	r3, sl
    1f40:	9301      	str	r3, [sp, #4]
		xRunIndicator = bktRUN_INDICATOR;
    1f42:	4643      	mov	r3, r8
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
    1f44:	4681      	mov	r9, r0

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
		xRunIndicator = bktRUN_INDICATOR;
    1f46:	6023      	str	r3, [r4, #0]
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
    1f48:	6830      	ldr	r0, [r6, #0]
    1f4a:	a901      	add	r1, sp, #4
    1f4c:	22af      	movs	r2, #175	; 0xaf
    1f4e:	4653      	mov	r3, sl
    1f50:	f001 f87a 	bl	3048 <xQueueGenericSend>
    1f54:	2800      	cmp	r0, #0
    1f56:	d001      	beq.n	1f5c <vSecondaryBlockTimeTestTask+0x44>
		{
			xErrorOccurred = pdTRUE;
    1f58:	2001      	movs	r0, #1
    1f5a:	6028      	str	r0, [r5, #0]
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    1f5c:	f001 fcf8 	bl	3950 <xTaskGetTickCount>
    1f60:	464b      	mov	r3, r9
    1f62:	1ac0      	subs	r0, r0, r3

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
    1f64:	28ae      	cmp	r0, #174	; 0xae
    1f66:	d901      	bls.n	1f6c <vSecondaryBlockTimeTestTask+0x54>
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
    1f68:	28be      	cmp	r0, #190	; 0xbe
    1f6a:	d901      	bls.n	1f70 <vSecondaryBlockTimeTestTask+0x58>
		{
			xErrorOccurred = pdTRUE;
    1f6c:	2101      	movs	r1, #1
    1f6e:	6029      	str	r1, [r5, #0]
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
    1f70:	4643      	mov	r3, r8
    1f72:	6023      	str	r3, [r4, #0]
		vTaskSuspend( NULL );
    1f74:	2000      	movs	r0, #0
    1f76:	f001 ffb3 	bl	3ee0 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
    1f7a:	f001 fce9 	bl	3950 <xTaskGetTickCount>

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
    1f7e:	4643      	mov	r3, r8

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
    1f80:	4681      	mov	r9, r0

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
    1f82:	6023      	str	r3, [r4, #0]
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
    1f84:	6830      	ldr	r0, [r6, #0]
    1f86:	a901      	add	r1, sp, #4
    1f88:	22af      	movs	r2, #175	; 0xaf
    1f8a:	2300      	movs	r3, #0
    1f8c:	f001 f92c 	bl	31e8 <xQueueGenericReceive>
    1f90:	2800      	cmp	r0, #0
    1f92:	d001      	beq.n	1f98 <vSecondaryBlockTimeTestTask+0x80>
		{
			xErrorOccurred = pdTRUE;
    1f94:	2201      	movs	r2, #1
    1f96:	602a      	str	r2, [r5, #0]
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    1f98:	f001 fcda 	bl	3950 <xTaskGetTickCount>
    1f9c:	464b      	mov	r3, r9
    1f9e:	1ac0      	subs	r0, r0, r3

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
    1fa0:	28ae      	cmp	r0, #174	; 0xae
    1fa2:	d901      	bls.n	1fa8 <vSecondaryBlockTimeTestTask+0x90>
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
    1fa4:	28be      	cmp	r0, #190	; 0xbe
    1fa6:	d901      	bls.n	1fac <vSecondaryBlockTimeTestTask+0x94>
		{
			xErrorOccurred = pdTRUE;
    1fa8:	2001      	movs	r0, #1
    1faa:	6028      	str	r0, [r5, #0]
		}

		xRunIndicator = bktRUN_INDICATOR;
    1fac:	4643      	mov	r3, r8
    1fae:	6023      	str	r3, [r4, #0]

		xSecondaryCycles++;
    1fb0:	6839      	ldr	r1, [r7, #0]
    1fb2:	3101      	adds	r1, #1
    1fb4:	6039      	str	r1, [r7, #0]
	}
    1fb6:	e7bd      	b.n	1f34 <vSecondaryBlockTimeTestTask+0x1c>
    1fb8:	400009e0 	.word	0x400009e0
    1fbc:	400009e8 	.word	0x400009e8
    1fc0:	400009ec 	.word	0x400009ec
    1fc4:	400009f4 	.word	0x400009f4

00001fc8 <vPrimaryBlockTimeTestTask>:
	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed char * )"BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
}
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
    1fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fca:	465f      	mov	r7, fp
    1fcc:	4656      	mov	r6, sl
    1fce:	464d      	mov	r5, r9
    1fd0:	4644      	mov	r4, r8
    1fd2:	b4f0      	push	{r4, r5, r6, r7}
        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    1fd4:	220a      	movs	r2, #10

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
			{
				xErrorOccurred = pdTRUE;
    1fd6:	2301      	movs	r3, #1
    1fd8:	4e8e      	ldr	r6, [pc, #568]	; (2214 <vPrimaryBlockTimeTestTask+0x24c>)
    1fda:	4d8f      	ldr	r5, [pc, #572]	; (2218 <vPrimaryBlockTimeTestTask+0x250>)
    1fdc:	4c8f      	ldr	r4, [pc, #572]	; (221c <vPrimaryBlockTimeTestTask+0x254>)
    1fde:	4f90      	ldr	r7, [pc, #576]	; (2220 <vPrimaryBlockTimeTestTask+0x258>)
	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed char * )"BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
}
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
    1fe0:	b083      	sub	sp, #12
        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    1fe2:	4693      	mov	fp, r2

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
			{
				xErrorOccurred = pdTRUE;
    1fe4:	4698      	mov	r8, r3
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    1fe6:	2000      	movs	r0, #0
    1fe8:	9001      	str	r0, [sp, #4]
    1fea:	1c03      	adds	r3, r0, #0
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    1fec:	465a      	mov	r2, fp
    1fee:	409a      	lsls	r2, r3
    1ff0:	4691      	mov	r9, r2

			xTimeWhenBlocking = xTaskGetTickCount();
    1ff2:	f001 fcad 	bl	3950 <xTaskGetTickCount>

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
    1ff6:	4669      	mov	r1, sp
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;

			xTimeWhenBlocking = xTaskGetTickCount();
    1ff8:	4682      	mov	sl, r0

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
    1ffa:	464a      	mov	r2, r9
    1ffc:	6830      	ldr	r0, [r6, #0]
    1ffe:	2300      	movs	r3, #0
    2000:	f001 f8f2 	bl	31e8 <xQueueGenericReceive>
    2004:	2800      	cmp	r0, #0
    2006:	d001      	beq.n	200c <vPrimaryBlockTimeTestTask+0x44>
			{
				xErrorOccurred = pdTRUE;
    2008:	4643      	mov	r3, r8
    200a:	602b      	str	r3, [r5, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    200c:	f001 fca0 	bl	3950 <xTaskGetTickCount>
    2010:	4652      	mov	r2, sl
    2012:	1a80      	subs	r0, r0, r2

			if( xBlockedTime < xTimeToBlock )
    2014:	4581      	cmp	r9, r0
    2016:	d901      	bls.n	201c <vPrimaryBlockTimeTestTask+0x54>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
    2018:	4643      	mov	r3, r8
    201a:	602b      	str	r3, [r5, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    201c:	210f      	movs	r1, #15
    201e:	1c0b      	adds	r3, r1, #0
    2020:	444b      	add	r3, r9
    2022:	4298      	cmp	r0, r3
    2024:	d901      	bls.n	202a <vPrimaryBlockTimeTestTask+0x62>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
    2026:	4643      	mov	r3, r8
    2028:	602b      	str	r3, [r5, #0]
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    202a:	9b01      	ldr	r3, [sp, #4]
    202c:	3301      	adds	r3, #1
    202e:	9301      	str	r3, [sp, #4]
    2030:	2b04      	cmp	r3, #4
    2032:	dddb      	ble.n	1fec <vPrimaryBlockTimeTestTask+0x24>
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2034:	2000      	movs	r0, #0
    2036:	9001      	str	r0, [sp, #4]
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    2038:	2200      	movs	r2, #0
    203a:	6830      	ldr	r0, [r6, #0]
    203c:	a901      	add	r1, sp, #4
    203e:	1c13      	adds	r3, r2, #0
    2040:	f001 f802 	bl	3048 <xQueueGenericSend>
    2044:	2801      	cmp	r0, #1
    2046:	d001      	beq.n	204c <vPrimaryBlockTimeTestTask+0x84>
			{
				xErrorOccurred = pdTRUE;
    2048:	4643      	mov	r3, r8
    204a:	602b      	str	r3, [r5, #0]
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    204c:	9a01      	ldr	r2, [sp, #4]
    204e:	3201      	adds	r2, #1
    2050:	9201      	str	r2, [sp, #4]
    2052:	2a04      	cmp	r2, #4
    2054:	ddf0      	ble.n	2038 <vPrimaryBlockTimeTestTask+0x70>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2056:	2100      	movs	r1, #0
    2058:	9101      	str	r1, [sp, #4]
    205a:	1c0b      	adds	r3, r1, #0
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    205c:	465a      	mov	r2, fp
    205e:	409a      	lsls	r2, r3
    2060:	4691      	mov	r9, r2

			xTimeWhenBlocking = xTaskGetTickCount();
    2062:	f001 fc75 	bl	3950 <xTaskGetTickCount>

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
    2066:	a901      	add	r1, sp, #4
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;

			xTimeWhenBlocking = xTaskGetTickCount();
    2068:	4682      	mov	sl, r0

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
    206a:	464a      	mov	r2, r9
    206c:	6830      	ldr	r0, [r6, #0]
    206e:	2300      	movs	r3, #0
    2070:	f000 ffea 	bl	3048 <xQueueGenericSend>
    2074:	2800      	cmp	r0, #0
    2076:	d001      	beq.n	207c <vPrimaryBlockTimeTestTask+0xb4>
			{
				xErrorOccurred = pdTRUE;
    2078:	4643      	mov	r3, r8
    207a:	602b      	str	r3, [r5, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    207c:	f001 fc68 	bl	3950 <xTaskGetTickCount>
    2080:	4652      	mov	r2, sl
    2082:	1a80      	subs	r0, r0, r2

			if( xBlockedTime < xTimeToBlock )
    2084:	4581      	cmp	r9, r0
    2086:	d901      	bls.n	208c <vPrimaryBlockTimeTestTask+0xc4>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
    2088:	4643      	mov	r3, r8
    208a:	602b      	str	r3, [r5, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    208c:	210f      	movs	r1, #15
    208e:	1c0b      	adds	r3, r1, #0
    2090:	444b      	add	r3, r9
    2092:	4298      	cmp	r0, r3
    2094:	d901      	bls.n	209a <vPrimaryBlockTimeTestTask+0xd2>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
    2096:	4643      	mov	r3, r8
    2098:	602b      	str	r3, [r5, #0]
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    209a:	9b01      	ldr	r3, [sp, #4]
    209c:	3301      	adds	r3, #1
    209e:	9301      	str	r3, [sp, #4]
    20a0:	2b04      	cmp	r3, #4
    20a2:	dddb      	ble.n	205c <vPrimaryBlockTimeTestTask+0x94>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
    20a4:	2200      	movs	r2, #0
		vTaskResume( xSecondary );
    20a6:	6838      	ldr	r0, [r7, #0]
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
    20a8:	6022      	str	r2, [r4, #0]
		vTaskResume( xSecondary );
    20aa:	f001 fb99 	bl	37e0 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    20ae:	6820      	ldr	r0, [r4, #0]
    20b0:	2855      	cmp	r0, #85	; 0x55
    20b2:	d005      	beq.n	20c0 <vPrimaryBlockTimeTestTask+0xf8>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
    20b4:	2014      	movs	r0, #20
    20b6:	f001 fe3b 	bl	3d30 <vTaskDelay>
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    20ba:	6821      	ldr	r1, [r4, #0]
    20bc:	2955      	cmp	r1, #85	; 0x55
    20be:	d1f9      	bne.n	20b4 <vPrimaryBlockTimeTestTask+0xec>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
    20c0:	2014      	movs	r0, #20
    20c2:	f001 fe35 	bl	3d30 <vTaskDelay>
		xRunIndicator = 0;
    20c6:	2300      	movs	r3, #0
    20c8:	6023      	str	r3, [r4, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    20ca:	9301      	str	r3, [sp, #4]
    20cc:	e00f      	b.n	20ee <vPrimaryBlockTimeTestTask+0x126>
				xErrorOccurred = pdTRUE;
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    20ce:	2105      	movs	r1, #5
    20d0:	6838      	ldr	r0, [r7, #0]
    20d2:	f001 fb23 	bl	371c <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    20d6:	6821      	ldr	r1, [r4, #0]
    20d8:	2955      	cmp	r1, #85	; 0x55
    20da:	d028      	beq.n	212e <vPrimaryBlockTimeTestTask+0x166>
				queue function. */
				xErrorOccurred = pdTRUE;
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
    20dc:	6838      	ldr	r0, [r7, #0]
    20de:	2102      	movs	r1, #2
    20e0:	f001 fb1c 	bl	371c <vTaskPrioritySet>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    20e4:	9801      	ldr	r0, [sp, #4]
    20e6:	3001      	adds	r0, #1
    20e8:	9001      	str	r0, [sp, #4]
    20ea:	2804      	cmp	r0, #4
    20ec:	dc25      	bgt.n	213a <vPrimaryBlockTimeTestTask+0x172>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    20ee:	2200      	movs	r2, #0
    20f0:	6830      	ldr	r0, [r6, #0]
    20f2:	4669      	mov	r1, sp
    20f4:	1c13      	adds	r3, r2, #0
    20f6:	f001 f877 	bl	31e8 <xQueueGenericReceive>
    20fa:	2801      	cmp	r0, #1
    20fc:	d001      	beq.n	2102 <vPrimaryBlockTimeTestTask+0x13a>
			{
				xErrorOccurred = pdTRUE;
    20fe:	4642      	mov	r2, r8
    2100:	602a      	str	r2, [r5, #0]
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    2102:	2200      	movs	r2, #0
    2104:	6830      	ldr	r0, [r6, #0]
    2106:	a901      	add	r1, sp, #4
    2108:	1c13      	adds	r3, r2, #0
    210a:	f000 ff9d 	bl	3048 <xQueueGenericSend>
    210e:	2801      	cmp	r0, #1
    2110:	d001      	beq.n	2116 <vPrimaryBlockTimeTestTask+0x14e>
			{
				xErrorOccurred = pdTRUE;
    2112:	4643      	mov	r3, r8
    2114:	602b      	str	r3, [r5, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
    2116:	6820      	ldr	r0, [r4, #0]
    2118:	2855      	cmp	r0, #85	; 0x55
    211a:	d1d8      	bne.n	20ce <vPrimaryBlockTimeTestTask+0x106>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    211c:	4642      	mov	r2, r8
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    211e:	2105      	movs	r1, #5
			}

			if( xRunIndicator == bktRUN_INDICATOR )
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    2120:	602a      	str	r2, [r5, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    2122:	6838      	ldr	r0, [r7, #0]
    2124:	f001 fafa 	bl	371c <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    2128:	6821      	ldr	r1, [r4, #0]
    212a:	2955      	cmp	r1, #85	; 0x55
    212c:	d1d6      	bne.n	20dc <vPrimaryBlockTimeTestTask+0x114>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
    212e:	4643      	mov	r3, r8
    2130:	602b      	str	r3, [r5, #0]
    2132:	e7d3      	b.n	20dc <vPrimaryBlockTimeTestTask+0x114>

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
		{
			vTaskDelay( bktSHORT_WAIT );
    2134:	2014      	movs	r0, #20
    2136:	f001 fdfb 	bl	3d30 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
    213a:	6822      	ldr	r2, [r4, #0]
    213c:	2a55      	cmp	r2, #85	; 0x55
    213e:	d1f9      	bne.n	2134 <vPrimaryBlockTimeTestTask+0x16c>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
    2140:	2014      	movs	r0, #20
    2142:	f001 fdf5 	bl	3d30 <vTaskDelay>
		xRunIndicator = 0;
    2146:	2100      	movs	r1, #0
    2148:	6021      	str	r1, [r4, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    214a:	9101      	str	r1, [sp, #4]
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    214c:	2200      	movs	r2, #0
    214e:	6830      	ldr	r0, [r6, #0]
    2150:	4669      	mov	r1, sp
    2152:	1c13      	adds	r3, r2, #0
    2154:	f001 f848 	bl	31e8 <xQueueGenericReceive>
    2158:	2801      	cmp	r0, #1
    215a:	d001      	beq.n	2160 <vPrimaryBlockTimeTestTask+0x198>
			{
				xErrorOccurred = pdTRUE;
    215c:	4643      	mov	r3, r8
    215e:	602b      	str	r3, [r5, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2160:	9801      	ldr	r0, [sp, #4]
    2162:	3001      	adds	r0, #1
    2164:	9001      	str	r0, [sp, #4]
    2166:	2804      	cmp	r0, #4
    2168:	ddf0      	ble.n	214c <vPrimaryBlockTimeTestTask+0x184>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
    216a:	6838      	ldr	r0, [r7, #0]
    216c:	f001 fb38 	bl	37e0 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    2170:	6822      	ldr	r2, [r4, #0]
    2172:	2a55      	cmp	r2, #85	; 0x55
    2174:	d005      	beq.n	2182 <vPrimaryBlockTimeTestTask+0x1ba>
		{
			vTaskDelay( bktSHORT_WAIT );
    2176:	2014      	movs	r0, #20
    2178:	f001 fdda 	bl	3d30 <vTaskDelay>
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    217c:	6821      	ldr	r1, [r4, #0]
    217e:	2955      	cmp	r1, #85	; 0x55
    2180:	d1f9      	bne.n	2176 <vPrimaryBlockTimeTestTask+0x1ae>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
    2182:	2014      	movs	r0, #20
    2184:	f001 fdd4 	bl	3d30 <vTaskDelay>
		xRunIndicator = 0;
    2188:	2300      	movs	r3, #0
    218a:	6023      	str	r3, [r4, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    218c:	9301      	str	r3, [sp, #4]
    218e:	e00f      	b.n	21b0 <vPrimaryBlockTimeTestTask+0x1e8>
				xErrorOccurred = pdTRUE;
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    2190:	2105      	movs	r1, #5
    2192:	6838      	ldr	r0, [r7, #0]
    2194:	f001 fac2 	bl	371c <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    2198:	6821      	ldr	r1, [r4, #0]
    219a:	2955      	cmp	r1, #85	; 0x55
    219c:	d028      	beq.n	21f0 <vPrimaryBlockTimeTestTask+0x228>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
    219e:	6838      	ldr	r0, [r7, #0]
    21a0:	2102      	movs	r1, #2
    21a2:	f001 fabb 	bl	371c <vTaskPrioritySet>
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    21a6:	9801      	ldr	r0, [sp, #4]
    21a8:	3001      	adds	r0, #1
    21aa:	9001      	str	r0, [sp, #4]
    21ac:	2804      	cmp	r0, #4
    21ae:	dc25      	bgt.n	21fc <vPrimaryBlockTimeTestTask+0x234>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    21b0:	2200      	movs	r2, #0
    21b2:	6830      	ldr	r0, [r6, #0]
    21b4:	a901      	add	r1, sp, #4
    21b6:	1c13      	adds	r3, r2, #0
    21b8:	f000 ff46 	bl	3048 <xQueueGenericSend>
    21bc:	2801      	cmp	r0, #1
    21be:	d001      	beq.n	21c4 <vPrimaryBlockTimeTestTask+0x1fc>
			{
				xErrorOccurred = pdTRUE;
    21c0:	4643      	mov	r3, r8
    21c2:	602b      	str	r3, [r5, #0]
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    21c4:	2200      	movs	r2, #0
    21c6:	6830      	ldr	r0, [r6, #0]
    21c8:	4669      	mov	r1, sp
    21ca:	1c13      	adds	r3, r2, #0
    21cc:	f001 f80c 	bl	31e8 <xQueueGenericReceive>
    21d0:	2801      	cmp	r0, #1
    21d2:	d001      	beq.n	21d8 <vPrimaryBlockTimeTestTask+0x210>
			{
				xErrorOccurred = pdTRUE;
    21d4:	4642      	mov	r2, r8
    21d6:	602a      	str	r2, [r5, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
    21d8:	6820      	ldr	r0, [r4, #0]
    21da:	2855      	cmp	r0, #85	; 0x55
    21dc:	d1d8      	bne.n	2190 <vPrimaryBlockTimeTestTask+0x1c8>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    21de:	4643      	mov	r3, r8
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    21e0:	2105      	movs	r1, #5
			}

			if( xRunIndicator == bktRUN_INDICATOR )
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    21e2:	602b      	str	r3, [r5, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    21e4:	6838      	ldr	r0, [r7, #0]
    21e6:	f001 fa99 	bl	371c <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    21ea:	6821      	ldr	r1, [r4, #0]
    21ec:	2955      	cmp	r1, #85	; 0x55
    21ee:	d1d6      	bne.n	219e <vPrimaryBlockTimeTestTask+0x1d6>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
    21f0:	4642      	mov	r2, r8
    21f2:	602a      	str	r2, [r5, #0]
    21f4:	e7d3      	b.n	219e <vPrimaryBlockTimeTestTask+0x1d6>

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
		{
			vTaskDelay( bktSHORT_WAIT );
    21f6:	2014      	movs	r0, #20
    21f8:	f001 fd9a 	bl	3d30 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
    21fc:	6823      	ldr	r3, [r4, #0]
    21fe:	2b55      	cmp	r3, #85	; 0x55
    2200:	d1f9      	bne.n	21f6 <vPrimaryBlockTimeTestTask+0x22e>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
    2202:	2014      	movs	r0, #20
    2204:	f001 fd94 	bl	3d30 <vTaskDelay>

		xPrimaryCycles++;
    2208:	4906      	ldr	r1, [pc, #24]	; (2224 <vPrimaryBlockTimeTestTask+0x25c>)
    220a:	680a      	ldr	r2, [r1, #0]
    220c:	3201      	adds	r2, #1
    220e:	600a      	str	r2, [r1, #0]
	}
    2210:	e6e9      	b.n	1fe6 <vPrimaryBlockTimeTestTask+0x1e>
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	400009e8 	.word	0x400009e8
    2218:	400009ec 	.word	0x400009ec
    221c:	400009e0 	.word	0x400009e0
    2220:	400009e4 	.word	0x400009e4
    2224:	400009dc 	.word	0x400009dc

00002228 <vCreateBlockTimeTasks>:
static void vSecondaryBlockTimeTestTask( void *pvParameters );

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
    2228:	b510      	push	{r4, lr}
    222a:	b084      	sub	sp, #16
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( portBASE_TYPE ) );
    222c:	2104      	movs	r1, #4
    222e:	2005      	movs	r0, #5
    2230:	f000 fece 	bl	2fd0 <xQueueCreate>
    2234:	4a0e      	ldr	r2, [pc, #56]	; (2270 <vCreateBlockTimeTasks+0x48>)
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, ( signed char * ) "Block_Time_Queue" );

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, ( signed char * )"BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
    2236:	2400      	movs	r4, #0
    2238:	2103      	movs	r1, #3
/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( portBASE_TYPE ) );
    223a:	6010      	str	r0, [r2, #0]
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, ( signed char * ) "Block_Time_Queue" );

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, ( signed char * )"BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
    223c:	1c23      	adds	r3, r4, #0
    223e:	9100      	str	r1, [sp, #0]
    2240:	2268      	movs	r2, #104	; 0x68
    2242:	490c      	ldr	r1, [pc, #48]	; (2274 <vCreateBlockTimeTasks+0x4c>)
    2244:	480c      	ldr	r0, [pc, #48]	; (2278 <vCreateBlockTimeTasks+0x50>)
    2246:	9401      	str	r4, [sp, #4]
    2248:	9402      	str	r4, [sp, #8]
    224a:	9403      	str	r4, [sp, #12]
    224c:	f001 f926 	bl	349c <xTaskGenericCreate>
	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed char * )"BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
    2250:	4b0a      	ldr	r3, [pc, #40]	; (227c <vCreateBlockTimeTasks+0x54>)
    2252:	2002      	movs	r0, #2
    2254:	9000      	str	r0, [sp, #0]
    2256:	9301      	str	r3, [sp, #4]
    2258:	4909      	ldr	r1, [pc, #36]	; (2280 <vCreateBlockTimeTasks+0x58>)
    225a:	2268      	movs	r2, #104	; 0x68
    225c:	1c23      	adds	r3, r4, #0
    225e:	4809      	ldr	r0, [pc, #36]	; (2284 <vCreateBlockTimeTasks+0x5c>)
    2260:	9402      	str	r4, [sp, #8]
    2262:	9403      	str	r4, [sp, #12]
    2264:	f001 f91a 	bl	349c <xTaskGenericCreate>
}
    2268:	b004      	add	sp, #16
    226a:	bc10      	pop	{r4}
    226c:	bc01      	pop	{r0}
    226e:	4700      	bx	r0
    2270:	400009e8 	.word	0x400009e8
    2274:	0000e878 	.word	0x0000e878
    2278:	00001fc9 	.word	0x00001fc9
    227c:	400009e4 	.word	0x400009e4
    2280:	0000e880 	.word	0x0000e880
    2284:	00001f19 	.word	0x00001f19

00002288 <xAreBlockTimeTestTasksStillRunning>:
	}
}
/*-----------------------------------------------------------*/

portBASE_TYPE xAreBlockTimeTestTasksStillRunning( void )
{
    2288:	b5f0      	push	{r4, r5, r6, r7, lr}
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    228a:	4a0f      	ldr	r2, [pc, #60]	; (22c8 <xAreBlockTimeTestTasksStillRunning+0x40>)
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    228c:	4c0f      	ldr	r4, [pc, #60]	; (22cc <xAreBlockTimeTestTasksStillRunning+0x44>)
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    228e:	6813      	ldr	r3, [r2, #0]
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2290:	490f      	ldr	r1, [pc, #60]	; (22d0 <xAreBlockTimeTestTasksStillRunning+0x48>)
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    2292:	469c      	mov	ip, r3
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2294:	6826      	ldr	r6, [r4, #0]
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    2296:	4b0f      	ldr	r3, [pc, #60]	; (22d4 <xAreBlockTimeTestTasksStillRunning+0x4c>)
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2298:	680d      	ldr	r5, [r1, #0]
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    229a:	681f      	ldr	r7, [r3, #0]
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
	{
		xReturn = pdFAIL;
    229c:	2000      	movs	r0, #0
	if( xPrimaryCycles == xLastPrimaryCycleCount )
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    229e:	42ae      	cmp	r6, r5
    22a0:	d003      	beq.n	22aa <xAreBlockTimeTestTasksStillRunning+0x22>
/*-----------------------------------------------------------*/

portBASE_TYPE xAreBlockTimeTestTasksStillRunning( void )
{
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;
    22a2:	4665      	mov	r5, ip
    22a4:	1be8      	subs	r0, r5, r7
    22a6:	1e47      	subs	r7, r0, #1
    22a8:	41b8      	sbcs	r0, r7
	if( xSecondaryCycles == xLastSecondaryCycleCount )
	{
		xReturn = pdFAIL;
	}

	if( xErrorOccurred == pdTRUE )
    22aa:	4e0b      	ldr	r6, [pc, #44]	; (22d8 <xAreBlockTimeTestTasksStillRunning+0x50>)
    22ac:	6835      	ldr	r5, [r6, #0]
	{
		xReturn = pdFAIL;
    22ae:	3d01      	subs	r5, #1
    22b0:	1e6e      	subs	r6, r5, #1
    22b2:	41b5      	sbcs	r5, r6
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
    22b4:	6824      	ldr	r4, [r4, #0]
	xLastPrimaryCycleCount = xPrimaryCycles;
    22b6:	6812      	ldr	r2, [r2, #0]
		xReturn = pdFAIL;
	}

	if( xErrorOccurred == pdTRUE )
	{
		xReturn = pdFAIL;
    22b8:	426f      	negs	r7, r5
    22ba:	4038      	ands	r0, r7
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
    22bc:	600c      	str	r4, [r1, #0]
	xLastPrimaryCycleCount = xPrimaryCycles;
    22be:	601a      	str	r2, [r3, #0]

	return xReturn;
}
    22c0:	bcf0      	pop	{r4, r5, r6, r7}
    22c2:	bc02      	pop	{r1}
    22c4:	4708      	bx	r1
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	400009dc 	.word	0x400009dc
    22cc:	400009f4 	.word	0x400009f4
    22d0:	400009d8 	.word	0x400009d8
    22d4:	400009f0 	.word	0x400009f0
    22d8:	400009ec 	.word	0x400009ec

000022dc <vCompeteingIntMathTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    22dc:	b5f0      	push	{r4, r5, r6, r7, lr}
		lValue /= intgCONST4;

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    22de:	4f10      	ldr	r7, [pc, #64]	; (2320 <vCompeteingIntMathTask+0x44>)
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    22e0:	b083      	sub	sp, #12
    22e2:	1c06      	adds	r6, r0, #0
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
    22e4:	2400      	movs	r4, #0
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    22e6:	257b      	movs	r5, #123	; 0x7b
    22e8:	9501      	str	r5, [sp, #4]
		lValue += intgCONST2;
    22ea:	9801      	ldr	r0, [sp, #4]
    22ec:	490d      	ldr	r1, [pc, #52]	; (2324 <vCompeteingIntMathTask+0x48>)
    22ee:	1843      	adds	r3, r0, r1
    22f0:	9301      	str	r3, [sp, #4]
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
    22f2:	9901      	ldr	r1, [sp, #4]
    22f4:	008a      	lsls	r2, r1, #2
    22f6:	1a88      	subs	r0, r1, r2
    22f8:	9001      	str	r0, [sp, #4]
		lValue /= intgCONST4;
    22fa:	9801      	ldr	r0, [sp, #4]
    22fc:	2107      	movs	r1, #7
    22fe:	f00b fcc5 	bl	dc8c <____aeabi_idiv_from_thumb>
    2302:	9001      	str	r0, [sp, #4]

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    2304:	9b01      	ldr	r3, [sp, #4]
    2306:	42bb      	cmp	r3, r7
    2308:	d001      	beq.n	230e <vCompeteingIntMathTask+0x32>
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    230a:	2401      	movs	r4, #1
    230c:	e7ec      	b.n	22e8 <vCompeteingIntMathTask+0xc>
    230e:	2c00      	cmp	r4, #0
    2310:	d1fb      	bne.n	230a <vCompeteingIntMathTask+0x2e>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
    2312:	f00b fca5 	bl	dc60 <__vPortEnterCritical_from_thumb>
				*pxTaskHasExecuted = pdTRUE;
    2316:	2201      	movs	r2, #1
    2318:	6032      	str	r2, [r6, #0]
			portEXIT_CRITICAL();
    231a:	f00b fc69 	bl	dbf0 <__vPortExitCritical_from_thumb>
    231e:	e7e3      	b.n	22e8 <vCompeteingIntMathTask+0xc>
    2320:	fffe771b 	.word	0xfffe771b
    2324:	00039447 	.word	0x00039447

00002328 <vStartIntegerMathTasks>:
static volatile signed portBASE_TYPE xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( signed portBASE_TYPE ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( unsigned portBASE_TYPE uxPriority )
{
    2328:	b500      	push	{lr}
    232a:	b085      	sub	sp, #20
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		xTaskCreate( vCompeteingIntMathTask, ( signed char * ) "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( xTaskHandle * ) NULL );
    232c:	2300      	movs	r3, #0
    232e:	9000      	str	r0, [sp, #0]
    2330:	9301      	str	r3, [sp, #4]
    2332:	9302      	str	r3, [sp, #8]
    2334:	9303      	str	r3, [sp, #12]
    2336:	4804      	ldr	r0, [pc, #16]	; (2348 <vStartIntegerMathTasks+0x20>)
    2338:	4904      	ldr	r1, [pc, #16]	; (234c <vStartIntegerMathTasks+0x24>)
    233a:	2268      	movs	r2, #104	; 0x68
    233c:	4b04      	ldr	r3, [pc, #16]	; (2350 <vStartIntegerMathTasks+0x28>)
    233e:	f001 f8ad 	bl	349c <xTaskGenericCreate>
	}
}
    2342:	b005      	add	sp, #20
    2344:	bc01      	pop	{r0}
    2346:	4700      	bx	r0
    2348:	000022dd 	.word	0x000022dd
    234c:	0000e888 	.word	0x0000e888
    2350:	400009f8 	.word	0x400009f8

00002354 <xAreIntegerMathsTaskStillRunning>:

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
    2354:	4b03      	ldr	r3, [pc, #12]	; (2364 <xAreIntegerMathsTaskStillRunning+0x10>)
    2356:	6818      	ldr	r0, [r3, #0]
			xReturn = pdFALSE;
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
    2358:	2200      	movs	r2, #0
    235a:	601a      	str	r2, [r3, #0]
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreIntegerMathsTaskStillRunning( void )
{
portBASE_TYPE xReturn = pdTRUE;
    235c:	1e43      	subs	r3, r0, #1
    235e:	4198      	sbcs	r0, r3
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
}
    2360:	4770      	bx	lr
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	400009f8 	.word	0x400009f8

00002368 <prvMediumPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
    2368:	b510      	push	{r4, lr}
    236a:	4c04      	ldr	r4, [pc, #16]	; (237c <prvMediumPriorityMutexTask+0x14>)

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
    236c:	2000      	movs	r0, #0
    236e:	f001 fdb7 	bl	3ee0 <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
    2372:	6823      	ldr	r3, [r4, #0]
    2374:	3301      	adds	r3, #1
    2376:	6023      	str	r3, [r4, #0]
    2378:	e7f8      	b.n	236c <prvMediumPriorityMutexTask+0x4>
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	40000a0c 	.word	0x40000a0c

00002380 <prvHighPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
    2380:	b570      	push	{r4, r5, r6, lr}
    2382:	4e0d      	ldr	r6, [pc, #52]	; (23b8 <prvHighPriorityMutexTask+0x38>)
    2384:	1c04      	adds	r4, r0, #0
		/* When this task unsuspends all it does is attempt to obtain
		the mutex.  It should find the mutex is not available so a
		block time is specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
		{
			xErrorDetected = pdTRUE;
    2386:	2501      	movs	r5, #1

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
    2388:	2000      	movs	r0, #0
    238a:	f001 fda9 	bl	3ee0 <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain
		the mutex.  It should find the mutex is not available so a
		block time is specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
    238e:	2100      	movs	r1, #0
    2390:	2201      	movs	r2, #1
    2392:	1c20      	adds	r0, r4, #0
    2394:	4252      	negs	r2, r2
    2396:	1c0b      	adds	r3, r1, #0
    2398:	f000 ff26 	bl	31e8 <xQueueGenericReceive>
    239c:	2801      	cmp	r0, #1
    239e:	d000      	beq.n	23a2 <prvHighPriorityMutexTask+0x22>
		{
			xErrorDetected = pdTRUE;
    23a0:	6035      	str	r5, [r6, #0]
		}

		/* When we eventually obtain the mutex we just give it back then
		return to suspend ready for the next test. */
		if( xSemaphoreGive( xMutex ) != pdPASS )
    23a2:	2100      	movs	r1, #0
    23a4:	1c20      	adds	r0, r4, #0
    23a6:	1c0a      	adds	r2, r1, #0
    23a8:	1c0b      	adds	r3, r1, #0
    23aa:	f000 fe4d 	bl	3048 <xQueueGenericSend>
    23ae:	2801      	cmp	r0, #1
    23b0:	d0ea      	beq.n	2388 <prvHighPriorityMutexTask+0x8>
		{
			xErrorDetected = pdTRUE;
    23b2:	6035      	str	r5, [r6, #0]
    23b4:	e7e8      	b.n	2388 <prvHighPriorityMutexTask+0x8>
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	40000a14 	.word	0x40000a14

000023bc <prvLowPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
    23bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23be:	465f      	mov	r7, fp
    23c0:	4656      	mov	r6, sl
    23c2:	464d      	mov	r5, r9
    23c4:	4644      	mov	r4, r8
    23c6:	b4f0      	push	{r4, r5, r6, r7}
    23c8:	4a29      	ldr	r2, [pc, #164]	; (2470 <prvLowPriorityMutexTask+0xb4>)
    23ca:	4b2a      	ldr	r3, [pc, #168]	; (2474 <prvLowPriorityMutexTask+0xb8>)
    23cc:	4690      	mov	r8, r2
    23ce:	4d2a      	ldr	r5, [pc, #168]	; (2478 <prvLowPriorityMutexTask+0xbc>)
	#endif

	for( ;; )
	{
		/* Take the mutex.  It should be available now. */
		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
    23d0:	2200      	movs	r2, #0
    23d2:	4e2a      	ldr	r6, [pc, #168]	; (247c <prvLowPriorityMutexTask+0xc0>)
    23d4:	4f2a      	ldr	r7, [pc, #168]	; (2480 <prvLowPriorityMutexTask+0xc4>)
	}
}
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
    23d6:	4682      	mov	sl, r0
    23d8:	4699      	mov	r9, r3
	#endif

	for( ;; )
	{
		/* Take the mutex.  It should be available now. */
		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
    23da:	4693      	mov	fp, r2
		{
			xErrorDetected = pdTRUE;
    23dc:	2401      	movs	r4, #1
	#endif

	for( ;; )
	{
		/* Take the mutex.  It should be available now. */
		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
    23de:	2100      	movs	r1, #0
    23e0:	4650      	mov	r0, sl
    23e2:	1c0a      	adds	r2, r1, #0
    23e4:	1c0b      	adds	r3, r1, #0
    23e6:	f000 feff 	bl	31e8 <xQueueGenericReceive>
    23ea:	2801      	cmp	r0, #1
    23ec:	d000      	beq.n	23f0 <prvLowPriorityMutexTask+0x34>
		{
			xErrorDetected = pdTRUE;
    23ee:	602c      	str	r4, [r5, #0]
		}

		/* Set our guarded variable to a known start value. */
		ulGuardedVariable = 0;
    23f0:	465b      	mov	r3, fp
    23f2:	6033      	str	r3, [r6, #0]

		/* Our priority should be as per that assigned when the task was
		created. */
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
    23f4:	2000      	movs	r0, #0
    23f6:	f001 f97f 	bl	36f8 <uxTaskPriorityGet>
    23fa:	2800      	cmp	r0, #0
    23fc:	d000      	beq.n	2400 <prvLowPriorityMutexTask+0x44>
		{
			xErrorDetected = pdTRUE;
    23fe:	602c      	str	r4, [r5, #0]
		}

		/* Now unsuspend the high priority task.  This will attempt to take the
		mutex, and block when it finds it cannot obtain it. */
		vTaskResume( xHighPriorityMutexTask );
    2400:	6838      	ldr	r0, [r7, #0]
    2402:	f001 f9ed 	bl	37e0 <vTaskResume>

		/* We should now have inherited the prioritoy of the high priority task,
		as by now it will have attempted to get the mutex. */
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
    2406:	2000      	movs	r0, #0
    2408:	f001 f976 	bl	36f8 <uxTaskPriorityGet>
    240c:	2803      	cmp	r0, #3
    240e:	d000      	beq.n	2412 <prvLowPriorityMutexTask+0x56>
		{
			xErrorDetected = pdTRUE;
    2410:	602c      	str	r4, [r5, #0]
		}

		/* We can attempt to set our priority to the test priority - between the
		idle priority and the medium/high test priorities, but our actual
		prioroity should remain at the high priority. */
		vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
    2412:	2000      	movs	r0, #0
    2414:	2101      	movs	r1, #1
    2416:	f001 f981 	bl	371c <vTaskPrioritySet>
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
    241a:	2000      	movs	r0, #0
    241c:	f001 f96c 	bl	36f8 <uxTaskPriorityGet>
    2420:	2803      	cmp	r0, #3
    2422:	d000      	beq.n	2426 <prvLowPriorityMutexTask+0x6a>
		{
			xErrorDetected = pdTRUE;
    2424:	602c      	str	r4, [r5, #0]
		}

		/* Now unsuspend the medium priority task.  This should not run as our
		inherited priority is above that of the medium priority task. */
		vTaskResume( xMediumPriorityMutexTask );
    2426:	4642      	mov	r2, r8
    2428:	6810      	ldr	r0, [r2, #0]
    242a:	f001 f9d9 	bl	37e0 <vTaskResume>

		/* If the did run then it will have incremented our guarded variable. */
		if( ulGuardedVariable != 0 )
    242e:	6830      	ldr	r0, [r6, #0]
    2430:	2800      	cmp	r0, #0
    2432:	d000      	beq.n	2436 <prvLowPriorityMutexTask+0x7a>
		{
			xErrorDetected = pdTRUE;
    2434:	602c      	str	r4, [r5, #0]
		/* When we give back the semaphore our priority should be disinherited
		back to the priority to which we attempted to set ourselves.  This means
		that when the high priority task next blocks, the medium priority task
		should execute and increment the guarded variable.   When we next run
		both the high and medium priority tasks will have been suspended again. */
		if( xSemaphoreGive( xMutex ) != pdPASS )
    2436:	2100      	movs	r1, #0
    2438:	4650      	mov	r0, sl
    243a:	1c0a      	adds	r2, r1, #0
    243c:	1c0b      	adds	r3, r1, #0
    243e:	f000 fe03 	bl	3048 <xQueueGenericSend>
    2442:	2801      	cmp	r0, #1
    2444:	d000      	beq.n	2448 <prvLowPriorityMutexTask+0x8c>
		{
			xErrorDetected = pdTRUE;
    2446:	602c      	str	r4, [r5, #0]
		}

		/* Check that the guarded variable did indeed increment... */
		if( ulGuardedVariable != 1 )
    2448:	6831      	ldr	r1, [r6, #0]
    244a:	2901      	cmp	r1, #1
    244c:	d000      	beq.n	2450 <prvLowPriorityMutexTask+0x94>
		{
			xErrorDetected = pdTRUE;
    244e:	602c      	str	r4, [r5, #0]
		}

		/* ... and that our priority has been disinherited to
		genqMUTEX_TEST_PRIORITY. */
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
    2450:	2000      	movs	r0, #0
    2452:	f001 f951 	bl	36f8 <uxTaskPriorityGet>
    2456:	2801      	cmp	r0, #1
    2458:	d000      	beq.n	245c <prvLowPriorityMutexTask+0xa0>
		{
			xErrorDetected = pdTRUE;
    245a:	602c      	str	r4, [r5, #0]
		}

		/* Set our priority back to our original priority ready for the next
		loop around this test. */
		vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
    245c:	2000      	movs	r0, #0
    245e:	1c01      	adds	r1, r0, #0
    2460:	f001 f95c 	bl	371c <vTaskPrioritySet>

		/* Just to show we are still running. */
		ulLoopCounter2++;
    2464:	464a      	mov	r2, r9
    2466:	6813      	ldr	r3, [r2, #0]
    2468:	3301      	adds	r3, #1
    246a:	6013      	str	r3, [r2, #0]

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif		
	}
    246c:	e7b7      	b.n	23de <prvLowPriorityMutexTask+0x22>
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	40000a10 	.word	0x40000a10
    2474:	400009fc 	.word	0x400009fc
    2478:	40000a14 	.word	0x40000a14
    247c:	40000a0c 	.word	0x40000a0c
    2480:	40000a00 	.word	0x40000a00

00002484 <prvSendFrontAndBackTest>:
	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
}
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
    2484:	b5f0      	push	{r4, r5, r6, r7, lr}
    2486:	464f      	mov	r7, r9
    2488:	4646      	mov	r6, r8
    248a:	b4c0      	push	{r6, r7}
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    248c:	2300      	movs	r3, #0
    248e:	4698      	mov	r8, r3
    2490:	4f87      	ldr	r7, [pc, #540]	; (26b0 <prvSendFrontAndBackTest+0x22c>)
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    2492:	3302      	adds	r3, #2
    2494:	4e87      	ldr	r6, [pc, #540]	; (26b4 <prvSendFrontAndBackTest+0x230>)
	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
}
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
    2496:	b083      	sub	sp, #12
    2498:	1c04      	adds	r4, r0, #0
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    249a:	2501      	movs	r5, #1
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    249c:	4699      	mov	r9, r3
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    249e:	1c20      	adds	r0, r4, #0
    24a0:	1c39      	adds	r1, r7, #0
    24a2:	2200      	movs	r2, #0
    24a4:	2301      	movs	r3, #1
    24a6:	f000 fdcf 	bl	3048 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    24aa:	1c20      	adds	r0, r4, #0
    24ac:	f000 ff80 	bl	33b0 <uxQueueMessagesWaiting>
    24b0:	2801      	cmp	r0, #1
    24b2:	d000      	beq.n	24b6 <prvSendFrontAndBackTest+0x32>
		{
			xErrorDetected = pdTRUE;
    24b4:	6035      	str	r5, [r6, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
    24b6:	2200      	movs	r2, #0
    24b8:	1c20      	adds	r0, r4, #0
    24ba:	a901      	add	r1, sp, #4
    24bc:	1c13      	adds	r3, r2, #0
    24be:	f000 fe93 	bl	31e8 <xQueueGenericReceive>
    24c2:	2801      	cmp	r0, #1
    24c4:	d000      	beq.n	24c8 <prvSendFrontAndBackTest+0x44>
		{
			xErrorDetected = pdTRUE;
    24c6:	6035      	str	r5, [r6, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
    24c8:	683a      	ldr	r2, [r7, #0]
    24ca:	9b01      	ldr	r3, [sp, #4]
    24cc:	429a      	cmp	r2, r3
    24ce:	d000      	beq.n	24d2 <prvSendFrontAndBackTest+0x4e>
		{
			xErrorDetected = pdTRUE;
    24d0:	6035      	str	r5, [r6, #0]
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    24d2:	1c20      	adds	r0, r4, #0
    24d4:	f000 ff6c 	bl	33b0 <uxQueueMessagesWaiting>
    24d8:	2800      	cmp	r0, #0
    24da:	d000      	beq.n	24de <prvSendFrontAndBackTest+0x5a>
		{
			xErrorDetected = pdTRUE;
    24dc:	6035      	str	r5, [r6, #0]
		}

		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    24de:	2200      	movs	r2, #0
    24e0:	1c20      	adds	r0, r4, #0
    24e2:	1c39      	adds	r1, r7, #0
    24e4:	1c13      	adds	r3, r2, #0
    24e6:	f000 fdaf 	bl	3048 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    24ea:	1c20      	adds	r0, r4, #0
    24ec:	f000 ff60 	bl	33b0 <uxQueueMessagesWaiting>
    24f0:	2801      	cmp	r0, #1
    24f2:	d000      	beq.n	24f6 <prvSendFrontAndBackTest+0x72>
		{
			xErrorDetected = pdTRUE;
    24f4:	6035      	str	r5, [r6, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
    24f6:	2200      	movs	r2, #0
    24f8:	1c20      	adds	r0, r4, #0
    24fa:	a901      	add	r1, sp, #4
    24fc:	1c13      	adds	r3, r2, #0
    24fe:	f000 fe73 	bl	31e8 <xQueueGenericReceive>
    2502:	2801      	cmp	r0, #1
    2504:	d000      	beq.n	2508 <prvSendFrontAndBackTest+0x84>
		{
			xErrorDetected = pdTRUE;
    2506:	6035      	str	r5, [r6, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    2508:	1c20      	adds	r0, r4, #0
    250a:	f000 ff51 	bl	33b0 <uxQueueMessagesWaiting>
    250e:	2800      	cmp	r0, #0
    2510:	d000      	beq.n	2514 <prvSendFrontAndBackTest+0x90>
		{
			xErrorDetected = pdTRUE;
    2512:	6035      	str	r5, [r6, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
    2514:	6838      	ldr	r0, [r7, #0]
    2516:	9b01      	ldr	r3, [sp, #4]
    2518:	4298      	cmp	r0, r3
    251a:	d000      	beq.n	251e <prvSendFrontAndBackTest+0x9a>
		{
			xErrorDetected = pdTRUE;
    251c:	6035      	str	r5, [r6, #0]
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    251e:	464b      	mov	r3, r9
    2520:	9301      	str	r3, [sp, #4]
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    2522:	2200      	movs	r2, #0
    2524:	a901      	add	r1, sp, #4
    2526:	1c20      	adds	r0, r4, #0
    2528:	1c13      	adds	r3, r2, #0
    252a:	f000 fd8d 	bl	3048 <xQueueGenericSend>
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    252e:	9901      	ldr	r1, [sp, #4]
    2530:	3101      	adds	r1, #1
    2532:	9101      	str	r1, [sp, #4]
    2534:	2904      	cmp	r1, #4
    2536:	d9f4      	bls.n	2522 <prvSendFrontAndBackTest+0x9e>
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
    2538:	1c20      	adds	r0, r4, #0
    253a:	f000 ff39 	bl	33b0 <uxQueueMessagesWaiting>
    253e:	2803      	cmp	r0, #3
    2540:	d000      	beq.n	2544 <prvSendFrontAndBackTest+0xc0>
		{
			xErrorDetected = pdTRUE;
    2542:	6035      	str	r5, [r6, #0]
		}
		ulData = 1;
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    2544:	a901      	add	r1, sp, #4
    2546:	2200      	movs	r2, #0
    2548:	1c2b      	adds	r3, r5, #0
    254a:	1c20      	adds	r0, r4, #0
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
		{
			xErrorDetected = pdTRUE;
		}
		ulData = 1;
    254c:	9501      	str	r5, [sp, #4]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    254e:	f000 fd7b 	bl	3048 <xQueueGenericSend>
		ulData = 0;
    2552:	4643      	mov	r3, r8
    2554:	9301      	str	r3, [sp, #4]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    2556:	1c20      	adds	r0, r4, #0
    2558:	a901      	add	r1, sp, #4
    255a:	4642      	mov	r2, r8
    255c:	1c2b      	adds	r3, r5, #0
    255e:	f000 fd73 	bl	3048 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
    2562:	1c20      	adds	r0, r4, #0
    2564:	f000 ff24 	bl	33b0 <uxQueueMessagesWaiting>
    2568:	2805      	cmp	r0, #5
    256a:	d000      	beq.n	256e <prvSendFrontAndBackTest+0xea>
		{
			xErrorDetected = pdTRUE;
    256c:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    256e:	1c20      	adds	r0, r4, #0
    2570:	a901      	add	r1, sp, #4
    2572:	2200      	movs	r2, #0
    2574:	2301      	movs	r3, #1
    2576:	f000 fd67 	bl	3048 <xQueueGenericSend>
    257a:	2800      	cmp	r0, #0
    257c:	d000      	beq.n	2580 <prvSendFrontAndBackTest+0xfc>
		{
			xErrorDetected = pdTRUE;
    257e:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    2580:	2200      	movs	r2, #0
    2582:	1c20      	adds	r0, r4, #0
    2584:	a901      	add	r1, sp, #4
    2586:	1c13      	adds	r3, r2, #0
    2588:	f000 fd5e 	bl	3048 <xQueueGenericSend>
    258c:	2800      	cmp	r0, #0
    258e:	d100      	bne.n	2592 <prvSendFrontAndBackTest+0x10e>
    2590:	e08c      	b.n	26ac <prvSendFrontAndBackTest+0x228>
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    2592:	4643      	mov	r3, r8
			xErrorDetected = pdTRUE;
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
		{
			xErrorDetected = pdTRUE;
    2594:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    2596:	9301      	str	r3, [sp, #4]
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2598:	1c20      	adds	r0, r4, #0
    259a:	4669      	mov	r1, sp
    259c:	2200      	movs	r2, #0
    259e:	2301      	movs	r3, #1
    25a0:	f000 fe22 	bl	31e8 <xQueueGenericReceive>
    25a4:	2801      	cmp	r0, #1
    25a6:	d000      	beq.n	25aa <prvSendFrontAndBackTest+0x126>
			{
				xErrorDetected = pdTRUE;
    25a8:	6035      	str	r5, [r6, #0]
			}

			if( ulData != ulData2 )
    25aa:	9b00      	ldr	r3, [sp, #0]
    25ac:	9a01      	ldr	r2, [sp, #4]
    25ae:	429a      	cmp	r2, r3
    25b0:	d000      	beq.n	25b4 <prvSendFrontAndBackTest+0x130>
			{
				xErrorDetected = pdTRUE;
    25b2:	6035      	str	r5, [r6, #0]
			}
			

			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
    25b4:	43d8      	mvns	r0, r3
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    25b6:	2200      	movs	r2, #0
			}
			

			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
    25b8:	9000      	str	r0, [sp, #0]
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    25ba:	4669      	mov	r1, sp
    25bc:	1c20      	adds	r0, r4, #0
    25be:	1c13      	adds	r3, r2, #0
    25c0:	f000 fe12 	bl	31e8 <xQueueGenericReceive>
    25c4:	2801      	cmp	r0, #1
    25c6:	d000      	beq.n	25ca <prvSendFrontAndBackTest+0x146>
			{
				xErrorDetected = pdTRUE;
    25c8:	6035      	str	r5, [r6, #0]
			}

			if( ulData != ulData2 )
    25ca:	9b01      	ldr	r3, [sp, #4]
    25cc:	9a00      	ldr	r2, [sp, #0]
    25ce:	4293      	cmp	r3, r2
    25d0:	d000      	beq.n	25d4 <prvSendFrontAndBackTest+0x150>
			{
				xErrorDetected = pdTRUE;
    25d2:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    25d4:	3301      	adds	r3, #1
    25d6:	9301      	str	r3, [sp, #4]
    25d8:	2b04      	cmp	r3, #4
    25da:	d9dd      	bls.n	2598 <prvSendFrontAndBackTest+0x114>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    25dc:	1c20      	adds	r0, r4, #0
    25de:	f000 fee7 	bl	33b0 <uxQueueMessagesWaiting>
    25e2:	2800      	cmp	r0, #0
    25e4:	d000      	beq.n	25e8 <prvSendFrontAndBackTest+0x164>
		{
			xErrorDetected = pdTRUE;
    25e6:	6035      	str	r5, [r6, #0]
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
    25e8:	210a      	movs	r1, #10
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    25ea:	2200      	movs	r2, #0
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
    25ec:	9101      	str	r1, [sp, #4]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    25ee:	1c20      	adds	r0, r4, #0
    25f0:	a901      	add	r1, sp, #4
    25f2:	1c13      	adds	r3, r2, #0
    25f4:	f000 fd28 	bl	3048 <xQueueGenericSend>
    25f8:	2801      	cmp	r0, #1
    25fa:	d000      	beq.n	25fe <prvSendFrontAndBackTest+0x17a>
		{
			xErrorDetected = pdTRUE;
    25fc:	6035      	str	r5, [r6, #0]
		}
		ulData = 11;
    25fe:	230b      	movs	r3, #11
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    2600:	2200      	movs	r2, #0
		ulData = 10;
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
		{
			xErrorDetected = pdTRUE;
		}
		ulData = 11;
    2602:	9301      	str	r3, [sp, #4]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    2604:	1c20      	adds	r0, r4, #0
    2606:	a901      	add	r1, sp, #4
    2608:	1c13      	adds	r3, r2, #0
    260a:	f000 fd1d 	bl	3048 <xQueueGenericSend>
    260e:	2801      	cmp	r0, #1
    2610:	d000      	beq.n	2614 <prvSendFrontAndBackTest+0x190>
		{
			xErrorDetected = pdTRUE;
    2612:	6035      	str	r5, [r6, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
    2614:	1c20      	adds	r0, r4, #0
    2616:	f000 fecb 	bl	33b0 <uxQueueMessagesWaiting>
    261a:	2802      	cmp	r0, #2
    261c:	d000      	beq.n	2620 <prvSendFrontAndBackTest+0x19c>
		{
			xErrorDetected = pdTRUE;
    261e:	6035      	str	r5, [r6, #0]
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
    2620:	2009      	movs	r0, #9
    2622:	9001      	str	r0, [sp, #4]
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
    2624:	1c20      	adds	r0, r4, #0
    2626:	a901      	add	r1, sp, #4
    2628:	2200      	movs	r2, #0
    262a:	2301      	movs	r3, #1
    262c:	f000 fd0c 	bl	3048 <xQueueGenericSend>
    2630:	2801      	cmp	r0, #1
    2632:	d000      	beq.n	2636 <prvSendFrontAndBackTest+0x1b2>
			{
				xErrorDetected = pdTRUE;
    2634:	6035      	str	r5, [r6, #0]
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
    2636:	9a01      	ldr	r2, [sp, #4]
    2638:	3a01      	subs	r2, #1
    263a:	9201      	str	r2, [sp, #4]
    263c:	2a06      	cmp	r2, #6
    263e:	d8f1      	bhi.n	2624 <prvSendFrontAndBackTest+0x1a0>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
    2640:	1c20      	adds	r0, r4, #0
    2642:	f000 feb5 	bl	33b0 <uxQueueMessagesWaiting>
    2646:	2805      	cmp	r0, #5
    2648:	d000      	beq.n	264c <prvSendFrontAndBackTest+0x1c8>
		{
			xErrorDetected = pdTRUE;
    264a:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    264c:	1c20      	adds	r0, r4, #0
    264e:	a901      	add	r1, sp, #4
    2650:	2200      	movs	r2, #0
    2652:	2301      	movs	r3, #1
    2654:	f000 fcf8 	bl	3048 <xQueueGenericSend>
    2658:	2800      	cmp	r0, #0
    265a:	d000      	beq.n	265e <prvSendFrontAndBackTest+0x1da>
		{
			xErrorDetected = pdTRUE;
    265c:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    265e:	2200      	movs	r2, #0
    2660:	1c20      	adds	r0, r4, #0
    2662:	a901      	add	r1, sp, #4
    2664:	1c13      	adds	r3, r2, #0
    2666:	f000 fcef 	bl	3048 <xQueueGenericSend>
    266a:	2800      	cmp	r0, #0
    266c:	d000      	beq.n	2670 <prvSendFrontAndBackTest+0x1ec>
		{
			xErrorDetected = pdTRUE;
    266e:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
    2670:	2107      	movs	r1, #7
    2672:	9101      	str	r1, [sp, #4]
		{
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2674:	2200      	movs	r2, #0
    2676:	1c20      	adds	r0, r4, #0
    2678:	4669      	mov	r1, sp
    267a:	1c13      	adds	r3, r2, #0
    267c:	f000 fdb4 	bl	31e8 <xQueueGenericReceive>
    2680:	2801      	cmp	r0, #1
    2682:	d000      	beq.n	2686 <prvSendFrontAndBackTest+0x202>
			{
				xErrorDetected = pdTRUE;
    2684:	6035      	str	r5, [r6, #0]
			}

			if( ulData != ulData2 )
    2686:	9b01      	ldr	r3, [sp, #4]
    2688:	9a00      	ldr	r2, [sp, #0]
    268a:	4293      	cmp	r3, r2
    268c:	d000      	beq.n	2690 <prvSendFrontAndBackTest+0x20c>
			{
				xErrorDetected = pdTRUE;
    268e:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
    2690:	3301      	adds	r3, #1
    2692:	9301      	str	r3, [sp, #4]
    2694:	2b0b      	cmp	r3, #11
    2696:	d9ed      	bls.n	2674 <prvSendFrontAndBackTest+0x1f0>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    2698:	1c20      	adds	r0, r4, #0
    269a:	f000 fe89 	bl	33b0 <uxQueueMessagesWaiting>
    269e:	2800      	cmp	r0, #0
    26a0:	d000      	beq.n	26a4 <prvSendFrontAndBackTest+0x220>
		{
			xErrorDetected = pdTRUE;
    26a2:	6035      	str	r5, [r6, #0]
		}

		ulLoopCounter++;
    26a4:	683b      	ldr	r3, [r7, #0]
    26a6:	3301      	adds	r3, #1
    26a8:	603b      	str	r3, [r7, #0]
	}
    26aa:	e6f8      	b.n	249e <prvSendFrontAndBackTest+0x1a>
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    26ac:	9001      	str	r0, [sp, #4]
    26ae:	e773      	b.n	2598 <prvSendFrontAndBackTest+0x114>
    26b0:	40000a18 	.word	0x40000a18
    26b4:	40000a14 	.word	0x40000a14

000026b8 <vStartGenericQueueTasks>:
static xTaskHandle xHighPriorityMutexTask, xMediumPriorityMutexTask;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( unsigned portBASE_TYPE uxPriority )
{
    26b8:	b530      	push	{r4, r5, lr}
    26ba:	b085      	sub	sp, #20
    26bc:	1c05      	adds	r5, r0, #0
xQueueHandle xQueue;
xSemaphoreHandle xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
    26be:	2104      	movs	r1, #4
    26c0:	2005      	movs	r0, #5
    26c2:	f000 fc85 	bl	2fd0 <xQueueCreate>
	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "Gen_Queue_Test" );

	/* Create the demo task and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is
	declared on the stack here. */
	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * )"GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
    26c6:	2400      	movs	r4, #0
xQueueHandle xQueue;
xSemaphoreHandle xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
    26c8:	1c03      	adds	r3, r0, #0
	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "Gen_Queue_Test" );

	/* Create the demo task and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is
	declared on the stack here. */
	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * )"GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
    26ca:	4919      	ldr	r1, [pc, #100]	; (2730 <vStartGenericQueueTasks+0x78>)
    26cc:	2268      	movs	r2, #104	; 0x68
    26ce:	4819      	ldr	r0, [pc, #100]	; (2734 <vStartGenericQueueTasks+0x7c>)
    26d0:	9500      	str	r5, [sp, #0]
    26d2:	9401      	str	r4, [sp, #4]
    26d4:	9402      	str	r4, [sp, #8]
    26d6:	9403      	str	r4, [sp, #12]
    26d8:	f000 fee0 	bl	349c <xTaskGenericCreate>

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
    26dc:	f000 fd3c 	bl	3158 <xQueueCreateMutex>
    26e0:	1c05      	adds	r5, r0, #0
	vQueueAddToRegistry( ( xQueueHandle ) xMutex, ( signed portCHAR * ) "Gen_Queue_Mutex" );

	/* Create the mutex demo tasks and pass it the mutex just created.  We are
	passing the mutex handle by value so it does not matter that it is declared
	on the stack here. */
	xTaskCreate( prvLowPriorityMutexTask, ( signed portCHAR * )"MuLow", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
    26e2:	1c2b      	adds	r3, r5, #0
    26e4:	4914      	ldr	r1, [pc, #80]	; (2738 <vStartGenericQueueTasks+0x80>)
    26e6:	2268      	movs	r2, #104	; 0x68
    26e8:	4814      	ldr	r0, [pc, #80]	; (273c <vStartGenericQueueTasks+0x84>)
    26ea:	9400      	str	r4, [sp, #0]
    26ec:	9401      	str	r4, [sp, #4]
    26ee:	9402      	str	r4, [sp, #8]
    26f0:	9403      	str	r4, [sp, #12]
    26f2:	f000 fed3 	bl	349c <xTaskGenericCreate>
	xTaskCreate( prvMediumPriorityMutexTask, ( signed portCHAR * )"MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
    26f6:	4912      	ldr	r1, [pc, #72]	; (2740 <vStartGenericQueueTasks+0x88>)
    26f8:	2202      	movs	r2, #2
    26fa:	9200      	str	r2, [sp, #0]
    26fc:	9101      	str	r1, [sp, #4]
    26fe:	1c23      	adds	r3, r4, #0
    2700:	4910      	ldr	r1, [pc, #64]	; (2744 <vStartGenericQueueTasks+0x8c>)
    2702:	2268      	movs	r2, #104	; 0x68
    2704:	4810      	ldr	r0, [pc, #64]	; (2748 <vStartGenericQueueTasks+0x90>)
    2706:	9402      	str	r4, [sp, #8]
    2708:	9403      	str	r4, [sp, #12]
    270a:	f000 fec7 	bl	349c <xTaskGenericCreate>
	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
    270e:	4b0f      	ldr	r3, [pc, #60]	; (274c <vStartGenericQueueTasks+0x94>)
    2710:	2003      	movs	r0, #3
    2712:	9000      	str	r0, [sp, #0]
    2714:	9301      	str	r3, [sp, #4]
    2716:	490e      	ldr	r1, [pc, #56]	; (2750 <vStartGenericQueueTasks+0x98>)
    2718:	1c2b      	adds	r3, r5, #0
    271a:	2268      	movs	r2, #104	; 0x68
    271c:	480d      	ldr	r0, [pc, #52]	; (2754 <vStartGenericQueueTasks+0x9c>)
    271e:	9402      	str	r4, [sp, #8]
    2720:	9403      	str	r4, [sp, #12]
    2722:	f000 febb 	bl	349c <xTaskGenericCreate>
}
    2726:	b005      	add	sp, #20
    2728:	bc30      	pop	{r4, r5}
    272a:	bc01      	pop	{r0}
    272c:	4700      	bx	r0
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	0000e890 	.word	0x0000e890
    2734:	00002485 	.word	0x00002485
    2738:	0000e898 	.word	0x0000e898
    273c:	000023bd 	.word	0x000023bd
    2740:	40000a10 	.word	0x40000a10
    2744:	0000e8a0 	.word	0x0000e8a0
    2748:	00002369 	.word	0x00002369
    274c:	40000a00 	.word	0x40000a00
    2750:	0000e8a8 	.word	0x0000e8a8
    2754:	00002381 	.word	0x00002381

00002758 <xAreGenericQueueTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreGenericQueueTasksStillRunning( void )
{
    2758:	b570      	push	{r4, r5, r6, lr}
static unsigned portLONG ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loopcounters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
    275a:	4c0f      	ldr	r4, [pc, #60]	; (2798 <xAreGenericQueueTasksStillRunning+0x40>)
    275c:	490f      	ldr	r1, [pc, #60]	; (279c <xAreGenericQueueTasksStillRunning+0x44>)
    275e:	6823      	ldr	r3, [r4, #0]
    2760:	680a      	ldr	r2, [r1, #0]
    2762:	429a      	cmp	r2, r3
    2764:	d014      	beq.n	2790 <xAreGenericQueueTasksStillRunning+0x38>
    2766:	480e      	ldr	r0, [pc, #56]	; (27a0 <xAreGenericQueueTasksStillRunning+0x48>)
	{
		xErrorDetected = pdTRUE;
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
    2768:	4a0e      	ldr	r2, [pc, #56]	; (27a4 <xAreGenericQueueTasksStillRunning+0x4c>)
    276a:	4b0f      	ldr	r3, [pc, #60]	; (27a8 <xAreGenericQueueTasksStillRunning+0x50>)
    276c:	6815      	ldr	r5, [r2, #0]
    276e:	681e      	ldr	r6, [r3, #0]
    2770:	42ae      	cmp	r6, r5
    2772:	d009      	beq.n	2788 <xAreGenericQueueTasksStillRunning+0x30>
    2774:	6800      	ldr	r0, [r0, #0]
    2776:	4245      	negs	r5, r0
    2778:	4168      	adcs	r0, r5
	{
		xErrorDetected = pdTRUE;
	}

	ulLastLoopCounter = ulLoopCounter;
    277a:	6824      	ldr	r4, [r4, #0]
    277c:	600c      	str	r4, [r1, #0]
	ulLastLoopCounter2 = ulLoopCounter2;	
    277e:	6811      	ldr	r1, [r2, #0]
    2780:	6019      	str	r1, [r3, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return !xErrorDetected;
}
    2782:	bc70      	pop	{r4, r5, r6}
    2784:	bc02      	pop	{r1}
    2786:	4708      	bx	r1
		xErrorDetected = pdTRUE;
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
	{
		xErrorDetected = pdTRUE;
    2788:	2501      	movs	r5, #1
    278a:	6005      	str	r5, [r0, #0]
    278c:	2000      	movs	r0, #0
    278e:	e7f4      	b.n	277a <xAreGenericQueueTasksStillRunning+0x22>

	/* If the demo task is still running then we expect the loopcounters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
	{
		xErrorDetected = pdTRUE;
    2790:	4803      	ldr	r0, [pc, #12]	; (27a0 <xAreGenericQueueTasksStillRunning+0x48>)
    2792:	2501      	movs	r5, #1
    2794:	6005      	str	r5, [r0, #0]
    2796:	e7e7      	b.n	2768 <xAreGenericQueueTasksStillRunning+0x10>
    2798:	40000a18 	.word	0x40000a18
    279c:	40000a08 	.word	0x40000a08
    27a0:	40000a14 	.word	0x40000a14
    27a4:	400009fc 	.word	0x400009fc
    27a8:	40000a04 	.word	0x40000a04

000027ac <prvHighestPriorityPeekTask>:
	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
}
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
    27ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ae:	4d29      	ldr	r5, [pc, #164]	; (2854 <prvHighestPriorityPeekTask+0xa8>)
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
    27b0:	4f29      	ldr	r7, [pc, #164]	; (2858 <prvHighestPriorityPeekTask+0xac>)
	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
}
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
    27b2:	b083      	sub	sp, #12
    27b4:	1c06      	adds	r6, r0, #0

	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the high priority task to execute. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    27b6:	2401      	movs	r4, #1
    27b8:	2201      	movs	r2, #1
    27ba:	1c30      	adds	r0, r6, #0
    27bc:	a901      	add	r1, sp, #4
    27be:	4252      	negs	r2, r2
    27c0:	2301      	movs	r3, #1
    27c2:	f000 fd11 	bl	31e8 <xQueueGenericReceive>
    27c6:	2801      	cmp	r0, #1
    27c8:	d000      	beq.n	27cc <prvHighestPriorityPeekTask+0x20>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    27ca:	602c      	str	r4, [r5, #0]
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
    27cc:	9b01      	ldr	r3, [sp, #4]
    27ce:	42bb      	cmp	r3, r7
    27d0:	d000      	beq.n	27d4 <prvHighestPriorityPeekTask+0x28>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    27d2:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    27d4:	1c30      	adds	r0, r6, #0
    27d6:	f000 fdeb 	bl	33b0 <uxQueueMessagesWaiting>
    27da:	2801      	cmp	r0, #1
    27dc:	d000      	beq.n	27e0 <prvHighestPriorityPeekTask+0x34>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    27de:	602c      	str	r4, [r5, #0]
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
    27e0:	2300      	movs	r3, #0
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    27e2:	1c30      	adds	r0, r6, #0
    27e4:	a901      	add	r1, sp, #4
    27e6:	1c1a      	adds	r2, r3, #0
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
    27e8:	9301      	str	r3, [sp, #4]
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    27ea:	f000 fcfd 	bl	31e8 <xQueueGenericReceive>
    27ee:	2801      	cmp	r0, #1
    27f0:	d000      	beq.n	27f4 <prvHighestPriorityPeekTask+0x48>
		{
			/* We expected to receive the value. */
			xErrorDetected = pdTRUE;
    27f2:	602c      	str	r4, [r5, #0]
		}

		if( ulValue != 0x11223344 )
    27f4:	9801      	ldr	r0, [sp, #4]
    27f6:	42b8      	cmp	r0, r7
    27f8:	d000      	beq.n	27fc <prvHighestPriorityPeekTask+0x50>
		{
			/* We did not receive the expected value - which should have been
			the same value as was peeked. */
			xErrorDetected = pdTRUE;
    27fa:	602c      	str	r4, [r5, #0]
		}

		/* Now we will block again as the queue is once more empty.  The low 
		priority task can then execute again. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    27fc:	2201      	movs	r2, #1
    27fe:	1c30      	adds	r0, r6, #0
    2800:	a901      	add	r1, sp, #4
    2802:	4252      	negs	r2, r2
    2804:	2301      	movs	r3, #1
    2806:	f000 fcef 	bl	31e8 <xQueueGenericReceive>
    280a:	2801      	cmp	r0, #1
    280c:	d000      	beq.n	2810 <prvHighestPriorityPeekTask+0x64>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    280e:	602c      	str	r4, [r5, #0]
		}

		/* When we get here the low priority task should have again written to the
		queue. */
		if( ulValue != 0x01234567 )
    2810:	9901      	ldr	r1, [sp, #4]
    2812:	4b12      	ldr	r3, [pc, #72]	; (285c <prvHighestPriorityPeekTask+0xb0>)
    2814:	4299      	cmp	r1, r3
    2816:	d000      	beq.n	281a <prvHighestPriorityPeekTask+0x6e>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    2818:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    281a:	1c30      	adds	r0, r6, #0
    281c:	f000 fdc8 	bl	33b0 <uxQueueMessagesWaiting>
    2820:	2801      	cmp	r0, #1
    2822:	d000      	beq.n	2826 <prvHighestPriorityPeekTask+0x7a>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    2824:	602c      	str	r4, [r5, #0]

		/* We only peeked the data, so suspending ourselves now should enable
		the high priority task to also peek the data.  The high priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
    2826:	2000      	movs	r0, #0
    2828:	f001 fb5a 	bl	3ee0 <vTaskSuspend>


		/* This time we are going to do the same as the above test, but the
		high priority task is going to receive the data, rather than peek it.
		This means that the medium priority task should never peek the value. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    282c:	2201      	movs	r2, #1
    282e:	1c30      	adds	r0, r6, #0
    2830:	a901      	add	r1, sp, #4
    2832:	4252      	negs	r2, r2
    2834:	2301      	movs	r3, #1
    2836:	f000 fcd7 	bl	31e8 <xQueueGenericReceive>
    283a:	2801      	cmp	r0, #1
    283c:	d000      	beq.n	2840 <prvHighestPriorityPeekTask+0x94>
		{
			xErrorDetected = pdTRUE;
    283e:	602c      	str	r4, [r5, #0]
		}

		if( ulValue != 0xaabbaabb )
    2840:	9801      	ldr	r0, [sp, #4]
    2842:	4b07      	ldr	r3, [pc, #28]	; (2860 <prvHighestPriorityPeekTask+0xb4>)
    2844:	4298      	cmp	r0, r3
    2846:	d000      	beq.n	284a <prvHighestPriorityPeekTask+0x9e>
		{
			xErrorDetected = pdTRUE;
    2848:	602c      	str	r4, [r5, #0]
		}

		vTaskSuspend( NULL );		
    284a:	2000      	movs	r0, #0
    284c:	f001 fb48 	bl	3ee0 <vTaskSuspend>
	}
    2850:	e7b2      	b.n	27b8 <prvHighestPriorityPeekTask+0xc>
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	40000a28 	.word	0x40000a28
    2858:	11223344 	.word	0x11223344
    285c:	01234567 	.word	0x01234567
    2860:	aabbaabb 	.word	0xaabbaabb

00002864 <prvHighPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
    2864:	b5f0      	push	{r4, r5, r6, r7, lr}
    2866:	4d17      	ldr	r5, [pc, #92]	; (28c4 <prvHighPriorityPeekTask+0x60>)
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    2868:	4f17      	ldr	r7, [pc, #92]	; (28c8 <prvHighPriorityPeekTask+0x64>)
	}
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
    286a:	b083      	sub	sp, #12
    286c:	1c06      	adds	r6, r0, #0
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the medium priority task to execute.  Both the high
		and highest priority tasks will then be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    286e:	2401      	movs	r4, #1
    2870:	2201      	movs	r2, #1
    2872:	1c30      	adds	r0, r6, #0
    2874:	a901      	add	r1, sp, #4
    2876:	4252      	negs	r2, r2
    2878:	2301      	movs	r3, #1
    287a:	f000 fcb5 	bl	31e8 <xQueueGenericReceive>
    287e:	2801      	cmp	r0, #1
    2880:	d000      	beq.n	2884 <prvHighPriorityPeekTask+0x20>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    2882:	602c      	str	r4, [r5, #0]
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    2884:	9b01      	ldr	r3, [sp, #4]
    2886:	42bb      	cmp	r3, r7
    2888:	d000      	beq.n	288c <prvHighPriorityPeekTask+0x28>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    288a:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    288c:	1c30      	adds	r0, r6, #0
    288e:	f000 fd8f 	bl	33b0 <uxQueueMessagesWaiting>
    2892:	2801      	cmp	r0, #1
    2894:	d000      	beq.n	2898 <prvHighPriorityPeekTask+0x34>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    2896:	602c      	str	r4, [r5, #0]

		/* We only peeked the data, so suspending ourselves now should enable
		the medium priority task to also peek the data.  The medium priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
    2898:	2000      	movs	r0, #0
    289a:	f001 fb21 	bl	3ee0 <vTaskSuspend>


		/* This time we are going actually receive the value, so the medium
		priority task will never peek the data - we removed it from the queue. */
		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    289e:	2201      	movs	r2, #1
    28a0:	1c30      	adds	r0, r6, #0
    28a2:	a901      	add	r1, sp, #4
    28a4:	4252      	negs	r2, r2
    28a6:	2300      	movs	r3, #0
    28a8:	f000 fc9e 	bl	31e8 <xQueueGenericReceive>
    28ac:	2801      	cmp	r0, #1
    28ae:	d000      	beq.n	28b2 <prvHighPriorityPeekTask+0x4e>
		{
			xErrorDetected = pdTRUE;
    28b0:	602c      	str	r4, [r5, #0]
		}

		if( ulValue != 0xaabbaabb )
    28b2:	9801      	ldr	r0, [sp, #4]
    28b4:	4b05      	ldr	r3, [pc, #20]	; (28cc <prvHighPriorityPeekTask+0x68>)
    28b6:	4298      	cmp	r0, r3
    28b8:	d000      	beq.n	28bc <prvHighPriorityPeekTask+0x58>
		{
			xErrorDetected = pdTRUE;
    28ba:	602c      	str	r4, [r5, #0]
		}

		vTaskSuspend( NULL );				
    28bc:	2000      	movs	r0, #0
    28be:	f001 fb0f 	bl	3ee0 <vTaskSuspend>
	}
    28c2:	e7d5      	b.n	2870 <prvHighPriorityPeekTask+0xc>
    28c4:	40000a28 	.word	0x40000a28
    28c8:	01234567 	.word	0x01234567
    28cc:	aabbaabb 	.word	0xaabbaabb

000028d0 <prvMediumPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
    28d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28d2:	4647      	mov	r7, r8
    28d4:	b480      	push	{r7}
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    28d6:	4b11      	ldr	r3, [pc, #68]	; (291c <prvMediumPriorityPeekTask+0x4c>)
    28d8:	4d11      	ldr	r5, [pc, #68]	; (2920 <prvMediumPriorityPeekTask+0x50>)
    28da:	4e12      	ldr	r6, [pc, #72]	; (2924 <prvMediumPriorityPeekTask+0x54>)
	}
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
    28dc:	b082      	sub	sp, #8
    28de:	1c07      	adds	r7, r0, #0
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    28e0:	2401      	movs	r4, #1
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    28e2:	4698      	mov	r8, r3
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    28e4:	2201      	movs	r2, #1
    28e6:	1c38      	adds	r0, r7, #0
    28e8:	a901      	add	r1, sp, #4
    28ea:	4252      	negs	r2, r2
    28ec:	2301      	movs	r3, #1
    28ee:	f000 fc7b 	bl	31e8 <xQueueGenericReceive>
    28f2:	2801      	cmp	r0, #1
    28f4:	d000      	beq.n	28f8 <prvMediumPriorityPeekTask+0x28>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    28f6:	602c      	str	r4, [r5, #0]
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    28f8:	9801      	ldr	r0, [sp, #4]
    28fa:	4540      	cmp	r0, r8
    28fc:	d000      	beq.n	2900 <prvMediumPriorityPeekTask+0x30>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    28fe:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    2900:	1c38      	adds	r0, r7, #0
    2902:	f000 fd55 	bl	33b0 <uxQueueMessagesWaiting>
    2906:	2801      	cmp	r0, #1
    2908:	d000      	beq.n	290c <prvMediumPriorityPeekTask+0x3c>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    290a:	602c      	str	r4, [r5, #0]
		}

		/* Just so we know the test is still running. */
		ulLoopCounter++;
    290c:	6831      	ldr	r1, [r6, #0]
    290e:	3101      	adds	r1, #1
    2910:	6031      	str	r1, [r6, #0]

		/* Now we can suspend ourselves so the low priority task can execute
		again. */
		vTaskSuspend( NULL );
    2912:	2000      	movs	r0, #0
    2914:	f001 fae4 	bl	3ee0 <vTaskSuspend>
	}
    2918:	e7e4      	b.n	28e4 <prvMediumPriorityPeekTask+0x14>
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	01234567 	.word	0x01234567
    2920:	40000a28 	.word	0x40000a28
    2924:	40000a2c 	.word	0x40000a2c

00002928 <prvLowPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
    2928:	b5f0      	push	{r4, r5, r6, r7, lr}
    292a:	465f      	mov	r7, fp
    292c:	4656      	mov	r6, sl
    292e:	464d      	mov	r5, r9
    2930:	4644      	mov	r4, r8
    2932:	b4f0      	push	{r4, r5, r6, r7}
    2934:	4b31      	ldr	r3, [pc, #196]	; (29fc <prvLowPriorityPeekTask+0xd4>)
    2936:	4698      	mov	r8, r3

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest 
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
    2938:	4b31      	ldr	r3, [pc, #196]	; (2a00 <prvLowPriorityPeekTask+0xd8>)
    293a:	469b      	mov	fp, r3
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    293c:	2300      	movs	r3, #0
    293e:	469a      	mov	sl, r3
    2940:	4c30      	ldr	r4, [pc, #192]	; (2a04 <prvLowPriorityPeekTask+0xdc>)
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2942:	3301      	adds	r3, #1
    2944:	4e30      	ldr	r6, [pc, #192]	; (2a08 <prvLowPriorityPeekTask+0xe0>)
    2946:	4d31      	ldr	r5, [pc, #196]	; (2a0c <prvLowPriorityPeekTask+0xe4>)
	}
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
    2948:	b083      	sub	sp, #12
    294a:	1c07      	adds	r7, r0, #0
		ulValue = 0x11223344;
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    294c:	4699      	mov	r9, r3

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest 
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
    294e:	465b      	mov	r3, fp
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2950:	2200      	movs	r2, #0

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest 
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
    2952:	9301      	str	r3, [sp, #4]
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2954:	1c38      	adds	r0, r7, #0
    2956:	a901      	add	r1, sp, #4
    2958:	1c13      	adds	r3, r2, #0
    295a:	f000 fb75 	bl	3048 <xQueueGenericSend>
    295e:	2801      	cmp	r0, #1
    2960:	d001      	beq.n	2966 <prvLowPriorityPeekTask+0x3e>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2962:	464b      	mov	r3, r9
    2964:	6023      	str	r3, [r4, #0]
		}

		/* By the time we get here the data should have been removed from
		the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    2966:	1c38      	adds	r0, r7, #0
    2968:	f000 fd22 	bl	33b0 <uxQueueMessagesWaiting>
    296c:	2800      	cmp	r0, #0
    296e:	d001      	beq.n	2974 <prvLowPriorityPeekTask+0x4c>
		{
			xErrorDetected = pdTRUE;
    2970:	464b      	mov	r3, r9
    2972:	6023      	str	r3, [r4, #0]
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
    2974:	4826      	ldr	r0, [pc, #152]	; (2a10 <prvLowPriorityPeekTask+0xe8>)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2976:	2200      	movs	r2, #0
			xErrorDetected = pdTRUE;
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
    2978:	9001      	str	r0, [sp, #4]
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    297a:	a901      	add	r1, sp, #4
    297c:	1c38      	adds	r0, r7, #0
    297e:	1c13      	adds	r3, r2, #0
    2980:	f000 fb62 	bl	3048 <xQueueGenericSend>
    2984:	2801      	cmp	r0, #1
    2986:	d001      	beq.n	298c <prvLowPriorityPeekTask+0x64>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2988:	464b      	mov	r3, r9
    298a:	6023      	str	r3, [r4, #0]
		}

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
    298c:	4653      	mov	r3, sl
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    298e:	1c38      	adds	r0, r7, #0
    2990:	a901      	add	r1, sp, #4
    2992:	4652      	mov	r2, sl
			xErrorDetected = pdTRUE;
		}

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
    2994:	9301      	str	r3, [sp, #4]
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2996:	f000 fc27 	bl	31e8 <xQueueGenericReceive>
    299a:	2801      	cmp	r0, #1
    299c:	d001      	beq.n	29a2 <prvLowPriorityPeekTask+0x7a>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
    299e:	464b      	mov	r3, r9
    29a0:	6023      	str	r3, [r4, #0]
			/* We did not receive the expected value. */
		}
		
		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
    29a2:	200a      	movs	r0, #10
    29a4:	f001 f9c4 	bl	3d30 <vTaskDelay>
		/* Unsuspend the other tasks so we can repeat the test - this time
		however not all the other tasks will peek the data as the high
		priority task is actually going to remove it from the queue.  Send
		to front is used just to be different.  As the queue is empty it
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
    29a8:	4643      	mov	r3, r8
    29aa:	6818      	ldr	r0, [r3, #0]
    29ac:	f000 ff18 	bl	37e0 <vTaskResume>
		vTaskResume( xHighPriorityTask );
    29b0:	6830      	ldr	r0, [r6, #0]
    29b2:	f000 ff15 	bl	37e0 <vTaskResume>
		vTaskResume( xHighestPriorityTask );
    29b6:	6828      	ldr	r0, [r5, #0]
    29b8:	f000 ff12 	bl	37e0 <vTaskResume>

		ulValue = 0xaabbaabb;
    29bc:	4915      	ldr	r1, [pc, #84]	; (2a14 <prvLowPriorityPeekTask+0xec>)
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    29be:	1c38      	adds	r0, r7, #0
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
		vTaskResume( xHighPriorityTask );
		vTaskResume( xHighestPriorityTask );

		ulValue = 0xaabbaabb;
    29c0:	9101      	str	r1, [sp, #4]
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    29c2:	2200      	movs	r2, #0
    29c4:	a901      	add	r1, sp, #4
    29c6:	2301      	movs	r3, #1
    29c8:	f000 fb3e 	bl	3048 <xQueueGenericSend>
    29cc:	2801      	cmp	r0, #1
    29ce:	d001      	beq.n	29d4 <prvLowPriorityPeekTask+0xac>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    29d0:	464b      	mov	r3, r9
    29d2:	6023      	str	r3, [r4, #0]
		}

		/* This time we should find that the queue is empty.  The high priority
		task actually removed the data rather than just peeking it. */
		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
    29d4:	1c38      	adds	r0, r7, #0
    29d6:	a901      	add	r1, sp, #4
    29d8:	2200      	movs	r2, #0
    29da:	2301      	movs	r3, #1
    29dc:	f000 fc04 	bl	31e8 <xQueueGenericReceive>
    29e0:	2800      	cmp	r0, #0
    29e2:	d001      	beq.n	29e8 <prvLowPriorityPeekTask+0xc0>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
    29e4:	464b      	mov	r3, r9
    29e6:	6023      	str	r3, [r4, #0]
		}

		/* Unsuspend the highest and high priority tasks so we can go back
		and repeat the whole thing.  The medium priority task should not be
		suspended as it was not able to peek the data in this last case. */
		vTaskResume( xHighPriorityTask );
    29e8:	6830      	ldr	r0, [r6, #0]
    29ea:	f000 fef9 	bl	37e0 <vTaskResume>
		vTaskResume( xHighestPriorityTask );		
    29ee:	6828      	ldr	r0, [r5, #0]
    29f0:	f000 fef6 	bl	37e0 <vTaskResume>

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
    29f4:	200a      	movs	r0, #10
    29f6:	f001 f99b 	bl	3d30 <vTaskDelay>
	}
    29fa:	e7a8      	b.n	294e <prvLowPriorityPeekTask+0x26>
    29fc:	40000a30 	.word	0x40000a30
    2a00:	11223344 	.word	0x11223344
    2a04:	40000a28 	.word	0x40000a28
    2a08:	40000a24 	.word	0x40000a24
    2a0c:	40000a20 	.word	0x40000a20
    2a10:	01234567 	.word	0x01234567
    2a14:	aabbaabb 	.word	0xaabbaabb

00002a18 <vStartQueuePeekTasks>:
/* Handles to the test tasks. */
xTaskHandle xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
/*-----------------------------------------------------------*/

void vStartQueuePeekTasks( void )
{
    2a18:	b530      	push	{r4, r5, lr}
    2a1a:	b085      	sub	sp, #20
xQueueHandle xQueue;

	/* Create the queue that we are going to use for the test/demo. */
	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( unsigned portLONG ) );
    2a1c:	2104      	movs	r1, #4
    2a1e:	2005      	movs	r0, #5
    2a20:	f000 fad6 	bl	2fd0 <xQueueCreate>
    2a24:	1c05      	adds	r5, r0, #0
	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "QPeek_Test_Queue" );

	/* Create the demo tasks and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is declared
	on the stack here. */
	xTaskCreate( prvLowPriorityPeekTask, ( signed portCHAR * )"PeekL", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekLOW_PRIORITY, NULL );
    2a26:	2400      	movs	r4, #0
    2a28:	1c2b      	adds	r3, r5, #0
    2a2a:	4918      	ldr	r1, [pc, #96]	; (2a8c <vStartQueuePeekTasks+0x74>)
    2a2c:	2268      	movs	r2, #104	; 0x68
    2a2e:	4818      	ldr	r0, [pc, #96]	; (2a90 <vStartQueuePeekTasks+0x78>)
    2a30:	9400      	str	r4, [sp, #0]
    2a32:	9401      	str	r4, [sp, #4]
    2a34:	9402      	str	r4, [sp, #8]
    2a36:	9403      	str	r4, [sp, #12]
    2a38:	f000 fd30 	bl	349c <xTaskGenericCreate>
	xTaskCreate( prvMediumPriorityPeekTask, ( signed portCHAR * )"PeekM", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekMEDIUM_PRIORITY, &xMediumPriorityTask );
    2a3c:	4b15      	ldr	r3, [pc, #84]	; (2a94 <vStartQueuePeekTasks+0x7c>)
    2a3e:	2001      	movs	r0, #1
    2a40:	9000      	str	r0, [sp, #0]
    2a42:	9301      	str	r3, [sp, #4]
    2a44:	4914      	ldr	r1, [pc, #80]	; (2a98 <vStartQueuePeekTasks+0x80>)
    2a46:	1c2b      	adds	r3, r5, #0
    2a48:	2268      	movs	r2, #104	; 0x68
    2a4a:	4814      	ldr	r0, [pc, #80]	; (2a9c <vStartQueuePeekTasks+0x84>)
    2a4c:	9402      	str	r4, [sp, #8]
    2a4e:	9403      	str	r4, [sp, #12]
    2a50:	f000 fd24 	bl	349c <xTaskGenericCreate>
	xTaskCreate( prvHighPriorityPeekTask, ( signed portCHAR * )"PeekH1", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGH_PRIORITY, &xHighPriorityTask );
    2a54:	4912      	ldr	r1, [pc, #72]	; (2aa0 <vStartQueuePeekTasks+0x88>)
    2a56:	2202      	movs	r2, #2
    2a58:	1c2b      	adds	r3, r5, #0
    2a5a:	9200      	str	r2, [sp, #0]
    2a5c:	9101      	str	r1, [sp, #4]
    2a5e:	2268      	movs	r2, #104	; 0x68
    2a60:	4910      	ldr	r1, [pc, #64]	; (2aa4 <vStartQueuePeekTasks+0x8c>)
    2a62:	4811      	ldr	r0, [pc, #68]	; (2aa8 <vStartQueuePeekTasks+0x90>)
    2a64:	9402      	str	r4, [sp, #8]
    2a66:	9403      	str	r4, [sp, #12]
    2a68:	f000 fd18 	bl	349c <xTaskGenericCreate>
	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
    2a6c:	4b0f      	ldr	r3, [pc, #60]	; (2aac <vStartQueuePeekTasks+0x94>)
    2a6e:	2003      	movs	r0, #3
    2a70:	9000      	str	r0, [sp, #0]
    2a72:	9301      	str	r3, [sp, #4]
    2a74:	490e      	ldr	r1, [pc, #56]	; (2ab0 <vStartQueuePeekTasks+0x98>)
    2a76:	1c2b      	adds	r3, r5, #0
    2a78:	2268      	movs	r2, #104	; 0x68
    2a7a:	480e      	ldr	r0, [pc, #56]	; (2ab4 <vStartQueuePeekTasks+0x9c>)
    2a7c:	9402      	str	r4, [sp, #8]
    2a7e:	9403      	str	r4, [sp, #12]
    2a80:	f000 fd0c 	bl	349c <xTaskGenericCreate>
}
    2a84:	b005      	add	sp, #20
    2a86:	bc30      	pop	{r4, r5}
    2a88:	bc01      	pop	{r0}
    2a8a:	4700      	bx	r0
    2a8c:	0000e8b0 	.word	0x0000e8b0
    2a90:	00002929 	.word	0x00002929
    2a94:	40000a30 	.word	0x40000a30
    2a98:	0000e8b8 	.word	0x0000e8b8
    2a9c:	000028d1 	.word	0x000028d1
    2aa0:	40000a24 	.word	0x40000a24
    2aa4:	0000e8c0 	.word	0x0000e8c0
    2aa8:	00002865 	.word	0x00002865
    2aac:	40000a20 	.word	0x40000a20
    2ab0:	0000e8c8 	.word	0x0000e8c8
    2ab4:	000027ad 	.word	0x000027ad

00002ab8 <xAreQueuePeekTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreQueuePeekTasksStillRunning( void )
{
    2ab8:	b500      	push	{lr}
static unsigned portLONG ulLastLoopCounter = 0;

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
    2aba:	4a09      	ldr	r2, [pc, #36]	; (2ae0 <xAreQueuePeekTasksStillRunning+0x28>)
    2abc:	4b09      	ldr	r3, [pc, #36]	; (2ae4 <xAreQueuePeekTasksStillRunning+0x2c>)
    2abe:	6811      	ldr	r1, [r2, #0]
    2ac0:	6818      	ldr	r0, [r3, #0]
    2ac2:	4288      	cmp	r0, r1
    2ac4:	d007      	beq.n	2ad6 <xAreQueuePeekTasksStillRunning+0x1e>
    2ac6:	4908      	ldr	r1, [pc, #32]	; (2ae8 <xAreQueuePeekTasksStillRunning+0x30>)
	{
		xErrorDetected = pdTRUE;
	}

	ulLastLoopCounter = ulLoopCounter;
    2ac8:	6812      	ldr	r2, [r2, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return !xErrorDetected;
    2aca:	6808      	ldr	r0, [r1, #0]
	if( ulLastLoopCounter == ulLoopCounter )
	{
		xErrorDetected = pdTRUE;
	}

	ulLastLoopCounter = ulLoopCounter;
    2acc:	601a      	str	r2, [r3, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return !xErrorDetected;
    2ace:	4243      	negs	r3, r0
    2ad0:	4158      	adcs	r0, r3
}
    2ad2:	bc02      	pop	{r1}
    2ad4:	4708      	bx	r1

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
	{
		xErrorDetected = pdTRUE;
    2ad6:	4904      	ldr	r1, [pc, #16]	; (2ae8 <xAreQueuePeekTasksStillRunning+0x30>)
    2ad8:	2001      	movs	r0, #1
    2ada:	6008      	str	r0, [r1, #0]
    2adc:	e7f4      	b.n	2ac8 <xAreQueuePeekTasksStillRunning+0x10>
    2ade:	46c0      	nop			; (mov r8, r8)
    2ae0:	40000a2c 	.word	0x40000a2c
    2ae4:	40000a1c 	.word	0x40000a1c
    2ae8:	40000a28 	.word	0x40000a28

00002aec <vQueueReceiveWhenSuspendedTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
    2aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aee:	464f      	mov	r7, r9
    2af0:	4646      	mov	r6, r8
    2af2:	b4c0      	push	{r6, r7}
    2af4:	4a13      	ldr	r2, [pc, #76]	; (2b44 <vQueueReceiveWhenSuspendedTask+0x58>)
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
				}
				if( xTaskResumeAll() )
				{
					xSuspendedQueueReceiveError = pdTRUE;
    2af6:	2301      	movs	r3, #1
    2af8:	4e13      	ldr	r6, [pc, #76]	; (2b48 <vQueueReceiveWhenSuspendedTask+0x5c>)
    2afa:	4d14      	ldr	r5, [pc, #80]	; (2b4c <vQueueReceiveWhenSuspendedTask+0x60>)
    2afc:	4f14      	ldr	r7, [pc, #80]	; (2b50 <vQueueReceiveWhenSuspendedTask+0x64>)
    2afe:	4691      	mov	r9, r2
    2b00:	4698      	mov	r8, r3
			/* Suspending the scheduler here is fairly pointless and 
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
    2b02:	f000 ff1d 	bl	3940 <vTaskSuspendAll>
			{
				vTaskSuspendAll();
    2b06:	f000 ff1b 	bl	3940 <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
    2b0a:	2200      	movs	r2, #0
    2b0c:	6830      	ldr	r0, [r6, #0]
    2b0e:	1c29      	adds	r1, r5, #0
    2b10:	1c13      	adds	r3, r2, #0
    2b12:	f000 fb69 	bl	31e8 <xQueueGenericReceive>
    2b16:	1c04      	adds	r4, r0, #0
				}
				if( xTaskResumeAll() )
    2b18:	f000 ffd0 	bl	3abc <xTaskResumeAll>
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d001      	beq.n	2b24 <vQueueReceiveWhenSuspendedTask+0x38>
				{
					xSuspendedQueueReceiveError = pdTRUE;
    2b20:	4642      	mov	r2, r8
    2b22:	603a      	str	r2, [r7, #0]
				}
			}
			xTaskResumeAll();
    2b24:	f000 ffca 	bl	3abc <xTaskResumeAll>
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
    2b28:	2c00      	cmp	r4, #0
    2b2a:	d0ea      	beq.n	2b02 <vQueueReceiveWhenSuspendedTask+0x16>

		if( ulReceivedValue != ulExpectedValue )
    2b2c:	464a      	mov	r2, r9
    2b2e:	6813      	ldr	r3, [r2, #0]
    2b30:	6828      	ldr	r0, [r5, #0]
    2b32:	4298      	cmp	r0, r3
    2b34:	d001      	beq.n	2b3a <vQueueReceiveWhenSuspendedTask+0x4e>
		{
			xSuspendedQueueReceiveError = pdTRUE;
    2b36:	4642      	mov	r2, r8
    2b38:	603a      	str	r2, [r7, #0]
		}

		++ulExpectedValue;
    2b3a:	3301      	adds	r3, #1
    2b3c:	464a      	mov	r2, r9
    2b3e:	6013      	str	r3, [r2, #0]
    2b40:	e7df      	b.n	2b02 <vQueueReceiveWhenSuspendedTask+0x16>
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	40000a54 	.word	0x40000a54
    2b48:	40000a34 	.word	0x40000a34
    2b4c:	40000a58 	.word	0x40000a58
    2b50:	40000a48 	.word	0x40000a48

00002b54 <vQueueSendWhenSuspendedTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
    2b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b56:	4d0c      	ldr	r5, [pc, #48]	; (2b88 <vQueueSendWhenSuspendedTask+0x34>)
    2b58:	4c0c      	ldr	r4, [pc, #48]	; (2b8c <vQueueSendWhenSuspendedTask+0x38>)
    2b5a:	4e0d      	ldr	r6, [pc, #52]	; (2b90 <vQueueSendWhenSuspendedTask+0x3c>)
		vTaskSuspendAll();
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
			{
				xSuspendedQueueSendError = pdTRUE;
    2b5c:	2701      	movs	r7, #1
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
    2b5e:	f000 feef 	bl	3940 <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
    2b62:	2200      	movs	r2, #0
    2b64:	6828      	ldr	r0, [r5, #0]
    2b66:	1c21      	adds	r1, r4, #0
    2b68:	1c13      	adds	r3, r2, #0
    2b6a:	f000 fa6d 	bl	3048 <xQueueGenericSend>
    2b6e:	2801      	cmp	r0, #1
    2b70:	d000      	beq.n	2b74 <vQueueSendWhenSuspendedTask+0x20>
			{
				xSuspendedQueueSendError = pdTRUE;
    2b72:	6037      	str	r7, [r6, #0]
			}
		}
		xTaskResumeAll();
    2b74:	f000 ffa2 	bl	3abc <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
    2b78:	2080      	movs	r0, #128	; 0x80
    2b7a:	f001 f8d9 	bl	3d30 <vTaskDelay>

		++ulValueToSend;
    2b7e:	6823      	ldr	r3, [r4, #0]
    2b80:	3301      	adds	r3, #1
    2b82:	6023      	str	r3, [r4, #0]
	}
    2b84:	e7eb      	b.n	2b5e <vQueueSendWhenSuspendedTask+0xa>
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	40000a34 	.word	0x40000a34
    2b8c:	40000a4c 	.word	0x40000a4c
    2b90:	40000a40 	.word	0x40000a40

00002b94 <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself. 
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
    2b94:	b510      	push	{r4, lr}
    2b96:	1c04      	adds	r4, r0, #0
	the task. */
	pulCounter = ( unsigned long * ) pvParameters;

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
    2b98:	2000      	movs	r0, #0
    2b9a:	f001 f9a1 	bl	3ee0 <vTaskSuspend>
    2b9e:	6823      	ldr	r3, [r4, #0]
    2ba0:	2201      	movs	r2, #1
    2ba2:	401a      	ands	r2, r3

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
    2ba4:	3301      	adds	r3, #1
		
		if( *pulCounter >= priMAX_COUNT )
    2ba6:	2bfe      	cmp	r3, #254	; 0xfe
    2ba8:	d807      	bhi.n	2bba <vLimitedIncrementTask+0x26>
    2baa:	2a00      	cmp	r2, #0
    2bac:	d002      	beq.n	2bb4 <vLimitedIncrementTask+0x20>
	vTaskSuspend( NULL );

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
    2bae:	3301      	adds	r3, #1
		
		if( *pulCounter >= priMAX_COUNT )
    2bb0:	2bfe      	cmp	r3, #254	; 0xfe
    2bb2:	d802      	bhi.n	2bba <vLimitedIncrementTask+0x26>
	vTaskSuspend( NULL );

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
    2bb4:	3302      	adds	r3, #2
		
		if( *pulCounter >= priMAX_COUNT )
    2bb6:	2bfe      	cmp	r3, #254	; 0xfe
    2bb8:	d9fc      	bls.n	2bb4 <vLimitedIncrementTask+0x20>
    2bba:	6023      	str	r3, [r4, #0]
		{
			vTaskSuspend( NULL );
    2bbc:	2000      	movs	r0, #0
    2bbe:	f001 f98f 	bl	3ee0 <vTaskSuspend>
    2bc2:	e7ec      	b.n	2b9e <vLimitedIncrementTask+0xa>

00002bc4 <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
    2bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bc6:	4657      	mov	r7, sl
    2bc8:	464e      	mov	r6, r9
    2bca:	4645      	mov	r5, r8
    2bcc:	b4e0      	push	{r5, r6, r7}
    2bce:	4b48      	ldr	r3, [pc, #288]	; (2cf0 <vCounterControlTask+0x12c>)
unsigned long ulLastCounter;
short sLoops;
short sError = pdFALSE;
    2bd0:	2200      	movs	r2, #0
    2bd2:	4690      	mov	r8, r2
    2bd4:	4c47      	ldr	r4, [pc, #284]	; (2cf4 <vCounterControlTask+0x130>)
    2bd6:	4d48      	ldr	r5, [pc, #288]	; (2cf8 <vCounterControlTask+0x134>)
    2bd8:	4e48      	ldr	r6, [pc, #288]	; (2cfc <vCounterControlTask+0x138>)
    2bda:	469a      	mov	sl, r3
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( unsigned long ) 0;
    2bdc:	4691      	mov	r9, r2
    2bde:	e055      	b.n	2c8c <vCounterControlTask+0xc8>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2be0:	f000 ff6c 	bl	3abc <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2be4:	6828      	ldr	r0, [r5, #0]
    2be6:	f001 f97b 	bl	3ee0 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2bea:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2bec:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2bee:	f000 fdf7 	bl	37e0 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2bf2:	2080      	movs	r0, #128	; 0x80
    2bf4:	f001 f89c 	bl	3d30 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2bf8:	f000 fea2 	bl	3940 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2bfc:	6823      	ldr	r3, [r4, #0]
    2bfe:	429f      	cmp	r7, r3
    2c00:	d06c      	beq.n	2cdc <vCounterControlTask+0x118>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2c02:	f000 ff5b 	bl	3abc <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2c06:	6828      	ldr	r0, [r5, #0]
    2c08:	f001 f96a 	bl	3ee0 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2c0c:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2c0e:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2c10:	f000 fde6 	bl	37e0 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2c14:	2080      	movs	r0, #128	; 0x80
    2c16:	f001 f88b 	bl	3d30 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2c1a:	f000 fe91 	bl	3940 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2c1e:	6823      	ldr	r3, [r4, #0]
    2c20:	429f      	cmp	r7, r3
    2c22:	d058      	beq.n	2cd6 <vCounterControlTask+0x112>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2c24:	f000 ff4a 	bl	3abc <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2c28:	6828      	ldr	r0, [r5, #0]
    2c2a:	f001 f959 	bl	3ee0 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2c2e:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2c30:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2c32:	f000 fdd5 	bl	37e0 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2c36:	2080      	movs	r0, #128	; 0x80
    2c38:	f001 f87a 	bl	3d30 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2c3c:	f000 fe80 	bl	3940 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2c40:	6823      	ldr	r3, [r4, #0]
    2c42:	429f      	cmp	r7, r3
    2c44:	d04d      	beq.n	2ce2 <vCounterControlTask+0x11e>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2c46:	f000 ff39 	bl	3abc <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2c4a:	6828      	ldr	r0, [r5, #0]
    2c4c:	f001 f948 	bl	3ee0 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2c50:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2c52:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2c54:	f000 fdc4 	bl	37e0 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2c58:	2080      	movs	r0, #128	; 0x80
    2c5a:	f001 f869 	bl	3d30 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2c5e:	f000 fe6f 	bl	3940 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2c62:	6823      	ldr	r3, [r4, #0]
    2c64:	429f      	cmp	r7, r3
    2c66:	d033      	beq.n	2cd0 <vCounterControlTask+0x10c>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2c68:	f000 ff28 	bl	3abc <xTaskResumeAll>


		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared variable. */
		vTaskSuspend( xContinousIncrementHandle );
    2c6c:	6828      	ldr	r0, [r5, #0]
    2c6e:	f001 f937 	bl	3ee0 <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( unsigned long ) 0;
    2c72:	464a      	mov	r2, r9
    2c74:	6022      	str	r2, [r4, #0]

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
    2c76:	6830      	ldr	r0, [r6, #0]
    2c78:	f000 fdb2 	bl	37e0 <vTaskResume>

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
    2c7c:	6823      	ldr	r3, [r4, #0]
    2c7e:	2bff      	cmp	r3, #255	; 0xff
    2c80:	d018      	beq.n	2cb4 <vCounterControlTask+0xf0>
		{
			sError = pdTRUE;
    2c82:	2301      	movs	r3, #1
    2c84:	4698      	mov	r8, r3
				usCheckVariable++;
			portEXIT_CRITICAL();
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinousIncrementHandle );
    2c86:	6828      	ldr	r0, [r5, #0]
    2c88:	f000 fdaa 	bl	37e0 <vTaskResume>
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( unsigned long ) 0;
    2c8c:	464a      	mov	r2, r9
    2c8e:	6022      	str	r2, [r4, #0]
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2c90:	6828      	ldr	r0, [r5, #0]
    2c92:	f001 f925 	bl	3ee0 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2c96:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2c98:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2c9a:	f000 fda1 	bl	37e0 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2c9e:	2080      	movs	r0, #128	; 0x80
    2ca0:	f001 f846 	bl	3d30 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2ca4:	f000 fe4c 	bl	3940 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2ca8:	6823      	ldr	r3, [r4, #0]
    2caa:	429f      	cmp	r7, r3
    2cac:	d198      	bne.n	2be0 <vCounterControlTask+0x1c>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
    2cae:	2301      	movs	r3, #1
    2cb0:	4698      	mov	r8, r3
    2cb2:	e795      	b.n	2be0 <vCounterControlTask+0x1c>
		if( ulCounter != priMAX_COUNT )
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    2cb4:	3bff      	subs	r3, #255	; 0xff
    2cb6:	4598      	cmp	r8, r3
    2cb8:	d116      	bne.n	2ce8 <vCounterControlTask+0x124>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
    2cba:	f00a ffd1 	bl	dc60 <__vPortEnterCritical_from_thumb>
				usCheckVariable++;
    2cbe:	4652      	mov	r2, sl
    2cc0:	8817      	ldrh	r7, [r2, #0]
    2cc2:	3701      	adds	r7, #1
    2cc4:	0439      	lsls	r1, r7, #16
    2cc6:	0c08      	lsrs	r0, r1, #16
    2cc8:	8010      	strh	r0, [r2, #0]
			portEXIT_CRITICAL();
    2cca:	f00a ff91 	bl	dbf0 <__vPortExitCritical_from_thumb>
    2cce:	e7da      	b.n	2c86 <vCounterControlTask+0xc2>
			{
				if( ulLastCounter == ulCounter )
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
    2cd0:	2301      	movs	r3, #1
    2cd2:	4698      	mov	r8, r3
    2cd4:	e7c8      	b.n	2c68 <vCounterControlTask+0xa4>
    2cd6:	2301      	movs	r3, #1
    2cd8:	4698      	mov	r8, r3
    2cda:	e7a3      	b.n	2c24 <vCounterControlTask+0x60>
    2cdc:	2201      	movs	r2, #1
    2cde:	4690      	mov	r8, r2
    2ce0:	e78f      	b.n	2c02 <vCounterControlTask+0x3e>
    2ce2:	2201      	movs	r2, #1
    2ce4:	4690      	mov	r8, r2
    2ce6:	e7ae      	b.n	2c46 <vCounterControlTask+0x82>
		if( ulCounter != priMAX_COUNT )
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    2ce8:	2201      	movs	r2, #1
    2cea:	4690      	mov	r8, r2
    2cec:	e7cb      	b.n	2c86 <vCounterControlTask+0xc2>
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	40000a38 	.word	0x40000a38
    2cf4:	40000a44 	.word	0x40000a44
    2cf8:	40000a50 	.word	0x40000a50
    2cfc:	40000a3c 	.word	0x40000a3c

00002d00 <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
    2d00:	b570      	push	{r4, r5, r6, lr}
    2d02:	1c04      	adds	r4, r0, #0
	the task. */
	pulCounter = ( unsigned long * ) pvParameters;

	/* Query our priority so we can raise it when exclusive access to the 
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
    2d04:	2000      	movs	r0, #0
    2d06:	f000 fcf7 	bl	36f8 <uxTaskPriorityGet>
    2d0a:	1c05      	adds	r5, r0, #0
    2d0c:	1c46      	adds	r6, r0, #1

	for( ;; )
	{
		/* Raise our priority above the controller task to ensure a context
		switch does not occur while we are accessing this variable. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
    2d0e:	1c31      	adds	r1, r6, #0
    2d10:	2000      	movs	r0, #0
    2d12:	f000 fd03 	bl	371c <vTaskPrioritySet>
			( *pulCounter )++;		
    2d16:	6823      	ldr	r3, [r4, #0]
    2d18:	3301      	adds	r3, #1
    2d1a:	6023      	str	r3, [r4, #0]
		vTaskPrioritySet( NULL, uxOurPriority );
    2d1c:	2000      	movs	r0, #0
    2d1e:	1c29      	adds	r1, r5, #0
    2d20:	f000 fcfc 	bl	371c <vTaskPrioritySet>
    2d24:	e7f3      	b.n	2d0e <vContinuousIncrementTask+0xe>
    2d26:	46c0      	nop			; (mov r8, r8)

00002d28 <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
    2d28:	b530      	push	{r4, r5, lr}
    2d2a:	b085      	sub	sp, #20
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
    2d2c:	2104      	movs	r1, #4
    2d2e:	2001      	movs	r0, #1
    2d30:	f000 f94e 	bl	2fd0 <xQueueCreate>
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinousIncrementHandle );
    2d34:	4d1e      	ldr	r5, [pc, #120]	; (2db0 <vStartDynamicPriorityTasks+0x88>)
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
    2d36:	4a1f      	ldr	r2, [pc, #124]	; (2db4 <vStartDynamicPriorityTasks+0x8c>)
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinousIncrementHandle );
    2d38:	491f      	ldr	r1, [pc, #124]	; (2db8 <vStartDynamicPriorityTasks+0x90>)
    2d3a:	2400      	movs	r4, #0
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
    2d3c:	6010      	str	r0, [r2, #0]
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinousIncrementHandle );
    2d3e:	1c2b      	adds	r3, r5, #0
    2d40:	9101      	str	r1, [sp, #4]
    2d42:	2268      	movs	r2, #104	; 0x68
    2d44:	491d      	ldr	r1, [pc, #116]	; (2dbc <vStartDynamicPriorityTasks+0x94>)
    2d46:	481e      	ldr	r0, [pc, #120]	; (2dc0 <vStartDynamicPriorityTasks+0x98>)
    2d48:	9400      	str	r4, [sp, #0]
    2d4a:	9402      	str	r4, [sp, #8]
    2d4c:	9403      	str	r4, [sp, #12]
    2d4e:	f000 fba5 	bl	349c <xTaskGenericCreate>
	xTaskCreate( vLimitedIncrementTask, ( signed char * ) "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
    2d52:	4b1c      	ldr	r3, [pc, #112]	; (2dc4 <vStartDynamicPriorityTasks+0x9c>)
    2d54:	2001      	movs	r0, #1
    2d56:	9000      	str	r0, [sp, #0]
    2d58:	9301      	str	r3, [sp, #4]
    2d5a:	491b      	ldr	r1, [pc, #108]	; (2dc8 <vStartDynamicPriorityTasks+0xa0>)
    2d5c:	1c2b      	adds	r3, r5, #0
    2d5e:	2268      	movs	r2, #104	; 0x68
    2d60:	481a      	ldr	r0, [pc, #104]	; (2dcc <vStartDynamicPriorityTasks+0xa4>)
    2d62:	9402      	str	r4, [sp, #8]
    2d64:	9403      	str	r4, [sp, #12]
    2d66:	f000 fb99 	bl	349c <xTaskGenericCreate>
	xTaskCreate( vCounterControlTask, ( signed char * ) "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    2d6a:	1c23      	adds	r3, r4, #0
    2d6c:	4918      	ldr	r1, [pc, #96]	; (2dd0 <vStartDynamicPriorityTasks+0xa8>)
    2d6e:	2268      	movs	r2, #104	; 0x68
    2d70:	4818      	ldr	r0, [pc, #96]	; (2dd4 <vStartDynamicPriorityTasks+0xac>)
    2d72:	9400      	str	r4, [sp, #0]
    2d74:	9401      	str	r4, [sp, #4]
    2d76:	9402      	str	r4, [sp, #8]
    2d78:	9403      	str	r4, [sp, #12]
    2d7a:	f000 fb8f 	bl	349c <xTaskGenericCreate>
	xTaskCreate( vQueueSendWhenSuspendedTask, ( signed char * ) "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    2d7e:	1c23      	adds	r3, r4, #0
    2d80:	4915      	ldr	r1, [pc, #84]	; (2dd8 <vStartDynamicPriorityTasks+0xb0>)
    2d82:	2268      	movs	r2, #104	; 0x68
    2d84:	4815      	ldr	r0, [pc, #84]	; (2ddc <vStartDynamicPriorityTasks+0xb4>)
    2d86:	9400      	str	r4, [sp, #0]
    2d88:	9401      	str	r4, [sp, #4]
    2d8a:	9402      	str	r4, [sp, #8]
    2d8c:	9403      	str	r4, [sp, #12]
    2d8e:	f000 fb85 	bl	349c <xTaskGenericCreate>
	xTaskCreate( vQueueReceiveWhenSuspendedTask, ( signed char * ) "SUSP_RX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    2d92:	4913      	ldr	r1, [pc, #76]	; (2de0 <vStartDynamicPriorityTasks+0xb8>)
    2d94:	2268      	movs	r2, #104	; 0x68
    2d96:	1c23      	adds	r3, r4, #0
    2d98:	4812      	ldr	r0, [pc, #72]	; (2de4 <vStartDynamicPriorityTasks+0xbc>)
    2d9a:	9400      	str	r4, [sp, #0]
    2d9c:	9401      	str	r4, [sp, #4]
    2d9e:	9402      	str	r4, [sp, #8]
    2da0:	9403      	str	r4, [sp, #12]
    2da2:	f000 fb7b 	bl	349c <xTaskGenericCreate>
}
    2da6:	b005      	add	sp, #20
    2da8:	bc30      	pop	{r4, r5}
    2daa:	bc01      	pop	{r0}
    2dac:	4700      	bx	r0
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	40000a44 	.word	0x40000a44
    2db4:	40000a34 	.word	0x40000a34
    2db8:	40000a50 	.word	0x40000a50
    2dbc:	0000e8d0 	.word	0x0000e8d0
    2dc0:	00002d01 	.word	0x00002d01
    2dc4:	40000a3c 	.word	0x40000a3c
    2dc8:	0000e8d8 	.word	0x0000e8d8
    2dcc:	00002b95 	.word	0x00002b95
    2dd0:	0000e8e0 	.word	0x0000e8e0
    2dd4:	00002bc5 	.word	0x00002bc5
    2dd8:	0000e8e8 	.word	0x0000e8e8
    2ddc:	00002b55 	.word	0x00002b55
    2de0:	0000e8f0 	.word	0x0000e8f0
    2de4:	00002aed 	.word	0x00002aed

00002de8 <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )
{
    2de8:	b530      	push	{r4, r5, lr}
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    2dea:	4a0c      	ldr	r2, [pc, #48]	; (2e1c <xAreDynamicPriorityTasksStillRunning+0x34>)
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
    2dec:	490c      	ldr	r1, [pc, #48]	; (2e20 <xAreDynamicPriorityTasksStillRunning+0x38>)
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    2dee:	8813      	ldrh	r3, [r2, #0]
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
    2df0:	6808      	ldr	r0, [r1, #0]
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    2df2:	1c1d      	adds	r5, r3, #0
    2df4:	4b0b      	ldr	r3, [pc, #44]	; (2e24 <xAreDynamicPriorityTasksStillRunning+0x3c>)
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
	{
		xReturn = pdFALSE;
    2df6:	2100      	movs	r1, #0
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    2df8:	881c      	ldrh	r4, [r3, #0]
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
    2dfa:	2801      	cmp	r0, #1
    2dfc:	d002      	beq.n	2e04 <xAreDynamicPriorityTasksStillRunning+0x1c>
portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )
{
/* Keep a history of the check variables so we know if it has been incremented 
since the last call. */
static unsigned short usLastTaskCheck = ( unsigned short ) 0;
portBASE_TYPE xReturn = pdTRUE;
    2dfe:	1b29      	subs	r1, r5, r4
    2e00:	1e4c      	subs	r4, r1, #1
    2e02:	41a1      	sbcs	r1, r4
	if( xSuspendedQueueSendError == pdTRUE )
	{
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
    2e04:	4c08      	ldr	r4, [pc, #32]	; (2e28 <xAreDynamicPriorityTasksStillRunning+0x40>)
    2e06:	6825      	ldr	r5, [r4, #0]
	{
		xReturn = pdFALSE;
    2e08:	3d01      	subs	r5, #1
    2e0a:	1e6c      	subs	r4, r5, #1
    2e0c:	41a5      	sbcs	r5, r4
	}

	usLastTaskCheck = usCheckVariable;
    2e0e:	8812      	ldrh	r2, [r2, #0]
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
	{
		xReturn = pdFALSE;
    2e10:	4268      	negs	r0, r5
    2e12:	4008      	ands	r0, r1
	}

	usLastTaskCheck = usCheckVariable;
    2e14:	801a      	strh	r2, [r3, #0]
	return xReturn;
}
    2e16:	bc30      	pop	{r4, r5}
    2e18:	bc02      	pop	{r1}
    2e1a:	4708      	bx	r1
    2e1c:	40000a38 	.word	0x40000a38
    2e20:	40000a40 	.word	0x40000a40
    2e24:	40000a3a 	.word	0x40000a3a
    2e28:	40000a48 	.word	0x40000a48

00002e2c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2e2c:	1c01      	adds	r1, r0, #0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2e2e:	2301      	movs	r3, #1
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2e30:	3108      	adds	r1, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2e32:	425a      	negs	r2, r3
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );

	pxList->uxNumberOfItems = 0;
    2e34:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2e36:	6082      	str	r2, [r0, #8]
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2e38:	6041      	str	r1, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2e3a:	60c1      	str	r1, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2e3c:	6101      	str	r1, [r0, #16]

	pxList->uxNumberOfItems = 0;
    2e3e:	6003      	str	r3, [r0, #0]
}
    2e40:	4770      	bx	lr
    2e42:	46c0      	nop			; (mov r8, r8)

00002e44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2e44:	2300      	movs	r3, #0
    2e46:	6103      	str	r3, [r0, #16]
}
    2e48:	4770      	bx	lr
    2e4a:	46c0      	nop			; (mov r8, r8)

00002e4c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2e4c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2e4e:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2e50:	608b      	str	r3, [r1, #8]
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;

	pxNewListItem->pxNext = pxIndex->pxNext;
    2e52:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e54:	685a      	ldr	r2, [r3, #4]
    2e56:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e58:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2e5a:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2e5c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2e5e:	6803      	ldr	r3, [r0, #0]
    2e60:	3301      	adds	r3, #1
    2e62:	6003      	str	r3, [r0, #0]
}
    2e64:	4770      	bx	lr
    2e66:	46c0      	nop			; (mov r8, r8)

00002e68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2e68:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2e6a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as 
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2e6c:	1c63      	adds	r3, r4, #1
    2e6e:	d016      	beq.n	2e9e <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips. 
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2e70:	1c03      	adds	r3, r0, #0
    2e72:	3308      	adds	r3, #8
    2e74:	685a      	ldr	r2, [r3, #4]
    2e76:	6812      	ldr	r2, [r2, #0]
    2e78:	4294      	cmp	r4, r2
    2e7a:	d304      	bcc.n	2e86 <vListInsert+0x1e>
    2e7c:	685b      	ldr	r3, [r3, #4]
    2e7e:	685a      	ldr	r2, [r3, #4]
    2e80:	6812      	ldr	r2, [r2, #0]
    2e82:	4294      	cmp	r4, r2
    2e84:	d2fa      	bcs.n	2e7c <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2e86:	685c      	ldr	r4, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2e88:	6108      	str	r0, [r1, #16]
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e8a:	60a1      	str	r1, [r4, #8]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2e8c:	604c      	str	r4, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
    2e8e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e90:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
    2e92:	6803      	ldr	r3, [r0, #0]
    2e94:	3301      	adds	r3, #1
    2e96:	6003      	str	r3, [r0, #0]
}
    2e98:	bc10      	pop	{r4}
    2e9a:	bc01      	pop	{r0}
    2e9c:	4700      	bx	r0
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2e9e:	6903      	ldr	r3, [r0, #16]
    2ea0:	e7f1      	b.n	2e86 <vListInsert+0x1e>
    2ea2:	46c0      	nop			; (mov r8, r8)

00002ea4 <vListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2ea4:	b500      	push	{lr}
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2ea6:	6843      	ldr	r3, [r0, #4]
    2ea8:	6882      	ldr	r2, [r0, #8]
    2eaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2eac:	6882      	ldr	r2, [r0, #8]
    2eae:	6053      	str	r3, [r2, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2eb0:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2eb2:	6859      	ldr	r1, [r3, #4]
    2eb4:	4281      	cmp	r1, r0
    2eb6:	d006      	beq.n	2ec6 <vListRemove+0x22>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}

	pxItemToRemove->pvContainer = NULL;
    2eb8:	2100      	movs	r1, #0
    2eba:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
    2ebc:	6818      	ldr	r0, [r3, #0]
    2ebe:	3801      	subs	r0, #1
    2ec0:	6018      	str	r0, [r3, #0]
}
    2ec2:	bc01      	pop	{r0}
    2ec4:	4700      	bx	r0
	pxList = ( xList * ) pxItemToRemove->pvContainer;

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2ec6:	605a      	str	r2, [r3, #4]
    2ec8:	e7f6      	b.n	2eb8 <vListRemove+0x14>
    2eca:	46c0      	nop			; (mov r8, r8)

00002ecc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    2ecc:	b538      	push	{r3, r4, r5, lr}
    2ece:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2ed0:	f00a fec6 	bl	dc60 <__vPortEnterCritical_from_thumb>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2ed4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	dd19      	ble.n	2f0e <prvUnlockQueue+0x42>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    2eda:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2edc:	1c25      	adds	r5, r4, #0
    2ede:	3524      	adds	r5, #36	; 0x24
    2ee0:	2800      	cmp	r0, #0
    2ee2:	d108      	bne.n	2ef6 <prvUnlockQueue+0x2a>
    2ee4:	e013      	b.n	2f0e <prvUnlockQueue+0x42>
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
				}

				--( pxQueue->xTxLock );
    2ee6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2ee8:	3a01      	subs	r2, #1
    2eea:	64a2      	str	r2, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2eec:	2a00      	cmp	r2, #0
    2eee:	dd0e      	ble.n	2f0e <prvUnlockQueue+0x42>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    2ef0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2ef2:	2900      	cmp	r1, #0
    2ef4:	d00b      	beq.n	2f0e <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ef6:	1c28      	adds	r0, r5, #0
    2ef8:	f001 f862 	bl	3fc0 <xTaskRemoveFromEventList>
    2efc:	2800      	cmp	r0, #0
    2efe:	d0f2      	beq.n	2ee6 <prvUnlockQueue+0x1a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    2f00:	f001 f8da 	bl	40b8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    2f04:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2f06:	3a01      	subs	r2, #1
    2f08:	64a2      	str	r2, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2f0a:	2a00      	cmp	r2, #0
    2f0c:	dcf0      	bgt.n	2ef0 <prvUnlockQueue+0x24>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2f0e:	2001      	movs	r0, #1
    2f10:	4243      	negs	r3, r0
    2f12:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    2f14:	f00a fe6c 	bl	dbf0 <__vPortExitCritical_from_thumb>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2f18:	f00a fea2 	bl	dc60 <__vPortEnterCritical_from_thumb>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2f1c:	6c65      	ldr	r5, [r4, #68]	; 0x44
    2f1e:	2d00      	cmp	r5, #0
    2f20:	dd19      	ble.n	2f56 <prvUnlockQueue+0x8a>
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    2f22:	6921      	ldr	r1, [r4, #16]
    2f24:	1c25      	adds	r5, r4, #0
    2f26:	3510      	adds	r5, #16
    2f28:	2900      	cmp	r1, #0
    2f2a:	d108      	bne.n	2f3e <prvUnlockQueue+0x72>
    2f2c:	e013      	b.n	2f56 <prvUnlockQueue+0x8a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					vTaskMissedYield();
				}

				--( pxQueue->xRxLock );
    2f2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f30:	3b01      	subs	r3, #1
    2f32:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2f34:	2b00      	cmp	r3, #0
    2f36:	dd0e      	ble.n	2f56 <prvUnlockQueue+0x8a>
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    2f38:	6922      	ldr	r2, [r4, #16]
    2f3a:	2a00      	cmp	r2, #0
    2f3c:	d00b      	beq.n	2f56 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2f3e:	1c28      	adds	r0, r5, #0
    2f40:	f001 f83e 	bl	3fc0 <xTaskRemoveFromEventList>
    2f44:	2800      	cmp	r0, #0
    2f46:	d0f2      	beq.n	2f2e <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    2f48:	f001 f8b6 	bl	40b8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    2f4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f4e:	3b01      	subs	r3, #1
    2f50:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2f52:	2b00      	cmp	r3, #0
    2f54:	dcf0      	bgt.n	2f38 <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2f56:	2001      	movs	r0, #1
    2f58:	4245      	negs	r5, r0
    2f5a:	6465      	str	r5, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    2f5c:	f00a fe48 	bl	dbf0 <__vPortExitCritical_from_thumb>
}
    2f60:	bc38      	pop	{r3, r4, r5}
    2f62:	bc01      	pop	{r0}
    2f64:	4700      	bx	r0
    2f66:	46c0      	nop			; (mov r8, r8)

00002f68 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    2f68:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2f6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    2f6c:	1c04      	adds	r4, r0, #0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d108      	bne.n	2f84 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2f72:	6805      	ldr	r5, [r0, #0]
    2f74:	2d00      	cmp	r5, #0
    2f76:	d025      	beq.n	2fc4 <prvCopyDataToQueue+0x5c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2f7a:	3301      	adds	r3, #1
    2f7c:	63a3      	str	r3, [r4, #56]	; 0x38
}
    2f7e:	bc38      	pop	{r3, r4, r5}
    2f80:	bc01      	pop	{r0}
    2f82:	4700      	bx	r0
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    2f84:	2a00      	cmp	r2, #0
    2f86:	d10d      	bne.n	2fa4 <prvCopyDataToQueue+0x3c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2f88:	1c1a      	adds	r2, r3, #0
    2f8a:	6880      	ldr	r0, [r0, #8]
    2f8c:	f002 f93c 	bl	5208 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2f90:	68a1      	ldr	r1, [r4, #8]
    2f92:	6c20      	ldr	r0, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2f94:	6862      	ldr	r2, [r4, #4]
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2f96:	180b      	adds	r3, r1, r0
    2f98:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2f9a:	4293      	cmp	r3, r2
    2f9c:	d3ec      	bcc.n	2f78 <prvCopyDataToQueue+0x10>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2f9e:	6825      	ldr	r5, [r4, #0]
    2fa0:	60a5      	str	r5, [r4, #8]
    2fa2:	e7e9      	b.n	2f78 <prvCopyDataToQueue+0x10>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2fa4:	1c1a      	adds	r2, r3, #0
    2fa6:	68c0      	ldr	r0, [r0, #12]
    2fa8:	f002 f92e 	bl	5208 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    2fac:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2fae:	68e0      	ldr	r0, [r4, #12]
    2fb0:	4252      	negs	r2, r2
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    2fb2:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    2fb4:	1883      	adds	r3, r0, r2
    2fb6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    2fb8:	428b      	cmp	r3, r1
    2fba:	d2dd      	bcs.n	2f78 <prvCopyDataToQueue+0x10>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2fbc:	6861      	ldr	r1, [r4, #4]
    2fbe:	188d      	adds	r5, r1, r2
    2fc0:	60e5      	str	r5, [r4, #12]
    2fc2:	e7d9      	b.n	2f78 <prvCopyDataToQueue+0x10>
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2fc4:	6840      	ldr	r0, [r0, #4]
    2fc6:	f001 f8b9 	bl	413c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    2fca:	6065      	str	r5, [r4, #4]
    2fcc:	e7d4      	b.n	2f78 <prvCopyDataToQueue+0x10>
    2fce:	46c0      	nop			; (mov r8, r8)

00002fd0 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    2fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fd2:	4647      	mov	r7, r8
    2fd4:	b480      	push	{r7}
    2fd6:	1c04      	adds	r4, r0, #0
    2fd8:	1c0e      	adds	r6, r1, #0
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2fda:	1e05      	subs	r5, r0, #0
    2fdc:	d105      	bne.n	2fea <xQueueCreate+0x1a>
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
}
    2fde:	1c28      	adds	r0, r5, #0
    2fe0:	bc04      	pop	{r2}
    2fe2:	4690      	mov	r8, r2
    2fe4:	bcf0      	pop	{r4, r5, r6, r7}
    2fe6:	bc02      	pop	{r1}
    2fe8:	4708      	bx	r1
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2fea:	204c      	movs	r0, #76	; 0x4c
    2fec:	f001 f954 	bl	4298 <pvPortMalloc>
		if( pxNewQueue != NULL )
    2ff0:	1e05      	subs	r5, r0, #0
    2ff2:	d0f4      	beq.n	2fde <xQueueCreate+0xe>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2ff4:	1c23      	adds	r3, r4, #0
    2ff6:	4373      	muls	r3, r6
    2ff8:	4698      	mov	r8, r3
    2ffa:	2301      	movs	r3, #1
    2ffc:	1c18      	adds	r0, r3, #0
    2ffe:	4440      	add	r0, r8

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3000:	f001 f94a 	bl	4298 <pvPortMalloc>
    3004:	1c07      	adds	r7, r0, #0
    3006:	6028      	str	r0, [r5, #0]
			if( pxNewQueue->pcHead != NULL )
    3008:	2800      	cmp	r0, #0
    300a:	d017      	beq.n	303c <xQueueCreate+0x6c>
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    300c:	1e62      	subs	r2, r4, #1
    300e:	4372      	muls	r2, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    3010:	4440      	add	r0, r8
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
    3012:	2101      	movs	r1, #1
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    3014:	6068      	str	r0, [r5, #4]
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
    3016:	4248      	negs	r0, r1
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
    3018:	2300      	movs	r3, #0
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    301a:	60af      	str	r7, [r5, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
    301c:	6468      	str	r0, [r5, #68]	; 0x44
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    301e:	18bf      	adds	r7, r7, r2
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
				pxNewQueue->xTxLock = queueUNLOCKED;
    3020:	64a8      	str	r0, [r5, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3022:	1c28      	adds	r0, r5, #0
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
    3024:	63ab      	str	r3, [r5, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    3026:	60ef      	str	r7, [r5, #12]
				pxNewQueue->uxLength = uxQueueLength;
    3028:	63ec      	str	r4, [r5, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    302a:	642e      	str	r6, [r5, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
				pxNewQueue->xTxLock = queueUNLOCKED;

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    302c:	3010      	adds	r0, #16
    302e:	f7ff fefd 	bl	2e2c <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3032:	1c28      	adds	r0, r5, #0
    3034:	3024      	adds	r0, #36	; 0x24
    3036:	f7ff fef9 	bl	2e2c <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				return  pxNewQueue;
    303a:	e7d0      	b.n	2fde <xQueueCreate+0xe>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    303c:	1c28      	adds	r0, r5, #0
    303e:	f001 f939 	bl	42b4 <vPortFree>
		}
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
    3042:	1c3d      	adds	r5, r7, #0
    3044:	e7cb      	b.n	2fde <xQueueCreate+0xe>
    3046:	46c0      	nop			; (mov r8, r8)

00003048 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3048:	b5f0      	push	{r4, r5, r6, r7, lr}
    304a:	4657      	mov	r7, sl
    304c:	464e      	mov	r6, r9
    304e:	4645      	mov	r5, r8
    3050:	b4e0      	push	{r5, r6, r7}
    3052:	1c04      	adds	r4, r0, #0
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3054:	2010      	movs	r0, #16

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3056:	b084      	sub	sp, #16
    3058:	469a      	mov	sl, r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    305a:	1903      	adds	r3, r0, r4

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    305c:	9201      	str	r2, [sp, #4]
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    305e:	4698      	mov	r8, r3

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3060:	4689      	mov	r9, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3062:	f00a fdfd 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3066:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    306a:	2500      	movs	r5, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    306c:	1c2f      	adds	r7, r5, #0
	{
		taskENTER_CRITICAL();
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    306e:	429a      	cmp	r2, r3
    3070:	d32c      	bcc.n	30cc <xQueueGenericSend+0x84>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3072:	9e01      	ldr	r6, [sp, #4]
    3074:	2e00      	cmp	r6, #0
    3076:	d062      	beq.n	313e <xQueueGenericSend+0xf6>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    3078:	2d00      	cmp	r5, #0
    307a:	d03a      	beq.n	30f2 <xQueueGenericSend+0xaa>
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    307c:	f00a fdb8 	bl	dbf0 <__vPortExitCritical_from_thumb>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3080:	f000 fc5e 	bl	3940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3084:	f00a fdec 	bl	dc60 <__vPortEnterCritical_from_thumb>
    3088:	6c65      	ldr	r5, [r4, #68]	; 0x44
    308a:	1c6b      	adds	r3, r5, #1
    308c:	d035      	beq.n	30fa <xQueueGenericSend+0xb2>
    308e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    3090:	1c73      	adds	r3, r6, #1
    3092:	d036      	beq.n	3102 <xQueueGenericSend+0xba>
    3094:	f00a fdac 	bl	dbf0 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3098:	a802      	add	r0, sp, #8
    309a:	a901      	add	r1, sp, #4
    309c:	f000 ffd8 	bl	4050 <xTaskCheckForTimeOut>
    30a0:	2800      	cmp	r0, #0
    30a2:	d137      	bne.n	3114 <xQueueGenericSend+0xcc>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    30a4:	f00a fddc 	bl	dc60 <__vPortEnterCritical_from_thumb>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    30a8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    30aa:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    30ac:	f00a fda0 	bl	dbf0 <__vPortExitCritical_from_thumb>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
    30b0:	42ae      	cmp	r6, r5
    30b2:	d036      	beq.n	3122 <xQueueGenericSend+0xda>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    30b4:	1c20      	adds	r0, r4, #0
    30b6:	f7ff ff09 	bl	2ecc <prvUnlockQueue>
				( void ) xTaskResumeAll();
    30ba:	f000 fcff 	bl	3abc <xTaskResumeAll>
			( void ) xTaskResumeAll();

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    30be:	2501      	movs	r5, #1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    30c0:	f00a fdce 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    30c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    30c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    30c8:	429a      	cmp	r2, r3
    30ca:	d2d2      	bcs.n	3072 <xQueueGenericSend+0x2a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    30cc:	4649      	mov	r1, r9
    30ce:	1c20      	adds	r0, r4, #0
    30d0:	4652      	mov	r2, sl
    30d2:	f7ff ff49 	bl	2f68 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    30d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    30d8:	2900      	cmp	r1, #0
    30da:	d134      	bne.n	3146 <xQueueGenericSend+0xfe>
						takes care of that. */
						portYIELD_WITHIN_API();
					}
				}

				taskEXIT_CRITICAL();
    30dc:	f00a fd88 	bl	dbf0 <__vPortExitCritical_from_thumb>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    30e0:	2001      	movs	r0, #1
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    30e2:	b004      	add	sp, #16
    30e4:	bc1c      	pop	{r2, r3, r4}
    30e6:	4690      	mov	r8, r2
    30e8:	4699      	mov	r9, r3
    30ea:	46a2      	mov	sl, r4
    30ec:	bcf0      	pop	{r4, r5, r6, r7}
    30ee:	bc02      	pop	{r1}
    30f0:	4708      	bx	r1
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    30f2:	a802      	add	r0, sp, #8
    30f4:	f000 ffa0 	bl	4038 <vTaskSetTimeOutState>
    30f8:	e7c0      	b.n	307c <xQueueGenericSend+0x34>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    30fa:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    30fc:	6467      	str	r7, [r4, #68]	; 0x44
    30fe:	1c73      	adds	r3, r6, #1
    3100:	d1c8      	bne.n	3094 <xQueueGenericSend+0x4c>
    3102:	64a7      	str	r7, [r4, #72]	; 0x48
    3104:	f00a fd74 	bl	dbf0 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3108:	a802      	add	r0, sp, #8
    310a:	a901      	add	r1, sp, #4
    310c:	f000 ffa0 	bl	4050 <xTaskCheckForTimeOut>
    3110:	2800      	cmp	r0, #0
    3112:	d0c7      	beq.n	30a4 <xQueueGenericSend+0x5c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3114:	1c20      	adds	r0, r4, #0
    3116:	f7ff fed9 	bl	2ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    311a:	f000 fccf 	bl	3abc <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    311e:	2000      	movs	r0, #0
    3120:	e7df      	b.n	30e2 <xQueueGenericSend+0x9a>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3122:	4640      	mov	r0, r8
    3124:	9901      	ldr	r1, [sp, #4]
    3126:	f000 ff15 	bl	3f54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    312a:	1c20      	adds	r0, r4, #0
    312c:	f7ff fece 	bl	2ecc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
    3130:	f000 fcc4 	bl	3abc <xTaskResumeAll>
    3134:	2800      	cmp	r0, #0
    3136:	d1c2      	bne.n	30be <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
    3138:	df00      	svc	0
			( void ) xTaskResumeAll();

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    313a:	2501      	movs	r5, #1
    313c:	e7c0      	b.n	30c0 <xQueueGenericSend+0x78>
			{
				if( xTicksToWait == ( portTickType ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    313e:	f00a fd57 	bl	dbf0 <__vPortExitCritical_from_thumb>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3142:	1c30      	adds	r0, r6, #0
    3144:	e7cd      	b.n	30e2 <xQueueGenericSend+0x9a>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3146:	1c20      	adds	r0, r4, #0
    3148:	3024      	adds	r0, #36	; 0x24
    314a:	f000 ff39 	bl	3fc0 <xTaskRemoveFromEventList>
    314e:	2801      	cmp	r0, #1
    3150:	d1c4      	bne.n	30dc <xQueueGenericSend+0x94>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3152:	df00      	svc	0
    3154:	e7c2      	b.n	30dc <xQueueGenericSend+0x94>
    3156:	46c0      	nop			; (mov r8, r8)

00003158 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
    3158:	b538      	push	{r3, r4, r5, lr}
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    315a:	204c      	movs	r0, #76	; 0x4c
    315c:	f001 f89c 	bl	4298 <pvPortMalloc>
		if( pxNewQueue != NULL )
    3160:	1e04      	subs	r4, r0, #0
    3162:	d018      	beq.n	3196 <xQueueCreateMutex+0x3e>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
			pxNewQueue->uxLength = 1;
    3164:	2101      	movs	r1, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3166:	2500      	movs	r5, #0
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
			pxNewQueue->uxLength = 1;
			pxNewQueue->uxItemSize = 0;
			pxNewQueue->xRxLock = queueUNLOCKED;
    3168:	424b      	negs	r3, r1

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
			pxNewQueue->uxLength = 1;
    316a:	63e1      	str	r1, [r4, #60]	; 0x3c
			pxNewQueue->uxItemSize = 0;
			pxNewQueue->xRxLock = queueUNLOCKED;
    316c:	6463      	str	r3, [r4, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    316e:	64a3      	str	r3, [r4, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3170:	3010      	adds	r0, #16
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3172:	6065      	str	r5, [r4, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3174:	6025      	str	r5, [r4, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    3176:	60a5      	str	r5, [r4, #8]
			pxNewQueue->pcReadFrom = NULL;
    3178:	60e5      	str	r5, [r4, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
    317a:	63a5      	str	r5, [r4, #56]	; 0x38
			pxNewQueue->uxLength = 1;
			pxNewQueue->uxItemSize = 0;
    317c:	6425      	str	r5, [r4, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    317e:	f7ff fe55 	bl	2e2c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    3182:	1c20      	adds	r0, r4, #0
    3184:	3024      	adds	r0, #36	; 0x24
    3186:	f7ff fe51 	bl	2e2c <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, 0, queueSEND_TO_BACK );
    318a:	1c20      	adds	r0, r4, #0
    318c:	1c29      	adds	r1, r5, #0
    318e:	1c2a      	adds	r2, r5, #0
    3190:	1c2b      	adds	r3, r5, #0
    3192:	f7ff ff59 	bl	3048 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
    3196:	1c20      	adds	r0, r4, #0
    3198:	bc38      	pop	{r3, r4, r5}
    319a:	bc02      	pop	{r1}
    319c:	4708      	bx	r1
    319e:	46c0      	nop			; (mov r8, r8)

000031a0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    31a0:	b570      	push	{r4, r5, r6, lr}
    31a2:	1c04      	adds	r4, r0, #0
    31a4:	1c16      	adds	r6, r2, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    31a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
    31a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    31aa:	2500      	movs	r5, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    31ac:	4290      	cmp	r0, r2
    31ae:	d303      	bcc.n	31b8 <xQueueGenericSendFromISR+0x18>
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    31b0:	1c28      	adds	r0, r5, #0
    31b2:	bc70      	pop	{r4, r5, r6}
    31b4:	bc02      	pop	{r1}
    31b6:	4708      	bx	r1
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    31b8:	1c1a      	adds	r2, r3, #0
    31ba:	1c20      	adds	r0, r4, #0
    31bc:	f7ff fed4 	bl	2f68 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    31c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    31c2:	1c5a      	adds	r2, r3, #1
    31c4:	d003      	beq.n	31ce <xQueueGenericSendFromISR+0x2e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    31c6:	3301      	adds	r3, #1
    31c8:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    31ca:	2501      	movs	r5, #1
    31cc:	e7f0      	b.n	31b0 <xQueueGenericSendFromISR+0x10>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    31ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    31d0:	3501      	adds	r5, #1

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    31d2:	2b00      	cmp	r3, #0
    31d4:	d0ec      	beq.n	31b0 <xQueueGenericSendFromISR+0x10>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31d6:	1c20      	adds	r0, r4, #0
    31d8:	3024      	adds	r0, #36	; 0x24
    31da:	f000 fef1 	bl	3fc0 <xTaskRemoveFromEventList>
    31de:	2800      	cmp	r0, #0
    31e0:	d0e6      	beq.n	31b0 <xQueueGenericSendFromISR+0x10>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    31e2:	6035      	str	r5, [r6, #0]
    31e4:	e7e4      	b.n	31b0 <xQueueGenericSendFromISR+0x10>
    31e6:	46c0      	nop			; (mov r8, r8)

000031e8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    31e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ea:	4657      	mov	r7, sl
    31ec:	464e      	mov	r6, r9
    31ee:	4645      	mov	r5, r8
    31f0:	b4e0      	push	{r5, r6, r7}
    31f2:	b084      	sub	sp, #16
    31f4:	1c04      	adds	r4, r0, #0
    31f6:	4699      	mov	r9, r3
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    31f8:	1c07      	adds	r7, r0, #0
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    31fa:	468a      	mov	sl, r1
    31fc:	9201      	str	r2, [sp, #4]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    31fe:	f00a fd2f 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3204:	2500      	movs	r5, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    3206:	46a8      	mov	r8, r5
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3208:	3724      	adds	r7, #36	; 0x24
	{
		taskENTER_CRITICAL();
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    320a:	2b00      	cmp	r3, #0
    320c:	d134      	bne.n	3278 <xQueueGenericReceive+0x90>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    320e:	9e01      	ldr	r6, [sp, #4]
    3210:	2e00      	cmp	r6, #0
    3212:	d07b      	beq.n	330c <xQueueGenericReceive+0x124>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    3214:	2d00      	cmp	r5, #0
    3216:	d050      	beq.n	32ba <xQueueGenericReceive+0xd2>
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    3218:	f00a fcea 	bl	dbf0 <__vPortExitCritical_from_thumb>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    321c:	f000 fb90 	bl	3940 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3220:	f00a fd1e 	bl	dc60 <__vPortEnterCritical_from_thumb>
    3224:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3226:	3301      	adds	r3, #1
    3228:	d052      	beq.n	32d0 <xQueueGenericReceive+0xe8>
    322a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    322c:	1c43      	adds	r3, r0, #1
    322e:	d054      	beq.n	32da <xQueueGenericReceive+0xf2>
    3230:	f00a fcde 	bl	dbf0 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3234:	a802      	add	r0, sp, #8
    3236:	a901      	add	r1, sp, #4
    3238:	f000 ff0a 	bl	4050 <xTaskCheckForTimeOut>
    323c:	2800      	cmp	r0, #0
    323e:	d156      	bne.n	32ee <xQueueGenericReceive+0x106>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3240:	f00a fd0e 	bl	dc60 <__vPortEnterCritical_from_thumb>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3244:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    3246:	f00a fcd3 	bl	dbf0 <__vPortExitCritical_from_thumb>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
    324a:	2d00      	cmp	r5, #0
    324c:	d139      	bne.n	32c2 <xQueueGenericReceive+0xda>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    324e:	6821      	ldr	r1, [r4, #0]
    3250:	2900      	cmp	r1, #0
    3252:	d053      	beq.n	32fc <xQueueGenericReceive+0x114>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3254:	1c38      	adds	r0, r7, #0
    3256:	9901      	ldr	r1, [sp, #4]
    3258:	f000 fe7c 	bl	3f54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    325c:	1c20      	adds	r0, r4, #0
    325e:	f7ff fe35 	bl	2ecc <prvUnlockQueue>
				if( !xTaskResumeAll() )
    3262:	f000 fc2b 	bl	3abc <xTaskResumeAll>
    3266:	2800      	cmp	r0, #0
    3268:	d100      	bne.n	326c <xQueueGenericReceive+0x84>
				{
					portYIELD_WITHIN_API();
    326a:	df00      	svc	0
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    326c:	2501      	movs	r5, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    326e:	f00a fcf7 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3274:	2b00      	cmp	r3, #0
    3276:	d0ca      	beq.n	320e <xQueueGenericReceive+0x26>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3278:	6823      	ldr	r3, [r4, #0]
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    327a:	68e5      	ldr	r5, [r4, #12]
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    327c:	2b00      	cmp	r3, #0
    327e:	d008      	beq.n	3292 <xQueueGenericReceive+0xaa>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3280:	6c22      	ldr	r2, [r4, #64]	; 0x40
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3282:	6860      	ldr	r0, [r4, #4]

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3284:	18a9      	adds	r1, r5, r2
    3286:	60e1      	str	r1, [r4, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3288:	4281      	cmp	r1, r0
    328a:	d252      	bcs.n	3332 <xQueueGenericReceive+0x14a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    328c:	4650      	mov	r0, sl
    328e:	f001 ffbb 	bl	5208 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    3292:	2100      	movs	r1, #0
    3294:	4589      	cmp	r9, r1
    3296:	d144      	bne.n	3322 <xQueueGenericReceive+0x13a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3298:	6ba5      	ldr	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    329a:	6822      	ldr	r2, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    329c:	3d01      	subs	r5, #1
    329e:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    32a0:	2a00      	cmp	r2, #0
    32a2:	d051      	beq.n	3348 <xQueueGenericReceive+0x160>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    32a4:	6926      	ldr	r6, [r4, #16]
    32a6:	2e00      	cmp	r6, #0
    32a8:	d03f      	beq.n	332a <xQueueGenericReceive+0x142>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    32aa:	1c20      	adds	r0, r4, #0
    32ac:	3010      	adds	r0, #16
    32ae:	f000 fe87 	bl	3fc0 <xTaskRemoveFromEventList>
    32b2:	2801      	cmp	r0, #1
    32b4:	d139      	bne.n	332a <xQueueGenericReceive+0x142>
						{
							portYIELD_WITHIN_API();
    32b6:	df00      	svc	0
    32b8:	e037      	b.n	332a <xQueueGenericReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    32ba:	a802      	add	r0, sp, #8
    32bc:	f000 febc 	bl	4038 <vTaskSetTimeOutState>
    32c0:	e7aa      	b.n	3218 <xQueueGenericReceive+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    32c2:	1c20      	adds	r0, r4, #0
    32c4:	f7ff fe02 	bl	2ecc <prvUnlockQueue>
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    32c8:	2501      	movs	r5, #1
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
    32ca:	f000 fbf7 	bl	3abc <xTaskResumeAll>
    32ce:	e7ce      	b.n	326e <xQueueGenericReceive+0x86>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    32d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    32d2:	4643      	mov	r3, r8
    32d4:	6463      	str	r3, [r4, #68]	; 0x44
    32d6:	1c43      	adds	r3, r0, #1
    32d8:	d1aa      	bne.n	3230 <xQueueGenericReceive+0x48>
    32da:	4643      	mov	r3, r8
    32dc:	64a3      	str	r3, [r4, #72]	; 0x48
    32de:	f00a fc87 	bl	dbf0 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    32e2:	a802      	add	r0, sp, #8
    32e4:	a901      	add	r1, sp, #4
    32e6:	f000 feb3 	bl	4050 <xTaskCheckForTimeOut>
    32ea:	2800      	cmp	r0, #0
    32ec:	d0a8      	beq.n	3240 <xQueueGenericReceive+0x58>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    32ee:	1c20      	adds	r0, r4, #0
    32f0:	f7ff fdec 	bl	2ecc <prvUnlockQueue>
			( void ) xTaskResumeAll();
    32f4:	f000 fbe2 	bl	3abc <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    32f8:	2000      	movs	r0, #0
    32fa:	e00a      	b.n	3312 <xQueueGenericReceive+0x12a>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						portENTER_CRITICAL();
    32fc:	f00a fcb0 	bl	dc60 <__vPortEnterCritical_from_thumb>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3300:	6860      	ldr	r0, [r4, #4]
    3302:	f000 fee5 	bl	40d0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    3306:	f00a fc73 	bl	dbf0 <__vPortExitCritical_from_thumb>
    330a:	e7a3      	b.n	3254 <xQueueGenericReceive+0x6c>
			{
				if( xTicksToWait == ( portTickType ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    330c:	f00a fc70 	bl	dbf0 <__vPortExitCritical_from_thumb>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3310:	1c30      	adds	r0, r6, #0
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    3312:	b004      	add	sp, #16
    3314:	bc1c      	pop	{r2, r3, r4}
    3316:	4690      	mov	r8, r2
    3318:	4699      	mov	r9, r3
    331a:	46a2      	mov	sl, r4
    331c:	bcf0      	pop	{r4, r5, r6, r7}
    331e:	bc02      	pop	{r1}
    3320:	4708      	bx	r1
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    3322:	6a67      	ldr	r7, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    3324:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    3326:	2f00      	cmp	r7, #0
    3328:	d106      	bne.n	3338 <xQueueGenericReceive+0x150>
						}
					}

				}

				taskEXIT_CRITICAL();
    332a:	f00a fc61 	bl	dbf0 <__vPortExitCritical_from_thumb>
				return pdPASS;
    332e:	2001      	movs	r0, #1
    3330:	e7ef      	b.n	3312 <xQueueGenericReceive+0x12a>
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3332:	60e3      	str	r3, [r4, #12]
    3334:	1c19      	adds	r1, r3, #0
    3336:	e7a9      	b.n	328c <xQueueGenericReceive+0xa4>
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3338:	1c20      	adds	r0, r4, #0
    333a:	3024      	adds	r0, #36	; 0x24
    333c:	f000 fe40 	bl	3fc0 <xTaskRemoveFromEventList>
    3340:	2800      	cmp	r0, #0
    3342:	d0f2      	beq.n	332a <xQueueGenericReceive+0x142>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    3344:	df00      	svc	0
    3346:	e7f0      	b.n	332a <xQueueGenericReceive+0x142>
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    3348:	f000 febc 	bl	40c4 <xTaskGetCurrentTaskHandle>
    334c:	6060      	str	r0, [r4, #4]
    334e:	e7a9      	b.n	32a4 <xQueueGenericReceive+0xbc>

00003350 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3350:	b570      	push	{r4, r5, r6, lr}
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3352:	6b85      	ldr	r5, [r0, #56]	; 0x38
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3354:	1c04      	adds	r4, r0, #0
    3356:	1c16      	adds	r6, r2, #0
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3358:	2d00      	cmp	r5, #0
    335a:	d016      	beq.n	338a <xQueueReceiveFromISR+0x3a>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    335c:	6800      	ldr	r0, [r0, #0]
    335e:	2800      	cmp	r0, #0
    3360:	d00a      	beq.n	3378 <xQueueReceiveFromISR+0x28>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3362:	68e3      	ldr	r3, [r4, #12]
    3364:	6c22      	ldr	r2, [r4, #64]	; 0x40
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3366:	6865      	ldr	r5, [r4, #4]

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3368:	189b      	adds	r3, r3, r2
    336a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    336c:	42ab      	cmp	r3, r5
    336e:	d210      	bcs.n	3392 <xQueueReceiveFromISR+0x42>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3370:	1c08      	adds	r0, r1, #0
    3372:	1c19      	adds	r1, r3, #0
    3374:	f001 ff48 	bl	5208 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    3378:	6ba0      	ldr	r0, [r4, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    337a:	6c63      	ldr	r3, [r4, #68]	; 0x44
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    337c:	3801      	subs	r0, #1
    337e:	63a0      	str	r0, [r4, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3380:	1c5a      	adds	r2, r3, #1
    3382:	d009      	beq.n	3398 <xQueueReceiveFromISR+0x48>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3384:	3301      	adds	r3, #1
    3386:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
    3388:	2501      	movs	r5, #1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    338a:	1c28      	adds	r0, r5, #0
    338c:	bc70      	pop	{r4, r5, r6}
    338e:	bc02      	pop	{r1}
    3390:	4708      	bx	r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3392:	60e0      	str	r0, [r4, #12]
    3394:	1c03      	adds	r3, r0, #0
    3396:	e7eb      	b.n	3370 <xQueueReceiveFromISR+0x20>
			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    3398:	6921      	ldr	r1, [r4, #16]
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    339a:	2501      	movs	r5, #1
			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    339c:	2900      	cmp	r1, #0
    339e:	d0f4      	beq.n	338a <xQueueReceiveFromISR+0x3a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    33a0:	1c20      	adds	r0, r4, #0
    33a2:	3010      	adds	r0, #16
    33a4:	f000 fe0c 	bl	3fc0 <xTaskRemoveFromEventList>
    33a8:	2800      	cmp	r0, #0
    33aa:	d0ee      	beq.n	338a <xQueueReceiveFromISR+0x3a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    33ac:	6035      	str	r5, [r6, #0]
    33ae:	e7ec      	b.n	338a <xQueueReceiveFromISR+0x3a>

000033b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    33b0:	b510      	push	{r4, lr}
    33b2:	1c04      	adds	r4, r0, #0
unsigned portBASE_TYPE uxReturn;

	taskENTER_CRITICAL();
    33b4:	f00a fc54 	bl	dc60 <__vPortEnterCritical_from_thumb>
		uxReturn = pxQueue->uxMessagesWaiting;
    33b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    33ba:	f00a fc19 	bl	dbf0 <__vPortExitCritical_from_thumb>

	return uxReturn;
}
    33be:	1c20      	adds	r0, r4, #0
    33c0:	bc10      	pop	{r4}
    33c2:	bc02      	pop	{r1}
    33c4:	4708      	bx	r1
    33c6:	46c0      	nop			; (mov r8, r8)

000033c8 <uxQueueMessagesWaitingFromISR>:

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
unsigned portBASE_TYPE uxReturn;

	uxReturn = pxQueue->uxMessagesWaiting;
    33c8:	6b80      	ldr	r0, [r0, #56]	; 0x38

	return uxReturn;
}
    33ca:	4770      	bx	lr

000033cc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    33cc:	b510      	push	{r4, lr}
    33ce:	1c04      	adds	r4, r0, #0
	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    33d0:	6800      	ldr	r0, [r0, #0]
    33d2:	f000 ff6f 	bl	42b4 <vPortFree>
	vPortFree( pxQueue );
    33d6:	1c20      	adds	r0, r4, #0
    33d8:	f000 ff6c 	bl	42b4 <vPortFree>
}
    33dc:	bc10      	pop	{r4}
    33de:	bc01      	pop	{r0}
    33e0:	4700      	bx	r0
    33e2:	46c0      	nop			; (mov r8, r8)

000033e4 <xQueueIsQueueEmptyFromISR>:

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    33e4:	6b80      	ldr	r0, [r0, #56]	; 0x38
    33e6:	4243      	negs	r3, r0
    33e8:	4158      	adcs	r0, r3

	return xReturn;
}
    33ea:	4770      	bx	lr

000033ec <xQueueIsQueueFullFromISR>:

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    33ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    33ee:	6b82      	ldr	r2, [r0, #56]	; 0x38
    33f0:	1ad0      	subs	r0, r2, r3
    33f2:	4243      	negs	r3, r0
    33f4:	4158      	adcs	r0, r3

	return xReturn;
}
    33f6:	4770      	bx	lr

000033f8 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    33f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33fa:	465f      	mov	r7, fp
    33fc:	4656      	mov	r6, sl
    33fe:	464d      	mov	r5, r9
    3400:	4644      	mov	r4, r8
    3402:	b4f0      	push	{r4, r5, r6, r7}
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    3404:	684b      	ldr	r3, [r1, #4]
    3406:	1c0f      	adds	r7, r1, #0
    3408:	685b      	ldr	r3, [r3, #4]
    340a:	3708      	adds	r7, #8
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    340c:	b085      	sub	sp, #20
    340e:	4681      	mov	r9, r0
    3410:	1c0d      	adds	r5, r1, #0
    3412:	4690      	mov	r8, r2
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    3414:	604b      	str	r3, [r1, #4]
    3416:	42bb      	cmp	r3, r7
    3418:	d039      	beq.n	348e <prvListTaskWithinSingleList+0x96>
    341a:	68da      	ldr	r2, [r3, #12]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    341c:	685b      	ldr	r3, [r3, #4]
	{
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    341e:	4692      	mov	sl, r2
    3420:	4a1c      	ldr	r2, [pc, #112]	; (3494 <prvListTaskWithinSingleList+0x9c>)
    3422:	4e1d      	ldr	r6, [pc, #116]	; (3498 <prvListTaskWithinSingleList+0xa0>)
    3424:	4693      	mov	fp, r2
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    3426:	606b      	str	r3, [r5, #4]
    3428:	42bb      	cmp	r3, r7
    342a:	d024      	beq.n	3476 <prvListTaskWithinSingleList+0x7e>
    342c:	68dc      	ldr	r4, [r3, #12]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
    342e:	6b23      	ldr	r3, [r4, #48]	; 0x30

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3430:	7818      	ldrb	r0, [r3, #0]
    3432:	2100      	movs	r1, #0
    3434:	28a5      	cmp	r0, #165	; 0xa5
    3436:	d107      	bne.n	3448 <prvListTaskWithinSingleList+0x50>
		{
			pucStackByte -= portSTACK_GROWTH;
    3438:	3301      	adds	r3, #1
			usCount++;
    343a:	3101      	adds	r1, #1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    343c:	7818      	ldrb	r0, [r3, #0]
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    343e:	040a      	lsls	r2, r1, #16
    3440:	0c11      	lsrs	r1, r2, #16

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3442:	28a5      	cmp	r0, #165	; 0xa5
    3444:	d0f8      	beq.n	3438 <prvListTaskWithinSingleList+0x40>
    3446:	0c91      	lsrs	r1, r2, #18
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
			}
			#endif			
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
    3448:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    344a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    344c:	1c22      	adds	r2, r4, #0
    344e:	9000      	str	r0, [sp, #0]
    3450:	9101      	str	r1, [sp, #4]
    3452:	9302      	str	r3, [sp, #8]
    3454:	4659      	mov	r1, fp
    3456:	3234      	adds	r2, #52	; 0x34
    3458:	1c30      	adds	r0, r6, #0
    345a:	4643      	mov	r3, r8
    345c:	f002 f832 	bl	54c4 <sprintf>
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
    3460:	4648      	mov	r0, r9
    3462:	1c31      	adds	r1, r6, #0
    3464:	f002 f8a6 	bl	55b4 <strcat>

		} while( pxNextTCB != pxFirstTCB );
    3468:	4554      	cmp	r4, sl
    346a:	d007      	beq.n	347c <prvListTaskWithinSingleList+0x84>
    346c:	686b      	ldr	r3, [r5, #4]

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    346e:	685b      	ldr	r3, [r3, #4]
    3470:	606b      	str	r3, [r5, #4]
    3472:	42bb      	cmp	r3, r7
    3474:	d1da      	bne.n	342c <prvListTaskWithinSingleList+0x34>
    3476:	687b      	ldr	r3, [r7, #4]
    3478:	606b      	str	r3, [r5, #4]
    347a:	e7d7      	b.n	342c <prvListTaskWithinSingleList+0x34>
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );

		} while( pxNextTCB != pxFirstTCB );
	}
    347c:	b005      	add	sp, #20
    347e:	bc3c      	pop	{r2, r3, r4, r5}
    3480:	4690      	mov	r8, r2
    3482:	4699      	mov	r9, r3
    3484:	46a2      	mov	sl, r4
    3486:	46ab      	mov	fp, r5
    3488:	bcf0      	pop	{r4, r5, r6, r7}
    348a:	bc01      	pop	{r0}
    348c:	4700      	bx	r0
	{
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    348e:	685b      	ldr	r3, [r3, #4]
    3490:	e7c3      	b.n	341a <prvListTaskWithinSingleList+0x22>
    3492:	46c0      	nop			; (mov r8, r8)
    3494:	0000e8f8 	.word	0x0000e8f8
    3498:	40000b00 	.word	0x40000b00

0000349c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    349e:	465f      	mov	r7, fp
    34a0:	4656      	mov	r6, sl
    34a2:	464d      	mov	r5, r9
    34a4:	4644      	mov	r4, r8
    34a6:	b4f0      	push	{r4, r5, r6, r7}
    34a8:	1c16      	adds	r6, r2, #0
    34aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    34ac:	4683      	mov	fp, r0
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    34ae:	2048      	movs	r0, #72	; 0x48
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    34b0:	4688      	mov	r8, r1
    34b2:	469a      	mov	sl, r3
    34b4:	4691      	mov	r9, r2
    34b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    34b8:	f000 feee 	bl	4298 <pvPortMalloc>

	if( pxNewTCB != NULL )
    34bc:	1e04      	subs	r4, r0, #0
    34be:	d100      	bne.n	34c2 <xTaskGenericCreate+0x26>
    34c0:	e07b      	b.n	35ba <xTaskGenericCreate+0x11e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    34c2:	2d00      	cmp	r5, #0
    34c4:	d100      	bne.n	34c8 <xTaskGenericCreate+0x2c>
    34c6:	e083      	b.n	35d0 <xTaskGenericCreate+0x134>
    34c8:	6325      	str	r5, [r4, #48]	; 0x30
    34ca:	00b7      	lsls	r7, r6, #2
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
    34cc:	1c3a      	adds	r2, r7, #0
    34ce:	1c28      	adds	r0, r5, #0
    34d0:	21a5      	movs	r1, #165	; 0xa5
    34d2:	f001 ff17 	bl	5304 <memset>
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    34d6:	1c20      	adds	r0, r4, #0
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    34d8:	6b27      	ldr	r7, [r4, #48]	; 0x30
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    34da:	4641      	mov	r1, r8
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    34dc:	3e01      	subs	r6, #1
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    34de:	3034      	adds	r0, #52	; 0x34
    34e0:	220a      	movs	r2, #10
    34e2:	f002 f89b 	bl	561c <strncpy>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    34e6:	00b6      	lsls	r6, r6, #2
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    34e8:	2100      	movs	r1, #0
    34ea:	233d      	movs	r3, #61	; 0x3d
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
    34ec:	2507      	movs	r5, #7
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    34ee:	19be      	adds	r6, r7, r6
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    34f0:	54e1      	strb	r1, [r4, r3]
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
    34f2:	43ae      	bics	r6, r5
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    34f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    34f6:	2d03      	cmp	r5, #3
    34f8:	d854      	bhi.n	35a4 <xTaskGenericCreate+0x108>
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    34fa:	1d27      	adds	r7, r4, #4
    34fc:	1c38      	adds	r0, r7, #0
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - 1;
	}

	pxTCB->uxPriority = uxPriority;
    34fe:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    3500:	6465      	str	r5, [r4, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3502:	f7ff fc9f 	bl	2e44 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    3506:	1c20      	adds	r0, r4, #0
    3508:	3018      	adds	r0, #24
    350a:	f7ff fc9b 	bl	2e44 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    350e:	2104      	movs	r1, #4
    3510:	1b48      	subs	r0, r1, r5
    3512:	61a0      	str	r0, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3514:	4652      	mov	r2, sl
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    3516:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3518:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    351a:	1c30      	adds	r0, r6, #0
    351c:	4659      	mov	r1, fp
    351e:	f000 fe33 	bl	4188 <pxPortInitialiseStack>
		}
		#endif

		if( ( void * ) pxCreatedTask != NULL )
    3522:	2200      	movs	r2, #0
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3524:	6020      	str	r0, [r4, #0]
		}
		#endif

		if( ( void * ) pxCreatedTask != NULL )
    3526:	4591      	cmp	r9, r2
    3528:	d001      	beq.n	352e <xTaskGenericCreate+0x92>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    352a:	464a      	mov	r2, r9
    352c:	6014      	str	r4, [r2, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		portENTER_CRITICAL();
    352e:	f00a fb97 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			uxCurrentNumberOfTasks++;
    3532:	4b45      	ldr	r3, [pc, #276]	; (3648 <xTaskGenericCreate+0x1ac>)
    3534:	681d      	ldr	r5, [r3, #0]
    3536:	3501      	adds	r5, #1
    3538:	601d      	str	r5, [r3, #0]
			if( pxCurrentTCB == NULL )
    353a:	4d44      	ldr	r5, [pc, #272]	; (364c <xTaskGenericCreate+0x1b0>)
    353c:	682e      	ldr	r6, [r5, #0]
    353e:	2e00      	cmp	r6, #0
    3540:	d03e      	beq.n	35c0 <xTaskGenericCreate+0x124>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3542:	4e43      	ldr	r6, [pc, #268]	; (3650 <xTaskGenericCreate+0x1b4>)
    3544:	6833      	ldr	r3, [r6, #0]
    3546:	2b00      	cmp	r3, #0
    3548:	d02e      	beq.n	35a8 <xTaskGenericCreate+0x10c>
    354a:	4b42      	ldr	r3, [pc, #264]	; (3654 <xTaskGenericCreate+0x1b8>)
    354c:	4698      	mov	r8, r3
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    354e:	4a42      	ldr	r2, [pc, #264]	; (3658 <xTaskGenericCreate+0x1bc>)
    3550:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3552:	6811      	ldr	r1, [r2, #0]
    3554:	428b      	cmp	r3, r1
    3556:	d900      	bls.n	355a <xTaskGenericCreate+0xbe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3558:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    355a:	4a40      	ldr	r2, [pc, #256]	; (365c <xTaskGenericCreate+0x1c0>)
    355c:	6810      	ldr	r0, [r2, #0]
    355e:	6420      	str	r0, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
    3560:	3001      	adds	r0, #1
    3562:	6010      	str	r0, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    3564:	4a3e      	ldr	r2, [pc, #248]	; (3660 <xTaskGenericCreate+0x1c4>)
    3566:	6811      	ldr	r1, [r2, #0]
    3568:	428b      	cmp	r3, r1
    356a:	d900      	bls.n	356e <xTaskGenericCreate+0xd2>
    356c:	6013      	str	r3, [r2, #0]
    356e:	0099      	lsls	r1, r3, #2
    3570:	18cb      	adds	r3, r1, r3
    3572:	0098      	lsls	r0, r3, #2
    3574:	4440      	add	r0, r8
    3576:	1c39      	adds	r1, r7, #0
    3578:	f7ff fc68 	bl	2e4c <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		portEXIT_CRITICAL();
    357c:	f00a fb38 	bl	dbf0 <__vPortExitCritical_from_thumb>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    3580:	6834      	ldr	r4, [r6, #0]
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
    3582:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    3584:	2c00      	cmp	r4, #0
    3586:	d005      	beq.n	3594 <xTaskGenericCreate+0xf8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3588:	682d      	ldr	r5, [r5, #0]
    358a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    358c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    358e:	429f      	cmp	r7, r3
    3590:	d900      	bls.n	3594 <xTaskGenericCreate+0xf8>
			{
				portYIELD_WITHIN_API();
    3592:	df00      	svc	0
			}
		}
	}

	return xReturn;
}
    3594:	bc3c      	pop	{r2, r3, r4, r5}
    3596:	4690      	mov	r8, r2
    3598:	4699      	mov	r9, r3
    359a:	46a2      	mov	sl, r4
    359c:	46ab      	mov	fp, r5
    359e:	bcf8      	pop	{r3, r4, r5, r6, r7}
    35a0:	bc02      	pop	{r1}
    35a2:	4708      	bx	r1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    35a4:	2503      	movs	r5, #3
    35a6:	e7a8      	b.n	34fa <xTaskGenericCreate+0x5e>
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    35a8:	6829      	ldr	r1, [r5, #0]
    35aa:	980a      	ldr	r0, [sp, #40]	; 0x28
    35ac:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    35ae:	4298      	cmp	r0, r3
    35b0:	d3cb      	bcc.n	354a <xTaskGenericCreate+0xae>
    35b2:	4a28      	ldr	r2, [pc, #160]	; (3654 <xTaskGenericCreate+0x1b8>)
					{
						pxCurrentTCB = pxNewTCB;
    35b4:	602c      	str	r4, [r5, #0]
    35b6:	4690      	mov	r8, r2
    35b8:	e7c9      	b.n	354e <xTaskGenericCreate+0xb2>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    35ba:	2601      	movs	r6, #1
    35bc:	4270      	negs	r0, r6
    35be:	e7e9      	b.n	3594 <xTaskGenericCreate+0xf8>
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    35c0:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    35c2:	681b      	ldr	r3, [r3, #0]
    35c4:	2b01      	cmp	r3, #1
    35c6:	d012      	beq.n	35ee <xTaskGenericCreate+0x152>
    35c8:	4b22      	ldr	r3, [pc, #136]	; (3654 <xTaskGenericCreate+0x1b8>)
    35ca:	4e21      	ldr	r6, [pc, #132]	; (3650 <xTaskGenericCreate+0x1b4>)
    35cc:	4698      	mov	r8, r3
    35ce:	e7be      	b.n	354e <xTaskGenericCreate+0xb2>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    35d0:	00b7      	lsls	r7, r6, #2
    35d2:	1c38      	adds	r0, r7, #0
    35d4:	f000 fe60 	bl	4298 <pvPortMalloc>
    35d8:	1c05      	adds	r5, r0, #0
    35da:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    35dc:	2800      	cmp	r0, #0
    35de:	d000      	beq.n	35e2 <xTaskGenericCreate+0x146>
    35e0:	e774      	b.n	34cc <xTaskGenericCreate+0x30>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    35e2:	1c20      	adds	r0, r4, #0
    35e4:	f000 fe66 	bl	42b4 <vPortFree>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    35e8:	2001      	movs	r0, #1
    35ea:	4240      	negs	r0, r0
    35ec:	e7d2      	b.n	3594 <xTaskGenericCreate+0xf8>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    35ee:	4a19      	ldr	r2, [pc, #100]	; (3654 <xTaskGenericCreate+0x1b8>)
    35f0:	1c10      	adds	r0, r2, #0
    35f2:	4690      	mov	r8, r2
    35f4:	f7ff fc1a 	bl	2e2c <vListInitialise>
    35f8:	2114      	movs	r1, #20
    35fa:	1c08      	adds	r0, r1, #0
    35fc:	4440      	add	r0, r8
    35fe:	f7ff fc15 	bl	2e2c <vListInitialise>
    3602:	2028      	movs	r0, #40	; 0x28
    3604:	4440      	add	r0, r8
    3606:	f7ff fc11 	bl	2e2c <vListInitialise>
    360a:	233c      	movs	r3, #60	; 0x3c
    360c:	1c18      	adds	r0, r3, #0
    360e:	4440      	add	r0, r8
    3610:	f7ff fc0c 	bl	2e2c <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    3614:	4e13      	ldr	r6, [pc, #76]	; (3664 <xTaskGenericCreate+0x1c8>)
    3616:	1c30      	adds	r0, r6, #0
    3618:	f7ff fc08 	bl	2e2c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    361c:	4a12      	ldr	r2, [pc, #72]	; (3668 <xTaskGenericCreate+0x1cc>)
    361e:	1c10      	adds	r0, r2, #0
    3620:	4691      	mov	r9, r2
    3622:	f7ff fc03 	bl	2e2c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    3626:	4811      	ldr	r0, [pc, #68]	; (366c <xTaskGenericCreate+0x1d0>)
    3628:	f7ff fc00 	bl	2e2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    362c:	4810      	ldr	r0, [pc, #64]	; (3670 <xTaskGenericCreate+0x1d4>)
    362e:	f7ff fbfd 	bl	2e2c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    3632:	4810      	ldr	r0, [pc, #64]	; (3674 <xTaskGenericCreate+0x1d8>)
    3634:	f7ff fbfa 	bl	2e2c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3638:	490f      	ldr	r1, [pc, #60]	; (3678 <xTaskGenericCreate+0x1dc>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    363a:	4810      	ldr	r0, [pc, #64]	; (367c <xTaskGenericCreate+0x1e0>)
    363c:	464a      	mov	r2, r9
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    363e:	600e      	str	r6, [r1, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3640:	6002      	str	r2, [r0, #0]
    3642:	4e03      	ldr	r6, [pc, #12]	; (3650 <xTaskGenericCreate+0x1b4>)
    3644:	e783      	b.n	354e <xTaskGenericCreate+0xb2>
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	40000b48 	.word	0x40000b48
    364c:	40000afc 	.word	0x40000afc
    3650:	40000aec 	.word	0x40000aec
    3654:	40000a68 	.word	0x40000a68
    3658:	40000b88 	.word	0x40000b88
    365c:	40000af4 	.word	0x40000af4
    3660:	40000a5c 	.word	0x40000a5c
    3664:	40000b4c 	.word	0x40000b4c
    3668:	40000b60 	.word	0x40000b60
    366c:	40000ad8 	.word	0x40000ad8
    3670:	40000abc 	.word	0x40000abc
    3674:	40000b34 	.word	0x40000b34
    3678:	40000ad4 	.word	0x40000ad4
    367c:	40000ab8 	.word	0x40000ab8

00003680 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3680:	b570      	push	{r4, r5, r6, lr}
    3682:	1c04      	adds	r4, r0, #0
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    3684:	f00a faec 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3688:	4b16      	ldr	r3, [pc, #88]	; (36e4 <vTaskDelete+0x64>)
    368a:	681a      	ldr	r2, [r3, #0]
    368c:	4294      	cmp	r4, r2
    368e:	d025      	beq.n	36dc <vTaskDelete+0x5c>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3690:	1e25      	subs	r5, r4, #0
    3692:	d023      	beq.n	36dc <vTaskDelete+0x5c>

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3694:	1d2e      	adds	r6, r5, #4
    3696:	1c30      	adds	r0, r6, #0
    3698:	f7ff fc04 	bl	2ea4 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    369c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    369e:	2b00      	cmp	r3, #0
    36a0:	d003      	beq.n	36aa <vTaskDelete+0x2a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    36a2:	1c28      	adds	r0, r5, #0
    36a4:	3018      	adds	r0, #24
    36a6:	f7ff fbfd 	bl	2ea4 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    36aa:	1c31      	adds	r1, r6, #0
    36ac:	480e      	ldr	r0, [pc, #56]	; (36e8 <vTaskDelete+0x68>)
    36ae:	f7ff fbcd 	bl	2e4c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    36b2:	4b0e      	ldr	r3, [pc, #56]	; (36ec <vTaskDelete+0x6c>)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    36b4:	4e0e      	ldr	r6, [pc, #56]	; (36f0 <vTaskDelete+0x70>)
			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    36b6:	681a      	ldr	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    36b8:	6835      	ldr	r5, [r6, #0]
			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    36ba:	3201      	adds	r2, #1

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    36bc:	3501      	adds	r5, #1
			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    36be:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    36c0:	6035      	str	r5, [r6, #0]

			traceTASK_DELETE( pxTCB );
		}
		portEXIT_CRITICAL();
    36c2:	f00a fa95 	bl	dbf0 <__vPortExitCritical_from_thumb>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    36c6:	490b      	ldr	r1, [pc, #44]	; (36f4 <vTaskDelete+0x74>)
    36c8:	6808      	ldr	r0, [r1, #0]
    36ca:	2800      	cmp	r0, #0
    36cc:	d001      	beq.n	36d2 <vTaskDelete+0x52>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    36ce:	2c00      	cmp	r4, #0
    36d0:	d002      	beq.n	36d8 <vTaskDelete+0x58>
			{
				portYIELD_WITHIN_API();
			}
		}
	}
    36d2:	bc70      	pop	{r4, r5, r6}
    36d4:	bc01      	pop	{r0}
    36d6:	4700      	bx	r0
		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
		{
			if( ( void * ) pxTaskToDelete == NULL )
			{
				portYIELD_WITHIN_API();
    36d8:	df00      	svc	0
    36da:	e7fa      	b.n	36d2 <vTaskDelete+0x52>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    36dc:	681d      	ldr	r5, [r3, #0]
    36de:	2400      	movs	r4, #0
    36e0:	e7d8      	b.n	3694 <vTaskDelete+0x14>
    36e2:	46c0      	nop			; (mov r8, r8)
    36e4:	40000afc 	.word	0x40000afc
    36e8:	40000abc 	.word	0x40000abc
    36ec:	40000a60 	.word	0x40000a60
    36f0:	40000af4 	.word	0x40000af4
    36f4:	40000aec 	.word	0x40000aec

000036f8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    36f8:	b510      	push	{r4, lr}
    36fa:	1c04      	adds	r4, r0, #0
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		portENTER_CRITICAL();
    36fc:	f00a fab0 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3700:	2c00      	cmp	r4, #0
    3702:	d006      	beq.n	3712 <uxTaskPriorityGet+0x1a>
			uxReturn = pxTCB->uxPriority;
    3704:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		}
		portEXIT_CRITICAL();
    3706:	f00a fa73 	bl	dbf0 <__vPortExitCritical_from_thumb>

		return uxReturn;
	}
    370a:	1c20      	adds	r0, r4, #0
    370c:	bc10      	pop	{r4}
    370e:	bc02      	pop	{r1}
    3710:	4708      	bx	r1

		portENTER_CRITICAL();
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3712:	4b01      	ldr	r3, [pc, #4]	; (3718 <uxTaskPriorityGet+0x20>)
    3714:	681c      	ldr	r4, [r3, #0]
    3716:	e7f5      	b.n	3704 <uxTaskPriorityGet+0xc>
    3718:	40000afc 	.word	0x40000afc

0000371c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    371e:	1c06      	adds	r6, r0, #0
    3720:	1c0d      	adds	r5, r1, #0
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3722:	2903      	cmp	r1, #3
    3724:	d900      	bls.n	3728 <vTaskPrioritySet+0xc>
    3726:	2503      	movs	r5, #3
		if( uxNewPriority >= configMAX_PRIORITIES )
		{
			uxNewPriority = configMAX_PRIORITIES - 1;
		}

		portENTER_CRITICAL();
    3728:	f00a fa9a 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			if( pxTask == pxCurrentTCB )
    372c:	4b1f      	ldr	r3, [pc, #124]	; (37ac <vTaskPrioritySet+0x90>)
    372e:	681a      	ldr	r2, [r3, #0]
    3730:	4296      	cmp	r6, r2
    3732:	d025      	beq.n	3780 <vTaskPrioritySet+0x64>
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3734:	1e34      	subs	r4, r6, #0
    3736:	d023      	beq.n	3780 <vTaskPrioritySet+0x64>

			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3738:	6c63      	ldr	r3, [r4, #68]	; 0x44
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    373a:	42ab      	cmp	r3, r5
    373c:	d014      	beq.n	3768 <vTaskPrioritySet+0x4c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    373e:	d318      	bcc.n	3772 <vTaskPrioritySet+0x56>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3740:	4272      	negs	r2, r6
    3742:	4156      	adcs	r6, r2

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3744:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3746:	4293      	cmp	r3, r2
    3748:	d018      	beq.n	377c <vTaskPrioritySet+0x60>
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    374a:	2004      	movs	r0, #4

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    374c:	009a      	lsls	r2, r3, #2
					{
						pxTCB->uxPriority = uxNewPriority;
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    374e:	6465      	str	r5, [r4, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3750:	1b45      	subs	r5, r0, r5

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3752:	18d7      	adds	r7, r2, r3
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3754:	61a5      	str	r5, [r4, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3756:	4d16      	ldr	r5, [pc, #88]	; (37b0 <vTaskPrioritySet+0x94>)
    3758:	00b9      	lsls	r1, r7, #2
    375a:	6960      	ldr	r0, [r4, #20]
    375c:	186b      	adds	r3, r5, r1
    375e:	4298      	cmp	r0, r3
    3760:	d011      	beq.n	3786 <vTaskPrioritySet+0x6a>
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
				}

				if( xYieldRequired == pdTRUE )
    3762:	2e01      	cmp	r6, #1
    3764:	d100      	bne.n	3768 <vTaskPrioritySet+0x4c>
				{
					portYIELD_WITHIN_API();
    3766:	df00      	svc	0
				}
			}
		}
		portEXIT_CRITICAL();
    3768:	f00a fa42 	bl	dbf0 <__vPortExitCritical_from_thumb>
	}
    376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    376e:	bc01      	pop	{r0}
    3770:	4700      	bx	r0
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3772:	1e72      	subs	r2, r6, #1
    3774:	4196      	sbcs	r6, r2

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3776:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3778:	4293      	cmp	r3, r2
    377a:	d1e6      	bne.n	374a <vTaskPrioritySet+0x2e>
					{
						pxTCB->uxPriority = uxNewPriority;
    377c:	62e5      	str	r5, [r4, #44]	; 0x2c
    377e:	e7e4      	b.n	374a <vTaskPrioritySet+0x2e>
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3780:	681c      	ldr	r4, [r3, #0]
    3782:	2600      	movs	r6, #0
    3784:	e7d8      	b.n	3738 <vTaskPrioritySet+0x1c>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3786:	1d27      	adds	r7, r4, #4
    3788:	1c38      	adds	r0, r7, #0
    378a:	f7ff fb8b 	bl	2ea4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    378e:	4a09      	ldr	r2, [pc, #36]	; (37b4 <vTaskPrioritySet+0x98>)
    3790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3792:	6811      	ldr	r1, [r2, #0]
    3794:	428b      	cmp	r3, r1
    3796:	d900      	bls.n	379a <vTaskPrioritySet+0x7e>
    3798:	6013      	str	r3, [r2, #0]
    379a:	009a      	lsls	r2, r3, #2
    379c:	18d3      	adds	r3, r2, r3
    379e:	009c      	lsls	r4, r3, #2
    37a0:	1928      	adds	r0, r5, r4
    37a2:	1c39      	adds	r1, r7, #0
    37a4:	f7ff fb52 	bl	2e4c <vListInsertEnd>
    37a8:	e7db      	b.n	3762 <vTaskPrioritySet+0x46>
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	40000afc 	.word	0x40000afc
    37b0:	40000a68 	.word	0x40000a68
    37b4:	40000a5c 	.word	0x40000a5c

000037b8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    37b8:	b500      	push	{lr}
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    37ba:	6941      	ldr	r1, [r0, #20]
    37bc:	4a06      	ldr	r2, [pc, #24]	; (37d8 <xTaskIsTaskSuspended+0x20>)
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    37be:	1c03      	adds	r3, r0, #0
	portBASE_TYPE xReturn = pdFALSE;
    37c0:	2000      	movs	r0, #0
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    37c2:	4291      	cmp	r1, r2
    37c4:	d001      	beq.n	37ca <xTaskIsTaskSuspended+0x12>
				}
			}
		}

		return xReturn;
	}
    37c6:	bc02      	pop	{r1}
    37c8:	4708      	bx	r1
		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    37ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37cc:	4a03      	ldr	r2, [pc, #12]	; (37dc <xTaskIsTaskSuspended+0x24>)
    37ce:	4293      	cmp	r3, r2
    37d0:	d0f9      	beq.n	37c6 <xTaskIsTaskSuspended+0xe>

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
    37d2:	4258      	negs	r0, r3
    37d4:	4158      	adcs	r0, r3
    37d6:	e7f6      	b.n	37c6 <xTaskIsTaskSuspended+0xe>
    37d8:	40000b34 	.word	0x40000b34
    37dc:	40000ad8 	.word	0x40000ad8

000037e0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    37e0:	b570      	push	{r4, r5, r6, lr}
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    37e2:	1e04      	subs	r4, r0, #0
    37e4:	d00b      	beq.n	37fe <vTaskResume+0x1e>
    37e6:	4d17      	ldr	r5, [pc, #92]	; (3844 <vTaskResume+0x64>)
    37e8:	682b      	ldr	r3, [r5, #0]
    37ea:	429c      	cmp	r4, r3
    37ec:	d007      	beq.n	37fe <vTaskResume+0x1e>
		{
			portENTER_CRITICAL();
    37ee:	f00a fa37 	bl	dc60 <__vPortEnterCritical_from_thumb>
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    37f2:	6962      	ldr	r2, [r4, #20]
    37f4:	4b14      	ldr	r3, [pc, #80]	; (3848 <vTaskResume+0x68>)
    37f6:	429a      	cmp	r2, r3
    37f8:	d004      	beq.n	3804 <vTaskResume+0x24>
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
					}
				}
			}
			portEXIT_CRITICAL();
    37fa:	f00a f9f9 	bl	dbf0 <__vPortExitCritical_from_thumb>
		}
	}
    37fe:	bc70      	pop	{r4, r5, r6}
    3800:	bc01      	pop	{r0}
    3802:	4700      	bx	r0
		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3804:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3806:	4a11      	ldr	r2, [pc, #68]	; (384c <vTaskResume+0x6c>)
    3808:	4293      	cmp	r3, r2
    380a:	d0f6      	beq.n	37fa <vTaskResume+0x1a>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    380c:	2b00      	cmp	r3, #0
    380e:	d1f4      	bne.n	37fa <vTaskResume+0x1a>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3810:	1d26      	adds	r6, r4, #4
    3812:	1c30      	adds	r0, r6, #0
    3814:	f7ff fb46 	bl	2ea4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3818:	4a0d      	ldr	r2, [pc, #52]	; (3850 <vTaskResume+0x70>)
    381a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    381c:	6811      	ldr	r1, [r2, #0]
    381e:	428b      	cmp	r3, r1
    3820:	d900      	bls.n	3824 <vTaskResume+0x44>
    3822:	6013      	str	r3, [r2, #0]
    3824:	0099      	lsls	r1, r3, #2
    3826:	18cb      	adds	r3, r1, r3
    3828:	4a0a      	ldr	r2, [pc, #40]	; (3854 <vTaskResume+0x74>)
    382a:	0098      	lsls	r0, r3, #2
    382c:	1810      	adds	r0, r2, r0
    382e:	1c31      	adds	r1, r6, #0
    3830:	f7ff fb0c 	bl	2e4c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3834:	6829      	ldr	r1, [r5, #0]
    3836:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3838:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    383a:	4298      	cmp	r0, r3
    383c:	d3dd      	bcc.n	37fa <vTaskResume+0x1a>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    383e:	df00      	svc	0
    3840:	e7db      	b.n	37fa <vTaskResume+0x1a>
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	40000afc 	.word	0x40000afc
    3848:	40000b34 	.word	0x40000b34
    384c:	40000ad8 	.word	0x40000ad8
    3850:	40000a5c 	.word	0x40000a5c
    3854:	40000a68 	.word	0x40000a68

00003858 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3858:	b570      	push	{r4, r5, r6, lr}
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    385a:	6942      	ldr	r2, [r0, #20]
    385c:	4b18      	ldr	r3, [pc, #96]	; (38c0 <xTaskResumeFromISR+0x68>)
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    385e:	1c04      	adds	r4, r0, #0
	portBASE_TYPE xYieldRequired = pdFALSE;
    3860:	2500      	movs	r5, #0
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3862:	429a      	cmp	r2, r3
    3864:	d003      	beq.n	386e <xTaskResumeFromISR+0x16>
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
			}
		}

		return xYieldRequired;
	}
    3866:	1c28      	adds	r0, r5, #0
    3868:	bc70      	pop	{r4, r5, r6}
    386a:	bc02      	pop	{r1}
    386c:	4708      	bx	r1
		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    386e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    3870:	4814      	ldr	r0, [pc, #80]	; (38c4 <xTaskResumeFromISR+0x6c>)
    3872:	4283      	cmp	r3, r0
    3874:	d0f7      	beq.n	3866 <xTaskResumeFromISR+0xe>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3876:	42ab      	cmp	r3, r5
    3878:	d1f5      	bne.n	3866 <xTaskResumeFromISR+0xe>

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    387a:	4b13      	ldr	r3, [pc, #76]	; (38c8 <xTaskResumeFromISR+0x70>)
    387c:	681e      	ldr	r6, [r3, #0]
    387e:	2e00      	cmp	r6, #0
    3880:	d118      	bne.n	38b4 <xTaskResumeFromISR+0x5c>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    3882:	4b12      	ldr	r3, [pc, #72]	; (38cc <xTaskResumeFromISR+0x74>)
    3884:	681a      	ldr	r2, [r3, #0]
    3886:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3888:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
    388a:	42b0      	cmp	r0, r6
    388c:	416d      	adcs	r5, r5
				vListRemove(  &( pxTCB->xGenericListItem ) );
    388e:	1d26      	adds	r6, r4, #4
    3890:	1c30      	adds	r0, r6, #0
    3892:	f7ff fb07 	bl	2ea4 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    3896:	4a0e      	ldr	r2, [pc, #56]	; (38d0 <xTaskResumeFromISR+0x78>)
    3898:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    389a:	6811      	ldr	r1, [r2, #0]
    389c:	428b      	cmp	r3, r1
    389e:	d900      	bls.n	38a2 <xTaskResumeFromISR+0x4a>
    38a0:	6013      	str	r3, [r2, #0]
    38a2:	009a      	lsls	r2, r3, #2
    38a4:	18d0      	adds	r0, r2, r3
    38a6:	4c0b      	ldr	r4, [pc, #44]	; (38d4 <xTaskResumeFromISR+0x7c>)
    38a8:	0081      	lsls	r1, r0, #2
    38aa:	1860      	adds	r0, r4, r1
    38ac:	1c31      	adds	r1, r6, #0
    38ae:	f7ff facd 	bl	2e4c <vListInsertEnd>
    38b2:	e7d8      	b.n	3866 <xTaskResumeFromISR+0xe>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    38b4:	1c21      	adds	r1, r4, #0
    38b6:	3118      	adds	r1, #24
    38b8:	f7ff fac8 	bl	2e4c <vListInsertEnd>
    38bc:	e7d3      	b.n	3866 <xTaskResumeFromISR+0xe>
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	40000b34 	.word	0x40000b34
    38c4:	40000ad8 	.word	0x40000ad8
    38c8:	40000b74 	.word	0x40000b74
    38cc:	40000afc 	.word	0x40000afc
    38d0:	40000a5c 	.word	0x40000a5c
    38d4:	40000a68 	.word	0x40000a68

000038d8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    38d8:	b530      	push	{r4, r5, lr}
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    38da:	2400      	movs	r4, #0
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    38dc:	b085      	sub	sp, #20
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    38de:	480d      	ldr	r0, [pc, #52]	; (3914 <vTaskStartScheduler+0x3c>)
    38e0:	490d      	ldr	r1, [pc, #52]	; (3918 <vTaskStartScheduler+0x40>)
    38e2:	2268      	movs	r2, #104	; 0x68
    38e4:	1c23      	adds	r3, r4, #0
    38e6:	9400      	str	r4, [sp, #0]
    38e8:	9401      	str	r4, [sp, #4]
    38ea:	9402      	str	r4, [sp, #8]
    38ec:	9403      	str	r4, [sp, #12]
    38ee:	f7ff fdd5 	bl	349c <xTaskGenericCreate>
    38f2:	1c05      	adds	r5, r0, #0

	if( xReturn == pdPASS )
    38f4:	2801      	cmp	r0, #1
    38f6:	d003      	beq.n	3900 <vTaskStartScheduler+0x28>
		else
		{
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}
}
    38f8:	b005      	add	sp, #20
    38fa:	bc30      	pop	{r4, r5}
    38fc:	bc01      	pop	{r0}
    38fe:	4700      	bx	r0
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3900:	f00a f972 	bl	dbe8 <__vPortDisableInterruptsFromThumb_from_thumb>

		xSchedulerRunning = pdTRUE;
		xTickCount = ( portTickType ) 0;
    3904:	4b05      	ldr	r3, [pc, #20]	; (391c <vTaskStartScheduler+0x44>)

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();

		xSchedulerRunning = pdTRUE;
    3906:	4806      	ldr	r0, [pc, #24]	; (3920 <vTaskStartScheduler+0x48>)
    3908:	6005      	str	r5, [r0, #0]
		xTickCount = ( portTickType ) 0;
    390a:	601c      	str	r4, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
    390c:	f000 fc8e 	bl	422c <xPortStartScheduler>
    3910:	e7f2      	b.n	38f8 <vTaskStartScheduler+0x20>
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	00003ca9 	.word	0x00003ca9
    3918:	0000e90c 	.word	0x0000e90c
    391c:	40000a64 	.word	0x40000a64
    3920:	40000aec 	.word	0x40000aec

00003924 <vTaskEndScheduler>:
	}
}
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3924:	b508      	push	{r3, lr}
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3926:	f00a f95f 	bl	dbe8 <__vPortDisableInterruptsFromThumb_from_thumb>
	xSchedulerRunning = pdFALSE;
    392a:	4b04      	ldr	r3, [pc, #16]	; (393c <vTaskEndScheduler+0x18>)
    392c:	2200      	movs	r2, #0
    392e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3930:	f000 fcb0 	bl	4294 <vPortEndScheduler>
}
    3934:	bc08      	pop	{r3}
    3936:	bc01      	pop	{r0}
    3938:	4700      	bx	r0
    393a:	46c0      	nop			; (mov r8, r8)
    393c:	40000aec 	.word	0x40000aec

00003940 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3940:	4b02      	ldr	r3, [pc, #8]	; (394c <vTaskSuspendAll+0xc>)
    3942:	681a      	ldr	r2, [r3, #0]
    3944:	3201      	adds	r2, #1
    3946:	601a      	str	r2, [r3, #0]
}
    3948:	4770      	bx	lr
    394a:	46c0      	nop			; (mov r8, r8)
    394c:	40000b74 	.word	0x40000b74

00003950 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3950:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portENTER_CRITICAL();
    3952:	f00a f985 	bl	dc60 <__vPortEnterCritical_from_thumb>
	{
		xTicks = xTickCount;
    3956:	4b04      	ldr	r3, [pc, #16]	; (3968 <xTaskGetTickCount+0x18>)
    3958:	681c      	ldr	r4, [r3, #0]
	}
	portEXIT_CRITICAL();
    395a:	f00a f949 	bl	dbf0 <__vPortExitCritical_from_thumb>

	return xTicks;
}
    395e:	1c20      	adds	r0, r4, #0
    3960:	bc10      	pop	{r4}
    3962:	bc02      	pop	{r1}
    3964:	4708      	bx	r1
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	40000a64 	.word	0x40000a64

0000396c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
	return xTickCount;
    396c:	4b01      	ldr	r3, [pc, #4]	; (3974 <xTaskGetTickCountFromISR+0x8>)
    396e:	6818      	ldr	r0, [r3, #0]
}
    3970:	4770      	bx	lr
    3972:	46c0      	nop			; (mov r8, r8)
    3974:	40000a64 	.word	0x40000a64

00003978 <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3978:	4b01      	ldr	r3, [pc, #4]	; (3980 <uxTaskGetNumberOfTasks+0x8>)
    397a:	6818      	ldr	r0, [r3, #0]
}
    397c:	4770      	bx	lr
    397e:	46c0      	nop			; (mov r8, r8)
    3980:	40000b48 	.word	0x40000b48

00003984 <vTaskStartTrace>:
/*----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
	{
    3984:	b538      	push	{r3, r4, r5, lr}
    3986:	1c04      	adds	r4, r0, #0
    3988:	1c0d      	adds	r5, r1, #0
		portENTER_CRITICAL();
    398a:	f00a f969 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			pcTraceBuffer = ( signed char * )pcBuffer;
    398e:	4a08      	ldr	r2, [pc, #32]	; (39b0 <vTaskStartTrace+0x2c>)
			pcTraceBufferStart = pcBuffer;
    3990:	4908      	ldr	r1, [pc, #32]	; (39b4 <vTaskStartTrace+0x30>)
			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
    3992:	3d08      	subs	r5, #8
    3994:	4808      	ldr	r0, [pc, #32]	; (39b8 <vTaskStartTrace+0x34>)
			xTracing = pdTRUE;
    3996:	4b09      	ldr	r3, [pc, #36]	; (39bc <vTaskStartTrace+0x38>)

	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
	{
		portENTER_CRITICAL();
		{
			pcTraceBuffer = ( signed char * )pcBuffer;
    3998:	6014      	str	r4, [r2, #0]
			pcTraceBufferStart = pcBuffer;
    399a:	600c      	str	r4, [r1, #0]
			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
			xTracing = pdTRUE;
    399c:	2201      	movs	r2, #1
	{
		portENTER_CRITICAL();
		{
			pcTraceBuffer = ( signed char * )pcBuffer;
			pcTraceBufferStart = pcBuffer;
			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
    399e:	1964      	adds	r4, r4, r5
    39a0:	6004      	str	r4, [r0, #0]
			xTracing = pdTRUE;
    39a2:	601a      	str	r2, [r3, #0]
		}
		portEXIT_CRITICAL();
    39a4:	f00a f924 	bl	dbf0 <__vPortExitCritical_from_thumb>
	}
    39a8:	bc38      	pop	{r3, r4, r5}
    39aa:	bc01      	pop	{r0}
    39ac:	4700      	bx	r0
    39ae:	46c0      	nop			; (mov r8, r8)
    39b0:	40000af8 	.word	0x40000af8
    39b4:	40000b7c 	.word	0x40000b7c
    39b8:	40000b80 	.word	0x40000b80
    39bc:	40000ad0 	.word	0x40000ad0

000039c0 <ulTaskEndTrace>:
/*----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned long ulTaskEndTrace( void )
	{
    39c0:	b508      	push	{r3, lr}
	unsigned long ulBufferLength;

		portENTER_CRITICAL();
    39c2:	f00a f94d 	bl	dc60 <__vPortEnterCritical_from_thumb>
			xTracing = pdFALSE;
    39c6:	4b06      	ldr	r3, [pc, #24]	; (39e0 <ulTaskEndTrace+0x20>)
    39c8:	2000      	movs	r0, #0
    39ca:	6018      	str	r0, [r3, #0]
		portEXIT_CRITICAL();
    39cc:	f00a f910 	bl	dbf0 <__vPortExitCritical_from_thumb>

		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
    39d0:	4a04      	ldr	r2, [pc, #16]	; (39e4 <ulTaskEndTrace+0x24>)
    39d2:	4905      	ldr	r1, [pc, #20]	; (39e8 <ulTaskEndTrace+0x28>)
    39d4:	6810      	ldr	r0, [r2, #0]
    39d6:	680b      	ldr	r3, [r1, #0]
    39d8:	1ac0      	subs	r0, r0, r3

		return ulBufferLength;
	}
    39da:	bc08      	pop	{r3}
    39dc:	bc02      	pop	{r1}
    39de:	4708      	bx	r1
    39e0:	40000ad0 	.word	0x40000ad0
    39e4:	40000af8 	.word	0x40000af8
    39e8:	40000b7c 	.word	0x40000b7c

000039ec <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
    39ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39ee:	464f      	mov	r7, r9
    39f0:	4646      	mov	r6, r8
    39f2:	b4c0      	push	{r6, r7}
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    39f4:	4829      	ldr	r0, [pc, #164]	; (3a9c <vTaskIncrementTick+0xb0>)
    39f6:	6803      	ldr	r3, [r0, #0]
    39f8:	2b00      	cmp	r3, #0
    39fa:	d148      	bne.n	3a8e <vTaskIncrementTick+0xa2>
	{
		++xTickCount;
    39fc:	4a28      	ldr	r2, [pc, #160]	; (3aa0 <vTaskIncrementTick+0xb4>)
    39fe:	6814      	ldr	r4, [r2, #0]
    3a00:	3401      	adds	r4, #1
    3a02:	6014      	str	r4, [r2, #0]
		if( xTickCount == ( portTickType ) 0 )
    3a04:	6811      	ldr	r1, [r2, #0]
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
	{
		++xTickCount;
    3a06:	4690      	mov	r8, r2
		if( xTickCount == ( portTickType ) 0 )
    3a08:	2900      	cmp	r1, #0
    3a0a:	d035      	beq.n	3a78 <vTaskIncrementTick+0x8c>
    3a0c:	4d25      	ldr	r5, [pc, #148]	; (3aa4 <vTaskIncrementTick+0xb8>)
			pxOverflowDelayedTaskList = pxTemp;
			xNumOfOverflows++;
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3a0e:	4b26      	ldr	r3, [pc, #152]	; (3aa8 <vTaskIncrementTick+0xbc>)
    3a10:	4e26      	ldr	r6, [pc, #152]	; (3aac <vTaskIncrementTick+0xc0>)
    3a12:	4699      	mov	r9, r3
    3a14:	e020      	b.n	3a58 <vTaskIncrementTick+0x6c>
    3a16:	682c      	ldr	r4, [r5, #0]
    3a18:	68e2      	ldr	r2, [r4, #12]
    3a1a:	68d4      	ldr	r4, [r2, #12]
    3a1c:	2c00      	cmp	r4, #0
    3a1e:	d01f      	beq.n	3a60 <vTaskIncrementTick+0x74>
    3a20:	4642      	mov	r2, r8
    3a22:	6813      	ldr	r3, [r2, #0]
    3a24:	6862      	ldr	r2, [r4, #4]
    3a26:	429a      	cmp	r2, r3
    3a28:	d81a      	bhi.n	3a60 <vTaskIncrementTick+0x74>
    3a2a:	1d27      	adds	r7, r4, #4
    3a2c:	1c38      	adds	r0, r7, #0
    3a2e:	f7ff fa39 	bl	2ea4 <vListRemove>
    3a32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3a34:	2800      	cmp	r0, #0
    3a36:	d003      	beq.n	3a40 <vTaskIncrementTick+0x54>
    3a38:	1c20      	adds	r0, r4, #0
    3a3a:	3018      	adds	r0, #24
    3a3c:	f7ff fa32 	bl	2ea4 <vListRemove>
    3a40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3a42:	6832      	ldr	r2, [r6, #0]
    3a44:	4293      	cmp	r3, r2
    3a46:	d900      	bls.n	3a4a <vTaskIncrementTick+0x5e>
    3a48:	6033      	str	r3, [r6, #0]
    3a4a:	0099      	lsls	r1, r3, #2
    3a4c:	18cc      	adds	r4, r1, r3
    3a4e:	00a0      	lsls	r0, r4, #2
    3a50:	4448      	add	r0, r9
    3a52:	1c39      	adds	r1, r7, #0
    3a54:	f7ff f9fa 	bl	2e4c <vListInsertEnd>
    3a58:	6828      	ldr	r0, [r5, #0]
    3a5a:	6807      	ldr	r7, [r0, #0]
    3a5c:	2f00      	cmp	r7, #0
    3a5e:	d1da      	bne.n	3a16 <vTaskIncrementTick+0x2a>
    3a60:	4c13      	ldr	r4, [pc, #76]	; (3ab0 <vTaskIncrementTick+0xc4>)
	{
		extern void vApplicationTickHook( void );

		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == 0 )
    3a62:	6826      	ldr	r6, [r4, #0]
    3a64:	2e00      	cmp	r6, #0
    3a66:	d101      	bne.n	3a6c <vTaskIncrementTick+0x80>
		{
			vApplicationTickHook();
    3a68:	f7fd fa48 	bl	efc <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3a6c:	bc0c      	pop	{r2, r3}
    3a6e:	4690      	mov	r8, r2
    3a70:	4699      	mov	r9, r3
    3a72:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a74:	bc01      	pop	{r0}
    3a76:	4700      	bx	r0
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
    3a78:	4d0a      	ldr	r5, [pc, #40]	; (3aa4 <vTaskIncrementTick+0xb8>)
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3a7a:	4b0e      	ldr	r3, [pc, #56]	; (3ab4 <vTaskIncrementTick+0xc8>)
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
    3a7c:	6828      	ldr	r0, [r5, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3a7e:	6819      	ldr	r1, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
			xNumOfOverflows++;
    3a80:	4f0d      	ldr	r7, [pc, #52]	; (3ab8 <vTaskIncrementTick+0xcc>)

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3a82:	6029      	str	r1, [r5, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3a84:	6018      	str	r0, [r3, #0]
			xNumOfOverflows++;
    3a86:	683e      	ldr	r6, [r7, #0]
    3a88:	3601      	adds	r6, #1
    3a8a:	603e      	str	r6, [r7, #0]
    3a8c:	e7bf      	b.n	3a0e <vTaskIncrementTick+0x22>
		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
	}
	else
	{
		++uxMissedTicks;
    3a8e:	4c08      	ldr	r4, [pc, #32]	; (3ab0 <vTaskIncrementTick+0xc4>)
    3a90:	6825      	ldr	r5, [r4, #0]
    3a92:	3501      	adds	r5, #1
    3a94:	6025      	str	r5, [r4, #0]
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			extern void vApplicationTickHook( void );

			vApplicationTickHook();
    3a96:	f7fd fa31 	bl	efc <vApplicationTickHook>
    3a9a:	e7e2      	b.n	3a62 <vTaskIncrementTick+0x76>
    3a9c:	40000b74 	.word	0x40000b74
    3aa0:	40000a64 	.word	0x40000a64
    3aa4:	40000ad4 	.word	0x40000ad4
    3aa8:	40000a68 	.word	0x40000a68
    3aac:	40000a5c 	.word	0x40000a5c
    3ab0:	40000b78 	.word	0x40000b78
    3ab4:	40000ab8 	.word	0x40000ab8
    3ab8:	40000b84 	.word	0x40000b84

00003abc <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3abe:	4657      	mov	r7, sl
    3ac0:	464e      	mov	r6, r9
    3ac2:	4645      	mov	r5, r8
    3ac4:	b4e0      	push	{r5, r6, r7}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
    3ac6:	f00a f8cb 	bl	dc60 <__vPortEnterCritical_from_thumb>
	{
		--uxSchedulerSuspended;
    3aca:	4b2d      	ldr	r3, [pc, #180]	; (3b80 <xTaskResumeAll+0xc4>)
    3acc:	681a      	ldr	r2, [r3, #0]
    3ace:	3a01      	subs	r2, #1
    3ad0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3ad2:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3ad4:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3ad6:	42a3      	cmp	r3, r4
    3ad8:	d119      	bne.n	3b0e <xTaskResumeAll+0x52>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
    3ada:	482a      	ldr	r0, [pc, #168]	; (3b84 <xTaskResumeAll+0xc8>)
    3adc:	6804      	ldr	r4, [r0, #0]
    3ade:	2c00      	cmp	r4, #0
    3ae0:	d015      	beq.n	3b0e <xTaskResumeAll+0x52>
    3ae2:	469a      	mov	sl, r3
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3ae4:	4a28      	ldr	r2, [pc, #160]	; (3b88 <xTaskResumeAll+0xcc>)

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ae6:	4b29      	ldr	r3, [pc, #164]	; (3b8c <xTaskResumeAll+0xd0>)
    3ae8:	4d29      	ldr	r5, [pc, #164]	; (3b90 <xTaskResumeAll+0xd4>)
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3aea:	4e2a      	ldr	r6, [pc, #168]	; (3b94 <xTaskResumeAll+0xd8>)
    3aec:	4691      	mov	r9, r2

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3aee:	4698      	mov	r8, r3
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
    3af0:	682c      	ldr	r4, [r5, #0]
    3af2:	2c00      	cmp	r4, #0
    3af4:	d123      	bne.n	3b3e <xTaskResumeAll+0x82>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    3af6:	4c28      	ldr	r4, [pc, #160]	; (3b98 <xTaskResumeAll+0xdc>)
    3af8:	6823      	ldr	r3, [r4, #0]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d116      	bne.n	3b2c <xTaskResumeAll+0x70>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3afe:	2201      	movs	r2, #1
    3b00:	4592      	cmp	sl, r2
    3b02:	d016      	beq.n	3b32 <xTaskResumeAll+0x76>
    3b04:	4a25      	ldr	r2, [pc, #148]	; (3b9c <xTaskResumeAll+0xe0>)
    3b06:	6810      	ldr	r0, [r2, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3b08:	1c1c      	adds	r4, r3, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3b0a:	2801      	cmp	r0, #1
    3b0c:	d012      	beq.n	3b34 <xTaskResumeAll+0x78>
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	portEXIT_CRITICAL();
    3b0e:	f00a f86f 	bl	dbf0 <__vPortExitCritical_from_thumb>

	return xAlreadyYielded;
}
    3b12:	1c20      	adds	r0, r4, #0
    3b14:	bc1c      	pop	{r2, r3, r4}
    3b16:	4690      	mov	r8, r2
    3b18:	4699      	mov	r9, r3
    3b1a:	46a2      	mov	sl, r4
    3b1c:	bcf0      	pop	{r4, r5, r6, r7}
    3b1e:	bc02      	pop	{r1}
    3b20:	4708      	bx	r1
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
    3b22:	f7ff ff63 	bl	39ec <vTaskIncrementTick>
						--uxMissedTicks;
    3b26:	6825      	ldr	r5, [r4, #0]
    3b28:	3d01      	subs	r5, #1
    3b2a:	6025      	str	r5, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    3b2c:	6826      	ldr	r6, [r4, #0]
    3b2e:	2e00      	cmp	r6, #0
    3b30:	d1f7      	bne.n	3b22 <xTaskResumeAll+0x66>
    3b32:	4a1a      	ldr	r2, [pc, #104]	; (3b9c <xTaskResumeAll+0xe0>)
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    3b34:	2100      	movs	r1, #0
    3b36:	6011      	str	r1, [r2, #0]
					portYIELD_WITHIN_API();
    3b38:	df00      	svc	0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    3b3a:	2401      	movs	r4, #1
    3b3c:	e7e7      	b.n	3b0e <xTaskResumeAll+0x52>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
    3b3e:	68ef      	ldr	r7, [r5, #12]
    3b40:	68fc      	ldr	r4, [r7, #12]
    3b42:	2c00      	cmp	r4, #0
    3b44:	d0d7      	beq.n	3af6 <xTaskResumeAll+0x3a>
				{
					vListRemove( &( pxTCB->xEventListItem ) );
    3b46:	1c20      	adds	r0, r4, #0
    3b48:	3018      	adds	r0, #24
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b4a:	1d27      	adds	r7, r4, #4

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
    3b4c:	f7ff f9aa 	bl	2ea4 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b50:	1c38      	adds	r0, r7, #0
    3b52:	f7ff f9a7 	bl	2ea4 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3b58:	6832      	ldr	r2, [r6, #0]
    3b5a:	4293      	cmp	r3, r2
    3b5c:	d900      	bls.n	3b60 <xTaskResumeAll+0xa4>
    3b5e:	6033      	str	r3, [r6, #0]
    3b60:	0099      	lsls	r1, r3, #2
    3b62:	18c8      	adds	r0, r1, r3
    3b64:	0080      	lsls	r0, r0, #2
    3b66:	1c39      	adds	r1, r7, #0
    3b68:	4448      	add	r0, r9
    3b6a:	f7ff f96f 	bl	2e4c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b6e:	4642      	mov	r2, r8
    3b70:	6817      	ldr	r7, [r2, #0]
    3b72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    3b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b76:	4299      	cmp	r1, r3
    3b78:	d3ba      	bcc.n	3af0 <xTaskResumeAll+0x34>
					{
						xYieldRequired = pdTRUE;
    3b7a:	2301      	movs	r3, #1
    3b7c:	469a      	mov	sl, r3
    3b7e:	e7b7      	b.n	3af0 <xTaskResumeAll+0x34>
    3b80:	40000b74 	.word	0x40000b74
    3b84:	40000b48 	.word	0x40000b48
    3b88:	40000a68 	.word	0x40000a68
    3b8c:	40000afc 	.word	0x40000afc
    3b90:	40000ad8 	.word	0x40000ad8
    3b94:	40000a5c 	.word	0x40000a5c
    3b98:	40000b78 	.word	0x40000b78
    3b9c:	40000af0 	.word	0x40000af0

00003ba0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    3ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3ba2:	4f39      	ldr	r7, [pc, #228]	; (3c88 <vTaskList+0xe8>)
    3ba4:	683e      	ldr	r6, [r7, #0]
		vTaskSuspendAll();
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
    3ba6:	2400      	movs	r4, #0

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3ba8:	3601      	adds	r6, #1
    3baa:	603e      	str	r6, [r7, #0]
		vTaskSuspendAll();
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
    3bac:	7004      	strb	r4, [r0, #0]
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    3bae:	1c05      	adds	r5, r0, #0
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    3bb0:	f001 fd2c 	bl	560c <strlen>
    3bb4:	4935      	ldr	r1, [pc, #212]	; (3c8c <vTaskList+0xec>)
    3bb6:	2203      	movs	r2, #3
    3bb8:	1828      	adds	r0, r5, r0
    3bba:	f001 fb25 	bl	5208 <memcpy>

			uxQueue = uxTopUsedPriority + 1;
    3bbe:	4a34      	ldr	r2, [pc, #208]	; (3c90 <vTaskList+0xf0>)
    3bc0:	6814      	ldr	r4, [r2, #0]

			do
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3bc2:	00a0      	lsls	r0, r4, #2
    3bc4:	4e33      	ldr	r6, [pc, #204]	; (3c94 <vTaskList+0xf4>)
    3bc6:	1901      	adds	r1, r0, r4
    3bc8:	0089      	lsls	r1, r1, #2
    3bca:	5873      	ldr	r3, [r6, r1]
    3bcc:	2701      	movs	r7, #1
    3bce:	4027      	ands	r7, r4
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d146      	bne.n	3c62 <vTaskList+0xc2>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    3bd4:	2c00      	cmp	r4, #0
    3bd6:	d024      	beq.n	3c22 <vTaskList+0x82>
    3bd8:	2f00      	cmp	r7, #0
    3bda:	d008      	beq.n	3bee <vTaskList+0x4e>

			uxQueue = uxTopUsedPriority + 1;

			do
			{
				uxQueue--;
    3bdc:	3c01      	subs	r4, #1

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3bde:	00a7      	lsls	r7, r4, #2
    3be0:	1939      	adds	r1, r7, r4
    3be2:	0089      	lsls	r1, r1, #2
    3be4:	5872      	ldr	r2, [r6, r1]
    3be6:	2a00      	cmp	r2, #0
    3be8:	d114      	bne.n	3c14 <vTaskList+0x74>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    3bea:	2c00      	cmp	r4, #0
    3bec:	d019      	beq.n	3c22 <vTaskList+0x82>

			uxQueue = uxTopUsedPriority + 1;

			do
			{
				uxQueue--;
    3bee:	3c01      	subs	r4, #1

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3bf0:	00a0      	lsls	r0, r4, #2
    3bf2:	1901      	adds	r1, r0, r4
    3bf4:	0089      	lsls	r1, r1, #2
    3bf6:	5873      	ldr	r3, [r6, r1]
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	d0ef      	beq.n	3bdc <vTaskList+0x3c>

			uxQueue = uxTopUsedPriority + 1;

			do
			{
				uxQueue--;
    3bfc:	3c01      	subs	r4, #1

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    3bfe:	1871      	adds	r1, r6, r1
    3c00:	2252      	movs	r2, #82	; 0x52
    3c02:	1c28      	adds	r0, r5, #0

			do
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3c04:	00a7      	lsls	r7, r4, #2
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    3c06:	f7ff fbf7 	bl	33f8 <prvListTaskWithinSingleList>

			do
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3c0a:	1939      	adds	r1, r7, r4
    3c0c:	0089      	lsls	r1, r1, #2
    3c0e:	5872      	ldr	r2, [r6, r1]
    3c10:	2a00      	cmp	r2, #0
    3c12:	d0ea      	beq.n	3bea <vTaskList+0x4a>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    3c14:	1871      	adds	r1, r6, r1
    3c16:	1c28      	adds	r0, r5, #0
    3c18:	2252      	movs	r2, #82	; 0x52
    3c1a:	f7ff fbed 	bl	33f8 <prvListTaskWithinSingleList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    3c1e:	2c00      	cmp	r4, #0
    3c20:	d1e5      	bne.n	3bee <vTaskList+0x4e>

			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
    3c22:	4b1d      	ldr	r3, [pc, #116]	; (3c98 <vTaskList+0xf8>)
    3c24:	681c      	ldr	r4, [r3, #0]
    3c26:	6822      	ldr	r2, [r4, #0]
    3c28:	2a00      	cmp	r2, #0
    3c2a:	d126      	bne.n	3c7a <vTaskList+0xda>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
			}

			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
    3c2c:	4b1b      	ldr	r3, [pc, #108]	; (3c9c <vTaskList+0xfc>)
    3c2e:	681f      	ldr	r7, [r3, #0]
    3c30:	683e      	ldr	r6, [r7, #0]
    3c32:	2e00      	cmp	r6, #0
    3c34:	d11b      	bne.n	3c6e <vTaskList+0xce>
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
    3c36:	491a      	ldr	r1, [pc, #104]	; (3ca0 <vTaskList+0x100>)
    3c38:	680b      	ldr	r3, [r1, #0]
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d10c      	bne.n	3c58 <vTaskList+0xb8>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
    3c3e:	4919      	ldr	r1, [pc, #100]	; (3ca4 <vTaskList+0x104>)
    3c40:	6808      	ldr	r0, [r1, #0]
    3c42:	2800      	cmp	r0, #0
    3c44:	d003      	beq.n	3c4e <vTaskList+0xae>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, tskSUSPENDED_CHAR );
    3c46:	1c28      	adds	r0, r5, #0
    3c48:	2253      	movs	r2, #83	; 0x53
    3c4a:	f7ff fbd5 	bl	33f8 <prvListTaskWithinSingleList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    3c4e:	f7ff ff35 	bl	3abc <xTaskResumeAll>
	}
    3c52:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c54:	bc01      	pop	{r0}
    3c56:	4700      	bx	r0

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, tskDELETED_CHAR );
    3c58:	1c28      	adds	r0, r5, #0
    3c5a:	2244      	movs	r2, #68	; 0x44
    3c5c:	f7ff fbcc 	bl	33f8 <prvListTaskWithinSingleList>
    3c60:	e7ed      	b.n	3c3e <vTaskList+0x9e>
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    3c62:	1871      	adds	r1, r6, r1
    3c64:	1c28      	adds	r0, r5, #0
    3c66:	2252      	movs	r2, #82	; 0x52
    3c68:	f7ff fbc6 	bl	33f8 <prvListTaskWithinSingleList>
    3c6c:	e7b2      	b.n	3bd4 <vTaskList+0x34>
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
			}

			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
    3c6e:	6819      	ldr	r1, [r3, #0]
    3c70:	1c28      	adds	r0, r5, #0
    3c72:	2242      	movs	r2, #66	; 0x42
    3c74:	f7ff fbc0 	bl	33f8 <prvListTaskWithinSingleList>
    3c78:	e7dd      	b.n	3c36 <vTaskList+0x96>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );

			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
    3c7a:	6819      	ldr	r1, [r3, #0]
    3c7c:	1c28      	adds	r0, r5, #0
    3c7e:	2242      	movs	r2, #66	; 0x42
    3c80:	f7ff fbba 	bl	33f8 <prvListTaskWithinSingleList>
    3c84:	e7d2      	b.n	3c2c <vTaskList+0x8c>
    3c86:	46c0      	nop			; (mov r8, r8)
    3c88:	40000b74 	.word	0x40000b74
    3c8c:	0000e914 	.word	0x0000e914
    3c90:	40000b88 	.word	0x40000b88
    3c94:	40000a68 	.word	0x40000a68
    3c98:	40000ad4 	.word	0x40000ad4
    3c9c:	40000ab8 	.word	0x40000ab8
    3ca0:	40000abc 	.word	0x40000abc
    3ca4:	40000b34 	.word	0x40000b34

00003ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3caa:	464f      	mov	r7, r9
    3cac:	4646      	mov	r6, r8
    3cae:	b4c0      	push	{r6, r7}
    3cb0:	4a1a      	ldr	r2, [pc, #104]	; (3d1c <prvIdleTask+0x74>)
    3cb2:	4b1b      	ldr	r3, [pc, #108]	; (3d20 <prvIdleTask+0x78>)
    3cb4:	4c1b      	ldr	r4, [pc, #108]	; (3d24 <prvIdleTask+0x7c>)
    3cb6:	4f1c      	ldr	r7, [pc, #112]	; (3d28 <prvIdleTask+0x80>)
    3cb8:	4d1c      	ldr	r5, [pc, #112]	; (3d2c <prvIdleTask+0x84>)
    3cba:	4690      	mov	r8, r2
    3cbc:	4699      	mov	r9, r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    3cbe:	6820      	ldr	r0, [r4, #0]
    3cc0:	2800      	cmp	r0, #0
    3cc2:	d106      	bne.n	3cd2 <prvIdleTask+0x2a>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    3cc4:	682e      	ldr	r6, [r5, #0]
    3cc6:	2e01      	cmp	r6, #1
    3cc8:	d9f9      	bls.n	3cbe <prvIdleTask+0x16>
			{
				taskYIELD();
    3cca:	df00      	svc	0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    3ccc:	6820      	ldr	r0, [r4, #0]
    3cce:	2800      	cmp	r0, #0
    3cd0:	d0f8      	beq.n	3cc4 <prvIdleTask+0x1c>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3cd2:	6839      	ldr	r1, [r7, #0]
    3cd4:	3101      	adds	r1, #1
    3cd6:	6039      	str	r1, [r7, #0]
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3cd8:	4642      	mov	r2, r8
    3cda:	6816      	ldr	r6, [r2, #0]
			xTaskResumeAll();
    3cdc:	f7ff feee 	bl	3abc <xTaskResumeAll>

			if( !xListIsEmpty )
    3ce0:	2e00      	cmp	r6, #0
    3ce2:	d0ef      	beq.n	3cc4 <prvIdleTask+0x1c>
			{
				tskTCB *pxTCB;

				portENTER_CRITICAL();
    3ce4:	f009 ffbc 	bl	dc60 <__vPortEnterCritical_from_thumb>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    3ce8:	4643      	mov	r3, r8
    3cea:	681e      	ldr	r6, [r3, #0]
    3cec:	2e00      	cmp	r6, #0
    3cee:	d001      	beq.n	3cf4 <prvIdleTask+0x4c>
    3cf0:	68db      	ldr	r3, [r3, #12]
    3cf2:	68de      	ldr	r6, [r3, #12]
					vListRemove( &( pxTCB->xGenericListItem ) );
    3cf4:	1d30      	adds	r0, r6, #4
    3cf6:	f7ff f8d5 	bl	2ea4 <vListRemove>
					--uxCurrentNumberOfTasks;
    3cfa:	464a      	mov	r2, r9
    3cfc:	6811      	ldr	r1, [r2, #0]
    3cfe:	3901      	subs	r1, #1
    3d00:	6011      	str	r1, [r2, #0]
					--uxTasksDeleted;
    3d02:	6820      	ldr	r0, [r4, #0]
    3d04:	3801      	subs	r0, #1
    3d06:	6020      	str	r0, [r4, #0]
				}
				portEXIT_CRITICAL();
    3d08:	f009 ff72 	bl	dbf0 <__vPortExitCritical_from_thumb>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    3d0c:	6b30      	ldr	r0, [r6, #48]	; 0x30
    3d0e:	f000 fad1 	bl	42b4 <vPortFree>
		vPortFree( pxTCB );
    3d12:	1c30      	adds	r0, r6, #0
    3d14:	f000 face 	bl	42b4 <vPortFree>
    3d18:	e7d4      	b.n	3cc4 <prvIdleTask+0x1c>
    3d1a:	46c0      	nop			; (mov r8, r8)
    3d1c:	40000abc 	.word	0x40000abc
    3d20:	40000b48 	.word	0x40000b48
    3d24:	40000a60 	.word	0x40000a60
    3d28:	40000b74 	.word	0x40000b74
    3d2c:	40000a68 	.word	0x40000a68

00003d30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3d30:	b570      	push	{r4, r5, r6, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
    3d32:	2800      	cmp	r0, #0
    3d34:	d103      	bne.n	3d3e <vTaskDelay+0xe>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
		{
			portYIELD_WITHIN_API();
    3d36:	df00      	svc	0
		}
	}
    3d38:	bc70      	pop	{r4, r5, r6}
    3d3a:	bc01      	pop	{r0}
    3d3c:	4700      	bx	r0

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3d3e:	4c11      	ldr	r4, [pc, #68]	; (3d84 <vTaskDelay+0x54>)
    3d40:	6822      	ldr	r2, [r4, #0]
    3d42:	3201      	adds	r2, #1
    3d44:	6022      	str	r2, [r4, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3d46:	4e10      	ldr	r6, [pc, #64]	; (3d88 <vTaskDelay+0x58>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d48:	4c10      	ldr	r4, [pc, #64]	; (3d8c <vTaskDelay+0x5c>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3d4a:	6831      	ldr	r1, [r6, #0]
    3d4c:	1845      	adds	r5, r0, r1

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d4e:	6820      	ldr	r0, [r4, #0]
    3d50:	3004      	adds	r0, #4
    3d52:	f7ff f8a7 	bl	2ea4 <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3d56:	6820      	ldr	r0, [r4, #0]

				if( xTimeToWake < xTickCount )
    3d58:	6833      	ldr	r3, [r6, #0]
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3d5a:	6045      	str	r5, [r0, #4]

				if( xTimeToWake < xTickCount )
    3d5c:	429d      	cmp	r5, r3
    3d5e:	d30a      	bcc.n	3d76 <vTaskDelay+0x46>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d60:	4d0b      	ldr	r5, [pc, #44]	; (3d90 <vTaskDelay+0x60>)
    3d62:	6828      	ldr	r0, [r5, #0]
    3d64:	6821      	ldr	r1, [r4, #0]
    3d66:	3104      	adds	r1, #4
    3d68:	f7ff f87e 	bl	2e68 <vListInsert>
				}
			}
			xAlreadyYielded = xTaskResumeAll();
    3d6c:	f7ff fea6 	bl	3abc <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    3d70:	2800      	cmp	r0, #0
    3d72:	d1e1      	bne.n	3d38 <vTaskDelay+0x8>
    3d74:	e7df      	b.n	3d36 <vTaskDelay+0x6>

				if( xTimeToWake < xTickCount )
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d76:	4b07      	ldr	r3, [pc, #28]	; (3d94 <vTaskDelay+0x64>)
    3d78:	6818      	ldr	r0, [r3, #0]
    3d7a:	6821      	ldr	r1, [r4, #0]
    3d7c:	3104      	adds	r1, #4
    3d7e:	f7ff f873 	bl	2e68 <vListInsert>
    3d82:	e7f3      	b.n	3d6c <vTaskDelay+0x3c>
    3d84:	40000b74 	.word	0x40000b74
    3d88:	40000a64 	.word	0x40000a64
    3d8c:	40000afc 	.word	0x40000afc
    3d90:	40000ad4 	.word	0x40000ad4
    3d94:	40000ab8 	.word	0x40000ab8

00003d98 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3d98:	b570      	push	{r4, r5, r6, lr}

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3d9a:	4b1a      	ldr	r3, [pc, #104]	; (3e04 <vTaskDelayUntil+0x6c>)
    3d9c:	681c      	ldr	r4, [r3, #0]
    3d9e:	3401      	adds	r4, #1
    3da0:	601c      	str	r4, [r3, #0]
		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xTickCount < *pxPreviousWakeTime )
    3da2:	4d19      	ldr	r5, [pc, #100]	; (3e08 <vTaskDelayUntil+0x70>)
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3da4:	6803      	ldr	r3, [r0, #0]

			if( xTickCount < *pxPreviousWakeTime )
    3da6:	682a      	ldr	r2, [r5, #0]
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3da8:	18cc      	adds	r4, r1, r3

			if( xTickCount < *pxPreviousWakeTime )
    3daa:	4293      	cmp	r3, r2
    3dac:	d91d      	bls.n	3dea <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3dae:	42a3      	cmp	r3, r4
    3db0:	d925      	bls.n	3dfe <vTaskDelayUntil+0x66>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3db2:	682b      	ldr	r3, [r5, #0]
    3db4:	429c      	cmp	r4, r3
    3db6:	d922      	bls.n	3dfe <vTaskDelayUntil+0x66>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3db8:	4e14      	ldr	r6, [pc, #80]	; (3e0c <vTaskDelayUntil+0x74>)
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3dba:	6004      	str	r4, [r0, #0]
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3dbc:	6830      	ldr	r0, [r6, #0]
    3dbe:	3004      	adds	r0, #4
    3dc0:	f7ff f870 	bl	2ea4 <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3dc4:	6832      	ldr	r2, [r6, #0]

				if( xTimeToWake < xTickCount )
    3dc6:	682b      	ldr	r3, [r5, #0]
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3dc8:	6054      	str	r4, [r2, #4]

				if( xTimeToWake < xTickCount )
    3dca:	429c      	cmp	r4, r3
    3dcc:	d310      	bcc.n	3df0 <vTaskDelayUntil+0x58>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3dce:	4910      	ldr	r1, [pc, #64]	; (3e10 <vTaskDelayUntil+0x78>)
    3dd0:	6808      	ldr	r0, [r1, #0]
    3dd2:	6831      	ldr	r1, [r6, #0]
    3dd4:	3104      	adds	r1, #4
    3dd6:	f7ff f847 	bl	2e68 <vListInsert>
				}
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3dda:	f7ff fe6f 	bl	3abc <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    3dde:	2800      	cmp	r0, #0
    3de0:	d100      	bne.n	3de4 <vTaskDelayUntil+0x4c>
		{
			portYIELD_WITHIN_API();
    3de2:	df00      	svc	0
		}
	}
    3de4:	bc70      	pop	{r4, r5, r6}
    3de6:	bc01      	pop	{r0}
    3de8:	4700      	bx	r0
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3dea:	42a3      	cmp	r3, r4
    3dec:	d8e4      	bhi.n	3db8 <vTaskDelayUntil+0x20>
    3dee:	e7e0      	b.n	3db2 <vTaskDelayUntil+0x1a>

				if( xTimeToWake < xTickCount )
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3df0:	4808      	ldr	r0, [pc, #32]	; (3e14 <vTaskDelayUntil+0x7c>)
    3df2:	6800      	ldr	r0, [r0, #0]
    3df4:	6831      	ldr	r1, [r6, #0]
    3df6:	3104      	adds	r1, #4
    3df8:	f7ff f836 	bl	2e68 <vListInsert>
    3dfc:	e7ed      	b.n	3dda <vTaskDelayUntil+0x42>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3dfe:	6004      	str	r4, [r0, #0]
    3e00:	e7eb      	b.n	3dda <vTaskDelayUntil+0x42>
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	40000b74 	.word	0x40000b74
    3e08:	40000a64 	.word	0x40000a64
    3e0c:	40000afc 	.word	0x40000afc
    3e10:	40000ad4 	.word	0x40000ad4
    3e14:	40000ab8 	.word	0x40000ab8

00003e18 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3e18:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3e1a:	4827      	ldr	r0, [pc, #156]	; (3eb8 <vTaskSwitchContext+0xa0>)
    3e1c:	6803      	ldr	r3, [r0, #0]
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d132      	bne.n	3e88 <vTaskSwitchContext+0x70>

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3e22:	4b26      	ldr	r3, [pc, #152]	; (3ebc <vTaskSwitchContext+0xa4>)
    3e24:	4826      	ldr	r0, [pc, #152]	; (3ec0 <vTaskSwitchContext+0xa8>)
    3e26:	681a      	ldr	r2, [r3, #0]
    3e28:	e003      	b.n	3e32 <vTaskSwitchContext+0x1a>
	{
		--uxTopReadyPriority;
    3e2a:	681c      	ldr	r4, [r3, #0]
    3e2c:	3c01      	subs	r4, #1
    3e2e:	601c      	str	r4, [r3, #0]

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3e30:	681a      	ldr	r2, [r3, #0]
    3e32:	0094      	lsls	r4, r2, #2
    3e34:	18a1      	adds	r1, r4, r2
    3e36:	008a      	lsls	r2, r1, #2
    3e38:	5885      	ldr	r5, [r0, r2]
    3e3a:	2d00      	cmp	r5, #0
    3e3c:	d0f5      	beq.n	3e2a <vTaskSwitchContext+0x12>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3e3e:	681c      	ldr	r4, [r3, #0]
    3e40:	00a1      	lsls	r1, r4, #2
    3e42:	190a      	adds	r2, r1, r4
    3e44:	0095      	lsls	r5, r2, #2
    3e46:	1942      	adds	r2, r0, r5
    3e48:	6853      	ldr	r3, [r2, #4]
    3e4a:	3508      	adds	r5, #8
    3e4c:	685b      	ldr	r3, [r3, #4]
    3e4e:	1940      	adds	r0, r0, r5
    3e50:	6053      	str	r3, [r2, #4]
    3e52:	4283      	cmp	r3, r0
    3e54:	d02c      	beq.n	3eb0 <vTaskSwitchContext+0x98>

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    3e56:	4a1b      	ldr	r2, [pc, #108]	; (3ec4 <vTaskSwitchContext+0xac>)
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3e58:	68dd      	ldr	r5, [r3, #12]

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    3e5a:	6810      	ldr	r0, [r2, #0]
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3e5c:	4b1a      	ldr	r3, [pc, #104]	; (3ec8 <vTaskSwitchContext+0xb0>)
    3e5e:	601d      	str	r5, [r3, #0]

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    3e60:	2800      	cmp	r0, #0
    3e62:	d00e      	beq.n	3e82 <vTaskSwitchContext+0x6a>
    3e64:	681d      	ldr	r5, [r3, #0]
    3e66:	4819      	ldr	r0, [pc, #100]	; (3ecc <vTaskSwitchContext+0xb4>)
    3e68:	6c2c      	ldr	r4, [r5, #64]	; 0x40
    3e6a:	6801      	ldr	r1, [r0, #0]
    3e6c:	428c      	cmp	r4, r1
    3e6e:	d008      	beq.n	3e82 <vTaskSwitchContext+0x6a>
    3e70:	4917      	ldr	r1, [pc, #92]	; (3ed0 <vTaskSwitchContext+0xb8>)
    3e72:	4d18      	ldr	r5, [pc, #96]	; (3ed4 <vTaskSwitchContext+0xbc>)
    3e74:	680c      	ldr	r4, [r1, #0]
    3e76:	682d      	ldr	r5, [r5, #0]
    3e78:	3408      	adds	r4, #8
    3e7a:	42a5      	cmp	r5, r4
    3e7c:	d808      	bhi.n	3e90 <vTaskSwitchContext+0x78>
    3e7e:	2100      	movs	r1, #0
    3e80:	6011      	str	r1, [r2, #0]
}
    3e82:	bc30      	pop	{r4, r5}
    3e84:	bc01      	pop	{r0}
    3e86:	4700      	bx	r0
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3e88:	4913      	ldr	r1, [pc, #76]	; (3ed8 <vTaskSwitchContext+0xc0>)
    3e8a:	2201      	movs	r2, #1
    3e8c:	600a      	str	r2, [r1, #0]
		return;
    3e8e:	e7f8      	b.n	3e82 <vTaskSwitchContext+0x6a>
	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    3e90:	681c      	ldr	r4, [r3, #0]
    3e92:	4a12      	ldr	r2, [pc, #72]	; (3edc <vTaskSwitchContext+0xc4>)
    3e94:	6c24      	ldr	r4, [r4, #64]	; 0x40
    3e96:	680b      	ldr	r3, [r1, #0]
    3e98:	6004      	str	r4, [r0, #0]
    3e9a:	6815      	ldr	r5, [r2, #0]
    3e9c:	6808      	ldr	r0, [r1, #0]
    3e9e:	3004      	adds	r0, #4
    3ea0:	601d      	str	r5, [r3, #0]
    3ea2:	6008      	str	r0, [r1, #0]
    3ea4:	680a      	ldr	r2, [r1, #0]
    3ea6:	680b      	ldr	r3, [r1, #0]
    3ea8:	3304      	adds	r3, #4
    3eaa:	6014      	str	r4, [r2, #0]
    3eac:	600b      	str	r3, [r1, #0]
    3eae:	e7e8      	b.n	3e82 <vTaskSwitchContext+0x6a>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	6053      	str	r3, [r2, #4]
    3eb4:	e7cf      	b.n	3e56 <vTaskSwitchContext+0x3e>
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	40000b74 	.word	0x40000b74
    3ebc:	40000a5c 	.word	0x40000a5c
    3ec0:	40000a68 	.word	0x40000a68
    3ec4:	40000ad0 	.word	0x40000ad0
    3ec8:	40000afc 	.word	0x40000afc
    3ecc:	400008c4 	.word	0x400008c4
    3ed0:	40000af8 	.word	0x40000af8
    3ed4:	40000b80 	.word	0x40000b80
    3ed8:	40000af0 	.word	0x40000af0
    3edc:	40000a64 	.word	0x40000a64

00003ee0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    3ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ee2:	1c04      	adds	r4, r0, #0
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    3ee4:	f009 febc 	bl	dc60 <__vPortEnterCritical_from_thumb>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    3ee8:	4e16      	ldr	r6, [pc, #88]	; (3f44 <vTaskSuspend+0x64>)
    3eea:	6833      	ldr	r3, [r6, #0]
    3eec:	429c      	cmp	r4, r3
    3eee:	d024      	beq.n	3f3a <vTaskSuspend+0x5a>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3ef0:	1e25      	subs	r5, r4, #0
    3ef2:	d022      	beq.n	3f3a <vTaskSuspend+0x5a>

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3ef4:	1d2f      	adds	r7, r5, #4
    3ef6:	1c38      	adds	r0, r7, #0
    3ef8:	f7fe ffd4 	bl	2ea4 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    3efc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    3efe:	2800      	cmp	r0, #0
    3f00:	d003      	beq.n	3f0a <vTaskSuspend+0x2a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3f02:	1c28      	adds	r0, r5, #0
    3f04:	3018      	adds	r0, #24
    3f06:	f7fe ffcd 	bl	2ea4 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3f0a:	480f      	ldr	r0, [pc, #60]	; (3f48 <vTaskSuspend+0x68>)
    3f0c:	1c39      	adds	r1, r7, #0
    3f0e:	f7fe ff9d 	bl	2e4c <vListInsertEnd>
		}
		portEXIT_CRITICAL();
    3f12:	f009 fe6d 	bl	dbf0 <__vPortExitCritical_from_thumb>

		if( ( void * ) pxTaskToSuspend == NULL )
    3f16:	2c00      	cmp	r4, #0
    3f18:	d002      	beq.n	3f20 <vTaskSuspend+0x40>
				{
					vTaskSwitchContext();
				}
			}
		}
	}
    3f1a:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3f1c:	bc01      	pop	{r0}
    3f1e:	4700      	bx	r0
		}
		portEXIT_CRITICAL();

		if( ( void * ) pxTaskToSuspend == NULL )
		{
			if( xSchedulerRunning != pdFALSE )
    3f20:	4a0a      	ldr	r2, [pc, #40]	; (3f4c <vTaskSuspend+0x6c>)
    3f22:	6811      	ldr	r1, [r2, #0]
    3f24:	2900      	cmp	r1, #0
    3f26:	d106      	bne.n	3f36 <vTaskSuspend+0x56>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( uxCurrentNumberOfTasks == 1 )
    3f28:	4f09      	ldr	r7, [pc, #36]	; (3f50 <vTaskSuspend+0x70>)
    3f2a:	683d      	ldr	r5, [r7, #0]
    3f2c:	2d01      	cmp	r5, #1
    3f2e:	d007      	beq.n	3f40 <vTaskSuspend+0x60>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
    3f30:	f7ff ff72 	bl	3e18 <vTaskSwitchContext>
    3f34:	e7f1      	b.n	3f1a <vTaskSuspend+0x3a>
		if( ( void * ) pxTaskToSuspend == NULL )
		{
			if( xSchedulerRunning != pdFALSE )
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3f36:	df00      	svc	0
    3f38:	e7ef      	b.n	3f1a <vTaskSuspend+0x3a>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3f3a:	6835      	ldr	r5, [r6, #0]
    3f3c:	2400      	movs	r4, #0
    3f3e:	e7d9      	b.n	3ef4 <vTaskSuspend+0x14>
				{
					/* No other tasks are defined, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3f40:	6034      	str	r4, [r6, #0]
    3f42:	e7ea      	b.n	3f1a <vTaskSuspend+0x3a>
    3f44:	40000afc 	.word	0x40000afc
    3f48:	40000b34 	.word	0x40000b34
    3f4c:	40000aec 	.word	0x40000aec
    3f50:	40000b48 	.word	0x40000b48

00003f54 <vTaskPlaceOnEventList>:
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3f54:	b538      	push	{r3, r4, r5, lr}
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3f56:	4c15      	ldr	r4, [pc, #84]	; (3fac <vTaskPlaceOnEventList+0x58>)
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3f58:	1c0d      	adds	r5, r1, #0
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3f5a:	6821      	ldr	r1, [r4, #0]
    3f5c:	3118      	adds	r1, #24
    3f5e:	f7fe ff83 	bl	2e68 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f62:	6820      	ldr	r0, [r4, #0]
    3f64:	3004      	adds	r0, #4
    3f66:	f7fe ff9d 	bl	2ea4 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3f6a:	1c6b      	adds	r3, r5, #1
    3f6c:	d017      	beq.n	3f9e <vTaskPlaceOnEventList+0x4a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3f6e:	4810      	ldr	r0, [pc, #64]	; (3fb0 <vTaskPlaceOnEventList+0x5c>)
    3f70:	6801      	ldr	r1, [r0, #0]

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3f72:	6822      	ldr	r2, [r4, #0]

			if( xTimeToWake < xTickCount )
    3f74:	6803      	ldr	r3, [r0, #0]
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3f76:	186d      	adds	r5, r5, r1

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3f78:	6055      	str	r5, [r2, #4]

			if( xTimeToWake < xTickCount )
    3f7a:	429d      	cmp	r5, r3
    3f7c:	d308      	bcc.n	3f90 <vTaskPlaceOnEventList+0x3c>
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
			}
			else
			{
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f7e:	4d0d      	ldr	r5, [pc, #52]	; (3fb4 <vTaskPlaceOnEventList+0x60>)
    3f80:	6828      	ldr	r0, [r5, #0]
    3f82:	6821      	ldr	r1, [r4, #0]
    3f84:	3104      	adds	r1, #4
    3f86:	f7fe ff6f 	bl	2e68 <vListInsert>
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
			}
	}
	#endif
}
    3f8a:	bc38      	pop	{r3, r4, r5}
    3f8c:	bc01      	pop	{r0}
    3f8e:	4700      	bx	r0
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

			if( xTimeToWake < xTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow list. */
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f90:	4b09      	ldr	r3, [pc, #36]	; (3fb8 <vTaskPlaceOnEventList+0x64>)
    3f92:	6818      	ldr	r0, [r3, #0]
    3f94:	6821      	ldr	r1, [r4, #0]
    3f96:	3104      	adds	r1, #4
    3f98:	f7fe ff66 	bl	2e68 <vListInsert>
    3f9c:	e7f5      	b.n	3f8a <vTaskPlaceOnEventList+0x36>
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f9e:	6821      	ldr	r1, [r4, #0]
    3fa0:	4806      	ldr	r0, [pc, #24]	; (3fbc <vTaskPlaceOnEventList+0x68>)
    3fa2:	3104      	adds	r1, #4
    3fa4:	f7fe ff52 	bl	2e4c <vListInsertEnd>
    3fa8:	e7ef      	b.n	3f8a <vTaskPlaceOnEventList+0x36>
    3faa:	46c0      	nop			; (mov r8, r8)
    3fac:	40000afc 	.word	0x40000afc
    3fb0:	40000a64 	.word	0x40000a64
    3fb4:	40000ad4 	.word	0x40000ad4
    3fb8:	40000ab8 	.word	0x40000ab8
    3fbc:	40000b34 	.word	0x40000b34

00003fc0 <xTaskRemoveFromEventList>:
	#endif
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3fc0:	b538      	push	{r3, r4, r5, lr}
	it to the ready list.

	If an event is for a queue that is locked then this function will never
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3fc2:	6804      	ldr	r4, [r0, #0]
    3fc4:	2c00      	cmp	r4, #0
    3fc6:	d001      	beq.n	3fcc <xTaskRemoveFromEventList+0xc>
    3fc8:	68c3      	ldr	r3, [r0, #12]
    3fca:	68dc      	ldr	r4, [r3, #12]
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3fcc:	1c25      	adds	r5, r4, #0
    3fce:	3518      	adds	r5, #24
    3fd0:	1c28      	adds	r0, r5, #0
    3fd2:	f7fe ff67 	bl	2ea4 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3fd6:	4913      	ldr	r1, [pc, #76]	; (4024 <xTaskRemoveFromEventList+0x64>)
    3fd8:	6808      	ldr	r0, [r1, #0]
    3fda:	2800      	cmp	r0, #0
    3fdc:	d11a      	bne.n	4014 <xTaskRemoveFromEventList+0x54>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3fde:	1d25      	adds	r5, r4, #4
    3fe0:	1c28      	adds	r0, r5, #0
    3fe2:	f7fe ff5f 	bl	2ea4 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3fe6:	4a10      	ldr	r2, [pc, #64]	; (4028 <xTaskRemoveFromEventList+0x68>)
    3fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3fea:	6811      	ldr	r1, [r2, #0]
    3fec:	428b      	cmp	r3, r1
    3fee:	d816      	bhi.n	401e <xTaskRemoveFromEventList+0x5e>
    3ff0:	0099      	lsls	r1, r3, #2
    3ff2:	18c8      	adds	r0, r1, r3
    3ff4:	4a0d      	ldr	r2, [pc, #52]	; (402c <xTaskRemoveFromEventList+0x6c>)
    3ff6:	0083      	lsls	r3, r0, #2
    3ff8:	18d0      	adds	r0, r2, r3
    3ffa:	1c29      	adds	r1, r5, #0
    3ffc:	f7fe ff26 	bl	2e4c <vListInsertEnd>
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4000:	4b0b      	ldr	r3, [pc, #44]	; (4030 <xTaskRemoveFromEventList+0x70>)
    4002:	681a      	ldr	r2, [r3, #0]
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4004:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    4006:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    4008:	2000      	movs	r0, #0
    400a:	42ac      	cmp	r4, r5
    400c:	4140      	adcs	r0, r0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    400e:	bc38      	pop	{r3, r4, r5}
    4010:	bc02      	pop	{r1}
    4012:	4708      	bx	r1
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4014:	4807      	ldr	r0, [pc, #28]	; (4034 <xTaskRemoveFromEventList+0x74>)
    4016:	1c29      	adds	r1, r5, #0
    4018:	f7fe ff18 	bl	2e4c <vListInsertEnd>
    401c:	e7f0      	b.n	4000 <xTaskRemoveFromEventList+0x40>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    401e:	6013      	str	r3, [r2, #0]
    4020:	e7e6      	b.n	3ff0 <xTaskRemoveFromEventList+0x30>
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	40000b74 	.word	0x40000b74
    4028:	40000a5c 	.word	0x40000a5c
    402c:	40000a68 	.word	0x40000a68
    4030:	40000afc 	.word	0x40000afc
    4034:	40000ad8 	.word	0x40000ad8

00004038 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4038:	4b03      	ldr	r3, [pc, #12]	; (4048 <vTaskSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
    403a:	4904      	ldr	r1, [pc, #16]	; (404c <vTaskSetTimeOutState+0x14>)
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    403c:	681a      	ldr	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    403e:	680b      	ldr	r3, [r1, #0]
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4040:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4042:	6043      	str	r3, [r0, #4]
}
    4044:	4770      	bx	lr
    4046:	46c0      	nop			; (mov r8, r8)
    4048:	40000b84 	.word	0x40000b84
    404c:	40000a64 	.word	0x40000a64

00004050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4052:	1c0e      	adds	r6, r1, #0
    4054:	1c05      	adds	r5, r0, #0
portBASE_TYPE xReturn;

	portENTER_CRITICAL();
    4056:	f009 fe03 	bl	dc60 <__vPortEnterCritical_from_thumb>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    405a:	6833      	ldr	r3, [r6, #0]
			{
				xReturn = pdFALSE;
    405c:	2400      	movs	r4, #0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    405e:	1c5a      	adds	r2, r3, #1
    4060:	d018      	beq.n	4094 <xTaskCheckForTimeOut+0x44>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4062:	4813      	ldr	r0, [pc, #76]	; (40b0 <xTaskCheckForTimeOut+0x60>)
    4064:	6829      	ldr	r1, [r5, #0]
    4066:	6802      	ldr	r2, [r0, #0]
    4068:	4291      	cmp	r1, r2
    406a:	d019      	beq.n	40a0 <xTaskCheckForTimeOut+0x50>
    406c:	4a11      	ldr	r2, [pc, #68]	; (40b4 <xTaskCheckForTimeOut+0x64>)
    406e:	6869      	ldr	r1, [r5, #4]
    4070:	6817      	ldr	r7, [r2, #0]
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    4072:	2401      	movs	r4, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4074:	42b9      	cmp	r1, r7
    4076:	d90d      	bls.n	4094 <xTaskCheckForTimeOut+0x44>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4078:	6814      	ldr	r4, [r2, #0]
    407a:	1a67      	subs	r7, r4, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    407c:	2401      	movs	r4, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    407e:	42bb      	cmp	r3, r7
    4080:	d908      	bls.n	4094 <xTaskCheckForTimeOut+0x44>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4082:	6814      	ldr	r4, [r2, #0]
    4084:	1b1f      	subs	r7, r3, r4
    4086:	1879      	adds	r1, r7, r1
    4088:	6031      	str	r1, [r6, #0]
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    408a:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    408c:	6813      	ldr	r3, [r2, #0]
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    408e:	6028      	str	r0, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4090:	606b      	str	r3, [r5, #4]
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
    4092:	2400      	movs	r4, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	portEXIT_CRITICAL();
    4094:	f009 fdac 	bl	dbf0 <__vPortExitCritical_from_thumb>

	return xReturn;
}
    4098:	1c20      	adds	r0, r4, #0
    409a:	bcf8      	pop	{r3, r4, r5, r6, r7}
    409c:	bc02      	pop	{r1}
    409e:	4708      	bx	r1
    40a0:	4a04      	ldr	r2, [pc, #16]	; (40b4 <xTaskCheckForTimeOut+0x64>)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    40a2:	6869      	ldr	r1, [r5, #4]
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    40a4:	6814      	ldr	r4, [r2, #0]
    40a6:	1a67      	subs	r7, r4, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    40a8:	2401      	movs	r4, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    40aa:	42bb      	cmp	r3, r7
    40ac:	d8e9      	bhi.n	4082 <xTaskCheckForTimeOut+0x32>
    40ae:	e7f1      	b.n	4094 <xTaskCheckForTimeOut+0x44>
    40b0:	40000b84 	.word	0x40000b84
    40b4:	40000a64 	.word	0x40000a64

000040b8 <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    40b8:	4b01      	ldr	r3, [pc, #4]	; (40c0 <vTaskMissedYield+0x8>)
    40ba:	2201      	movs	r2, #1
    40bc:	601a      	str	r2, [r3, #0]
}
    40be:	4770      	bx	lr
    40c0:	40000af0 	.word	0x40000af0

000040c4 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    40c4:	4b01      	ldr	r3, [pc, #4]	; (40cc <xTaskGetCurrentTaskHandle+0x8>)
    40c6:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    40c8:	4770      	bx	lr
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	40000afc 	.word	0x40000afc

000040d0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    40d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    40d2:	4d17      	ldr	r5, [pc, #92]	; (4130 <vTaskPriorityInherit+0x60>)
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    40d4:	1c04      	adds	r4, r0, #0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    40d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    40d8:	6828      	ldr	r0, [r5, #0]
    40da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    40dc:	4293      	cmp	r3, r2
    40de:	d20f      	bcs.n	4100 <vTaskPriorityInherit+0x30>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    40e0:	6829      	ldr	r1, [r5, #0]
    40e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    40e4:	2104      	movs	r1, #4
    40e6:	1a8e      	subs	r6, r1, r2

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
    40e8:	009f      	lsls	r7, r3, #2
    40ea:	18f8      	adds	r0, r7, r3
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    40ec:	61a6      	str	r6, [r4, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
    40ee:	4e11      	ldr	r6, [pc, #68]	; (4134 <vTaskPriorityInherit+0x64>)
    40f0:	0082      	lsls	r2, r0, #2
    40f2:	6967      	ldr	r7, [r4, #20]
    40f4:	18b3      	adds	r3, r6, r2
    40f6:	429f      	cmp	r7, r3
    40f8:	d005      	beq.n	4106 <vTaskPriorityInherit+0x36>
				prvAddTaskToReadyQueue( pxTCB );
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    40fa:	682e      	ldr	r6, [r5, #0]
    40fc:	6af7      	ldr	r7, [r6, #44]	; 0x2c
    40fe:	62e7      	str	r7, [r4, #44]	; 0x2c
			}
		}
	}
    4100:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4102:	bc01      	pop	{r0}
    4104:	4700      	bx	r0

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    4106:	1867      	adds	r7, r4, r1
    4108:	1c38      	adds	r0, r7, #0
    410a:	f7fe fecb 	bl	2ea4 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    410e:	682d      	ldr	r5, [r5, #0]
				prvAddTaskToReadyQueue( pxTCB );
    4110:	4a09      	ldr	r2, [pc, #36]	; (4138 <vTaskPriorityInherit+0x68>)
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4112:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4114:	6811      	ldr	r1, [r2, #0]
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4116:	62e3      	str	r3, [r4, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4118:	428b      	cmp	r3, r1
    411a:	d900      	bls.n	411e <vTaskPriorityInherit+0x4e>
    411c:	6013      	str	r3, [r2, #0]
    411e:	0098      	lsls	r0, r3, #2
    4120:	18c3      	adds	r3, r0, r3
    4122:	009c      	lsls	r4, r3, #2
    4124:	1930      	adds	r0, r6, r4
    4126:	1c39      	adds	r1, r7, #0
    4128:	f7fe fe90 	bl	2e4c <vListInsertEnd>
    412c:	e7e8      	b.n	4100 <vTaskPriorityInherit+0x30>
    412e:	46c0      	nop			; (mov r8, r8)
    4130:	40000afc 	.word	0x40000afc
    4134:	40000a68 	.word	0x40000a68
    4138:	40000a5c 	.word	0x40000a5c

0000413c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    413c:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    413e:	1e04      	subs	r4, r0, #0
    4140:	d018      	beq.n	4174 <vTaskPriorityDisinherit+0x38>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4142:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4144:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4146:	429a      	cmp	r2, r3
    4148:	d014      	beq.n	4174 <vTaskPriorityDisinherit+0x38>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    414a:	1d25      	adds	r5, r4, #4
    414c:	1c28      	adds	r0, r5, #0
    414e:	f7fe fea9 	bl	2ea4 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4152:	6c63      	ldr	r3, [r4, #68]	; 0x44
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4154:	2204      	movs	r2, #4
    4156:	1ad0      	subs	r0, r2, r3
				prvAddTaskToReadyQueue( pxTCB );
    4158:	4a09      	ldr	r2, [pc, #36]	; (4180 <vTaskPriorityDisinherit+0x44>)
    415a:	6811      	ldr	r1, [r2, #0]
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    415c:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    415e:	61a0      	str	r0, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
    4160:	428b      	cmp	r3, r1
    4162:	d80a      	bhi.n	417a <vTaskPriorityDisinherit+0x3e>
    4164:	0098      	lsls	r0, r3, #2
    4166:	18c1      	adds	r1, r0, r3
    4168:	4c06      	ldr	r4, [pc, #24]	; (4184 <vTaskPriorityDisinherit+0x48>)
    416a:	008b      	lsls	r3, r1, #2
    416c:	18e0      	adds	r0, r4, r3
    416e:	1c29      	adds	r1, r5, #0
    4170:	f7fe fe6c 	bl	2e4c <vListInsertEnd>
			}
		}
	}
    4174:	bc38      	pop	{r3, r4, r5}
    4176:	bc01      	pop	{r0}
    4178:	4700      	bx	r0

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
				prvAddTaskToReadyQueue( pxTCB );
    417a:	6013      	str	r3, [r2, #0]
    417c:	e7f2      	b.n	4164 <vTaskPriorityDisinherit+0x28>
    417e:	46c0      	nop			; (mov r8, r8)
    4180:	40000a5c 	.word	0x40000a5c
    4184:	40000a68 	.word	0x40000a68

00004188 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4188:	b510      	push	{r4, lr}
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
    418a:	1d0b      	adds	r3, r1, #4
    418c:	6003      	str	r3, [r0, #0]
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
    418e:	2400      	movs	r4, #0

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
	pxTopOfStack--;
    4190:	1f03      	subs	r3, r0, #4

	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
    4192:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
    4194:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
    4196:	4c19      	ldr	r4, [pc, #100]	; (41fc <pxPortInitialiseStack+0x74>)
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
    4198:	6018      	str	r0, [r3, #0]
	pxTopOfStack--;
    419a:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
    419c:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
    419e:	4c18      	ldr	r4, [pc, #96]	; (4200 <pxPortInitialiseStack+0x78>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
	pxTopOfStack--;	
    41a0:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
    41a2:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
    41a4:	4c17      	ldr	r4, [pc, #92]	; (4204 <pxPortInitialiseStack+0x7c>)
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
	pxTopOfStack--;	
    41a6:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
    41a8:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
    41aa:	4c17      	ldr	r4, [pc, #92]	; (4208 <pxPortInitialiseStack+0x80>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
	pxTopOfStack--;	
    41ac:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
    41ae:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
    41b0:	4c16      	ldr	r4, [pc, #88]	; (420c <pxPortInitialiseStack+0x84>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
	pxTopOfStack--;	
    41b2:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
    41b4:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
    41b6:	4c16      	ldr	r4, [pc, #88]	; (4210 <pxPortInitialiseStack+0x88>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
	pxTopOfStack--;	
    41b8:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
    41ba:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
    41bc:	4c15      	ldr	r4, [pc, #84]	; (4214 <pxPortInitialiseStack+0x8c>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
	pxTopOfStack--;	
    41be:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
    41c0:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
    41c2:	4c15      	ldr	r4, [pc, #84]	; (4218 <pxPortInitialiseStack+0x90>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
	pxTopOfStack--;	
    41c4:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
    41c6:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
    41c8:	4c14      	ldr	r4, [pc, #80]	; (421c <pxPortInitialiseStack+0x94>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
	pxTopOfStack--;	
    41ca:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
    41cc:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
    41ce:	4c14      	ldr	r4, [pc, #80]	; (4220 <pxPortInitialiseStack+0x98>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
	pxTopOfStack--;	
    41d0:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
    41d2:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
    41d4:	4c13      	ldr	r4, [pc, #76]	; (4224 <pxPortInitialiseStack+0x9c>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
	pxTopOfStack--;	
    41d6:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
    41d8:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
    41da:	4c13      	ldr	r4, [pc, #76]	; (4228 <pxPortInitialiseStack+0xa0>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
	pxTopOfStack--;	
    41dc:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
    41de:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
    41e0:	3b04      	subs	r3, #4

	/* When the task starts is will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
    41e2:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    41e4:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
    41e6:	231f      	movs	r3, #31

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
    41e8:	07ca      	lsls	r2, r1, #31
    41ea:	d500      	bpl.n	41ee <pxPortInitialiseStack+0x66>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
    41ec:	3320      	adds	r3, #32

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
    41ee:	6003      	str	r3, [r0, #0]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
    41f0:	2100      	movs	r1, #0
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
	}

	pxTopOfStack--;
    41f2:	3804      	subs	r0, #4

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
    41f4:	6001      	str	r1, [r0, #0]

	return pxTopOfStack;
}
    41f6:	bc10      	pop	{r4}
    41f8:	bc02      	pop	{r1}
    41fa:	4708      	bx	r1
    41fc:	12121212 	.word	0x12121212
    4200:	11111111 	.word	0x11111111
    4204:	10101010 	.word	0x10101010
    4208:	09090909 	.word	0x09090909
    420c:	08080808 	.word	0x08080808
    4210:	07070707 	.word	0x07070707
    4214:	06060606 	.word	0x06060606
    4218:	05050505 	.word	0x05050505
    421c:	04040404 	.word	0x04040404
    4220:	03030303 	.word	0x03030303
    4224:	02020202 	.word	0x02020202
    4228:	01010101 	.word	0x01010101

0000422c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    422c:	b510      	push	{r4, lr}
 */
static void prvSetupTimerInterrupt( void )
{
unsigned portLONG ulCompareMatch;

	PCLKSEL0 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
    422e:	4b12      	ldr	r3, [pc, #72]	; (4278 <xPortStartScheduler+0x4c>)
    4230:	6818      	ldr	r0, [r3, #0]
    4232:	210c      	movs	r1, #12
    4234:	4388      	bics	r0, r1
    4236:	3908      	subs	r1, #8
    4238:	4308      	orrs	r0, r1
    423a:	6018      	str	r0, [r3, #0]
	T0TCR  = 2;         /* Stop and reset the timer */
    423c:	4b0f      	ldr	r3, [pc, #60]	; (427c <xPortStartScheduler+0x50>)
    423e:	2402      	movs	r4, #2
	T0CTCR = 0;         /* Timer mode               */
    4240:	480f      	ldr	r0, [pc, #60]	; (4280 <xPortStartScheduler+0x54>)
static void prvSetupTimerInterrupt( void )
{
unsigned portLONG ulCompareMatch;

	PCLKSEL0 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
	T0TCR  = 2;         /* Stop and reset the timer */
    4242:	601c      	str	r4, [r3, #0]
	#if portPRESCALE_VALUE != 0
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif
	T0MR1 = ulCompareMatch;
    4244:	4a0f      	ldr	r2, [pc, #60]	; (4284 <xPortStartScheduler+0x58>)
{
unsigned portLONG ulCompareMatch;

	PCLKSEL0 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
	T0TCR  = 2;         /* Stop and reset the timer */
	T0CTCR = 0;         /* Timer mode               */
    4246:	2400      	movs	r4, #0
    4248:	6004      	str	r4, [r0, #0]
	
	/* A 1ms tick does not require the use of the timer prescale.  This is
	defaulted to zero but can be used if necessary. */
	T0PR = portPRESCALE_VALUE;
    424a:	3864      	subs	r0, #100	; 0x64
    424c:	6004      	str	r4, [r0, #0]
	}
	#endif
	T0MR1 = ulCompareMatch;

	/* Generate tick with timer 0 compare match. */
	T0MCR  = (3 << 3);  /* Reset timer on match and generate interrupt */
    424e:	2118      	movs	r1, #24
	#if portPRESCALE_VALUE != 0
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif
	T0MR1 = ulCompareMatch;
    4250:	6102      	str	r2, [r0, #16]

	/* Generate tick with timer 0 compare match. */
	T0MCR  = (3 << 3);  /* Reset timer on match and generate interrupt */
    4252:	3008      	adds	r0, #8

	/* Setup the VIC for the timer. */
	VICIntEnable = 0x00000010;
    4254:	4a0c      	ldr	r2, [pc, #48]	; (4288 <xPortStartScheduler+0x5c>)
	}
	#endif
	T0MR1 = ulCompareMatch;

	/* Generate tick with timer 0 compare match. */
	T0MCR  = (3 << 3);  /* Reset timer on match and generate interrupt */
    4256:	6001      	str	r1, [r0, #0]

	/* Setup the VIC for the timer. */
	VICIntEnable = 0x00000010;
    4258:	3908      	subs	r1, #8
    425a:	6011      	str	r1, [r2, #0]
	/* The ISR installed depends on whether the preemptive or cooperative
	scheduler is being used. */
	#if configUSE_PREEMPTION == 1
	{
		extern void ( vPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vPreemptiveTick;
    425c:	480b      	ldr	r0, [pc, #44]	; (428c <xPortStartScheduler+0x60>)
    425e:	3201      	adds	r2, #1
		extern void ( vNonPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vNonPreemptiveTick;
	}
	#endif

	VICVectCntl4 = 1;
    4260:	490b      	ldr	r1, [pc, #44]	; (4290 <xPortStartScheduler+0x64>)
	/* The ISR installed depends on whether the preemptive or cooperative
	scheduler is being used. */
	#if configUSE_PREEMPTION == 1
	{
		extern void ( vPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vPreemptiveTick;
    4262:	32ff      	adds	r2, #255	; 0xff
    4264:	6010      	str	r0, [r2, #0]
		extern void ( vNonPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vNonPreemptiveTick;
	}
	#endif

	VICVectCntl4 = 1;
    4266:	2201      	movs	r2, #1
    4268:	600a      	str	r2, [r1, #0]

	/* Start the timer - interrupts are disabled when this function is called
	so it is okay to do this here. */
	T0TCR = portENABLE_TIMER;
    426a:	601a      	str	r2, [r3, #0]
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	vPortISRStartFirstTask();	
    426c:	f009 fd06 	bl	dc7c <__vPortISRStartFirstTask_from_thumb>

	/* Should not get here! */
	return 0;
}
    4270:	1c20      	adds	r0, r4, #0
    4272:	bc10      	pop	{r4}
    4274:	bc02      	pop	{r1}
    4276:	4708      	bx	r1
    4278:	e01fc1a8 	.word	0xe01fc1a8
    427c:	e0004004 	.word	0xe0004004
    4280:	e0004070 	.word	0xe0004070
    4284:	00011940 	.word	0x00011940
    4288:	fffff010 	.word	0xfffff010
    428c:	00000144 	.word	0x00000144
    4290:	fffff210 	.word	0xfffff210

00004294 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
    4294:	4770      	bx	lr
    4296:	46c0      	nop			; (mov r8, r8)

00004298 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4298:	b510      	push	{r4, lr}
    429a:	1c04      	adds	r4, r0, #0
void *pvReturn;

	vTaskSuspendAll();
    429c:	f7ff fb50 	bl	3940 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    42a0:	1c20      	adds	r0, r4, #0
    42a2:	f000 fd13 	bl	4ccc <malloc>
    42a6:	1c04      	adds	r4, r0, #0
	}
	xTaskResumeAll();
    42a8:	f7ff fc08 	bl	3abc <xTaskResumeAll>
		}
	}
	#endif
	
	return pvReturn;
}
    42ac:	1c20      	adds	r0, r4, #0
    42ae:	bc10      	pop	{r4}
    42b0:	bc02      	pop	{r1}
    42b2:	4708      	bx	r1

000042b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    42b4:	b510      	push	{r4, lr}
	if( pv )
    42b6:	1e04      	subs	r4, r0, #0
    42b8:	d006      	beq.n	42c8 <vPortFree+0x14>
	{
		vTaskSuspendAll();
    42ba:	f7ff fb41 	bl	3940 <vTaskSuspendAll>
		{
			free( pv );
    42be:	1c20      	adds	r0, r4, #0
    42c0:	f000 fd10 	bl	4ce4 <free>
		}
		xTaskResumeAll();
    42c4:	f7ff fbfa 	bl	3abc <xTaskResumeAll>
	}
}
    42c8:	bc10      	pop	{r4}
    42ca:	bc01      	pop	{r0}
    42cc:	4700      	bx	r0
    42ce:	46c0      	nop			; (mov r8, r8)

000042d0 <_startup>:
_mainCRTStartup:

	/* Setup a stack for each mode - note that this only sets up a usable stack
	for system/user, SWI and IRQ modes.   Also each mode is setup with
	interrupts initially disabled. */
    ldr   r0, .LC6
    42d0:	e59f00b8 	ldr	r0, [pc, #184]	; 4390 <endless_loop+0x18>
    msr   CPSR_c, #MODE_UND|I_BIT|F_BIT /* Undefined Instruction Mode */
    42d4:	e321f0db 	msr	CPSR_c, #219	; 0xdb
    mov   sp, r0
    42d8:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #UND_STACK_SIZE
    42dc:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_ABT|I_BIT|F_BIT /* Abort Mode */
    42e0:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
    mov   sp, r0
    42e4:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #ABT_STACK_SIZE
    42e8:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_FIQ|I_BIT|F_BIT /* FIQ Mode */
    42ec:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
    mov   sp, r0
    42f0:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #FIQ_STACK_SIZE
    42f4:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_IRQ|I_BIT|F_BIT /* IRQ Mode */
    42f8:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
    mov   sp, r0
    42fc:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #IRQ_STACK_SIZE
    4300:	e2400c01 	sub	r0, r0, #256	; 0x100
    msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT /* Supervisor Mode */
    4304:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
    mov   sp, r0
    4308:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #SVC_STACK_SIZE
    430c:	e2400c01 	sub	r0, r0, #256	; 0x100
    msr   CPSR_c, #MODE_SYS|I_BIT|F_BIT /* System Mode */
    4310:	e321f0df 	msr	CPSR_c, #223	; 0xdf
    mov   sp, r0
    4314:	e1a0d000 	mov	sp, r0

	/* We want to start in supervisor mode.  Operation will switch to system
	mode when the first task starts. */
	msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT
    4318:	e321f0d3 	msr	CPSR_c, #211	; 0xd3

	/* Clear BSS. */

	mov     a2, #0			/* Fill value */
    431c:	e3a01000 	mov	r1, #0
	mov		fp, a2			/* Null frame pointer */
    4320:	e1a0b001 	mov	fp, r1
	mov		r7, a2			/* Null frame pointer for Thumb */
    4324:	e1a07001 	mov	r7, r1

	ldr		r1, .LC1		/* Start of memory block */
    4328:	e59f104c 	ldr	r1, [pc, #76]	; 437c <endless_loop+0x4>
	ldr		r3, .LC2		/* End of memory block */
    432c:	e59f304c 	ldr	r3, [pc, #76]	; 4380 <endless_loop+0x8>
	subs	r3, r3, r1      /* Length of block */
    4330:	e0533001 	subs	r3, r3, r1
	beq		.end_clear_loop
    4334:	0a000003 	beq	4348 <.end_clear_loop>
	mov		r2, #0
    4338:	e3a02000 	mov	r2, #0

0000433c <.clear_loop>:

.clear_loop:
	strb	r2, [r1], #1
    433c:	e4c12001 	strb	r2, [r1], #1
	subs	r3, r3, #1
    4340:	e2533001 	subs	r3, r3, #1
	bgt		.clear_loop
    4344:	cafffffc 	bgt	433c <.clear_loop>

00004348 <.end_clear_loop>:

.end_clear_loop:

	/* Initialise data. */

	ldr		r1, .LC3		/* Start of memory block */
    4348:	e59f1034 	ldr	r1, [pc, #52]	; 4384 <endless_loop+0xc>
	ldr		r2, .LC4		/* End of memory block */
    434c:	e59f2034 	ldr	r2, [pc, #52]	; 4388 <endless_loop+0x10>
	ldr		r3, .LC5
    4350:	e59f3034 	ldr	r3, [pc, #52]	; 438c <endless_loop+0x14>
	subs	r3, r3, r1		/* Length of block */
    4354:	e0533001 	subs	r3, r3, r1
	beq		.end_set_loop
    4358:	0a000003 	beq	436c <.end_set_loop>

0000435c <.set_loop>:

.set_loop:
	ldrb	r4, [r2], #1
    435c:	e4d24001 	ldrb	r4, [r2], #1
	strb	r4, [r1], #1
    4360:	e4c14001 	strb	r4, [r1], #1
	subs	r3, r3, #1
    4364:	e2533001 	subs	r3, r3, #1
	bgt		.set_loop
    4368:	cafffffb 	bgt	435c <.set_loop>

0000436c <.end_set_loop>:

.end_set_loop:

	mov		r0, #0          /* no arguments  */
    436c:	e3a00000 	mov	r0, #0
	mov		r1, #0          /* no argv either */
    4370:	e3a01000 	mov	r1, #0

	bl		main
    4374:	eb002663 	bl	dd08 <__main_from_arm>

00004378 <endless_loop>:

endless_loop:
	b               endless_loop
    4378:	eafffffe 	b	4378 <endless_loop>
    437c:	400008c8 	.word	0x400008c8
    4380:	40000b90 	.word	0x40000b90
    4384:	40000000 	.word	0x40000000
    4388:	0000e980 	.word	0x0000e980
    438c:	400008c8 	.word	0x400008c8
    4390:	4000ffdc 	.word	0x4000ffdc

00004394 <__aeabi_uidiv>:
    4394:	e2512001 	subs	r2, r1, #1
    4398:	012fff1e 	bxeq	lr
    439c:	3a000036 	bcc	447c <__aeabi_uidiv+0xe8>
    43a0:	e1500001 	cmp	r0, r1
    43a4:	9a000022 	bls	4434 <__aeabi_uidiv+0xa0>
    43a8:	e1110002 	tst	r1, r2
    43ac:	0a000023 	beq	4440 <__aeabi_uidiv+0xac>
    43b0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    43b4:	01a01181 	lsleq	r1, r1, #3
    43b8:	03a03008 	moveq	r3, #8
    43bc:	13a03001 	movne	r3, #1
    43c0:	e3510201 	cmp	r1, #268435456	; 0x10000000
    43c4:	31510000 	cmpcc	r1, r0
    43c8:	31a01201 	lslcc	r1, r1, #4
    43cc:	31a03203 	lslcc	r3, r3, #4
    43d0:	3afffffa 	bcc	43c0 <__aeabi_uidiv+0x2c>
    43d4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    43d8:	31510000 	cmpcc	r1, r0
    43dc:	31a01081 	lslcc	r1, r1, #1
    43e0:	31a03083 	lslcc	r3, r3, #1
    43e4:	3afffffa 	bcc	43d4 <__aeabi_uidiv+0x40>
    43e8:	e3a02000 	mov	r2, #0
    43ec:	e1500001 	cmp	r0, r1
    43f0:	20400001 	subcs	r0, r0, r1
    43f4:	21822003 	orrcs	r2, r2, r3
    43f8:	e15000a1 	cmp	r0, r1, lsr #1
    43fc:	204000a1 	subcs	r0, r0, r1, lsr #1
    4400:	218220a3 	orrcs	r2, r2, r3, lsr #1
    4404:	e1500121 	cmp	r0, r1, lsr #2
    4408:	20400121 	subcs	r0, r0, r1, lsr #2
    440c:	21822123 	orrcs	r2, r2, r3, lsr #2
    4410:	e15001a1 	cmp	r0, r1, lsr #3
    4414:	204001a1 	subcs	r0, r0, r1, lsr #3
    4418:	218221a3 	orrcs	r2, r2, r3, lsr #3
    441c:	e3500000 	cmp	r0, #0
    4420:	11b03223 	lsrsne	r3, r3, #4
    4424:	11a01221 	lsrne	r1, r1, #4
    4428:	1affffef 	bne	43ec <__aeabi_uidiv+0x58>
    442c:	e1a00002 	mov	r0, r2
    4430:	e12fff1e 	bx	lr
    4434:	03a00001 	moveq	r0, #1
    4438:	13a00000 	movne	r0, #0
    443c:	e12fff1e 	bx	lr
    4440:	e3510801 	cmp	r1, #65536	; 0x10000
    4444:	21a01821 	lsrcs	r1, r1, #16
    4448:	23a02010 	movcs	r2, #16
    444c:	33a02000 	movcc	r2, #0
    4450:	e3510c01 	cmp	r1, #256	; 0x100
    4454:	21a01421 	lsrcs	r1, r1, #8
    4458:	22822008 	addcs	r2, r2, #8
    445c:	e3510010 	cmp	r1, #16
    4460:	21a01221 	lsrcs	r1, r1, #4
    4464:	22822004 	addcs	r2, r2, #4
    4468:	e3510004 	cmp	r1, #4
    446c:	82822003 	addhi	r2, r2, #3
    4470:	908220a1 	addls	r2, r2, r1, lsr #1
    4474:	e1a00230 	lsr	r0, r0, r2
    4478:	e12fff1e 	bx	lr
    447c:	e12fff1f 	bx	pc
    4480:	e1a00000 	nop			; (mov r0, r0)
    4484:	e3500000 	cmp	r0, #0
    4488:	13e00000 	mvnne	r0, #0
    448c:	ea002617 	b	dcf0 <____aeabi_idiv0_from_arm>

00004490 <__aeabi_uidivmod>:
    4490:	e3510000 	cmp	r1, #0
    4494:	0afffff8 	beq	447c <__aeabi_uidiv+0xe8>
    4498:	e92d4003 	push	{r0, r1, lr}
    449c:	ebffffbc 	bl	4394 <__aeabi_uidiv>
    44a0:	e8bd4006 	pop	{r1, r2, lr}
    44a4:	e0030092 	mul	r3, r2, r0
    44a8:	e0411003 	sub	r1, r1, r3
    44ac:	e12fff1e 	bx	lr

000044b0 <__aeabi_idiv>:
    44b0:	e3510000 	cmp	r1, #0
    44b4:	0a000043 	beq	45c8 <.divsi3_skip_div0_test+0x110>

000044b8 <.divsi3_skip_div0_test>:
    44b8:	e020c001 	eor	ip, r0, r1
    44bc:	42611000 	rsbmi	r1, r1, #0
    44c0:	e2512001 	subs	r2, r1, #1
    44c4:	0a000027 	beq	4568 <.divsi3_skip_div0_test+0xb0>
    44c8:	e1b03000 	movs	r3, r0
    44cc:	42603000 	rsbmi	r3, r0, #0
    44d0:	e1530001 	cmp	r3, r1
    44d4:	9a000026 	bls	4574 <.divsi3_skip_div0_test+0xbc>
    44d8:	e1110002 	tst	r1, r2
    44dc:	0a000028 	beq	4584 <.divsi3_skip_div0_test+0xcc>
    44e0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    44e4:	01a01181 	lsleq	r1, r1, #3
    44e8:	03a02008 	moveq	r2, #8
    44ec:	13a02001 	movne	r2, #1
    44f0:	e3510201 	cmp	r1, #268435456	; 0x10000000
    44f4:	31510003 	cmpcc	r1, r3
    44f8:	31a01201 	lslcc	r1, r1, #4
    44fc:	31a02202 	lslcc	r2, r2, #4
    4500:	3afffffa 	bcc	44f0 <.divsi3_skip_div0_test+0x38>
    4504:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    4508:	31510003 	cmpcc	r1, r3
    450c:	31a01081 	lslcc	r1, r1, #1
    4510:	31a02082 	lslcc	r2, r2, #1
    4514:	3afffffa 	bcc	4504 <.divsi3_skip_div0_test+0x4c>
    4518:	e3a00000 	mov	r0, #0
    451c:	e1530001 	cmp	r3, r1
    4520:	20433001 	subcs	r3, r3, r1
    4524:	21800002 	orrcs	r0, r0, r2
    4528:	e15300a1 	cmp	r3, r1, lsr #1
    452c:	204330a1 	subcs	r3, r3, r1, lsr #1
    4530:	218000a2 	orrcs	r0, r0, r2, lsr #1
    4534:	e1530121 	cmp	r3, r1, lsr #2
    4538:	20433121 	subcs	r3, r3, r1, lsr #2
    453c:	21800122 	orrcs	r0, r0, r2, lsr #2
    4540:	e15301a1 	cmp	r3, r1, lsr #3
    4544:	204331a1 	subcs	r3, r3, r1, lsr #3
    4548:	218001a2 	orrcs	r0, r0, r2, lsr #3
    454c:	e3530000 	cmp	r3, #0
    4550:	11b02222 	lsrsne	r2, r2, #4
    4554:	11a01221 	lsrne	r1, r1, #4
    4558:	1affffef 	bne	451c <.divsi3_skip_div0_test+0x64>
    455c:	e35c0000 	cmp	ip, #0
    4560:	42600000 	rsbmi	r0, r0, #0
    4564:	e12fff1e 	bx	lr
    4568:	e13c0000 	teq	ip, r0
    456c:	42600000 	rsbmi	r0, r0, #0
    4570:	e12fff1e 	bx	lr
    4574:	33a00000 	movcc	r0, #0
    4578:	01a00fcc 	asreq	r0, ip, #31
    457c:	03800001 	orreq	r0, r0, #1
    4580:	e12fff1e 	bx	lr
    4584:	e3510801 	cmp	r1, #65536	; 0x10000
    4588:	21a01821 	lsrcs	r1, r1, #16
    458c:	23a02010 	movcs	r2, #16
    4590:	33a02000 	movcc	r2, #0
    4594:	e3510c01 	cmp	r1, #256	; 0x100
    4598:	21a01421 	lsrcs	r1, r1, #8
    459c:	22822008 	addcs	r2, r2, #8
    45a0:	e3510010 	cmp	r1, #16
    45a4:	21a01221 	lsrcs	r1, r1, #4
    45a8:	22822004 	addcs	r2, r2, #4
    45ac:	e3510004 	cmp	r1, #4
    45b0:	82822003 	addhi	r2, r2, #3
    45b4:	908220a1 	addls	r2, r2, r1, lsr #1
    45b8:	e35c0000 	cmp	ip, #0
    45bc:	e1a00233 	lsr	r0, r3, r2
    45c0:	42600000 	rsbmi	r0, r0, #0
    45c4:	e12fff1e 	bx	lr
    45c8:	e12fff1f 	bx	pc
    45cc:	e1a00000 	nop			; (mov r0, r0)
    45d0:	e3500000 	cmp	r0, #0
    45d4:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    45d8:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    45dc:	ea0025c3 	b	dcf0 <____aeabi_idiv0_from_arm>

000045e0 <__aeabi_idivmod>:
    45e0:	e3510000 	cmp	r1, #0
    45e4:	0afffff7 	beq	45c8 <.divsi3_skip_div0_test+0x110>
    45e8:	e92d4003 	push	{r0, r1, lr}
    45ec:	ebffffb1 	bl	44b8 <.divsi3_skip_div0_test>
    45f0:	e8bd4006 	pop	{r1, r2, lr}
    45f4:	e0030092 	mul	r3, r2, r0
    45f8:	e0411003 	sub	r1, r1, r3
    45fc:	e12fff1e 	bx	lr

00004600 <__aeabi_idiv0>:
    4600:	4770      	bx	lr
    4602:	46c0      	nop			; (mov r8, r8)

00004604 <_fflush_r>:
    4604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4606:	1c06      	adds	r6, r0, #0
    4608:	1c0c      	adds	r4, r1, #0
    460a:	2800      	cmp	r0, #0
    460c:	d003      	beq.n	4616 <_fflush_r+0x12>
    460e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4610:	2b00      	cmp	r3, #0
    4612:	d100      	bne.n	4616 <_fflush_r+0x12>
    4614:	e06a      	b.n	46ec <_fflush_r+0xe8>
    4616:	89a0      	ldrh	r0, [r4, #12]
    4618:	2800      	cmp	r0, #0
    461a:	d041      	beq.n	46a0 <_fflush_r+0x9c>
    461c:	0403      	lsls	r3, r0, #16
    461e:	141b      	asrs	r3, r3, #16
    4620:	2208      	movs	r2, #8
    4622:	401a      	ands	r2, r3
    4624:	d13f      	bne.n	46a6 <_fflush_r+0xa2>
    4626:	2380      	movs	r3, #128	; 0x80
    4628:	011b      	lsls	r3, r3, #4
    462a:	6861      	ldr	r1, [r4, #4]
    462c:	4303      	orrs	r3, r0
    462e:	81a3      	strh	r3, [r4, #12]
    4630:	2900      	cmp	r1, #0
    4632:	dc00      	bgt.n	4636 <_fflush_r+0x32>
    4634:	e06c      	b.n	4710 <_fflush_r+0x10c>
    4636:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    4638:	1e38      	subs	r0, r7, #0
    463a:	d031      	beq.n	46a0 <_fflush_r+0x9c>
    463c:	2200      	movs	r2, #0
    463e:	6835      	ldr	r5, [r6, #0]
    4640:	6032      	str	r2, [r6, #0]
    4642:	3280      	adds	r2, #128	; 0x80
    4644:	0152      	lsls	r2, r2, #5
    4646:	401a      	ands	r2, r3
    4648:	d055      	beq.n	46f6 <_fflush_r+0xf2>
    464a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    464c:	0759      	lsls	r1, r3, #29
    464e:	d506      	bpl.n	465e <_fflush_r+0x5a>
    4650:	6863      	ldr	r3, [r4, #4]
    4652:	1ad2      	subs	r2, r2, r3
    4654:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4656:	2b00      	cmp	r3, #0
    4658:	d001      	beq.n	465e <_fflush_r+0x5a>
    465a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    465c:	1ad2      	subs	r2, r2, r3
    465e:	69e1      	ldr	r1, [r4, #28]
    4660:	1c30      	adds	r0, r6, #0
    4662:	2300      	movs	r3, #0
    4664:	f000 f892 	bl	478c <fflush+0x2c>
    4668:	1c42      	adds	r2, r0, #1
    466a:	d057      	beq.n	471c <_fflush_r+0x118>
    466c:	89a2      	ldrh	r2, [r4, #12]
    466e:	4b3b      	ldr	r3, [pc, #236]	; (475c <_fflush_r+0x158>)
    4670:	4013      	ands	r3, r2
    4672:	2200      	movs	r2, #0
    4674:	6062      	str	r2, [r4, #4]
    4676:	6922      	ldr	r2, [r4, #16]
    4678:	81a3      	strh	r3, [r4, #12]
    467a:	6022      	str	r2, [r4, #0]
    467c:	04d9      	lsls	r1, r3, #19
    467e:	d502      	bpl.n	4686 <_fflush_r+0x82>
    4680:	1c42      	adds	r2, r0, #1
    4682:	d057      	beq.n	4734 <_fflush_r+0x130>
    4684:	6520      	str	r0, [r4, #80]	; 0x50
    4686:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4688:	6035      	str	r5, [r6, #0]
    468a:	1e08      	subs	r0, r1, #0
    468c:	d008      	beq.n	46a0 <_fflush_r+0x9c>
    468e:	1c23      	adds	r3, r4, #0
    4690:	3340      	adds	r3, #64	; 0x40
    4692:	4299      	cmp	r1, r3
    4694:	d002      	beq.n	469c <_fflush_r+0x98>
    4696:	1c30      	adds	r0, r6, #0
    4698:	f000 f9e6 	bl	4a68 <_free_r>
    469c:	2000      	movs	r0, #0
    469e:	6320      	str	r0, [r4, #48]	; 0x30
    46a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    46a2:	bc02      	pop	{r1}
    46a4:	4708      	bx	r1
    46a6:	6927      	ldr	r7, [r4, #16]
    46a8:	1e38      	subs	r0, r7, #0
    46aa:	d0f9      	beq.n	46a0 <_fflush_r+0x9c>
    46ac:	6825      	ldr	r5, [r4, #0]
    46ae:	2200      	movs	r2, #0
    46b0:	1bed      	subs	r5, r5, r7
    46b2:	6027      	str	r7, [r4, #0]
    46b4:	0799      	lsls	r1, r3, #30
    46b6:	d01c      	beq.n	46f2 <_fflush_r+0xee>
    46b8:	2000      	movs	r0, #0
    46ba:	60a2      	str	r2, [r4, #8]
    46bc:	4285      	cmp	r5, r0
    46be:	dc04      	bgt.n	46ca <_fflush_r+0xc6>
    46c0:	e7ee      	b.n	46a0 <_fflush_r+0x9c>
    46c2:	1a2d      	subs	r5, r5, r0
    46c4:	2d00      	cmp	r5, #0
    46c6:	dd21      	ble.n	470c <_fflush_r+0x108>
    46c8:	183f      	adds	r7, r7, r0
    46ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
    46cc:	69e1      	ldr	r1, [r4, #28]
    46ce:	4694      	mov	ip, r2
    46d0:	1c30      	adds	r0, r6, #0
    46d2:	1c3a      	adds	r2, r7, #0
    46d4:	1c2b      	adds	r3, r5, #0
    46d6:	f000 f85a 	bl	478e <fflush+0x2e>
    46da:	2800      	cmp	r0, #0
    46dc:	dcf1      	bgt.n	46c2 <_fflush_r+0xbe>
    46de:	89a3      	ldrh	r3, [r4, #12]
    46e0:	2240      	movs	r2, #64	; 0x40
    46e2:	4313      	orrs	r3, r2
    46e4:	2001      	movs	r0, #1
    46e6:	81a3      	strh	r3, [r4, #12]
    46e8:	4240      	negs	r0, r0
    46ea:	e7d9      	b.n	46a0 <_fflush_r+0x9c>
    46ec:	f000 f87e 	bl	47ec <__sinit>
    46f0:	e791      	b.n	4616 <_fflush_r+0x12>
    46f2:	6962      	ldr	r2, [r4, #20]
    46f4:	e7e0      	b.n	46b8 <_fflush_r+0xb4>
    46f6:	69e1      	ldr	r1, [r4, #28]
    46f8:	1c30      	adds	r0, r6, #0
    46fa:	2301      	movs	r3, #1
    46fc:	f000 f846 	bl	478c <fflush+0x2c>
    4700:	1c02      	adds	r2, r0, #0
    4702:	1c41      	adds	r1, r0, #1
    4704:	d01a      	beq.n	473c <_fflush_r+0x138>
    4706:	89a3      	ldrh	r3, [r4, #12]
    4708:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    470a:	e79f      	b.n	464c <_fflush_r+0x48>
    470c:	2000      	movs	r0, #0
    470e:	e7c7      	b.n	46a0 <_fflush_r+0x9c>
    4710:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    4712:	1c10      	adds	r0, r2, #0
    4714:	2900      	cmp	r1, #0
    4716:	dd00      	ble.n	471a <_fflush_r+0x116>
    4718:	e78d      	b.n	4636 <_fflush_r+0x32>
    471a:	e7c1      	b.n	46a0 <_fflush_r+0x9c>
    471c:	6833      	ldr	r3, [r6, #0]
    471e:	2b00      	cmp	r3, #0
    4720:	d0a4      	beq.n	466c <_fflush_r+0x68>
    4722:	2b1d      	cmp	r3, #29
    4724:	d0a2      	beq.n	466c <_fflush_r+0x68>
    4726:	2b16      	cmp	r3, #22
    4728:	d0a0      	beq.n	466c <_fflush_r+0x68>
    472a:	89a3      	ldrh	r3, [r4, #12]
    472c:	2240      	movs	r2, #64	; 0x40
    472e:	4313      	orrs	r3, r2
    4730:	81a3      	strh	r3, [r4, #12]
    4732:	e7b5      	b.n	46a0 <_fflush_r+0x9c>
    4734:	6833      	ldr	r3, [r6, #0]
    4736:	2b00      	cmp	r3, #0
    4738:	d1a5      	bne.n	4686 <_fflush_r+0x82>
    473a:	e7a3      	b.n	4684 <_fflush_r+0x80>
    473c:	6833      	ldr	r3, [r6, #0]
    473e:	2b00      	cmp	r3, #0
    4740:	d0e1      	beq.n	4706 <_fflush_r+0x102>
    4742:	2b16      	cmp	r3, #22
    4744:	d001      	beq.n	474a <_fflush_r+0x146>
    4746:	2b1d      	cmp	r3, #29
    4748:	d102      	bne.n	4750 <_fflush_r+0x14c>
    474a:	6035      	str	r5, [r6, #0]
    474c:	2000      	movs	r0, #0
    474e:	e7a7      	b.n	46a0 <_fflush_r+0x9c>
    4750:	89a3      	ldrh	r3, [r4, #12]
    4752:	2140      	movs	r1, #64	; 0x40
    4754:	430b      	orrs	r3, r1
    4756:	81a3      	strh	r3, [r4, #12]
    4758:	e7a2      	b.n	46a0 <_fflush_r+0x9c>
    475a:	46c0      	nop			; (mov r8, r8)
    475c:	fffff7ff 	.word	0xfffff7ff

00004760 <fflush>:
    4760:	b508      	push	{r3, lr}
    4762:	1e01      	subs	r1, r0, #0
    4764:	d006      	beq.n	4774 <fflush+0x14>
    4766:	4b06      	ldr	r3, [pc, #24]	; (4780 <fflush+0x20>)
    4768:	6818      	ldr	r0, [r3, #0]
    476a:	f7ff ff4b 	bl	4604 <_fflush_r>
    476e:	bc08      	pop	{r3}
    4770:	bc02      	pop	{r1}
    4772:	4708      	bx	r1
    4774:	4b03      	ldr	r3, [pc, #12]	; (4784 <fflush+0x24>)
    4776:	4904      	ldr	r1, [pc, #16]	; (4788 <fflush+0x28>)
    4778:	6818      	ldr	r0, [r3, #0]
    477a:	f000 fa75 	bl	4c68 <_fwalk_reent>
    477e:	e7f6      	b.n	476e <fflush+0xe>
    4780:	40000000 	.word	0x40000000
    4784:	0000dd78 	.word	0x0000dd78
    4788:	00004605 	.word	0x00004605
    478c:	4738      	bx	r7
    478e:	4760      	bx	ip

00004790 <__fp_lock>:
    4790:	2000      	movs	r0, #0
    4792:	4770      	bx	lr

00004794 <__fp_unlock>:
    4794:	2000      	movs	r0, #0
    4796:	4770      	bx	lr

00004798 <_cleanup_r>:
    4798:	b508      	push	{r3, lr}
    479a:	4903      	ldr	r1, [pc, #12]	; (47a8 <_cleanup_r+0x10>)
    479c:	f000 fa38 	bl	4c10 <_fwalk>
    47a0:	bc08      	pop	{r3}
    47a2:	bc01      	pop	{r0}
    47a4:	4700      	bx	r0
    47a6:	46c0      	nop			; (mov r8, r8)
    47a8:	00009695 	.word	0x00009695

000047ac <__sfmoreglue>:
    47ac:	b570      	push	{r4, r5, r6, lr}
    47ae:	2568      	movs	r5, #104	; 0x68
    47b0:	434d      	muls	r5, r1
    47b2:	1c0e      	adds	r6, r1, #0
    47b4:	1c29      	adds	r1, r5, #0
    47b6:	310c      	adds	r1, #12
    47b8:	f000 faa0 	bl	4cfc <_malloc_r>
    47bc:	1e04      	subs	r4, r0, #0
    47be:	d007      	beq.n	47d0 <__sfmoreglue+0x24>
    47c0:	300c      	adds	r0, #12
    47c2:	2100      	movs	r1, #0
    47c4:	6021      	str	r1, [r4, #0]
    47c6:	6066      	str	r6, [r4, #4]
    47c8:	60a0      	str	r0, [r4, #8]
    47ca:	1c2a      	adds	r2, r5, #0
    47cc:	f000 fd9a 	bl	5304 <memset>
    47d0:	1c20      	adds	r0, r4, #0
    47d2:	bc70      	pop	{r4, r5, r6}
    47d4:	bc02      	pop	{r1}
    47d6:	4708      	bx	r1

000047d8 <_cleanup>:
    47d8:	b508      	push	{r3, lr}
    47da:	4b03      	ldr	r3, [pc, #12]	; (47e8 <_cleanup+0x10>)
    47dc:	6818      	ldr	r0, [r3, #0]
    47de:	f7ff ffdb 	bl	4798 <_cleanup_r>
    47e2:	bc08      	pop	{r3}
    47e4:	bc01      	pop	{r0}
    47e6:	4700      	bx	r0
    47e8:	0000dd78 	.word	0x0000dd78

000047ec <__sinit>:
    47ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ee:	465f      	mov	r7, fp
    47f0:	4656      	mov	r6, sl
    47f2:	464d      	mov	r5, r9
    47f4:	4644      	mov	r4, r8
    47f6:	b4f0      	push	{r4, r5, r6, r7}
    47f8:	6b84      	ldr	r4, [r0, #56]	; 0x38
    47fa:	1c06      	adds	r6, r0, #0
    47fc:	2c00      	cmp	r4, #0
    47fe:	d162      	bne.n	48c6 <__sinit+0xda>
    4800:	4b35      	ldr	r3, [pc, #212]	; (48d8 <__sinit+0xec>)
    4802:	63c3      	str	r3, [r0, #60]	; 0x3c
    4804:	2301      	movs	r3, #1
    4806:	6383      	str	r3, [r0, #56]	; 0x38
    4808:	469b      	mov	fp, r3
    480a:	33b7      	adds	r3, #183	; 0xb7
    480c:	009b      	lsls	r3, r3, #2
    480e:	50c4      	str	r4, [r0, r3]
    4810:	23b9      	movs	r3, #185	; 0xb9
    4812:	2203      	movs	r2, #3
    4814:	009b      	lsls	r3, r3, #2
    4816:	50c2      	str	r2, [r0, r3]
    4818:	23bb      	movs	r3, #187	; 0xbb
    481a:	009b      	lsls	r3, r3, #2
    481c:	6845      	ldr	r5, [r0, #4]
    481e:	18c2      	adds	r2, r0, r3
    4820:	23ba      	movs	r3, #186	; 0xba
    4822:	009b      	lsls	r3, r3, #2
    4824:	50c2      	str	r2, [r0, r3]
    4826:	2304      	movs	r3, #4
    4828:	1c28      	adds	r0, r5, #0
    482a:	81ab      	strh	r3, [r5, #12]
    482c:	602c      	str	r4, [r5, #0]
    482e:	606c      	str	r4, [r5, #4]
    4830:	60ac      	str	r4, [r5, #8]
    4832:	666c      	str	r4, [r5, #100]	; 0x64
    4834:	81ec      	strh	r4, [r5, #14]
    4836:	612c      	str	r4, [r5, #16]
    4838:	616c      	str	r4, [r5, #20]
    483a:	61ac      	str	r4, [r5, #24]
    483c:	1c21      	adds	r1, r4, #0
    483e:	2208      	movs	r2, #8
    4840:	305c      	adds	r0, #92	; 0x5c
    4842:	f000 fd5f 	bl	5304 <memset>
    4846:	4b25      	ldr	r3, [pc, #148]	; (48dc <__sinit+0xf0>)
    4848:	4698      	mov	r8, r3
    484a:	626b      	str	r3, [r5, #36]	; 0x24
    484c:	4b24      	ldr	r3, [pc, #144]	; (48e0 <__sinit+0xf4>)
    484e:	4f25      	ldr	r7, [pc, #148]	; (48e4 <__sinit+0xf8>)
    4850:	4699      	mov	r9, r3
    4852:	62ab      	str	r3, [r5, #40]	; 0x28
    4854:	4b24      	ldr	r3, [pc, #144]	; (48e8 <__sinit+0xfc>)
    4856:	61ed      	str	r5, [r5, #28]
    4858:	62eb      	str	r3, [r5, #44]	; 0x2c
    485a:	622f      	str	r7, [r5, #32]
    485c:	68b5      	ldr	r5, [r6, #8]
    485e:	469a      	mov	sl, r3
    4860:	2309      	movs	r3, #9
    4862:	81ab      	strh	r3, [r5, #12]
    4864:	1c28      	adds	r0, r5, #0
    4866:	465b      	mov	r3, fp
    4868:	81eb      	strh	r3, [r5, #14]
    486a:	602c      	str	r4, [r5, #0]
    486c:	606c      	str	r4, [r5, #4]
    486e:	60ac      	str	r4, [r5, #8]
    4870:	666c      	str	r4, [r5, #100]	; 0x64
    4872:	612c      	str	r4, [r5, #16]
    4874:	616c      	str	r4, [r5, #20]
    4876:	61ac      	str	r4, [r5, #24]
    4878:	1c21      	adds	r1, r4, #0
    487a:	2208      	movs	r2, #8
    487c:	305c      	adds	r0, #92	; 0x5c
    487e:	f000 fd41 	bl	5304 <memset>
    4882:	4643      	mov	r3, r8
    4884:	626b      	str	r3, [r5, #36]	; 0x24
    4886:	464b      	mov	r3, r9
    4888:	62ab      	str	r3, [r5, #40]	; 0x28
    488a:	4653      	mov	r3, sl
    488c:	62eb      	str	r3, [r5, #44]	; 0x2c
    488e:	61ed      	str	r5, [r5, #28]
    4890:	622f      	str	r7, [r5, #32]
    4892:	68f5      	ldr	r5, [r6, #12]
    4894:	2312      	movs	r3, #18
    4896:	81ab      	strh	r3, [r5, #12]
    4898:	1c28      	adds	r0, r5, #0
    489a:	3b10      	subs	r3, #16
    489c:	81eb      	strh	r3, [r5, #14]
    489e:	602c      	str	r4, [r5, #0]
    48a0:	606c      	str	r4, [r5, #4]
    48a2:	60ac      	str	r4, [r5, #8]
    48a4:	666c      	str	r4, [r5, #100]	; 0x64
    48a6:	612c      	str	r4, [r5, #16]
    48a8:	616c      	str	r4, [r5, #20]
    48aa:	61ac      	str	r4, [r5, #24]
    48ac:	305c      	adds	r0, #92	; 0x5c
    48ae:	1c21      	adds	r1, r4, #0
    48b0:	2208      	movs	r2, #8
    48b2:	f000 fd27 	bl	5304 <memset>
    48b6:	4643      	mov	r3, r8
    48b8:	626b      	str	r3, [r5, #36]	; 0x24
    48ba:	464b      	mov	r3, r9
    48bc:	62ab      	str	r3, [r5, #40]	; 0x28
    48be:	4653      	mov	r3, sl
    48c0:	61ed      	str	r5, [r5, #28]
    48c2:	622f      	str	r7, [r5, #32]
    48c4:	62eb      	str	r3, [r5, #44]	; 0x2c
    48c6:	bc3c      	pop	{r2, r3, r4, r5}
    48c8:	4690      	mov	r8, r2
    48ca:	4699      	mov	r9, r3
    48cc:	46a2      	mov	sl, r4
    48ce:	46ab      	mov	fp, r5
    48d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48d2:	bc01      	pop	{r0}
    48d4:	4700      	bx	r0
    48d6:	46c0      	nop			; (mov r8, r8)
    48d8:	00004799 	.word	0x00004799
    48dc:	00005539 	.word	0x00005539
    48e0:	00005575 	.word	0x00005575
    48e4:	00005509 	.word	0x00005509
    48e8:	000055a5 	.word	0x000055a5

000048ec <__sfp>:
    48ec:	b570      	push	{r4, r5, r6, lr}
    48ee:	4b22      	ldr	r3, [pc, #136]	; (4978 <__sfp+0x8c>)
    48f0:	681d      	ldr	r5, [r3, #0]
    48f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    48f4:	1c06      	adds	r6, r0, #0
    48f6:	2b00      	cmp	r3, #0
    48f8:	d02e      	beq.n	4958 <__sfp+0x6c>
    48fa:	21b8      	movs	r1, #184	; 0xb8
    48fc:	0089      	lsls	r1, r1, #2
    48fe:	186d      	adds	r5, r5, r1
    4900:	686b      	ldr	r3, [r5, #4]
    4902:	68ac      	ldr	r4, [r5, #8]
    4904:	3b01      	subs	r3, #1
    4906:	d503      	bpl.n	4910 <__sfp+0x24>
    4908:	e021      	b.n	494e <__sfp+0x62>
    490a:	3b01      	subs	r3, #1
    490c:	d41f      	bmi.n	494e <__sfp+0x62>
    490e:	3468      	adds	r4, #104	; 0x68
    4910:	210c      	movs	r1, #12
    4912:	5e62      	ldrsh	r2, [r4, r1]
    4914:	2a00      	cmp	r2, #0
    4916:	d1f8      	bne.n	490a <__sfp+0x1e>
    4918:	2301      	movs	r3, #1
    491a:	425b      	negs	r3, r3
    491c:	2500      	movs	r5, #0
    491e:	81e3      	strh	r3, [r4, #14]
    4920:	1c20      	adds	r0, r4, #0
    4922:	2301      	movs	r3, #1
    4924:	81a3      	strh	r3, [r4, #12]
    4926:	6665      	str	r5, [r4, #100]	; 0x64
    4928:	6025      	str	r5, [r4, #0]
    492a:	60a5      	str	r5, [r4, #8]
    492c:	6065      	str	r5, [r4, #4]
    492e:	6125      	str	r5, [r4, #16]
    4930:	6165      	str	r5, [r4, #20]
    4932:	61a5      	str	r5, [r4, #24]
    4934:	305c      	adds	r0, #92	; 0x5c
    4936:	1c29      	adds	r1, r5, #0
    4938:	2208      	movs	r2, #8
    493a:	f000 fce3 	bl	5304 <memset>
    493e:	6325      	str	r5, [r4, #48]	; 0x30
    4940:	6365      	str	r5, [r4, #52]	; 0x34
    4942:	6465      	str	r5, [r4, #68]	; 0x44
    4944:	64a5      	str	r5, [r4, #72]	; 0x48
    4946:	1c20      	adds	r0, r4, #0
    4948:	bc70      	pop	{r4, r5, r6}
    494a:	bc02      	pop	{r1}
    494c:	4708      	bx	r1
    494e:	6828      	ldr	r0, [r5, #0]
    4950:	2800      	cmp	r0, #0
    4952:	d005      	beq.n	4960 <__sfp+0x74>
    4954:	1c05      	adds	r5, r0, #0
    4956:	e7d3      	b.n	4900 <__sfp+0x14>
    4958:	1c28      	adds	r0, r5, #0
    495a:	f7ff ff47 	bl	47ec <__sinit>
    495e:	e7cc      	b.n	48fa <__sfp+0xe>
    4960:	1c30      	adds	r0, r6, #0
    4962:	2104      	movs	r1, #4
    4964:	f7ff ff22 	bl	47ac <__sfmoreglue>
    4968:	6028      	str	r0, [r5, #0]
    496a:	2800      	cmp	r0, #0
    496c:	d1f2      	bne.n	4954 <__sfp+0x68>
    496e:	230c      	movs	r3, #12
    4970:	6033      	str	r3, [r6, #0]
    4972:	1c04      	adds	r4, r0, #0
    4974:	e7e7      	b.n	4946 <__sfp+0x5a>
    4976:	46c0      	nop			; (mov r8, r8)
    4978:	0000dd78 	.word	0x0000dd78

0000497c <__sfp_lock_acquire>:
    497c:	4770      	bx	lr
    497e:	46c0      	nop			; (mov r8, r8)

00004980 <__sfp_lock_release>:
    4980:	4770      	bx	lr
    4982:	46c0      	nop			; (mov r8, r8)

00004984 <__sinit_lock_acquire>:
    4984:	4770      	bx	lr
    4986:	46c0      	nop			; (mov r8, r8)

00004988 <__sinit_lock_release>:
    4988:	4770      	bx	lr
    498a:	46c0      	nop			; (mov r8, r8)

0000498c <__fp_lock_all>:
    498c:	b508      	push	{r3, lr}
    498e:	4b04      	ldr	r3, [pc, #16]	; (49a0 <__fp_lock_all+0x14>)
    4990:	4904      	ldr	r1, [pc, #16]	; (49a4 <__fp_lock_all+0x18>)
    4992:	6818      	ldr	r0, [r3, #0]
    4994:	f000 f93c 	bl	4c10 <_fwalk>
    4998:	bc08      	pop	{r3}
    499a:	bc01      	pop	{r0}
    499c:	4700      	bx	r0
    499e:	46c0      	nop			; (mov r8, r8)
    49a0:	40000000 	.word	0x40000000
    49a4:	00004791 	.word	0x00004791

000049a8 <__fp_unlock_all>:
    49a8:	b508      	push	{r3, lr}
    49aa:	4b04      	ldr	r3, [pc, #16]	; (49bc <__fp_unlock_all+0x14>)
    49ac:	4904      	ldr	r1, [pc, #16]	; (49c0 <__fp_unlock_all+0x18>)
    49ae:	6818      	ldr	r0, [r3, #0]
    49b0:	f000 f92e 	bl	4c10 <_fwalk>
    49b4:	bc08      	pop	{r3}
    49b6:	bc01      	pop	{r0}
    49b8:	4700      	bx	r0
    49ba:	46c0      	nop			; (mov r8, r8)
    49bc:	40000000 	.word	0x40000000
    49c0:	00004795 	.word	0x00004795

000049c4 <_malloc_trim_r>:
    49c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49c6:	1c0f      	adds	r7, r1, #0
    49c8:	1c04      	adds	r4, r0, #0
    49ca:	f000 fce1 	bl	5390 <__malloc_lock>
    49ce:	4d21      	ldr	r5, [pc, #132]	; (4a54 <_malloc_trim_r+0x90>)
    49d0:	68ab      	ldr	r3, [r5, #8]
    49d2:	685e      	ldr	r6, [r3, #4]
    49d4:	4a20      	ldr	r2, [pc, #128]	; (4a58 <_malloc_trim_r+0x94>)
    49d6:	2303      	movs	r3, #3
    49d8:	439e      	bics	r6, r3
    49da:	18b3      	adds	r3, r6, r2
    49dc:	1bdf      	subs	r7, r3, r7
    49de:	0b3f      	lsrs	r7, r7, #12
    49e0:	3f01      	subs	r7, #1
    49e2:	4b1e      	ldr	r3, [pc, #120]	; (4a5c <_malloc_trim_r+0x98>)
    49e4:	033f      	lsls	r7, r7, #12
    49e6:	429f      	cmp	r7, r3
    49e8:	dd07      	ble.n	49fa <_malloc_trim_r+0x36>
    49ea:	1c20      	adds	r0, r4, #0
    49ec:	2100      	movs	r1, #0
    49ee:	f7fd f8e3 	bl	1bb8 <_sbrk_r>
    49f2:	68ab      	ldr	r3, [r5, #8]
    49f4:	199b      	adds	r3, r3, r6
    49f6:	4298      	cmp	r0, r3
    49f8:	d006      	beq.n	4a08 <_malloc_trim_r+0x44>
    49fa:	1c20      	adds	r0, r4, #0
    49fc:	f000 fcca 	bl	5394 <__malloc_unlock>
    4a00:	2000      	movs	r0, #0
    4a02:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4a04:	bc02      	pop	{r1}
    4a06:	4708      	bx	r1
    4a08:	4279      	negs	r1, r7
    4a0a:	1c20      	adds	r0, r4, #0
    4a0c:	f7fd f8d4 	bl	1bb8 <_sbrk_r>
    4a10:	3001      	adds	r0, #1
    4a12:	d00d      	beq.n	4a30 <_malloc_trim_r+0x6c>
    4a14:	68ab      	ldr	r3, [r5, #8]
    4a16:	1bf6      	subs	r6, r6, r7
    4a18:	2501      	movs	r5, #1
    4a1a:	432e      	orrs	r6, r5
    4a1c:	605e      	str	r6, [r3, #4]
    4a1e:	4b10      	ldr	r3, [pc, #64]	; (4a60 <_malloc_trim_r+0x9c>)
    4a20:	681a      	ldr	r2, [r3, #0]
    4a22:	1bd7      	subs	r7, r2, r7
    4a24:	1c20      	adds	r0, r4, #0
    4a26:	601f      	str	r7, [r3, #0]
    4a28:	f000 fcb4 	bl	5394 <__malloc_unlock>
    4a2c:	1c28      	adds	r0, r5, #0
    4a2e:	e7e8      	b.n	4a02 <_malloc_trim_r+0x3e>
    4a30:	1c20      	adds	r0, r4, #0
    4a32:	2100      	movs	r1, #0
    4a34:	f7fd f8c0 	bl	1bb8 <_sbrk_r>
    4a38:	68ab      	ldr	r3, [r5, #8]
    4a3a:	1ac2      	subs	r2, r0, r3
    4a3c:	2a0f      	cmp	r2, #15
    4a3e:	dddc      	ble.n	49fa <_malloc_trim_r+0x36>
    4a40:	4908      	ldr	r1, [pc, #32]	; (4a64 <_malloc_trim_r+0xa0>)
    4a42:	6809      	ldr	r1, [r1, #0]
    4a44:	1a40      	subs	r0, r0, r1
    4a46:	4906      	ldr	r1, [pc, #24]	; (4a60 <_malloc_trim_r+0x9c>)
    4a48:	6008      	str	r0, [r1, #0]
    4a4a:	2101      	movs	r1, #1
    4a4c:	430a      	orrs	r2, r1
    4a4e:	605a      	str	r2, [r3, #4]
    4a50:	e7d3      	b.n	49fa <_malloc_trim_r+0x36>
    4a52:	46c0      	nop			; (mov r8, r8)
    4a54:	40000430 	.word	0x40000430
    4a58:	00000fef 	.word	0x00000fef
    4a5c:	00000fff 	.word	0x00000fff
    4a60:	400008cc 	.word	0x400008cc
    4a64:	40000838 	.word	0x40000838

00004a68 <_free_r>:
    4a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a6a:	4657      	mov	r7, sl
    4a6c:	464e      	mov	r6, r9
    4a6e:	4645      	mov	r5, r8
    4a70:	b4e0      	push	{r5, r6, r7}
    4a72:	1c05      	adds	r5, r0, #0
    4a74:	1e0c      	subs	r4, r1, #0
    4a76:	d05d      	beq.n	4b34 <_free_r+0xcc>
    4a78:	3c08      	subs	r4, #8
    4a7a:	f000 fc89 	bl	5390 <__malloc_lock>
    4a7e:	6860      	ldr	r0, [r4, #4]
    4a80:	2101      	movs	r1, #1
    4a82:	1c03      	adds	r3, r0, #0
    4a84:	438b      	bics	r3, r1
    4a86:	18e2      	adds	r2, r4, r3
    4a88:	6857      	ldr	r7, [r2, #4]
    4a8a:	2603      	movs	r6, #3
    4a8c:	43b7      	bics	r7, r6
    4a8e:	4e5b      	ldr	r6, [pc, #364]	; (4bfc <_free_r+0x194>)
    4a90:	4680      	mov	r8, r0
    4a92:	68b0      	ldr	r0, [r6, #8]
    4a94:	4684      	mov	ip, r0
    4a96:	4594      	cmp	ip, r2
    4a98:	d06e      	beq.n	4b78 <_free_r+0x110>
    4a9a:	2000      	movs	r0, #0
    4a9c:	4684      	mov	ip, r0
    4a9e:	4640      	mov	r0, r8
    4aa0:	6057      	str	r7, [r2, #4]
    4aa2:	4008      	ands	r0, r1
    4aa4:	4680      	mov	r8, r0
    4aa6:	d10e      	bne.n	4ac6 <_free_r+0x5e>
    4aa8:	6820      	ldr	r0, [r4, #0]
    4aaa:	1a24      	subs	r4, r4, r0
    4aac:	181b      	adds	r3, r3, r0
    4aae:	68a0      	ldr	r0, [r4, #8]
    4ab0:	4682      	mov	sl, r0
    4ab2:	2008      	movs	r0, #8
    4ab4:	1980      	adds	r0, r0, r6
    4ab6:	468c      	mov	ip, r1
    4ab8:	4582      	cmp	sl, r0
    4aba:	d004      	beq.n	4ac6 <_free_r+0x5e>
    4abc:	68e1      	ldr	r1, [r4, #12]
    4abe:	4650      	mov	r0, sl
    4ac0:	60c1      	str	r1, [r0, #12]
    4ac2:	6088      	str	r0, [r1, #8]
    4ac4:	46c4      	mov	ip, r8
    4ac6:	19d1      	adds	r1, r2, r7
    4ac8:	6848      	ldr	r0, [r1, #4]
    4aca:	2101      	movs	r1, #1
    4acc:	4208      	tst	r0, r1
    4ace:	d107      	bne.n	4ae0 <_free_r+0x78>
    4ad0:	2000      	movs	r0, #0
    4ad2:	19db      	adds	r3, r3, r7
    4ad4:	4584      	cmp	ip, r0
    4ad6:	d034      	beq.n	4b42 <_free_r+0xda>
    4ad8:	6890      	ldr	r0, [r2, #8]
    4ada:	68d2      	ldr	r2, [r2, #12]
    4adc:	60c2      	str	r2, [r0, #12]
    4ade:	6090      	str	r0, [r2, #8]
    4ae0:	2201      	movs	r2, #1
    4ae2:	1c11      	adds	r1, r2, #0
    4ae4:	4319      	orrs	r1, r3
    4ae6:	6061      	str	r1, [r4, #4]
    4ae8:	2100      	movs	r1, #0
    4aea:	50e3      	str	r3, [r4, r3]
    4aec:	458c      	cmp	ip, r1
    4aee:	d11e      	bne.n	4b2e <_free_r+0xc6>
    4af0:	4943      	ldr	r1, [pc, #268]	; (4c00 <_free_r+0x198>)
    4af2:	428b      	cmp	r3, r1
    4af4:	d932      	bls.n	4b5c <_free_r+0xf4>
    4af6:	0a5a      	lsrs	r2, r3, #9
    4af8:	2a04      	cmp	r2, #4
    4afa:	d856      	bhi.n	4baa <_free_r+0x142>
    4afc:	0999      	lsrs	r1, r3, #6
    4afe:	3138      	adds	r1, #56	; 0x38
    4b00:	00c8      	lsls	r0, r1, #3
    4b02:	1830      	adds	r0, r6, r0
    4b04:	6882      	ldr	r2, [r0, #8]
    4b06:	4282      	cmp	r2, r0
    4b08:	d055      	beq.n	4bb6 <_free_r+0x14e>
    4b0a:	6851      	ldr	r1, [r2, #4]
    4b0c:	2603      	movs	r6, #3
    4b0e:	43b1      	bics	r1, r6
    4b10:	428b      	cmp	r3, r1
    4b12:	d304      	bcc.n	4b1e <_free_r+0xb6>
    4b14:	e006      	b.n	4b24 <_free_r+0xbc>
    4b16:	6851      	ldr	r1, [r2, #4]
    4b18:	43b1      	bics	r1, r6
    4b1a:	428b      	cmp	r3, r1
    4b1c:	d202      	bcs.n	4b24 <_free_r+0xbc>
    4b1e:	6892      	ldr	r2, [r2, #8]
    4b20:	4290      	cmp	r0, r2
    4b22:	d1f8      	bne.n	4b16 <_free_r+0xae>
    4b24:	68d3      	ldr	r3, [r2, #12]
    4b26:	60e3      	str	r3, [r4, #12]
    4b28:	60a2      	str	r2, [r4, #8]
    4b2a:	60d4      	str	r4, [r2, #12]
    4b2c:	609c      	str	r4, [r3, #8]
    4b2e:	1c28      	adds	r0, r5, #0
    4b30:	f000 fc30 	bl	5394 <__malloc_unlock>
    4b34:	bc1c      	pop	{r2, r3, r4}
    4b36:	4690      	mov	r8, r2
    4b38:	4699      	mov	r9, r3
    4b3a:	46a2      	mov	sl, r4
    4b3c:	bcf0      	pop	{r4, r5, r6, r7}
    4b3e:	bc01      	pop	{r0}
    4b40:	4700      	bx	r0
    4b42:	1c37      	adds	r7, r6, #0
    4b44:	6890      	ldr	r0, [r2, #8]
    4b46:	3708      	adds	r7, #8
    4b48:	42b8      	cmp	r0, r7
    4b4a:	d1c6      	bne.n	4ada <_free_r+0x72>
    4b4c:	4319      	orrs	r1, r3
    4b4e:	60c4      	str	r4, [r0, #12]
    4b50:	6084      	str	r4, [r0, #8]
    4b52:	60e0      	str	r0, [r4, #12]
    4b54:	60a0      	str	r0, [r4, #8]
    4b56:	6061      	str	r1, [r4, #4]
    4b58:	50e3      	str	r3, [r4, r3]
    4b5a:	e7e8      	b.n	4b2e <_free_r+0xc6>
    4b5c:	08db      	lsrs	r3, r3, #3
    4b5e:	1099      	asrs	r1, r3, #2
    4b60:	408a      	lsls	r2, r1
    4b62:	6871      	ldr	r1, [r6, #4]
    4b64:	00db      	lsls	r3, r3, #3
    4b66:	430a      	orrs	r2, r1
    4b68:	6072      	str	r2, [r6, #4]
    4b6a:	18f6      	adds	r6, r6, r3
    4b6c:	68b3      	ldr	r3, [r6, #8]
    4b6e:	60e6      	str	r6, [r4, #12]
    4b70:	60a3      	str	r3, [r4, #8]
    4b72:	60dc      	str	r4, [r3, #12]
    4b74:	60b4      	str	r4, [r6, #8]
    4b76:	e7da      	b.n	4b2e <_free_r+0xc6>
    4b78:	4642      	mov	r2, r8
    4b7a:	18fb      	adds	r3, r7, r3
    4b7c:	420a      	tst	r2, r1
    4b7e:	d106      	bne.n	4b8e <_free_r+0x126>
    4b80:	6822      	ldr	r2, [r4, #0]
    4b82:	1aa4      	subs	r4, r4, r2
    4b84:	68a1      	ldr	r1, [r4, #8]
    4b86:	189b      	adds	r3, r3, r2
    4b88:	68e2      	ldr	r2, [r4, #12]
    4b8a:	60ca      	str	r2, [r1, #12]
    4b8c:	6091      	str	r1, [r2, #8]
    4b8e:	2201      	movs	r2, #1
    4b90:	431a      	orrs	r2, r3
    4b92:	6062      	str	r2, [r4, #4]
    4b94:	4a1b      	ldr	r2, [pc, #108]	; (4c04 <_free_r+0x19c>)
    4b96:	6812      	ldr	r2, [r2, #0]
    4b98:	60b4      	str	r4, [r6, #8]
    4b9a:	4293      	cmp	r3, r2
    4b9c:	d3c7      	bcc.n	4b2e <_free_r+0xc6>
    4b9e:	4b1a      	ldr	r3, [pc, #104]	; (4c08 <_free_r+0x1a0>)
    4ba0:	1c28      	adds	r0, r5, #0
    4ba2:	6819      	ldr	r1, [r3, #0]
    4ba4:	f7ff ff0e 	bl	49c4 <_malloc_trim_r>
    4ba8:	e7c1      	b.n	4b2e <_free_r+0xc6>
    4baa:	2a14      	cmp	r2, #20
    4bac:	d80c      	bhi.n	4bc8 <_free_r+0x160>
    4bae:	1c11      	adds	r1, r2, #0
    4bb0:	315b      	adds	r1, #91	; 0x5b
    4bb2:	00c8      	lsls	r0, r1, #3
    4bb4:	e7a5      	b.n	4b02 <_free_r+0x9a>
    4bb6:	1089      	asrs	r1, r1, #2
    4bb8:	2301      	movs	r3, #1
    4bba:	408b      	lsls	r3, r1
    4bbc:	1c19      	adds	r1, r3, #0
    4bbe:	6873      	ldr	r3, [r6, #4]
    4bc0:	4319      	orrs	r1, r3
    4bc2:	6071      	str	r1, [r6, #4]
    4bc4:	1c13      	adds	r3, r2, #0
    4bc6:	e7ae      	b.n	4b26 <_free_r+0xbe>
    4bc8:	2a54      	cmp	r2, #84	; 0x54
    4bca:	d803      	bhi.n	4bd4 <_free_r+0x16c>
    4bcc:	0b19      	lsrs	r1, r3, #12
    4bce:	316e      	adds	r1, #110	; 0x6e
    4bd0:	00c8      	lsls	r0, r1, #3
    4bd2:	e796      	b.n	4b02 <_free_r+0x9a>
    4bd4:	21aa      	movs	r1, #170	; 0xaa
    4bd6:	0049      	lsls	r1, r1, #1
    4bd8:	428a      	cmp	r2, r1
    4bda:	d803      	bhi.n	4be4 <_free_r+0x17c>
    4bdc:	0bd9      	lsrs	r1, r3, #15
    4bde:	3177      	adds	r1, #119	; 0x77
    4be0:	00c8      	lsls	r0, r1, #3
    4be2:	e78e      	b.n	4b02 <_free_r+0x9a>
    4be4:	4909      	ldr	r1, [pc, #36]	; (4c0c <_free_r+0x1a4>)
    4be6:	428a      	cmp	r2, r1
    4be8:	d803      	bhi.n	4bf2 <_free_r+0x18a>
    4bea:	0c99      	lsrs	r1, r3, #18
    4bec:	317c      	adds	r1, #124	; 0x7c
    4bee:	00c8      	lsls	r0, r1, #3
    4bf0:	e787      	b.n	4b02 <_free_r+0x9a>
    4bf2:	20fc      	movs	r0, #252	; 0xfc
    4bf4:	0080      	lsls	r0, r0, #2
    4bf6:	217e      	movs	r1, #126	; 0x7e
    4bf8:	e783      	b.n	4b02 <_free_r+0x9a>
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	40000430 	.word	0x40000430
    4c00:	000001ff 	.word	0x000001ff
    4c04:	4000083c 	.word	0x4000083c
    4c08:	400008c8 	.word	0x400008c8
    4c0c:	00000554 	.word	0x00000554

00004c10 <_fwalk>:
    4c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c12:	4647      	mov	r7, r8
    4c14:	b480      	push	{r7}
    4c16:	1c06      	adds	r6, r0, #0
    4c18:	4688      	mov	r8, r1
    4c1a:	f7ff feaf 	bl	497c <__sfp_lock_acquire>
    4c1e:	22b8      	movs	r2, #184	; 0xb8
    4c20:	0092      	lsls	r2, r2, #2
    4c22:	18b6      	adds	r6, r6, r2
    4c24:	1e37      	subs	r7, r6, #0
    4c26:	d017      	beq.n	4c58 <_fwalk+0x48>
    4c28:	2700      	movs	r7, #0
    4c2a:	6875      	ldr	r5, [r6, #4]
    4c2c:	68b4      	ldr	r4, [r6, #8]
    4c2e:	3d01      	subs	r5, #1
    4c30:	d501      	bpl.n	4c36 <_fwalk+0x26>
    4c32:	e00e      	b.n	4c52 <_fwalk+0x42>
    4c34:	3468      	adds	r4, #104	; 0x68
    4c36:	220c      	movs	r2, #12
    4c38:	5ea3      	ldrsh	r3, [r4, r2]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d007      	beq.n	4c4e <_fwalk+0x3e>
    4c3e:	220e      	movs	r2, #14
    4c40:	5ea3      	ldrsh	r3, [r4, r2]
    4c42:	3301      	adds	r3, #1
    4c44:	d003      	beq.n	4c4e <_fwalk+0x3e>
    4c46:	1c20      	adds	r0, r4, #0
    4c48:	f000 f83e 	bl	4cc8 <_fwalk_reent+0x60>
    4c4c:	4307      	orrs	r7, r0
    4c4e:	3d01      	subs	r5, #1
    4c50:	d5f0      	bpl.n	4c34 <_fwalk+0x24>
    4c52:	6836      	ldr	r6, [r6, #0]
    4c54:	2e00      	cmp	r6, #0
    4c56:	d1e8      	bne.n	4c2a <_fwalk+0x1a>
    4c58:	f7ff fe92 	bl	4980 <__sfp_lock_release>
    4c5c:	1c38      	adds	r0, r7, #0
    4c5e:	bc04      	pop	{r2}
    4c60:	4690      	mov	r8, r2
    4c62:	bcf0      	pop	{r4, r5, r6, r7}
    4c64:	bc02      	pop	{r1}
    4c66:	4708      	bx	r1

00004c68 <_fwalk_reent>:
    4c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c6a:	464f      	mov	r7, r9
    4c6c:	4646      	mov	r6, r8
    4c6e:	b4c0      	push	{r6, r7}
    4c70:	4680      	mov	r8, r0
    4c72:	4689      	mov	r9, r1
    4c74:	f7ff fe82 	bl	497c <__sfp_lock_acquire>
    4c78:	22b8      	movs	r2, #184	; 0xb8
    4c7a:	0092      	lsls	r2, r2, #2
    4c7c:	1c16      	adds	r6, r2, #0
    4c7e:	4446      	add	r6, r8
    4c80:	1e37      	subs	r7, r6, #0
    4c82:	d018      	beq.n	4cb6 <_fwalk_reent+0x4e>
    4c84:	2700      	movs	r7, #0
    4c86:	6875      	ldr	r5, [r6, #4]
    4c88:	68b4      	ldr	r4, [r6, #8]
    4c8a:	3d01      	subs	r5, #1
    4c8c:	d501      	bpl.n	4c92 <_fwalk_reent+0x2a>
    4c8e:	e00f      	b.n	4cb0 <_fwalk_reent+0x48>
    4c90:	3468      	adds	r4, #104	; 0x68
    4c92:	220c      	movs	r2, #12
    4c94:	5ea3      	ldrsh	r3, [r4, r2]
    4c96:	2b00      	cmp	r3, #0
    4c98:	d008      	beq.n	4cac <_fwalk_reent+0x44>
    4c9a:	220e      	movs	r2, #14
    4c9c:	5ea3      	ldrsh	r3, [r4, r2]
    4c9e:	3301      	adds	r3, #1
    4ca0:	d004      	beq.n	4cac <_fwalk_reent+0x44>
    4ca2:	4640      	mov	r0, r8
    4ca4:	1c21      	adds	r1, r4, #0
    4ca6:	f000 f810 	bl	4cca <_fwalk_reent+0x62>
    4caa:	4307      	orrs	r7, r0
    4cac:	3d01      	subs	r5, #1
    4cae:	d5ef      	bpl.n	4c90 <_fwalk_reent+0x28>
    4cb0:	6836      	ldr	r6, [r6, #0]
    4cb2:	2e00      	cmp	r6, #0
    4cb4:	d1e7      	bne.n	4c86 <_fwalk_reent+0x1e>
    4cb6:	f7ff fe63 	bl	4980 <__sfp_lock_release>
    4cba:	1c38      	adds	r0, r7, #0
    4cbc:	bc0c      	pop	{r2, r3}
    4cbe:	4690      	mov	r8, r2
    4cc0:	4699      	mov	r9, r3
    4cc2:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cc4:	bc02      	pop	{r1}
    4cc6:	4708      	bx	r1
    4cc8:	4740      	bx	r8
    4cca:	4748      	bx	r9

00004ccc <malloc>:
    4ccc:	b508      	push	{r3, lr}
    4cce:	4b04      	ldr	r3, [pc, #16]	; (4ce0 <malloc+0x14>)
    4cd0:	1c01      	adds	r1, r0, #0
    4cd2:	6818      	ldr	r0, [r3, #0]
    4cd4:	f000 f812 	bl	4cfc <_malloc_r>
    4cd8:	bc08      	pop	{r3}
    4cda:	bc02      	pop	{r1}
    4cdc:	4708      	bx	r1
    4cde:	46c0      	nop			; (mov r8, r8)
    4ce0:	40000000 	.word	0x40000000

00004ce4 <free>:
    4ce4:	b508      	push	{r3, lr}
    4ce6:	4b04      	ldr	r3, [pc, #16]	; (4cf8 <free+0x14>)
    4ce8:	1c01      	adds	r1, r0, #0
    4cea:	6818      	ldr	r0, [r3, #0]
    4cec:	f7ff febc 	bl	4a68 <_free_r>
    4cf0:	bc08      	pop	{r3}
    4cf2:	bc01      	pop	{r0}
    4cf4:	4700      	bx	r0
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	40000000 	.word	0x40000000

00004cfc <_malloc_r>:
    4cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cfe:	465f      	mov	r7, fp
    4d00:	4656      	mov	r6, sl
    4d02:	464d      	mov	r5, r9
    4d04:	4644      	mov	r4, r8
    4d06:	b4f0      	push	{r4, r5, r6, r7}
    4d08:	1c0d      	adds	r5, r1, #0
    4d0a:	350b      	adds	r5, #11
    4d0c:	b083      	sub	sp, #12
    4d0e:	1c07      	adds	r7, r0, #0
    4d10:	2d16      	cmp	r5, #22
    4d12:	d92e      	bls.n	4d72 <_malloc_r+0x76>
    4d14:	2307      	movs	r3, #7
    4d16:	439d      	bics	r5, r3
    4d18:	0feb      	lsrs	r3, r5, #31
    4d1a:	428d      	cmp	r5, r1
    4d1c:	d32d      	bcc.n	4d7a <_malloc_r+0x7e>
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d12b      	bne.n	4d7a <_malloc_r+0x7e>
    4d22:	1c38      	adds	r0, r7, #0
    4d24:	f000 fb34 	bl	5390 <__malloc_lock>
    4d28:	4b8c      	ldr	r3, [pc, #560]	; (4f5c <_malloc_r+0x260>)
    4d2a:	429d      	cmp	r5, r3
    4d2c:	d829      	bhi.n	4d82 <_malloc_r+0x86>
    4d2e:	08ea      	lsrs	r2, r5, #3
    4d30:	4e8b      	ldr	r6, [pc, #556]	; (4f60 <_malloc_r+0x264>)
    4d32:	00d3      	lsls	r3, r2, #3
    4d34:	18f3      	adds	r3, r6, r3
    4d36:	68dc      	ldr	r4, [r3, #12]
    4d38:	429c      	cmp	r4, r3
    4d3a:	d100      	bne.n	4d3e <_malloc_r+0x42>
    4d3c:	e1b8      	b.n	50b0 <_malloc_r+0x3b4>
    4d3e:	6863      	ldr	r3, [r4, #4]
    4d40:	2203      	movs	r2, #3
    4d42:	68a1      	ldr	r1, [r4, #8]
    4d44:	4393      	bics	r3, r2
    4d46:	68e2      	ldr	r2, [r4, #12]
    4d48:	18e3      	adds	r3, r4, r3
    4d4a:	60ca      	str	r2, [r1, #12]
    4d4c:	6091      	str	r1, [r2, #8]
    4d4e:	685a      	ldr	r2, [r3, #4]
    4d50:	2101      	movs	r1, #1
    4d52:	430a      	orrs	r2, r1
    4d54:	1c38      	adds	r0, r7, #0
    4d56:	605a      	str	r2, [r3, #4]
    4d58:	f000 fb1c 	bl	5394 <__malloc_unlock>
    4d5c:	1c20      	adds	r0, r4, #0
    4d5e:	3008      	adds	r0, #8
    4d60:	b003      	add	sp, #12
    4d62:	bc3c      	pop	{r2, r3, r4, r5}
    4d64:	4690      	mov	r8, r2
    4d66:	4699      	mov	r9, r3
    4d68:	46a2      	mov	sl, r4
    4d6a:	46ab      	mov	fp, r5
    4d6c:	bcf0      	pop	{r4, r5, r6, r7}
    4d6e:	bc02      	pop	{r1}
    4d70:	4708      	bx	r1
    4d72:	2510      	movs	r5, #16
    4d74:	2300      	movs	r3, #0
    4d76:	428d      	cmp	r5, r1
    4d78:	d2d1      	bcs.n	4d1e <_malloc_r+0x22>
    4d7a:	230c      	movs	r3, #12
    4d7c:	603b      	str	r3, [r7, #0]
    4d7e:	2000      	movs	r0, #0
    4d80:	e7ee      	b.n	4d60 <_malloc_r+0x64>
    4d82:	0a6b      	lsrs	r3, r5, #9
    4d84:	2b00      	cmp	r3, #0
    4d86:	d02b      	beq.n	4de0 <_malloc_r+0xe4>
    4d88:	2b04      	cmp	r3, #4
    4d8a:	d900      	bls.n	4d8e <_malloc_r+0x92>
    4d8c:	e179      	b.n	5082 <_malloc_r+0x386>
    4d8e:	09ab      	lsrs	r3, r5, #6
    4d90:	3338      	adds	r3, #56	; 0x38
    4d92:	4699      	mov	r9, r3
    4d94:	00d9      	lsls	r1, r3, #3
    4d96:	4e72      	ldr	r6, [pc, #456]	; (4f60 <_malloc_r+0x264>)
    4d98:	1871      	adds	r1, r6, r1
    4d9a:	68cc      	ldr	r4, [r1, #12]
    4d9c:	42a1      	cmp	r1, r4
    4d9e:	d026      	beq.n	4dee <_malloc_r+0xf2>
    4da0:	6862      	ldr	r2, [r4, #4]
    4da2:	2003      	movs	r0, #3
    4da4:	4382      	bics	r2, r0
    4da6:	1b53      	subs	r3, r2, r5
    4da8:	2b0f      	cmp	r3, #15
    4daa:	dd08      	ble.n	4dbe <_malloc_r+0xc2>
    4dac:	e01c      	b.n	4de8 <_malloc_r+0xec>
    4dae:	68e4      	ldr	r4, [r4, #12]
    4db0:	42a1      	cmp	r1, r4
    4db2:	d01c      	beq.n	4dee <_malloc_r+0xf2>
    4db4:	6862      	ldr	r2, [r4, #4]
    4db6:	4382      	bics	r2, r0
    4db8:	1b53      	subs	r3, r2, r5
    4dba:	2b0f      	cmp	r3, #15
    4dbc:	dc14      	bgt.n	4de8 <_malloc_r+0xec>
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	dbf5      	blt.n	4dae <_malloc_r+0xb2>
    4dc2:	68e3      	ldr	r3, [r4, #12]
    4dc4:	68a1      	ldr	r1, [r4, #8]
    4dc6:	60cb      	str	r3, [r1, #12]
    4dc8:	6099      	str	r1, [r3, #8]
    4dca:	18a2      	adds	r2, r4, r2
    4dcc:	6853      	ldr	r3, [r2, #4]
    4dce:	2101      	movs	r1, #1
    4dd0:	430b      	orrs	r3, r1
    4dd2:	1c38      	adds	r0, r7, #0
    4dd4:	6053      	str	r3, [r2, #4]
    4dd6:	f000 fadd 	bl	5394 <__malloc_unlock>
    4dda:	1c20      	adds	r0, r4, #0
    4ddc:	3008      	adds	r0, #8
    4dde:	e7bf      	b.n	4d60 <_malloc_r+0x64>
    4de0:	08e8      	lsrs	r0, r5, #3
    4de2:	4681      	mov	r9, r0
    4de4:	00c1      	lsls	r1, r0, #3
    4de6:	e7d6      	b.n	4d96 <_malloc_r+0x9a>
    4de8:	2301      	movs	r3, #1
    4dea:	425b      	negs	r3, r3
    4dec:	4499      	add	r9, r3
    4dee:	2401      	movs	r4, #1
    4df0:	44a1      	add	r9, r4
    4df2:	1c31      	adds	r1, r6, #0
    4df4:	3108      	adds	r1, #8
    4df6:	688c      	ldr	r4, [r1, #8]
    4df8:	42a1      	cmp	r1, r4
    4dfa:	d100      	bne.n	4dfe <_malloc_r+0x102>
    4dfc:	e085      	b.n	4f0a <_malloc_r+0x20e>
    4dfe:	6862      	ldr	r2, [r4, #4]
    4e00:	2303      	movs	r3, #3
    4e02:	439a      	bics	r2, r3
    4e04:	1b53      	subs	r3, r2, r5
    4e06:	4693      	mov	fp, r2
    4e08:	2b0f      	cmp	r3, #15
    4e0a:	dd00      	ble.n	4e0e <_malloc_r+0x112>
    4e0c:	e142      	b.n	5094 <_malloc_r+0x398>
    4e0e:	60c9      	str	r1, [r1, #12]
    4e10:	6089      	str	r1, [r1, #8]
    4e12:	2b00      	cmp	r3, #0
    4e14:	db00      	blt.n	4e18 <_malloc_r+0x11c>
    4e16:	e09d      	b.n	4f54 <_malloc_r+0x258>
    4e18:	4b52      	ldr	r3, [pc, #328]	; (4f64 <_malloc_r+0x268>)
    4e1a:	459b      	cmp	fp, r3
    4e1c:	d851      	bhi.n	4ec2 <_malloc_r+0x1c6>
    4e1e:	08d2      	lsrs	r2, r2, #3
    4e20:	1093      	asrs	r3, r2, #2
    4e22:	2001      	movs	r0, #1
    4e24:	4098      	lsls	r0, r3
    4e26:	00d2      	lsls	r2, r2, #3
    4e28:	6873      	ldr	r3, [r6, #4]
    4e2a:	18b2      	adds	r2, r6, r2
    4e2c:	4303      	orrs	r3, r0
    4e2e:	6890      	ldr	r0, [r2, #8]
    4e30:	60e2      	str	r2, [r4, #12]
    4e32:	60a0      	str	r0, [r4, #8]
    4e34:	60c4      	str	r4, [r0, #12]
    4e36:	6094      	str	r4, [r2, #8]
    4e38:	464c      	mov	r4, r9
    4e3a:	10a2      	asrs	r2, r4, #2
    4e3c:	2001      	movs	r0, #1
    4e3e:	4090      	lsls	r0, r2
    4e40:	6073      	str	r3, [r6, #4]
    4e42:	4298      	cmp	r0, r3
    4e44:	d868      	bhi.n	4f18 <_malloc_r+0x21c>
    4e46:	4218      	tst	r0, r3
    4e48:	d10c      	bne.n	4e64 <_malloc_r+0x168>
    4e4a:	2203      	movs	r2, #3
    4e4c:	4394      	bics	r4, r2
    4e4e:	1c22      	adds	r2, r4, #0
    4e50:	3204      	adds	r2, #4
    4e52:	0040      	lsls	r0, r0, #1
    4e54:	4691      	mov	r9, r2
    4e56:	4218      	tst	r0, r3
    4e58:	d104      	bne.n	4e64 <_malloc_r+0x168>
    4e5a:	2204      	movs	r2, #4
    4e5c:	0040      	lsls	r0, r0, #1
    4e5e:	4491      	add	r9, r2
    4e60:	4203      	tst	r3, r0
    4e62:	d0fa      	beq.n	4e5a <_malloc_r+0x15e>
    4e64:	2303      	movs	r3, #3
    4e66:	4698      	mov	r8, r3
    4e68:	464c      	mov	r4, r9
    4e6a:	00e3      	lsls	r3, r4, #3
    4e6c:	199b      	adds	r3, r3, r6
    4e6e:	469b      	mov	fp, r3
    4e70:	469c      	mov	ip, r3
    4e72:	46ca      	mov	sl, r9
    4e74:	4662      	mov	r2, ip
    4e76:	68d4      	ldr	r4, [r2, #12]
    4e78:	45a4      	cmp	ip, r4
    4e7a:	d107      	bne.n	4e8c <_malloc_r+0x190>
    4e7c:	e10f      	b.n	509e <_malloc_r+0x3a2>
    4e7e:	2b00      	cmp	r3, #0
    4e80:	db00      	blt.n	4e84 <_malloc_r+0x188>
    4e82:	e11e      	b.n	50c2 <_malloc_r+0x3c6>
    4e84:	68e4      	ldr	r4, [r4, #12]
    4e86:	45a4      	cmp	ip, r4
    4e88:	d100      	bne.n	4e8c <_malloc_r+0x190>
    4e8a:	e108      	b.n	509e <_malloc_r+0x3a2>
    4e8c:	6862      	ldr	r2, [r4, #4]
    4e8e:	4643      	mov	r3, r8
    4e90:	439a      	bics	r2, r3
    4e92:	1b53      	subs	r3, r2, r5
    4e94:	2b0f      	cmp	r3, #15
    4e96:	ddf2      	ble.n	4e7e <_malloc_r+0x182>
    4e98:	2001      	movs	r0, #1
    4e9a:	1962      	adds	r2, r4, r5
    4e9c:	4305      	orrs	r5, r0
    4e9e:	68a6      	ldr	r6, [r4, #8]
    4ea0:	6065      	str	r5, [r4, #4]
    4ea2:	68e5      	ldr	r5, [r4, #12]
    4ea4:	60f5      	str	r5, [r6, #12]
    4ea6:	60ae      	str	r6, [r5, #8]
    4ea8:	4318      	orrs	r0, r3
    4eaa:	60ca      	str	r2, [r1, #12]
    4eac:	608a      	str	r2, [r1, #8]
    4eae:	6050      	str	r0, [r2, #4]
    4eb0:	60d1      	str	r1, [r2, #12]
    4eb2:	6091      	str	r1, [r2, #8]
    4eb4:	1c38      	adds	r0, r7, #0
    4eb6:	50d3      	str	r3, [r2, r3]
    4eb8:	f000 fa6c 	bl	5394 <__malloc_unlock>
    4ebc:	1c20      	adds	r0, r4, #0
    4ebe:	3008      	adds	r0, #8
    4ec0:	e74e      	b.n	4d60 <_malloc_r+0x64>
    4ec2:	0a53      	lsrs	r3, r2, #9
    4ec4:	2b04      	cmp	r3, #4
    4ec6:	d900      	bls.n	4eca <_malloc_r+0x1ce>
    4ec8:	e10e      	b.n	50e8 <_malloc_r+0x3ec>
    4eca:	0990      	lsrs	r0, r2, #6
    4ecc:	3038      	adds	r0, #56	; 0x38
    4ece:	4680      	mov	r8, r0
    4ed0:	4640      	mov	r0, r8
    4ed2:	00c3      	lsls	r3, r0, #3
    4ed4:	199b      	adds	r3, r3, r6
    4ed6:	469c      	mov	ip, r3
    4ed8:	689b      	ldr	r3, [r3, #8]
    4eda:	4563      	cmp	r3, ip
    4edc:	d100      	bne.n	4ee0 <_malloc_r+0x1e4>
    4ede:	e117      	b.n	5110 <_malloc_r+0x414>
    4ee0:	685a      	ldr	r2, [r3, #4]
    4ee2:	2003      	movs	r0, #3
    4ee4:	4382      	bics	r2, r0
    4ee6:	4680      	mov	r8, r0
    4ee8:	4593      	cmp	fp, r2
    4eea:	d306      	bcc.n	4efa <_malloc_r+0x1fe>
    4eec:	e008      	b.n	4f00 <_malloc_r+0x204>
    4eee:	6858      	ldr	r0, [r3, #4]
    4ef0:	1c02      	adds	r2, r0, #0
    4ef2:	4640      	mov	r0, r8
    4ef4:	4382      	bics	r2, r0
    4ef6:	4593      	cmp	fp, r2
    4ef8:	d202      	bcs.n	4f00 <_malloc_r+0x204>
    4efa:	689b      	ldr	r3, [r3, #8]
    4efc:	459c      	cmp	ip, r3
    4efe:	d1f6      	bne.n	4eee <_malloc_r+0x1f2>
    4f00:	68da      	ldr	r2, [r3, #12]
    4f02:	60e2      	str	r2, [r4, #12]
    4f04:	60a3      	str	r3, [r4, #8]
    4f06:	60dc      	str	r4, [r3, #12]
    4f08:	6094      	str	r4, [r2, #8]
    4f0a:	464c      	mov	r4, r9
    4f0c:	10a2      	asrs	r2, r4, #2
    4f0e:	2001      	movs	r0, #1
    4f10:	6873      	ldr	r3, [r6, #4]
    4f12:	4090      	lsls	r0, r2
    4f14:	4298      	cmp	r0, r3
    4f16:	d996      	bls.n	4e46 <_malloc_r+0x14a>
    4f18:	68b4      	ldr	r4, [r6, #8]
    4f1a:	6863      	ldr	r3, [r4, #4]
    4f1c:	2203      	movs	r2, #3
    4f1e:	4393      	bics	r3, r2
    4f20:	469a      	mov	sl, r3
    4f22:	1b5b      	subs	r3, r3, r5
    4f24:	0fd8      	lsrs	r0, r3, #31
    4f26:	3a03      	subs	r2, #3
    4f28:	210f      	movs	r1, #15
    4f2a:	4299      	cmp	r1, r3
    4f2c:	4142      	adcs	r2, r0
    4f2e:	0612      	lsls	r2, r2, #24
    4f30:	2a00      	cmp	r2, #0
    4f32:	d119      	bne.n	4f68 <_malloc_r+0x26c>
    4f34:	45aa      	cmp	sl, r5
    4f36:	d317      	bcc.n	4f68 <_malloc_r+0x26c>
    4f38:	2201      	movs	r2, #1
    4f3a:	1c11      	adds	r1, r2, #0
    4f3c:	4329      	orrs	r1, r5
    4f3e:	4313      	orrs	r3, r2
    4f40:	1965      	adds	r5, r4, r5
    4f42:	6061      	str	r1, [r4, #4]
    4f44:	1c38      	adds	r0, r7, #0
    4f46:	60b5      	str	r5, [r6, #8]
    4f48:	606b      	str	r3, [r5, #4]
    4f4a:	f000 fa23 	bl	5394 <__malloc_unlock>
    4f4e:	1c20      	adds	r0, r4, #0
    4f50:	3008      	adds	r0, #8
    4f52:	e705      	b.n	4d60 <_malloc_r+0x64>
    4f54:	1c22      	adds	r2, r4, #0
    4f56:	445a      	add	r2, fp
    4f58:	e738      	b.n	4dcc <_malloc_r+0xd0>
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	000001f7 	.word	0x000001f7
    4f60:	40000430 	.word	0x40000430
    4f64:	000001ff 	.word	0x000001ff
    4f68:	48a3      	ldr	r0, [pc, #652]	; (51f8 <_malloc_r+0x4fc>)
    4f6a:	6803      	ldr	r3, [r0, #0]
    4f6c:	49a3      	ldr	r1, [pc, #652]	; (51fc <_malloc_r+0x500>)
    4f6e:	3310      	adds	r3, #16
    4f70:	195b      	adds	r3, r3, r5
    4f72:	469b      	mov	fp, r3
    4f74:	688b      	ldr	r3, [r1, #8]
    4f76:	4680      	mov	r8, r0
    4f78:	4689      	mov	r9, r1
    4f7a:	3301      	adds	r3, #1
    4f7c:	d005      	beq.n	4f8a <_malloc_r+0x28e>
    4f7e:	4aa0      	ldr	r2, [pc, #640]	; (5200 <_malloc_r+0x504>)
    4f80:	1c13      	adds	r3, r2, #0
    4f82:	445b      	add	r3, fp
    4f84:	0b1b      	lsrs	r3, r3, #12
    4f86:	031b      	lsls	r3, r3, #12
    4f88:	469b      	mov	fp, r3
    4f8a:	1c38      	adds	r0, r7, #0
    4f8c:	4659      	mov	r1, fp
    4f8e:	f7fc fe13 	bl	1bb8 <_sbrk_r>
    4f92:	9001      	str	r0, [sp, #4]
    4f94:	1c43      	adds	r3, r0, #1
    4f96:	d05c      	beq.n	5052 <_malloc_r+0x356>
    4f98:	1c22      	adds	r2, r4, #0
    4f9a:	4452      	add	r2, sl
    4f9c:	4282      	cmp	r2, r0
    4f9e:	d900      	bls.n	4fa2 <_malloc_r+0x2a6>
    4fa0:	e0a7      	b.n	50f2 <_malloc_r+0x3f6>
    4fa2:	4641      	mov	r1, r8
    4fa4:	684b      	ldr	r3, [r1, #4]
    4fa6:	445b      	add	r3, fp
    4fa8:	604b      	str	r3, [r1, #4]
    4faa:	4282      	cmp	r2, r0
    4fac:	d100      	bne.n	4fb0 <_malloc_r+0x2b4>
    4fae:	e0f4      	b.n	519a <_malloc_r+0x49e>
    4fb0:	4649      	mov	r1, r9
    4fb2:	6889      	ldr	r1, [r1, #8]
    4fb4:	3101      	adds	r1, #1
    4fb6:	d100      	bne.n	4fba <_malloc_r+0x2be>
    4fb8:	e0fa      	b.n	51b0 <_malloc_r+0x4b4>
    4fba:	18c3      	adds	r3, r0, r3
    4fbc:	1a9a      	subs	r2, r3, r2
    4fbe:	4643      	mov	r3, r8
    4fc0:	605a      	str	r2, [r3, #4]
    4fc2:	2307      	movs	r3, #7
    4fc4:	4003      	ands	r3, r0
    4fc6:	d100      	bne.n	4fca <_malloc_r+0x2ce>
    4fc8:	e09f      	b.n	510a <_malloc_r+0x40e>
    4fca:	2208      	movs	r2, #8
    4fcc:	1ad2      	subs	r2, r2, r3
    4fce:	1880      	adds	r0, r0, r2
    4fd0:	9001      	str	r0, [sp, #4]
    4fd2:	2080      	movs	r0, #128	; 0x80
    4fd4:	0140      	lsls	r0, r0, #5
    4fd6:	1812      	adds	r2, r2, r0
    4fd8:	9901      	ldr	r1, [sp, #4]
    4fda:	1c0b      	adds	r3, r1, #0
    4fdc:	445b      	add	r3, fp
    4fde:	051b      	lsls	r3, r3, #20
    4fe0:	0d1b      	lsrs	r3, r3, #20
    4fe2:	1ad3      	subs	r3, r2, r3
    4fe4:	1c38      	adds	r0, r7, #0
    4fe6:	1c19      	adds	r1, r3, #0
    4fe8:	4699      	mov	r9, r3
    4fea:	f7fc fde5 	bl	1bb8 <_sbrk_r>
    4fee:	1c42      	adds	r2, r0, #1
    4ff0:	d100      	bne.n	4ff4 <_malloc_r+0x2f8>
    4ff2:	e0e8      	b.n	51c6 <_malloc_r+0x4ca>
    4ff4:	9b01      	ldr	r3, [sp, #4]
    4ff6:	1ac0      	subs	r0, r0, r3
    4ff8:	4448      	add	r0, r9
    4ffa:	2301      	movs	r3, #1
    4ffc:	4318      	orrs	r0, r3
    4ffe:	4642      	mov	r2, r8
    5000:	6853      	ldr	r3, [r2, #4]
    5002:	9901      	ldr	r1, [sp, #4]
    5004:	444b      	add	r3, r9
    5006:	6053      	str	r3, [r2, #4]
    5008:	60b1      	str	r1, [r6, #8]
    500a:	6048      	str	r0, [r1, #4]
    500c:	42b4      	cmp	r4, r6
    500e:	d015      	beq.n	503c <_malloc_r+0x340>
    5010:	220f      	movs	r2, #15
    5012:	4592      	cmp	sl, r2
    5014:	d800      	bhi.n	5018 <_malloc_r+0x31c>
    5016:	e094      	b.n	5142 <_malloc_r+0x446>
    5018:	200c      	movs	r0, #12
    501a:	4240      	negs	r0, r0
    501c:	1c02      	adds	r2, r0, #0
    501e:	2107      	movs	r1, #7
    5020:	6860      	ldr	r0, [r4, #4]
    5022:	4452      	add	r2, sl
    5024:	438a      	bics	r2, r1
    5026:	3906      	subs	r1, #6
    5028:	4001      	ands	r1, r0
    502a:	4311      	orrs	r1, r2
    502c:	6061      	str	r1, [r4, #4]
    502e:	2005      	movs	r0, #5
    5030:	18a1      	adds	r1, r4, r2
    5032:	6048      	str	r0, [r1, #4]
    5034:	6088      	str	r0, [r1, #8]
    5036:	2a0f      	cmp	r2, #15
    5038:	d900      	bls.n	503c <_malloc_r+0x340>
    503a:	e0bc      	b.n	51b6 <_malloc_r+0x4ba>
    503c:	4644      	mov	r4, r8
    503e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5040:	4293      	cmp	r3, r2
    5042:	d900      	bls.n	5046 <_malloc_r+0x34a>
    5044:	62e3      	str	r3, [r4, #44]	; 0x2c
    5046:	4640      	mov	r0, r8
    5048:	6b02      	ldr	r2, [r0, #48]	; 0x30
    504a:	4293      	cmp	r3, r2
    504c:	d901      	bls.n	5052 <_malloc_r+0x356>
    504e:	4641      	mov	r1, r8
    5050:	630b      	str	r3, [r1, #48]	; 0x30
    5052:	68b4      	ldr	r4, [r6, #8]
    5054:	6862      	ldr	r2, [r4, #4]
    5056:	2303      	movs	r3, #3
    5058:	439a      	bics	r2, r3
    505a:	4692      	mov	sl, r2
    505c:	4652      	mov	r2, sl
    505e:	1b53      	subs	r3, r2, r5
    5060:	2100      	movs	r1, #0
    5062:	0fd8      	lsrs	r0, r3, #31
    5064:	220f      	movs	r2, #15
    5066:	4688      	mov	r8, r1
    5068:	429a      	cmp	r2, r3
    506a:	4141      	adcs	r1, r0
    506c:	0609      	lsls	r1, r1, #24
    506e:	4541      	cmp	r1, r8
    5070:	d102      	bne.n	5078 <_malloc_r+0x37c>
    5072:	45aa      	cmp	sl, r5
    5074:	d300      	bcc.n	5078 <_malloc_r+0x37c>
    5076:	e75f      	b.n	4f38 <_malloc_r+0x23c>
    5078:	1c38      	adds	r0, r7, #0
    507a:	f000 f98b 	bl	5394 <__malloc_unlock>
    507e:	2000      	movs	r0, #0
    5080:	e66e      	b.n	4d60 <_malloc_r+0x64>
    5082:	2b14      	cmp	r3, #20
    5084:	d92c      	bls.n	50e0 <_malloc_r+0x3e4>
    5086:	2b54      	cmp	r3, #84	; 0x54
    5088:	d836      	bhi.n	50f8 <_malloc_r+0x3fc>
    508a:	0b2b      	lsrs	r3, r5, #12
    508c:	336e      	adds	r3, #110	; 0x6e
    508e:	4699      	mov	r9, r3
    5090:	00d9      	lsls	r1, r3, #3
    5092:	e680      	b.n	4d96 <_malloc_r+0x9a>
    5094:	2001      	movs	r0, #1
    5096:	1962      	adds	r2, r4, r5
    5098:	4305      	orrs	r5, r0
    509a:	6065      	str	r5, [r4, #4]
    509c:	e704      	b.n	4ea8 <_malloc_r+0x1ac>
    509e:	2401      	movs	r4, #1
    50a0:	44a2      	add	sl, r4
    50a2:	4652      	mov	r2, sl
    50a4:	4643      	mov	r3, r8
    50a6:	421a      	tst	r2, r3
    50a8:	d051      	beq.n	514e <_malloc_r+0x452>
    50aa:	2408      	movs	r4, #8
    50ac:	44a4      	add	ip, r4
    50ae:	e6e1      	b.n	4e74 <_malloc_r+0x178>
    50b0:	1c23      	adds	r3, r4, #0
    50b2:	6964      	ldr	r4, [r4, #20]
    50b4:	3202      	adds	r2, #2
    50b6:	3308      	adds	r3, #8
    50b8:	4691      	mov	r9, r2
    50ba:	42a3      	cmp	r3, r4
    50bc:	d100      	bne.n	50c0 <_malloc_r+0x3c4>
    50be:	e698      	b.n	4df2 <_malloc_r+0xf6>
    50c0:	e63d      	b.n	4d3e <_malloc_r+0x42>
    50c2:	18a2      	adds	r2, r4, r2
    50c4:	6853      	ldr	r3, [r2, #4]
    50c6:	2101      	movs	r1, #1
    50c8:	430b      	orrs	r3, r1
    50ca:	6053      	str	r3, [r2, #4]
    50cc:	68e3      	ldr	r3, [r4, #12]
    50ce:	68a2      	ldr	r2, [r4, #8]
    50d0:	1c38      	adds	r0, r7, #0
    50d2:	60d3      	str	r3, [r2, #12]
    50d4:	609a      	str	r2, [r3, #8]
    50d6:	f000 f95d 	bl	5394 <__malloc_unlock>
    50da:	1c20      	adds	r0, r4, #0
    50dc:	3008      	adds	r0, #8
    50de:	e63f      	b.n	4d60 <_malloc_r+0x64>
    50e0:	335b      	adds	r3, #91	; 0x5b
    50e2:	4699      	mov	r9, r3
    50e4:	00d9      	lsls	r1, r3, #3
    50e6:	e656      	b.n	4d96 <_malloc_r+0x9a>
    50e8:	2b14      	cmp	r3, #20
    50ea:	d823      	bhi.n	5134 <_malloc_r+0x438>
    50ec:	335b      	adds	r3, #91	; 0x5b
    50ee:	4698      	mov	r8, r3
    50f0:	e6ee      	b.n	4ed0 <_malloc_r+0x1d4>
    50f2:	42b4      	cmp	r4, r6
    50f4:	d1ad      	bne.n	5052 <_malloc_r+0x356>
    50f6:	e754      	b.n	4fa2 <_malloc_r+0x2a6>
    50f8:	22aa      	movs	r2, #170	; 0xaa
    50fa:	0052      	lsls	r2, r2, #1
    50fc:	4293      	cmp	r3, r2
    50fe:	d811      	bhi.n	5124 <_malloc_r+0x428>
    5100:	0beb      	lsrs	r3, r5, #15
    5102:	3377      	adds	r3, #119	; 0x77
    5104:	4699      	mov	r9, r3
    5106:	00d9      	lsls	r1, r3, #3
    5108:	e645      	b.n	4d96 <_malloc_r+0x9a>
    510a:	2280      	movs	r2, #128	; 0x80
    510c:	0152      	lsls	r2, r2, #5
    510e:	e763      	b.n	4fd8 <_malloc_r+0x2dc>
    5110:	4642      	mov	r2, r8
    5112:	1090      	asrs	r0, r2, #2
    5114:	2201      	movs	r2, #1
    5116:	4082      	lsls	r2, r0
    5118:	1c10      	adds	r0, r2, #0
    511a:	6872      	ldr	r2, [r6, #4]
    511c:	4302      	orrs	r2, r0
    511e:	6072      	str	r2, [r6, #4]
    5120:	1c1a      	adds	r2, r3, #0
    5122:	e6ee      	b.n	4f02 <_malloc_r+0x206>
    5124:	4a37      	ldr	r2, [pc, #220]	; (5204 <_malloc_r+0x508>)
    5126:	4293      	cmp	r3, r2
    5128:	d829      	bhi.n	517e <_malloc_r+0x482>
    512a:	0cab      	lsrs	r3, r5, #18
    512c:	337c      	adds	r3, #124	; 0x7c
    512e:	4699      	mov	r9, r3
    5130:	00d9      	lsls	r1, r3, #3
    5132:	e630      	b.n	4d96 <_malloc_r+0x9a>
    5134:	2b54      	cmp	r3, #84	; 0x54
    5136:	d827      	bhi.n	5188 <_malloc_r+0x48c>
    5138:	465b      	mov	r3, fp
    513a:	0b18      	lsrs	r0, r3, #12
    513c:	306e      	adds	r0, #110	; 0x6e
    513e:	4680      	mov	r8, r0
    5140:	e6c6      	b.n	4ed0 <_malloc_r+0x1d4>
    5142:	2301      	movs	r3, #1
    5144:	604b      	str	r3, [r1, #4]
    5146:	3b01      	subs	r3, #1
    5148:	1c0c      	adds	r4, r1, #0
    514a:	469a      	mov	sl, r3
    514c:	e786      	b.n	505c <_malloc_r+0x360>
    514e:	465b      	mov	r3, fp
    5150:	464c      	mov	r4, r9
    5152:	e000      	b.n	5156 <_malloc_r+0x45a>
    5154:	3c01      	subs	r4, #1
    5156:	4642      	mov	r2, r8
    5158:	4214      	tst	r4, r2
    515a:	d044      	beq.n	51e6 <_malloc_r+0x4ea>
    515c:	1c1a      	adds	r2, r3, #0
    515e:	681b      	ldr	r3, [r3, #0]
    5160:	3a08      	subs	r2, #8
    5162:	4293      	cmp	r3, r2
    5164:	d0f6      	beq.n	5154 <_malloc_r+0x458>
    5166:	6873      	ldr	r3, [r6, #4]
    5168:	0040      	lsls	r0, r0, #1
    516a:	4298      	cmp	r0, r3
    516c:	d900      	bls.n	5170 <_malloc_r+0x474>
    516e:	e6d3      	b.n	4f18 <_malloc_r+0x21c>
    5170:	2800      	cmp	r0, #0
    5172:	d100      	bne.n	5176 <_malloc_r+0x47a>
    5174:	e6d0      	b.n	4f18 <_malloc_r+0x21c>
    5176:	4203      	tst	r3, r0
    5178:	d039      	beq.n	51ee <_malloc_r+0x4f2>
    517a:	46d1      	mov	r9, sl
    517c:	e674      	b.n	4e68 <_malloc_r+0x16c>
    517e:	21fc      	movs	r1, #252	; 0xfc
    5180:	227e      	movs	r2, #126	; 0x7e
    5182:	0089      	lsls	r1, r1, #2
    5184:	4691      	mov	r9, r2
    5186:	e606      	b.n	4d96 <_malloc_r+0x9a>
    5188:	20aa      	movs	r0, #170	; 0xaa
    518a:	0040      	lsls	r0, r0, #1
    518c:	4283      	cmp	r3, r0
    518e:	d81e      	bhi.n	51ce <_malloc_r+0x4d2>
    5190:	465a      	mov	r2, fp
    5192:	0bd0      	lsrs	r0, r2, #15
    5194:	3077      	adds	r0, #119	; 0x77
    5196:	4680      	mov	r8, r0
    5198:	e69a      	b.n	4ed0 <_malloc_r+0x1d4>
    519a:	0511      	lsls	r1, r2, #20
    519c:	2900      	cmp	r1, #0
    519e:	d000      	beq.n	51a2 <_malloc_r+0x4a6>
    51a0:	e706      	b.n	4fb0 <_malloc_r+0x2b4>
    51a2:	4659      	mov	r1, fp
    51a4:	68b2      	ldr	r2, [r6, #8]
    51a6:	4451      	add	r1, sl
    51a8:	2001      	movs	r0, #1
    51aa:	4301      	orrs	r1, r0
    51ac:	6051      	str	r1, [r2, #4]
    51ae:	e745      	b.n	503c <_malloc_r+0x340>
    51b0:	464a      	mov	r2, r9
    51b2:	6090      	str	r0, [r2, #8]
    51b4:	e705      	b.n	4fc2 <_malloc_r+0x2c6>
    51b6:	1c21      	adds	r1, r4, #0
    51b8:	3108      	adds	r1, #8
    51ba:	1c38      	adds	r0, r7, #0
    51bc:	f7ff fc54 	bl	4a68 <_free_r>
    51c0:	4641      	mov	r1, r8
    51c2:	684b      	ldr	r3, [r1, #4]
    51c4:	e73a      	b.n	503c <_malloc_r+0x340>
    51c6:	2100      	movs	r1, #0
    51c8:	2001      	movs	r0, #1
    51ca:	4689      	mov	r9, r1
    51cc:	e717      	b.n	4ffe <_malloc_r+0x302>
    51ce:	4a0d      	ldr	r2, [pc, #52]	; (5204 <_malloc_r+0x508>)
    51d0:	207e      	movs	r0, #126	; 0x7e
    51d2:	4694      	mov	ip, r2
    51d4:	4680      	mov	r8, r0
    51d6:	4563      	cmp	r3, ip
    51d8:	d900      	bls.n	51dc <_malloc_r+0x4e0>
    51da:	e679      	b.n	4ed0 <_malloc_r+0x1d4>
    51dc:	465b      	mov	r3, fp
    51de:	0c98      	lsrs	r0, r3, #18
    51e0:	307c      	adds	r0, #124	; 0x7c
    51e2:	4680      	mov	r8, r0
    51e4:	e674      	b.n	4ed0 <_malloc_r+0x1d4>
    51e6:	6873      	ldr	r3, [r6, #4]
    51e8:	4383      	bics	r3, r0
    51ea:	6073      	str	r3, [r6, #4]
    51ec:	e7bb      	b.n	5166 <_malloc_r+0x46a>
    51ee:	2404      	movs	r4, #4
    51f0:	44a2      	add	sl, r4
    51f2:	0040      	lsls	r0, r0, #1
    51f4:	e7bf      	b.n	5176 <_malloc_r+0x47a>
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	400008c8 	.word	0x400008c8
    51fc:	40000830 	.word	0x40000830
    5200:	00000fff 	.word	0x00000fff
    5204:	00000554 	.word	0x00000554

00005208 <memcpy>:
    5208:	b5f0      	push	{r4, r5, r6, r7, lr}
    520a:	464f      	mov	r7, r9
    520c:	4646      	mov	r6, r8
    520e:	b4c0      	push	{r6, r7}
    5210:	2a03      	cmp	r2, #3
    5212:	d80d      	bhi.n	5230 <memcpy+0x28>
    5214:	2a00      	cmp	r2, #0
    5216:	d005      	beq.n	5224 <memcpy+0x1c>
    5218:	2300      	movs	r3, #0
    521a:	5ccc      	ldrb	r4, [r1, r3]
    521c:	54c4      	strb	r4, [r0, r3]
    521e:	3301      	adds	r3, #1
    5220:	4293      	cmp	r3, r2
    5222:	d1fa      	bne.n	521a <memcpy+0x12>
    5224:	bc0c      	pop	{r2, r3}
    5226:	4690      	mov	r8, r2
    5228:	4699      	mov	r9, r3
    522a:	bcf0      	pop	{r4, r5, r6, r7}
    522c:	bc02      	pop	{r1}
    522e:	4708      	bx	r1
    5230:	1882      	adds	r2, r0, r2
    5232:	1c03      	adds	r3, r0, #0
    5234:	2503      	movs	r5, #3
    5236:	e003      	b.n	5240 <memcpy+0x38>
    5238:	780c      	ldrb	r4, [r1, #0]
    523a:	3101      	adds	r1, #1
    523c:	701c      	strb	r4, [r3, #0]
    523e:	3301      	adds	r3, #1
    5240:	2403      	movs	r4, #3
    5242:	422b      	tst	r3, r5
    5244:	d1f8      	bne.n	5238 <memcpy+0x30>
    5246:	400c      	ands	r4, r1
    5248:	d041      	beq.n	52ce <memcpy+0xc6>
    524a:	00e7      	lsls	r7, r4, #3
    524c:	46bc      	mov	ip, r7
    524e:	2704      	movs	r7, #4
    5250:	4266      	negs	r6, r4
    5252:	1b3c      	subs	r4, r7, r4
    5254:	00e4      	lsls	r4, r4, #3
    5256:	598d      	ldr	r5, [r1, r6]
    5258:	46a1      	mov	r9, r4
    525a:	e00b      	b.n	5274 <memcpy+0x6c>
    525c:	3104      	adds	r1, #4
    525e:	598f      	ldr	r7, [r1, r6]
    5260:	4664      	mov	r4, ip
    5262:	40e5      	lsrs	r5, r4
    5264:	46a8      	mov	r8, r5
    5266:	464c      	mov	r4, r9
    5268:	1c3d      	adds	r5, r7, #0
    526a:	40a5      	lsls	r5, r4
    526c:	4644      	mov	r4, r8
    526e:	4325      	orrs	r5, r4
    5270:	c320      	stmia	r3!, {r5}
    5272:	1c3d      	adds	r5, r7, #0
    5274:	1ad7      	subs	r7, r2, r3
    5276:	2f03      	cmp	r7, #3
    5278:	dcf0      	bgt.n	525c <memcpy+0x54>
    527a:	e003      	b.n	5284 <memcpy+0x7c>
    527c:	780c      	ldrb	r4, [r1, #0]
    527e:	3101      	adds	r1, #1
    5280:	701c      	strb	r4, [r3, #0]
    5282:	3301      	adds	r3, #1
    5284:	4293      	cmp	r3, r2
    5286:	d3f9      	bcc.n	527c <memcpy+0x74>
    5288:	e7cc      	b.n	5224 <memcpy+0x1c>
    528a:	680c      	ldr	r4, [r1, #0]
    528c:	601c      	str	r4, [r3, #0]
    528e:	684c      	ldr	r4, [r1, #4]
    5290:	605c      	str	r4, [r3, #4]
    5292:	688c      	ldr	r4, [r1, #8]
    5294:	609c      	str	r4, [r3, #8]
    5296:	68cc      	ldr	r4, [r1, #12]
    5298:	60dc      	str	r4, [r3, #12]
    529a:	690c      	ldr	r4, [r1, #16]
    529c:	611c      	str	r4, [r3, #16]
    529e:	694c      	ldr	r4, [r1, #20]
    52a0:	615c      	str	r4, [r3, #20]
    52a2:	698c      	ldr	r4, [r1, #24]
    52a4:	619c      	str	r4, [r3, #24]
    52a6:	69cc      	ldr	r4, [r1, #28]
    52a8:	61dc      	str	r4, [r3, #28]
    52aa:	6a0c      	ldr	r4, [r1, #32]
    52ac:	621c      	str	r4, [r3, #32]
    52ae:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    52b0:	625c      	str	r4, [r3, #36]	; 0x24
    52b2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    52b4:	629c      	str	r4, [r3, #40]	; 0x28
    52b6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    52b8:	62dc      	str	r4, [r3, #44]	; 0x2c
    52ba:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    52bc:	631c      	str	r4, [r3, #48]	; 0x30
    52be:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    52c0:	635c      	str	r4, [r3, #52]	; 0x34
    52c2:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    52c4:	639c      	str	r4, [r3, #56]	; 0x38
    52c6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    52c8:	3140      	adds	r1, #64	; 0x40
    52ca:	63dc      	str	r4, [r3, #60]	; 0x3c
    52cc:	3340      	adds	r3, #64	; 0x40
    52ce:	1ad4      	subs	r4, r2, r3
    52d0:	2c3f      	cmp	r4, #63	; 0x3f
    52d2:	dcda      	bgt.n	528a <memcpy+0x82>
    52d4:	e00a      	b.n	52ec <memcpy+0xe4>
    52d6:	680c      	ldr	r4, [r1, #0]
    52d8:	601c      	str	r4, [r3, #0]
    52da:	684c      	ldr	r4, [r1, #4]
    52dc:	605c      	str	r4, [r3, #4]
    52de:	688c      	ldr	r4, [r1, #8]
    52e0:	609c      	str	r4, [r3, #8]
    52e2:	68cc      	ldr	r4, [r1, #12]
    52e4:	60dc      	str	r4, [r3, #12]
    52e6:	3310      	adds	r3, #16
    52e8:	3110      	adds	r1, #16
    52ea:	1ad4      	subs	r4, r2, r3
    52ec:	2c0f      	cmp	r4, #15
    52ee:	dcf2      	bgt.n	52d6 <memcpy+0xce>
    52f0:	1c0d      	adds	r5, r1, #0
    52f2:	e003      	b.n	52fc <memcpy+0xf4>
    52f4:	6809      	ldr	r1, [r1, #0]
    52f6:	c302      	stmia	r3!, {r1}
    52f8:	3504      	adds	r5, #4
    52fa:	1ad4      	subs	r4, r2, r3
    52fc:	1c29      	adds	r1, r5, #0
    52fe:	2c03      	cmp	r4, #3
    5300:	dcf8      	bgt.n	52f4 <memcpy+0xec>
    5302:	e7bf      	b.n	5284 <memcpy+0x7c>

00005304 <memset>:
    5304:	b530      	push	{r4, r5, lr}
    5306:	0609      	lsls	r1, r1, #24
    5308:	0e09      	lsrs	r1, r1, #24
    530a:	2a03      	cmp	r2, #3
    530c:	d80a      	bhi.n	5324 <memset+0x20>
    530e:	2a00      	cmp	r2, #0
    5310:	d005      	beq.n	531e <memset+0x1a>
    5312:	1c03      	adds	r3, r0, #0
    5314:	1812      	adds	r2, r2, r0
    5316:	7019      	strb	r1, [r3, #0]
    5318:	3301      	adds	r3, #1
    531a:	4293      	cmp	r3, r2
    531c:	d1fb      	bne.n	5316 <memset+0x12>
    531e:	bc30      	pop	{r4, r5}
    5320:	bc02      	pop	{r1}
    5322:	4708      	bx	r1
    5324:	1882      	adds	r2, r0, r2
    5326:	1c03      	adds	r3, r0, #0
    5328:	2403      	movs	r4, #3
    532a:	e001      	b.n	5330 <memset+0x2c>
    532c:	7019      	strb	r1, [r3, #0]
    532e:	3301      	adds	r3, #1
    5330:	4223      	tst	r3, r4
    5332:	d1fb      	bne.n	532c <memset+0x28>
    5334:	020c      	lsls	r4, r1, #8
    5336:	1864      	adds	r4, r4, r1
    5338:	0425      	lsls	r5, r4, #16
    533a:	1964      	adds	r4, r4, r5
    533c:	e010      	b.n	5360 <memset+0x5c>
    533e:	601c      	str	r4, [r3, #0]
    5340:	605c      	str	r4, [r3, #4]
    5342:	609c      	str	r4, [r3, #8]
    5344:	60dc      	str	r4, [r3, #12]
    5346:	611c      	str	r4, [r3, #16]
    5348:	615c      	str	r4, [r3, #20]
    534a:	619c      	str	r4, [r3, #24]
    534c:	61dc      	str	r4, [r3, #28]
    534e:	621c      	str	r4, [r3, #32]
    5350:	625c      	str	r4, [r3, #36]	; 0x24
    5352:	629c      	str	r4, [r3, #40]	; 0x28
    5354:	62dc      	str	r4, [r3, #44]	; 0x2c
    5356:	631c      	str	r4, [r3, #48]	; 0x30
    5358:	635c      	str	r4, [r3, #52]	; 0x34
    535a:	639c      	str	r4, [r3, #56]	; 0x38
    535c:	63dc      	str	r4, [r3, #60]	; 0x3c
    535e:	3340      	adds	r3, #64	; 0x40
    5360:	1ad5      	subs	r5, r2, r3
    5362:	2d3f      	cmp	r5, #63	; 0x3f
    5364:	dceb      	bgt.n	533e <memset+0x3a>
    5366:	e005      	b.n	5374 <memset+0x70>
    5368:	601c      	str	r4, [r3, #0]
    536a:	605c      	str	r4, [r3, #4]
    536c:	609c      	str	r4, [r3, #8]
    536e:	60dc      	str	r4, [r3, #12]
    5370:	3310      	adds	r3, #16
    5372:	1ad5      	subs	r5, r2, r3
    5374:	2d0f      	cmp	r5, #15
    5376:	dcf7      	bgt.n	5368 <memset+0x64>
    5378:	e001      	b.n	537e <memset+0x7a>
    537a:	c310      	stmia	r3!, {r4}
    537c:	1ad5      	subs	r5, r2, r3
    537e:	2d03      	cmp	r5, #3
    5380:	dcfb      	bgt.n	537a <memset+0x76>
    5382:	e001      	b.n	5388 <memset+0x84>
    5384:	7019      	strb	r1, [r3, #0]
    5386:	3301      	adds	r3, #1
    5388:	4293      	cmp	r3, r2
    538a:	d3fb      	bcc.n	5384 <memset+0x80>
    538c:	e7c7      	b.n	531e <memset+0x1a>
    538e:	46c0      	nop			; (mov r8, r8)

00005390 <__malloc_lock>:
    5390:	4770      	bx	lr
    5392:	46c0      	nop			; (mov r8, r8)

00005394 <__malloc_unlock>:
    5394:	4770      	bx	lr
    5396:	46c0      	nop			; (mov r8, r8)

00005398 <_printf_r>:
    5398:	b40e      	push	{r1, r2, r3}
    539a:	b500      	push	{lr}
    539c:	b082      	sub	sp, #8
    539e:	ab03      	add	r3, sp, #12
    53a0:	cb04      	ldmia	r3!, {r2}
    53a2:	6881      	ldr	r1, [r0, #8]
    53a4:	9301      	str	r3, [sp, #4]
    53a6:	f001 fc1b 	bl	6be0 <_vfprintf_r>
    53aa:	b002      	add	sp, #8
    53ac:	bc08      	pop	{r3}
    53ae:	b003      	add	sp, #12
    53b0:	4718      	bx	r3
    53b2:	46c0      	nop			; (mov r8, r8)

000053b4 <printf>:
    53b4:	b40f      	push	{r0, r1, r2, r3}
    53b6:	b500      	push	{lr}
    53b8:	4906      	ldr	r1, [pc, #24]	; (53d4 <printf+0x20>)
    53ba:	b083      	sub	sp, #12
    53bc:	ab04      	add	r3, sp, #16
    53be:	6808      	ldr	r0, [r1, #0]
    53c0:	cb04      	ldmia	r3!, {r2}
    53c2:	6881      	ldr	r1, [r0, #8]
    53c4:	9301      	str	r3, [sp, #4]
    53c6:	f001 fc0b 	bl	6be0 <_vfprintf_r>
    53ca:	b003      	add	sp, #12
    53cc:	bc08      	pop	{r3}
    53ce:	b004      	add	sp, #16
    53d0:	4718      	bx	r3
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	40000000 	.word	0x40000000

000053d8 <_putchar_r>:
    53d8:	b508      	push	{r3, lr}
    53da:	6882      	ldr	r2, [r0, #8]
    53dc:	f005 f944 	bl	a668 <_putc_r>
    53e0:	bc08      	pop	{r3}
    53e2:	bc02      	pop	{r1}
    53e4:	4708      	bx	r1
    53e6:	46c0      	nop			; (mov r8, r8)

000053e8 <putchar>:
    53e8:	b508      	push	{r3, lr}
    53ea:	4b04      	ldr	r3, [pc, #16]	; (53fc <putchar+0x14>)
    53ec:	1c01      	adds	r1, r0, #0
    53ee:	6818      	ldr	r0, [r3, #0]
    53f0:	6882      	ldr	r2, [r0, #8]
    53f2:	f005 f939 	bl	a668 <_putc_r>
    53f6:	bc08      	pop	{r3}
    53f8:	bc02      	pop	{r1}
    53fa:	4708      	bx	r1
    53fc:	40000000 	.word	0x40000000

00005400 <_puts_r>:
    5400:	b530      	push	{r4, r5, lr}
    5402:	b089      	sub	sp, #36	; 0x24
    5404:	1c04      	adds	r4, r0, #0
    5406:	1c08      	adds	r0, r1, #0
    5408:	1c0d      	adds	r5, r1, #0
    540a:	f000 f8ff 	bl	560c <strlen>
    540e:	ab01      	add	r3, sp, #4
    5410:	9305      	str	r3, [sp, #20]
    5412:	2302      	movs	r3, #2
    5414:	4a12      	ldr	r2, [pc, #72]	; (5460 <_puts_r+0x60>)
    5416:	9306      	str	r3, [sp, #24]
    5418:	4b12      	ldr	r3, [pc, #72]	; (5464 <_puts_r+0x64>)
    541a:	9203      	str	r2, [sp, #12]
    541c:	681b      	ldr	r3, [r3, #0]
    541e:	2201      	movs	r2, #1
    5420:	9002      	str	r0, [sp, #8]
    5422:	1880      	adds	r0, r0, r2
    5424:	9501      	str	r5, [sp, #4]
    5426:	9204      	str	r2, [sp, #16]
    5428:	9007      	str	r0, [sp, #28]
    542a:	689b      	ldr	r3, [r3, #8]
    542c:	2180      	movs	r1, #128	; 0x80
    542e:	899a      	ldrh	r2, [r3, #12]
    5430:	0189      	lsls	r1, r1, #6
    5432:	420a      	tst	r2, r1
    5434:	d105      	bne.n	5442 <_puts_r+0x42>
    5436:	430a      	orrs	r2, r1
    5438:	819a      	strh	r2, [r3, #12]
    543a:	6e59      	ldr	r1, [r3, #100]	; 0x64
    543c:	4a0a      	ldr	r2, [pc, #40]	; (5468 <_puts_r+0x68>)
    543e:	400a      	ands	r2, r1
    5440:	665a      	str	r2, [r3, #100]	; 0x64
    5442:	aa05      	add	r2, sp, #20
    5444:	68a1      	ldr	r1, [r4, #8]
    5446:	1c20      	adds	r0, r4, #0
    5448:	f004 f932 	bl	96b0 <__sfvwrite_r>
    544c:	1e43      	subs	r3, r0, #1
    544e:	4198      	sbcs	r0, r3
    5450:	b009      	add	sp, #36	; 0x24
    5452:	230a      	movs	r3, #10
    5454:	4240      	negs	r0, r0
    5456:	4318      	orrs	r0, r3
    5458:	bc30      	pop	{r4, r5}
    545a:	bc02      	pop	{r1}
    545c:	4708      	bx	r1
    545e:	46c0      	nop			; (mov r8, r8)
    5460:	0000e908 	.word	0x0000e908
    5464:	40000000 	.word	0x40000000
    5468:	ffffdfff 	.word	0xffffdfff

0000546c <puts>:
    546c:	b508      	push	{r3, lr}
    546e:	4b04      	ldr	r3, [pc, #16]	; (5480 <puts+0x14>)
    5470:	1c01      	adds	r1, r0, #0
    5472:	6818      	ldr	r0, [r3, #0]
    5474:	f7ff ffc4 	bl	5400 <_puts_r>
    5478:	bc08      	pop	{r3}
    547a:	bc02      	pop	{r1}
    547c:	4708      	bx	r1
    547e:	46c0      	nop			; (mov r8, r8)
    5480:	40000000 	.word	0x40000000

00005484 <_sprintf_r>:
    5484:	b40c      	push	{r2, r3}
    5486:	b530      	push	{r4, r5, lr}
    5488:	b09d      	sub	sp, #116	; 0x74
    548a:	1c0c      	adds	r4, r1, #0
    548c:	a901      	add	r1, sp, #4
    548e:	9401      	str	r4, [sp, #4]
    5490:	610c      	str	r4, [r1, #16]
    5492:	4c0b      	ldr	r4, [pc, #44]	; (54c0 <_sprintf_r+0x3c>)
    5494:	ab20      	add	r3, sp, #128	; 0x80
    5496:	608c      	str	r4, [r1, #8]
    5498:	614c      	str	r4, [r1, #20]
    549a:	2582      	movs	r5, #130	; 0x82
    549c:	2401      	movs	r4, #1
    549e:	cb04      	ldmia	r3!, {r2}
    54a0:	00ad      	lsls	r5, r5, #2
    54a2:	4264      	negs	r4, r4
    54a4:	818d      	strh	r5, [r1, #12]
    54a6:	81cc      	strh	r4, [r1, #14]
    54a8:	931b      	str	r3, [sp, #108]	; 0x6c
    54aa:	f000 f8ed 	bl	5688 <_svfprintf_r>
    54ae:	9b01      	ldr	r3, [sp, #4]
    54b0:	2200      	movs	r2, #0
    54b2:	b01d      	add	sp, #116	; 0x74
    54b4:	701a      	strb	r2, [r3, #0]
    54b6:	bc30      	pop	{r4, r5}
    54b8:	bc08      	pop	{r3}
    54ba:	b002      	add	sp, #8
    54bc:	4718      	bx	r3
    54be:	46c0      	nop			; (mov r8, r8)
    54c0:	7fffffff 	.word	0x7fffffff

000054c4 <sprintf>:
    54c4:	b40e      	push	{r1, r2, r3}
    54c6:	b510      	push	{r4, lr}
    54c8:	b09d      	sub	sp, #116	; 0x74
    54ca:	a901      	add	r1, sp, #4
    54cc:	9001      	str	r0, [sp, #4]
    54ce:	6108      	str	r0, [r1, #16]
    54d0:	480b      	ldr	r0, [pc, #44]	; (5500 <sprintf+0x3c>)
    54d2:	6088      	str	r0, [r1, #8]
    54d4:	6148      	str	r0, [r1, #20]
    54d6:	2001      	movs	r0, #1
    54d8:	4240      	negs	r0, r0
    54da:	ab1f      	add	r3, sp, #124	; 0x7c
    54dc:	81c8      	strh	r0, [r1, #14]
    54de:	2482      	movs	r4, #130	; 0x82
    54e0:	4808      	ldr	r0, [pc, #32]	; (5504 <sprintf+0x40>)
    54e2:	cb04      	ldmia	r3!, {r2}
    54e4:	00a4      	lsls	r4, r4, #2
    54e6:	818c      	strh	r4, [r1, #12]
    54e8:	6800      	ldr	r0, [r0, #0]
    54ea:	931b      	str	r3, [sp, #108]	; 0x6c
    54ec:	f000 f8cc 	bl	5688 <_svfprintf_r>
    54f0:	9b01      	ldr	r3, [sp, #4]
    54f2:	2200      	movs	r2, #0
    54f4:	b01d      	add	sp, #116	; 0x74
    54f6:	701a      	strb	r2, [r3, #0]
    54f8:	bc10      	pop	{r4}
    54fa:	bc08      	pop	{r3}
    54fc:	b003      	add	sp, #12
    54fe:	4718      	bx	r3
    5500:	7fffffff 	.word	0x7fffffff
    5504:	40000000 	.word	0x40000000

00005508 <__sread>:
    5508:	b538      	push	{r3, r4, r5, lr}
    550a:	1c0c      	adds	r4, r1, #0
    550c:	250e      	movs	r5, #14
    550e:	5f49      	ldrsh	r1, [r1, r5]
    5510:	f7fc fad6 	bl	1ac0 <_read_r>
    5514:	2800      	cmp	r0, #0
    5516:	db05      	blt.n	5524 <__sread+0x1c>
    5518:	6d23      	ldr	r3, [r4, #80]	; 0x50
    551a:	181b      	adds	r3, r3, r0
    551c:	6523      	str	r3, [r4, #80]	; 0x50
    551e:	bc38      	pop	{r3, r4, r5}
    5520:	bc02      	pop	{r1}
    5522:	4708      	bx	r1
    5524:	89a2      	ldrh	r2, [r4, #12]
    5526:	4b02      	ldr	r3, [pc, #8]	; (5530 <__sread+0x28>)
    5528:	4013      	ands	r3, r2
    552a:	81a3      	strh	r3, [r4, #12]
    552c:	e7f7      	b.n	551e <__sread+0x16>
    552e:	46c0      	nop			; (mov r8, r8)
    5530:	ffffefff 	.word	0xffffefff

00005534 <__seofread>:
    5534:	2000      	movs	r0, #0
    5536:	4770      	bx	lr

00005538 <__swrite>:
    5538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    553a:	1c1f      	adds	r7, r3, #0
    553c:	898b      	ldrh	r3, [r1, #12]
    553e:	1c05      	adds	r5, r0, #0
    5540:	1c0c      	adds	r4, r1, #0
    5542:	1c16      	adds	r6, r2, #0
    5544:	05da      	lsls	r2, r3, #23
    5546:	d506      	bpl.n	5556 <__swrite+0x1e>
    5548:	230e      	movs	r3, #14
    554a:	5ec9      	ldrsh	r1, [r1, r3]
    554c:	2200      	movs	r2, #0
    554e:	2302      	movs	r3, #2
    5550:	f7fc fb22 	bl	1b98 <_lseek_r>
    5554:	89a3      	ldrh	r3, [r4, #12]
    5556:	4a06      	ldr	r2, [pc, #24]	; (5570 <__swrite+0x38>)
    5558:	4013      	ands	r3, r2
    555a:	81a3      	strh	r3, [r4, #12]
    555c:	220e      	movs	r2, #14
    555e:	5ea1      	ldrsh	r1, [r4, r2]
    5560:	1c28      	adds	r0, r5, #0
    5562:	1c32      	adds	r2, r6, #0
    5564:	1c3b      	adds	r3, r7, #0
    5566:	f7fc facf 	bl	1b08 <_write_r>
    556a:	bcf8      	pop	{r3, r4, r5, r6, r7}
    556c:	bc02      	pop	{r1}
    556e:	4708      	bx	r1
    5570:	ffffefff 	.word	0xffffefff

00005574 <__sseek>:
    5574:	b538      	push	{r3, r4, r5, lr}
    5576:	1c0c      	adds	r4, r1, #0
    5578:	250e      	movs	r5, #14
    557a:	5f49      	ldrsh	r1, [r1, r5]
    557c:	f7fc fb0c 	bl	1b98 <_lseek_r>
    5580:	1c43      	adds	r3, r0, #1
    5582:	d008      	beq.n	5596 <__sseek+0x22>
    5584:	89a2      	ldrh	r2, [r4, #12]
    5586:	2380      	movs	r3, #128	; 0x80
    5588:	015b      	lsls	r3, r3, #5
    558a:	4313      	orrs	r3, r2
    558c:	81a3      	strh	r3, [r4, #12]
    558e:	6520      	str	r0, [r4, #80]	; 0x50
    5590:	bc38      	pop	{r3, r4, r5}
    5592:	bc02      	pop	{r1}
    5594:	4708      	bx	r1
    5596:	89a2      	ldrh	r2, [r4, #12]
    5598:	4b01      	ldr	r3, [pc, #4]	; (55a0 <__sseek+0x2c>)
    559a:	4013      	ands	r3, r2
    559c:	81a3      	strh	r3, [r4, #12]
    559e:	e7f7      	b.n	5590 <__sseek+0x1c>
    55a0:	ffffefff 	.word	0xffffefff

000055a4 <__sclose>:
    55a4:	b508      	push	{r3, lr}
    55a6:	230e      	movs	r3, #14
    55a8:	5ec9      	ldrsh	r1, [r1, r3]
    55aa:	f7fc faf3 	bl	1b94 <_close_r>
    55ae:	bc08      	pop	{r3}
    55b0:	bc02      	pop	{r1}
    55b2:	4708      	bx	r1

000055b4 <strcat>:
    55b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55b6:	1c04      	adds	r4, r0, #0
    55b8:	07a3      	lsls	r3, r4, #30
    55ba:	d112      	bne.n	55e2 <strcat+0x2e>
    55bc:	6823      	ldr	r3, [r4, #0]
    55be:	4d0d      	ldr	r5, [pc, #52]	; (55f4 <strcat+0x40>)
    55c0:	4e0d      	ldr	r6, [pc, #52]	; (55f8 <strcat+0x44>)
    55c2:	195a      	adds	r2, r3, r5
    55c4:	439a      	bics	r2, r3
    55c6:	4232      	tst	r2, r6
    55c8:	d10b      	bne.n	55e2 <strcat+0x2e>
    55ca:	1d23      	adds	r3, r4, #4
    55cc:	1c18      	adds	r0, r3, #0
    55ce:	4f09      	ldr	r7, [pc, #36]	; (55f4 <strcat+0x40>)
    55d0:	cb04      	ldmia	r3!, {r2}
    55d2:	19d5      	adds	r5, r2, r7
    55d4:	4395      	bics	r5, r2
    55d6:	4235      	tst	r5, r6
    55d8:	d0f8      	beq.n	55cc <strcat+0x18>
    55da:	7803      	ldrb	r3, [r0, #0]
    55dc:	2b00      	cmp	r3, #0
    55de:	d003      	beq.n	55e8 <strcat+0x34>
    55e0:	3001      	adds	r0, #1
    55e2:	7803      	ldrb	r3, [r0, #0]
    55e4:	2b00      	cmp	r3, #0
    55e6:	d1fb      	bne.n	55e0 <strcat+0x2c>
    55e8:	f000 f808 	bl	55fc <strcpy>
    55ec:	1c20      	adds	r0, r4, #0
    55ee:	bcf8      	pop	{r3, r4, r5, r6, r7}
    55f0:	bc02      	pop	{r1}
    55f2:	4708      	bx	r1
    55f4:	fefefeff 	.word	0xfefefeff
    55f8:	80808080 	.word	0x80808080

000055fc <strcpy>:
    55fc:	1c03      	adds	r3, r0, #0
    55fe:	780a      	ldrb	r2, [r1, #0]
    5600:	3101      	adds	r1, #1
    5602:	701a      	strb	r2, [r3, #0]
    5604:	3301      	adds	r3, #1
    5606:	2a00      	cmp	r2, #0
    5608:	d1f9      	bne.n	55fe <strcpy+0x2>
    560a:	4770      	bx	lr

0000560c <strlen>:
    560c:	2300      	movs	r3, #0
    560e:	5cc2      	ldrb	r2, [r0, r3]
    5610:	3301      	adds	r3, #1
    5612:	2a00      	cmp	r2, #0
    5614:	d1fb      	bne.n	560e <strlen+0x2>
    5616:	1e58      	subs	r0, r3, #1
    5618:	4770      	bx	lr
    561a:	46c0      	nop			; (mov r8, r8)

0000561c <strncpy>:
    561c:	b5f0      	push	{r4, r5, r6, r7, lr}
    561e:	1c0e      	adds	r6, r1, #0
    5620:	4306      	orrs	r6, r0
    5622:	2503      	movs	r5, #3
    5624:	1c0c      	adds	r4, r1, #0
    5626:	1c03      	adds	r3, r0, #0
    5628:	422e      	tst	r6, r5
    562a:	d101      	bne.n	5630 <strncpy+0x14>
    562c:	4295      	cmp	r5, r2
    562e:	d317      	bcc.n	5660 <strncpy+0x44>
    5630:	1c03      	adds	r3, r0, #0
    5632:	2a00      	cmp	r2, #0
    5634:	d103      	bne.n	563e <strncpy+0x22>
    5636:	e010      	b.n	565a <strncpy+0x3e>
    5638:	3101      	adds	r1, #1
    563a:	2a00      	cmp	r2, #0
    563c:	d00d      	beq.n	565a <strncpy+0x3e>
    563e:	780c      	ldrb	r4, [r1, #0]
    5640:	3a01      	subs	r2, #1
    5642:	701c      	strb	r4, [r3, #0]
    5644:	3301      	adds	r3, #1
    5646:	2c00      	cmp	r4, #0
    5648:	d1f6      	bne.n	5638 <strncpy+0x1c>
    564a:	2100      	movs	r1, #0
    564c:	428a      	cmp	r2, r1
    564e:	d004      	beq.n	565a <strncpy+0x3e>
    5650:	3a01      	subs	r2, #1
    5652:	7019      	strb	r1, [r3, #0]
    5654:	3301      	adds	r3, #1
    5656:	2a00      	cmp	r2, #0
    5658:	d1fa      	bne.n	5650 <strncpy+0x34>
    565a:	bcf0      	pop	{r4, r5, r6, r7}
    565c:	bc02      	pop	{r1}
    565e:	4708      	bx	r1
    5660:	4907      	ldr	r1, [pc, #28]	; (5680 <strncpy+0x64>)
    5662:	468c      	mov	ip, r1
    5664:	4f07      	ldr	r7, [pc, #28]	; (5684 <strncpy+0x68>)
    5666:	1c21      	adds	r1, r4, #0
    5668:	cc20      	ldmia	r4!, {r5}
    566a:	19ee      	adds	r6, r5, r7
    566c:	43ae      	bics	r6, r5
    566e:	4667      	mov	r7, ip
    5670:	423e      	tst	r6, r7
    5672:	d1de      	bne.n	5632 <strncpy+0x16>
    5674:	3a04      	subs	r2, #4
    5676:	c320      	stmia	r3!, {r5}
    5678:	1c21      	adds	r1, r4, #0
    567a:	2a03      	cmp	r2, #3
    567c:	d8f2      	bhi.n	5664 <strncpy+0x48>
    567e:	e7d8      	b.n	5632 <strncpy+0x16>
    5680:	80808080 	.word	0x80808080
    5684:	fefefeff 	.word	0xfefefeff

00005688 <_svfprintf_r>:
    5688:	b5f0      	push	{r4, r5, r6, r7, lr}
    568a:	465f      	mov	r7, fp
    568c:	4656      	mov	r6, sl
    568e:	464d      	mov	r5, r9
    5690:	4644      	mov	r4, r8
    5692:	b4f0      	push	{r4, r5, r6, r7}
    5694:	b0c5      	sub	sp, #276	; 0x114
    5696:	930f      	str	r3, [sp, #60]	; 0x3c
    5698:	9108      	str	r1, [sp, #32]
    569a:	1c15      	adds	r5, r2, #0
    569c:	9009      	str	r0, [sp, #36]	; 0x24
    569e:	f004 f9e1 	bl	9a64 <_localeconv_r>
    56a2:	6800      	ldr	r0, [r0, #0]
    56a4:	9019      	str	r0, [sp, #100]	; 0x64
    56a6:	f7ff ffb1 	bl	560c <strlen>
    56aa:	901c      	str	r0, [sp, #112]	; 0x70
    56ac:	9808      	ldr	r0, [sp, #32]
    56ae:	8983      	ldrh	r3, [r0, #12]
    56b0:	0619      	lsls	r1, r3, #24
    56b2:	d504      	bpl.n	56be <_svfprintf_r+0x36>
    56b4:	6903      	ldr	r3, [r0, #16]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d101      	bne.n	56be <_svfprintf_r+0x36>
    56ba:	f001 f903 	bl	68c4 <_svfprintf_r+0x123c>
    56be:	2300      	movs	r3, #0
    56c0:	ac39      	add	r4, sp, #228	; 0xe4
    56c2:	af1f      	add	r7, sp, #124	; 0x7c
    56c4:	9739      	str	r7, [sp, #228]	; 0xe4
    56c6:	60a3      	str	r3, [r4, #8]
    56c8:	6063      	str	r3, [r4, #4]
    56ca:	930d      	str	r3, [sp, #52]	; 0x34
    56cc:	931a      	str	r3, [sp, #104]	; 0x68
    56ce:	931b      	str	r3, [sp, #108]	; 0x6c
    56d0:	9317      	str	r3, [sp, #92]	; 0x5c
    56d2:	931d      	str	r3, [sp, #116]	; 0x74
    56d4:	930e      	str	r3, [sp, #56]	; 0x38
    56d6:	46ab      	mov	fp, r5
    56d8:	1c3d      	adds	r5, r7, #0
    56da:	4658      	mov	r0, fp
    56dc:	7803      	ldrb	r3, [r0, #0]
    56de:	2b00      	cmp	r3, #0
    56e0:	d100      	bne.n	56e4 <_svfprintf_r+0x5c>
    56e2:	e167      	b.n	59b4 <_svfprintf_r+0x32c>
    56e4:	2b25      	cmp	r3, #37	; 0x25
    56e6:	d100      	bne.n	56ea <_svfprintf_r+0x62>
    56e8:	e164      	b.n	59b4 <_svfprintf_r+0x32c>
    56ea:	465e      	mov	r6, fp
    56ec:	e001      	b.n	56f2 <_svfprintf_r+0x6a>
    56ee:	2b00      	cmp	r3, #0
    56f0:	d003      	beq.n	56fa <_svfprintf_r+0x72>
    56f2:	3601      	adds	r6, #1
    56f4:	7833      	ldrb	r3, [r6, #0]
    56f6:	2b25      	cmp	r3, #37	; 0x25
    56f8:	d1f9      	bne.n	56ee <_svfprintf_r+0x66>
    56fa:	4659      	mov	r1, fp
    56fc:	1a77      	subs	r7, r6, r1
    56fe:	2f00      	cmp	r7, #0
    5700:	d00f      	beq.n	5722 <_svfprintf_r+0x9a>
    5702:	68a3      	ldr	r3, [r4, #8]
    5704:	19db      	adds	r3, r3, r7
    5706:	6029      	str	r1, [r5, #0]
    5708:	606f      	str	r7, [r5, #4]
    570a:	60a3      	str	r3, [r4, #8]
    570c:	6863      	ldr	r3, [r4, #4]
    570e:	3301      	adds	r3, #1
    5710:	6063      	str	r3, [r4, #4]
    5712:	3508      	adds	r5, #8
    5714:	2b07      	cmp	r3, #7
    5716:	dd00      	ble.n	571a <_svfprintf_r+0x92>
    5718:	e15c      	b.n	59d4 <_svfprintf_r+0x34c>
    571a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    571c:	19d2      	adds	r2, r2, r7
    571e:	920e      	str	r2, [sp, #56]	; 0x38
    5720:	7833      	ldrb	r3, [r6, #0]
    5722:	2b00      	cmp	r3, #0
    5724:	d100      	bne.n	5728 <_svfprintf_r+0xa0>
    5726:	e15e      	b.n	59e6 <_svfprintf_r+0x35e>
    5728:	4fbb      	ldr	r7, [pc, #748]	; (5a18 <_svfprintf_r+0x390>)
    572a:	2000      	movs	r0, #0
    572c:	446f      	add	r7, sp
    572e:	7038      	strb	r0, [r7, #0]
    5730:	1c73      	adds	r3, r6, #1
    5732:	469b      	mov	fp, r3
    5734:	2100      	movs	r1, #0
    5736:	7873      	ldrb	r3, [r6, #1]
    5738:	2601      	movs	r6, #1
    573a:	46b9      	mov	r9, r7
    573c:	4276      	negs	r6, r6
    573e:	910b      	str	r1, [sp, #44]	; 0x2c
    5740:	9107      	str	r1, [sp, #28]
    5742:	2740      	movs	r7, #64	; 0x40
    5744:	3180      	adds	r1, #128	; 0x80
    5746:	4ab5      	ldr	r2, [pc, #724]	; (5a1c <_svfprintf_r+0x394>)
    5748:	468a      	mov	sl, r1
    574a:	2020      	movs	r0, #32
    574c:	4659      	mov	r1, fp
    574e:	46bc      	mov	ip, r7
    5750:	46b3      	mov	fp, r6
    5752:	3101      	adds	r1, #1
    5754:	1c1e      	adds	r6, r3, #0
    5756:	3e20      	subs	r6, #32
    5758:	2e58      	cmp	r6, #88	; 0x58
    575a:	d800      	bhi.n	575e <_svfprintf_r+0xd6>
    575c:	e12d      	b.n	59ba <_svfprintf_r+0x332>
    575e:	468b      	mov	fp, r1
    5760:	9316      	str	r3, [sp, #88]	; 0x58
    5762:	2b00      	cmp	r3, #0
    5764:	d100      	bne.n	5768 <_svfprintf_r+0xe0>
    5766:	e13e      	b.n	59e6 <_svfprintf_r+0x35e>
    5768:	af16      	add	r7, sp, #88	; 0x58
    576a:	783f      	ldrb	r7, [r7, #0]
    576c:	ab2f      	add	r3, sp, #188	; 0xbc
    576e:	2200      	movs	r2, #0
    5770:	2601      	movs	r6, #1
    5772:	2100      	movs	r1, #0
    5774:	4648      	mov	r0, r9
    5776:	701f      	strb	r7, [r3, #0]
    5778:	7001      	strb	r1, [r0, #0]
    577a:	960a      	str	r6, [sp, #40]	; 0x28
    577c:	960c      	str	r6, [sp, #48]	; 0x30
    577e:	9214      	str	r2, [sp, #80]	; 0x50
    5780:	9218      	str	r2, [sp, #96]	; 0x60
    5782:	9313      	str	r3, [sp, #76]	; 0x4c
    5784:	9807      	ldr	r0, [sp, #28]
    5786:	2302      	movs	r3, #2
    5788:	4018      	ands	r0, r3
    578a:	4682      	mov	sl, r0
    578c:	d002      	beq.n	5794 <_svfprintf_r+0x10c>
    578e:	990a      	ldr	r1, [sp, #40]	; 0x28
    5790:	18c9      	adds	r1, r1, r3
    5792:	910a      	str	r1, [sp, #40]	; 0x28
    5794:	9e07      	ldr	r6, [sp, #28]
    5796:	2384      	movs	r3, #132	; 0x84
    5798:	401e      	ands	r6, r3
    579a:	9615      	str	r6, [sp, #84]	; 0x54
    579c:	d13c      	bne.n	5818 <_svfprintf_r+0x190>
    579e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    57a0:	980a      	ldr	r0, [sp, #40]	; 0x28
    57a2:	1a3e      	subs	r6, r7, r0
    57a4:	2e00      	cmp	r6, #0
    57a6:	dd37      	ble.n	5818 <_svfprintf_r+0x190>
    57a8:	2e10      	cmp	r6, #16
    57aa:	dc01      	bgt.n	57b0 <_svfprintf_r+0x128>
    57ac:	f001 f906 	bl	69bc <_svfprintf_r+0x1334>
    57b0:	499b      	ldr	r1, [pc, #620]	; (5a20 <_svfprintf_r+0x398>)
    57b2:	1c2a      	adds	r2, r5, #0
    57b4:	2710      	movs	r7, #16
    57b6:	1c0d      	adds	r5, r1, #0
    57b8:	e005      	b.n	57c6 <_svfprintf_r+0x13e>
    57ba:	3208      	adds	r2, #8
    57bc:	1c13      	adds	r3, r2, #0
    57be:	3e10      	subs	r6, #16
    57c0:	3308      	adds	r3, #8
    57c2:	2e10      	cmp	r6, #16
    57c4:	dd16      	ble.n	57f4 <_svfprintf_r+0x16c>
    57c6:	68a3      	ldr	r3, [r4, #8]
    57c8:	3310      	adds	r3, #16
    57ca:	6015      	str	r5, [r2, #0]
    57cc:	6057      	str	r7, [r2, #4]
    57ce:	60a3      	str	r3, [r4, #8]
    57d0:	6863      	ldr	r3, [r4, #4]
    57d2:	3301      	adds	r3, #1
    57d4:	6063      	str	r3, [r4, #4]
    57d6:	2b07      	cmp	r3, #7
    57d8:	ddef      	ble.n	57ba <_svfprintf_r+0x132>
    57da:	9809      	ldr	r0, [sp, #36]	; 0x24
    57dc:	9908      	ldr	r1, [sp, #32]
    57de:	1c22      	adds	r2, r4, #0
    57e0:	f005 fa14 	bl	ac0c <__ssprint_r>
    57e4:	2800      	cmp	r0, #0
    57e6:	d000      	beq.n	57ea <_svfprintf_r+0x162>
    57e8:	e105      	b.n	59f6 <_svfprintf_r+0x36e>
    57ea:	3e10      	subs	r6, #16
    57ec:	ab21      	add	r3, sp, #132	; 0x84
    57ee:	aa1f      	add	r2, sp, #124	; 0x7c
    57f0:	2e10      	cmp	r6, #16
    57f2:	dce8      	bgt.n	57c6 <_svfprintf_r+0x13e>
    57f4:	46a8      	mov	r8, r5
    57f6:	1c15      	adds	r5, r2, #0
    57f8:	68a2      	ldr	r2, [r4, #8]
    57fa:	4647      	mov	r7, r8
    57fc:	18b2      	adds	r2, r6, r2
    57fe:	602f      	str	r7, [r5, #0]
    5800:	606e      	str	r6, [r5, #4]
    5802:	60a2      	str	r2, [r4, #8]
    5804:	6862      	ldr	r2, [r4, #4]
    5806:	3201      	adds	r2, #1
    5808:	6062      	str	r2, [r4, #4]
    580a:	2a07      	cmp	r2, #7
    580c:	dd01      	ble.n	5812 <_svfprintf_r+0x18a>
    580e:	f000 fd19 	bl	6244 <_svfprintf_r+0xbbc>
    5812:	4648      	mov	r0, r9
    5814:	7802      	ldrb	r2, [r0, #0]
    5816:	1c1d      	adds	r5, r3, #0
    5818:	2a00      	cmp	r2, #0
    581a:	d00e      	beq.n	583a <_svfprintf_r+0x1b2>
    581c:	2301      	movs	r3, #1
    581e:	606b      	str	r3, [r5, #4]
    5820:	68a3      	ldr	r3, [r4, #8]
    5822:	464a      	mov	r2, r9
    5824:	3301      	adds	r3, #1
    5826:	602a      	str	r2, [r5, #0]
    5828:	60a3      	str	r3, [r4, #8]
    582a:	6863      	ldr	r3, [r4, #4]
    582c:	3301      	adds	r3, #1
    582e:	6063      	str	r3, [r4, #4]
    5830:	3508      	adds	r5, #8
    5832:	2b07      	cmp	r3, #7
    5834:	dd01      	ble.n	583a <_svfprintf_r+0x1b2>
    5836:	f000 fc44 	bl	60c2 <_svfprintf_r+0xa3a>
    583a:	2300      	movs	r3, #0
    583c:	459a      	cmp	sl, r3
    583e:	d00e      	beq.n	585e <_svfprintf_r+0x1d6>
    5840:	ab43      	add	r3, sp, #268	; 0x10c
    5842:	602b      	str	r3, [r5, #0]
    5844:	2302      	movs	r3, #2
    5846:	606b      	str	r3, [r5, #4]
    5848:	68a3      	ldr	r3, [r4, #8]
    584a:	3302      	adds	r3, #2
    584c:	60a3      	str	r3, [r4, #8]
    584e:	6863      	ldr	r3, [r4, #4]
    5850:	3301      	adds	r3, #1
    5852:	6063      	str	r3, [r4, #4]
    5854:	3508      	adds	r5, #8
    5856:	2b07      	cmp	r3, #7
    5858:	dd01      	ble.n	585e <_svfprintf_r+0x1d6>
    585a:	f000 fc3d 	bl	60d8 <_svfprintf_r+0xa50>
    585e:	9e15      	ldr	r6, [sp, #84]	; 0x54
    5860:	2e80      	cmp	r6, #128	; 0x80
    5862:	d100      	bne.n	5866 <_svfprintf_r+0x1de>
    5864:	e371      	b.n	5f4a <_svfprintf_r+0x8c2>
    5866:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    586a:	1ad6      	subs	r6, r2, r3
    586c:	2e00      	cmp	r6, #0
    586e:	dc00      	bgt.n	5872 <_svfprintf_r+0x1ea>
    5870:	e3ba      	b.n	5fe8 <_svfprintf_r+0x960>
    5872:	2e10      	cmp	r6, #16
    5874:	dc01      	bgt.n	587a <_svfprintf_r+0x1f2>
    5876:	f000 feb7 	bl	65e8 <_svfprintf_r+0xf60>
    587a:	4f69      	ldr	r7, [pc, #420]	; (5a20 <_svfprintf_r+0x398>)
    587c:	2010      	movs	r0, #16
    587e:	46b8      	mov	r8, r7
    5880:	4681      	mov	r9, r0
    5882:	1c2b      	adds	r3, r5, #0
    5884:	44c1      	add	r9, r8
    5886:	4682      	mov	sl, r0
    5888:	9f09      	ldr	r7, [sp, #36]	; 0x24
    588a:	9d08      	ldr	r5, [sp, #32]
    588c:	e005      	b.n	589a <_svfprintf_r+0x212>
    588e:	3308      	adds	r3, #8
    5890:	1c1a      	adds	r2, r3, #0
    5892:	3e10      	subs	r6, #16
    5894:	3208      	adds	r2, #8
    5896:	2e10      	cmp	r6, #16
    5898:	dd18      	ble.n	58cc <_svfprintf_r+0x244>
    589a:	464a      	mov	r2, r9
    589c:	601a      	str	r2, [r3, #0]
    589e:	68a2      	ldr	r2, [r4, #8]
    58a0:	4650      	mov	r0, sl
    58a2:	3210      	adds	r2, #16
    58a4:	6058      	str	r0, [r3, #4]
    58a6:	60a2      	str	r2, [r4, #8]
    58a8:	6862      	ldr	r2, [r4, #4]
    58aa:	3201      	adds	r2, #1
    58ac:	6062      	str	r2, [r4, #4]
    58ae:	2a07      	cmp	r2, #7
    58b0:	dded      	ble.n	588e <_svfprintf_r+0x206>
    58b2:	1c38      	adds	r0, r7, #0
    58b4:	1c29      	adds	r1, r5, #0
    58b6:	1c22      	adds	r2, r4, #0
    58b8:	f005 f9a8 	bl	ac0c <__ssprint_r>
    58bc:	2800      	cmp	r0, #0
    58be:	d000      	beq.n	58c2 <_svfprintf_r+0x23a>
    58c0:	e099      	b.n	59f6 <_svfprintf_r+0x36e>
    58c2:	3e10      	subs	r6, #16
    58c4:	aa21      	add	r2, sp, #132	; 0x84
    58c6:	ab1f      	add	r3, sp, #124	; 0x7c
    58c8:	2e10      	cmp	r6, #16
    58ca:	dce6      	bgt.n	589a <_svfprintf_r+0x212>
    58cc:	1c1d      	adds	r5, r3, #0
    58ce:	1c17      	adds	r7, r2, #0
    58d0:	2110      	movs	r1, #16
    58d2:	1c0b      	adds	r3, r1, #0
    58d4:	4443      	add	r3, r8
    58d6:	602b      	str	r3, [r5, #0]
    58d8:	68a3      	ldr	r3, [r4, #8]
    58da:	606e      	str	r6, [r5, #4]
    58dc:	18f6      	adds	r6, r6, r3
    58de:	6863      	ldr	r3, [r4, #4]
    58e0:	3301      	adds	r3, #1
    58e2:	60a6      	str	r6, [r4, #8]
    58e4:	6063      	str	r3, [r4, #4]
    58e6:	2b07      	cmp	r3, #7
    58e8:	dd00      	ble.n	58ec <_svfprintf_r+0x264>
    58ea:	e3df      	b.n	60ac <_svfprintf_r+0xa24>
    58ec:	9a07      	ldr	r2, [sp, #28]
    58ee:	05d2      	lsls	r2, r2, #23
    58f0:	d500      	bpl.n	58f4 <_svfprintf_r+0x26c>
    58f2:	e2bb      	b.n	5e6c <_svfprintf_r+0x7e4>
    58f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    58f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    58f8:	603b      	str	r3, [r7, #0]
    58fa:	68a3      	ldr	r3, [r4, #8]
    58fc:	195b      	adds	r3, r3, r5
    58fe:	607d      	str	r5, [r7, #4]
    5900:	60a3      	str	r3, [r4, #8]
    5902:	6863      	ldr	r3, [r4, #4]
    5904:	3301      	adds	r3, #1
    5906:	6063      	str	r3, [r4, #4]
    5908:	2b07      	cmp	r3, #7
    590a:	dd00      	ble.n	590e <_svfprintf_r+0x286>
    590c:	e3b8      	b.n	6080 <_svfprintf_r+0x9f8>
    590e:	1c3b      	adds	r3, r7, #0
    5910:	3308      	adds	r3, #8
    5912:	9f07      	ldr	r7, [sp, #28]
    5914:	077f      	lsls	r7, r7, #29
    5916:	d539      	bpl.n	598c <_svfprintf_r+0x304>
    5918:	980b      	ldr	r0, [sp, #44]	; 0x2c
    591a:	990a      	ldr	r1, [sp, #40]	; 0x28
    591c:	1a45      	subs	r5, r0, r1
    591e:	2d00      	cmp	r5, #0
    5920:	dd34      	ble.n	598c <_svfprintf_r+0x304>
    5922:	2d10      	cmp	r5, #16
    5924:	dc01      	bgt.n	592a <_svfprintf_r+0x2a2>
    5926:	f001 f86e 	bl	6a06 <_svfprintf_r+0x137e>
    592a:	4e3d      	ldr	r6, [pc, #244]	; (5a20 <_svfprintf_r+0x398>)
    592c:	46b0      	mov	r8, r6
    592e:	4647      	mov	r7, r8
    5930:	2610      	movs	r6, #16
    5932:	e002      	b.n	593a <_svfprintf_r+0x2b2>
    5934:	3d10      	subs	r5, #16
    5936:	2d10      	cmp	r5, #16
    5938:	dd15      	ble.n	5966 <_svfprintf_r+0x2de>
    593a:	68a2      	ldr	r2, [r4, #8]
    593c:	3210      	adds	r2, #16
    593e:	601f      	str	r7, [r3, #0]
    5940:	605e      	str	r6, [r3, #4]
    5942:	60a2      	str	r2, [r4, #8]
    5944:	6862      	ldr	r2, [r4, #4]
    5946:	3201      	adds	r2, #1
    5948:	6062      	str	r2, [r4, #4]
    594a:	3308      	adds	r3, #8
    594c:	2a07      	cmp	r2, #7
    594e:	ddf1      	ble.n	5934 <_svfprintf_r+0x2ac>
    5950:	9809      	ldr	r0, [sp, #36]	; 0x24
    5952:	9908      	ldr	r1, [sp, #32]
    5954:	1c22      	adds	r2, r4, #0
    5956:	f005 f959 	bl	ac0c <__ssprint_r>
    595a:	2800      	cmp	r0, #0
    595c:	d14b      	bne.n	59f6 <_svfprintf_r+0x36e>
    595e:	3d10      	subs	r5, #16
    5960:	ab1f      	add	r3, sp, #124	; 0x7c
    5962:	2d10      	cmp	r5, #16
    5964:	dce9      	bgt.n	593a <_svfprintf_r+0x2b2>
    5966:	46b8      	mov	r8, r7
    5968:	4647      	mov	r7, r8
    596a:	605d      	str	r5, [r3, #4]
    596c:	601f      	str	r7, [r3, #0]
    596e:	68a3      	ldr	r3, [r4, #8]
    5970:	18ed      	adds	r5, r5, r3
    5972:	6863      	ldr	r3, [r4, #4]
    5974:	3301      	adds	r3, #1
    5976:	60a5      	str	r5, [r4, #8]
    5978:	6063      	str	r3, [r4, #4]
    597a:	2b07      	cmp	r3, #7
    597c:	dd07      	ble.n	598e <_svfprintf_r+0x306>
    597e:	9809      	ldr	r0, [sp, #36]	; 0x24
    5980:	9908      	ldr	r1, [sp, #32]
    5982:	1c22      	adds	r2, r4, #0
    5984:	f005 f942 	bl	ac0c <__ssprint_r>
    5988:	2800      	cmp	r0, #0
    598a:	d134      	bne.n	59f6 <_svfprintf_r+0x36e>
    598c:	68a5      	ldr	r5, [r4, #8]
    598e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5990:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5992:	4283      	cmp	r3, r0
    5994:	da00      	bge.n	5998 <_svfprintf_r+0x310>
    5996:	1c03      	adds	r3, r0, #0
    5998:	990e      	ldr	r1, [sp, #56]	; 0x38
    599a:	18c9      	adds	r1, r1, r3
    599c:	910e      	str	r1, [sp, #56]	; 0x38
    599e:	2d00      	cmp	r5, #0
    59a0:	d000      	beq.n	59a4 <_svfprintf_r+0x31c>
    59a2:	e377      	b.n	6094 <_svfprintf_r+0xa0c>
    59a4:	2200      	movs	r2, #0
    59a6:	6062      	str	r2, [r4, #4]
    59a8:	4658      	mov	r0, fp
    59aa:	7803      	ldrb	r3, [r0, #0]
    59ac:	ad1f      	add	r5, sp, #124	; 0x7c
    59ae:	2b00      	cmp	r3, #0
    59b0:	d000      	beq.n	59b4 <_svfprintf_r+0x32c>
    59b2:	e697      	b.n	56e4 <_svfprintf_r+0x5c>
    59b4:	465e      	mov	r6, fp
    59b6:	7833      	ldrb	r3, [r6, #0]
    59b8:	e6b3      	b.n	5722 <_svfprintf_r+0x9a>
    59ba:	00b6      	lsls	r6, r6, #2
    59bc:	5996      	ldr	r6, [r2, r6]
    59be:	46b7      	mov	pc, r6
    59c0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    59c2:	427f      	negs	r7, r7
    59c4:	970b      	str	r7, [sp, #44]	; 0x2c
    59c6:	960f      	str	r6, [sp, #60]	; 0x3c
    59c8:	9e07      	ldr	r6, [sp, #28]
    59ca:	2304      	movs	r3, #4
    59cc:	431e      	orrs	r6, r3
    59ce:	9607      	str	r6, [sp, #28]
    59d0:	780b      	ldrb	r3, [r1, #0]
    59d2:	e6be      	b.n	5752 <_svfprintf_r+0xca>
    59d4:	9809      	ldr	r0, [sp, #36]	; 0x24
    59d6:	9908      	ldr	r1, [sp, #32]
    59d8:	1c22      	adds	r2, r4, #0
    59da:	f005 f917 	bl	ac0c <__ssprint_r>
    59de:	2800      	cmp	r0, #0
    59e0:	d109      	bne.n	59f6 <_svfprintf_r+0x36e>
    59e2:	ad1f      	add	r5, sp, #124	; 0x7c
    59e4:	e699      	b.n	571a <_svfprintf_r+0x92>
    59e6:	68a3      	ldr	r3, [r4, #8]
    59e8:	2b00      	cmp	r3, #0
    59ea:	d004      	beq.n	59f6 <_svfprintf_r+0x36e>
    59ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    59ee:	9908      	ldr	r1, [sp, #32]
    59f0:	1c22      	adds	r2, r4, #0
    59f2:	f005 f90b 	bl	ac0c <__ssprint_r>
    59f6:	9d08      	ldr	r5, [sp, #32]
    59f8:	89ab      	ldrh	r3, [r5, #12]
    59fa:	065e      	lsls	r6, r3, #25
    59fc:	d502      	bpl.n	5a04 <_svfprintf_r+0x37c>
    59fe:	2301      	movs	r3, #1
    5a00:	425b      	negs	r3, r3
    5a02:	930e      	str	r3, [sp, #56]	; 0x38
    5a04:	980e      	ldr	r0, [sp, #56]	; 0x38
    5a06:	b045      	add	sp, #276	; 0x114
    5a08:	bc3c      	pop	{r2, r3, r4, r5}
    5a0a:	4690      	mov	r8, r2
    5a0c:	4699      	mov	r9, r3
    5a0e:	46a2      	mov	sl, r4
    5a10:	46ab      	mov	fp, r5
    5a12:	bcf0      	pop	{r4, r5, r6, r7}
    5a14:	bc02      	pop	{r1}
    5a16:	4708      	bx	r1
    5a18:	0000010f 	.word	0x0000010f
    5a1c:	0000dd7c 	.word	0x0000dd7c
    5a20:	0000dee0 	.word	0x0000dee0
    5a24:	9a07      	ldr	r2, [sp, #28]
    5a26:	9316      	str	r3, [sp, #88]	; 0x58
    5a28:	2310      	movs	r3, #16
    5a2a:	431a      	orrs	r2, r3
    5a2c:	9207      	str	r2, [sp, #28]
    5a2e:	465e      	mov	r6, fp
    5a30:	468b      	mov	fp, r1
    5a32:	9b07      	ldr	r3, [sp, #28]
    5a34:	069b      	lsls	r3, r3, #26
    5a36:	d401      	bmi.n	5a3c <_svfprintf_r+0x3b4>
    5a38:	f000 fc76 	bl	6328 <_svfprintf_r+0xca0>
    5a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5a3e:	2307      	movs	r3, #7
    5a40:	3207      	adds	r2, #7
    5a42:	439a      	bics	r2, r3
    5a44:	6810      	ldr	r0, [r2, #0]
    5a46:	6851      	ldr	r1, [r2, #4]
    5a48:	2708      	movs	r7, #8
    5a4a:	18bf      	adds	r7, r7, r2
    5a4c:	9010      	str	r0, [sp, #64]	; 0x40
    5a4e:	9111      	str	r1, [sp, #68]	; 0x44
    5a50:	970f      	str	r7, [sp, #60]	; 0x3c
    5a52:	9a11      	ldr	r2, [sp, #68]	; 0x44
    5a54:	2a00      	cmp	r2, #0
    5a56:	da01      	bge.n	5a5c <_svfprintf_r+0x3d4>
    5a58:	f000 fcc0 	bl	63dc <_svfprintf_r+0xd54>
    5a5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5a5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5a60:	431a      	orrs	r2, r3
    5a62:	1e53      	subs	r3, r2, #1
    5a64:	419a      	sbcs	r2, r3
    5a66:	2301      	movs	r3, #1
    5a68:	2e00      	cmp	r6, #0
    5a6a:	db03      	blt.n	5a74 <_svfprintf_r+0x3ec>
    5a6c:	9f07      	ldr	r7, [sp, #28]
    5a6e:	2180      	movs	r1, #128	; 0x80
    5a70:	438f      	bics	r7, r1
    5a72:	9707      	str	r7, [sp, #28]
    5a74:	2e00      	cmp	r6, #0
    5a76:	d102      	bne.n	5a7e <_svfprintf_r+0x3f6>
    5a78:	2a00      	cmp	r2, #0
    5a7a:	d100      	bne.n	5a7e <_svfprintf_r+0x3f6>
    5a7c:	e255      	b.n	5f2a <_svfprintf_r+0x8a2>
    5a7e:	2b01      	cmp	r3, #1
    5a80:	d100      	bne.n	5a84 <_svfprintf_r+0x3fc>
    5a82:	e3af      	b.n	61e4 <_svfprintf_r+0xb5c>
    5a84:	2b02      	cmp	r3, #2
    5a86:	d100      	bne.n	5a8a <_svfprintf_r+0x402>
    5a88:	e38e      	b.n	61a8 <_svfprintf_r+0xb20>
    5a8a:	4659      	mov	r1, fp
    5a8c:	2007      	movs	r0, #7
    5a8e:	9413      	str	r4, [sp, #76]	; 0x4c
    5a90:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5a92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5a94:	910a      	str	r1, [sp, #40]	; 0x28
    5a96:	4684      	mov	ip, r0
    5a98:	1c21      	adds	r1, r4, #0
    5a9a:	46a8      	mov	r8, r5
    5a9c:	08d7      	lsrs	r7, r2, #3
    5a9e:	0758      	lsls	r0, r3, #29
    5aa0:	46ba      	mov	sl, r7
    5aa2:	4665      	mov	r5, ip
    5aa4:	4015      	ands	r5, r2
    5aa6:	1c07      	adds	r7, r0, #0
    5aa8:	4650      	mov	r0, sl
    5aaa:	4307      	orrs	r7, r0
    5aac:	3901      	subs	r1, #1
    5aae:	3530      	adds	r5, #48	; 0x30
    5ab0:	08d8      	lsrs	r0, r3, #3
    5ab2:	700d      	strb	r5, [r1, #0]
    5ab4:	1c3a      	adds	r2, r7, #0
    5ab6:	1c03      	adds	r3, r0, #0
    5ab8:	4307      	orrs	r7, r0
    5aba:	d1ef      	bne.n	5a9c <_svfprintf_r+0x414>
    5abc:	980a      	ldr	r0, [sp, #40]	; 0x28
    5abe:	9113      	str	r1, [sp, #76]	; 0x4c
    5ac0:	9907      	ldr	r1, [sp, #28]
    5ac2:	1c2f      	adds	r7, r5, #0
    5ac4:	4683      	mov	fp, r0
    5ac6:	9210      	str	r2, [sp, #64]	; 0x40
    5ac8:	9311      	str	r3, [sp, #68]	; 0x44
    5aca:	4645      	mov	r5, r8
    5acc:	07c9      	lsls	r1, r1, #31
    5ace:	d501      	bpl.n	5ad4 <_svfprintf_r+0x44c>
    5ad0:	f000 fc78 	bl	63c4 <_svfprintf_r+0xd3c>
    5ad4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5ad6:	1aa2      	subs	r2, r4, r2
    5ad8:	920c      	str	r2, [sp, #48]	; 0x30
    5ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5adc:	920a      	str	r2, [sp, #40]	; 0x28
    5ade:	42b2      	cmp	r2, r6
    5ae0:	da00      	bge.n	5ae4 <_svfprintf_r+0x45c>
    5ae2:	960a      	str	r6, [sp, #40]	; 0x28
    5ae4:	464b      	mov	r3, r9
    5ae6:	9614      	str	r6, [sp, #80]	; 0x50
    5ae8:	2600      	movs	r6, #0
    5aea:	781a      	ldrb	r2, [r3, #0]
    5aec:	9618      	str	r6, [sp, #96]	; 0x60
    5aee:	2a00      	cmp	r2, #0
    5af0:	d100      	bne.n	5af4 <_svfprintf_r+0x46c>
    5af2:	e647      	b.n	5784 <_svfprintf_r+0xfc>
    5af4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    5af6:	3701      	adds	r7, #1
    5af8:	970a      	str	r7, [sp, #40]	; 0x28
    5afa:	e643      	b.n	5784 <_svfprintf_r+0xfc>
    5afc:	9807      	ldr	r0, [sp, #28]
    5afe:	465e      	mov	r6, fp
    5b00:	9316      	str	r3, [sp, #88]	; 0x58
    5b02:	468b      	mov	fp, r1
    5b04:	4698      	mov	r8, r3
    5b06:	0700      	lsls	r0, r0, #28
    5b08:	d401      	bmi.n	5b0e <_svfprintf_r+0x486>
    5b0a:	f000 fcc3 	bl	6494 <_svfprintf_r+0xe0c>
    5b0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5b10:	2307      	movs	r3, #7
    5b12:	3207      	adds	r2, #7
    5b14:	439a      	bics	r2, r3
    5b16:	6813      	ldr	r3, [r2, #0]
    5b18:	2108      	movs	r1, #8
    5b1a:	1889      	adds	r1, r1, r2
    5b1c:	910f      	str	r1, [sp, #60]	; 0x3c
    5b1e:	931a      	str	r3, [sp, #104]	; 0x68
    5b20:	6852      	ldr	r2, [r2, #4]
    5b22:	921b      	str	r2, [sp, #108]	; 0x6c
    5b24:	981a      	ldr	r0, [sp, #104]	; 0x68
    5b26:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5b28:	f005 f818 	bl	ab5c <__fpclassifyd>
    5b2c:	2801      	cmp	r0, #1
    5b2e:	d001      	beq.n	5b34 <_svfprintf_r+0x4ac>
    5b30:	f000 fc68 	bl	6404 <_svfprintf_r+0xd7c>
    5b34:	981a      	ldr	r0, [sp, #104]	; 0x68
    5b36:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5b38:	4bc8      	ldr	r3, [pc, #800]	; (5e5c <_svfprintf_r+0x7d4>)
    5b3a:	4ac7      	ldr	r2, [pc, #796]	; (5e58 <_svfprintf_r+0x7d0>)
    5b3c:	f008 f86e 	bl	dc1c <____aeabi_dcmplt_from_thumb>
    5b40:	2800      	cmp	r0, #0
    5b42:	d001      	beq.n	5b48 <_svfprintf_r+0x4c0>
    5b44:	f000 ff23 	bl	698e <_svfprintf_r+0x1306>
    5b48:	4649      	mov	r1, r9
    5b4a:	780a      	ldrb	r2, [r1, #0]
    5b4c:	9e16      	ldr	r6, [sp, #88]	; 0x58
    5b4e:	2e47      	cmp	r6, #71	; 0x47
    5b50:	dd01      	ble.n	5b56 <_svfprintf_r+0x4ce>
    5b52:	f000 fdd4 	bl	66fe <_svfprintf_r+0x1076>
    5b56:	4fc2      	ldr	r7, [pc, #776]	; (5e60 <_svfprintf_r+0x7d8>)
    5b58:	9713      	str	r7, [sp, #76]	; 0x4c
    5b5a:	9907      	ldr	r1, [sp, #28]
    5b5c:	2380      	movs	r3, #128	; 0x80
    5b5e:	4399      	bics	r1, r3
    5b60:	2600      	movs	r6, #0
    5b62:	3b7d      	subs	r3, #125	; 0x7d
    5b64:	9107      	str	r1, [sp, #28]
    5b66:	930a      	str	r3, [sp, #40]	; 0x28
    5b68:	930c      	str	r3, [sp, #48]	; 0x30
    5b6a:	9614      	str	r6, [sp, #80]	; 0x50
    5b6c:	9618      	str	r6, [sp, #96]	; 0x60
    5b6e:	e7be      	b.n	5aee <_svfprintf_r+0x466>
    5b70:	9f07      	ldr	r7, [sp, #28]
    5b72:	2308      	movs	r3, #8
    5b74:	431f      	orrs	r7, r3
    5b76:	9707      	str	r7, [sp, #28]
    5b78:	780b      	ldrb	r3, [r1, #0]
    5b7a:	e5ea      	b.n	5752 <_svfprintf_r+0xca>
    5b7c:	9a07      	ldr	r2, [sp, #28]
    5b7e:	9316      	str	r3, [sp, #88]	; 0x58
    5b80:	2310      	movs	r3, #16
    5b82:	431a      	orrs	r2, r3
    5b84:	9207      	str	r2, [sp, #28]
    5b86:	465e      	mov	r6, fp
    5b88:	468b      	mov	fp, r1
    5b8a:	9b07      	ldr	r3, [sp, #28]
    5b8c:	2120      	movs	r1, #32
    5b8e:	4019      	ands	r1, r3
    5b90:	d100      	bne.n	5b94 <_svfprintf_r+0x50c>
    5b92:	e3b5      	b.n	6300 <_svfprintf_r+0xc78>
    5b94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5b96:	2307      	movs	r3, #7
    5b98:	3207      	adds	r2, #7
    5b9a:	439a      	bics	r2, r3
    5b9c:	6810      	ldr	r0, [r2, #0]
    5b9e:	6851      	ldr	r1, [r2, #4]
    5ba0:	2708      	movs	r7, #8
    5ba2:	18bf      	adds	r7, r7, r2
    5ba4:	9010      	str	r0, [sp, #64]	; 0x40
    5ba6:	9111      	str	r1, [sp, #68]	; 0x44
    5ba8:	1c02      	adds	r2, r0, #0
    5baa:	430a      	orrs	r2, r1
    5bac:	970f      	str	r7, [sp, #60]	; 0x3c
    5bae:	1e53      	subs	r3, r2, #1
    5bb0:	419a      	sbcs	r2, r3
    5bb2:	2300      	movs	r3, #0
    5bb4:	2000      	movs	r0, #0
    5bb6:	464f      	mov	r7, r9
    5bb8:	7038      	strb	r0, [r7, #0]
    5bba:	e755      	b.n	5a68 <_svfprintf_r+0x3e0>
    5bbc:	9807      	ldr	r0, [sp, #28]
    5bbe:	9316      	str	r3, [sp, #88]	; 0x58
    5bc0:	2310      	movs	r3, #16
    5bc2:	4318      	orrs	r0, r3
    5bc4:	9007      	str	r0, [sp, #28]
    5bc6:	465e      	mov	r6, fp
    5bc8:	468b      	mov	fp, r1
    5bca:	9907      	ldr	r1, [sp, #28]
    5bcc:	2220      	movs	r2, #32
    5bce:	400a      	ands	r2, r1
    5bd0:	d100      	bne.n	5bd4 <_svfprintf_r+0x54c>
    5bd2:	e382      	b.n	62da <_svfprintf_r+0xc52>
    5bd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5bd6:	2307      	movs	r3, #7
    5bd8:	3207      	adds	r2, #7
    5bda:	439a      	bics	r2, r3
    5bdc:	6810      	ldr	r0, [r2, #0]
    5bde:	6851      	ldr	r1, [r2, #4]
    5be0:	3301      	adds	r3, #1
    5be2:	189b      	adds	r3, r3, r2
    5be4:	1c02      	adds	r2, r0, #0
    5be6:	430a      	orrs	r2, r1
    5be8:	930f      	str	r3, [sp, #60]	; 0x3c
    5bea:	9010      	str	r0, [sp, #64]	; 0x40
    5bec:	9111      	str	r1, [sp, #68]	; 0x44
    5bee:	1e53      	subs	r3, r2, #1
    5bf0:	419a      	sbcs	r2, r3
    5bf2:	2301      	movs	r3, #1
    5bf4:	e7de      	b.n	5bb4 <_svfprintf_r+0x52c>
    5bf6:	465e      	mov	r6, fp
    5bf8:	489a      	ldr	r0, [pc, #616]	; (5e64 <_svfprintf_r+0x7dc>)
    5bfa:	468b      	mov	fp, r1
    5bfc:	9907      	ldr	r1, [sp, #28]
    5bfe:	2220      	movs	r2, #32
    5c00:	9316      	str	r3, [sp, #88]	; 0x58
    5c02:	9017      	str	r0, [sp, #92]	; 0x5c
    5c04:	400a      	ands	r2, r1
    5c06:	d100      	bne.n	5c0a <_svfprintf_r+0x582>
    5c08:	e0f3      	b.n	5df2 <_svfprintf_r+0x76a>
    5c0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5c0c:	2307      	movs	r3, #7
    5c0e:	3207      	adds	r2, #7
    5c10:	439a      	bics	r2, r3
    5c12:	6810      	ldr	r0, [r2, #0]
    5c14:	6851      	ldr	r1, [r2, #4]
    5c16:	3301      	adds	r3, #1
    5c18:	189b      	adds	r3, r3, r2
    5c1a:	9010      	str	r0, [sp, #64]	; 0x40
    5c1c:	9111      	str	r1, [sp, #68]	; 0x44
    5c1e:	930f      	str	r3, [sp, #60]	; 0x3c
    5c20:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5c22:	9f11      	ldr	r7, [sp, #68]	; 0x44
    5c24:	433a      	orrs	r2, r7
    5c26:	1e53      	subs	r3, r2, #1
    5c28:	419a      	sbcs	r2, r3
    5c2a:	2a00      	cmp	r2, #0
    5c2c:	d100      	bne.n	5c30 <_svfprintf_r+0x5a8>
    5c2e:	e365      	b.n	62fc <_svfprintf_r+0xc74>
    5c30:	9807      	ldr	r0, [sp, #28]
    5c32:	2301      	movs	r3, #1
    5c34:	4218      	tst	r0, r3
    5c36:	d100      	bne.n	5c3a <_svfprintf_r+0x5b2>
    5c38:	e360      	b.n	62fc <_svfprintf_r+0xc74>
    5c3a:	aa43      	add	r2, sp, #268	; 0x10c
    5c3c:	2130      	movs	r1, #48	; 0x30
    5c3e:	7011      	strb	r1, [r2, #0]
    5c40:	a916      	add	r1, sp, #88	; 0x58
    5c42:	7809      	ldrb	r1, [r1, #0]
    5c44:	7051      	strb	r1, [r2, #1]
    5c46:	2102      	movs	r1, #2
    5c48:	4308      	orrs	r0, r1
    5c4a:	1c1a      	adds	r2, r3, #0
    5c4c:	9007      	str	r0, [sp, #28]
    5c4e:	1c0b      	adds	r3, r1, #0
    5c50:	e7b0      	b.n	5bb4 <_svfprintf_r+0x52c>
    5c52:	780b      	ldrb	r3, [r1, #0]
    5c54:	3101      	adds	r1, #1
    5c56:	2b2a      	cmp	r3, #42	; 0x2a
    5c58:	d101      	bne.n	5c5e <_svfprintf_r+0x5d6>
    5c5a:	f000 ff9d 	bl	6b98 <_svfprintf_r+0x1510>
    5c5e:	2630      	movs	r6, #48	; 0x30
    5c60:	4276      	negs	r6, r6
    5c62:	18f6      	adds	r6, r6, r3
    5c64:	2700      	movs	r7, #0
    5c66:	960a      	str	r6, [sp, #40]	; 0x28
    5c68:	46bb      	mov	fp, r7
    5c6a:	2e09      	cmp	r6, #9
    5c6c:	d900      	bls.n	5c70 <_svfprintf_r+0x5e8>
    5c6e:	e571      	b.n	5754 <_svfprintf_r+0xcc>
    5c70:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    5c72:	46a8      	mov	r8, r5
    5c74:	1c3b      	adds	r3, r7, #0
    5c76:	009d      	lsls	r5, r3, #2
    5c78:	18eb      	adds	r3, r5, r3
    5c7a:	780d      	ldrb	r5, [r1, #0]
    5c7c:	005b      	lsls	r3, r3, #1
    5c7e:	199b      	adds	r3, r3, r6
    5c80:	1c2e      	adds	r6, r5, #0
    5c82:	3e30      	subs	r6, #48	; 0x30
    5c84:	3101      	adds	r1, #1
    5c86:	2e09      	cmp	r6, #9
    5c88:	d9f5      	bls.n	5c76 <_svfprintf_r+0x5ee>
    5c8a:	469b      	mov	fp, r3
    5c8c:	465e      	mov	r6, fp
    5c8e:	1c2b      	adds	r3, r5, #0
    5c90:	4645      	mov	r5, r8
    5c92:	2e00      	cmp	r6, #0
    5c94:	46b3      	mov	fp, r6
    5c96:	db00      	blt.n	5c9a <_svfprintf_r+0x612>
    5c98:	e55c      	b.n	5754 <_svfprintf_r+0xcc>
    5c9a:	2601      	movs	r6, #1
    5c9c:	4276      	negs	r6, r6
    5c9e:	46b3      	mov	fp, r6
    5ca0:	e558      	b.n	5754 <_svfprintf_r+0xcc>
    5ca2:	9e07      	ldr	r6, [sp, #28]
    5ca4:	4667      	mov	r7, ip
    5ca6:	433e      	orrs	r6, r7
    5ca8:	9607      	str	r6, [sp, #28]
    5caa:	780b      	ldrb	r3, [r1, #0]
    5cac:	e551      	b.n	5752 <_svfprintf_r+0xca>
    5cae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5cb0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    5cb2:	681b      	ldr	r3, [r3, #0]
    5cb4:	3604      	adds	r6, #4
    5cb6:	930b      	str	r3, [sp, #44]	; 0x2c
    5cb8:	2b00      	cmp	r3, #0
    5cba:	da00      	bge.n	5cbe <_svfprintf_r+0x636>
    5cbc:	e680      	b.n	59c0 <_svfprintf_r+0x338>
    5cbe:	780b      	ldrb	r3, [r1, #0]
    5cc0:	960f      	str	r6, [sp, #60]	; 0x3c
    5cc2:	e546      	b.n	5752 <_svfprintf_r+0xca>
    5cc4:	232b      	movs	r3, #43	; 0x2b
    5cc6:	464f      	mov	r7, r9
    5cc8:	703b      	strb	r3, [r7, #0]
    5cca:	780b      	ldrb	r3, [r1, #0]
    5ccc:	e541      	b.n	5752 <_svfprintf_r+0xca>
    5cce:	9f07      	ldr	r7, [sp, #28]
    5cd0:	4653      	mov	r3, sl
    5cd2:	431f      	orrs	r7, r3
    5cd4:	9707      	str	r7, [sp, #28]
    5cd6:	780b      	ldrb	r3, [r1, #0]
    5cd8:	e53b      	b.n	5752 <_svfprintf_r+0xca>
    5cda:	3b30      	subs	r3, #48	; 0x30
    5cdc:	2600      	movs	r6, #0
    5cde:	930a      	str	r3, [sp, #40]	; 0x28
    5ce0:	960b      	str	r6, [sp, #44]	; 0x2c
    5ce2:	1c33      	adds	r3, r6, #0
    5ce4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    5ce6:	46a8      	mov	r8, r5
    5ce8:	009d      	lsls	r5, r3, #2
    5cea:	18eb      	adds	r3, r5, r3
    5cec:	780d      	ldrb	r5, [r1, #0]
    5cee:	005b      	lsls	r3, r3, #1
    5cf0:	18f3      	adds	r3, r6, r3
    5cf2:	1c2e      	adds	r6, r5, #0
    5cf4:	3e30      	subs	r6, #48	; 0x30
    5cf6:	3101      	adds	r1, #1
    5cf8:	2e09      	cmp	r6, #9
    5cfa:	d9f5      	bls.n	5ce8 <_svfprintf_r+0x660>
    5cfc:	930b      	str	r3, [sp, #44]	; 0x2c
    5cfe:	1c2b      	adds	r3, r5, #0
    5d00:	4645      	mov	r5, r8
    5d02:	e527      	b.n	5754 <_svfprintf_r+0xcc>
    5d04:	464e      	mov	r6, r9
    5d06:	7833      	ldrb	r3, [r6, #0]
    5d08:	2b00      	cmp	r3, #0
    5d0a:	d000      	beq.n	5d0e <_svfprintf_r+0x686>
    5d0c:	e377      	b.n	63fe <_svfprintf_r+0xd76>
    5d0e:	7030      	strb	r0, [r6, #0]
    5d10:	780b      	ldrb	r3, [r1, #0]
    5d12:	e51e      	b.n	5752 <_svfprintf_r+0xca>
    5d14:	9f07      	ldr	r7, [sp, #28]
    5d16:	2301      	movs	r3, #1
    5d18:	431f      	orrs	r7, r3
    5d1a:	9707      	str	r7, [sp, #28]
    5d1c:	780b      	ldrb	r3, [r1, #0]
    5d1e:	e518      	b.n	5752 <_svfprintf_r+0xca>
    5d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5d22:	1c16      	adds	r6, r2, #0
    5d24:	6812      	ldr	r2, [r2, #0]
    5d26:	9316      	str	r3, [sp, #88]	; 0x58
    5d28:	ab2f      	add	r3, sp, #188	; 0xbc
    5d2a:	468b      	mov	fp, r1
    5d2c:	3604      	adds	r6, #4
    5d2e:	2101      	movs	r1, #1
    5d30:	701a      	strb	r2, [r3, #0]
    5d32:	2000      	movs	r0, #0
    5d34:	2200      	movs	r2, #0
    5d36:	464f      	mov	r7, r9
    5d38:	960f      	str	r6, [sp, #60]	; 0x3c
    5d3a:	7038      	strb	r0, [r7, #0]
    5d3c:	910a      	str	r1, [sp, #40]	; 0x28
    5d3e:	910c      	str	r1, [sp, #48]	; 0x30
    5d40:	9214      	str	r2, [sp, #80]	; 0x50
    5d42:	9218      	str	r2, [sp, #96]	; 0x60
    5d44:	9313      	str	r3, [sp, #76]	; 0x4c
    5d46:	e51d      	b.n	5784 <_svfprintf_r+0xfc>
    5d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5d4a:	1c1f      	adds	r7, r3, #0
    5d4c:	681b      	ldr	r3, [r3, #0]
    5d4e:	465e      	mov	r6, fp
    5d50:	468b      	mov	fp, r1
    5d52:	9907      	ldr	r1, [sp, #28]
    5d54:	9310      	str	r3, [sp, #64]	; 0x40
    5d56:	2302      	movs	r3, #2
    5d58:	2000      	movs	r0, #0
    5d5a:	4319      	orrs	r1, r3
    5d5c:	aa43      	add	r2, sp, #268	; 0x10c
    5d5e:	3704      	adds	r7, #4
    5d60:	9011      	str	r0, [sp, #68]	; 0x44
    5d62:	9107      	str	r1, [sp, #28]
    5d64:	3078      	adds	r0, #120	; 0x78
    5d66:	2130      	movs	r1, #48	; 0x30
    5d68:	7011      	strb	r1, [r2, #0]
    5d6a:	970f      	str	r7, [sp, #60]	; 0x3c
    5d6c:	7050      	strb	r0, [r2, #1]
    5d6e:	4f3e      	ldr	r7, [pc, #248]	; (5e68 <_svfprintf_r+0x7e0>)
    5d70:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5d72:	9717      	str	r7, [sp, #92]	; 0x5c
    5d74:	1e51      	subs	r1, r2, #1
    5d76:	418a      	sbcs	r2, r1
    5d78:	9016      	str	r0, [sp, #88]	; 0x58
    5d7a:	e71b      	b.n	5bb4 <_svfprintf_r+0x52c>
    5d7c:	9b07      	ldr	r3, [sp, #28]
    5d7e:	4303      	orrs	r3, r0
    5d80:	9307      	str	r3, [sp, #28]
    5d82:	780b      	ldrb	r3, [r1, #0]
    5d84:	e4e5      	b.n	5752 <_svfprintf_r+0xca>
    5d86:	465e      	mov	r6, fp
    5d88:	4648      	mov	r0, r9
    5d8a:	468b      	mov	fp, r1
    5d8c:	2100      	movs	r1, #0
    5d8e:	7001      	strb	r1, [r0, #0]
    5d90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5d92:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5d94:	6812      	ldr	r2, [r2, #0]
    5d96:	9316      	str	r3, [sp, #88]	; 0x58
    5d98:	3704      	adds	r7, #4
    5d9a:	9213      	str	r2, [sp, #76]	; 0x4c
    5d9c:	2a00      	cmp	r2, #0
    5d9e:	d101      	bne.n	5da4 <_svfprintf_r+0x71c>
    5da0:	f000 fe40 	bl	6a24 <_svfprintf_r+0x139c>
    5da4:	2e00      	cmp	r6, #0
    5da6:	da01      	bge.n	5dac <_svfprintf_r+0x724>
    5da8:	f000 fdf8 	bl	699c <_svfprintf_r+0x1314>
    5dac:	9813      	ldr	r0, [sp, #76]	; 0x4c
    5dae:	2100      	movs	r1, #0
    5db0:	1c32      	adds	r2, r6, #0
    5db2:	f003 fee3 	bl	9b7c <memchr>
    5db6:	2800      	cmp	r0, #0
    5db8:	d101      	bne.n	5dbe <_svfprintf_r+0x736>
    5dba:	f000 fe88 	bl	6ace <_svfprintf_r+0x1446>
    5dbe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5dc0:	1a80      	subs	r0, r0, r2
    5dc2:	900c      	str	r0, [sp, #48]	; 0x30
    5dc4:	42b0      	cmp	r0, r6
    5dc6:	dc01      	bgt.n	5dcc <_svfprintf_r+0x744>
    5dc8:	f000 fc7a 	bl	66c0 <_svfprintf_r+0x1038>
    5dcc:	960a      	str	r6, [sp, #40]	; 0x28
    5dce:	464b      	mov	r3, r9
    5dd0:	960c      	str	r6, [sp, #48]	; 0x30
    5dd2:	2600      	movs	r6, #0
    5dd4:	781a      	ldrb	r2, [r3, #0]
    5dd6:	970f      	str	r7, [sp, #60]	; 0x3c
    5dd8:	9614      	str	r6, [sp, #80]	; 0x50
    5dda:	9618      	str	r6, [sp, #96]	; 0x60
    5ddc:	e687      	b.n	5aee <_svfprintf_r+0x466>
    5dde:	465e      	mov	r6, fp
    5de0:	4f21      	ldr	r7, [pc, #132]	; (5e68 <_svfprintf_r+0x7e0>)
    5de2:	468b      	mov	fp, r1
    5de4:	9907      	ldr	r1, [sp, #28]
    5de6:	2220      	movs	r2, #32
    5de8:	9316      	str	r3, [sp, #88]	; 0x58
    5dea:	9717      	str	r7, [sp, #92]	; 0x5c
    5dec:	400a      	ands	r2, r1
    5dee:	d000      	beq.n	5df2 <_svfprintf_r+0x76a>
    5df0:	e70b      	b.n	5c0a <_svfprintf_r+0x582>
    5df2:	9907      	ldr	r1, [sp, #28]
    5df4:	2310      	movs	r3, #16
    5df6:	4019      	ands	r1, r3
    5df8:	d100      	bne.n	5dfc <_svfprintf_r+0x774>
    5dfa:	e364      	b.n	64c6 <_svfprintf_r+0xe3e>
    5dfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5dfe:	6809      	ldr	r1, [r1, #0]
    5e00:	9211      	str	r2, [sp, #68]	; 0x44
    5e02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5e04:	3204      	adds	r2, #4
    5e06:	9110      	str	r1, [sp, #64]	; 0x40
    5e08:	920f      	str	r2, [sp, #60]	; 0x3c
    5e0a:	e709      	b.n	5c20 <_svfprintf_r+0x598>
    5e0c:	780b      	ldrb	r3, [r1, #0]
    5e0e:	2b6c      	cmp	r3, #108	; 0x6c
    5e10:	d101      	bne.n	5e16 <_svfprintf_r+0x78e>
    5e12:	f000 fc4a 	bl	66aa <_svfprintf_r+0x1022>
    5e16:	9e07      	ldr	r6, [sp, #28]
    5e18:	2710      	movs	r7, #16
    5e1a:	433e      	orrs	r6, r7
    5e1c:	9607      	str	r6, [sp, #28]
    5e1e:	e498      	b.n	5752 <_svfprintf_r+0xca>
    5e20:	468b      	mov	fp, r1
    5e22:	9907      	ldr	r1, [sp, #28]
    5e24:	0689      	lsls	r1, r1, #26
    5e26:	d400      	bmi.n	5e2a <_svfprintf_r+0x7a2>
    5e28:	e341      	b.n	64ae <_svfprintf_r+0xe26>
    5e2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5e2c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    5e2e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5e30:	6813      	ldr	r3, [r2, #0]
    5e32:	3704      	adds	r7, #4
    5e34:	17f2      	asrs	r2, r6, #31
    5e36:	601e      	str	r6, [r3, #0]
    5e38:	605a      	str	r2, [r3, #4]
    5e3a:	970f      	str	r7, [sp, #60]	; 0x3c
    5e3c:	e44d      	b.n	56da <_svfprintf_r+0x52>
    5e3e:	465e      	mov	r6, fp
    5e40:	9316      	str	r3, [sp, #88]	; 0x58
    5e42:	468b      	mov	fp, r1
    5e44:	e5f5      	b.n	5a32 <_svfprintf_r+0x3aa>
    5e46:	465e      	mov	r6, fp
    5e48:	9316      	str	r3, [sp, #88]	; 0x58
    5e4a:	468b      	mov	fp, r1
    5e4c:	e6bd      	b.n	5bca <_svfprintf_r+0x542>
    5e4e:	465e      	mov	r6, fp
    5e50:	9316      	str	r3, [sp, #88]	; 0x58
    5e52:	468b      	mov	fp, r1
    5e54:	e699      	b.n	5b8a <_svfprintf_r+0x502>
    5e56:	46c0      	nop			; (mov r8, r8)
	...
    5e60:	0000e91c 	.word	0x0000e91c
    5e64:	0000e92c 	.word	0x0000e92c
    5e68:	0000e940 	.word	0x0000e940
    5e6c:	9e16      	ldr	r6, [sp, #88]	; 0x58
    5e6e:	2e65      	cmp	r6, #101	; 0x65
    5e70:	dc00      	bgt.n	5e74 <_svfprintf_r+0x7ec>
    5e72:	e0bb      	b.n	5fec <_svfprintf_r+0x964>
    5e74:	981a      	ldr	r0, [sp, #104]	; 0x68
    5e76:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5e78:	4bc8      	ldr	r3, [pc, #800]	; (619c <_svfprintf_r+0xb14>)
    5e7a:	4ac7      	ldr	r2, [pc, #796]	; (6198 <_svfprintf_r+0xb10>)
    5e7c:	f007 fec0 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    5e80:	2800      	cmp	r0, #0
    5e82:	d100      	bne.n	5e86 <_svfprintf_r+0x7fe>
    5e84:	e133      	b.n	60ee <_svfprintf_r+0xa66>
    5e86:	4bc6      	ldr	r3, [pc, #792]	; (61a0 <_svfprintf_r+0xb18>)
    5e88:	603b      	str	r3, [r7, #0]
    5e8a:	2301      	movs	r3, #1
    5e8c:	607b      	str	r3, [r7, #4]
    5e8e:	68a3      	ldr	r3, [r4, #8]
    5e90:	3301      	adds	r3, #1
    5e92:	60a3      	str	r3, [r4, #8]
    5e94:	6863      	ldr	r3, [r4, #4]
    5e96:	3301      	adds	r3, #1
    5e98:	6063      	str	r3, [r4, #4]
    5e9a:	2b07      	cmp	r3, #7
    5e9c:	dd00      	ble.n	5ea0 <_svfprintf_r+0x818>
    5e9e:	e3a9      	b.n	65f4 <_svfprintf_r+0xf6c>
    5ea0:	1c3b      	adds	r3, r7, #0
    5ea2:	3308      	adds	r3, #8
    5ea4:	9a42      	ldr	r2, [sp, #264]	; 0x108
    5ea6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    5ea8:	42ba      	cmp	r2, r7
    5eaa:	db03      	blt.n	5eb4 <_svfprintf_r+0x82c>
    5eac:	9807      	ldr	r0, [sp, #28]
    5eae:	07c0      	lsls	r0, r0, #31
    5eb0:	d400      	bmi.n	5eb4 <_svfprintf_r+0x82c>
    5eb2:	e52e      	b.n	5912 <_svfprintf_r+0x28a>
    5eb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5eb6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    5eb8:	605a      	str	r2, [r3, #4]
    5eba:	68a2      	ldr	r2, [r4, #8]
    5ebc:	9919      	ldr	r1, [sp, #100]	; 0x64
    5ebe:	1952      	adds	r2, r2, r5
    5ec0:	6019      	str	r1, [r3, #0]
    5ec2:	60a2      	str	r2, [r4, #8]
    5ec4:	6862      	ldr	r2, [r4, #4]
    5ec6:	3201      	adds	r2, #1
    5ec8:	6062      	str	r2, [r4, #4]
    5eca:	2a07      	cmp	r2, #7
    5ecc:	dd01      	ble.n	5ed2 <_svfprintf_r+0x84a>
    5ece:	f000 fc1a 	bl	6706 <_svfprintf_r+0x107e>
    5ed2:	1c1a      	adds	r2, r3, #0
    5ed4:	3208      	adds	r2, #8
    5ed6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5ed8:	3d01      	subs	r5, #1
    5eda:	2d00      	cmp	r5, #0
    5edc:	dc00      	bgt.n	5ee0 <_svfprintf_r+0x858>
    5ede:	e379      	b.n	65d4 <_svfprintf_r+0xf4c>
    5ee0:	2d10      	cmp	r5, #16
    5ee2:	dc00      	bgt.n	5ee6 <_svfprintf_r+0x85e>
    5ee4:	e2a9      	b.n	643a <_svfprintf_r+0xdb2>
    5ee6:	4eaf      	ldr	r6, [pc, #700]	; (61a4 <_svfprintf_r+0xb1c>)
    5ee8:	2710      	movs	r7, #16
    5eea:	46b0      	mov	r8, r6
    5eec:	1c3e      	adds	r6, r7, #0
    5eee:	4446      	add	r6, r8
    5ef0:	e006      	b.n	5f00 <_svfprintf_r+0x878>
    5ef2:	3208      	adds	r2, #8
    5ef4:	1c13      	adds	r3, r2, #0
    5ef6:	3308      	adds	r3, #8
    5ef8:	3d10      	subs	r5, #16
    5efa:	2d10      	cmp	r5, #16
    5efc:	dc00      	bgt.n	5f00 <_svfprintf_r+0x878>
    5efe:	e2a0      	b.n	6442 <_svfprintf_r+0xdba>
    5f00:	68a3      	ldr	r3, [r4, #8]
    5f02:	3310      	adds	r3, #16
    5f04:	6016      	str	r6, [r2, #0]
    5f06:	6057      	str	r7, [r2, #4]
    5f08:	60a3      	str	r3, [r4, #8]
    5f0a:	6863      	ldr	r3, [r4, #4]
    5f0c:	3301      	adds	r3, #1
    5f0e:	6063      	str	r3, [r4, #4]
    5f10:	2b07      	cmp	r3, #7
    5f12:	ddee      	ble.n	5ef2 <_svfprintf_r+0x86a>
    5f14:	9809      	ldr	r0, [sp, #36]	; 0x24
    5f16:	9908      	ldr	r1, [sp, #32]
    5f18:	1c22      	adds	r2, r4, #0
    5f1a:	f004 fe77 	bl	ac0c <__ssprint_r>
    5f1e:	2800      	cmp	r0, #0
    5f20:	d000      	beq.n	5f24 <_svfprintf_r+0x89c>
    5f22:	e568      	b.n	59f6 <_svfprintf_r+0x36e>
    5f24:	ab21      	add	r3, sp, #132	; 0x84
    5f26:	aa1f      	add	r2, sp, #124	; 0x7c
    5f28:	e7e6      	b.n	5ef8 <_svfprintf_r+0x870>
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d000      	beq.n	5f30 <_svfprintf_r+0x8a8>
    5f2e:	e0ba      	b.n	60a6 <_svfprintf_r+0xa1e>
    5f30:	9807      	ldr	r0, [sp, #28]
    5f32:	07c0      	lsls	r0, r0, #31
    5f34:	d400      	bmi.n	5f38 <_svfprintf_r+0x8b0>
    5f36:	e12c      	b.n	6192 <_svfprintf_r+0xb0a>
    5f38:	2127      	movs	r1, #39	; 0x27
    5f3a:	ab2f      	add	r3, sp, #188	; 0xbc
    5f3c:	2230      	movs	r2, #48	; 0x30
    5f3e:	545a      	strb	r2, [r3, r1]
    5f40:	185b      	adds	r3, r3, r1
    5f42:	1ae1      	subs	r1, r4, r3
    5f44:	910c      	str	r1, [sp, #48]	; 0x30
    5f46:	9313      	str	r3, [sp, #76]	; 0x4c
    5f48:	e5c7      	b.n	5ada <_svfprintf_r+0x452>
    5f4a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5f4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    5f4e:	1a3e      	subs	r6, r7, r0
    5f50:	2e00      	cmp	r6, #0
    5f52:	dc00      	bgt.n	5f56 <_svfprintf_r+0x8ce>
    5f54:	e487      	b.n	5866 <_svfprintf_r+0x1de>
    5f56:	2e10      	cmp	r6, #16
    5f58:	dc01      	bgt.n	5f5e <_svfprintf_r+0x8d6>
    5f5a:	f000 fd9b 	bl	6a94 <_svfprintf_r+0x140c>
    5f5e:	4a91      	ldr	r2, [pc, #580]	; (61a4 <_svfprintf_r+0xb1c>)
    5f60:	1c2b      	adds	r3, r5, #0
    5f62:	2510      	movs	r5, #16
    5f64:	1c2f      	adds	r7, r5, #0
    5f66:	4690      	mov	r8, r2
    5f68:	46a9      	mov	r9, r5
    5f6a:	4447      	add	r7, r8
    5f6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5f6e:	e005      	b.n	5f7c <_svfprintf_r+0x8f4>
    5f70:	3308      	adds	r3, #8
    5f72:	1c1a      	adds	r2, r3, #0
    5f74:	3e10      	subs	r6, #16
    5f76:	3208      	adds	r2, #8
    5f78:	2e10      	cmp	r6, #16
    5f7a:	dd17      	ble.n	5fac <_svfprintf_r+0x924>
    5f7c:	68a2      	ldr	r2, [r4, #8]
    5f7e:	4648      	mov	r0, r9
    5f80:	3210      	adds	r2, #16
    5f82:	601f      	str	r7, [r3, #0]
    5f84:	6058      	str	r0, [r3, #4]
    5f86:	60a2      	str	r2, [r4, #8]
    5f88:	6862      	ldr	r2, [r4, #4]
    5f8a:	3201      	adds	r2, #1
    5f8c:	6062      	str	r2, [r4, #4]
    5f8e:	2a07      	cmp	r2, #7
    5f90:	ddee      	ble.n	5f70 <_svfprintf_r+0x8e8>
    5f92:	1c28      	adds	r0, r5, #0
    5f94:	9908      	ldr	r1, [sp, #32]
    5f96:	1c22      	adds	r2, r4, #0
    5f98:	f004 fe38 	bl	ac0c <__ssprint_r>
    5f9c:	2800      	cmp	r0, #0
    5f9e:	d000      	beq.n	5fa2 <_svfprintf_r+0x91a>
    5fa0:	e529      	b.n	59f6 <_svfprintf_r+0x36e>
    5fa2:	3e10      	subs	r6, #16
    5fa4:	aa21      	add	r2, sp, #132	; 0x84
    5fa6:	ab1f      	add	r3, sp, #124	; 0x7c
    5fa8:	2e10      	cmp	r6, #16
    5faa:	dce7      	bgt.n	5f7c <_svfprintf_r+0x8f4>
    5fac:	1c15      	adds	r5, r2, #0
    5fae:	2110      	movs	r1, #16
    5fb0:	1c0a      	adds	r2, r1, #0
    5fb2:	4442      	add	r2, r8
    5fb4:	605e      	str	r6, [r3, #4]
    5fb6:	601a      	str	r2, [r3, #0]
    5fb8:	68a3      	ldr	r3, [r4, #8]
    5fba:	18f6      	adds	r6, r6, r3
    5fbc:	6863      	ldr	r3, [r4, #4]
    5fbe:	3301      	adds	r3, #1
    5fc0:	60a6      	str	r6, [r4, #8]
    5fc2:	6063      	str	r3, [r4, #4]
    5fc4:	2b07      	cmp	r3, #7
    5fc6:	dc00      	bgt.n	5fca <_svfprintf_r+0x942>
    5fc8:	e44d      	b.n	5866 <_svfprintf_r+0x1de>
    5fca:	9809      	ldr	r0, [sp, #36]	; 0x24
    5fcc:	9908      	ldr	r1, [sp, #32]
    5fce:	1c22      	adds	r2, r4, #0
    5fd0:	f004 fe1c 	bl	ac0c <__ssprint_r>
    5fd4:	2800      	cmp	r0, #0
    5fd6:	d000      	beq.n	5fda <_svfprintf_r+0x952>
    5fd8:	e50d      	b.n	59f6 <_svfprintf_r+0x36e>
    5fda:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5fde:	1ad6      	subs	r6, r2, r3
    5fe0:	ad1f      	add	r5, sp, #124	; 0x7c
    5fe2:	2e00      	cmp	r6, #0
    5fe4:	dd00      	ble.n	5fe8 <_svfprintf_r+0x960>
    5fe6:	e444      	b.n	5872 <_svfprintf_r+0x1ea>
    5fe8:	1c2f      	adds	r7, r5, #0
    5fea:	e47f      	b.n	58ec <_svfprintf_r+0x264>
    5fec:	980d      	ldr	r0, [sp, #52]	; 0x34
    5fee:	2801      	cmp	r0, #1
    5ff0:	dc00      	bgt.n	5ff4 <_svfprintf_r+0x96c>
    5ff2:	e1b1      	b.n	6358 <_svfprintf_r+0xcd0>
    5ff4:	2301      	movs	r3, #1
    5ff6:	607b      	str	r3, [r7, #4]
    5ff8:	68a3      	ldr	r3, [r4, #8]
    5ffa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5ffc:	3301      	adds	r3, #1
    5ffe:	603a      	str	r2, [r7, #0]
    6000:	60a3      	str	r3, [r4, #8]
    6002:	6863      	ldr	r3, [r4, #4]
    6004:	3301      	adds	r3, #1
    6006:	6063      	str	r3, [r4, #4]
    6008:	2b07      	cmp	r3, #7
    600a:	dd00      	ble.n	600e <_svfprintf_r+0x986>
    600c:	e1ce      	b.n	63ac <_svfprintf_r+0xd24>
    600e:	3708      	adds	r7, #8
    6010:	1c3d      	adds	r5, r7, #0
    6012:	3508      	adds	r5, #8
    6014:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6016:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    6018:	603b      	str	r3, [r7, #0]
    601a:	68a3      	ldr	r3, [r4, #8]
    601c:	199b      	adds	r3, r3, r6
    601e:	607e      	str	r6, [r7, #4]
    6020:	60a3      	str	r3, [r4, #8]
    6022:	6863      	ldr	r3, [r4, #4]
    6024:	3301      	adds	r3, #1
    6026:	6063      	str	r3, [r4, #4]
    6028:	2b07      	cmp	r3, #7
    602a:	dd00      	ble.n	602e <_svfprintf_r+0x9a6>
    602c:	e1b2      	b.n	6394 <_svfprintf_r+0xd0c>
    602e:	1c2f      	adds	r7, r5, #0
    6030:	3708      	adds	r7, #8
    6032:	981a      	ldr	r0, [sp, #104]	; 0x68
    6034:	991b      	ldr	r1, [sp, #108]	; 0x6c
    6036:	4b59      	ldr	r3, [pc, #356]	; (619c <_svfprintf_r+0xb14>)
    6038:	4a57      	ldr	r2, [pc, #348]	; (6198 <_svfprintf_r+0xb10>)
    603a:	f007 fde1 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    603e:	2800      	cmp	r0, #0
    6040:	d000      	beq.n	6044 <_svfprintf_r+0x9bc>
    6042:	e10d      	b.n	6260 <_svfprintf_r+0xbd8>
    6044:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6046:	3301      	adds	r3, #1
    6048:	602b      	str	r3, [r5, #0]
    604a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    604c:	68a2      	ldr	r2, [r4, #8]
    604e:	3b01      	subs	r3, #1
    6050:	606b      	str	r3, [r5, #4]
    6052:	189b      	adds	r3, r3, r2
    6054:	60a3      	str	r3, [r4, #8]
    6056:	6863      	ldr	r3, [r4, #4]
    6058:	3301      	adds	r3, #1
    605a:	6063      	str	r3, [r4, #4]
    605c:	2b07      	cmp	r3, #7
    605e:	dd00      	ble.n	6062 <_svfprintf_r+0x9da>
    6060:	e18c      	b.n	637c <_svfprintf_r+0xcf4>
    6062:	1c3b      	adds	r3, r7, #0
    6064:	3308      	adds	r3, #8
    6066:	aa3e      	add	r2, sp, #248	; 0xf8
    6068:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    606a:	603a      	str	r2, [r7, #0]
    606c:	68a2      	ldr	r2, [r4, #8]
    606e:	607e      	str	r6, [r7, #4]
    6070:	1992      	adds	r2, r2, r6
    6072:	60a2      	str	r2, [r4, #8]
    6074:	6862      	ldr	r2, [r4, #4]
    6076:	3201      	adds	r2, #1
    6078:	6062      	str	r2, [r4, #4]
    607a:	2a07      	cmp	r2, #7
    607c:	dc00      	bgt.n	6080 <_svfprintf_r+0x9f8>
    607e:	e448      	b.n	5912 <_svfprintf_r+0x28a>
    6080:	9809      	ldr	r0, [sp, #36]	; 0x24
    6082:	9908      	ldr	r1, [sp, #32]
    6084:	1c22      	adds	r2, r4, #0
    6086:	f004 fdc1 	bl	ac0c <__ssprint_r>
    608a:	2800      	cmp	r0, #0
    608c:	d000      	beq.n	6090 <_svfprintf_r+0xa08>
    608e:	e4b2      	b.n	59f6 <_svfprintf_r+0x36e>
    6090:	ab1f      	add	r3, sp, #124	; 0x7c
    6092:	e43e      	b.n	5912 <_svfprintf_r+0x28a>
    6094:	9809      	ldr	r0, [sp, #36]	; 0x24
    6096:	9908      	ldr	r1, [sp, #32]
    6098:	1c22      	adds	r2, r4, #0
    609a:	f004 fdb7 	bl	ac0c <__ssprint_r>
    609e:	2800      	cmp	r0, #0
    60a0:	d100      	bne.n	60a4 <_svfprintf_r+0xa1c>
    60a2:	e47f      	b.n	59a4 <_svfprintf_r+0x31c>
    60a4:	e4a7      	b.n	59f6 <_svfprintf_r+0x36e>
    60a6:	920c      	str	r2, [sp, #48]	; 0x30
    60a8:	9413      	str	r4, [sp, #76]	; 0x4c
    60aa:	e516      	b.n	5ada <_svfprintf_r+0x452>
    60ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    60ae:	9908      	ldr	r1, [sp, #32]
    60b0:	1c22      	adds	r2, r4, #0
    60b2:	f004 fdab 	bl	ac0c <__ssprint_r>
    60b6:	2800      	cmp	r0, #0
    60b8:	d000      	beq.n	60bc <_svfprintf_r+0xa34>
    60ba:	e49c      	b.n	59f6 <_svfprintf_r+0x36e>
    60bc:	af1f      	add	r7, sp, #124	; 0x7c
    60be:	f7ff fc15 	bl	58ec <_svfprintf_r+0x264>
    60c2:	9809      	ldr	r0, [sp, #36]	; 0x24
    60c4:	9908      	ldr	r1, [sp, #32]
    60c6:	1c22      	adds	r2, r4, #0
    60c8:	f004 fda0 	bl	ac0c <__ssprint_r>
    60cc:	2800      	cmp	r0, #0
    60ce:	d000      	beq.n	60d2 <_svfprintf_r+0xa4a>
    60d0:	e491      	b.n	59f6 <_svfprintf_r+0x36e>
    60d2:	ad1f      	add	r5, sp, #124	; 0x7c
    60d4:	f7ff fbb1 	bl	583a <_svfprintf_r+0x1b2>
    60d8:	9809      	ldr	r0, [sp, #36]	; 0x24
    60da:	9908      	ldr	r1, [sp, #32]
    60dc:	1c22      	adds	r2, r4, #0
    60de:	f004 fd95 	bl	ac0c <__ssprint_r>
    60e2:	2800      	cmp	r0, #0
    60e4:	d000      	beq.n	60e8 <_svfprintf_r+0xa60>
    60e6:	e486      	b.n	59f6 <_svfprintf_r+0x36e>
    60e8:	ad1f      	add	r5, sp, #124	; 0x7c
    60ea:	f7ff fbb8 	bl	585e <_svfprintf_r+0x1d6>
    60ee:	9d42      	ldr	r5, [sp, #264]	; 0x108
    60f0:	2d00      	cmp	r5, #0
    60f2:	dc00      	bgt.n	60f6 <_svfprintf_r+0xa6e>
    60f4:	e289      	b.n	660a <_svfprintf_r+0xf82>
    60f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    60f8:	468a      	mov	sl, r1
    60fa:	990d      	ldr	r1, [sp, #52]	; 0x34
    60fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    60fe:	448a      	add	sl, r1
    6100:	4652      	mov	r2, sl
    6102:	9e18      	ldr	r6, [sp, #96]	; 0x60
    6104:	1ad5      	subs	r5, r2, r3
    6106:	42b5      	cmp	r5, r6
    6108:	dd00      	ble.n	610c <_svfprintf_r+0xa84>
    610a:	1c35      	adds	r5, r6, #0
    610c:	2d00      	cmp	r5, #0
    610e:	dd0d      	ble.n	612c <_svfprintf_r+0xaa4>
    6110:	68a3      	ldr	r3, [r4, #8]
    6112:	9813      	ldr	r0, [sp, #76]	; 0x4c
    6114:	18eb      	adds	r3, r5, r3
    6116:	6038      	str	r0, [r7, #0]
    6118:	607d      	str	r5, [r7, #4]
    611a:	60a3      	str	r3, [r4, #8]
    611c:	6863      	ldr	r3, [r4, #4]
    611e:	3301      	adds	r3, #1
    6120:	6063      	str	r3, [r4, #4]
    6122:	3708      	adds	r7, #8
    6124:	2b07      	cmp	r3, #7
    6126:	dd01      	ble.n	612c <_svfprintf_r+0xaa4>
    6128:	f000 fc4e 	bl	69c8 <_svfprintf_r+0x1340>
    612c:	43eb      	mvns	r3, r5
    612e:	17db      	asrs	r3, r3, #31
    6130:	9918      	ldr	r1, [sp, #96]	; 0x60
    6132:	401d      	ands	r5, r3
    6134:	1b4d      	subs	r5, r1, r5
    6136:	2d00      	cmp	r5, #0
    6138:	dc01      	bgt.n	613e <_svfprintf_r+0xab6>
    613a:	f000 fc2d 	bl	6998 <_svfprintf_r+0x1310>
    613e:	2d10      	cmp	r5, #16
    6140:	dc01      	bgt.n	6146 <_svfprintf_r+0xabe>
    6142:	f000 fcfd 	bl	6b40 <_svfprintf_r+0x14b8>
    6146:	4a17      	ldr	r2, [pc, #92]	; (61a4 <_svfprintf_r+0xb1c>)
    6148:	2310      	movs	r3, #16
    614a:	1c1e      	adds	r6, r3, #0
    614c:	4690      	mov	r8, r2
    614e:	4699      	mov	r9, r3
    6150:	4446      	add	r6, r8
    6152:	1c3b      	adds	r3, r7, #0
    6154:	9f09      	ldr	r7, [sp, #36]	; 0x24
    6156:	e006      	b.n	6166 <_svfprintf_r+0xade>
    6158:	3308      	adds	r3, #8
    615a:	1c1a      	adds	r2, r3, #0
    615c:	3208      	adds	r2, #8
    615e:	3d10      	subs	r5, #16
    6160:	2d10      	cmp	r5, #16
    6162:	dc00      	bgt.n	6166 <_svfprintf_r+0xade>
    6164:	e1bd      	b.n	64e2 <_svfprintf_r+0xe5a>
    6166:	68a2      	ldr	r2, [r4, #8]
    6168:	4648      	mov	r0, r9
    616a:	3210      	adds	r2, #16
    616c:	601e      	str	r6, [r3, #0]
    616e:	6058      	str	r0, [r3, #4]
    6170:	60a2      	str	r2, [r4, #8]
    6172:	6862      	ldr	r2, [r4, #4]
    6174:	3201      	adds	r2, #1
    6176:	6062      	str	r2, [r4, #4]
    6178:	2a07      	cmp	r2, #7
    617a:	dded      	ble.n	6158 <_svfprintf_r+0xad0>
    617c:	1c38      	adds	r0, r7, #0
    617e:	9908      	ldr	r1, [sp, #32]
    6180:	1c22      	adds	r2, r4, #0
    6182:	f004 fd43 	bl	ac0c <__ssprint_r>
    6186:	2800      	cmp	r0, #0
    6188:	d000      	beq.n	618c <_svfprintf_r+0xb04>
    618a:	e434      	b.n	59f6 <_svfprintf_r+0x36e>
    618c:	aa21      	add	r2, sp, #132	; 0x84
    618e:	ab1f      	add	r3, sp, #124	; 0x7c
    6190:	e7e5      	b.n	615e <_svfprintf_r+0xad6>
    6192:	930c      	str	r3, [sp, #48]	; 0x30
    6194:	9413      	str	r4, [sp, #76]	; 0x4c
    6196:	e4a0      	b.n	5ada <_svfprintf_r+0x452>
	...
    61a0:	0000e95c 	.word	0x0000e95c
    61a4:	0000dee0 	.word	0x0000dee0
    61a8:	9413      	str	r4, [sp, #76]	; 0x4c
    61aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    61ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    61ae:	270f      	movs	r7, #15
    61b0:	1c21      	adds	r1, r4, #0
    61b2:	46ac      	mov	ip, r5
    61b4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    61b6:	1c10      	adds	r0, r2, #0
    61b8:	4038      	ands	r0, r7
    61ba:	5c28      	ldrb	r0, [r5, r0]
    61bc:	3901      	subs	r1, #1
    61be:	0915      	lsrs	r5, r2, #4
    61c0:	46a8      	mov	r8, r5
    61c2:	7008      	strb	r0, [r1, #0]
    61c4:	0718      	lsls	r0, r3, #28
    61c6:	1c05      	adds	r5, r0, #0
    61c8:	4640      	mov	r0, r8
    61ca:	4305      	orrs	r5, r0
    61cc:	0918      	lsrs	r0, r3, #4
    61ce:	1c2a      	adds	r2, r5, #0
    61d0:	1c03      	adds	r3, r0, #0
    61d2:	4305      	orrs	r5, r0
    61d4:	d1ee      	bne.n	61b4 <_svfprintf_r+0xb2c>
    61d6:	1a67      	subs	r7, r4, r1
    61d8:	9113      	str	r1, [sp, #76]	; 0x4c
    61da:	4665      	mov	r5, ip
    61dc:	9210      	str	r2, [sp, #64]	; 0x40
    61de:	9311      	str	r3, [sp, #68]	; 0x44
    61e0:	970c      	str	r7, [sp, #48]	; 0x30
    61e2:	e47a      	b.n	5ada <_svfprintf_r+0x452>
    61e4:	9911      	ldr	r1, [sp, #68]	; 0x44
    61e6:	2900      	cmp	r1, #0
    61e8:	d102      	bne.n	61f0 <_svfprintf_r+0xb68>
    61ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
    61ec:	2a09      	cmp	r2, #9
    61ee:	d920      	bls.n	6232 <_svfprintf_r+0xbaa>
    61f0:	46aa      	mov	sl, r5
    61f2:	46b0      	mov	r8, r6
    61f4:	9413      	str	r4, [sp, #76]	; 0x4c
    61f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
    61f8:	9e11      	ldr	r6, [sp, #68]	; 0x44
    61fa:	1c27      	adds	r7, r4, #0
    61fc:	1c28      	adds	r0, r5, #0
    61fe:	1c31      	adds	r1, r6, #0
    6200:	220a      	movs	r2, #10
    6202:	2300      	movs	r3, #0
    6204:	f007 fd64 	bl	dcd0 <____aeabi_uldivmod_from_thumb>
    6208:	3f01      	subs	r7, #1
    620a:	3230      	adds	r2, #48	; 0x30
    620c:	703a      	strb	r2, [r7, #0]
    620e:	1c28      	adds	r0, r5, #0
    6210:	1c31      	adds	r1, r6, #0
    6212:	220a      	movs	r2, #10
    6214:	2300      	movs	r3, #0
    6216:	f007 fd5b 	bl	dcd0 <____aeabi_uldivmod_from_thumb>
    621a:	1c05      	adds	r5, r0, #0
    621c:	1c0e      	adds	r6, r1, #0
    621e:	4308      	orrs	r0, r1
    6220:	d1ec      	bne.n	61fc <_svfprintf_r+0xb74>
    6222:	1be1      	subs	r1, r4, r7
    6224:	9510      	str	r5, [sp, #64]	; 0x40
    6226:	9611      	str	r6, [sp, #68]	; 0x44
    6228:	9713      	str	r7, [sp, #76]	; 0x4c
    622a:	4655      	mov	r5, sl
    622c:	4646      	mov	r6, r8
    622e:	910c      	str	r1, [sp, #48]	; 0x30
    6230:	e453      	b.n	5ada <_svfprintf_r+0x452>
    6232:	ab2f      	add	r3, sp, #188	; 0xbc
    6234:	3230      	adds	r2, #48	; 0x30
    6236:	3127      	adds	r1, #39	; 0x27
    6238:	545a      	strb	r2, [r3, r1]
    623a:	3327      	adds	r3, #39	; 0x27
    623c:	1ae7      	subs	r7, r4, r3
    623e:	970c      	str	r7, [sp, #48]	; 0x30
    6240:	9313      	str	r3, [sp, #76]	; 0x4c
    6242:	e44a      	b.n	5ada <_svfprintf_r+0x452>
    6244:	9809      	ldr	r0, [sp, #36]	; 0x24
    6246:	9908      	ldr	r1, [sp, #32]
    6248:	1c22      	adds	r2, r4, #0
    624a:	f004 fcdf 	bl	ac0c <__ssprint_r>
    624e:	2800      	cmp	r0, #0
    6250:	d001      	beq.n	6256 <_svfprintf_r+0xbce>
    6252:	f7ff fbd0 	bl	59f6 <_svfprintf_r+0x36e>
    6256:	4649      	mov	r1, r9
    6258:	780a      	ldrb	r2, [r1, #0]
    625a:	ad1f      	add	r5, sp, #124	; 0x7c
    625c:	f7ff fadc 	bl	5818 <_svfprintf_r+0x190>
    6260:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    6262:	3e01      	subs	r6, #1
    6264:	2e00      	cmp	r6, #0
    6266:	dc00      	bgt.n	626a <_svfprintf_r+0xbe2>
    6268:	e226      	b.n	66b8 <_svfprintf_r+0x1030>
    626a:	2e10      	cmp	r6, #16
    626c:	dc01      	bgt.n	6272 <_svfprintf_r+0xbea>
    626e:	f000 fc63 	bl	6b38 <_svfprintf_r+0x14b0>
    6272:	49d6      	ldr	r1, [pc, #856]	; (65cc <_svfprintf_r+0xf44>)
    6274:	2210      	movs	r2, #16
    6276:	4688      	mov	r8, r1
    6278:	4691      	mov	r9, r2
    627a:	1c2b      	adds	r3, r5, #0
    627c:	44c1      	add	r9, r8
    627e:	4692      	mov	sl, r2
    6280:	9f09      	ldr	r7, [sp, #36]	; 0x24
    6282:	9d08      	ldr	r5, [sp, #32]
    6284:	e005      	b.n	6292 <_svfprintf_r+0xc0a>
    6286:	3308      	adds	r3, #8
    6288:	1c1a      	adds	r2, r3, #0
    628a:	3e10      	subs	r6, #16
    628c:	3208      	adds	r2, #8
    628e:	2e10      	cmp	r6, #16
    6290:	dd19      	ble.n	62c6 <_svfprintf_r+0xc3e>
    6292:	68a2      	ldr	r2, [r4, #8]
    6294:	4648      	mov	r0, r9
    6296:	3210      	adds	r2, #16
    6298:	4651      	mov	r1, sl
    629a:	6018      	str	r0, [r3, #0]
    629c:	6059      	str	r1, [r3, #4]
    629e:	60a2      	str	r2, [r4, #8]
    62a0:	6862      	ldr	r2, [r4, #4]
    62a2:	3201      	adds	r2, #1
    62a4:	6062      	str	r2, [r4, #4]
    62a6:	2a07      	cmp	r2, #7
    62a8:	dded      	ble.n	6286 <_svfprintf_r+0xbfe>
    62aa:	1c38      	adds	r0, r7, #0
    62ac:	1c29      	adds	r1, r5, #0
    62ae:	1c22      	adds	r2, r4, #0
    62b0:	f004 fcac 	bl	ac0c <__ssprint_r>
    62b4:	2800      	cmp	r0, #0
    62b6:	d001      	beq.n	62bc <_svfprintf_r+0xc34>
    62b8:	f7ff fb9d 	bl	59f6 <_svfprintf_r+0x36e>
    62bc:	3e10      	subs	r6, #16
    62be:	aa21      	add	r2, sp, #132	; 0x84
    62c0:	ab1f      	add	r3, sp, #124	; 0x7c
    62c2:	2e10      	cmp	r6, #16
    62c4:	dce5      	bgt.n	6292 <_svfprintf_r+0xc0a>
    62c6:	1c1d      	adds	r5, r3, #0
    62c8:	1c17      	adds	r7, r2, #0
    62ca:	2210      	movs	r2, #16
    62cc:	1c13      	adds	r3, r2, #0
    62ce:	4443      	add	r3, r8
    62d0:	602b      	str	r3, [r5, #0]
    62d2:	68a3      	ldr	r3, [r4, #8]
    62d4:	606e      	str	r6, [r5, #4]
    62d6:	18f3      	adds	r3, r6, r3
    62d8:	e6bc      	b.n	6054 <_svfprintf_r+0x9cc>
    62da:	9907      	ldr	r1, [sp, #28]
    62dc:	2310      	movs	r3, #16
    62de:	4019      	ands	r1, r3
    62e0:	d100      	bne.n	62e4 <_svfprintf_r+0xc5c>
    62e2:	e0b6      	b.n	6452 <_svfprintf_r+0xdca>
    62e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    62e6:	6809      	ldr	r1, [r1, #0]
    62e8:	9110      	str	r1, [sp, #64]	; 0x40
    62ea:	9211      	str	r2, [sp, #68]	; 0x44
    62ec:	1c0a      	adds	r2, r1, #0
    62ee:	1e53      	subs	r3, r2, #1
    62f0:	419a      	sbcs	r2, r3
    62f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    62f4:	3304      	adds	r3, #4
    62f6:	930f      	str	r3, [sp, #60]	; 0x3c
    62f8:	2301      	movs	r3, #1
    62fa:	e45b      	b.n	5bb4 <_svfprintf_r+0x52c>
    62fc:	2302      	movs	r3, #2
    62fe:	e459      	b.n	5bb4 <_svfprintf_r+0x52c>
    6300:	9807      	ldr	r0, [sp, #28]
    6302:	2310      	movs	r3, #16
    6304:	4018      	ands	r0, r3
    6306:	d11c      	bne.n	6342 <_svfprintf_r+0xcba>
    6308:	9907      	ldr	r1, [sp, #28]
    630a:	2340      	movs	r3, #64	; 0x40
    630c:	4019      	ands	r1, r3
    630e:	d018      	beq.n	6342 <_svfprintf_r+0xcba>
    6310:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    6312:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6314:	883f      	ldrh	r7, [r7, #0]
    6316:	3104      	adds	r1, #4
    6318:	1c3a      	adds	r2, r7, #0
    631a:	1e53      	subs	r3, r2, #1
    631c:	419a      	sbcs	r2, r3
    631e:	9710      	str	r7, [sp, #64]	; 0x40
    6320:	9011      	str	r0, [sp, #68]	; 0x44
    6322:	910f      	str	r1, [sp, #60]	; 0x3c
    6324:	1c03      	adds	r3, r0, #0
    6326:	e445      	b.n	5bb4 <_svfprintf_r+0x52c>
    6328:	9907      	ldr	r1, [sp, #28]
    632a:	06c9      	lsls	r1, r1, #27
    632c:	d400      	bmi.n	6330 <_svfprintf_r+0xca8>
    632e:	e0a2      	b.n	6476 <_svfprintf_r+0xdee>
    6330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6332:	6813      	ldr	r3, [r2, #0]
    6334:	3204      	adds	r2, #4
    6336:	9310      	str	r3, [sp, #64]	; 0x40
    6338:	17db      	asrs	r3, r3, #31
    633a:	9311      	str	r3, [sp, #68]	; 0x44
    633c:	920f      	str	r2, [sp, #60]	; 0x3c
    633e:	f7ff fb88 	bl	5a52 <_svfprintf_r+0x3ca>
    6342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6344:	6812      	ldr	r2, [r2, #0]
    6346:	9210      	str	r2, [sp, #64]	; 0x40
    6348:	1e53      	subs	r3, r2, #1
    634a:	419a      	sbcs	r2, r3
    634c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    634e:	3304      	adds	r3, #4
    6350:	930f      	str	r3, [sp, #60]	; 0x3c
    6352:	9111      	str	r1, [sp, #68]	; 0x44
    6354:	1c0b      	adds	r3, r1, #0
    6356:	e42d      	b.n	5bb4 <_svfprintf_r+0x52c>
    6358:	9907      	ldr	r1, [sp, #28]
    635a:	2301      	movs	r3, #1
    635c:	4219      	tst	r1, r3
    635e:	d000      	beq.n	6362 <_svfprintf_r+0xcda>
    6360:	e648      	b.n	5ff4 <_svfprintf_r+0x96c>
    6362:	607b      	str	r3, [r7, #4]
    6364:	68a3      	ldr	r3, [r4, #8]
    6366:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    6368:	3301      	adds	r3, #1
    636a:	603d      	str	r5, [r7, #0]
    636c:	60a3      	str	r3, [r4, #8]
    636e:	6863      	ldr	r3, [r4, #4]
    6370:	3301      	adds	r3, #1
    6372:	6063      	str	r3, [r4, #4]
    6374:	2b07      	cmp	r3, #7
    6376:	dc01      	bgt.n	637c <_svfprintf_r+0xcf4>
    6378:	3708      	adds	r7, #8
    637a:	e672      	b.n	6062 <_svfprintf_r+0x9da>
    637c:	9809      	ldr	r0, [sp, #36]	; 0x24
    637e:	9908      	ldr	r1, [sp, #32]
    6380:	1c22      	adds	r2, r4, #0
    6382:	f004 fc43 	bl	ac0c <__ssprint_r>
    6386:	2800      	cmp	r0, #0
    6388:	d001      	beq.n	638e <_svfprintf_r+0xd06>
    638a:	f7ff fb34 	bl	59f6 <_svfprintf_r+0x36e>
    638e:	ab21      	add	r3, sp, #132	; 0x84
    6390:	af1f      	add	r7, sp, #124	; 0x7c
    6392:	e668      	b.n	6066 <_svfprintf_r+0x9de>
    6394:	9809      	ldr	r0, [sp, #36]	; 0x24
    6396:	9908      	ldr	r1, [sp, #32]
    6398:	1c22      	adds	r2, r4, #0
    639a:	f004 fc37 	bl	ac0c <__ssprint_r>
    639e:	2800      	cmp	r0, #0
    63a0:	d001      	beq.n	63a6 <_svfprintf_r+0xd1e>
    63a2:	f7ff fb28 	bl	59f6 <_svfprintf_r+0x36e>
    63a6:	af21      	add	r7, sp, #132	; 0x84
    63a8:	ad1f      	add	r5, sp, #124	; 0x7c
    63aa:	e642      	b.n	6032 <_svfprintf_r+0x9aa>
    63ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    63ae:	9908      	ldr	r1, [sp, #32]
    63b0:	1c22      	adds	r2, r4, #0
    63b2:	f004 fc2b 	bl	ac0c <__ssprint_r>
    63b6:	2800      	cmp	r0, #0
    63b8:	d001      	beq.n	63be <_svfprintf_r+0xd36>
    63ba:	f7ff fb1c 	bl	59f6 <_svfprintf_r+0x36e>
    63be:	ad21      	add	r5, sp, #132	; 0x84
    63c0:	af1f      	add	r7, sp, #124	; 0x7c
    63c2:	e627      	b.n	6014 <_svfprintf_r+0x98c>
    63c4:	2f30      	cmp	r7, #48	; 0x30
    63c6:	d100      	bne.n	63ca <_svfprintf_r+0xd42>
    63c8:	e30a      	b.n	69e0 <_svfprintf_r+0x1358>
    63ca:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    63cc:	3f01      	subs	r7, #1
    63ce:	2330      	movs	r3, #48	; 0x30
    63d0:	1be0      	subs	r0, r4, r7
    63d2:	9713      	str	r7, [sp, #76]	; 0x4c
    63d4:	703b      	strb	r3, [r7, #0]
    63d6:	900c      	str	r0, [sp, #48]	; 0x30
    63d8:	f7ff fb7f 	bl	5ada <_svfprintf_r+0x452>
    63dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    63de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    63e0:	2100      	movs	r1, #0
    63e2:	4250      	negs	r0, r2
    63e4:	4199      	sbcs	r1, r3
    63e6:	1c02      	adds	r2, r0, #0
    63e8:	232d      	movs	r3, #45	; 0x2d
    63ea:	464f      	mov	r7, r9
    63ec:	430a      	orrs	r2, r1
    63ee:	703b      	strb	r3, [r7, #0]
    63f0:	9010      	str	r0, [sp, #64]	; 0x40
    63f2:	9111      	str	r1, [sp, #68]	; 0x44
    63f4:	1e53      	subs	r3, r2, #1
    63f6:	419a      	sbcs	r2, r3
    63f8:	2301      	movs	r3, #1
    63fa:	f7ff fb35 	bl	5a68 <_svfprintf_r+0x3e0>
    63fe:	780b      	ldrb	r3, [r1, #0]
    6400:	f7ff f9a7 	bl	5752 <_svfprintf_r+0xca>
    6404:	981a      	ldr	r0, [sp, #104]	; 0x68
    6406:	991b      	ldr	r1, [sp, #108]	; 0x6c
    6408:	f004 fba8 	bl	ab5c <__fpclassifyd>
    640c:	2800      	cmp	r0, #0
    640e:	d000      	beq.n	6412 <_svfprintf_r+0xd8a>
    6410:	e185      	b.n	671e <_svfprintf_r+0x1096>
    6412:	9f16      	ldr	r7, [sp, #88]	; 0x58
    6414:	2f47      	cmp	r7, #71	; 0x47
    6416:	dc00      	bgt.n	641a <_svfprintf_r+0xd92>
    6418:	e26b      	b.n	68f2 <_svfprintf_r+0x126a>
    641a:	496d      	ldr	r1, [pc, #436]	; (65d0 <_svfprintf_r+0xf48>)
    641c:	9113      	str	r1, [sp, #76]	; 0x4c
    641e:	9a07      	ldr	r2, [sp, #28]
    6420:	2380      	movs	r3, #128	; 0x80
    6422:	439a      	bics	r2, r3
    6424:	2603      	movs	r6, #3
    6426:	2700      	movs	r7, #0
    6428:	464b      	mov	r3, r9
    642a:	9207      	str	r2, [sp, #28]
    642c:	960a      	str	r6, [sp, #40]	; 0x28
    642e:	781a      	ldrb	r2, [r3, #0]
    6430:	960c      	str	r6, [sp, #48]	; 0x30
    6432:	9714      	str	r7, [sp, #80]	; 0x50
    6434:	9718      	str	r7, [sp, #96]	; 0x60
    6436:	f7ff fb5a 	bl	5aee <_svfprintf_r+0x466>
    643a:	4864      	ldr	r0, [pc, #400]	; (65cc <_svfprintf_r+0xf44>)
    643c:	1c13      	adds	r3, r2, #0
    643e:	3308      	adds	r3, #8
    6440:	4680      	mov	r8, r0
    6442:	2610      	movs	r6, #16
    6444:	1c31      	adds	r1, r6, #0
    6446:	6055      	str	r5, [r2, #4]
    6448:	4441      	add	r1, r8
    644a:	6011      	str	r1, [r2, #0]
    644c:	68a2      	ldr	r2, [r4, #8]
    644e:	18aa      	adds	r2, r5, r2
    6450:	e60f      	b.n	6072 <_svfprintf_r+0x9ea>
    6452:	9f07      	ldr	r7, [sp, #28]
    6454:	2340      	movs	r3, #64	; 0x40
    6456:	403b      	ands	r3, r7
    6458:	d100      	bne.n	645c <_svfprintf_r+0xdd4>
    645a:	e221      	b.n	68a0 <_svfprintf_r+0x1218>
    645c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    645e:	8800      	ldrh	r0, [r0, #0]
    6460:	9111      	str	r1, [sp, #68]	; 0x44
    6462:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6464:	1c02      	adds	r2, r0, #0
    6466:	3104      	adds	r1, #4
    6468:	1e53      	subs	r3, r2, #1
    646a:	419a      	sbcs	r2, r3
    646c:	9010      	str	r0, [sp, #64]	; 0x40
    646e:	910f      	str	r1, [sp, #60]	; 0x3c
    6470:	2301      	movs	r3, #1
    6472:	f7ff fb9f 	bl	5bb4 <_svfprintf_r+0x52c>
    6476:	9b07      	ldr	r3, [sp, #28]
    6478:	065b      	lsls	r3, r3, #25
    647a:	d400      	bmi.n	647e <_svfprintf_r+0xdf6>
    647c:	e136      	b.n	66ec <_svfprintf_r+0x1064>
    647e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    6480:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6482:	2300      	movs	r3, #0
    6484:	5efb      	ldrsh	r3, [r7, r3]
    6486:	3004      	adds	r0, #4
    6488:	9310      	str	r3, [sp, #64]	; 0x40
    648a:	17db      	asrs	r3, r3, #31
    648c:	9311      	str	r3, [sp, #68]	; 0x44
    648e:	900f      	str	r0, [sp, #60]	; 0x3c
    6490:	f7ff fadf 	bl	5a52 <_svfprintf_r+0x3ca>
    6494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6496:	2307      	movs	r3, #7
    6498:	3207      	adds	r2, #7
    649a:	439a      	bics	r2, r3
    649c:	6810      	ldr	r0, [r2, #0]
    649e:	2708      	movs	r7, #8
    64a0:	18bf      	adds	r7, r7, r2
    64a2:	970f      	str	r7, [sp, #60]	; 0x3c
    64a4:	901a      	str	r0, [sp, #104]	; 0x68
    64a6:	6852      	ldr	r2, [r2, #4]
    64a8:	921b      	str	r2, [sp, #108]	; 0x6c
    64aa:	f7ff fb3b 	bl	5b24 <_svfprintf_r+0x49c>
    64ae:	9807      	ldr	r0, [sp, #28]
    64b0:	06c0      	lsls	r0, r0, #27
    64b2:	d400      	bmi.n	64b6 <_svfprintf_r+0xe2e>
    64b4:	e1f9      	b.n	68aa <_svfprintf_r+0x1222>
    64b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    64b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    64ba:	680b      	ldr	r3, [r1, #0]
    64bc:	3104      	adds	r1, #4
    64be:	601a      	str	r2, [r3, #0]
    64c0:	910f      	str	r1, [sp, #60]	; 0x3c
    64c2:	f7ff f90a 	bl	56da <_svfprintf_r+0x52>
    64c6:	9f07      	ldr	r7, [sp, #28]
    64c8:	2340      	movs	r3, #64	; 0x40
    64ca:	403b      	ands	r3, r7
    64cc:	d100      	bne.n	64d0 <_svfprintf_r+0xe48>
    64ce:	e104      	b.n	66da <_svfprintf_r+0x1052>
    64d0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    64d2:	8800      	ldrh	r0, [r0, #0]
    64d4:	9111      	str	r1, [sp, #68]	; 0x44
    64d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    64d8:	3104      	adds	r1, #4
    64da:	9010      	str	r0, [sp, #64]	; 0x40
    64dc:	910f      	str	r1, [sp, #60]	; 0x3c
    64de:	f7ff fb9f 	bl	5c20 <_svfprintf_r+0x598>
    64e2:	1c1f      	adds	r7, r3, #0
    64e4:	2110      	movs	r1, #16
    64e6:	1c0b      	adds	r3, r1, #0
    64e8:	4443      	add	r3, r8
    64ea:	603b      	str	r3, [r7, #0]
    64ec:	68a3      	ldr	r3, [r4, #8]
    64ee:	18eb      	adds	r3, r5, r3
    64f0:	607d      	str	r5, [r7, #4]
    64f2:	60a3      	str	r3, [r4, #8]
    64f4:	6863      	ldr	r3, [r4, #4]
    64f6:	3301      	adds	r3, #1
    64f8:	6063      	str	r3, [r4, #4]
    64fa:	2b07      	cmp	r3, #7
    64fc:	dd00      	ble.n	6500 <_svfprintf_r+0xe78>
    64fe:	e286      	b.n	6a0e <_svfprintf_r+0x1386>
    6500:	9d42      	ldr	r5, [sp, #264]	; 0x108
    6502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6504:	429d      	cmp	r5, r3
    6506:	db47      	blt.n	6598 <_svfprintf_r+0xf10>
    6508:	9e07      	ldr	r6, [sp, #28]
    650a:	07f6      	lsls	r6, r6, #31
    650c:	d444      	bmi.n	6598 <_svfprintf_r+0xf10>
    650e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6510:	1c0b      	adds	r3, r1, #0
    6512:	9918      	ldr	r1, [sp, #96]	; 0x60
    6514:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6516:	185b      	adds	r3, r3, r1
    6518:	4656      	mov	r6, sl
    651a:	1af0      	subs	r0, r6, r3
    651c:	1b79      	subs	r1, r7, r5
    651e:	1c0e      	adds	r6, r1, #0
    6520:	4281      	cmp	r1, r0
    6522:	dd00      	ble.n	6526 <_svfprintf_r+0xe9e>
    6524:	1c06      	adds	r6, r0, #0
    6526:	2e00      	cmp	r6, #0
    6528:	dd0b      	ble.n	6542 <_svfprintf_r+0xeba>
    652a:	6013      	str	r3, [r2, #0]
    652c:	68a3      	ldr	r3, [r4, #8]
    652e:	18f3      	adds	r3, r6, r3
    6530:	6056      	str	r6, [r2, #4]
    6532:	60a3      	str	r3, [r4, #8]
    6534:	6863      	ldr	r3, [r4, #4]
    6536:	3301      	adds	r3, #1
    6538:	6063      	str	r3, [r4, #4]
    653a:	3208      	adds	r2, #8
    653c:	2b07      	cmp	r3, #7
    653e:	dd00      	ble.n	6542 <_svfprintf_r+0xeba>
    6540:	e253      	b.n	69ea <_svfprintf_r+0x1362>
    6542:	43f5      	mvns	r5, r6
    6544:	17ed      	asrs	r5, r5, #31
    6546:	4035      	ands	r5, r6
    6548:	1b4d      	subs	r5, r1, r5
    654a:	2d00      	cmp	r5, #0
    654c:	dd42      	ble.n	65d4 <_svfprintf_r+0xf4c>
    654e:	2d10      	cmp	r5, #16
    6550:	dd43      	ble.n	65da <_svfprintf_r+0xf52>
    6552:	491e      	ldr	r1, [pc, #120]	; (65cc <_svfprintf_r+0xf44>)
    6554:	2310      	movs	r3, #16
    6556:	4688      	mov	r8, r1
    6558:	1c1e      	adds	r6, r3, #0
    655a:	4446      	add	r6, r8
    655c:	1c1f      	adds	r7, r3, #0
    655e:	e005      	b.n	656c <_svfprintf_r+0xee4>
    6560:	3208      	adds	r2, #8
    6562:	1c13      	adds	r3, r2, #0
    6564:	3308      	adds	r3, #8
    6566:	3d10      	subs	r5, #16
    6568:	2d10      	cmp	r5, #16
    656a:	dd3a      	ble.n	65e2 <_svfprintf_r+0xf5a>
    656c:	68a3      	ldr	r3, [r4, #8]
    656e:	3310      	adds	r3, #16
    6570:	6016      	str	r6, [r2, #0]
    6572:	6057      	str	r7, [r2, #4]
    6574:	60a3      	str	r3, [r4, #8]
    6576:	6863      	ldr	r3, [r4, #4]
    6578:	3301      	adds	r3, #1
    657a:	6063      	str	r3, [r4, #4]
    657c:	2b07      	cmp	r3, #7
    657e:	ddef      	ble.n	6560 <_svfprintf_r+0xed8>
    6580:	9809      	ldr	r0, [sp, #36]	; 0x24
    6582:	9908      	ldr	r1, [sp, #32]
    6584:	1c22      	adds	r2, r4, #0
    6586:	f004 fb41 	bl	ac0c <__ssprint_r>
    658a:	2800      	cmp	r0, #0
    658c:	d001      	beq.n	6592 <_svfprintf_r+0xf0a>
    658e:	f7ff fa32 	bl	59f6 <_svfprintf_r+0x36e>
    6592:	ab21      	add	r3, sp, #132	; 0x84
    6594:	aa1f      	add	r2, sp, #124	; 0x7c
    6596:	e7e6      	b.n	6566 <_svfprintf_r+0xede>
    6598:	981c      	ldr	r0, [sp, #112]	; 0x70
    659a:	68a3      	ldr	r3, [r4, #8]
    659c:	9f19      	ldr	r7, [sp, #100]	; 0x64
    659e:	181b      	adds	r3, r3, r0
    65a0:	6017      	str	r7, [r2, #0]
    65a2:	6050      	str	r0, [r2, #4]
    65a4:	60a3      	str	r3, [r4, #8]
    65a6:	6863      	ldr	r3, [r4, #4]
    65a8:	3301      	adds	r3, #1
    65aa:	6063      	str	r3, [r4, #4]
    65ac:	3208      	adds	r2, #8
    65ae:	2b07      	cmp	r3, #7
    65b0:	ddad      	ble.n	650e <_svfprintf_r+0xe86>
    65b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    65b4:	9908      	ldr	r1, [sp, #32]
    65b6:	1c22      	adds	r2, r4, #0
    65b8:	f004 fb28 	bl	ac0c <__ssprint_r>
    65bc:	2800      	cmp	r0, #0
    65be:	d001      	beq.n	65c4 <_svfprintf_r+0xf3c>
    65c0:	f7ff fa19 	bl	59f6 <_svfprintf_r+0x36e>
    65c4:	9d42      	ldr	r5, [sp, #264]	; 0x108
    65c6:	aa1f      	add	r2, sp, #124	; 0x7c
    65c8:	e7a1      	b.n	650e <_svfprintf_r+0xe86>
    65ca:	46c0      	nop			; (mov r8, r8)
    65cc:	0000dee0 	.word	0x0000dee0
    65d0:	0000e928 	.word	0x0000e928
    65d4:	1c13      	adds	r3, r2, #0
    65d6:	f7ff f99c 	bl	5912 <_svfprintf_r+0x28a>
    65da:	4ed3      	ldr	r6, [pc, #844]	; (6928 <_svfprintf_r+0x12a0>)
    65dc:	1c13      	adds	r3, r2, #0
    65de:	3308      	adds	r3, #8
    65e0:	46b0      	mov	r8, r6
    65e2:	2710      	movs	r7, #16
    65e4:	1c39      	adds	r1, r7, #0
    65e6:	e72e      	b.n	6446 <_svfprintf_r+0xdbe>
    65e8:	49cf      	ldr	r1, [pc, #828]	; (6928 <_svfprintf_r+0x12a0>)
    65ea:	1c2f      	adds	r7, r5, #0
    65ec:	3708      	adds	r7, #8
    65ee:	4688      	mov	r8, r1
    65f0:	f7ff f96e 	bl	58d0 <_svfprintf_r+0x248>
    65f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    65f6:	9908      	ldr	r1, [sp, #32]
    65f8:	1c22      	adds	r2, r4, #0
    65fa:	f004 fb07 	bl	ac0c <__ssprint_r>
    65fe:	2800      	cmp	r0, #0
    6600:	d001      	beq.n	6606 <_svfprintf_r+0xf7e>
    6602:	f7ff f9f8 	bl	59f6 <_svfprintf_r+0x36e>
    6606:	ab1f      	add	r3, sp, #124	; 0x7c
    6608:	e44c      	b.n	5ea4 <_svfprintf_r+0x81c>
    660a:	4bc8      	ldr	r3, [pc, #800]	; (692c <_svfprintf_r+0x12a4>)
    660c:	603b      	str	r3, [r7, #0]
    660e:	2301      	movs	r3, #1
    6610:	607b      	str	r3, [r7, #4]
    6612:	68a3      	ldr	r3, [r4, #8]
    6614:	3301      	adds	r3, #1
    6616:	60a3      	str	r3, [r4, #8]
    6618:	6863      	ldr	r3, [r4, #4]
    661a:	3301      	adds	r3, #1
    661c:	6063      	str	r3, [r4, #4]
    661e:	2b07      	cmp	r3, #7
    6620:	dd00      	ble.n	6624 <_svfprintf_r+0xf9c>
    6622:	e169      	b.n	68f8 <_svfprintf_r+0x1270>
    6624:	1c3b      	adds	r3, r7, #0
    6626:	3308      	adds	r3, #8
    6628:	2d00      	cmp	r5, #0
    662a:	d107      	bne.n	663c <_svfprintf_r+0xfb4>
    662c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    662e:	2f00      	cmp	r7, #0
    6630:	d104      	bne.n	663c <_svfprintf_r+0xfb4>
    6632:	9807      	ldr	r0, [sp, #28]
    6634:	07c0      	lsls	r0, r0, #31
    6636:	d401      	bmi.n	663c <_svfprintf_r+0xfb4>
    6638:	f7ff f96b 	bl	5912 <_svfprintf_r+0x28a>
    663c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    663e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    6640:	605a      	str	r2, [r3, #4]
    6642:	68a2      	ldr	r2, [r4, #8]
    6644:	9919      	ldr	r1, [sp, #100]	; 0x64
    6646:	1992      	adds	r2, r2, r6
    6648:	6019      	str	r1, [r3, #0]
    664a:	60a2      	str	r2, [r4, #8]
    664c:	6862      	ldr	r2, [r4, #4]
    664e:	3201      	adds	r2, #1
    6650:	6062      	str	r2, [r4, #4]
    6652:	3308      	adds	r3, #8
    6654:	2a07      	cmp	r2, #7
    6656:	dd00      	ble.n	665a <_svfprintf_r+0xfd2>
    6658:	e242      	b.n	6ae0 <_svfprintf_r+0x1458>
    665a:	426d      	negs	r5, r5
    665c:	2d00      	cmp	r5, #0
    665e:	dc00      	bgt.n	6662 <_svfprintf_r+0xfda>
    6660:	e184      	b.n	696c <_svfprintf_r+0x12e4>
    6662:	2d10      	cmp	r5, #16
    6664:	dc00      	bgt.n	6668 <_svfprintf_r+0xfe0>
    6666:	e167      	b.n	6938 <_svfprintf_r+0x12b0>
    6668:	48af      	ldr	r0, [pc, #700]	; (6928 <_svfprintf_r+0x12a0>)
    666a:	2110      	movs	r1, #16
    666c:	4680      	mov	r8, r0
    666e:	1c0e      	adds	r6, r1, #0
    6670:	4446      	add	r6, r8
    6672:	1c0f      	adds	r7, r1, #0
    6674:	e003      	b.n	667e <_svfprintf_r+0xff6>
    6676:	3d10      	subs	r5, #16
    6678:	2d10      	cmp	r5, #16
    667a:	dc00      	bgt.n	667e <_svfprintf_r+0xff6>
    667c:	e15e      	b.n	693c <_svfprintf_r+0x12b4>
    667e:	68a2      	ldr	r2, [r4, #8]
    6680:	3210      	adds	r2, #16
    6682:	601e      	str	r6, [r3, #0]
    6684:	605f      	str	r7, [r3, #4]
    6686:	60a2      	str	r2, [r4, #8]
    6688:	6862      	ldr	r2, [r4, #4]
    668a:	3201      	adds	r2, #1
    668c:	6062      	str	r2, [r4, #4]
    668e:	3308      	adds	r3, #8
    6690:	2a07      	cmp	r2, #7
    6692:	ddf0      	ble.n	6676 <_svfprintf_r+0xfee>
    6694:	9809      	ldr	r0, [sp, #36]	; 0x24
    6696:	9908      	ldr	r1, [sp, #32]
    6698:	1c22      	adds	r2, r4, #0
    669a:	f004 fab7 	bl	ac0c <__ssprint_r>
    669e:	2800      	cmp	r0, #0
    66a0:	d001      	beq.n	66a6 <_svfprintf_r+0x101e>
    66a2:	f7ff f9a8 	bl	59f6 <_svfprintf_r+0x36e>
    66a6:	ab1f      	add	r3, sp, #124	; 0x7c
    66a8:	e7e5      	b.n	6676 <_svfprintf_r+0xfee>
    66aa:	9b07      	ldr	r3, [sp, #28]
    66ac:	4303      	orrs	r3, r0
    66ae:	9307      	str	r3, [sp, #28]
    66b0:	3101      	adds	r1, #1
    66b2:	780b      	ldrb	r3, [r1, #0]
    66b4:	f7ff f84d 	bl	5752 <_svfprintf_r+0xca>
    66b8:	1c2b      	adds	r3, r5, #0
    66ba:	3308      	adds	r3, #8
    66bc:	1c2f      	adds	r7, r5, #0
    66be:	e4d2      	b.n	6066 <_svfprintf_r+0x9de>
    66c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    66c2:	43c3      	mvns	r3, r0
    66c4:	17db      	asrs	r3, r3, #31
    66c6:	4018      	ands	r0, r3
    66c8:	4649      	mov	r1, r9
    66ca:	2300      	movs	r3, #0
    66cc:	900a      	str	r0, [sp, #40]	; 0x28
    66ce:	780a      	ldrb	r2, [r1, #0]
    66d0:	970f      	str	r7, [sp, #60]	; 0x3c
    66d2:	9314      	str	r3, [sp, #80]	; 0x50
    66d4:	9318      	str	r3, [sp, #96]	; 0x60
    66d6:	f7ff fa0a 	bl	5aee <_svfprintf_r+0x466>
    66da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    66dc:	6812      	ldr	r2, [r2, #0]
    66de:	9311      	str	r3, [sp, #68]	; 0x44
    66e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    66e2:	3304      	adds	r3, #4
    66e4:	9210      	str	r2, [sp, #64]	; 0x40
    66e6:	930f      	str	r3, [sp, #60]	; 0x3c
    66e8:	f7ff fa9a 	bl	5c20 <_svfprintf_r+0x598>
    66ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    66ee:	680b      	ldr	r3, [r1, #0]
    66f0:	3104      	adds	r1, #4
    66f2:	9310      	str	r3, [sp, #64]	; 0x40
    66f4:	17db      	asrs	r3, r3, #31
    66f6:	9311      	str	r3, [sp, #68]	; 0x44
    66f8:	910f      	str	r1, [sp, #60]	; 0x3c
    66fa:	f7ff f9aa 	bl	5a52 <_svfprintf_r+0x3ca>
    66fe:	488c      	ldr	r0, [pc, #560]	; (6930 <_svfprintf_r+0x12a8>)
    6700:	9013      	str	r0, [sp, #76]	; 0x4c
    6702:	f7ff fa2a 	bl	5b5a <_svfprintf_r+0x4d2>
    6706:	9809      	ldr	r0, [sp, #36]	; 0x24
    6708:	9908      	ldr	r1, [sp, #32]
    670a:	1c22      	adds	r2, r4, #0
    670c:	f004 fa7e 	bl	ac0c <__ssprint_r>
    6710:	2800      	cmp	r0, #0
    6712:	d001      	beq.n	6718 <_svfprintf_r+0x1090>
    6714:	f7ff f96f 	bl	59f6 <_svfprintf_r+0x36e>
    6718:	aa1f      	add	r2, sp, #124	; 0x7c
    671a:	f7ff fbdc 	bl	5ed6 <_svfprintf_r+0x84e>
    671e:	1c70      	adds	r0, r6, #1
    6720:	d100      	bne.n	6724 <_svfprintf_r+0x109c>
    6722:	e0f5      	b.n	6910 <_svfprintf_r+0x1288>
    6724:	9916      	ldr	r1, [sp, #88]	; 0x58
    6726:	3947      	subs	r1, #71	; 0x47
    6728:	910c      	str	r1, [sp, #48]	; 0x30
    672a:	2900      	cmp	r1, #0
    672c:	d002      	beq.n	6734 <_svfprintf_r+0x10ac>
    672e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6730:	2a67      	cmp	r2, #103	; 0x67
    6732:	d102      	bne.n	673a <_svfprintf_r+0x10b2>
    6734:	2e00      	cmp	r6, #0
    6736:	d100      	bne.n	673a <_svfprintf_r+0x10b2>
    6738:	2601      	movs	r6, #1
    673a:	9f07      	ldr	r7, [sp, #28]
    673c:	2380      	movs	r3, #128	; 0x80
    673e:	005b      	lsls	r3, r3, #1
    6740:	431f      	orrs	r7, r3
    6742:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6744:	9707      	str	r7, [sp, #28]
    6746:	2b00      	cmp	r3, #0
    6748:	da00      	bge.n	674c <_svfprintf_r+0x10c4>
    674a:	e1d5      	b.n	6af8 <_svfprintf_r+0x1470>
    674c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    674e:	2700      	movs	r7, #0
    6750:	930a      	str	r3, [sp, #40]	; 0x28
    6752:	9714      	str	r7, [sp, #80]	; 0x50
    6754:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6756:	3b46      	subs	r3, #70	; 0x46
    6758:	4259      	negs	r1, r3
    675a:	4159      	adcs	r1, r3
    675c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    675e:	3b66      	subs	r3, #102	; 0x66
    6760:	425a      	negs	r2, r3
    6762:	4153      	adcs	r3, r2
    6764:	1c08      	adds	r0, r1, #0
    6766:	4318      	orrs	r0, r3
    6768:	900d      	str	r0, [sp, #52]	; 0x34
    676a:	d000      	beq.n	676e <_svfprintf_r+0x10e6>
    676c:	e16e      	b.n	6a4c <_svfprintf_r+0x13c4>
    676e:	9916      	ldr	r1, [sp, #88]	; 0x58
    6770:	2945      	cmp	r1, #69	; 0x45
    6772:	d002      	beq.n	677a <_svfprintf_r+0x10f2>
    6774:	2965      	cmp	r1, #101	; 0x65
    6776:	d000      	beq.n	677a <_svfprintf_r+0x10f2>
    6778:	e1c7      	b.n	6b0a <_svfprintf_r+0x1482>
    677a:	1c72      	adds	r2, r6, #1
    677c:	4692      	mov	sl, r2
    677e:	2302      	movs	r3, #2
    6780:	9300      	str	r3, [sp, #0]
    6782:	4653      	mov	r3, sl
    6784:	9301      	str	r3, [sp, #4]
    6786:	ab42      	add	r3, sp, #264	; 0x108
    6788:	9302      	str	r3, [sp, #8]
    678a:	ab41      	add	r3, sp, #260	; 0x104
    678c:	9303      	str	r3, [sp, #12]
    678e:	ab40      	add	r3, sp, #256	; 0x100
    6790:	9304      	str	r3, [sp, #16]
    6792:	9809      	ldr	r0, [sp, #36]	; 0x24
    6794:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    6796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6798:	f001 ff9c 	bl	86d4 <_dtoa_r>
    679c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    679e:	9013      	str	r0, [sp, #76]	; 0x4c
    67a0:	2f00      	cmp	r7, #0
    67a2:	d002      	beq.n	67aa <_svfprintf_r+0x1122>
    67a4:	9816      	ldr	r0, [sp, #88]	; 0x58
    67a6:	2867      	cmp	r0, #103	; 0x67
    67a8:	d103      	bne.n	67b2 <_svfprintf_r+0x112a>
    67aa:	9907      	ldr	r1, [sp, #28]
    67ac:	07c9      	lsls	r1, r1, #31
    67ae:	d400      	bmi.n	67b2 <_svfprintf_r+0x112a>
    67b0:	e1b5      	b.n	6b1e <_svfprintf_r+0x1496>
    67b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    67b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    67b6:	1c17      	adds	r7, r2, #0
    67b8:	4457      	add	r7, sl
    67ba:	2b00      	cmp	r3, #0
    67bc:	d005      	beq.n	67ca <_svfprintf_r+0x1142>
    67be:	7813      	ldrb	r3, [r2, #0]
    67c0:	2b30      	cmp	r3, #48	; 0x30
    67c2:	d100      	bne.n	67c6 <_svfprintf_r+0x113e>
    67c4:	e1c1      	b.n	6b4a <_svfprintf_r+0x14c2>
    67c6:	9a42      	ldr	r2, [sp, #264]	; 0x108
    67c8:	18bf      	adds	r7, r7, r2
    67ca:	981a      	ldr	r0, [sp, #104]	; 0x68
    67cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    67ce:	4b55      	ldr	r3, [pc, #340]	; (6924 <_svfprintf_r+0x129c>)
    67d0:	4a53      	ldr	r2, [pc, #332]	; (6920 <_svfprintf_r+0x1298>)
    67d2:	f007 fa15 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    67d6:	2800      	cmp	r0, #0
    67d8:	d100      	bne.n	67dc <_svfprintf_r+0x1154>
    67da:	e161      	b.n	6aa0 <_svfprintf_r+0x1418>
    67dc:	9740      	str	r7, [sp, #256]	; 0x100
    67de:	1c3b      	adds	r3, r7, #0
    67e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    67e2:	1a9b      	subs	r3, r3, r2
    67e4:	930d      	str	r3, [sp, #52]	; 0x34
    67e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    67e8:	2b00      	cmp	r3, #0
    67ea:	d003      	beq.n	67f4 <_svfprintf_r+0x116c>
    67ec:	9f16      	ldr	r7, [sp, #88]	; 0x58
    67ee:	2f67      	cmp	r7, #103	; 0x67
    67f0:	d000      	beq.n	67f4 <_svfprintf_r+0x116c>
    67f2:	e12e      	b.n	6a52 <_svfprintf_r+0x13ca>
    67f4:	9a42      	ldr	r2, [sp, #264]	; 0x108
    67f6:	920c      	str	r2, [sp, #48]	; 0x30
    67f8:	1cd0      	adds	r0, r2, #3
    67fa:	db02      	blt.n	6802 <_svfprintf_r+0x117a>
    67fc:	4296      	cmp	r6, r2
    67fe:	db00      	blt.n	6802 <_svfprintf_r+0x117a>
    6800:	e15a      	b.n	6ab8 <_svfprintf_r+0x1430>
    6802:	9916      	ldr	r1, [sp, #88]	; 0x58
    6804:	3902      	subs	r1, #2
    6806:	9116      	str	r1, [sp, #88]	; 0x58
    6808:	af16      	add	r7, sp, #88	; 0x58
    680a:	783f      	ldrb	r7, [r7, #0]
    680c:	ab3e      	add	r3, sp, #248	; 0xf8
    680e:	1e56      	subs	r6, r2, #1
    6810:	9642      	str	r6, [sp, #264]	; 0x108
    6812:	469a      	mov	sl, r3
    6814:	701f      	strb	r7, [r3, #0]
    6816:	2e00      	cmp	r6, #0
    6818:	da00      	bge.n	681c <_svfprintf_r+0x1194>
    681a:	e1a4      	b.n	6b66 <_svfprintf_r+0x14de>
    681c:	232b      	movs	r3, #43	; 0x2b
    681e:	4651      	mov	r1, sl
    6820:	704b      	strb	r3, [r1, #1]
    6822:	2e09      	cmp	r6, #9
    6824:	dc00      	bgt.n	6828 <_svfprintf_r+0x11a0>
    6826:	e173      	b.n	6b10 <_svfprintf_r+0x1488>
    6828:	22f7      	movs	r2, #247	; 0xf7
    682a:	446a      	add	r2, sp
    682c:	4690      	mov	r8, r2
    682e:	1c17      	adds	r7, r2, #0
    6830:	1c30      	adds	r0, r6, #0
    6832:	210a      	movs	r1, #10
    6834:	f007 f9e0 	bl	dbf8 <____aeabi_idivmod_from_thumb>
    6838:	3f01      	subs	r7, #1
    683a:	3130      	adds	r1, #48	; 0x30
    683c:	7039      	strb	r1, [r7, #0]
    683e:	1c30      	adds	r0, r6, #0
    6840:	210a      	movs	r1, #10
    6842:	f007 fa23 	bl	dc8c <____aeabi_idiv_from_thumb>
    6846:	1c06      	adds	r6, r0, #0
    6848:	2809      	cmp	r0, #9
    684a:	dcf1      	bgt.n	6830 <_svfprintf_r+0x11a8>
    684c:	1c02      	adds	r2, r0, #0
    684e:	1e7b      	subs	r3, r7, #1
    6850:	3230      	adds	r2, #48	; 0x30
    6852:	4669      	mov	r1, sp
    6854:	701a      	strb	r2, [r3, #0]
    6856:	31fa      	adds	r1, #250	; 0xfa
    6858:	4543      	cmp	r3, r8
    685a:	d205      	bcs.n	6868 <_svfprintf_r+0x11e0>
    685c:	781a      	ldrb	r2, [r3, #0]
    685e:	3301      	adds	r3, #1
    6860:	700a      	strb	r2, [r1, #0]
    6862:	3101      	adds	r1, #1
    6864:	4543      	cmp	r3, r8
    6866:	d3f9      	bcc.n	685c <_svfprintf_r+0x11d4>
    6868:	4650      	mov	r0, sl
    686a:	1a08      	subs	r0, r1, r0
    686c:	990d      	ldr	r1, [sp, #52]	; 0x34
    686e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6870:	901d      	str	r0, [sp, #116]	; 0x74
    6872:	1840      	adds	r0, r0, r1
    6874:	900c      	str	r0, [sp, #48]	; 0x30
    6876:	2a01      	cmp	r2, #1
    6878:	dc00      	bgt.n	687c <_svfprintf_r+0x11f4>
    687a:	e179      	b.n	6b70 <_svfprintf_r+0x14e8>
    687c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    687e:	2000      	movs	r0, #0
    6880:	3701      	adds	r7, #1
    6882:	970c      	str	r7, [sp, #48]	; 0x30
    6884:	9018      	str	r0, [sp, #96]	; 0x60
    6886:	9814      	ldr	r0, [sp, #80]	; 0x50
    6888:	2800      	cmp	r0, #0
    688a:	d000      	beq.n	688e <_svfprintf_r+0x1206>
    688c:	e0f6      	b.n	6a7c <_svfprintf_r+0x13f4>
    688e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6890:	43cb      	mvns	r3, r1
    6892:	17db      	asrs	r3, r3, #31
    6894:	4019      	ands	r1, r3
    6896:	464b      	mov	r3, r9
    6898:	910a      	str	r1, [sp, #40]	; 0x28
    689a:	781a      	ldrb	r2, [r3, #0]
    689c:	f7ff f927 	bl	5aee <_svfprintf_r+0x466>
    68a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    68a2:	6812      	ldr	r2, [r2, #0]
    68a4:	9311      	str	r3, [sp, #68]	; 0x44
    68a6:	9210      	str	r2, [sp, #64]	; 0x40
    68a8:	e521      	b.n	62ee <_svfprintf_r+0xc66>
    68aa:	9b07      	ldr	r3, [sp, #28]
    68ac:	065b      	lsls	r3, r3, #25
    68ae:	d518      	bpl.n	68e2 <_svfprintf_r+0x125a>
    68b0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    68b2:	466f      	mov	r7, sp
    68b4:	2038      	movs	r0, #56	; 0x38
    68b6:	6833      	ldr	r3, [r6, #0]
    68b8:	5bc7      	ldrh	r7, [r0, r7]
    68ba:	3604      	adds	r6, #4
    68bc:	801f      	strh	r7, [r3, #0]
    68be:	960f      	str	r6, [sp, #60]	; 0x3c
    68c0:	f7fe ff0b 	bl	56da <_svfprintf_r+0x52>
    68c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    68c6:	2140      	movs	r1, #64	; 0x40
    68c8:	f7fe fa18 	bl	4cfc <_malloc_r>
    68cc:	9a08      	ldr	r2, [sp, #32]
    68ce:	6010      	str	r0, [r2, #0]
    68d0:	6110      	str	r0, [r2, #16]
    68d2:	2800      	cmp	r0, #0
    68d4:	d100      	bne.n	68d8 <_svfprintf_r+0x1250>
    68d6:	e170      	b.n	6bba <_svfprintf_r+0x1532>
    68d8:	9e08      	ldr	r6, [sp, #32]
    68da:	2340      	movs	r3, #64	; 0x40
    68dc:	6173      	str	r3, [r6, #20]
    68de:	f7fe feee 	bl	56be <_svfprintf_r+0x36>
    68e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    68e4:	990e      	ldr	r1, [sp, #56]	; 0x38
    68e6:	6803      	ldr	r3, [r0, #0]
    68e8:	3004      	adds	r0, #4
    68ea:	6019      	str	r1, [r3, #0]
    68ec:	900f      	str	r0, [sp, #60]	; 0x3c
    68ee:	f7fe fef4 	bl	56da <_svfprintf_r+0x52>
    68f2:	4810      	ldr	r0, [pc, #64]	; (6934 <_svfprintf_r+0x12ac>)
    68f4:	9013      	str	r0, [sp, #76]	; 0x4c
    68f6:	e592      	b.n	641e <_svfprintf_r+0xd96>
    68f8:	9809      	ldr	r0, [sp, #36]	; 0x24
    68fa:	9908      	ldr	r1, [sp, #32]
    68fc:	1c22      	adds	r2, r4, #0
    68fe:	f004 f985 	bl	ac0c <__ssprint_r>
    6902:	2800      	cmp	r0, #0
    6904:	d001      	beq.n	690a <_svfprintf_r+0x1282>
    6906:	f7ff f876 	bl	59f6 <_svfprintf_r+0x36e>
    690a:	9d42      	ldr	r5, [sp, #264]	; 0x108
    690c:	ab1f      	add	r3, sp, #124	; 0x7c
    690e:	e68b      	b.n	6628 <_svfprintf_r+0xfa0>
    6910:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6912:	3b47      	subs	r3, #71	; 0x47
    6914:	2606      	movs	r6, #6
    6916:	930c      	str	r3, [sp, #48]	; 0x30
    6918:	e70f      	b.n	673a <_svfprintf_r+0x10b2>
    691a:	46c0      	nop			; (mov r8, r8)
    691c:	46c0      	nop			; (mov r8, r8)
    691e:	46c0      	nop			; (mov r8, r8)
	...
    6928:	0000dee0 	.word	0x0000dee0
    692c:	0000e95c 	.word	0x0000e95c
    6930:	0000e920 	.word	0x0000e920
    6934:	0000e924 	.word	0x0000e924
    6938:	4fa7      	ldr	r7, [pc, #668]	; (6bd8 <_svfprintf_r+0x1550>)
    693a:	46b8      	mov	r8, r7
    693c:	2610      	movs	r6, #16
    693e:	1c32      	adds	r2, r6, #0
    6940:	4442      	add	r2, r8
    6942:	601a      	str	r2, [r3, #0]
    6944:	68a2      	ldr	r2, [r4, #8]
    6946:	18aa      	adds	r2, r5, r2
    6948:	605d      	str	r5, [r3, #4]
    694a:	60a2      	str	r2, [r4, #8]
    694c:	6862      	ldr	r2, [r4, #4]
    694e:	3201      	adds	r2, #1
    6950:	6062      	str	r2, [r4, #4]
    6952:	3308      	adds	r3, #8
    6954:	2a07      	cmp	r2, #7
    6956:	dd09      	ble.n	696c <_svfprintf_r+0x12e4>
    6958:	9809      	ldr	r0, [sp, #36]	; 0x24
    695a:	9908      	ldr	r1, [sp, #32]
    695c:	1c22      	adds	r2, r4, #0
    695e:	f004 f955 	bl	ac0c <__ssprint_r>
    6962:	2800      	cmp	r0, #0
    6964:	d001      	beq.n	696a <_svfprintf_r+0x12e2>
    6966:	f7ff f846 	bl	59f6 <_svfprintf_r+0x36e>
    696a:	ab1f      	add	r3, sp, #124	; 0x7c
    696c:	980d      	ldr	r0, [sp, #52]	; 0x34
    696e:	68a2      	ldr	r2, [r4, #8]
    6970:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    6972:	1812      	adds	r2, r2, r0
    6974:	601f      	str	r7, [r3, #0]
    6976:	6058      	str	r0, [r3, #4]
    6978:	60a2      	str	r2, [r4, #8]
    697a:	6862      	ldr	r2, [r4, #4]
    697c:	3201      	adds	r2, #1
    697e:	6062      	str	r2, [r4, #4]
    6980:	3308      	adds	r3, #8
    6982:	2a07      	cmp	r2, #7
    6984:	dc01      	bgt.n	698a <_svfprintf_r+0x1302>
    6986:	f7fe ffc4 	bl	5912 <_svfprintf_r+0x28a>
    698a:	f7ff fb79 	bl	6080 <_svfprintf_r+0x9f8>
    698e:	222d      	movs	r2, #45	; 0x2d
    6990:	464b      	mov	r3, r9
    6992:	701a      	strb	r2, [r3, #0]
    6994:	f7ff f8da 	bl	5b4c <_svfprintf_r+0x4c4>
    6998:	1c3a      	adds	r2, r7, #0
    699a:	e5b1      	b.n	6500 <_svfprintf_r+0xe78>
    699c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    699e:	f7fe fe35 	bl	560c <strlen>
    69a2:	43c3      	mvns	r3, r0
    69a4:	17db      	asrs	r3, r3, #31
    69a6:	900c      	str	r0, [sp, #48]	; 0x30
    69a8:	464e      	mov	r6, r9
    69aa:	4018      	ands	r0, r3
    69ac:	970f      	str	r7, [sp, #60]	; 0x3c
    69ae:	2700      	movs	r7, #0
    69b0:	900a      	str	r0, [sp, #40]	; 0x28
    69b2:	7832      	ldrb	r2, [r6, #0]
    69b4:	9714      	str	r7, [sp, #80]	; 0x50
    69b6:	9718      	str	r7, [sp, #96]	; 0x60
    69b8:	f7ff f899 	bl	5aee <_svfprintf_r+0x466>
    69bc:	4a86      	ldr	r2, [pc, #536]	; (6bd8 <_svfprintf_r+0x1550>)
    69be:	1c2b      	adds	r3, r5, #0
    69c0:	3308      	adds	r3, #8
    69c2:	4690      	mov	r8, r2
    69c4:	f7fe ff18 	bl	57f8 <_svfprintf_r+0x170>
    69c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    69ca:	9908      	ldr	r1, [sp, #32]
    69cc:	1c22      	adds	r2, r4, #0
    69ce:	f004 f91d 	bl	ac0c <__ssprint_r>
    69d2:	2800      	cmp	r0, #0
    69d4:	d001      	beq.n	69da <_svfprintf_r+0x1352>
    69d6:	f7ff f80e 	bl	59f6 <_svfprintf_r+0x36e>
    69da:	af1f      	add	r7, sp, #124	; 0x7c
    69dc:	f7ff fba6 	bl	612c <_svfprintf_r+0xaa4>
    69e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    69e2:	1ae3      	subs	r3, r4, r3
    69e4:	930c      	str	r3, [sp, #48]	; 0x30
    69e6:	f7ff f878 	bl	5ada <_svfprintf_r+0x452>
    69ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    69ec:	9908      	ldr	r1, [sp, #32]
    69ee:	1c22      	adds	r2, r4, #0
    69f0:	f004 f90c 	bl	ac0c <__ssprint_r>
    69f4:	2800      	cmp	r0, #0
    69f6:	d001      	beq.n	69fc <_svfprintf_r+0x1374>
    69f8:	f7fe fffd 	bl	59f6 <_svfprintf_r+0x36e>
    69fc:	9942      	ldr	r1, [sp, #264]	; 0x108
    69fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    6a00:	aa1f      	add	r2, sp, #124	; 0x7c
    6a02:	1a41      	subs	r1, r0, r1
    6a04:	e59d      	b.n	6542 <_svfprintf_r+0xeba>
    6a06:	4a74      	ldr	r2, [pc, #464]	; (6bd8 <_svfprintf_r+0x1550>)
    6a08:	4690      	mov	r8, r2
    6a0a:	f7fe ffad 	bl	5968 <_svfprintf_r+0x2e0>
    6a0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    6a10:	9908      	ldr	r1, [sp, #32]
    6a12:	1c22      	adds	r2, r4, #0
    6a14:	f004 f8fa 	bl	ac0c <__ssprint_r>
    6a18:	2800      	cmp	r0, #0
    6a1a:	d001      	beq.n	6a20 <_svfprintf_r+0x1398>
    6a1c:	f7fe ffeb 	bl	59f6 <_svfprintf_r+0x36e>
    6a20:	aa1f      	add	r2, sp, #124	; 0x7c
    6a22:	e56d      	b.n	6500 <_svfprintf_r+0xe78>
    6a24:	960c      	str	r6, [sp, #48]	; 0x30
    6a26:	2e06      	cmp	r6, #6
    6a28:	d90a      	bls.n	6a40 <_svfprintf_r+0x13b8>
    6a2a:	2306      	movs	r3, #6
    6a2c:	930c      	str	r3, [sp, #48]	; 0x30
    6a2e:	930a      	str	r3, [sp, #40]	; 0x28
    6a30:	970f      	str	r7, [sp, #60]	; 0x3c
    6a32:	4f6a      	ldr	r7, [pc, #424]	; (6bdc <_svfprintf_r+0x1554>)
    6a34:	2200      	movs	r2, #0
    6a36:	9214      	str	r2, [sp, #80]	; 0x50
    6a38:	9218      	str	r2, [sp, #96]	; 0x60
    6a3a:	9713      	str	r7, [sp, #76]	; 0x4c
    6a3c:	f7fe fea2 	bl	5784 <_svfprintf_r+0xfc>
    6a40:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    6a42:	43f3      	mvns	r3, r6
    6a44:	17db      	asrs	r3, r3, #31
    6a46:	401e      	ands	r6, r3
    6a48:	960a      	str	r6, [sp, #40]	; 0x28
    6a4a:	e7f1      	b.n	6a30 <_svfprintf_r+0x13a8>
    6a4c:	46b2      	mov	sl, r6
    6a4e:	2303      	movs	r3, #3
    6a50:	e696      	b.n	6780 <_svfprintf_r+0x10f8>
    6a52:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6a54:	2a66      	cmp	r2, #102	; 0x66
    6a56:	d000      	beq.n	6a5a <_svfprintf_r+0x13d2>
    6a58:	e091      	b.n	6b7e <_svfprintf_r+0x14f6>
    6a5a:	9a42      	ldr	r2, [sp, #264]	; 0x108
    6a5c:	920c      	str	r2, [sp, #48]	; 0x30
    6a5e:	2a00      	cmp	r2, #0
    6a60:	dc00      	bgt.n	6a64 <_svfprintf_r+0x13dc>
    6a62:	e08e      	b.n	6b82 <_svfprintf_r+0x14fa>
    6a64:	2e00      	cmp	r6, #0
    6a66:	d102      	bne.n	6a6e <_svfprintf_r+0x13e6>
    6a68:	9907      	ldr	r1, [sp, #28]
    6a6a:	07c9      	lsls	r1, r1, #31
    6a6c:	d502      	bpl.n	6a74 <_svfprintf_r+0x13ec>
    6a6e:	1c53      	adds	r3, r2, #1
    6a70:	199b      	adds	r3, r3, r6
    6a72:	930c      	str	r3, [sp, #48]	; 0x30
    6a74:	4641      	mov	r1, r8
    6a76:	9218      	str	r2, [sp, #96]	; 0x60
    6a78:	9116      	str	r1, [sp, #88]	; 0x58
    6a7a:	e704      	b.n	6886 <_svfprintf_r+0x11fe>
    6a7c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6a7e:	43fb      	mvns	r3, r7
    6a80:	17db      	asrs	r3, r3, #31
    6a82:	222d      	movs	r2, #45	; 0x2d
    6a84:	464e      	mov	r6, r9
    6a86:	401f      	ands	r7, r3
    6a88:	2000      	movs	r0, #0
    6a8a:	7032      	strb	r2, [r6, #0]
    6a8c:	970a      	str	r7, [sp, #40]	; 0x28
    6a8e:	9014      	str	r0, [sp, #80]	; 0x50
    6a90:	f7ff f830 	bl	5af4 <_svfprintf_r+0x46c>
    6a94:	4950      	ldr	r1, [pc, #320]	; (6bd8 <_svfprintf_r+0x1550>)
    6a96:	1c2b      	adds	r3, r5, #0
    6a98:	4688      	mov	r8, r1
    6a9a:	3508      	adds	r5, #8
    6a9c:	f7ff fa87 	bl	5fae <_svfprintf_r+0x926>
    6aa0:	9b40      	ldr	r3, [sp, #256]	; 0x100
    6aa2:	429f      	cmp	r7, r3
    6aa4:	d800      	bhi.n	6aa8 <_svfprintf_r+0x1420>
    6aa6:	e69b      	b.n	67e0 <_svfprintf_r+0x1158>
    6aa8:	2230      	movs	r2, #48	; 0x30
    6aaa:	701a      	strb	r2, [r3, #0]
    6aac:	3301      	adds	r3, #1
    6aae:	9340      	str	r3, [sp, #256]	; 0x100
    6ab0:	429f      	cmp	r7, r3
    6ab2:	d8fa      	bhi.n	6aaa <_svfprintf_r+0x1422>
    6ab4:	1c3b      	adds	r3, r7, #0
    6ab6:	e693      	b.n	67e0 <_svfprintf_r+0x1158>
    6ab8:	980d      	ldr	r0, [sp, #52]	; 0x34
    6aba:	4282      	cmp	r2, r0
    6abc:	db31      	blt.n	6b22 <_svfprintf_r+0x149a>
    6abe:	9b07      	ldr	r3, [sp, #28]
    6ac0:	2167      	movs	r1, #103	; 0x67
    6ac2:	4688      	mov	r8, r1
    6ac4:	07db      	lsls	r3, r3, #31
    6ac6:	d5d5      	bpl.n	6a74 <_svfprintf_r+0x13ec>
    6ac8:	1c56      	adds	r6, r2, #1
    6aca:	960c      	str	r6, [sp, #48]	; 0x30
    6acc:	e7d2      	b.n	6a74 <_svfprintf_r+0x13ec>
    6ace:	4649      	mov	r1, r9
    6ad0:	960a      	str	r6, [sp, #40]	; 0x28
    6ad2:	780a      	ldrb	r2, [r1, #0]
    6ad4:	970f      	str	r7, [sp, #60]	; 0x3c
    6ad6:	960c      	str	r6, [sp, #48]	; 0x30
    6ad8:	9014      	str	r0, [sp, #80]	; 0x50
    6ada:	9018      	str	r0, [sp, #96]	; 0x60
    6adc:	f7ff f807 	bl	5aee <_svfprintf_r+0x466>
    6ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ae2:	9908      	ldr	r1, [sp, #32]
    6ae4:	1c22      	adds	r2, r4, #0
    6ae6:	f004 f891 	bl	ac0c <__ssprint_r>
    6aea:	2800      	cmp	r0, #0
    6aec:	d001      	beq.n	6af2 <_svfprintf_r+0x146a>
    6aee:	f7fe ff82 	bl	59f6 <_svfprintf_r+0x36e>
    6af2:	9d42      	ldr	r5, [sp, #264]	; 0x108
    6af4:	ab1f      	add	r3, sp, #124	; 0x7c
    6af6:	e5b0      	b.n	665a <_svfprintf_r+0xfd2>
    6af8:	981b      	ldr	r0, [sp, #108]	; 0x6c
    6afa:	1c01      	adds	r1, r0, #0
    6afc:	2080      	movs	r0, #128	; 0x80
    6afe:	0600      	lsls	r0, r0, #24
    6b00:	1809      	adds	r1, r1, r0
    6b02:	222d      	movs	r2, #45	; 0x2d
    6b04:	910a      	str	r1, [sp, #40]	; 0x28
    6b06:	9214      	str	r2, [sp, #80]	; 0x50
    6b08:	e624      	b.n	6754 <_svfprintf_r+0x10cc>
    6b0a:	46b2      	mov	sl, r6
    6b0c:	2302      	movs	r3, #2
    6b0e:	e637      	b.n	6780 <_svfprintf_r+0x10f8>
    6b10:	2330      	movs	r3, #48	; 0x30
    6b12:	4657      	mov	r7, sl
    6b14:	18f6      	adds	r6, r6, r3
    6b16:	70bb      	strb	r3, [r7, #2]
    6b18:	70fe      	strb	r6, [r7, #3]
    6b1a:	a93f      	add	r1, sp, #252	; 0xfc
    6b1c:	e6a4      	b.n	6868 <_svfprintf_r+0x11e0>
    6b1e:	9b40      	ldr	r3, [sp, #256]	; 0x100
    6b20:	e65e      	b.n	67e0 <_svfprintf_r+0x1158>
    6b22:	2301      	movs	r3, #1
    6b24:	2a00      	cmp	r2, #0
    6b26:	dc01      	bgt.n	6b2c <_svfprintf_r+0x14a4>
    6b28:	18db      	adds	r3, r3, r3
    6b2a:	1a9b      	subs	r3, r3, r2
    6b2c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6b2e:	2067      	movs	r0, #103	; 0x67
    6b30:	18ff      	adds	r7, r7, r3
    6b32:	970c      	str	r7, [sp, #48]	; 0x30
    6b34:	4680      	mov	r8, r0
    6b36:	e79d      	b.n	6a74 <_svfprintf_r+0x13ec>
    6b38:	4827      	ldr	r0, [pc, #156]	; (6bd8 <_svfprintf_r+0x1550>)
    6b3a:	4680      	mov	r8, r0
    6b3c:	f7ff fbc5 	bl	62ca <_svfprintf_r+0xc42>
    6b40:	4e25      	ldr	r6, [pc, #148]	; (6bd8 <_svfprintf_r+0x1550>)
    6b42:	1c3a      	adds	r2, r7, #0
    6b44:	3208      	adds	r2, #8
    6b46:	46b0      	mov	r8, r6
    6b48:	e4cc      	b.n	64e4 <_svfprintf_r+0xe5c>
    6b4a:	981a      	ldr	r0, [sp, #104]	; 0x68
    6b4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    6b4e:	4b21      	ldr	r3, [pc, #132]	; (6bd4 <_svfprintf_r+0x154c>)
    6b50:	4a1f      	ldr	r2, [pc, #124]	; (6bd0 <_svfprintf_r+0x1548>)
    6b52:	f007 f855 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    6b56:	2800      	cmp	r0, #0
    6b58:	d000      	beq.n	6b5c <_svfprintf_r+0x14d4>
    6b5a:	e634      	b.n	67c6 <_svfprintf_r+0x113e>
    6b5c:	2301      	movs	r3, #1
    6b5e:	4651      	mov	r1, sl
    6b60:	1a5b      	subs	r3, r3, r1
    6b62:	9342      	str	r3, [sp, #264]	; 0x108
    6b64:	e62f      	b.n	67c6 <_svfprintf_r+0x113e>
    6b66:	232d      	movs	r3, #45	; 0x2d
    6b68:	4650      	mov	r0, sl
    6b6a:	4276      	negs	r6, r6
    6b6c:	7043      	strb	r3, [r0, #1]
    6b6e:	e658      	b.n	6822 <_svfprintf_r+0x119a>
    6b70:	9e07      	ldr	r6, [sp, #28]
    6b72:	2301      	movs	r3, #1
    6b74:	401e      	ands	r6, r3
    6b76:	9618      	str	r6, [sp, #96]	; 0x60
    6b78:	d100      	bne.n	6b7c <_svfprintf_r+0x14f4>
    6b7a:	e684      	b.n	6886 <_svfprintf_r+0x11fe>
    6b7c:	e67e      	b.n	687c <_svfprintf_r+0x11f4>
    6b7e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    6b80:	e642      	b.n	6808 <_svfprintf_r+0x1180>
    6b82:	2e00      	cmp	r6, #0
    6b84:	d105      	bne.n	6b92 <_svfprintf_r+0x150a>
    6b86:	9f07      	ldr	r7, [sp, #28]
    6b88:	2301      	movs	r3, #1
    6b8a:	930c      	str	r3, [sp, #48]	; 0x30
    6b8c:	421f      	tst	r7, r3
    6b8e:	d100      	bne.n	6b92 <_svfprintf_r+0x150a>
    6b90:	e770      	b.n	6a74 <_svfprintf_r+0x13ec>
    6b92:	3602      	adds	r6, #2
    6b94:	960c      	str	r6, [sp, #48]	; 0x30
    6b96:	e76d      	b.n	6a74 <_svfprintf_r+0x13ec>
    6b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b9a:	681b      	ldr	r3, [r3, #0]
    6b9c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    6b9e:	469b      	mov	fp, r3
    6ba0:	2700      	movs	r7, #0
    6ba2:	3604      	adds	r6, #4
    6ba4:	45bb      	cmp	fp, r7
    6ba6:	db01      	blt.n	6bac <_svfprintf_r+0x1524>
    6ba8:	f7ff f889 	bl	5cbe <_svfprintf_r+0x636>
    6bac:	780b      	ldrb	r3, [r1, #0]
    6bae:	960f      	str	r6, [sp, #60]	; 0x3c
    6bb0:	2601      	movs	r6, #1
    6bb2:	4276      	negs	r6, r6
    6bb4:	46b3      	mov	fp, r6
    6bb6:	f7fe fdcc 	bl	5752 <_svfprintf_r+0xca>
    6bba:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6bbc:	230c      	movs	r3, #12
    6bbe:	602b      	str	r3, [r5, #0]
    6bc0:	3b0b      	subs	r3, #11
    6bc2:	425b      	negs	r3, r3
    6bc4:	930e      	str	r3, [sp, #56]	; 0x38
    6bc6:	f7fe ff1d 	bl	5a04 <_svfprintf_r+0x37c>
    6bca:	46c0      	nop			; (mov r8, r8)
    6bcc:	46c0      	nop			; (mov r8, r8)
    6bce:	46c0      	nop			; (mov r8, r8)
	...
    6bd8:	0000dee0 	.word	0x0000dee0
    6bdc:	0000e954 	.word	0x0000e954

00006be0 <_vfprintf_r>:
    6be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6be2:	465f      	mov	r7, fp
    6be4:	4656      	mov	r6, sl
    6be6:	464d      	mov	r5, r9
    6be8:	4644      	mov	r4, r8
    6bea:	b4f0      	push	{r4, r5, r6, r7}
    6bec:	4cbc      	ldr	r4, [pc, #752]	; (6ee0 <_vfprintf_r+0x300>)
    6bee:	44a5      	add	sp, r4
    6bf0:	468a      	mov	sl, r1
    6bf2:	1c15      	adds	r5, r2, #0
    6bf4:	930f      	str	r3, [sp, #60]	; 0x3c
    6bf6:	9009      	str	r0, [sp, #36]	; 0x24
    6bf8:	f002 ff34 	bl	9a64 <_localeconv_r>
    6bfc:	6800      	ldr	r0, [r0, #0]
    6bfe:	9018      	str	r0, [sp, #96]	; 0x60
    6c00:	f7fe fd04 	bl	560c <strlen>
    6c04:	901c      	str	r0, [sp, #112]	; 0x70
    6c06:	9809      	ldr	r0, [sp, #36]	; 0x24
    6c08:	2800      	cmp	r0, #0
    6c0a:	d003      	beq.n	6c14 <_vfprintf_r+0x34>
    6c0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    6c0e:	2b00      	cmp	r3, #0
    6c10:	d100      	bne.n	6c14 <_vfprintf_r+0x34>
    6c12:	e22a      	b.n	706a <_vfprintf_r+0x48a>
    6c14:	4651      	mov	r1, sl
    6c16:	898a      	ldrh	r2, [r1, #12]
    6c18:	2180      	movs	r1, #128	; 0x80
    6c1a:	0189      	lsls	r1, r1, #6
    6c1c:	1c13      	adds	r3, r2, #0
    6c1e:	420a      	tst	r2, r1
    6c20:	d108      	bne.n	6c34 <_vfprintf_r+0x54>
    6c22:	430a      	orrs	r2, r1
    6c24:	4653      	mov	r3, sl
    6c26:	6e59      	ldr	r1, [r3, #100]	; 0x64
    6c28:	819a      	strh	r2, [r3, #12]
    6c2a:	4bae      	ldr	r3, [pc, #696]	; (6ee4 <_vfprintf_r+0x304>)
    6c2c:	4656      	mov	r6, sl
    6c2e:	400b      	ands	r3, r1
    6c30:	6673      	str	r3, [r6, #100]	; 0x64
    6c32:	1c13      	adds	r3, r2, #0
    6c34:	071f      	lsls	r7, r3, #28
    6c36:	d401      	bmi.n	6c3c <_vfprintf_r+0x5c>
    6c38:	f001 fab0 	bl	819c <_vfprintf_r+0x15bc>
    6c3c:	4650      	mov	r0, sl
    6c3e:	6901      	ldr	r1, [r0, #16]
    6c40:	2900      	cmp	r1, #0
    6c42:	d101      	bne.n	6c48 <_vfprintf_r+0x68>
    6c44:	f001 faaa 	bl	819c <_vfprintf_r+0x15bc>
    6c48:	211a      	movs	r1, #26
    6c4a:	400b      	ands	r3, r1
    6c4c:	2b0a      	cmp	r3, #10
    6c4e:	d100      	bne.n	6c52 <_vfprintf_r+0x72>
    6c50:	e1d1      	b.n	6ff6 <_vfprintf_r+0x416>
    6c52:	4aa5      	ldr	r2, [pc, #660]	; (6ee8 <_vfprintf_r+0x308>)
    6c54:	4ca5      	ldr	r4, [pc, #660]	; (6eec <_vfprintf_r+0x30c>)
    6c56:	2300      	movs	r3, #0
    6c58:	446c      	add	r4, sp
    6c5a:	446a      	add	r2, sp
    6c5c:	6022      	str	r2, [r4, #0]
    6c5e:	60a3      	str	r3, [r4, #8]
    6c60:	6063      	str	r3, [r4, #4]
    6c62:	930e      	str	r3, [sp, #56]	; 0x38
    6c64:	931a      	str	r3, [sp, #104]	; 0x68
    6c66:	931b      	str	r3, [sp, #108]	; 0x6c
    6c68:	9317      	str	r3, [sp, #92]	; 0x5c
    6c6a:	931d      	str	r3, [sp, #116]	; 0x74
    6c6c:	930d      	str	r3, [sp, #52]	; 0x34
    6c6e:	9508      	str	r5, [sp, #32]
    6c70:	46d3      	mov	fp, sl
    6c72:	1c15      	adds	r5, r2, #0
    6c74:	9e08      	ldr	r6, [sp, #32]
    6c76:	7833      	ldrb	r3, [r6, #0]
    6c78:	2b00      	cmp	r3, #0
    6c7a:	d100      	bne.n	6c7e <_vfprintf_r+0x9e>
    6c7c:	e186      	b.n	6f8c <_vfprintf_r+0x3ac>
    6c7e:	2b25      	cmp	r3, #37	; 0x25
    6c80:	d102      	bne.n	6c88 <_vfprintf_r+0xa8>
    6c82:	e183      	b.n	6f8c <_vfprintf_r+0x3ac>
    6c84:	2b00      	cmp	r3, #0
    6c86:	d003      	beq.n	6c90 <_vfprintf_r+0xb0>
    6c88:	3601      	adds	r6, #1
    6c8a:	7833      	ldrb	r3, [r6, #0]
    6c8c:	2b25      	cmp	r3, #37	; 0x25
    6c8e:	d1f9      	bne.n	6c84 <_vfprintf_r+0xa4>
    6c90:	9808      	ldr	r0, [sp, #32]
    6c92:	1a37      	subs	r7, r6, r0
    6c94:	2f00      	cmp	r7, #0
    6c96:	d00f      	beq.n	6cb8 <_vfprintf_r+0xd8>
    6c98:	68a3      	ldr	r3, [r4, #8]
    6c9a:	19db      	adds	r3, r3, r7
    6c9c:	6028      	str	r0, [r5, #0]
    6c9e:	606f      	str	r7, [r5, #4]
    6ca0:	60a3      	str	r3, [r4, #8]
    6ca2:	6863      	ldr	r3, [r4, #4]
    6ca4:	3301      	adds	r3, #1
    6ca6:	6063      	str	r3, [r4, #4]
    6ca8:	3508      	adds	r5, #8
    6caa:	2b07      	cmp	r3, #7
    6cac:	dd00      	ble.n	6cb0 <_vfprintf_r+0xd0>
    6cae:	e17e      	b.n	6fae <_vfprintf_r+0x3ce>
    6cb0:	990d      	ldr	r1, [sp, #52]	; 0x34
    6cb2:	19c9      	adds	r1, r1, r7
    6cb4:	910d      	str	r1, [sp, #52]	; 0x34
    6cb6:	7833      	ldrb	r3, [r6, #0]
    6cb8:	2b00      	cmp	r3, #0
    6cba:	d101      	bne.n	6cc0 <_vfprintf_r+0xe0>
    6cbc:	f000 fbed 	bl	749a <_vfprintf_r+0x8ba>
    6cc0:	4b8b      	ldr	r3, [pc, #556]	; (6ef0 <_vfprintf_r+0x310>)
    6cc2:	1c72      	adds	r2, r6, #1
    6cc4:	446b      	add	r3, sp
    6cc6:	2700      	movs	r7, #0
    6cc8:	9208      	str	r2, [sp, #32]
    6cca:	701f      	strb	r7, [r3, #0]
    6ccc:	2000      	movs	r0, #0
    6cce:	4699      	mov	r9, r3
    6cd0:	2108      	movs	r1, #8
    6cd2:	7873      	ldrb	r3, [r6, #1]
    6cd4:	2780      	movs	r7, #128	; 0x80
    6cd6:	2601      	movs	r6, #1
    6cd8:	4a86      	ldr	r2, [pc, #536]	; (6ef4 <_vfprintf_r+0x314>)
    6cda:	900b      	str	r0, [sp, #44]	; 0x2c
    6cdc:	9007      	str	r0, [sp, #28]
    6cde:	4276      	negs	r6, r6
    6ce0:	3020      	adds	r0, #32
    6ce2:	4688      	mov	r8, r1
    6ce4:	46ba      	mov	sl, r7
    6ce6:	9f08      	ldr	r7, [sp, #32]
    6ce8:	3701      	adds	r7, #1
    6cea:	9708      	str	r7, [sp, #32]
    6cec:	1c19      	adds	r1, r3, #0
    6cee:	3920      	subs	r1, #32
    6cf0:	2958      	cmp	r1, #88	; 0x58
    6cf2:	d800      	bhi.n	6cf6 <_vfprintf_r+0x116>
    6cf4:	e14d      	b.n	6f92 <_vfprintf_r+0x3b2>
    6cf6:	9316      	str	r3, [sp, #88]	; 0x58
    6cf8:	2b00      	cmp	r3, #0
    6cfa:	d100      	bne.n	6cfe <_vfprintf_r+0x11e>
    6cfc:	e3cd      	b.n	749a <_vfprintf_r+0x8ba>
    6cfe:	4b7e      	ldr	r3, [pc, #504]	; (6ef8 <_vfprintf_r+0x318>)
    6d00:	af16      	add	r7, sp, #88	; 0x58
    6d02:	783f      	ldrb	r7, [r7, #0]
    6d04:	446b      	add	r3, sp
    6d06:	2100      	movs	r1, #0
    6d08:	4648      	mov	r0, r9
    6d0a:	701f      	strb	r7, [r3, #0]
    6d0c:	7001      	strb	r1, [r0, #0]
    6d0e:	2200      	movs	r2, #0
    6d10:	2601      	movs	r6, #1
    6d12:	960a      	str	r6, [sp, #40]	; 0x28
    6d14:	960c      	str	r6, [sp, #48]	; 0x30
    6d16:	9214      	str	r2, [sp, #80]	; 0x50
    6d18:	9219      	str	r2, [sp, #100]	; 0x64
    6d1a:	9313      	str	r3, [sp, #76]	; 0x4c
    6d1c:	9807      	ldr	r0, [sp, #28]
    6d1e:	2302      	movs	r3, #2
    6d20:	4018      	ands	r0, r3
    6d22:	4682      	mov	sl, r0
    6d24:	d002      	beq.n	6d2c <_vfprintf_r+0x14c>
    6d26:	990a      	ldr	r1, [sp, #40]	; 0x28
    6d28:	18c9      	adds	r1, r1, r3
    6d2a:	910a      	str	r1, [sp, #40]	; 0x28
    6d2c:	9e07      	ldr	r6, [sp, #28]
    6d2e:	2384      	movs	r3, #132	; 0x84
    6d30:	401e      	ands	r6, r3
    6d32:	9615      	str	r6, [sp, #84]	; 0x54
    6d34:	d13e      	bne.n	6db4 <_vfprintf_r+0x1d4>
    6d36:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    6d38:	980a      	ldr	r0, [sp, #40]	; 0x28
    6d3a:	1a3e      	subs	r6, r7, r0
    6d3c:	2e00      	cmp	r6, #0
    6d3e:	dd39      	ble.n	6db4 <_vfprintf_r+0x1d4>
    6d40:	2e10      	cmp	r6, #16
    6d42:	dc01      	bgt.n	6d48 <_vfprintf_r+0x168>
    6d44:	f001 f9d0 	bl	80e8 <_vfprintf_r+0x1508>
    6d48:	496c      	ldr	r1, [pc, #432]	; (6efc <_vfprintf_r+0x31c>)
    6d4a:	1c2a      	adds	r2, r5, #0
    6d4c:	2710      	movs	r7, #16
    6d4e:	1c0d      	adds	r5, r1, #0
    6d50:	e005      	b.n	6d5e <_vfprintf_r+0x17e>
    6d52:	3208      	adds	r2, #8
    6d54:	1c13      	adds	r3, r2, #0
    6d56:	3e10      	subs	r6, #16
    6d58:	3308      	adds	r3, #8
    6d5a:	2e10      	cmp	r6, #16
    6d5c:	dd18      	ble.n	6d90 <_vfprintf_r+0x1b0>
    6d5e:	68a3      	ldr	r3, [r4, #8]
    6d60:	3310      	adds	r3, #16
    6d62:	6015      	str	r5, [r2, #0]
    6d64:	6057      	str	r7, [r2, #4]
    6d66:	60a3      	str	r3, [r4, #8]
    6d68:	6863      	ldr	r3, [r4, #4]
    6d6a:	3301      	adds	r3, #1
    6d6c:	6063      	str	r3, [r4, #4]
    6d6e:	2b07      	cmp	r3, #7
    6d70:	ddef      	ble.n	6d52 <_vfprintf_r+0x172>
    6d72:	9809      	ldr	r0, [sp, #36]	; 0x24
    6d74:	4659      	mov	r1, fp
    6d76:	1c22      	adds	r2, r4, #0
    6d78:	f004 fd72 	bl	b860 <__sprint_r>
    6d7c:	2800      	cmp	r0, #0
    6d7e:	d000      	beq.n	6d82 <_vfprintf_r+0x1a2>
    6d80:	e126      	b.n	6fd0 <_vfprintf_r+0x3f0>
    6d82:	4b5f      	ldr	r3, [pc, #380]	; (6f00 <_vfprintf_r+0x320>)
    6d84:	4a58      	ldr	r2, [pc, #352]	; (6ee8 <_vfprintf_r+0x308>)
    6d86:	3e10      	subs	r6, #16
    6d88:	446b      	add	r3, sp
    6d8a:	446a      	add	r2, sp
    6d8c:	2e10      	cmp	r6, #16
    6d8e:	dce6      	bgt.n	6d5e <_vfprintf_r+0x17e>
    6d90:	46a8      	mov	r8, r5
    6d92:	1c15      	adds	r5, r2, #0
    6d94:	68a2      	ldr	r2, [r4, #8]
    6d96:	4647      	mov	r7, r8
    6d98:	18b2      	adds	r2, r6, r2
    6d9a:	602f      	str	r7, [r5, #0]
    6d9c:	606e      	str	r6, [r5, #4]
    6d9e:	60a2      	str	r2, [r4, #8]
    6da0:	6862      	ldr	r2, [r4, #4]
    6da2:	3201      	adds	r2, #1
    6da4:	6062      	str	r2, [r4, #4]
    6da6:	2a07      	cmp	r2, #7
    6da8:	dd01      	ble.n	6dae <_vfprintf_r+0x1ce>
    6daa:	f000 fd90 	bl	78ce <_vfprintf_r+0xcee>
    6dae:	4648      	mov	r0, r9
    6db0:	7802      	ldrb	r2, [r0, #0]
    6db2:	1c1d      	adds	r5, r3, #0
    6db4:	2a00      	cmp	r2, #0
    6db6:	d00e      	beq.n	6dd6 <_vfprintf_r+0x1f6>
    6db8:	2301      	movs	r3, #1
    6dba:	606b      	str	r3, [r5, #4]
    6dbc:	68a3      	ldr	r3, [r4, #8]
    6dbe:	464a      	mov	r2, r9
    6dc0:	3301      	adds	r3, #1
    6dc2:	602a      	str	r2, [r5, #0]
    6dc4:	60a3      	str	r3, [r4, #8]
    6dc6:	6863      	ldr	r3, [r4, #4]
    6dc8:	3301      	adds	r3, #1
    6dca:	6063      	str	r3, [r4, #4]
    6dcc:	3508      	adds	r5, #8
    6dce:	2b07      	cmp	r3, #7
    6dd0:	dd01      	ble.n	6dd6 <_vfprintf_r+0x1f6>
    6dd2:	f000 fcc7 	bl	7764 <_vfprintf_r+0xb84>
    6dd6:	2300      	movs	r3, #0
    6dd8:	459a      	cmp	sl, r3
    6dda:	d00f      	beq.n	6dfc <_vfprintf_r+0x21c>
    6ddc:	4b49      	ldr	r3, [pc, #292]	; (6f04 <_vfprintf_r+0x324>)
    6dde:	446b      	add	r3, sp
    6de0:	602b      	str	r3, [r5, #0]
    6de2:	2302      	movs	r3, #2
    6de4:	606b      	str	r3, [r5, #4]
    6de6:	68a3      	ldr	r3, [r4, #8]
    6de8:	3302      	adds	r3, #2
    6dea:	60a3      	str	r3, [r4, #8]
    6dec:	6863      	ldr	r3, [r4, #4]
    6dee:	3301      	adds	r3, #1
    6df0:	6063      	str	r3, [r4, #4]
    6df2:	3508      	adds	r5, #8
    6df4:	2b07      	cmp	r3, #7
    6df6:	dd01      	ble.n	6dfc <_vfprintf_r+0x21c>
    6df8:	f000 fca8 	bl	774c <_vfprintf_r+0xb6c>
    6dfc:	9e15      	ldr	r6, [sp, #84]	; 0x54
    6dfe:	2e80      	cmp	r6, #128	; 0x80
    6e00:	d100      	bne.n	6e04 <_vfprintf_r+0x224>
    6e02:	e3cf      	b.n	75a4 <_vfprintf_r+0x9c4>
    6e04:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6e08:	1ad6      	subs	r6, r2, r3
    6e0a:	2e00      	cmp	r6, #0
    6e0c:	dc01      	bgt.n	6e12 <_vfprintf_r+0x232>
    6e0e:	f000 fc19 	bl	7644 <_vfprintf_r+0xa64>
    6e12:	2e10      	cmp	r6, #16
    6e14:	dc01      	bgt.n	6e1a <_vfprintf_r+0x23a>
    6e16:	f001 f80e 	bl	7e36 <_vfprintf_r+0x1256>
    6e1a:	4f38      	ldr	r7, [pc, #224]	; (6efc <_vfprintf_r+0x31c>)
    6e1c:	2010      	movs	r0, #16
    6e1e:	46b8      	mov	r8, r7
    6e20:	4681      	mov	r9, r0
    6e22:	1c2b      	adds	r3, r5, #0
    6e24:	44c1      	add	r9, r8
    6e26:	4682      	mov	sl, r0
    6e28:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6e2a:	465f      	mov	r7, fp
    6e2c:	e005      	b.n	6e3a <_vfprintf_r+0x25a>
    6e2e:	3308      	adds	r3, #8
    6e30:	1c1a      	adds	r2, r3, #0
    6e32:	3e10      	subs	r6, #16
    6e34:	3208      	adds	r2, #8
    6e36:	2e10      	cmp	r6, #16
    6e38:	dd1b      	ble.n	6e72 <_vfprintf_r+0x292>
    6e3a:	464a      	mov	r2, r9
    6e3c:	601a      	str	r2, [r3, #0]
    6e3e:	68a2      	ldr	r2, [r4, #8]
    6e40:	4650      	mov	r0, sl
    6e42:	3210      	adds	r2, #16
    6e44:	6058      	str	r0, [r3, #4]
    6e46:	60a2      	str	r2, [r4, #8]
    6e48:	6862      	ldr	r2, [r4, #4]
    6e4a:	3201      	adds	r2, #1
    6e4c:	6062      	str	r2, [r4, #4]
    6e4e:	2a07      	cmp	r2, #7
    6e50:	dded      	ble.n	6e2e <_vfprintf_r+0x24e>
    6e52:	1c28      	adds	r0, r5, #0
    6e54:	1c39      	adds	r1, r7, #0
    6e56:	1c22      	adds	r2, r4, #0
    6e58:	f004 fd02 	bl	b860 <__sprint_r>
    6e5c:	2800      	cmp	r0, #0
    6e5e:	d001      	beq.n	6e64 <_vfprintf_r+0x284>
    6e60:	f000 fc66 	bl	7730 <_vfprintf_r+0xb50>
    6e64:	4a26      	ldr	r2, [pc, #152]	; (6f00 <_vfprintf_r+0x320>)
    6e66:	4b20      	ldr	r3, [pc, #128]	; (6ee8 <_vfprintf_r+0x308>)
    6e68:	3e10      	subs	r6, #16
    6e6a:	446a      	add	r2, sp
    6e6c:	446b      	add	r3, sp
    6e6e:	2e10      	cmp	r6, #16
    6e70:	dce3      	bgt.n	6e3a <_vfprintf_r+0x25a>
    6e72:	46bb      	mov	fp, r7
    6e74:	1c1d      	adds	r5, r3, #0
    6e76:	1c17      	adds	r7, r2, #0
    6e78:	2110      	movs	r1, #16
    6e7a:	1c0b      	adds	r3, r1, #0
    6e7c:	4443      	add	r3, r8
    6e7e:	602b      	str	r3, [r5, #0]
    6e80:	68a3      	ldr	r3, [r4, #8]
    6e82:	606e      	str	r6, [r5, #4]
    6e84:	18f6      	adds	r6, r6, r3
    6e86:	6863      	ldr	r3, [r4, #4]
    6e88:	3301      	adds	r3, #1
    6e8a:	60a6      	str	r6, [r4, #8]
    6e8c:	6063      	str	r3, [r4, #4]
    6e8e:	2b07      	cmp	r3, #7
    6e90:	dd01      	ble.n	6e96 <_vfprintf_r+0x2b6>
    6e92:	f000 fc4f 	bl	7734 <_vfprintf_r+0xb54>
    6e96:	9a07      	ldr	r2, [sp, #28]
    6e98:	05d2      	lsls	r2, r2, #23
    6e9a:	d500      	bpl.n	6e9e <_vfprintf_r+0x2be>
    6e9c:	e308      	b.n	74b0 <_vfprintf_r+0x8d0>
    6e9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6ea0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    6ea2:	603b      	str	r3, [r7, #0]
    6ea4:	607d      	str	r5, [r7, #4]
    6ea6:	68a3      	ldr	r3, [r4, #8]
    6ea8:	195b      	adds	r3, r3, r5
    6eaa:	60a3      	str	r3, [r4, #8]
    6eac:	6863      	ldr	r3, [r4, #4]
    6eae:	3301      	adds	r3, #1
    6eb0:	6063      	str	r3, [r4, #4]
    6eb2:	3708      	adds	r7, #8
    6eb4:	2b07      	cmp	r3, #7
    6eb6:	dd01      	ble.n	6ebc <_vfprintf_r+0x2dc>
    6eb8:	f000 fc17 	bl	76ea <_vfprintf_r+0xb0a>
    6ebc:	9907      	ldr	r1, [sp, #28]
    6ebe:	0749      	lsls	r1, r1, #29
    6ec0:	d550      	bpl.n	6f64 <_vfprintf_r+0x384>
    6ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6ec6:	1ad5      	subs	r5, r2, r3
    6ec8:	2d00      	cmp	r5, #0
    6eca:	dd4b      	ble.n	6f64 <_vfprintf_r+0x384>
    6ecc:	2d10      	cmp	r5, #16
    6ece:	dc01      	bgt.n	6ed4 <_vfprintf_r+0x2f4>
    6ed0:	f001 f971 	bl	81b6 <_vfprintf_r+0x15d6>
    6ed4:	4809      	ldr	r0, [pc, #36]	; (6efc <_vfprintf_r+0x31c>)
    6ed6:	1c3b      	adds	r3, r7, #0
    6ed8:	2610      	movs	r6, #16
    6eda:	1c07      	adds	r7, r0, #0
    6edc:	e017      	b.n	6f0e <_vfprintf_r+0x32e>
    6ede:	46c0      	nop			; (mov r8, r8)
    6ee0:	fffffa8c 	.word	0xfffffa8c
    6ee4:	ffffdfff 	.word	0xffffdfff
    6ee8:	000004e4 	.word	0x000004e4
    6eec:	0000054c 	.word	0x0000054c
    6ef0:	0000056f 	.word	0x0000056f
    6ef4:	0000df00 	.word	0x0000df00
    6ef8:	00000524 	.word	0x00000524
    6efc:	0000e064 	.word	0x0000e064
    6f00:	000004ec 	.word	0x000004ec
    6f04:	0000056c 	.word	0x0000056c
    6f08:	3d10      	subs	r5, #16
    6f0a:	2d10      	cmp	r5, #16
    6f0c:	dd16      	ble.n	6f3c <_vfprintf_r+0x35c>
    6f0e:	68a2      	ldr	r2, [r4, #8]
    6f10:	3210      	adds	r2, #16
    6f12:	601f      	str	r7, [r3, #0]
    6f14:	605e      	str	r6, [r3, #4]
    6f16:	60a2      	str	r2, [r4, #8]
    6f18:	6862      	ldr	r2, [r4, #4]
    6f1a:	3201      	adds	r2, #1
    6f1c:	6062      	str	r2, [r4, #4]
    6f1e:	3308      	adds	r3, #8
    6f20:	2a07      	cmp	r2, #7
    6f22:	ddf1      	ble.n	6f08 <_vfprintf_r+0x328>
    6f24:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f26:	4659      	mov	r1, fp
    6f28:	1c22      	adds	r2, r4, #0
    6f2a:	f004 fc99 	bl	b860 <__sprint_r>
    6f2e:	2800      	cmp	r0, #0
    6f30:	d14e      	bne.n	6fd0 <_vfprintf_r+0x3f0>
    6f32:	4bcf      	ldr	r3, [pc, #828]	; (7270 <_vfprintf_r+0x690>)
    6f34:	3d10      	subs	r5, #16
    6f36:	446b      	add	r3, sp
    6f38:	2d10      	cmp	r5, #16
    6f3a:	dce8      	bgt.n	6f0e <_vfprintf_r+0x32e>
    6f3c:	46b8      	mov	r8, r7
    6f3e:	1c1f      	adds	r7, r3, #0
    6f40:	68a3      	ldr	r3, [r4, #8]
    6f42:	607d      	str	r5, [r7, #4]
    6f44:	18ed      	adds	r5, r5, r3
    6f46:	6863      	ldr	r3, [r4, #4]
    6f48:	4641      	mov	r1, r8
    6f4a:	3301      	adds	r3, #1
    6f4c:	6039      	str	r1, [r7, #0]
    6f4e:	60a5      	str	r5, [r4, #8]
    6f50:	6063      	str	r3, [r4, #4]
    6f52:	2b07      	cmp	r3, #7
    6f54:	dd07      	ble.n	6f66 <_vfprintf_r+0x386>
    6f56:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f58:	4659      	mov	r1, fp
    6f5a:	1c22      	adds	r2, r4, #0
    6f5c:	f004 fc80 	bl	b860 <__sprint_r>
    6f60:	2800      	cmp	r0, #0
    6f62:	d135      	bne.n	6fd0 <_vfprintf_r+0x3f0>
    6f64:	68a5      	ldr	r5, [r4, #8]
    6f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6f6a:	4293      	cmp	r3, r2
    6f6c:	da00      	bge.n	6f70 <_vfprintf_r+0x390>
    6f6e:	1c13      	adds	r3, r2, #0
    6f70:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    6f72:	18f6      	adds	r6, r6, r3
    6f74:	960d      	str	r6, [sp, #52]	; 0x34
    6f76:	2d00      	cmp	r5, #0
    6f78:	d123      	bne.n	6fc2 <_vfprintf_r+0x3e2>
    6f7a:	2700      	movs	r7, #0
    6f7c:	6067      	str	r7, [r4, #4]
    6f7e:	9e08      	ldr	r6, [sp, #32]
    6f80:	4dbb      	ldr	r5, [pc, #748]	; (7270 <_vfprintf_r+0x690>)
    6f82:	7833      	ldrb	r3, [r6, #0]
    6f84:	446d      	add	r5, sp
    6f86:	2b00      	cmp	r3, #0
    6f88:	d000      	beq.n	6f8c <_vfprintf_r+0x3ac>
    6f8a:	e678      	b.n	6c7e <_vfprintf_r+0x9e>
    6f8c:	9e08      	ldr	r6, [sp, #32]
    6f8e:	7833      	ldrb	r3, [r6, #0]
    6f90:	e692      	b.n	6cb8 <_vfprintf_r+0xd8>
    6f92:	0089      	lsls	r1, r1, #2
    6f94:	5851      	ldr	r1, [r2, r1]
    6f96:	468f      	mov	pc, r1
    6f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6f9a:	425b      	negs	r3, r3
    6f9c:	930b      	str	r3, [sp, #44]	; 0x2c
    6f9e:	970f      	str	r7, [sp, #60]	; 0x3c
    6fa0:	9f07      	ldr	r7, [sp, #28]
    6fa2:	2304      	movs	r3, #4
    6fa4:	431f      	orrs	r7, r3
    6fa6:	9707      	str	r7, [sp, #28]
    6fa8:	9908      	ldr	r1, [sp, #32]
    6faa:	780b      	ldrb	r3, [r1, #0]
    6fac:	e69b      	b.n	6ce6 <_vfprintf_r+0x106>
    6fae:	9809      	ldr	r0, [sp, #36]	; 0x24
    6fb0:	4659      	mov	r1, fp
    6fb2:	1c22      	adds	r2, r4, #0
    6fb4:	f004 fc54 	bl	b860 <__sprint_r>
    6fb8:	2800      	cmp	r0, #0
    6fba:	d109      	bne.n	6fd0 <_vfprintf_r+0x3f0>
    6fbc:	4dac      	ldr	r5, [pc, #688]	; (7270 <_vfprintf_r+0x690>)
    6fbe:	446d      	add	r5, sp
    6fc0:	e676      	b.n	6cb0 <_vfprintf_r+0xd0>
    6fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
    6fc4:	4659      	mov	r1, fp
    6fc6:	1c22      	adds	r2, r4, #0
    6fc8:	f004 fc4a 	bl	b860 <__sprint_r>
    6fcc:	2800      	cmp	r0, #0
    6fce:	d0d4      	beq.n	6f7a <_vfprintf_r+0x39a>
    6fd0:	46da      	mov	sl, fp
    6fd2:	4650      	mov	r0, sl
    6fd4:	8983      	ldrh	r3, [r0, #12]
    6fd6:	0659      	lsls	r1, r3, #25
    6fd8:	d502      	bpl.n	6fe0 <_vfprintf_r+0x400>
    6fda:	2301      	movs	r3, #1
    6fdc:	425b      	negs	r3, r3
    6fde:	930d      	str	r3, [sp, #52]	; 0x34
    6fe0:	4ba4      	ldr	r3, [pc, #656]	; (7274 <_vfprintf_r+0x694>)
    6fe2:	980d      	ldr	r0, [sp, #52]	; 0x34
    6fe4:	449d      	add	sp, r3
    6fe6:	bc3c      	pop	{r2, r3, r4, r5}
    6fe8:	4690      	mov	r8, r2
    6fea:	4699      	mov	r9, r3
    6fec:	46a2      	mov	sl, r4
    6fee:	46ab      	mov	fp, r5
    6ff0:	bcf0      	pop	{r4, r5, r6, r7}
    6ff2:	bc02      	pop	{r1}
    6ff4:	4708      	bx	r1
    6ff6:	4653      	mov	r3, sl
    6ff8:	89d9      	ldrh	r1, [r3, #14]
    6ffa:	040b      	lsls	r3, r1, #16
    6ffc:	141b      	asrs	r3, r3, #16
    6ffe:	2b00      	cmp	r3, #0
    7000:	da00      	bge.n	7004 <_vfprintf_r+0x424>
    7002:	e626      	b.n	6c52 <_vfprintf_r+0x72>
    7004:	4656      	mov	r6, sl
    7006:	2302      	movs	r3, #2
    7008:	4c9b      	ldr	r4, [pc, #620]	; (7278 <_vfprintf_r+0x698>)
    700a:	439a      	bics	r2, r3
    700c:	6e73      	ldr	r3, [r6, #100]	; 0x64
    700e:	446c      	add	r4, sp
    7010:	6663      	str	r3, [r4, #100]	; 0x64
    7012:	69f3      	ldr	r3, [r6, #28]
    7014:	61e3      	str	r3, [r4, #28]
    7016:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7018:	81a2      	strh	r2, [r4, #12]
    701a:	81e1      	strh	r1, [r4, #14]
    701c:	6263      	str	r3, [r4, #36]	; 0x24
    701e:	4c96      	ldr	r4, [pc, #600]	; (7278 <_vfprintf_r+0x698>)
    7020:	2380      	movs	r3, #128	; 0x80
    7022:	446c      	add	r4, sp
    7024:	00db      	lsls	r3, r3, #3
    7026:	af1f      	add	r7, sp, #124	; 0x7c
    7028:	60a3      	str	r3, [r4, #8]
    702a:	6163      	str	r3, [r4, #20]
    702c:	2300      	movs	r3, #0
    702e:	61a3      	str	r3, [r4, #24]
    7030:	6027      	str	r7, [r4, #0]
    7032:	6127      	str	r7, [r4, #16]
    7034:	9809      	ldr	r0, [sp, #36]	; 0x24
    7036:	1c21      	adds	r1, r4, #0
    7038:	1c2a      	adds	r2, r5, #0
    703a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    703c:	f7ff fdd0 	bl	6be0 <_vfprintf_r>
    7040:	900d      	str	r0, [sp, #52]	; 0x34
    7042:	2800      	cmp	r0, #0
    7044:	db07      	blt.n	7056 <_vfprintf_r+0x476>
    7046:	9809      	ldr	r0, [sp, #36]	; 0x24
    7048:	1c21      	adds	r1, r4, #0
    704a:	f7fd fadb 	bl	4604 <_fflush_r>
    704e:	2800      	cmp	r0, #0
    7050:	d001      	beq.n	7056 <_vfprintf_r+0x476>
    7052:	f001 f99c 	bl	838e <_vfprintf_r+0x17ae>
    7056:	89a2      	ldrh	r2, [r4, #12]
    7058:	2340      	movs	r3, #64	; 0x40
    705a:	421a      	tst	r2, r3
    705c:	d0c0      	beq.n	6fe0 <_vfprintf_r+0x400>
    705e:	4650      	mov	r0, sl
    7060:	8982      	ldrh	r2, [r0, #12]
    7062:	4651      	mov	r1, sl
    7064:	4313      	orrs	r3, r2
    7066:	818b      	strh	r3, [r1, #12]
    7068:	e7ba      	b.n	6fe0 <_vfprintf_r+0x400>
    706a:	f7fd fbbf 	bl	47ec <__sinit>
    706e:	e5d1      	b.n	6c14 <_vfprintf_r+0x34>
    7070:	9f07      	ldr	r7, [sp, #28]
    7072:	9316      	str	r3, [sp, #88]	; 0x58
    7074:	2310      	movs	r3, #16
    7076:	431f      	orrs	r7, r3
    7078:	9707      	str	r7, [sp, #28]
    707a:	9807      	ldr	r0, [sp, #28]
    707c:	0680      	lsls	r0, r0, #26
    707e:	d401      	bmi.n	7084 <_vfprintf_r+0x4a4>
    7080:	f000 fc64 	bl	794c <_vfprintf_r+0xd6c>
    7084:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7086:	2307      	movs	r3, #7
    7088:	3207      	adds	r2, #7
    708a:	439a      	bics	r2, r3
    708c:	2108      	movs	r1, #8
    708e:	1889      	adds	r1, r1, r2
    7090:	910f      	str	r1, [sp, #60]	; 0x3c
    7092:	6810      	ldr	r0, [r2, #0]
    7094:	6851      	ldr	r1, [r2, #4]
    7096:	9010      	str	r0, [sp, #64]	; 0x40
    7098:	9111      	str	r1, [sp, #68]	; 0x44
    709a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    709c:	2a00      	cmp	r2, #0
    709e:	da01      	bge.n	70a4 <_vfprintf_r+0x4c4>
    70a0:	f000 fcc7 	bl	7a32 <_vfprintf_r+0xe52>
    70a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    70a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    70a8:	431a      	orrs	r2, r3
    70aa:	1e53      	subs	r3, r2, #1
    70ac:	419a      	sbcs	r2, r3
    70ae:	2301      	movs	r3, #1
    70b0:	2e00      	cmp	r6, #0
    70b2:	db03      	blt.n	70bc <_vfprintf_r+0x4dc>
    70b4:	9f07      	ldr	r7, [sp, #28]
    70b6:	2180      	movs	r1, #128	; 0x80
    70b8:	438f      	bics	r7, r1
    70ba:	9707      	str	r7, [sp, #28]
    70bc:	2e00      	cmp	r6, #0
    70be:	d102      	bne.n	70c6 <_vfprintf_r+0x4e6>
    70c0:	2a00      	cmp	r2, #0
    70c2:	d100      	bne.n	70c6 <_vfprintf_r+0x4e6>
    70c4:	e25c      	b.n	7580 <_vfprintf_r+0x9a0>
    70c6:	2b01      	cmp	r3, #1
    70c8:	d100      	bne.n	70cc <_vfprintf_r+0x4ec>
    70ca:	e3ce      	b.n	786a <_vfprintf_r+0xc8a>
    70cc:	2b02      	cmp	r3, #2
    70ce:	d100      	bne.n	70d2 <_vfprintf_r+0x4f2>
    70d0:	e3ad      	b.n	782e <_vfprintf_r+0xc4e>
    70d2:	2007      	movs	r0, #7
    70d4:	9413      	str	r4, [sp, #76]	; 0x4c
    70d6:	950a      	str	r5, [sp, #40]	; 0x28
    70d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    70da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    70dc:	4684      	mov	ip, r0
    70de:	1c21      	adds	r1, r4, #0
    70e0:	08d7      	lsrs	r7, r2, #3
    70e2:	075d      	lsls	r5, r3, #29
    70e4:	46b8      	mov	r8, r7
    70e6:	4660      	mov	r0, ip
    70e8:	4010      	ands	r0, r2
    70ea:	1c2f      	adds	r7, r5, #0
    70ec:	4645      	mov	r5, r8
    70ee:	432f      	orrs	r7, r5
    70f0:	3901      	subs	r1, #1
    70f2:	3030      	adds	r0, #48	; 0x30
    70f4:	08dd      	lsrs	r5, r3, #3
    70f6:	7008      	strb	r0, [r1, #0]
    70f8:	1c3a      	adds	r2, r7, #0
    70fa:	1c2b      	adds	r3, r5, #0
    70fc:	432f      	orrs	r7, r5
    70fe:	d1ef      	bne.n	70e0 <_vfprintf_r+0x500>
    7100:	9113      	str	r1, [sp, #76]	; 0x4c
    7102:	9907      	ldr	r1, [sp, #28]
    7104:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7106:	9210      	str	r2, [sp, #64]	; 0x40
    7108:	9311      	str	r3, [sp, #68]	; 0x44
    710a:	07c9      	lsls	r1, r1, #31
    710c:	d501      	bpl.n	7112 <_vfprintf_r+0x532>
    710e:	f000 fc84 	bl	7a1a <_vfprintf_r+0xe3a>
    7112:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7114:	1aa2      	subs	r2, r4, r2
    7116:	920c      	str	r2, [sp, #48]	; 0x30
    7118:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    711a:	920a      	str	r2, [sp, #40]	; 0x28
    711c:	42b2      	cmp	r2, r6
    711e:	da00      	bge.n	7122 <_vfprintf_r+0x542>
    7120:	960a      	str	r6, [sp, #40]	; 0x28
    7122:	464b      	mov	r3, r9
    7124:	9614      	str	r6, [sp, #80]	; 0x50
    7126:	2600      	movs	r6, #0
    7128:	781a      	ldrb	r2, [r3, #0]
    712a:	9619      	str	r6, [sp, #100]	; 0x64
    712c:	2a00      	cmp	r2, #0
    712e:	d100      	bne.n	7132 <_vfprintf_r+0x552>
    7130:	e5f4      	b.n	6d1c <_vfprintf_r+0x13c>
    7132:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    7134:	3701      	adds	r7, #1
    7136:	970a      	str	r7, [sp, #40]	; 0x28
    7138:	e5f0      	b.n	6d1c <_vfprintf_r+0x13c>
    713a:	9807      	ldr	r0, [sp, #28]
    713c:	9316      	str	r3, [sp, #88]	; 0x58
    713e:	4698      	mov	r8, r3
    7140:	0700      	lsls	r0, r0, #28
    7142:	d401      	bmi.n	7148 <_vfprintf_r+0x568>
    7144:	f000 fd93 	bl	7c6e <_vfprintf_r+0x108e>
    7148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    714a:	2307      	movs	r3, #7
    714c:	3207      	adds	r2, #7
    714e:	439a      	bics	r2, r3
    7150:	6813      	ldr	r3, [r2, #0]
    7152:	2108      	movs	r1, #8
    7154:	1889      	adds	r1, r1, r2
    7156:	910f      	str	r1, [sp, #60]	; 0x3c
    7158:	931a      	str	r3, [sp, #104]	; 0x68
    715a:	6852      	ldr	r2, [r2, #4]
    715c:	921b      	str	r2, [sp, #108]	; 0x6c
    715e:	981a      	ldr	r0, [sp, #104]	; 0x68
    7160:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7162:	f003 fcfb 	bl	ab5c <__fpclassifyd>
    7166:	2801      	cmp	r0, #1
    7168:	d001      	beq.n	716e <_vfprintf_r+0x58e>
    716a:	f000 fc93 	bl	7a94 <_vfprintf_r+0xeb4>
    716e:	981a      	ldr	r0, [sp, #104]	; 0x68
    7170:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7172:	4b3e      	ldr	r3, [pc, #248]	; (726c <_vfprintf_r+0x68c>)
    7174:	4a3c      	ldr	r2, [pc, #240]	; (7268 <_vfprintf_r+0x688>)
    7176:	f006 fd51 	bl	dc1c <____aeabi_dcmplt_from_thumb>
    717a:	2800      	cmp	r0, #0
    717c:	d001      	beq.n	7182 <_vfprintf_r+0x5a2>
    717e:	f000 ff36 	bl	7fee <_vfprintf_r+0x140e>
    7182:	4649      	mov	r1, r9
    7184:	780a      	ldrb	r2, [r1, #0]
    7186:	9e16      	ldr	r6, [sp, #88]	; 0x58
    7188:	2e47      	cmp	r6, #71	; 0x47
    718a:	dd01      	ble.n	7190 <_vfprintf_r+0x5b0>
    718c:	f000 ff69 	bl	8062 <_vfprintf_r+0x1482>
    7190:	4f3a      	ldr	r7, [pc, #232]	; (727c <_vfprintf_r+0x69c>)
    7192:	9713      	str	r7, [sp, #76]	; 0x4c
    7194:	9907      	ldr	r1, [sp, #28]
    7196:	2380      	movs	r3, #128	; 0x80
    7198:	4399      	bics	r1, r3
    719a:	2600      	movs	r6, #0
    719c:	3b7d      	subs	r3, #125	; 0x7d
    719e:	9107      	str	r1, [sp, #28]
    71a0:	930a      	str	r3, [sp, #40]	; 0x28
    71a2:	930c      	str	r3, [sp, #48]	; 0x30
    71a4:	9614      	str	r6, [sp, #80]	; 0x50
    71a6:	9619      	str	r6, [sp, #100]	; 0x64
    71a8:	e7c0      	b.n	712c <_vfprintf_r+0x54c>
    71aa:	9907      	ldr	r1, [sp, #28]
    71ac:	4643      	mov	r3, r8
    71ae:	4319      	orrs	r1, r3
    71b0:	9107      	str	r1, [sp, #28]
    71b2:	9f08      	ldr	r7, [sp, #32]
    71b4:	783b      	ldrb	r3, [r7, #0]
    71b6:	e596      	b.n	6ce6 <_vfprintf_r+0x106>
    71b8:	4831      	ldr	r0, [pc, #196]	; (7280 <_vfprintf_r+0x6a0>)
    71ba:	9907      	ldr	r1, [sp, #28]
    71bc:	2220      	movs	r2, #32
    71be:	9316      	str	r3, [sp, #88]	; 0x58
    71c0:	9017      	str	r0, [sp, #92]	; 0x5c
    71c2:	400a      	ands	r2, r1
    71c4:	d100      	bne.n	71c8 <_vfprintf_r+0x5e8>
    71c6:	e132      	b.n	742e <_vfprintf_r+0x84e>
    71c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    71ca:	2307      	movs	r3, #7
    71cc:	3207      	adds	r2, #7
    71ce:	439a      	bics	r2, r3
    71d0:	6810      	ldr	r0, [r2, #0]
    71d2:	6851      	ldr	r1, [r2, #4]
    71d4:	3301      	adds	r3, #1
    71d6:	189b      	adds	r3, r3, r2
    71d8:	9010      	str	r0, [sp, #64]	; 0x40
    71da:	9111      	str	r1, [sp, #68]	; 0x44
    71dc:	930f      	str	r3, [sp, #60]	; 0x3c
    71de:	9a10      	ldr	r2, [sp, #64]	; 0x40
    71e0:	9f11      	ldr	r7, [sp, #68]	; 0x44
    71e2:	433a      	orrs	r2, r7
    71e4:	1e53      	subs	r3, r2, #1
    71e6:	419a      	sbcs	r2, r3
    71e8:	2a00      	cmp	r2, #0
    71ea:	d100      	bne.n	71ee <_vfprintf_r+0x60e>
    71ec:	e3bb      	b.n	7966 <_vfprintf_r+0xd86>
    71ee:	9807      	ldr	r0, [sp, #28]
    71f0:	2101      	movs	r1, #1
    71f2:	4208      	tst	r0, r1
    71f4:	d100      	bne.n	71f8 <_vfprintf_r+0x618>
    71f6:	e3b6      	b.n	7966 <_vfprintf_r+0xd86>
    71f8:	4b22      	ldr	r3, [pc, #136]	; (7284 <_vfprintf_r+0x6a4>)
    71fa:	2230      	movs	r2, #48	; 0x30
    71fc:	446b      	add	r3, sp
    71fe:	701a      	strb	r2, [r3, #0]
    7200:	aa16      	add	r2, sp, #88	; 0x58
    7202:	7812      	ldrb	r2, [r2, #0]
    7204:	705a      	strb	r2, [r3, #1]
    7206:	2302      	movs	r3, #2
    7208:	4318      	orrs	r0, r3
    720a:	9007      	str	r0, [sp, #28]
    720c:	1c0a      	adds	r2, r1, #0
    720e:	2000      	movs	r0, #0
    7210:	464f      	mov	r7, r9
    7212:	7038      	strb	r0, [r7, #0]
    7214:	e74c      	b.n	70b0 <_vfprintf_r+0x4d0>
    7216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7218:	9316      	str	r3, [sp, #88]	; 0x58
    721a:	4b1b      	ldr	r3, [pc, #108]	; (7288 <_vfprintf_r+0x6a8>)
    721c:	1c10      	adds	r0, r2, #0
    721e:	6812      	ldr	r2, [r2, #0]
    7220:	446b      	add	r3, sp
    7222:	3004      	adds	r0, #4
    7224:	701a      	strb	r2, [r3, #0]
    7226:	4649      	mov	r1, r9
    7228:	2200      	movs	r2, #0
    722a:	900f      	str	r0, [sp, #60]	; 0x3c
    722c:	700a      	strb	r2, [r1, #0]
    722e:	e56e      	b.n	6d0e <_vfprintf_r+0x12e>
    7230:	9a07      	ldr	r2, [sp, #28]
    7232:	9316      	str	r3, [sp, #88]	; 0x58
    7234:	2310      	movs	r3, #16
    7236:	431a      	orrs	r2, r3
    7238:	9207      	str	r2, [sp, #28]
    723a:	9f07      	ldr	r7, [sp, #28]
    723c:	2320      	movs	r3, #32
    723e:	403b      	ands	r3, r7
    7240:	d100      	bne.n	7244 <_vfprintf_r+0x664>
    7242:	e3a3      	b.n	798c <_vfprintf_r+0xdac>
    7244:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7246:	2307      	movs	r3, #7
    7248:	3207      	adds	r2, #7
    724a:	439a      	bics	r2, r3
    724c:	2008      	movs	r0, #8
    724e:	1880      	adds	r0, r0, r2
    7250:	900f      	str	r0, [sp, #60]	; 0x3c
    7252:	6810      	ldr	r0, [r2, #0]
    7254:	6851      	ldr	r1, [r2, #4]
    7256:	1c02      	adds	r2, r0, #0
    7258:	430a      	orrs	r2, r1
    725a:	1e53      	subs	r3, r2, #1
    725c:	419a      	sbcs	r2, r3
    725e:	9010      	str	r0, [sp, #64]	; 0x40
    7260:	9111      	str	r1, [sp, #68]	; 0x44
    7262:	2300      	movs	r3, #0
    7264:	e7d3      	b.n	720e <_vfprintf_r+0x62e>
    7266:	46c0      	nop			; (mov r8, r8)
	...
    7270:	000004e4 	.word	0x000004e4
    7274:	00000574 	.word	0x00000574
    7278:	0000047c 	.word	0x0000047c
    727c:	0000e91c 	.word	0x0000e91c
    7280:	0000e92c 	.word	0x0000e92c
    7284:	0000056c 	.word	0x0000056c
    7288:	00000524 	.word	0x00000524
    728c:	9807      	ldr	r0, [sp, #28]
    728e:	9316      	str	r3, [sp, #88]	; 0x58
    7290:	2310      	movs	r3, #16
    7292:	4318      	orrs	r0, r3
    7294:	9007      	str	r0, [sp, #28]
    7296:	9907      	ldr	r1, [sp, #28]
    7298:	2220      	movs	r2, #32
    729a:	400a      	ands	r2, r1
    729c:	d100      	bne.n	72a0 <_vfprintf_r+0x6c0>
    729e:	e364      	b.n	796a <_vfprintf_r+0xd8a>
    72a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    72a2:	2307      	movs	r3, #7
    72a4:	3207      	adds	r2, #7
    72a6:	439a      	bics	r2, r3
    72a8:	6810      	ldr	r0, [r2, #0]
    72aa:	6851      	ldr	r1, [r2, #4]
    72ac:	3301      	adds	r3, #1
    72ae:	189b      	adds	r3, r3, r2
    72b0:	1c02      	adds	r2, r0, #0
    72b2:	430a      	orrs	r2, r1
    72b4:	930f      	str	r3, [sp, #60]	; 0x3c
    72b6:	9010      	str	r0, [sp, #64]	; 0x40
    72b8:	9111      	str	r1, [sp, #68]	; 0x44
    72ba:	1e53      	subs	r3, r2, #1
    72bc:	419a      	sbcs	r2, r3
    72be:	2301      	movs	r3, #1
    72c0:	e7a5      	b.n	720e <_vfprintf_r+0x62e>
    72c2:	9e08      	ldr	r6, [sp, #32]
    72c4:	7833      	ldrb	r3, [r6, #0]
    72c6:	3601      	adds	r6, #1
    72c8:	9608      	str	r6, [sp, #32]
    72ca:	2b2a      	cmp	r3, #42	; 0x2a
    72cc:	d101      	bne.n	72d2 <_vfprintf_r+0x6f2>
    72ce:	f001 f84f 	bl	8370 <_vfprintf_r+0x1790>
    72d2:	1c19      	adds	r1, r3, #0
    72d4:	3930      	subs	r1, #48	; 0x30
    72d6:	2600      	movs	r6, #0
    72d8:	2909      	cmp	r1, #9
    72da:	d900      	bls.n	72de <_vfprintf_r+0x6fe>
    72dc:	e506      	b.n	6cec <_vfprintf_r+0x10c>
    72de:	9b08      	ldr	r3, [sp, #32]
    72e0:	46ac      	mov	ip, r5
    72e2:	00b5      	lsls	r5, r6, #2
    72e4:	19ae      	adds	r6, r5, r6
    72e6:	781d      	ldrb	r5, [r3, #0]
    72e8:	0076      	lsls	r6, r6, #1
    72ea:	1876      	adds	r6, r6, r1
    72ec:	1c29      	adds	r1, r5, #0
    72ee:	3930      	subs	r1, #48	; 0x30
    72f0:	3301      	adds	r3, #1
    72f2:	2909      	cmp	r1, #9
    72f4:	d9f5      	bls.n	72e2 <_vfprintf_r+0x702>
    72f6:	9308      	str	r3, [sp, #32]
    72f8:	1c2b      	adds	r3, r5, #0
    72fa:	4665      	mov	r5, ip
    72fc:	2e00      	cmp	r6, #0
    72fe:	db00      	blt.n	7302 <_vfprintf_r+0x722>
    7300:	e4f4      	b.n	6cec <_vfprintf_r+0x10c>
    7302:	2601      	movs	r6, #1
    7304:	4276      	negs	r6, r6
    7306:	e4f1      	b.n	6cec <_vfprintf_r+0x10c>
    7308:	990f      	ldr	r1, [sp, #60]	; 0x3c
    730a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    730c:	6809      	ldr	r1, [r1, #0]
    730e:	3704      	adds	r7, #4
    7310:	910b      	str	r1, [sp, #44]	; 0x2c
    7312:	2900      	cmp	r1, #0
    7314:	da00      	bge.n	7318 <_vfprintf_r+0x738>
    7316:	e63f      	b.n	6f98 <_vfprintf_r+0x3b8>
    7318:	9908      	ldr	r1, [sp, #32]
    731a:	780b      	ldrb	r3, [r1, #0]
    731c:	970f      	str	r7, [sp, #60]	; 0x3c
    731e:	e4e2      	b.n	6ce6 <_vfprintf_r+0x106>
    7320:	232b      	movs	r3, #43	; 0x2b
    7322:	464f      	mov	r7, r9
    7324:	703b      	strb	r3, [r7, #0]
    7326:	9908      	ldr	r1, [sp, #32]
    7328:	780b      	ldrb	r3, [r1, #0]
    732a:	e4dc      	b.n	6ce6 <_vfprintf_r+0x106>
    732c:	9b07      	ldr	r3, [sp, #28]
    732e:	4657      	mov	r7, sl
    7330:	433b      	orrs	r3, r7
    7332:	9307      	str	r3, [sp, #28]
    7334:	9908      	ldr	r1, [sp, #32]
    7336:	780b      	ldrb	r3, [r1, #0]
    7338:	e4d5      	b.n	6ce6 <_vfprintf_r+0x106>
    733a:	2700      	movs	r7, #0
    733c:	1c19      	adds	r1, r3, #0
    733e:	950a      	str	r5, [sp, #40]	; 0x28
    7340:	970b      	str	r7, [sp, #44]	; 0x2c
    7342:	9d08      	ldr	r5, [sp, #32]
    7344:	3930      	subs	r1, #48	; 0x30
    7346:	1c3b      	adds	r3, r7, #0
    7348:	46b4      	mov	ip, r6
    734a:	009e      	lsls	r6, r3, #2
    734c:	18f3      	adds	r3, r6, r3
    734e:	782e      	ldrb	r6, [r5, #0]
    7350:	005b      	lsls	r3, r3, #1
    7352:	18cb      	adds	r3, r1, r3
    7354:	1c31      	adds	r1, r6, #0
    7356:	3930      	subs	r1, #48	; 0x30
    7358:	3501      	adds	r5, #1
    735a:	2909      	cmp	r1, #9
    735c:	d9f5      	bls.n	734a <_vfprintf_r+0x76a>
    735e:	9508      	str	r5, [sp, #32]
    7360:	930b      	str	r3, [sp, #44]	; 0x2c
    7362:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7364:	1c33      	adds	r3, r6, #0
    7366:	4666      	mov	r6, ip
    7368:	e4c0      	b.n	6cec <_vfprintf_r+0x10c>
    736a:	4649      	mov	r1, r9
    736c:	780b      	ldrb	r3, [r1, #0]
    736e:	2b00      	cmp	r3, #0
    7370:	d001      	beq.n	7376 <_vfprintf_r+0x796>
    7372:	f000 fc6a 	bl	7c4a <_vfprintf_r+0x106a>
    7376:	7008      	strb	r0, [r1, #0]
    7378:	9f08      	ldr	r7, [sp, #32]
    737a:	783b      	ldrb	r3, [r7, #0]
    737c:	e4b3      	b.n	6ce6 <_vfprintf_r+0x106>
    737e:	9907      	ldr	r1, [sp, #28]
    7380:	2301      	movs	r3, #1
    7382:	4319      	orrs	r1, r3
    7384:	9107      	str	r1, [sp, #28]
    7386:	9f08      	ldr	r7, [sp, #32]
    7388:	783b      	ldrb	r3, [r7, #0]
    738a:	e4ac      	b.n	6ce6 <_vfprintf_r+0x106>
    738c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    738e:	1c1a      	adds	r2, r3, #0
    7390:	3204      	adds	r2, #4
    7392:	681b      	ldr	r3, [r3, #0]
    7394:	920f      	str	r2, [sp, #60]	; 0x3c
    7396:	4ade      	ldr	r2, [pc, #888]	; (7710 <_vfprintf_r+0xb30>)
    7398:	2130      	movs	r1, #48	; 0x30
    739a:	446a      	add	r2, sp
    739c:	9310      	str	r3, [sp, #64]	; 0x40
    739e:	2078      	movs	r0, #120	; 0x78
    73a0:	7011      	strb	r1, [r2, #0]
    73a2:	7050      	strb	r0, [r2, #1]
    73a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    73a6:	2300      	movs	r3, #0
    73a8:	9f07      	ldr	r7, [sp, #28]
    73aa:	9311      	str	r3, [sp, #68]	; 0x44
    73ac:	1e51      	subs	r1, r2, #1
    73ae:	418a      	sbcs	r2, r1
    73b0:	3302      	adds	r3, #2
    73b2:	49d8      	ldr	r1, [pc, #864]	; (7714 <_vfprintf_r+0xb34>)
    73b4:	431f      	orrs	r7, r3
    73b6:	9707      	str	r7, [sp, #28]
    73b8:	9117      	str	r1, [sp, #92]	; 0x5c
    73ba:	9016      	str	r0, [sp, #88]	; 0x58
    73bc:	e727      	b.n	720e <_vfprintf_r+0x62e>
    73be:	9b07      	ldr	r3, [sp, #28]
    73c0:	4303      	orrs	r3, r0
    73c2:	9307      	str	r3, [sp, #28]
    73c4:	9f08      	ldr	r7, [sp, #32]
    73c6:	783b      	ldrb	r3, [r7, #0]
    73c8:	e48d      	b.n	6ce6 <_vfprintf_r+0x106>
    73ca:	9316      	str	r3, [sp, #88]	; 0x58
    73cc:	464a      	mov	r2, r9
    73ce:	2300      	movs	r3, #0
    73d0:	7013      	strb	r3, [r2, #0]
    73d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    73d4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    73d6:	6800      	ldr	r0, [r0, #0]
    73d8:	3704      	adds	r7, #4
    73da:	9013      	str	r0, [sp, #76]	; 0x4c
    73dc:	2800      	cmp	r0, #0
    73de:	d101      	bne.n	73e4 <_vfprintf_r+0x804>
    73e0:	f000 fec8 	bl	8174 <_vfprintf_r+0x1594>
    73e4:	2e00      	cmp	r6, #0
    73e6:	da01      	bge.n	73ec <_vfprintf_r+0x80c>
    73e8:	f000 fe6e 	bl	80c8 <_vfprintf_r+0x14e8>
    73ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    73ee:	2100      	movs	r1, #0
    73f0:	1c32      	adds	r2, r6, #0
    73f2:	f002 fbc3 	bl	9b7c <memchr>
    73f6:	2800      	cmp	r0, #0
    73f8:	d101      	bne.n	73fe <_vfprintf_r+0x81e>
    73fa:	f000 ff3b 	bl	8274 <_vfprintf_r+0x1694>
    73fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7400:	1a40      	subs	r0, r0, r1
    7402:	900c      	str	r0, [sp, #48]	; 0x30
    7404:	42b0      	cmp	r0, r6
    7406:	dc01      	bgt.n	740c <_vfprintf_r+0x82c>
    7408:	f000 fda4 	bl	7f54 <_vfprintf_r+0x1374>
    740c:	960a      	str	r6, [sp, #40]	; 0x28
    740e:	464b      	mov	r3, r9
    7410:	960c      	str	r6, [sp, #48]	; 0x30
    7412:	2600      	movs	r6, #0
    7414:	781a      	ldrb	r2, [r3, #0]
    7416:	970f      	str	r7, [sp, #60]	; 0x3c
    7418:	9614      	str	r6, [sp, #80]	; 0x50
    741a:	9619      	str	r6, [sp, #100]	; 0x64
    741c:	e686      	b.n	712c <_vfprintf_r+0x54c>
    741e:	4fbd      	ldr	r7, [pc, #756]	; (7714 <_vfprintf_r+0xb34>)
    7420:	9907      	ldr	r1, [sp, #28]
    7422:	2220      	movs	r2, #32
    7424:	9316      	str	r3, [sp, #88]	; 0x58
    7426:	9717      	str	r7, [sp, #92]	; 0x5c
    7428:	400a      	ands	r2, r1
    742a:	d000      	beq.n	742e <_vfprintf_r+0x84e>
    742c:	e6cc      	b.n	71c8 <_vfprintf_r+0x5e8>
    742e:	9907      	ldr	r1, [sp, #28]
    7430:	2310      	movs	r3, #16
    7432:	4019      	ands	r1, r3
    7434:	d101      	bne.n	743a <_vfprintf_r+0x85a>
    7436:	f000 fc0c 	bl	7c52 <_vfprintf_r+0x1072>
    743a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    743c:	6809      	ldr	r1, [r1, #0]
    743e:	9211      	str	r2, [sp, #68]	; 0x44
    7440:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7442:	3204      	adds	r2, #4
    7444:	9110      	str	r1, [sp, #64]	; 0x40
    7446:	920f      	str	r2, [sp, #60]	; 0x3c
    7448:	e6c9      	b.n	71de <_vfprintf_r+0x5fe>
    744a:	9908      	ldr	r1, [sp, #32]
    744c:	780b      	ldrb	r3, [r1, #0]
    744e:	2b6c      	cmp	r3, #108	; 0x6c
    7450:	d101      	bne.n	7456 <_vfprintf_r+0x876>
    7452:	f000 fd77 	bl	7f44 <_vfprintf_r+0x1364>
    7456:	9f07      	ldr	r7, [sp, #28]
    7458:	2110      	movs	r1, #16
    745a:	430f      	orrs	r7, r1
    745c:	9707      	str	r7, [sp, #28]
    745e:	e442      	b.n	6ce6 <_vfprintf_r+0x106>
    7460:	9907      	ldr	r1, [sp, #28]
    7462:	0689      	lsls	r1, r1, #26
    7464:	d401      	bmi.n	746a <_vfprintf_r+0x88a>
    7466:	f000 fc0f 	bl	7c88 <_vfprintf_r+0x10a8>
    746a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    746c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    746e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7470:	6813      	ldr	r3, [r2, #0]
    7472:	3704      	adds	r7, #4
    7474:	17f2      	asrs	r2, r6, #31
    7476:	601e      	str	r6, [r3, #0]
    7478:	605a      	str	r2, [r3, #4]
    747a:	970f      	str	r7, [sp, #60]	; 0x3c
    747c:	f7ff fbfa 	bl	6c74 <_vfprintf_r+0x94>
    7480:	9907      	ldr	r1, [sp, #28]
    7482:	2340      	movs	r3, #64	; 0x40
    7484:	4319      	orrs	r1, r3
    7486:	9107      	str	r1, [sp, #28]
    7488:	9f08      	ldr	r7, [sp, #32]
    748a:	783b      	ldrb	r3, [r7, #0]
    748c:	e42b      	b.n	6ce6 <_vfprintf_r+0x106>
    748e:	9316      	str	r3, [sp, #88]	; 0x58
    7490:	e5f3      	b.n	707a <_vfprintf_r+0x49a>
    7492:	9316      	str	r3, [sp, #88]	; 0x58
    7494:	e6d1      	b.n	723a <_vfprintf_r+0x65a>
    7496:	9316      	str	r3, [sp, #88]	; 0x58
    7498:	e6fd      	b.n	7296 <_vfprintf_r+0x6b6>
    749a:	68a3      	ldr	r3, [r4, #8]
    749c:	46da      	mov	sl, fp
    749e:	2b00      	cmp	r3, #0
    74a0:	d100      	bne.n	74a4 <_vfprintf_r+0x8c4>
    74a2:	e596      	b.n	6fd2 <_vfprintf_r+0x3f2>
    74a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    74a6:	4659      	mov	r1, fp
    74a8:	1c22      	adds	r2, r4, #0
    74aa:	f004 f9d9 	bl	b860 <__sprint_r>
    74ae:	e590      	b.n	6fd2 <_vfprintf_r+0x3f2>
    74b0:	9e16      	ldr	r6, [sp, #88]	; 0x58
    74b2:	2e65      	cmp	r6, #101	; 0x65
    74b4:	dc00      	bgt.n	74b8 <_vfprintf_r+0x8d8>
    74b6:	e0c7      	b.n	7648 <_vfprintf_r+0xa68>
    74b8:	981a      	ldr	r0, [sp, #104]	; 0x68
    74ba:	991b      	ldr	r1, [sp, #108]	; 0x6c
    74bc:	4b93      	ldr	r3, [pc, #588]	; (770c <_vfprintf_r+0xb2c>)
    74be:	4a92      	ldr	r2, [pc, #584]	; (7708 <_vfprintf_r+0xb28>)
    74c0:	f006 fb9e 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    74c4:	2800      	cmp	r0, #0
    74c6:	d100      	bne.n	74ca <_vfprintf_r+0x8ea>
    74c8:	e158      	b.n	777c <_vfprintf_r+0xb9c>
    74ca:	4b93      	ldr	r3, [pc, #588]	; (7718 <_vfprintf_r+0xb38>)
    74cc:	603b      	str	r3, [r7, #0]
    74ce:	2301      	movs	r3, #1
    74d0:	607b      	str	r3, [r7, #4]
    74d2:	68a3      	ldr	r3, [r4, #8]
    74d4:	3301      	adds	r3, #1
    74d6:	60a3      	str	r3, [r4, #8]
    74d8:	6863      	ldr	r3, [r4, #4]
    74da:	3301      	adds	r3, #1
    74dc:	6063      	str	r3, [r4, #4]
    74de:	3708      	adds	r7, #8
    74e0:	2b07      	cmp	r3, #7
    74e2:	dd01      	ble.n	74e8 <_vfprintf_r+0x908>
    74e4:	f000 fcad 	bl	7e42 <_vfprintf_r+0x1262>
    74e8:	20ad      	movs	r0, #173	; 0xad
    74ea:	00c0      	lsls	r0, r0, #3
    74ec:	4468      	add	r0, sp
    74ee:	6803      	ldr	r3, [r0, #0]
    74f0:	990e      	ldr	r1, [sp, #56]	; 0x38
    74f2:	428b      	cmp	r3, r1
    74f4:	db03      	blt.n	74fe <_vfprintf_r+0x91e>
    74f6:	9a07      	ldr	r2, [sp, #28]
    74f8:	07d2      	lsls	r2, r2, #31
    74fa:	d400      	bmi.n	74fe <_vfprintf_r+0x91e>
    74fc:	e4de      	b.n	6ebc <_vfprintf_r+0x2dc>
    74fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7500:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    7502:	603b      	str	r3, [r7, #0]
    7504:	68a3      	ldr	r3, [r4, #8]
    7506:	195b      	adds	r3, r3, r5
    7508:	607d      	str	r5, [r7, #4]
    750a:	60a3      	str	r3, [r4, #8]
    750c:	6863      	ldr	r3, [r4, #4]
    750e:	3301      	adds	r3, #1
    7510:	6063      	str	r3, [r4, #4]
    7512:	2b07      	cmp	r3, #7
    7514:	dd01      	ble.n	751a <_vfprintf_r+0x93a>
    7516:	f000 fda8 	bl	806a <_vfprintf_r+0x148a>
    751a:	1c3b      	adds	r3, r7, #0
    751c:	3308      	adds	r3, #8
    751e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7520:	3d01      	subs	r5, #1
    7522:	2d00      	cmp	r5, #0
    7524:	dc01      	bgt.n	752a <_vfprintf_r+0x94a>
    7526:	f000 fc7e 	bl	7e26 <_vfprintf_r+0x1246>
    752a:	2d10      	cmp	r5, #16
    752c:	dc01      	bgt.n	7532 <_vfprintf_r+0x952>
    752e:	f000 ff05 	bl	833c <_vfprintf_r+0x175c>
    7532:	4e7a      	ldr	r6, [pc, #488]	; (771c <_vfprintf_r+0xb3c>)
    7534:	2710      	movs	r7, #16
    7536:	46b0      	mov	r8, r6
    7538:	1c3e      	adds	r6, r7, #0
    753a:	46b9      	mov	r9, r7
    753c:	4446      	add	r6, r8
    753e:	465f      	mov	r7, fp
    7540:	e006      	b.n	7550 <_vfprintf_r+0x970>
    7542:	3308      	adds	r3, #8
    7544:	1c1a      	adds	r2, r3, #0
    7546:	3208      	adds	r2, #8
    7548:	3d10      	subs	r5, #16
    754a:	2d10      	cmp	r5, #16
    754c:	dc00      	bgt.n	7550 <_vfprintf_r+0x970>
    754e:	e3e0      	b.n	7d12 <_vfprintf_r+0x1132>
    7550:	68a2      	ldr	r2, [r4, #8]
    7552:	4649      	mov	r1, r9
    7554:	3210      	adds	r2, #16
    7556:	601e      	str	r6, [r3, #0]
    7558:	6059      	str	r1, [r3, #4]
    755a:	60a2      	str	r2, [r4, #8]
    755c:	6862      	ldr	r2, [r4, #4]
    755e:	3201      	adds	r2, #1
    7560:	6062      	str	r2, [r4, #4]
    7562:	2a07      	cmp	r2, #7
    7564:	dded      	ble.n	7542 <_vfprintf_r+0x962>
    7566:	9809      	ldr	r0, [sp, #36]	; 0x24
    7568:	1c39      	adds	r1, r7, #0
    756a:	1c22      	adds	r2, r4, #0
    756c:	f004 f978 	bl	b860 <__sprint_r>
    7570:	2800      	cmp	r0, #0
    7572:	d000      	beq.n	7576 <_vfprintf_r+0x996>
    7574:	e0dc      	b.n	7730 <_vfprintf_r+0xb50>
    7576:	4a6a      	ldr	r2, [pc, #424]	; (7720 <_vfprintf_r+0xb40>)
    7578:	4b6a      	ldr	r3, [pc, #424]	; (7724 <_vfprintf_r+0xb44>)
    757a:	446a      	add	r2, sp
    757c:	446b      	add	r3, sp
    757e:	e7e3      	b.n	7548 <_vfprintf_r+0x968>
    7580:	2b00      	cmp	r3, #0
    7582:	d000      	beq.n	7586 <_vfprintf_r+0x9a6>
    7584:	e0bd      	b.n	7702 <_vfprintf_r+0xb22>
    7586:	9807      	ldr	r0, [sp, #28]
    7588:	07c0      	lsls	r0, r0, #31
    758a:	d400      	bmi.n	758e <_vfprintf_r+0x9ae>
    758c:	e14c      	b.n	7828 <_vfprintf_r+0xc48>
    758e:	4b66      	ldr	r3, [pc, #408]	; (7728 <_vfprintf_r+0xb48>)
    7590:	2127      	movs	r1, #39	; 0x27
    7592:	446b      	add	r3, sp
    7594:	2230      	movs	r2, #48	; 0x30
    7596:	545a      	strb	r2, [r3, r1]
    7598:	4b64      	ldr	r3, [pc, #400]	; (772c <_vfprintf_r+0xb4c>)
    759a:	446b      	add	r3, sp
    759c:	1ae1      	subs	r1, r4, r3
    759e:	910c      	str	r1, [sp, #48]	; 0x30
    75a0:	9313      	str	r3, [sp, #76]	; 0x4c
    75a2:	e5b9      	b.n	7118 <_vfprintf_r+0x538>
    75a4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    75a6:	980a      	ldr	r0, [sp, #40]	; 0x28
    75a8:	1a3e      	subs	r6, r7, r0
    75aa:	2e00      	cmp	r6, #0
    75ac:	dc00      	bgt.n	75b0 <_vfprintf_r+0x9d0>
    75ae:	e429      	b.n	6e04 <_vfprintf_r+0x224>
    75b0:	2e10      	cmp	r6, #16
    75b2:	dc01      	bgt.n	75b8 <_vfprintf_r+0x9d8>
    75b4:	f000 fe58 	bl	8268 <_vfprintf_r+0x1688>
    75b8:	4a58      	ldr	r2, [pc, #352]	; (771c <_vfprintf_r+0xb3c>)
    75ba:	1c2b      	adds	r3, r5, #0
    75bc:	2510      	movs	r5, #16
    75be:	1c2f      	adds	r7, r5, #0
    75c0:	4690      	mov	r8, r2
    75c2:	46a9      	mov	r9, r5
    75c4:	4447      	add	r7, r8
    75c6:	465d      	mov	r5, fp
    75c8:	e005      	b.n	75d6 <_vfprintf_r+0x9f6>
    75ca:	3308      	adds	r3, #8
    75cc:	1c1a      	adds	r2, r3, #0
    75ce:	3e10      	subs	r6, #16
    75d0:	3208      	adds	r2, #8
    75d2:	2e10      	cmp	r6, #16
    75d4:	dd19      	ble.n	760a <_vfprintf_r+0xa2a>
    75d6:	68a2      	ldr	r2, [r4, #8]
    75d8:	4648      	mov	r0, r9
    75da:	3210      	adds	r2, #16
    75dc:	601f      	str	r7, [r3, #0]
    75de:	6058      	str	r0, [r3, #4]
    75e0:	60a2      	str	r2, [r4, #8]
    75e2:	6862      	ldr	r2, [r4, #4]
    75e4:	3201      	adds	r2, #1
    75e6:	6062      	str	r2, [r4, #4]
    75e8:	2a07      	cmp	r2, #7
    75ea:	ddee      	ble.n	75ca <_vfprintf_r+0x9ea>
    75ec:	9809      	ldr	r0, [sp, #36]	; 0x24
    75ee:	1c29      	adds	r1, r5, #0
    75f0:	1c22      	adds	r2, r4, #0
    75f2:	f004 f935 	bl	b860 <__sprint_r>
    75f6:	2800      	cmp	r0, #0
    75f8:	d000      	beq.n	75fc <_vfprintf_r+0xa1c>
    75fa:	e1d7      	b.n	79ac <_vfprintf_r+0xdcc>
    75fc:	4a48      	ldr	r2, [pc, #288]	; (7720 <_vfprintf_r+0xb40>)
    75fe:	4b49      	ldr	r3, [pc, #292]	; (7724 <_vfprintf_r+0xb44>)
    7600:	3e10      	subs	r6, #16
    7602:	446a      	add	r2, sp
    7604:	446b      	add	r3, sp
    7606:	2e10      	cmp	r6, #16
    7608:	dce5      	bgt.n	75d6 <_vfprintf_r+0x9f6>
    760a:	46ab      	mov	fp, r5
    760c:	1c15      	adds	r5, r2, #0
    760e:	2110      	movs	r1, #16
    7610:	1c0a      	adds	r2, r1, #0
    7612:	4442      	add	r2, r8
    7614:	601a      	str	r2, [r3, #0]
    7616:	605e      	str	r6, [r3, #4]
    7618:	68a3      	ldr	r3, [r4, #8]
    761a:	18f3      	adds	r3, r6, r3
    761c:	60a3      	str	r3, [r4, #8]
    761e:	6863      	ldr	r3, [r4, #4]
    7620:	3301      	adds	r3, #1
    7622:	6063      	str	r3, [r4, #4]
    7624:	2b07      	cmp	r3, #7
    7626:	dc01      	bgt.n	762c <_vfprintf_r+0xa4c>
    7628:	f7ff fbec 	bl	6e04 <_vfprintf_r+0x224>
    762c:	9809      	ldr	r0, [sp, #36]	; 0x24
    762e:	4659      	mov	r1, fp
    7630:	1c22      	adds	r2, r4, #0
    7632:	f004 f915 	bl	b860 <__sprint_r>
    7636:	2800      	cmp	r0, #0
    7638:	d000      	beq.n	763c <_vfprintf_r+0xa5c>
    763a:	e4c9      	b.n	6fd0 <_vfprintf_r+0x3f0>
    763c:	4d39      	ldr	r5, [pc, #228]	; (7724 <_vfprintf_r+0xb44>)
    763e:	446d      	add	r5, sp
    7640:	f7ff fbe0 	bl	6e04 <_vfprintf_r+0x224>
    7644:	1c2f      	adds	r7, r5, #0
    7646:	e426      	b.n	6e96 <_vfprintf_r+0x2b6>
    7648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    764a:	2a01      	cmp	r2, #1
    764c:	dc00      	bgt.n	7650 <_vfprintf_r+0xa70>
    764e:	e1b0      	b.n	79b2 <_vfprintf_r+0xdd2>
    7650:	2301      	movs	r3, #1
    7652:	607b      	str	r3, [r7, #4]
    7654:	68a3      	ldr	r3, [r4, #8]
    7656:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    7658:	3301      	adds	r3, #1
    765a:	603e      	str	r6, [r7, #0]
    765c:	60a3      	str	r3, [r4, #8]
    765e:	6863      	ldr	r3, [r4, #4]
    7660:	3301      	adds	r3, #1
    7662:	6063      	str	r3, [r4, #4]
    7664:	2b07      	cmp	r3, #7
    7666:	dd00      	ble.n	766a <_vfprintf_r+0xa8a>
    7668:	e1c9      	b.n	79fe <_vfprintf_r+0xe1e>
    766a:	3708      	adds	r7, #8
    766c:	1c3d      	adds	r5, r7, #0
    766e:	3508      	adds	r5, #8
    7670:	991c      	ldr	r1, [sp, #112]	; 0x70
    7672:	68a3      	ldr	r3, [r4, #8]
    7674:	9818      	ldr	r0, [sp, #96]	; 0x60
    7676:	185b      	adds	r3, r3, r1
    7678:	6038      	str	r0, [r7, #0]
    767a:	6079      	str	r1, [r7, #4]
    767c:	60a3      	str	r3, [r4, #8]
    767e:	6863      	ldr	r3, [r4, #4]
    7680:	3301      	adds	r3, #1
    7682:	6063      	str	r3, [r4, #4]
    7684:	2b07      	cmp	r3, #7
    7686:	dd00      	ble.n	768a <_vfprintf_r+0xaaa>
    7688:	e1aa      	b.n	79e0 <_vfprintf_r+0xe00>
    768a:	2208      	movs	r2, #8
    768c:	1952      	adds	r2, r2, r5
    768e:	4691      	mov	r9, r2
    7690:	981a      	ldr	r0, [sp, #104]	; 0x68
    7692:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7694:	4b1d      	ldr	r3, [pc, #116]	; (770c <_vfprintf_r+0xb2c>)
    7696:	4a1c      	ldr	r2, [pc, #112]	; (7708 <_vfprintf_r+0xb28>)
    7698:	f006 fab2 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    769c:	2800      	cmp	r0, #0
    769e:	d000      	beq.n	76a2 <_vfprintf_r+0xac2>
    76a0:	e124      	b.n	78ec <_vfprintf_r+0xd0c>
    76a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    76a4:	3301      	adds	r3, #1
    76a6:	602b      	str	r3, [r5, #0]
    76a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    76aa:	68a2      	ldr	r2, [r4, #8]
    76ac:	3b01      	subs	r3, #1
    76ae:	606b      	str	r3, [r5, #4]
    76b0:	189b      	adds	r3, r3, r2
    76b2:	60a3      	str	r3, [r4, #8]
    76b4:	6863      	ldr	r3, [r4, #4]
    76b6:	3301      	adds	r3, #1
    76b8:	6063      	str	r3, [r4, #4]
    76ba:	2b07      	cmp	r3, #7
    76bc:	dd01      	ble.n	76c2 <_vfprintf_r+0xae2>
    76be:	f000 fc31 	bl	7f24 <_vfprintf_r+0x1344>
    76c2:	2508      	movs	r5, #8
    76c4:	1c2f      	adds	r7, r5, #0
    76c6:	444f      	add	r7, r9
    76c8:	23ab      	movs	r3, #171	; 0xab
    76ca:	00db      	lsls	r3, r3, #3
    76cc:	446b      	add	r3, sp
    76ce:	464e      	mov	r6, r9
    76d0:	981d      	ldr	r0, [sp, #116]	; 0x74
    76d2:	6033      	str	r3, [r6, #0]
    76d4:	68a3      	ldr	r3, [r4, #8]
    76d6:	6070      	str	r0, [r6, #4]
    76d8:	181b      	adds	r3, r3, r0
    76da:	60a3      	str	r3, [r4, #8]
    76dc:	6863      	ldr	r3, [r4, #4]
    76de:	3301      	adds	r3, #1
    76e0:	6063      	str	r3, [r4, #4]
    76e2:	2b07      	cmp	r3, #7
    76e4:	dc01      	bgt.n	76ea <_vfprintf_r+0xb0a>
    76e6:	f7ff fbe9 	bl	6ebc <_vfprintf_r+0x2dc>
    76ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    76ec:	4659      	mov	r1, fp
    76ee:	1c22      	adds	r2, r4, #0
    76f0:	f004 f8b6 	bl	b860 <__sprint_r>
    76f4:	2800      	cmp	r0, #0
    76f6:	d000      	beq.n	76fa <_vfprintf_r+0xb1a>
    76f8:	e46a      	b.n	6fd0 <_vfprintf_r+0x3f0>
    76fa:	4f0a      	ldr	r7, [pc, #40]	; (7724 <_vfprintf_r+0xb44>)
    76fc:	446f      	add	r7, sp
    76fe:	f7ff fbdd 	bl	6ebc <_vfprintf_r+0x2dc>
    7702:	920c      	str	r2, [sp, #48]	; 0x30
    7704:	9413      	str	r4, [sp, #76]	; 0x4c
    7706:	e507      	b.n	7118 <_vfprintf_r+0x538>
	...
    7710:	0000056c 	.word	0x0000056c
    7714:	0000e940 	.word	0x0000e940
    7718:	0000e95c 	.word	0x0000e95c
    771c:	0000e064 	.word	0x0000e064
    7720:	000004ec 	.word	0x000004ec
    7724:	000004e4 	.word	0x000004e4
    7728:	00000524 	.word	0x00000524
    772c:	0000054b 	.word	0x0000054b
    7730:	46ba      	mov	sl, r7
    7732:	e44e      	b.n	6fd2 <_vfprintf_r+0x3f2>
    7734:	9809      	ldr	r0, [sp, #36]	; 0x24
    7736:	4659      	mov	r1, fp
    7738:	1c22      	adds	r2, r4, #0
    773a:	f004 f891 	bl	b860 <__sprint_r>
    773e:	2800      	cmp	r0, #0
    7740:	d000      	beq.n	7744 <_vfprintf_r+0xb64>
    7742:	e445      	b.n	6fd0 <_vfprintf_r+0x3f0>
    7744:	4fce      	ldr	r7, [pc, #824]	; (7a80 <_vfprintf_r+0xea0>)
    7746:	446f      	add	r7, sp
    7748:	f7ff fba5 	bl	6e96 <_vfprintf_r+0x2b6>
    774c:	9809      	ldr	r0, [sp, #36]	; 0x24
    774e:	4659      	mov	r1, fp
    7750:	1c22      	adds	r2, r4, #0
    7752:	f004 f885 	bl	b860 <__sprint_r>
    7756:	2800      	cmp	r0, #0
    7758:	d000      	beq.n	775c <_vfprintf_r+0xb7c>
    775a:	e439      	b.n	6fd0 <_vfprintf_r+0x3f0>
    775c:	4dc8      	ldr	r5, [pc, #800]	; (7a80 <_vfprintf_r+0xea0>)
    775e:	446d      	add	r5, sp
    7760:	f7ff fb4c 	bl	6dfc <_vfprintf_r+0x21c>
    7764:	9809      	ldr	r0, [sp, #36]	; 0x24
    7766:	4659      	mov	r1, fp
    7768:	1c22      	adds	r2, r4, #0
    776a:	f004 f879 	bl	b860 <__sprint_r>
    776e:	2800      	cmp	r0, #0
    7770:	d000      	beq.n	7774 <_vfprintf_r+0xb94>
    7772:	e42d      	b.n	6fd0 <_vfprintf_r+0x3f0>
    7774:	4dc2      	ldr	r5, [pc, #776]	; (7a80 <_vfprintf_r+0xea0>)
    7776:	446d      	add	r5, sp
    7778:	f7ff fb2d 	bl	6dd6 <_vfprintf_r+0x1f6>
    777c:	20ad      	movs	r0, #173	; 0xad
    777e:	00c0      	lsls	r0, r0, #3
    7780:	4468      	add	r0, sp
    7782:	6805      	ldr	r5, [r0, #0]
    7784:	2d00      	cmp	r5, #0
    7786:	dc00      	bgt.n	778a <_vfprintf_r+0xbaa>
    7788:	e37a      	b.n	7e80 <_vfprintf_r+0x12a0>
    778a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    778c:	46b2      	mov	sl, r6
    778e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7790:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7792:	44b2      	add	sl, r6
    7794:	4650      	mov	r0, sl
    7796:	9a19      	ldr	r2, [sp, #100]	; 0x64
    7798:	1a45      	subs	r5, r0, r1
    779a:	4295      	cmp	r5, r2
    779c:	dd00      	ble.n	77a0 <_vfprintf_r+0xbc0>
    779e:	1c15      	adds	r5, r2, #0
    77a0:	2d00      	cmp	r5, #0
    77a2:	dd0d      	ble.n	77c0 <_vfprintf_r+0xbe0>
    77a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    77a6:	603b      	str	r3, [r7, #0]
    77a8:	68a3      	ldr	r3, [r4, #8]
    77aa:	18eb      	adds	r3, r5, r3
    77ac:	607d      	str	r5, [r7, #4]
    77ae:	60a3      	str	r3, [r4, #8]
    77b0:	6863      	ldr	r3, [r4, #4]
    77b2:	3301      	adds	r3, #1
    77b4:	6063      	str	r3, [r4, #4]
    77b6:	3708      	adds	r7, #8
    77b8:	2b07      	cmp	r3, #7
    77ba:	dd01      	ble.n	77c0 <_vfprintf_r+0xbe0>
    77bc:	f000 fc9a 	bl	80f4 <_vfprintf_r+0x1514>
    77c0:	43eb      	mvns	r3, r5
    77c2:	17db      	asrs	r3, r3, #31
    77c4:	9e19      	ldr	r6, [sp, #100]	; 0x64
    77c6:	401d      	ands	r5, r3
    77c8:	1b75      	subs	r5, r6, r5
    77ca:	2d00      	cmp	r5, #0
    77cc:	dc01      	bgt.n	77d2 <_vfprintf_r+0xbf2>
    77ce:	f000 fc59 	bl	8084 <_vfprintf_r+0x14a4>
    77d2:	2d10      	cmp	r5, #16
    77d4:	dc01      	bgt.n	77da <_vfprintf_r+0xbfa>
    77d6:	f000 fdb6 	bl	8346 <_vfprintf_r+0x1766>
    77da:	48aa      	ldr	r0, [pc, #680]	; (7a84 <_vfprintf_r+0xea4>)
    77dc:	2110      	movs	r1, #16
    77de:	4680      	mov	r8, r0
    77e0:	1c0e      	adds	r6, r1, #0
    77e2:	1c3a      	adds	r2, r7, #0
    77e4:	4446      	add	r6, r8
    77e6:	4689      	mov	r9, r1
    77e8:	465f      	mov	r7, fp
    77ea:	e006      	b.n	77fa <_vfprintf_r+0xc1a>
    77ec:	3208      	adds	r2, #8
    77ee:	1c13      	adds	r3, r2, #0
    77f0:	3308      	adds	r3, #8
    77f2:	3d10      	subs	r5, #16
    77f4:	2d10      	cmp	r5, #16
    77f6:	dc00      	bgt.n	77fa <_vfprintf_r+0xc1a>
    77f8:	e295      	b.n	7d26 <_vfprintf_r+0x1146>
    77fa:	464b      	mov	r3, r9
    77fc:	6053      	str	r3, [r2, #4]
    77fe:	68a3      	ldr	r3, [r4, #8]
    7800:	3310      	adds	r3, #16
    7802:	6016      	str	r6, [r2, #0]
    7804:	60a3      	str	r3, [r4, #8]
    7806:	6863      	ldr	r3, [r4, #4]
    7808:	3301      	adds	r3, #1
    780a:	6063      	str	r3, [r4, #4]
    780c:	2b07      	cmp	r3, #7
    780e:	dded      	ble.n	77ec <_vfprintf_r+0xc0c>
    7810:	9809      	ldr	r0, [sp, #36]	; 0x24
    7812:	1c39      	adds	r1, r7, #0
    7814:	1c22      	adds	r2, r4, #0
    7816:	f004 f823 	bl	b860 <__sprint_r>
    781a:	2800      	cmp	r0, #0
    781c:	d188      	bne.n	7730 <_vfprintf_r+0xb50>
    781e:	4b9a      	ldr	r3, [pc, #616]	; (7a88 <_vfprintf_r+0xea8>)
    7820:	4a97      	ldr	r2, [pc, #604]	; (7a80 <_vfprintf_r+0xea0>)
    7822:	446b      	add	r3, sp
    7824:	446a      	add	r2, sp
    7826:	e7e4      	b.n	77f2 <_vfprintf_r+0xc12>
    7828:	930c      	str	r3, [sp, #48]	; 0x30
    782a:	9413      	str	r4, [sp, #76]	; 0x4c
    782c:	e474      	b.n	7118 <_vfprintf_r+0x538>
    782e:	9413      	str	r4, [sp, #76]	; 0x4c
    7830:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7832:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7834:	270f      	movs	r7, #15
    7836:	1c21      	adds	r1, r4, #0
    7838:	46ac      	mov	ip, r5
    783a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    783c:	1c10      	adds	r0, r2, #0
    783e:	4038      	ands	r0, r7
    7840:	5c28      	ldrb	r0, [r5, r0]
    7842:	3901      	subs	r1, #1
    7844:	0915      	lsrs	r5, r2, #4
    7846:	46a8      	mov	r8, r5
    7848:	7008      	strb	r0, [r1, #0]
    784a:	0718      	lsls	r0, r3, #28
    784c:	1c05      	adds	r5, r0, #0
    784e:	4640      	mov	r0, r8
    7850:	4305      	orrs	r5, r0
    7852:	0918      	lsrs	r0, r3, #4
    7854:	1c2a      	adds	r2, r5, #0
    7856:	1c03      	adds	r3, r0, #0
    7858:	4305      	orrs	r5, r0
    785a:	d1ee      	bne.n	783a <_vfprintf_r+0xc5a>
    785c:	1a67      	subs	r7, r4, r1
    785e:	9113      	str	r1, [sp, #76]	; 0x4c
    7860:	4665      	mov	r5, ip
    7862:	9210      	str	r2, [sp, #64]	; 0x40
    7864:	9311      	str	r3, [sp, #68]	; 0x44
    7866:	970c      	str	r7, [sp, #48]	; 0x30
    7868:	e456      	b.n	7118 <_vfprintf_r+0x538>
    786a:	9911      	ldr	r1, [sp, #68]	; 0x44
    786c:	2900      	cmp	r1, #0
    786e:	d102      	bne.n	7876 <_vfprintf_r+0xc96>
    7870:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7872:	2a09      	cmp	r2, #9
    7874:	d920      	bls.n	78b8 <_vfprintf_r+0xcd8>
    7876:	46aa      	mov	sl, r5
    7878:	46b0      	mov	r8, r6
    787a:	9413      	str	r4, [sp, #76]	; 0x4c
    787c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    787e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7880:	1c27      	adds	r7, r4, #0
    7882:	1c28      	adds	r0, r5, #0
    7884:	1c31      	adds	r1, r6, #0
    7886:	220a      	movs	r2, #10
    7888:	2300      	movs	r3, #0
    788a:	f006 fa21 	bl	dcd0 <____aeabi_uldivmod_from_thumb>
    788e:	3f01      	subs	r7, #1
    7890:	3230      	adds	r2, #48	; 0x30
    7892:	703a      	strb	r2, [r7, #0]
    7894:	1c28      	adds	r0, r5, #0
    7896:	1c31      	adds	r1, r6, #0
    7898:	220a      	movs	r2, #10
    789a:	2300      	movs	r3, #0
    789c:	f006 fa18 	bl	dcd0 <____aeabi_uldivmod_from_thumb>
    78a0:	1c05      	adds	r5, r0, #0
    78a2:	1c0e      	adds	r6, r1, #0
    78a4:	4308      	orrs	r0, r1
    78a6:	d1ec      	bne.n	7882 <_vfprintf_r+0xca2>
    78a8:	1be1      	subs	r1, r4, r7
    78aa:	9510      	str	r5, [sp, #64]	; 0x40
    78ac:	9611      	str	r6, [sp, #68]	; 0x44
    78ae:	9713      	str	r7, [sp, #76]	; 0x4c
    78b0:	4655      	mov	r5, sl
    78b2:	4646      	mov	r6, r8
    78b4:	910c      	str	r1, [sp, #48]	; 0x30
    78b6:	e42f      	b.n	7118 <_vfprintf_r+0x538>
    78b8:	4b74      	ldr	r3, [pc, #464]	; (7a8c <_vfprintf_r+0xeac>)
    78ba:	3230      	adds	r2, #48	; 0x30
    78bc:	446b      	add	r3, sp
    78be:	3127      	adds	r1, #39	; 0x27
    78c0:	545a      	strb	r2, [r3, r1]
    78c2:	4b73      	ldr	r3, [pc, #460]	; (7a90 <_vfprintf_r+0xeb0>)
    78c4:	446b      	add	r3, sp
    78c6:	1ae7      	subs	r7, r4, r3
    78c8:	970c      	str	r7, [sp, #48]	; 0x30
    78ca:	9313      	str	r3, [sp, #76]	; 0x4c
    78cc:	e424      	b.n	7118 <_vfprintf_r+0x538>
    78ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    78d0:	4659      	mov	r1, fp
    78d2:	1c22      	adds	r2, r4, #0
    78d4:	f003 ffc4 	bl	b860 <__sprint_r>
    78d8:	2800      	cmp	r0, #0
    78da:	d001      	beq.n	78e0 <_vfprintf_r+0xd00>
    78dc:	f7ff fb78 	bl	6fd0 <_vfprintf_r+0x3f0>
    78e0:	4d67      	ldr	r5, [pc, #412]	; (7a80 <_vfprintf_r+0xea0>)
    78e2:	4649      	mov	r1, r9
    78e4:	780a      	ldrb	r2, [r1, #0]
    78e6:	446d      	add	r5, sp
    78e8:	f7ff fa64 	bl	6db4 <_vfprintf_r+0x1d4>
    78ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    78ee:	3e01      	subs	r6, #1
    78f0:	2e00      	cmp	r6, #0
    78f2:	dc00      	bgt.n	78f6 <_vfprintf_r+0xd16>
    78f4:	e3b0      	b.n	8058 <_vfprintf_r+0x1478>
    78f6:	2e10      	cmp	r6, #16
    78f8:	dc01      	bgt.n	78fe <_vfprintf_r+0xd1e>
    78fa:	f000 fd14 	bl	8326 <_vfprintf_r+0x1746>
    78fe:	4861      	ldr	r0, [pc, #388]	; (7a84 <_vfprintf_r+0xea4>)
    7900:	2110      	movs	r1, #16
    7902:	4680      	mov	r8, r0
    7904:	1c0f      	adds	r7, r1, #0
    7906:	1c2b      	adds	r3, r5, #0
    7908:	4447      	add	r7, r8
    790a:	468a      	mov	sl, r1
    790c:	465d      	mov	r5, fp
    790e:	e006      	b.n	791e <_vfprintf_r+0xd3e>
    7910:	3308      	adds	r3, #8
    7912:	1c1a      	adds	r2, r3, #0
    7914:	3208      	adds	r2, #8
    7916:	3e10      	subs	r6, #16
    7918:	2e10      	cmp	r6, #16
    791a:	dc00      	bgt.n	791e <_vfprintf_r+0xd3e>
    791c:	e09a      	b.n	7a54 <_vfprintf_r+0xe74>
    791e:	4652      	mov	r2, sl
    7920:	605a      	str	r2, [r3, #4]
    7922:	68a2      	ldr	r2, [r4, #8]
    7924:	3210      	adds	r2, #16
    7926:	601f      	str	r7, [r3, #0]
    7928:	60a2      	str	r2, [r4, #8]
    792a:	6862      	ldr	r2, [r4, #4]
    792c:	3201      	adds	r2, #1
    792e:	6062      	str	r2, [r4, #4]
    7930:	2a07      	cmp	r2, #7
    7932:	dded      	ble.n	7910 <_vfprintf_r+0xd30>
    7934:	9809      	ldr	r0, [sp, #36]	; 0x24
    7936:	1c29      	adds	r1, r5, #0
    7938:	1c22      	adds	r2, r4, #0
    793a:	f003 ff91 	bl	b860 <__sprint_r>
    793e:	2800      	cmp	r0, #0
    7940:	d134      	bne.n	79ac <_vfprintf_r+0xdcc>
    7942:	4a51      	ldr	r2, [pc, #324]	; (7a88 <_vfprintf_r+0xea8>)
    7944:	4b4e      	ldr	r3, [pc, #312]	; (7a80 <_vfprintf_r+0xea0>)
    7946:	446a      	add	r2, sp
    7948:	446b      	add	r3, sp
    794a:	e7e4      	b.n	7916 <_vfprintf_r+0xd36>
    794c:	9907      	ldr	r1, [sp, #28]
    794e:	06c9      	lsls	r1, r1, #27
    7950:	d400      	bmi.n	7954 <_vfprintf_r+0xd74>
    7952:	e1bd      	b.n	7cd0 <_vfprintf_r+0x10f0>
    7954:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7956:	6813      	ldr	r3, [r2, #0]
    7958:	3204      	adds	r2, #4
    795a:	9310      	str	r3, [sp, #64]	; 0x40
    795c:	17db      	asrs	r3, r3, #31
    795e:	9311      	str	r3, [sp, #68]	; 0x44
    7960:	920f      	str	r2, [sp, #60]	; 0x3c
    7962:	f7ff fb9a 	bl	709a <_vfprintf_r+0x4ba>
    7966:	2302      	movs	r3, #2
    7968:	e451      	b.n	720e <_vfprintf_r+0x62e>
    796a:	9907      	ldr	r1, [sp, #28]
    796c:	2310      	movs	r3, #16
    796e:	4019      	ands	r1, r3
    7970:	d100      	bne.n	7974 <_vfprintf_r+0xd94>
    7972:	e19b      	b.n	7cac <_vfprintf_r+0x10cc>
    7974:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7976:	6809      	ldr	r1, [r1, #0]
    7978:	9110      	str	r1, [sp, #64]	; 0x40
    797a:	9211      	str	r2, [sp, #68]	; 0x44
    797c:	1c0a      	adds	r2, r1, #0
    797e:	1e53      	subs	r3, r2, #1
    7980:	419a      	sbcs	r2, r3
    7982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7984:	3304      	adds	r3, #4
    7986:	930f      	str	r3, [sp, #60]	; 0x3c
    7988:	2301      	movs	r3, #1
    798a:	e440      	b.n	720e <_vfprintf_r+0x62e>
    798c:	9907      	ldr	r1, [sp, #28]
    798e:	2210      	movs	r2, #16
    7990:	4011      	ands	r1, r2
    7992:	d100      	bne.n	7996 <_vfprintf_r+0xdb6>
    7994:	e1ab      	b.n	7cee <_vfprintf_r+0x110e>
    7996:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7998:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    799a:	6809      	ldr	r1, [r1, #0]
    799c:	3704      	adds	r7, #4
    799e:	1c0a      	adds	r2, r1, #0
    79a0:	9110      	str	r1, [sp, #64]	; 0x40
    79a2:	9311      	str	r3, [sp, #68]	; 0x44
    79a4:	1e51      	subs	r1, r2, #1
    79a6:	418a      	sbcs	r2, r1
    79a8:	970f      	str	r7, [sp, #60]	; 0x3c
    79aa:	e430      	b.n	720e <_vfprintf_r+0x62e>
    79ac:	46aa      	mov	sl, r5
    79ae:	f7ff fb10 	bl	6fd2 <_vfprintf_r+0x3f2>
    79b2:	9d07      	ldr	r5, [sp, #28]
    79b4:	2301      	movs	r3, #1
    79b6:	421d      	tst	r5, r3
    79b8:	d000      	beq.n	79bc <_vfprintf_r+0xddc>
    79ba:	e649      	b.n	7650 <_vfprintf_r+0xa70>
    79bc:	607b      	str	r3, [r7, #4]
    79be:	68a3      	ldr	r3, [r4, #8]
    79c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    79c2:	3301      	adds	r3, #1
    79c4:	603a      	str	r2, [r7, #0]
    79c6:	60a3      	str	r3, [r4, #8]
    79c8:	6863      	ldr	r3, [r4, #4]
    79ca:	3301      	adds	r3, #1
    79cc:	6063      	str	r3, [r4, #4]
    79ce:	2b07      	cmp	r3, #7
    79d0:	dd00      	ble.n	79d4 <_vfprintf_r+0xdf4>
    79d2:	e321      	b.n	8018 <_vfprintf_r+0x1438>
    79d4:	3708      	adds	r7, #8
    79d6:	2308      	movs	r3, #8
    79d8:	46b9      	mov	r9, r7
    79da:	1c1f      	adds	r7, r3, #0
    79dc:	444f      	add	r7, r9
    79de:	e673      	b.n	76c8 <_vfprintf_r+0xae8>
    79e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    79e2:	4659      	mov	r1, fp
    79e4:	1c22      	adds	r2, r4, #0
    79e6:	f003 ff3b 	bl	b860 <__sprint_r>
    79ea:	2800      	cmp	r0, #0
    79ec:	d001      	beq.n	79f2 <_vfprintf_r+0xe12>
    79ee:	f7ff faef 	bl	6fd0 <_vfprintf_r+0x3f0>
    79f2:	4b25      	ldr	r3, [pc, #148]	; (7a88 <_vfprintf_r+0xea8>)
    79f4:	4d22      	ldr	r5, [pc, #136]	; (7a80 <_vfprintf_r+0xea0>)
    79f6:	446b      	add	r3, sp
    79f8:	4699      	mov	r9, r3
    79fa:	446d      	add	r5, sp
    79fc:	e648      	b.n	7690 <_vfprintf_r+0xab0>
    79fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    7a00:	4659      	mov	r1, fp
    7a02:	1c22      	adds	r2, r4, #0
    7a04:	f003 ff2c 	bl	b860 <__sprint_r>
    7a08:	2800      	cmp	r0, #0
    7a0a:	d001      	beq.n	7a10 <_vfprintf_r+0xe30>
    7a0c:	f7ff fae0 	bl	6fd0 <_vfprintf_r+0x3f0>
    7a10:	4d1d      	ldr	r5, [pc, #116]	; (7a88 <_vfprintf_r+0xea8>)
    7a12:	4f1b      	ldr	r7, [pc, #108]	; (7a80 <_vfprintf_r+0xea0>)
    7a14:	446d      	add	r5, sp
    7a16:	446f      	add	r7, sp
    7a18:	e62a      	b.n	7670 <_vfprintf_r+0xa90>
    7a1a:	2830      	cmp	r0, #48	; 0x30
    7a1c:	d100      	bne.n	7a20 <_vfprintf_r+0xe40>
    7a1e:	e386      	b.n	812e <_vfprintf_r+0x154e>
    7a20:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    7a22:	3f01      	subs	r7, #1
    7a24:	2330      	movs	r3, #48	; 0x30
    7a26:	1be0      	subs	r0, r4, r7
    7a28:	9713      	str	r7, [sp, #76]	; 0x4c
    7a2a:	703b      	strb	r3, [r7, #0]
    7a2c:	900c      	str	r0, [sp, #48]	; 0x30
    7a2e:	f7ff fb73 	bl	7118 <_vfprintf_r+0x538>
    7a32:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7a34:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7a36:	2100      	movs	r1, #0
    7a38:	4250      	negs	r0, r2
    7a3a:	4199      	sbcs	r1, r3
    7a3c:	1c02      	adds	r2, r0, #0
    7a3e:	232d      	movs	r3, #45	; 0x2d
    7a40:	464f      	mov	r7, r9
    7a42:	430a      	orrs	r2, r1
    7a44:	703b      	strb	r3, [r7, #0]
    7a46:	9010      	str	r0, [sp, #64]	; 0x40
    7a48:	9111      	str	r1, [sp, #68]	; 0x44
    7a4a:	1e53      	subs	r3, r2, #1
    7a4c:	419a      	sbcs	r2, r3
    7a4e:	2301      	movs	r3, #1
    7a50:	f7ff fb2e 	bl	70b0 <_vfprintf_r+0x4d0>
    7a54:	46ab      	mov	fp, r5
    7a56:	4691      	mov	r9, r2
    7a58:	1c1d      	adds	r5, r3, #0
    7a5a:	2710      	movs	r7, #16
    7a5c:	1c3b      	adds	r3, r7, #0
    7a5e:	4443      	add	r3, r8
    7a60:	602b      	str	r3, [r5, #0]
    7a62:	68a3      	ldr	r3, [r4, #8]
    7a64:	18f3      	adds	r3, r6, r3
    7a66:	606e      	str	r6, [r5, #4]
    7a68:	60a3      	str	r3, [r4, #8]
    7a6a:	6863      	ldr	r3, [r4, #4]
    7a6c:	3301      	adds	r3, #1
    7a6e:	6063      	str	r3, [r4, #4]
    7a70:	2b07      	cmp	r3, #7
    7a72:	dd00      	ble.n	7a76 <_vfprintf_r+0xe96>
    7a74:	e34b      	b.n	810e <_vfprintf_r+0x152e>
    7a76:	2008      	movs	r0, #8
    7a78:	1c07      	adds	r7, r0, #0
    7a7a:	444f      	add	r7, r9
    7a7c:	e624      	b.n	76c8 <_vfprintf_r+0xae8>
    7a7e:	46c0      	nop			; (mov r8, r8)
    7a80:	000004e4 	.word	0x000004e4
    7a84:	0000e064 	.word	0x0000e064
    7a88:	000004ec 	.word	0x000004ec
    7a8c:	00000524 	.word	0x00000524
    7a90:	0000054b 	.word	0x0000054b
    7a94:	981a      	ldr	r0, [sp, #104]	; 0x68
    7a96:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7a98:	f003 f860 	bl	ab5c <__fpclassifyd>
    7a9c:	2800      	cmp	r0, #0
    7a9e:	d100      	bne.n	7aa2 <_vfprintf_r+0xec2>
    7aa0:	e272      	b.n	7f88 <_vfprintf_r+0x13a8>
    7aa2:	1c70      	adds	r0, r6, #1
    7aa4:	d101      	bne.n	7aaa <_vfprintf_r+0xeca>
    7aa6:	f000 fbfa 	bl	829e <_vfprintf_r+0x16be>
    7aaa:	9916      	ldr	r1, [sp, #88]	; 0x58
    7aac:	3947      	subs	r1, #71	; 0x47
    7aae:	910c      	str	r1, [sp, #48]	; 0x30
    7ab0:	2900      	cmp	r1, #0
    7ab2:	d002      	beq.n	7aba <_vfprintf_r+0xeda>
    7ab4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    7ab6:	2a67      	cmp	r2, #103	; 0x67
    7ab8:	d102      	bne.n	7ac0 <_vfprintf_r+0xee0>
    7aba:	2e00      	cmp	r6, #0
    7abc:	d100      	bne.n	7ac0 <_vfprintf_r+0xee0>
    7abe:	2601      	movs	r6, #1
    7ac0:	9f07      	ldr	r7, [sp, #28]
    7ac2:	2380      	movs	r3, #128	; 0x80
    7ac4:	005b      	lsls	r3, r3, #1
    7ac6:	431f      	orrs	r7, r3
    7ac8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7aca:	9707      	str	r7, [sp, #28]
    7acc:	2b00      	cmp	r3, #0
    7ace:	da00      	bge.n	7ad2 <_vfprintf_r+0xef2>
    7ad0:	e3f2      	b.n	82b8 <_vfprintf_r+0x16d8>
    7ad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7ad4:	2700      	movs	r7, #0
    7ad6:	930a      	str	r3, [sp, #40]	; 0x28
    7ad8:	9714      	str	r7, [sp, #80]	; 0x50
    7ada:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7adc:	3b46      	subs	r3, #70	; 0x46
    7ade:	4259      	negs	r1, r3
    7ae0:	4159      	adcs	r1, r3
    7ae2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7ae4:	3b66      	subs	r3, #102	; 0x66
    7ae6:	425a      	negs	r2, r3
    7ae8:	4153      	adcs	r3, r2
    7aea:	1c08      	adds	r0, r1, #0
    7aec:	4318      	orrs	r0, r3
    7aee:	900e      	str	r0, [sp, #56]	; 0x38
    7af0:	d000      	beq.n	7af4 <_vfprintf_r+0xf14>
    7af2:	e364      	b.n	81be <_vfprintf_r+0x15de>
    7af4:	9916      	ldr	r1, [sp, #88]	; 0x58
    7af6:	2945      	cmp	r1, #69	; 0x45
    7af8:	d002      	beq.n	7b00 <_vfprintf_r+0xf20>
    7afa:	2965      	cmp	r1, #101	; 0x65
    7afc:	d000      	beq.n	7b00 <_vfprintf_r+0xf20>
    7afe:	e3e5      	b.n	82cc <_vfprintf_r+0x16ec>
    7b00:	1c72      	adds	r2, r6, #1
    7b02:	4692      	mov	sl, r2
    7b04:	2302      	movs	r3, #2
    7b06:	9300      	str	r3, [sp, #0]
    7b08:	4653      	mov	r3, sl
    7b0a:	9301      	str	r3, [sp, #4]
    7b0c:	23ad      	movs	r3, #173	; 0xad
    7b0e:	00db      	lsls	r3, r3, #3
    7b10:	446b      	add	r3, sp
    7b12:	9302      	str	r3, [sp, #8]
    7b14:	4bd4      	ldr	r3, [pc, #848]	; (7e68 <_vfprintf_r+0x1288>)
    7b16:	446b      	add	r3, sp
    7b18:	9303      	str	r3, [sp, #12]
    7b1a:	23ac      	movs	r3, #172	; 0xac
    7b1c:	00db      	lsls	r3, r3, #3
    7b1e:	446b      	add	r3, sp
    7b20:	9304      	str	r3, [sp, #16]
    7b22:	9809      	ldr	r0, [sp, #36]	; 0x24
    7b24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    7b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7b28:	f000 fdd4 	bl	86d4 <_dtoa_r>
    7b2c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7b2e:	9013      	str	r0, [sp, #76]	; 0x4c
    7b30:	2f00      	cmp	r7, #0
    7b32:	d002      	beq.n	7b3a <_vfprintf_r+0xf5a>
    7b34:	9816      	ldr	r0, [sp, #88]	; 0x58
    7b36:	2867      	cmp	r0, #103	; 0x67
    7b38:	d103      	bne.n	7b42 <_vfprintf_r+0xf62>
    7b3a:	9907      	ldr	r1, [sp, #28]
    7b3c:	07c9      	lsls	r1, r1, #31
    7b3e:	d400      	bmi.n	7b42 <_vfprintf_r+0xf62>
    7b40:	e3d2      	b.n	82e8 <_vfprintf_r+0x1708>
    7b42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7b44:	980e      	ldr	r0, [sp, #56]	; 0x38
    7b46:	1c1f      	adds	r7, r3, #0
    7b48:	4457      	add	r7, sl
    7b4a:	2800      	cmp	r0, #0
    7b4c:	d008      	beq.n	7b60 <_vfprintf_r+0xf80>
    7b4e:	781b      	ldrb	r3, [r3, #0]
    7b50:	2b30      	cmp	r3, #48	; 0x30
    7b52:	d100      	bne.n	7b56 <_vfprintf_r+0xf76>
    7b54:	e3cd      	b.n	82f2 <_vfprintf_r+0x1712>
    7b56:	21ad      	movs	r1, #173	; 0xad
    7b58:	00c9      	lsls	r1, r1, #3
    7b5a:	4469      	add	r1, sp
    7b5c:	680a      	ldr	r2, [r1, #0]
    7b5e:	18bf      	adds	r7, r7, r2
    7b60:	981a      	ldr	r0, [sp, #104]	; 0x68
    7b62:	990a      	ldr	r1, [sp, #40]	; 0x28
    7b64:	4bbf      	ldr	r3, [pc, #764]	; (7e64 <_vfprintf_r+0x1284>)
    7b66:	4abe      	ldr	r2, [pc, #760]	; (7e60 <_vfprintf_r+0x1280>)
    7b68:	f006 f84a 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    7b6c:	2800      	cmp	r0, #0
    7b6e:	d100      	bne.n	7b72 <_vfprintf_r+0xf92>
    7b70:	e368      	b.n	8244 <_vfprintf_r+0x1664>
    7b72:	22ac      	movs	r2, #172	; 0xac
    7b74:	00d2      	lsls	r2, r2, #3
    7b76:	446a      	add	r2, sp
    7b78:	6017      	str	r7, [r2, #0]
    7b7a:	1c3b      	adds	r3, r7, #0
    7b7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7b7e:	1a9b      	subs	r3, r3, r2
    7b80:	930e      	str	r3, [sp, #56]	; 0x38
    7b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b84:	2b00      	cmp	r3, #0
    7b86:	d003      	beq.n	7b90 <_vfprintf_r+0xfb0>
    7b88:	9f16      	ldr	r7, [sp, #88]	; 0x58
    7b8a:	2f67      	cmp	r7, #103	; 0x67
    7b8c:	d000      	beq.n	7b90 <_vfprintf_r+0xfb0>
    7b8e:	e341      	b.n	8214 <_vfprintf_r+0x1634>
    7b90:	20ad      	movs	r0, #173	; 0xad
    7b92:	00c0      	lsls	r0, r0, #3
    7b94:	4468      	add	r0, sp
    7b96:	6802      	ldr	r2, [r0, #0]
    7b98:	920c      	str	r2, [sp, #48]	; 0x30
    7b9a:	1cd1      	adds	r1, r2, #3
    7b9c:	db02      	blt.n	7ba4 <_vfprintf_r+0xfc4>
    7b9e:	4296      	cmp	r6, r2
    7ba0:	db00      	blt.n	7ba4 <_vfprintf_r+0xfc4>
    7ba2:	e371      	b.n	8288 <_vfprintf_r+0x16a8>
    7ba4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7ba6:	3b02      	subs	r3, #2
    7ba8:	9316      	str	r3, [sp, #88]	; 0x58
    7baa:	1e56      	subs	r6, r2, #1
    7bac:	21ad      	movs	r1, #173	; 0xad
    7bae:	22ab      	movs	r2, #171	; 0xab
    7bb0:	ab16      	add	r3, sp, #88	; 0x58
    7bb2:	00c9      	lsls	r1, r1, #3
    7bb4:	00d2      	lsls	r2, r2, #3
    7bb6:	781b      	ldrb	r3, [r3, #0]
    7bb8:	446a      	add	r2, sp
    7bba:	4469      	add	r1, sp
    7bbc:	600e      	str	r6, [r1, #0]
    7bbe:	4692      	mov	sl, r2
    7bc0:	7013      	strb	r3, [r2, #0]
    7bc2:	2e00      	cmp	r6, #0
    7bc4:	da00      	bge.n	7bc8 <_vfprintf_r+0xfe8>
    7bc6:	e3a5      	b.n	8314 <_vfprintf_r+0x1734>
    7bc8:	232b      	movs	r3, #43	; 0x2b
    7bca:	7053      	strb	r3, [r2, #1]
    7bcc:	2e09      	cmp	r6, #9
    7bce:	dc00      	bgt.n	7bd2 <_vfprintf_r+0xff2>
    7bd0:	e36a      	b.n	82a8 <_vfprintf_r+0x16c8>
    7bd2:	48a6      	ldr	r0, [pc, #664]	; (7e6c <_vfprintf_r+0x128c>)
    7bd4:	4468      	add	r0, sp
    7bd6:	4680      	mov	r8, r0
    7bd8:	1c07      	adds	r7, r0, #0
    7bda:	1c30      	adds	r0, r6, #0
    7bdc:	210a      	movs	r1, #10
    7bde:	f006 f80b 	bl	dbf8 <____aeabi_idivmod_from_thumb>
    7be2:	3f01      	subs	r7, #1
    7be4:	3130      	adds	r1, #48	; 0x30
    7be6:	7039      	strb	r1, [r7, #0]
    7be8:	1c30      	adds	r0, r6, #0
    7bea:	210a      	movs	r1, #10
    7bec:	f006 f84e 	bl	dc8c <____aeabi_idiv_from_thumb>
    7bf0:	1c06      	adds	r6, r0, #0
    7bf2:	2809      	cmp	r0, #9
    7bf4:	dcf1      	bgt.n	7bda <_vfprintf_r+0xffa>
    7bf6:	1c02      	adds	r2, r0, #0
    7bf8:	499d      	ldr	r1, [pc, #628]	; (7e70 <_vfprintf_r+0x1290>)
    7bfa:	1e7b      	subs	r3, r7, #1
    7bfc:	3230      	adds	r2, #48	; 0x30
    7bfe:	701a      	strb	r2, [r3, #0]
    7c00:	4469      	add	r1, sp
    7c02:	4543      	cmp	r3, r8
    7c04:	d205      	bcs.n	7c12 <_vfprintf_r+0x1032>
    7c06:	781a      	ldrb	r2, [r3, #0]
    7c08:	3301      	adds	r3, #1
    7c0a:	700a      	strb	r2, [r1, #0]
    7c0c:	3101      	adds	r1, #1
    7c0e:	4543      	cmp	r3, r8
    7c10:	d3f9      	bcc.n	7c06 <_vfprintf_r+0x1026>
    7c12:	4652      	mov	r2, sl
    7c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7c16:	1a8a      	subs	r2, r1, r2
    7c18:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7c1a:	921d      	str	r2, [sp, #116]	; 0x74
    7c1c:	18d2      	adds	r2, r2, r3
    7c1e:	920c      	str	r2, [sp, #48]	; 0x30
    7c20:	2e01      	cmp	r6, #1
    7c22:	dc00      	bgt.n	7c26 <_vfprintf_r+0x1046>
    7c24:	e383      	b.n	832e <_vfprintf_r+0x174e>
    7c26:	980c      	ldr	r0, [sp, #48]	; 0x30
    7c28:	2100      	movs	r1, #0
    7c2a:	3001      	adds	r0, #1
    7c2c:	900c      	str	r0, [sp, #48]	; 0x30
    7c2e:	9119      	str	r1, [sp, #100]	; 0x64
    7c30:	9814      	ldr	r0, [sp, #80]	; 0x50
    7c32:	2800      	cmp	r0, #0
    7c34:	d000      	beq.n	7c38 <_vfprintf_r+0x1058>
    7c36:	e2d0      	b.n	81da <_vfprintf_r+0x15fa>
    7c38:	990c      	ldr	r1, [sp, #48]	; 0x30
    7c3a:	43cb      	mvns	r3, r1
    7c3c:	17db      	asrs	r3, r3, #31
    7c3e:	4019      	ands	r1, r3
    7c40:	464b      	mov	r3, r9
    7c42:	910a      	str	r1, [sp, #40]	; 0x28
    7c44:	781a      	ldrb	r2, [r3, #0]
    7c46:	f7ff fa71 	bl	712c <_vfprintf_r+0x54c>
    7c4a:	9908      	ldr	r1, [sp, #32]
    7c4c:	780b      	ldrb	r3, [r1, #0]
    7c4e:	f7ff f84a 	bl	6ce6 <_vfprintf_r+0x106>
    7c52:	9f07      	ldr	r7, [sp, #28]
    7c54:	2340      	movs	r3, #64	; 0x40
    7c56:	403b      	ands	r3, r7
    7c58:	d100      	bne.n	7c5c <_vfprintf_r+0x107c>
    7c5a:	e1bf      	b.n	7fdc <_vfprintf_r+0x13fc>
    7c5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7c5e:	8800      	ldrh	r0, [r0, #0]
    7c60:	9111      	str	r1, [sp, #68]	; 0x44
    7c62:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7c64:	3104      	adds	r1, #4
    7c66:	9010      	str	r0, [sp, #64]	; 0x40
    7c68:	910f      	str	r1, [sp, #60]	; 0x3c
    7c6a:	f7ff fab8 	bl	71de <_vfprintf_r+0x5fe>
    7c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7c70:	2307      	movs	r3, #7
    7c72:	3207      	adds	r2, #7
    7c74:	439a      	bics	r2, r3
    7c76:	6810      	ldr	r0, [r2, #0]
    7c78:	2708      	movs	r7, #8
    7c7a:	18bf      	adds	r7, r7, r2
    7c7c:	970f      	str	r7, [sp, #60]	; 0x3c
    7c7e:	901a      	str	r0, [sp, #104]	; 0x68
    7c80:	6852      	ldr	r2, [r2, #4]
    7c82:	921b      	str	r2, [sp, #108]	; 0x6c
    7c84:	f7ff fa6b 	bl	715e <_vfprintf_r+0x57e>
    7c88:	9807      	ldr	r0, [sp, #28]
    7c8a:	06c0      	lsls	r0, r0, #27
    7c8c:	d500      	bpl.n	7c90 <_vfprintf_r+0x10b0>
    7c8e:	e198      	b.n	7fc2 <_vfprintf_r+0x13e2>
    7c90:	9b07      	ldr	r3, [sp, #28]
    7c92:	065b      	lsls	r3, r3, #25
    7c94:	d400      	bmi.n	7c98 <_vfprintf_r+0x10b8>
    7c96:	e298      	b.n	81ca <_vfprintf_r+0x15ea>
    7c98:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    7c9a:	466f      	mov	r7, sp
    7c9c:	2034      	movs	r0, #52	; 0x34
    7c9e:	6833      	ldr	r3, [r6, #0]
    7ca0:	5bc7      	ldrh	r7, [r0, r7]
    7ca2:	3604      	adds	r6, #4
    7ca4:	801f      	strh	r7, [r3, #0]
    7ca6:	960f      	str	r6, [sp, #60]	; 0x3c
    7ca8:	f7fe ffe4 	bl	6c74 <_vfprintf_r+0x94>
    7cac:	9f07      	ldr	r7, [sp, #28]
    7cae:	2340      	movs	r3, #64	; 0x40
    7cb0:	403b      	ands	r3, r7
    7cb2:	d100      	bne.n	7cb6 <_vfprintf_r+0x10d6>
    7cb4:	e18d      	b.n	7fd2 <_vfprintf_r+0x13f2>
    7cb6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7cb8:	8800      	ldrh	r0, [r0, #0]
    7cba:	9111      	str	r1, [sp, #68]	; 0x44
    7cbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7cbe:	1c02      	adds	r2, r0, #0
    7cc0:	3104      	adds	r1, #4
    7cc2:	1e53      	subs	r3, r2, #1
    7cc4:	419a      	sbcs	r2, r3
    7cc6:	9010      	str	r0, [sp, #64]	; 0x40
    7cc8:	910f      	str	r1, [sp, #60]	; 0x3c
    7cca:	2301      	movs	r3, #1
    7ccc:	f7ff fa9f 	bl	720e <_vfprintf_r+0x62e>
    7cd0:	9b07      	ldr	r3, [sp, #28]
    7cd2:	065b      	lsls	r3, r3, #25
    7cd4:	d400      	bmi.n	7cd8 <_vfprintf_r+0x10f8>
    7cd6:	e16b      	b.n	7fb0 <_vfprintf_r+0x13d0>
    7cd8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7cda:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7cdc:	2300      	movs	r3, #0
    7cde:	5efb      	ldrsh	r3, [r7, r3]
    7ce0:	3004      	adds	r0, #4
    7ce2:	9310      	str	r3, [sp, #64]	; 0x40
    7ce4:	17db      	asrs	r3, r3, #31
    7ce6:	9311      	str	r3, [sp, #68]	; 0x44
    7ce8:	900f      	str	r0, [sp, #60]	; 0x3c
    7cea:	f7ff f9d6 	bl	709a <_vfprintf_r+0x4ba>
    7cee:	9807      	ldr	r0, [sp, #28]
    7cf0:	2340      	movs	r3, #64	; 0x40
    7cf2:	4018      	ands	r0, r3
    7cf4:	d100      	bne.n	7cf8 <_vfprintf_r+0x1118>
    7cf6:	e13a      	b.n	7f6e <_vfprintf_r+0x138e>
    7cf8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7cfa:	8800      	ldrh	r0, [r0, #0]
    7cfc:	1c02      	adds	r2, r0, #0
    7cfe:	1e53      	subs	r3, r2, #1
    7d00:	419a      	sbcs	r2, r3
    7d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7d04:	3304      	adds	r3, #4
    7d06:	930f      	str	r3, [sp, #60]	; 0x3c
    7d08:	9010      	str	r0, [sp, #64]	; 0x40
    7d0a:	9111      	str	r1, [sp, #68]	; 0x44
    7d0c:	1c0b      	adds	r3, r1, #0
    7d0e:	f7ff fa7e 	bl	720e <_vfprintf_r+0x62e>
    7d12:	46bb      	mov	fp, r7
    7d14:	1c17      	adds	r7, r2, #0
    7d16:	2610      	movs	r6, #16
    7d18:	1c32      	adds	r2, r6, #0
    7d1a:	605d      	str	r5, [r3, #4]
    7d1c:	4442      	add	r2, r8
    7d1e:	601a      	str	r2, [r3, #0]
    7d20:	68a3      	ldr	r3, [r4, #8]
    7d22:	18eb      	adds	r3, r5, r3
    7d24:	e4d9      	b.n	76da <_vfprintf_r+0xafa>
    7d26:	46bb      	mov	fp, r7
    7d28:	1c17      	adds	r7, r2, #0
    7d2a:	2610      	movs	r6, #16
    7d2c:	1c32      	adds	r2, r6, #0
    7d2e:	4442      	add	r2, r8
    7d30:	603a      	str	r2, [r7, #0]
    7d32:	68a2      	ldr	r2, [r4, #8]
    7d34:	18aa      	adds	r2, r5, r2
    7d36:	607d      	str	r5, [r7, #4]
    7d38:	60a2      	str	r2, [r4, #8]
    7d3a:	6862      	ldr	r2, [r4, #4]
    7d3c:	3201      	adds	r2, #1
    7d3e:	6062      	str	r2, [r4, #4]
    7d40:	2a07      	cmp	r2, #7
    7d42:	dd00      	ble.n	7d46 <_vfprintf_r+0x1166>
    7d44:	e20a      	b.n	815c <_vfprintf_r+0x157c>
    7d46:	27ad      	movs	r7, #173	; 0xad
    7d48:	00ff      	lsls	r7, r7, #3
    7d4a:	446f      	add	r7, sp
    7d4c:	683d      	ldr	r5, [r7, #0]
    7d4e:	980e      	ldr	r0, [sp, #56]	; 0x38
    7d50:	4285      	cmp	r5, r0
    7d52:	db4b      	blt.n	7dec <_vfprintf_r+0x120c>
    7d54:	9907      	ldr	r1, [sp, #28]
    7d56:	07c9      	lsls	r1, r1, #31
    7d58:	d448      	bmi.n	7dec <_vfprintf_r+0x120c>
    7d5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    7d5c:	1c02      	adds	r2, r0, #0
    7d5e:	9819      	ldr	r0, [sp, #100]	; 0x64
    7d60:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7d62:	4651      	mov	r1, sl
    7d64:	1812      	adds	r2, r2, r0
    7d66:	1a88      	subs	r0, r1, r2
    7d68:	1b71      	subs	r1, r6, r5
    7d6a:	1c0e      	adds	r6, r1, #0
    7d6c:	4281      	cmp	r1, r0
    7d6e:	dd00      	ble.n	7d72 <_vfprintf_r+0x1192>
    7d70:	1c06      	adds	r6, r0, #0
    7d72:	2e00      	cmp	r6, #0
    7d74:	dd0b      	ble.n	7d8e <_vfprintf_r+0x11ae>
    7d76:	601a      	str	r2, [r3, #0]
    7d78:	68a2      	ldr	r2, [r4, #8]
    7d7a:	18b2      	adds	r2, r6, r2
    7d7c:	605e      	str	r6, [r3, #4]
    7d7e:	60a2      	str	r2, [r4, #8]
    7d80:	6862      	ldr	r2, [r4, #4]
    7d82:	3201      	adds	r2, #1
    7d84:	6062      	str	r2, [r4, #4]
    7d86:	3308      	adds	r3, #8
    7d88:	2a07      	cmp	r2, #7
    7d8a:	dd00      	ble.n	7d8e <_vfprintf_r+0x11ae>
    7d8c:	e1d4      	b.n	8138 <_vfprintf_r+0x1558>
    7d8e:	43f5      	mvns	r5, r6
    7d90:	17ed      	asrs	r5, r5, #31
    7d92:	4035      	ands	r5, r6
    7d94:	1b4d      	subs	r5, r1, r5
    7d96:	2d00      	cmp	r5, #0
    7d98:	dd45      	ble.n	7e26 <_vfprintf_r+0x1246>
    7d9a:	2d10      	cmp	r5, #16
    7d9c:	dc00      	bgt.n	7da0 <_vfprintf_r+0x11c0>
    7d9e:	e2e2      	b.n	8366 <_vfprintf_r+0x1786>
    7da0:	4934      	ldr	r1, [pc, #208]	; (7e74 <_vfprintf_r+0x1294>)
    7da2:	2210      	movs	r2, #16
    7da4:	4688      	mov	r8, r1
    7da6:	1c16      	adds	r6, r2, #0
    7da8:	4446      	add	r6, r8
    7daa:	4691      	mov	r9, r2
    7dac:	465f      	mov	r7, fp
    7dae:	e005      	b.n	7dbc <_vfprintf_r+0x11dc>
    7db0:	3308      	adds	r3, #8
    7db2:	1c1a      	adds	r2, r3, #0
    7db4:	3208      	adds	r2, #8
    7db6:	3d10      	subs	r5, #16
    7db8:	2d10      	cmp	r5, #16
    7dba:	dd37      	ble.n	7e2c <_vfprintf_r+0x124c>
    7dbc:	68a2      	ldr	r2, [r4, #8]
    7dbe:	4648      	mov	r0, r9
    7dc0:	3210      	adds	r2, #16
    7dc2:	601e      	str	r6, [r3, #0]
    7dc4:	6058      	str	r0, [r3, #4]
    7dc6:	60a2      	str	r2, [r4, #8]
    7dc8:	6862      	ldr	r2, [r4, #4]
    7dca:	3201      	adds	r2, #1
    7dcc:	6062      	str	r2, [r4, #4]
    7dce:	2a07      	cmp	r2, #7
    7dd0:	ddee      	ble.n	7db0 <_vfprintf_r+0x11d0>
    7dd2:	9809      	ldr	r0, [sp, #36]	; 0x24
    7dd4:	1c39      	adds	r1, r7, #0
    7dd6:	1c22      	adds	r2, r4, #0
    7dd8:	f003 fd42 	bl	b860 <__sprint_r>
    7ddc:	2800      	cmp	r0, #0
    7dde:	d000      	beq.n	7de2 <_vfprintf_r+0x1202>
    7de0:	e4a6      	b.n	7730 <_vfprintf_r+0xb50>
    7de2:	4a25      	ldr	r2, [pc, #148]	; (7e78 <_vfprintf_r+0x1298>)
    7de4:	4b25      	ldr	r3, [pc, #148]	; (7e7c <_vfprintf_r+0x129c>)
    7de6:	446a      	add	r2, sp
    7de8:	446b      	add	r3, sp
    7dea:	e7e4      	b.n	7db6 <_vfprintf_r+0x11d6>
    7dec:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7dee:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    7df0:	601a      	str	r2, [r3, #0]
    7df2:	68a2      	ldr	r2, [r4, #8]
    7df4:	1992      	adds	r2, r2, r6
    7df6:	605e      	str	r6, [r3, #4]
    7df8:	60a2      	str	r2, [r4, #8]
    7dfa:	6862      	ldr	r2, [r4, #4]
    7dfc:	3201      	adds	r2, #1
    7dfe:	6062      	str	r2, [r4, #4]
    7e00:	3308      	adds	r3, #8
    7e02:	2a07      	cmp	r2, #7
    7e04:	dda9      	ble.n	7d5a <_vfprintf_r+0x117a>
    7e06:	9809      	ldr	r0, [sp, #36]	; 0x24
    7e08:	4659      	mov	r1, fp
    7e0a:	1c22      	adds	r2, r4, #0
    7e0c:	f003 fd28 	bl	b860 <__sprint_r>
    7e10:	2800      	cmp	r0, #0
    7e12:	d001      	beq.n	7e18 <_vfprintf_r+0x1238>
    7e14:	f7ff f8dc 	bl	6fd0 <_vfprintf_r+0x3f0>
    7e18:	27ad      	movs	r7, #173	; 0xad
    7e1a:	00ff      	lsls	r7, r7, #3
    7e1c:	4b17      	ldr	r3, [pc, #92]	; (7e7c <_vfprintf_r+0x129c>)
    7e1e:	446f      	add	r7, sp
    7e20:	683d      	ldr	r5, [r7, #0]
    7e22:	446b      	add	r3, sp
    7e24:	e799      	b.n	7d5a <_vfprintf_r+0x117a>
    7e26:	1c1f      	adds	r7, r3, #0
    7e28:	f7ff f848 	bl	6ebc <_vfprintf_r+0x2dc>
    7e2c:	46bb      	mov	fp, r7
    7e2e:	1c17      	adds	r7, r2, #0
    7e30:	2110      	movs	r1, #16
    7e32:	1c0a      	adds	r2, r1, #0
    7e34:	e771      	b.n	7d1a <_vfprintf_r+0x113a>
    7e36:	490f      	ldr	r1, [pc, #60]	; (7e74 <_vfprintf_r+0x1294>)
    7e38:	1c2f      	adds	r7, r5, #0
    7e3a:	3708      	adds	r7, #8
    7e3c:	4688      	mov	r8, r1
    7e3e:	f7ff f81b 	bl	6e78 <_vfprintf_r+0x298>
    7e42:	9809      	ldr	r0, [sp, #36]	; 0x24
    7e44:	4659      	mov	r1, fp
    7e46:	1c22      	adds	r2, r4, #0
    7e48:	f003 fd0a 	bl	b860 <__sprint_r>
    7e4c:	2800      	cmp	r0, #0
    7e4e:	d001      	beq.n	7e54 <_vfprintf_r+0x1274>
    7e50:	f7ff f8be 	bl	6fd0 <_vfprintf_r+0x3f0>
    7e54:	4f09      	ldr	r7, [pc, #36]	; (7e7c <_vfprintf_r+0x129c>)
    7e56:	446f      	add	r7, sp
    7e58:	f7ff fb46 	bl	74e8 <_vfprintf_r+0x908>
    7e5c:	46c0      	nop			; (mov r8, r8)
    7e5e:	46c0      	nop			; (mov r8, r8)
	...
    7e68:	00000564 	.word	0x00000564
    7e6c:	00000483 	.word	0x00000483
    7e70:	0000055a 	.word	0x0000055a
    7e74:	0000e064 	.word	0x0000e064
    7e78:	000004ec 	.word	0x000004ec
    7e7c:	000004e4 	.word	0x000004e4
    7e80:	4bdc      	ldr	r3, [pc, #880]	; (81f4 <_vfprintf_r+0x1614>)
    7e82:	603b      	str	r3, [r7, #0]
    7e84:	2301      	movs	r3, #1
    7e86:	607b      	str	r3, [r7, #4]
    7e88:	68a3      	ldr	r3, [r4, #8]
    7e8a:	3301      	adds	r3, #1
    7e8c:	60a3      	str	r3, [r4, #8]
    7e8e:	6863      	ldr	r3, [r4, #4]
    7e90:	3301      	adds	r3, #1
    7e92:	6063      	str	r3, [r4, #4]
    7e94:	3708      	adds	r7, #8
    7e96:	2b07      	cmp	r3, #7
    7e98:	dd00      	ble.n	7e9c <_vfprintf_r+0x12bc>
    7e9a:	e0ad      	b.n	7ff8 <_vfprintf_r+0x1418>
    7e9c:	2d00      	cmp	r5, #0
    7e9e:	d107      	bne.n	7eb0 <_vfprintf_r+0x12d0>
    7ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7ea2:	2a00      	cmp	r2, #0
    7ea4:	d104      	bne.n	7eb0 <_vfprintf_r+0x12d0>
    7ea6:	9b07      	ldr	r3, [sp, #28]
    7ea8:	07db      	lsls	r3, r3, #31
    7eaa:	d401      	bmi.n	7eb0 <_vfprintf_r+0x12d0>
    7eac:	f7ff f806 	bl	6ebc <_vfprintf_r+0x2dc>
    7eb0:	981c      	ldr	r0, [sp, #112]	; 0x70
    7eb2:	68a3      	ldr	r3, [r4, #8]
    7eb4:	9e18      	ldr	r6, [sp, #96]	; 0x60
    7eb6:	181b      	adds	r3, r3, r0
    7eb8:	603e      	str	r6, [r7, #0]
    7eba:	6078      	str	r0, [r7, #4]
    7ebc:	60a3      	str	r3, [r4, #8]
    7ebe:	6863      	ldr	r3, [r4, #4]
    7ec0:	3301      	adds	r3, #1
    7ec2:	6063      	str	r3, [r4, #4]
    7ec4:	3708      	adds	r7, #8
    7ec6:	2b07      	cmp	r3, #7
    7ec8:	dd00      	ble.n	7ecc <_vfprintf_r+0x12ec>
    7eca:	e0b5      	b.n	8038 <_vfprintf_r+0x1458>
    7ecc:	426d      	negs	r5, r5
    7ece:	2d00      	cmp	r5, #0
    7ed0:	dc00      	bgt.n	7ed4 <_vfprintf_r+0x12f4>
    7ed2:	e0f4      	b.n	80be <_vfprintf_r+0x14de>
    7ed4:	2d10      	cmp	r5, #16
    7ed6:	dc00      	bgt.n	7eda <_vfprintf_r+0x12fa>
    7ed8:	e25e      	b.n	8398 <_vfprintf_r+0x17b8>
    7eda:	4bc7      	ldr	r3, [pc, #796]	; (81f8 <_vfprintf_r+0x1618>)
    7edc:	2010      	movs	r0, #16
    7ede:	4698      	mov	r8, r3
    7ee0:	1c06      	adds	r6, r0, #0
    7ee2:	1c3b      	adds	r3, r7, #0
    7ee4:	4446      	add	r6, r8
    7ee6:	4681      	mov	r9, r0
    7ee8:	465f      	mov	r7, fp
    7eea:	e003      	b.n	7ef4 <_vfprintf_r+0x1314>
    7eec:	3d10      	subs	r5, #16
    7eee:	2d10      	cmp	r5, #16
    7ef0:	dc00      	bgt.n	7ef4 <_vfprintf_r+0x1314>
    7ef2:	e0c9      	b.n	8088 <_vfprintf_r+0x14a8>
    7ef4:	68a2      	ldr	r2, [r4, #8]
    7ef6:	4649      	mov	r1, r9
    7ef8:	3210      	adds	r2, #16
    7efa:	601e      	str	r6, [r3, #0]
    7efc:	6059      	str	r1, [r3, #4]
    7efe:	60a2      	str	r2, [r4, #8]
    7f00:	6862      	ldr	r2, [r4, #4]
    7f02:	3201      	adds	r2, #1
    7f04:	6062      	str	r2, [r4, #4]
    7f06:	3308      	adds	r3, #8
    7f08:	2a07      	cmp	r2, #7
    7f0a:	ddef      	ble.n	7eec <_vfprintf_r+0x130c>
    7f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    7f0e:	1c39      	adds	r1, r7, #0
    7f10:	1c22      	adds	r2, r4, #0
    7f12:	f003 fca5 	bl	b860 <__sprint_r>
    7f16:	2800      	cmp	r0, #0
    7f18:	d001      	beq.n	7f1e <_vfprintf_r+0x133e>
    7f1a:	f7ff fc09 	bl	7730 <_vfprintf_r+0xb50>
    7f1e:	4bb7      	ldr	r3, [pc, #732]	; (81fc <_vfprintf_r+0x161c>)
    7f20:	446b      	add	r3, sp
    7f22:	e7e3      	b.n	7eec <_vfprintf_r+0x130c>
    7f24:	9809      	ldr	r0, [sp, #36]	; 0x24
    7f26:	4659      	mov	r1, fp
    7f28:	1c22      	adds	r2, r4, #0
    7f2a:	f003 fc99 	bl	b860 <__sprint_r>
    7f2e:	2800      	cmp	r0, #0
    7f30:	d001      	beq.n	7f36 <_vfprintf_r+0x1356>
    7f32:	f7ff f84d 	bl	6fd0 <_vfprintf_r+0x3f0>
    7f36:	4eb1      	ldr	r6, [pc, #708]	; (81fc <_vfprintf_r+0x161c>)
    7f38:	4fb1      	ldr	r7, [pc, #708]	; (8200 <_vfprintf_r+0x1620>)
    7f3a:	446e      	add	r6, sp
    7f3c:	446f      	add	r7, sp
    7f3e:	46b1      	mov	r9, r6
    7f40:	f7ff fbc2 	bl	76c8 <_vfprintf_r+0xae8>
    7f44:	9b07      	ldr	r3, [sp, #28]
    7f46:	3101      	adds	r1, #1
    7f48:	4303      	orrs	r3, r0
    7f4a:	9108      	str	r1, [sp, #32]
    7f4c:	9307      	str	r3, [sp, #28]
    7f4e:	780b      	ldrb	r3, [r1, #0]
    7f50:	f7fe fec9 	bl	6ce6 <_vfprintf_r+0x106>
    7f54:	980c      	ldr	r0, [sp, #48]	; 0x30
    7f56:	43c3      	mvns	r3, r0
    7f58:	17db      	asrs	r3, r3, #31
    7f5a:	4018      	ands	r0, r3
    7f5c:	4649      	mov	r1, r9
    7f5e:	2300      	movs	r3, #0
    7f60:	900a      	str	r0, [sp, #40]	; 0x28
    7f62:	780a      	ldrb	r2, [r1, #0]
    7f64:	970f      	str	r7, [sp, #60]	; 0x3c
    7f66:	9314      	str	r3, [sp, #80]	; 0x50
    7f68:	9319      	str	r3, [sp, #100]	; 0x64
    7f6a:	f7ff f8df 	bl	712c <_vfprintf_r+0x54c>
    7f6e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7f70:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7f72:	683f      	ldr	r7, [r7, #0]
    7f74:	3104      	adds	r1, #4
    7f76:	1c3a      	adds	r2, r7, #0
    7f78:	1e53      	subs	r3, r2, #1
    7f7a:	419a      	sbcs	r2, r3
    7f7c:	9710      	str	r7, [sp, #64]	; 0x40
    7f7e:	9011      	str	r0, [sp, #68]	; 0x44
    7f80:	910f      	str	r1, [sp, #60]	; 0x3c
    7f82:	1c03      	adds	r3, r0, #0
    7f84:	f7ff f943 	bl	720e <_vfprintf_r+0x62e>
    7f88:	9f16      	ldr	r7, [sp, #88]	; 0x58
    7f8a:	2f47      	cmp	r7, #71	; 0x47
    7f8c:	dd00      	ble.n	7f90 <_vfprintf_r+0x13b0>
    7f8e:	e119      	b.n	81c4 <_vfprintf_r+0x15e4>
    7f90:	489c      	ldr	r0, [pc, #624]	; (8204 <_vfprintf_r+0x1624>)
    7f92:	9013      	str	r0, [sp, #76]	; 0x4c
    7f94:	9a07      	ldr	r2, [sp, #28]
    7f96:	2380      	movs	r3, #128	; 0x80
    7f98:	439a      	bics	r2, r3
    7f9a:	2603      	movs	r6, #3
    7f9c:	2700      	movs	r7, #0
    7f9e:	464b      	mov	r3, r9
    7fa0:	9207      	str	r2, [sp, #28]
    7fa2:	960a      	str	r6, [sp, #40]	; 0x28
    7fa4:	781a      	ldrb	r2, [r3, #0]
    7fa6:	960c      	str	r6, [sp, #48]	; 0x30
    7fa8:	9714      	str	r7, [sp, #80]	; 0x50
    7faa:	9719      	str	r7, [sp, #100]	; 0x64
    7fac:	f7ff f8be 	bl	712c <_vfprintf_r+0x54c>
    7fb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7fb2:	680b      	ldr	r3, [r1, #0]
    7fb4:	3104      	adds	r1, #4
    7fb6:	9310      	str	r3, [sp, #64]	; 0x40
    7fb8:	17db      	asrs	r3, r3, #31
    7fba:	9311      	str	r3, [sp, #68]	; 0x44
    7fbc:	910f      	str	r1, [sp, #60]	; 0x3c
    7fbe:	f7ff f86c 	bl	709a <_vfprintf_r+0x4ba>
    7fc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7fc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7fc6:	680b      	ldr	r3, [r1, #0]
    7fc8:	3104      	adds	r1, #4
    7fca:	601a      	str	r2, [r3, #0]
    7fcc:	910f      	str	r1, [sp, #60]	; 0x3c
    7fce:	f7fe fe51 	bl	6c74 <_vfprintf_r+0x94>
    7fd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7fd4:	6812      	ldr	r2, [r2, #0]
    7fd6:	9311      	str	r3, [sp, #68]	; 0x44
    7fd8:	9210      	str	r2, [sp, #64]	; 0x40
    7fda:	e4d0      	b.n	797e <_vfprintf_r+0xd9e>
    7fdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7fde:	6812      	ldr	r2, [r2, #0]
    7fe0:	9311      	str	r3, [sp, #68]	; 0x44
    7fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fe4:	3304      	adds	r3, #4
    7fe6:	9210      	str	r2, [sp, #64]	; 0x40
    7fe8:	930f      	str	r3, [sp, #60]	; 0x3c
    7fea:	f7ff f8f8 	bl	71de <_vfprintf_r+0x5fe>
    7fee:	222d      	movs	r2, #45	; 0x2d
    7ff0:	464b      	mov	r3, r9
    7ff2:	701a      	strb	r2, [r3, #0]
    7ff4:	f7ff f8c7 	bl	7186 <_vfprintf_r+0x5a6>
    7ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
    7ffa:	4659      	mov	r1, fp
    7ffc:	1c22      	adds	r2, r4, #0
    7ffe:	f003 fc2f 	bl	b860 <__sprint_r>
    8002:	2800      	cmp	r0, #0
    8004:	d001      	beq.n	800a <_vfprintf_r+0x142a>
    8006:	f7fe ffe3 	bl	6fd0 <_vfprintf_r+0x3f0>
    800a:	21ad      	movs	r1, #173	; 0xad
    800c:	00c9      	lsls	r1, r1, #3
    800e:	4f7b      	ldr	r7, [pc, #492]	; (81fc <_vfprintf_r+0x161c>)
    8010:	4469      	add	r1, sp
    8012:	680d      	ldr	r5, [r1, #0]
    8014:	446f      	add	r7, sp
    8016:	e741      	b.n	7e9c <_vfprintf_r+0x12bc>
    8018:	9809      	ldr	r0, [sp, #36]	; 0x24
    801a:	4659      	mov	r1, fp
    801c:	1c22      	adds	r2, r4, #0
    801e:	f003 fc1f 	bl	b860 <__sprint_r>
    8022:	2800      	cmp	r0, #0
    8024:	d001      	beq.n	802a <_vfprintf_r+0x144a>
    8026:	f7fe ffd3 	bl	6fd0 <_vfprintf_r+0x3f0>
    802a:	4d74      	ldr	r5, [pc, #464]	; (81fc <_vfprintf_r+0x161c>)
    802c:	4f74      	ldr	r7, [pc, #464]	; (8200 <_vfprintf_r+0x1620>)
    802e:	446d      	add	r5, sp
    8030:	446f      	add	r7, sp
    8032:	46a9      	mov	r9, r5
    8034:	f7ff fb48 	bl	76c8 <_vfprintf_r+0xae8>
    8038:	9809      	ldr	r0, [sp, #36]	; 0x24
    803a:	4659      	mov	r1, fp
    803c:	1c22      	adds	r2, r4, #0
    803e:	f003 fc0f 	bl	b860 <__sprint_r>
    8042:	2800      	cmp	r0, #0
    8044:	d001      	beq.n	804a <_vfprintf_r+0x146a>
    8046:	f7fe ffc3 	bl	6fd0 <_vfprintf_r+0x3f0>
    804a:	21ad      	movs	r1, #173	; 0xad
    804c:	00c9      	lsls	r1, r1, #3
    804e:	4f6b      	ldr	r7, [pc, #428]	; (81fc <_vfprintf_r+0x161c>)
    8050:	4469      	add	r1, sp
    8052:	680d      	ldr	r5, [r1, #0]
    8054:	446f      	add	r7, sp
    8056:	e739      	b.n	7ecc <_vfprintf_r+0x12ec>
    8058:	1c2f      	adds	r7, r5, #0
    805a:	3708      	adds	r7, #8
    805c:	46a9      	mov	r9, r5
    805e:	f7ff fb33 	bl	76c8 <_vfprintf_r+0xae8>
    8062:	4869      	ldr	r0, [pc, #420]	; (8208 <_vfprintf_r+0x1628>)
    8064:	9013      	str	r0, [sp, #76]	; 0x4c
    8066:	f7ff f895 	bl	7194 <_vfprintf_r+0x5b4>
    806a:	9809      	ldr	r0, [sp, #36]	; 0x24
    806c:	4659      	mov	r1, fp
    806e:	1c22      	adds	r2, r4, #0
    8070:	f003 fbf6 	bl	b860 <__sprint_r>
    8074:	2800      	cmp	r0, #0
    8076:	d001      	beq.n	807c <_vfprintf_r+0x149c>
    8078:	f7fe ffaa 	bl	6fd0 <_vfprintf_r+0x3f0>
    807c:	4b5f      	ldr	r3, [pc, #380]	; (81fc <_vfprintf_r+0x161c>)
    807e:	446b      	add	r3, sp
    8080:	f7ff fa4d 	bl	751e <_vfprintf_r+0x93e>
    8084:	1c3b      	adds	r3, r7, #0
    8086:	e65e      	b.n	7d46 <_vfprintf_r+0x1166>
    8088:	46bb      	mov	fp, r7
    808a:	1c1f      	adds	r7, r3, #0
    808c:	2210      	movs	r2, #16
    808e:	1c13      	adds	r3, r2, #0
    8090:	4443      	add	r3, r8
    8092:	603b      	str	r3, [r7, #0]
    8094:	68a3      	ldr	r3, [r4, #8]
    8096:	18eb      	adds	r3, r5, r3
    8098:	607d      	str	r5, [r7, #4]
    809a:	60a3      	str	r3, [r4, #8]
    809c:	6863      	ldr	r3, [r4, #4]
    809e:	3301      	adds	r3, #1
    80a0:	6063      	str	r3, [r4, #4]
    80a2:	3708      	adds	r7, #8
    80a4:	2b07      	cmp	r3, #7
    80a6:	dd0a      	ble.n	80be <_vfprintf_r+0x14de>
    80a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    80aa:	4659      	mov	r1, fp
    80ac:	1c22      	adds	r2, r4, #0
    80ae:	f003 fbd7 	bl	b860 <__sprint_r>
    80b2:	2800      	cmp	r0, #0
    80b4:	d001      	beq.n	80ba <_vfprintf_r+0x14da>
    80b6:	f7fe ff8b 	bl	6fd0 <_vfprintf_r+0x3f0>
    80ba:	4f50      	ldr	r7, [pc, #320]	; (81fc <_vfprintf_r+0x161c>)
    80bc:	446f      	add	r7, sp
    80be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    80c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    80c2:	603b      	str	r3, [r7, #0]
    80c4:	f7fe feee 	bl	6ea4 <_vfprintf_r+0x2c4>
    80c8:	9813      	ldr	r0, [sp, #76]	; 0x4c
    80ca:	f7fd fa9f 	bl	560c <strlen>
    80ce:	43c3      	mvns	r3, r0
    80d0:	17db      	asrs	r3, r3, #31
    80d2:	900c      	str	r0, [sp, #48]	; 0x30
    80d4:	464e      	mov	r6, r9
    80d6:	4018      	ands	r0, r3
    80d8:	970f      	str	r7, [sp, #60]	; 0x3c
    80da:	2700      	movs	r7, #0
    80dc:	900a      	str	r0, [sp, #40]	; 0x28
    80de:	7832      	ldrb	r2, [r6, #0]
    80e0:	9714      	str	r7, [sp, #80]	; 0x50
    80e2:	9719      	str	r7, [sp, #100]	; 0x64
    80e4:	f7ff f822 	bl	712c <_vfprintf_r+0x54c>
    80e8:	4a43      	ldr	r2, [pc, #268]	; (81f8 <_vfprintf_r+0x1618>)
    80ea:	1c2b      	adds	r3, r5, #0
    80ec:	3308      	adds	r3, #8
    80ee:	4690      	mov	r8, r2
    80f0:	f7fe fe50 	bl	6d94 <_vfprintf_r+0x1b4>
    80f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    80f6:	4659      	mov	r1, fp
    80f8:	1c22      	adds	r2, r4, #0
    80fa:	f003 fbb1 	bl	b860 <__sprint_r>
    80fe:	2800      	cmp	r0, #0
    8100:	d001      	beq.n	8106 <_vfprintf_r+0x1526>
    8102:	f7fe ff65 	bl	6fd0 <_vfprintf_r+0x3f0>
    8106:	4f3d      	ldr	r7, [pc, #244]	; (81fc <_vfprintf_r+0x161c>)
    8108:	446f      	add	r7, sp
    810a:	f7ff fb59 	bl	77c0 <_vfprintf_r+0xbe0>
    810e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8110:	4659      	mov	r1, fp
    8112:	1c22      	adds	r2, r4, #0
    8114:	f003 fba4 	bl	b860 <__sprint_r>
    8118:	2800      	cmp	r0, #0
    811a:	d001      	beq.n	8120 <_vfprintf_r+0x1540>
    811c:	f7fe ff58 	bl	6fd0 <_vfprintf_r+0x3f0>
    8120:	4936      	ldr	r1, [pc, #216]	; (81fc <_vfprintf_r+0x161c>)
    8122:	4f37      	ldr	r7, [pc, #220]	; (8200 <_vfprintf_r+0x1620>)
    8124:	4469      	add	r1, sp
    8126:	446f      	add	r7, sp
    8128:	4689      	mov	r9, r1
    812a:	f7ff facd 	bl	76c8 <_vfprintf_r+0xae8>
    812e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8130:	1ae3      	subs	r3, r4, r3
    8132:	930c      	str	r3, [sp, #48]	; 0x30
    8134:	f7fe fff0 	bl	7118 <_vfprintf_r+0x538>
    8138:	9809      	ldr	r0, [sp, #36]	; 0x24
    813a:	4659      	mov	r1, fp
    813c:	1c22      	adds	r2, r4, #0
    813e:	f003 fb8f 	bl	b860 <__sprint_r>
    8142:	2800      	cmp	r0, #0
    8144:	d001      	beq.n	814a <_vfprintf_r+0x156a>
    8146:	f7fe ff43 	bl	6fd0 <_vfprintf_r+0x3f0>
    814a:	27ad      	movs	r7, #173	; 0xad
    814c:	00ff      	lsls	r7, r7, #3
    814e:	446f      	add	r7, sp
    8150:	6839      	ldr	r1, [r7, #0]
    8152:	980e      	ldr	r0, [sp, #56]	; 0x38
    8154:	4b29      	ldr	r3, [pc, #164]	; (81fc <_vfprintf_r+0x161c>)
    8156:	1a41      	subs	r1, r0, r1
    8158:	446b      	add	r3, sp
    815a:	e618      	b.n	7d8e <_vfprintf_r+0x11ae>
    815c:	9809      	ldr	r0, [sp, #36]	; 0x24
    815e:	4659      	mov	r1, fp
    8160:	1c22      	adds	r2, r4, #0
    8162:	f003 fb7d 	bl	b860 <__sprint_r>
    8166:	2800      	cmp	r0, #0
    8168:	d001      	beq.n	816e <_vfprintf_r+0x158e>
    816a:	f7fe ff31 	bl	6fd0 <_vfprintf_r+0x3f0>
    816e:	4b23      	ldr	r3, [pc, #140]	; (81fc <_vfprintf_r+0x161c>)
    8170:	446b      	add	r3, sp
    8172:	e5e8      	b.n	7d46 <_vfprintf_r+0x1166>
    8174:	960c      	str	r6, [sp, #48]	; 0x30
    8176:	2e06      	cmp	r6, #6
    8178:	d90a      	bls.n	8190 <_vfprintf_r+0x15b0>
    817a:	2106      	movs	r1, #6
    817c:	910c      	str	r1, [sp, #48]	; 0x30
    817e:	910a      	str	r1, [sp, #40]	; 0x28
    8180:	4b22      	ldr	r3, [pc, #136]	; (820c <_vfprintf_r+0x162c>)
    8182:	2200      	movs	r2, #0
    8184:	970f      	str	r7, [sp, #60]	; 0x3c
    8186:	9214      	str	r2, [sp, #80]	; 0x50
    8188:	9219      	str	r2, [sp, #100]	; 0x64
    818a:	9313      	str	r3, [sp, #76]	; 0x4c
    818c:	f7fe fdc6 	bl	6d1c <_vfprintf_r+0x13c>
    8190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8192:	43d3      	mvns	r3, r2
    8194:	17db      	asrs	r3, r3, #31
    8196:	401a      	ands	r2, r3
    8198:	920a      	str	r2, [sp, #40]	; 0x28
    819a:	e7f1      	b.n	8180 <_vfprintf_r+0x15a0>
    819c:	9809      	ldr	r0, [sp, #36]	; 0x24
    819e:	4651      	mov	r1, sl
    81a0:	f000 f986 	bl	84b0 <__swsetup_r>
    81a4:	2800      	cmp	r0, #0
    81a6:	d001      	beq.n	81ac <_vfprintf_r+0x15cc>
    81a8:	f7fe ff17 	bl	6fda <_vfprintf_r+0x3fa>
    81ac:	4651      	mov	r1, sl
    81ae:	898a      	ldrh	r2, [r1, #12]
    81b0:	1c13      	adds	r3, r2, #0
    81b2:	f7fe fd49 	bl	6c48 <_vfprintf_r+0x68>
    81b6:	4e10      	ldr	r6, [pc, #64]	; (81f8 <_vfprintf_r+0x1618>)
    81b8:	46b0      	mov	r8, r6
    81ba:	f7fe fec1 	bl	6f40 <_vfprintf_r+0x360>
    81be:	46b2      	mov	sl, r6
    81c0:	2303      	movs	r3, #3
    81c2:	e4a0      	b.n	7b06 <_vfprintf_r+0xf26>
    81c4:	4912      	ldr	r1, [pc, #72]	; (8210 <_vfprintf_r+0x1630>)
    81c6:	9113      	str	r1, [sp, #76]	; 0x4c
    81c8:	e6e4      	b.n	7f94 <_vfprintf_r+0x13b4>
    81ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    81cc:	990d      	ldr	r1, [sp, #52]	; 0x34
    81ce:	6803      	ldr	r3, [r0, #0]
    81d0:	3004      	adds	r0, #4
    81d2:	6019      	str	r1, [r3, #0]
    81d4:	900f      	str	r0, [sp, #60]	; 0x3c
    81d6:	f7fe fd4d 	bl	6c74 <_vfprintf_r+0x94>
    81da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    81dc:	43fb      	mvns	r3, r7
    81de:	17db      	asrs	r3, r3, #31
    81e0:	222d      	movs	r2, #45	; 0x2d
    81e2:	464e      	mov	r6, r9
    81e4:	401f      	ands	r7, r3
    81e6:	2000      	movs	r0, #0
    81e8:	7032      	strb	r2, [r6, #0]
    81ea:	970a      	str	r7, [sp, #40]	; 0x28
    81ec:	9014      	str	r0, [sp, #80]	; 0x50
    81ee:	f7fe ffa0 	bl	7132 <_vfprintf_r+0x552>
    81f2:	46c0      	nop			; (mov r8, r8)
    81f4:	0000e95c 	.word	0x0000e95c
    81f8:	0000e064 	.word	0x0000e064
    81fc:	000004e4 	.word	0x000004e4
    8200:	000004ec 	.word	0x000004ec
    8204:	0000e924 	.word	0x0000e924
    8208:	0000e920 	.word	0x0000e920
    820c:	0000e954 	.word	0x0000e954
    8210:	0000e928 	.word	0x0000e928
    8214:	9f16      	ldr	r7, [sp, #88]	; 0x58
    8216:	2f66      	cmp	r7, #102	; 0x66
    8218:	d000      	beq.n	821c <_vfprintf_r+0x163c>
    821a:	e07f      	b.n	831c <_vfprintf_r+0x173c>
    821c:	23ad      	movs	r3, #173	; 0xad
    821e:	00db      	lsls	r3, r3, #3
    8220:	446b      	add	r3, sp
    8222:	681a      	ldr	r2, [r3, #0]
    8224:	920c      	str	r2, [sp, #48]	; 0x30
    8226:	2a00      	cmp	r2, #0
    8228:	dc00      	bgt.n	822c <_vfprintf_r+0x164c>
    822a:	e091      	b.n	8350 <_vfprintf_r+0x1770>
    822c:	2e00      	cmp	r6, #0
    822e:	d102      	bne.n	8236 <_vfprintf_r+0x1656>
    8230:	9f07      	ldr	r7, [sp, #28]
    8232:	07ff      	lsls	r7, r7, #31
    8234:	d502      	bpl.n	823c <_vfprintf_r+0x165c>
    8236:	1c53      	adds	r3, r2, #1
    8238:	199b      	adds	r3, r3, r6
    823a:	930c      	str	r3, [sp, #48]	; 0x30
    823c:	4646      	mov	r6, r8
    823e:	9219      	str	r2, [sp, #100]	; 0x64
    8240:	9616      	str	r6, [sp, #88]	; 0x58
    8242:	e4f5      	b.n	7c30 <_vfprintf_r+0x1050>
    8244:	20ac      	movs	r0, #172	; 0xac
    8246:	00c0      	lsls	r0, r0, #3
    8248:	4468      	add	r0, sp
    824a:	6803      	ldr	r3, [r0, #0]
    824c:	429f      	cmp	r7, r3
    824e:	d800      	bhi.n	8252 <_vfprintf_r+0x1672>
    8250:	e494      	b.n	7b7c <_vfprintf_r+0xf9c>
    8252:	2230      	movs	r2, #48	; 0x30
    8254:	21ac      	movs	r1, #172	; 0xac
    8256:	00c9      	lsls	r1, r1, #3
    8258:	701a      	strb	r2, [r3, #0]
    825a:	4469      	add	r1, sp
    825c:	3301      	adds	r3, #1
    825e:	600b      	str	r3, [r1, #0]
    8260:	429f      	cmp	r7, r3
    8262:	d8f7      	bhi.n	8254 <_vfprintf_r+0x1674>
    8264:	1c3b      	adds	r3, r7, #0
    8266:	e489      	b.n	7b7c <_vfprintf_r+0xf9c>
    8268:	494f      	ldr	r1, [pc, #316]	; (83a8 <_vfprintf_r+0x17c8>)
    826a:	1c2b      	adds	r3, r5, #0
    826c:	4688      	mov	r8, r1
    826e:	3508      	adds	r5, #8
    8270:	f7ff f9cd 	bl	760e <_vfprintf_r+0xa2e>
    8274:	960a      	str	r6, [sp, #40]	; 0x28
    8276:	970f      	str	r7, [sp, #60]	; 0x3c
    8278:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    827a:	464e      	mov	r6, r9
    827c:	7832      	ldrb	r2, [r6, #0]
    827e:	970c      	str	r7, [sp, #48]	; 0x30
    8280:	9014      	str	r0, [sp, #80]	; 0x50
    8282:	9019      	str	r0, [sp, #100]	; 0x64
    8284:	f7fe ff52 	bl	712c <_vfprintf_r+0x54c>
    8288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    828a:	429a      	cmp	r2, r3
    828c:	db21      	blt.n	82d2 <_vfprintf_r+0x16f2>
    828e:	9f07      	ldr	r7, [sp, #28]
    8290:	2667      	movs	r6, #103	; 0x67
    8292:	46b0      	mov	r8, r6
    8294:	07ff      	lsls	r7, r7, #31
    8296:	d5d1      	bpl.n	823c <_vfprintf_r+0x165c>
    8298:	1c50      	adds	r0, r2, #1
    829a:	900c      	str	r0, [sp, #48]	; 0x30
    829c:	e7ce      	b.n	823c <_vfprintf_r+0x165c>
    829e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    82a0:	3b47      	subs	r3, #71	; 0x47
    82a2:	2606      	movs	r6, #6
    82a4:	930c      	str	r3, [sp, #48]	; 0x30
    82a6:	e40b      	b.n	7ac0 <_vfprintf_r+0xee0>
    82a8:	2330      	movs	r3, #48	; 0x30
    82aa:	4651      	mov	r1, sl
    82ac:	18f6      	adds	r6, r6, r3
    82ae:	708b      	strb	r3, [r1, #2]
    82b0:	70ce      	strb	r6, [r1, #3]
    82b2:	493e      	ldr	r1, [pc, #248]	; (83ac <_vfprintf_r+0x17cc>)
    82b4:	4469      	add	r1, sp
    82b6:	e4ac      	b.n	7c12 <_vfprintf_r+0x1032>
    82b8:	981b      	ldr	r0, [sp, #108]	; 0x6c
    82ba:	1c01      	adds	r1, r0, #0
    82bc:	2080      	movs	r0, #128	; 0x80
    82be:	0600      	lsls	r0, r0, #24
    82c0:	1809      	adds	r1, r1, r0
    82c2:	222d      	movs	r2, #45	; 0x2d
    82c4:	910a      	str	r1, [sp, #40]	; 0x28
    82c6:	9214      	str	r2, [sp, #80]	; 0x50
    82c8:	f7ff fc07 	bl	7ada <_vfprintf_r+0xefa>
    82cc:	46b2      	mov	sl, r6
    82ce:	2302      	movs	r3, #2
    82d0:	e419      	b.n	7b06 <_vfprintf_r+0xf26>
    82d2:	2301      	movs	r3, #1
    82d4:	2a00      	cmp	r2, #0
    82d6:	dc01      	bgt.n	82dc <_vfprintf_r+0x16fc>
    82d8:	18db      	adds	r3, r3, r3
    82da:	1a9b      	subs	r3, r3, r2
    82dc:	990e      	ldr	r1, [sp, #56]	; 0x38
    82de:	18c9      	adds	r1, r1, r3
    82e0:	2367      	movs	r3, #103	; 0x67
    82e2:	910c      	str	r1, [sp, #48]	; 0x30
    82e4:	4698      	mov	r8, r3
    82e6:	e7a9      	b.n	823c <_vfprintf_r+0x165c>
    82e8:	22ac      	movs	r2, #172	; 0xac
    82ea:	00d2      	lsls	r2, r2, #3
    82ec:	446a      	add	r2, sp
    82ee:	6813      	ldr	r3, [r2, #0]
    82f0:	e444      	b.n	7b7c <_vfprintf_r+0xf9c>
    82f2:	981a      	ldr	r0, [sp, #104]	; 0x68
    82f4:	990a      	ldr	r1, [sp, #40]	; 0x28
    82f6:	4b2b      	ldr	r3, [pc, #172]	; (83a4 <_vfprintf_r+0x17c4>)
    82f8:	4a29      	ldr	r2, [pc, #164]	; (83a0 <_vfprintf_r+0x17c0>)
    82fa:	f005 fc81 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    82fe:	2800      	cmp	r0, #0
    8300:	d000      	beq.n	8304 <_vfprintf_r+0x1724>
    8302:	e428      	b.n	7b56 <_vfprintf_r+0xf76>
    8304:	20ad      	movs	r0, #173	; 0xad
    8306:	2301      	movs	r3, #1
    8308:	4652      	mov	r2, sl
    830a:	00c0      	lsls	r0, r0, #3
    830c:	1a9b      	subs	r3, r3, r2
    830e:	4468      	add	r0, sp
    8310:	6003      	str	r3, [r0, #0]
    8312:	e420      	b.n	7b56 <_vfprintf_r+0xf76>
    8314:	232d      	movs	r3, #45	; 0x2d
    8316:	4276      	negs	r6, r6
    8318:	7053      	strb	r3, [r2, #1]
    831a:	e457      	b.n	7bcc <_vfprintf_r+0xfec>
    831c:	20ad      	movs	r0, #173	; 0xad
    831e:	00c0      	lsls	r0, r0, #3
    8320:	4468      	add	r0, sp
    8322:	6802      	ldr	r2, [r0, #0]
    8324:	e441      	b.n	7baa <_vfprintf_r+0xfca>
    8326:	4f20      	ldr	r7, [pc, #128]	; (83a8 <_vfprintf_r+0x17c8>)
    8328:	46b8      	mov	r8, r7
    832a:	f7ff fb96 	bl	7a5a <_vfprintf_r+0xe7a>
    832e:	9f07      	ldr	r7, [sp, #28]
    8330:	2301      	movs	r3, #1
    8332:	401f      	ands	r7, r3
    8334:	9719      	str	r7, [sp, #100]	; 0x64
    8336:	d100      	bne.n	833a <_vfprintf_r+0x175a>
    8338:	e47a      	b.n	7c30 <_vfprintf_r+0x1050>
    833a:	e474      	b.n	7c26 <_vfprintf_r+0x1046>
    833c:	481a      	ldr	r0, [pc, #104]	; (83a8 <_vfprintf_r+0x17c8>)
    833e:	1c1f      	adds	r7, r3, #0
    8340:	3708      	adds	r7, #8
    8342:	4680      	mov	r8, r0
    8344:	e4e7      	b.n	7d16 <_vfprintf_r+0x1136>
    8346:	4a18      	ldr	r2, [pc, #96]	; (83a8 <_vfprintf_r+0x17c8>)
    8348:	1c3b      	adds	r3, r7, #0
    834a:	3308      	adds	r3, #8
    834c:	4690      	mov	r8, r2
    834e:	e4ec      	b.n	7d2a <_vfprintf_r+0x114a>
    8350:	2e00      	cmp	r6, #0
    8352:	d105      	bne.n	8360 <_vfprintf_r+0x1780>
    8354:	9907      	ldr	r1, [sp, #28]
    8356:	2001      	movs	r0, #1
    8358:	900c      	str	r0, [sp, #48]	; 0x30
    835a:	4201      	tst	r1, r0
    835c:	d100      	bne.n	8360 <_vfprintf_r+0x1780>
    835e:	e76d      	b.n	823c <_vfprintf_r+0x165c>
    8360:	3602      	adds	r6, #2
    8362:	960c      	str	r6, [sp, #48]	; 0x30
    8364:	e76a      	b.n	823c <_vfprintf_r+0x165c>
    8366:	4e10      	ldr	r6, [pc, #64]	; (83a8 <_vfprintf_r+0x17c8>)
    8368:	1c1f      	adds	r7, r3, #0
    836a:	3708      	adds	r7, #8
    836c:	46b0      	mov	r8, r6
    836e:	e55f      	b.n	7e30 <_vfprintf_r+0x1250>
    8370:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8372:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    8374:	680e      	ldr	r6, [r1, #0]
    8376:	3704      	adds	r7, #4
    8378:	2e00      	cmp	r6, #0
    837a:	db01      	blt.n	8380 <_vfprintf_r+0x17a0>
    837c:	f7fe ffcc 	bl	7318 <_vfprintf_r+0x738>
    8380:	9e08      	ldr	r6, [sp, #32]
    8382:	7833      	ldrb	r3, [r6, #0]
    8384:	2601      	movs	r6, #1
    8386:	970f      	str	r7, [sp, #60]	; 0x3c
    8388:	4276      	negs	r6, r6
    838a:	f7fe fcac 	bl	6ce6 <_vfprintf_r+0x106>
    838e:	2301      	movs	r3, #1
    8390:	425b      	negs	r3, r3
    8392:	930d      	str	r3, [sp, #52]	; 0x34
    8394:	f7fe fe5f 	bl	7056 <_vfprintf_r+0x476>
    8398:	4a03      	ldr	r2, [pc, #12]	; (83a8 <_vfprintf_r+0x17c8>)
    839a:	4690      	mov	r8, r2
    839c:	e676      	b.n	808c <_vfprintf_r+0x14ac>
    839e:	46c0      	nop			; (mov r8, r8)
	...
    83a8:	0000e064 	.word	0x0000e064
    83ac:	0000055c 	.word	0x0000055c

000083b0 <vfprintf>:
    83b0:	b538      	push	{r3, r4, r5, lr}
    83b2:	1c13      	adds	r3, r2, #0
    83b4:	4a05      	ldr	r2, [pc, #20]	; (83cc <vfprintf+0x1c>)
    83b6:	1c05      	adds	r5, r0, #0
    83b8:	1c0c      	adds	r4, r1, #0
    83ba:	6810      	ldr	r0, [r2, #0]
    83bc:	1c29      	adds	r1, r5, #0
    83be:	1c22      	adds	r2, r4, #0
    83c0:	f7fe fc0e 	bl	6be0 <_vfprintf_r>
    83c4:	bc38      	pop	{r3, r4, r5}
    83c6:	bc02      	pop	{r1}
    83c8:	4708      	bx	r1
    83ca:	46c0      	nop			; (mov r8, r8)
    83cc:	40000000 	.word	0x40000000

000083d0 <__swbuf_r>:
    83d0:	b570      	push	{r4, r5, r6, lr}
    83d2:	1c06      	adds	r6, r0, #0
    83d4:	1c0d      	adds	r5, r1, #0
    83d6:	1c14      	adds	r4, r2, #0
    83d8:	2800      	cmp	r0, #0
    83da:	d002      	beq.n	83e2 <__swbuf_r+0x12>
    83dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    83de:	2b00      	cmp	r3, #0
    83e0:	d034      	beq.n	844c <__swbuf_r+0x7c>
    83e2:	69a3      	ldr	r3, [r4, #24]
    83e4:	89a2      	ldrh	r2, [r4, #12]
    83e6:	60a3      	str	r3, [r4, #8]
    83e8:	1c13      	adds	r3, r2, #0
    83ea:	0711      	lsls	r1, r2, #28
    83ec:	d524      	bpl.n	8438 <__swbuf_r+0x68>
    83ee:	6921      	ldr	r1, [r4, #16]
    83f0:	2900      	cmp	r1, #0
    83f2:	d021      	beq.n	8438 <__swbuf_r+0x68>
    83f4:	2080      	movs	r0, #128	; 0x80
    83f6:	0180      	lsls	r0, r0, #6
    83f8:	4203      	tst	r3, r0
    83fa:	d016      	beq.n	842a <__swbuf_r+0x5a>
    83fc:	6823      	ldr	r3, [r4, #0]
    83fe:	1a5a      	subs	r2, r3, r1
    8400:	6961      	ldr	r1, [r4, #20]
    8402:	428a      	cmp	r2, r1
    8404:	da31      	bge.n	846a <__swbuf_r+0x9a>
    8406:	3201      	adds	r2, #1
    8408:	68a1      	ldr	r1, [r4, #8]
    840a:	062d      	lsls	r5, r5, #24
    840c:	0e2d      	lsrs	r5, r5, #24
    840e:	3901      	subs	r1, #1
    8410:	60a1      	str	r1, [r4, #8]
    8412:	701d      	strb	r5, [r3, #0]
    8414:	3301      	adds	r3, #1
    8416:	6023      	str	r3, [r4, #0]
    8418:	6963      	ldr	r3, [r4, #20]
    841a:	4293      	cmp	r3, r2
    841c:	d01c      	beq.n	8458 <__swbuf_r+0x88>
    841e:	2d0a      	cmp	r5, #10
    8420:	d017      	beq.n	8452 <__swbuf_r+0x82>
    8422:	1c28      	adds	r0, r5, #0
    8424:	bc70      	pop	{r4, r5, r6}
    8426:	bc02      	pop	{r1}
    8428:	4708      	bx	r1
    842a:	4302      	orrs	r2, r0
    842c:	81a2      	strh	r2, [r4, #12]
    842e:	4b18      	ldr	r3, [pc, #96]	; (8490 <__swbuf_r+0xc0>)
    8430:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8432:	4013      	ands	r3, r2
    8434:	6663      	str	r3, [r4, #100]	; 0x64
    8436:	e7e1      	b.n	83fc <__swbuf_r+0x2c>
    8438:	1c30      	adds	r0, r6, #0
    843a:	1c21      	adds	r1, r4, #0
    843c:	f000 f838 	bl	84b0 <__swsetup_r>
    8440:	2800      	cmp	r0, #0
    8442:	d11b      	bne.n	847c <__swbuf_r+0xac>
    8444:	89a2      	ldrh	r2, [r4, #12]
    8446:	6921      	ldr	r1, [r4, #16]
    8448:	1c13      	adds	r3, r2, #0
    844a:	e7d3      	b.n	83f4 <__swbuf_r+0x24>
    844c:	f7fc f9ce 	bl	47ec <__sinit>
    8450:	e7c7      	b.n	83e2 <__swbuf_r+0x12>
    8452:	89a3      	ldrh	r3, [r4, #12]
    8454:	07da      	lsls	r2, r3, #31
    8456:	d5e4      	bpl.n	8422 <__swbuf_r+0x52>
    8458:	1c30      	adds	r0, r6, #0
    845a:	1c21      	adds	r1, r4, #0
    845c:	f7fc f8d2 	bl	4604 <_fflush_r>
    8460:	2800      	cmp	r0, #0
    8462:	d0de      	beq.n	8422 <__swbuf_r+0x52>
    8464:	2501      	movs	r5, #1
    8466:	426d      	negs	r5, r5
    8468:	e7db      	b.n	8422 <__swbuf_r+0x52>
    846a:	1c30      	adds	r0, r6, #0
    846c:	1c21      	adds	r1, r4, #0
    846e:	f7fc f8c9 	bl	4604 <_fflush_r>
    8472:	2800      	cmp	r0, #0
    8474:	d1f6      	bne.n	8464 <__swbuf_r+0x94>
    8476:	6823      	ldr	r3, [r4, #0]
    8478:	2201      	movs	r2, #1
    847a:	e7c5      	b.n	8408 <__swbuf_r+0x38>
    847c:	89a3      	ldrh	r3, [r4, #12]
    847e:	2240      	movs	r2, #64	; 0x40
    8480:	4313      	orrs	r3, r2
    8482:	81a3      	strh	r3, [r4, #12]
    8484:	2501      	movs	r5, #1
    8486:	2309      	movs	r3, #9
    8488:	6033      	str	r3, [r6, #0]
    848a:	426d      	negs	r5, r5
    848c:	e7c9      	b.n	8422 <__swbuf_r+0x52>
    848e:	46c0      	nop			; (mov r8, r8)
    8490:	ffffdfff 	.word	0xffffdfff

00008494 <__swbuf>:
    8494:	b508      	push	{r3, lr}
    8496:	1c0a      	adds	r2, r1, #0
    8498:	4904      	ldr	r1, [pc, #16]	; (84ac <__swbuf+0x18>)
    849a:	1c03      	adds	r3, r0, #0
    849c:	6808      	ldr	r0, [r1, #0]
    849e:	1c19      	adds	r1, r3, #0
    84a0:	f7ff ff96 	bl	83d0 <__swbuf_r>
    84a4:	bc08      	pop	{r3}
    84a6:	bc02      	pop	{r1}
    84a8:	4708      	bx	r1
    84aa:	46c0      	nop			; (mov r8, r8)
    84ac:	40000000 	.word	0x40000000

000084b0 <__swsetup_r>:
    84b0:	b538      	push	{r3, r4, r5, lr}
    84b2:	4b2e      	ldr	r3, [pc, #184]	; (856c <__swsetup_r+0xbc>)
    84b4:	1c05      	adds	r5, r0, #0
    84b6:	6818      	ldr	r0, [r3, #0]
    84b8:	1c0c      	adds	r4, r1, #0
    84ba:	2800      	cmp	r0, #0
    84bc:	d002      	beq.n	84c4 <__swsetup_r+0x14>
    84be:	6b83      	ldr	r3, [r0, #56]	; 0x38
    84c0:	2b00      	cmp	r3, #0
    84c2:	d020      	beq.n	8506 <__swsetup_r+0x56>
    84c4:	89a1      	ldrh	r1, [r4, #12]
    84c6:	1c0a      	adds	r2, r1, #0
    84c8:	1c0b      	adds	r3, r1, #0
    84ca:	0708      	lsls	r0, r1, #28
    84cc:	d52c      	bpl.n	8528 <__swsetup_r+0x78>
    84ce:	6922      	ldr	r2, [r4, #16]
    84d0:	2a00      	cmp	r2, #0
    84d2:	d01b      	beq.n	850c <__swsetup_r+0x5c>
    84d4:	2101      	movs	r1, #1
    84d6:	4019      	ands	r1, r3
    84d8:	d00a      	beq.n	84f0 <__swsetup_r+0x40>
    84da:	2300      	movs	r3, #0
    84dc:	60a3      	str	r3, [r4, #8]
    84de:	6963      	ldr	r3, [r4, #20]
    84e0:	2000      	movs	r0, #0
    84e2:	425b      	negs	r3, r3
    84e4:	61a3      	str	r3, [r4, #24]
    84e6:	4282      	cmp	r2, r0
    84e8:	d009      	beq.n	84fe <__swsetup_r+0x4e>
    84ea:	bc38      	pop	{r3, r4, r5}
    84ec:	bc02      	pop	{r1}
    84ee:	4708      	bx	r1
    84f0:	0798      	lsls	r0, r3, #30
    84f2:	d400      	bmi.n	84f6 <__swsetup_r+0x46>
    84f4:	6961      	ldr	r1, [r4, #20]
    84f6:	2000      	movs	r0, #0
    84f8:	60a1      	str	r1, [r4, #8]
    84fa:	4282      	cmp	r2, r0
    84fc:	d1f5      	bne.n	84ea <__swsetup_r+0x3a>
    84fe:	89a0      	ldrh	r0, [r4, #12]
    8500:	0600      	lsls	r0, r0, #24
    8502:	17c0      	asrs	r0, r0, #31
    8504:	e7f1      	b.n	84ea <__swsetup_r+0x3a>
    8506:	f7fc f971 	bl	47ec <__sinit>
    850a:	e7db      	b.n	84c4 <__swsetup_r+0x14>
    850c:	20a0      	movs	r0, #160	; 0xa0
    850e:	0080      	lsls	r0, r0, #2
    8510:	2180      	movs	r1, #128	; 0x80
    8512:	4018      	ands	r0, r3
    8514:	0089      	lsls	r1, r1, #2
    8516:	4288      	cmp	r0, r1
    8518:	d0dc      	beq.n	84d4 <__swsetup_r+0x24>
    851a:	1c28      	adds	r0, r5, #0
    851c:	1c21      	adds	r1, r4, #0
    851e:	f001 fabb 	bl	9a98 <__smakebuf_r>
    8522:	89a3      	ldrh	r3, [r4, #12]
    8524:	6922      	ldr	r2, [r4, #16]
    8526:	e7d5      	b.n	84d4 <__swsetup_r+0x24>
    8528:	06c8      	lsls	r0, r1, #27
    852a:	d506      	bpl.n	853a <__swsetup_r+0x8a>
    852c:	0748      	lsls	r0, r1, #29
    852e:	d407      	bmi.n	8540 <__swsetup_r+0x90>
    8530:	6922      	ldr	r2, [r4, #16]
    8532:	2308      	movs	r3, #8
    8534:	430b      	orrs	r3, r1
    8536:	81a3      	strh	r3, [r4, #12]
    8538:	e7ca      	b.n	84d0 <__swsetup_r+0x20>
    853a:	2001      	movs	r0, #1
    853c:	4240      	negs	r0, r0
    853e:	e7d4      	b.n	84ea <__swsetup_r+0x3a>
    8540:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8542:	2900      	cmp	r1, #0
    8544:	d009      	beq.n	855a <__swsetup_r+0xaa>
    8546:	1c23      	adds	r3, r4, #0
    8548:	3340      	adds	r3, #64	; 0x40
    854a:	4299      	cmp	r1, r3
    854c:	d003      	beq.n	8556 <__swsetup_r+0xa6>
    854e:	1c28      	adds	r0, r5, #0
    8550:	f7fc fa8a 	bl	4a68 <_free_r>
    8554:	89a2      	ldrh	r2, [r4, #12]
    8556:	2300      	movs	r3, #0
    8558:	6323      	str	r3, [r4, #48]	; 0x30
    855a:	2324      	movs	r3, #36	; 0x24
    855c:	1c11      	adds	r1, r2, #0
    855e:	6922      	ldr	r2, [r4, #16]
    8560:	4399      	bics	r1, r3
    8562:	3b24      	subs	r3, #36	; 0x24
    8564:	6063      	str	r3, [r4, #4]
    8566:	6022      	str	r2, [r4, #0]
    8568:	e7e3      	b.n	8532 <__swsetup_r+0x82>
    856a:	46c0      	nop			; (mov r8, r8)
    856c:	40000000 	.word	0x40000000

00008570 <quorem>:
    8570:	b5f0      	push	{r4, r5, r6, r7, lr}
    8572:	465f      	mov	r7, fp
    8574:	4656      	mov	r6, sl
    8576:	464d      	mov	r5, r9
    8578:	4644      	mov	r4, r8
    857a:	b4f0      	push	{r4, r5, r6, r7}
    857c:	6902      	ldr	r2, [r0, #16]
    857e:	690b      	ldr	r3, [r1, #16]
    8580:	b083      	sub	sp, #12
    8582:	1c06      	adds	r6, r0, #0
    8584:	2000      	movs	r0, #0
    8586:	9100      	str	r1, [sp, #0]
    8588:	4681      	mov	r9, r0
    858a:	4293      	cmp	r3, r2
    858c:	dd00      	ble.n	8590 <quorem+0x20>
    858e:	e096      	b.n	86be <quorem+0x14e>
    8590:	1e5d      	subs	r5, r3, #1
    8592:	3303      	adds	r3, #3
    8594:	009b      	lsls	r3, r3, #2
    8596:	18ca      	adds	r2, r1, r3
    8598:	1c0c      	adds	r4, r1, #0
    859a:	1d11      	adds	r1, r2, #4
    859c:	4688      	mov	r8, r1
    859e:	6851      	ldr	r1, [r2, #4]
    85a0:	18f3      	adds	r3, r6, r3
    85a2:	2714      	movs	r7, #20
    85a4:	19bf      	adds	r7, r7, r6
    85a6:	3101      	adds	r1, #1
    85a8:	6858      	ldr	r0, [r3, #4]
    85aa:	9701      	str	r7, [sp, #4]
    85ac:	f005 fb54 	bl	dc58 <____aeabi_uidiv_from_thumb>
    85b0:	3414      	adds	r4, #20
    85b2:	1c07      	adds	r7, r0, #0
    85b4:	4548      	cmp	r0, r9
    85b6:	d041      	beq.n	863c <quorem+0xcc>
    85b8:	1c29      	adds	r1, r5, #0
    85ba:	9b01      	ldr	r3, [sp, #4]
    85bc:	464d      	mov	r5, r9
    85be:	46b3      	mov	fp, r6
    85c0:	1c22      	adds	r2, r4, #0
    85c2:	464e      	mov	r6, r9
    85c4:	468a      	mov	sl, r1
    85c6:	46a1      	mov	r9, r4
    85c8:	ca01      	ldmia	r2!, {r0}
    85ca:	0404      	lsls	r4, r0, #16
    85cc:	0c24      	lsrs	r4, r4, #16
    85ce:	437c      	muls	r4, r7
    85d0:	0c01      	lsrs	r1, r0, #16
    85d2:	4379      	muls	r1, r7
    85d4:	6818      	ldr	r0, [r3, #0]
    85d6:	0400      	lsls	r0, r0, #16
    85d8:	1934      	adds	r4, r6, r4
    85da:	0c00      	lsrs	r0, r0, #16
    85dc:	0c26      	lsrs	r6, r4, #16
    85de:	4684      	mov	ip, r0
    85e0:	0424      	lsls	r4, r4, #16
    85e2:	4465      	add	r5, ip
    85e4:	0c24      	lsrs	r4, r4, #16
    85e6:	1b2c      	subs	r4, r5, r4
    85e8:	1871      	adds	r1, r6, r1
    85ea:	681d      	ldr	r5, [r3, #0]
    85ec:	0c0e      	lsrs	r6, r1, #16
    85ee:	0409      	lsls	r1, r1, #16
    85f0:	0c28      	lsrs	r0, r5, #16
    85f2:	0c09      	lsrs	r1, r1, #16
    85f4:	1425      	asrs	r5, r4, #16
    85f6:	1a40      	subs	r0, r0, r1
    85f8:	1940      	adds	r0, r0, r5
    85fa:	0424      	lsls	r4, r4, #16
    85fc:	1405      	asrs	r5, r0, #16
    85fe:	0c24      	lsrs	r4, r4, #16
    8600:	0400      	lsls	r0, r0, #16
    8602:	4320      	orrs	r0, r4
    8604:	c301      	stmia	r3!, {r0}
    8606:	4590      	cmp	r8, r2
    8608:	d2de      	bcs.n	85c8 <quorem+0x58>
    860a:	4655      	mov	r5, sl
    860c:	1d2b      	adds	r3, r5, #4
    860e:	465e      	mov	r6, fp
    8610:	009b      	lsls	r3, r3, #2
    8612:	18f3      	adds	r3, r6, r3
    8614:	685a      	ldr	r2, [r3, #4]
    8616:	464c      	mov	r4, r9
    8618:	2a00      	cmp	r2, #0
    861a:	d10f      	bne.n	863c <quorem+0xcc>
    861c:	9801      	ldr	r0, [sp, #4]
    861e:	4298      	cmp	r0, r3
    8620:	d20b      	bcs.n	863a <quorem+0xca>
    8622:	681a      	ldr	r2, [r3, #0]
    8624:	2a00      	cmp	r2, #0
    8626:	d108      	bne.n	863a <quorem+0xca>
    8628:	1c01      	adds	r1, r0, #0
    862a:	e002      	b.n	8632 <quorem+0xc2>
    862c:	681a      	ldr	r2, [r3, #0]
    862e:	2a00      	cmp	r2, #0
    8630:	d103      	bne.n	863a <quorem+0xca>
    8632:	3b04      	subs	r3, #4
    8634:	3d01      	subs	r5, #1
    8636:	4299      	cmp	r1, r3
    8638:	d3f8      	bcc.n	862c <quorem+0xbc>
    863a:	6135      	str	r5, [r6, #16]
    863c:	1c30      	adds	r0, r6, #0
    863e:	9900      	ldr	r1, [sp, #0]
    8640:	f001 fde2 	bl	a208 <__mcmp>
    8644:	2800      	cmp	r0, #0
    8646:	db39      	blt.n	86bc <quorem+0x14c>
    8648:	2100      	movs	r1, #0
    864a:	1c2a      	adds	r2, r5, #0
    864c:	3701      	adds	r7, #1
    864e:	1c0d      	adds	r5, r1, #0
    8650:	9b01      	ldr	r3, [sp, #4]
    8652:	1c31      	adds	r1, r6, #0
    8654:	46ba      	mov	sl, r7
    8656:	4646      	mov	r6, r8
    8658:	4694      	mov	ip, r2
    865a:	4688      	mov	r8, r1
    865c:	6819      	ldr	r1, [r3, #0]
    865e:	cc01      	ldmia	r4!, {r0}
    8660:	040a      	lsls	r2, r1, #16
    8662:	0c12      	lsrs	r2, r2, #16
    8664:	4691      	mov	r9, r2
    8666:	0402      	lsls	r2, r0, #16
    8668:	0c12      	lsrs	r2, r2, #16
    866a:	464f      	mov	r7, r9
    866c:	1aba      	subs	r2, r7, r2
    866e:	1952      	adds	r2, r2, r5
    8670:	0c09      	lsrs	r1, r1, #16
    8672:	0c00      	lsrs	r0, r0, #16
    8674:	1415      	asrs	r5, r2, #16
    8676:	1a09      	subs	r1, r1, r0
    8678:	1949      	adds	r1, r1, r5
    867a:	0412      	lsls	r2, r2, #16
    867c:	140d      	asrs	r5, r1, #16
    867e:	0c12      	lsrs	r2, r2, #16
    8680:	0409      	lsls	r1, r1, #16
    8682:	4311      	orrs	r1, r2
    8684:	c302      	stmia	r3!, {r1}
    8686:	42a6      	cmp	r6, r4
    8688:	d2e8      	bcs.n	865c <quorem+0xec>
    868a:	4665      	mov	r5, ip
    868c:	1d2b      	adds	r3, r5, #4
    868e:	4646      	mov	r6, r8
    8690:	009b      	lsls	r3, r3, #2
    8692:	18f3      	adds	r3, r6, r3
    8694:	685a      	ldr	r2, [r3, #4]
    8696:	4657      	mov	r7, sl
    8698:	2a00      	cmp	r2, #0
    869a:	d10f      	bne.n	86bc <quorem+0x14c>
    869c:	9801      	ldr	r0, [sp, #4]
    869e:	4298      	cmp	r0, r3
    86a0:	d20b      	bcs.n	86ba <quorem+0x14a>
    86a2:	681a      	ldr	r2, [r3, #0]
    86a4:	2a00      	cmp	r2, #0
    86a6:	d108      	bne.n	86ba <quorem+0x14a>
    86a8:	1c01      	adds	r1, r0, #0
    86aa:	e002      	b.n	86b2 <quorem+0x142>
    86ac:	681a      	ldr	r2, [r3, #0]
    86ae:	2a00      	cmp	r2, #0
    86b0:	d103      	bne.n	86ba <quorem+0x14a>
    86b2:	3b04      	subs	r3, #4
    86b4:	3d01      	subs	r5, #1
    86b6:	4299      	cmp	r1, r3
    86b8:	d3f8      	bcc.n	86ac <quorem+0x13c>
    86ba:	6135      	str	r5, [r6, #16]
    86bc:	46b9      	mov	r9, r7
    86be:	b003      	add	sp, #12
    86c0:	4648      	mov	r0, r9
    86c2:	bc3c      	pop	{r2, r3, r4, r5}
    86c4:	4690      	mov	r8, r2
    86c6:	4699      	mov	r9, r3
    86c8:	46a2      	mov	sl, r4
    86ca:	46ab      	mov	fp, r5
    86cc:	bcf0      	pop	{r4, r5, r6, r7}
    86ce:	bc02      	pop	{r1}
    86d0:	4708      	bx	r1
    86d2:	46c0      	nop			; (mov r8, r8)

000086d4 <_dtoa_r>:
    86d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    86d6:	465f      	mov	r7, fp
    86d8:	4656      	mov	r6, sl
    86da:	464d      	mov	r5, r9
    86dc:	4644      	mov	r4, r8
    86de:	b4f0      	push	{r4, r5, r6, r7}
    86e0:	1c04      	adds	r4, r0, #0
    86e2:	b09d      	sub	sp, #116	; 0x74
    86e4:	9829      	ldr	r0, [sp, #164]	; 0xa4
    86e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    86e8:	4680      	mov	r8, r0
    86ea:	1c16      	adds	r6, r2, #0
    86ec:	1c1f      	adds	r7, r3, #0
    86ee:	2900      	cmp	r1, #0
    86f0:	d009      	beq.n	8706 <_dtoa_r+0x32>
    86f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    86f4:	2201      	movs	r2, #1
    86f6:	409a      	lsls	r2, r3
    86f8:	604b      	str	r3, [r1, #4]
    86fa:	608a      	str	r2, [r1, #8]
    86fc:	1c20      	adds	r0, r4, #0
    86fe:	f001 fafd 	bl	9cfc <_Bfree>
    8702:	2300      	movs	r3, #0
    8704:	6423      	str	r3, [r4, #64]	; 0x40
    8706:	1e3d      	subs	r5, r7, #0
    8708:	db3e      	blt.n	8788 <_dtoa_r+0xb4>
    870a:	2300      	movs	r3, #0
    870c:	4642      	mov	r2, r8
    870e:	6013      	str	r3, [r2, #0]
    8710:	4bbb      	ldr	r3, [pc, #748]	; (8a00 <_dtoa_r+0x32c>)
    8712:	1c2a      	adds	r2, r5, #0
    8714:	401a      	ands	r2, r3
    8716:	429a      	cmp	r2, r3
    8718:	d024      	beq.n	8764 <_dtoa_r+0x90>
    871a:	2301      	movs	r3, #1
    871c:	4698      	mov	r8, r3
    871e:	1c39      	adds	r1, r7, #0
    8720:	4bac      	ldr	r3, [pc, #688]	; (89d4 <_dtoa_r+0x300>)
    8722:	4aab      	ldr	r2, [pc, #684]	; (89d0 <_dtoa_r+0x2fc>)
    8724:	1c30      	adds	r0, r6, #0
    8726:	9602      	str	r6, [sp, #8]
    8728:	9703      	str	r7, [sp, #12]
    872a:	f005 fa69 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    872e:	4243      	negs	r3, r0
    8730:	4158      	adcs	r0, r3
    8732:	4240      	negs	r0, r0
    8734:	4641      	mov	r1, r8
    8736:	4001      	ands	r1, r0
    8738:	060b      	lsls	r3, r1, #24
    873a:	2b00      	cmp	r3, #0
    873c:	d12b      	bne.n	8796 <_dtoa_r+0xc2>
    873e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    8740:	3301      	adds	r3, #1
    8742:	6013      	str	r3, [r2, #0]
    8744:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    8746:	2b00      	cmp	r3, #0
    8748:	d100      	bne.n	874c <_dtoa_r+0x78>
    874a:	e1f7      	b.n	8b3c <_dtoa_r+0x468>
    874c:	48ad      	ldr	r0, [pc, #692]	; (8a04 <_dtoa_r+0x330>)
    874e:	6018      	str	r0, [r3, #0]
    8750:	3801      	subs	r0, #1
    8752:	b01d      	add	sp, #116	; 0x74
    8754:	bc3c      	pop	{r2, r3, r4, r5}
    8756:	4690      	mov	r8, r2
    8758:	4699      	mov	r9, r3
    875a:	46a2      	mov	sl, r4
    875c:	46ab      	mov	fp, r5
    875e:	bcf0      	pop	{r4, r5, r6, r7}
    8760:	bc02      	pop	{r1}
    8762:	4708      	bx	r1
    8764:	4ba8      	ldr	r3, [pc, #672]	; (8a08 <_dtoa_r+0x334>)
    8766:	9828      	ldr	r0, [sp, #160]	; 0xa0
    8768:	6003      	str	r3, [r0, #0]
    876a:	2e00      	cmp	r6, #0
    876c:	d100      	bne.n	8770 <_dtoa_r+0x9c>
    876e:	e1bc      	b.n	8aea <_dtoa_r+0x416>
    8770:	48a6      	ldr	r0, [pc, #664]	; (8a0c <_dtoa_r+0x338>)
    8772:	992a      	ldr	r1, [sp, #168]	; 0xa8
    8774:	2900      	cmp	r1, #0
    8776:	d0ec      	beq.n	8752 <_dtoa_r+0x7e>
    8778:	78c2      	ldrb	r2, [r0, #3]
    877a:	1cc3      	adds	r3, r0, #3
    877c:	2a00      	cmp	r2, #0
    877e:	d000      	beq.n	8782 <_dtoa_r+0xae>
    8780:	3305      	adds	r3, #5
    8782:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    8784:	6013      	str	r3, [r2, #0]
    8786:	e7e4      	b.n	8752 <_dtoa_r+0x7e>
    8788:	2301      	movs	r3, #1
    878a:	409d      	lsls	r5, r3
    878c:	4641      	mov	r1, r8
    878e:	40dd      	lsrs	r5, r3
    8790:	600b      	str	r3, [r1, #0]
    8792:	1c2f      	adds	r7, r5, #0
    8794:	e7bc      	b.n	8710 <_dtoa_r+0x3c>
    8796:	ab1a      	add	r3, sp, #104	; 0x68
    8798:	9300      	str	r3, [sp, #0]
    879a:	ab1b      	add	r3, sp, #108	; 0x6c
    879c:	9301      	str	r3, [sp, #4]
    879e:	1c20      	adds	r0, r4, #0
    87a0:	9a02      	ldr	r2, [sp, #8]
    87a2:	9b03      	ldr	r3, [sp, #12]
    87a4:	f001 fe46 	bl	a434 <__d2b>
    87a8:	006b      	lsls	r3, r5, #1
    87aa:	0d5b      	lsrs	r3, r3, #21
    87ac:	9007      	str	r0, [sp, #28]
    87ae:	2b00      	cmp	r3, #0
    87b0:	d100      	bne.n	87b4 <_dtoa_r+0xe0>
    87b2:	e1a0      	b.n	8af6 <_dtoa_r+0x422>
    87b4:	9903      	ldr	r1, [sp, #12]
    87b6:	030a      	lsls	r2, r1, #12
    87b8:	4995      	ldr	r1, [pc, #596]	; (8a10 <_dtoa_r+0x33c>)
    87ba:	0b12      	lsrs	r2, r2, #12
    87bc:	4311      	orrs	r1, r2
    87be:	4a95      	ldr	r2, [pc, #596]	; (8a14 <_dtoa_r+0x340>)
    87c0:	2000      	movs	r0, #0
    87c2:	189d      	adds	r5, r3, r2
    87c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    87c6:	9103      	str	r1, [sp, #12]
    87c8:	9016      	str	r0, [sp, #88]	; 0x58
    87ca:	4699      	mov	r9, r3
    87cc:	9802      	ldr	r0, [sp, #8]
    87ce:	9903      	ldr	r1, [sp, #12]
    87d0:	4a81      	ldr	r2, [pc, #516]	; (89d8 <_dtoa_r+0x304>)
    87d2:	4b82      	ldr	r3, [pc, #520]	; (89dc <_dtoa_r+0x308>)
    87d4:	f005 faac 	bl	dd30 <____aeabi_dsub_from_thumb>
    87d8:	4a81      	ldr	r2, [pc, #516]	; (89e0 <_dtoa_r+0x30c>)
    87da:	4b82      	ldr	r3, [pc, #520]	; (89e4 <_dtoa_r+0x310>)
    87dc:	f005 fa4a 	bl	dc74 <____aeabi_dmul_from_thumb>
    87e0:	4a81      	ldr	r2, [pc, #516]	; (89e8 <_dtoa_r+0x314>)
    87e2:	4b82      	ldr	r3, [pc, #520]	; (89ec <_dtoa_r+0x318>)
    87e4:	f005 fa4e 	bl	dc84 <____aeabi_dadd_from_thumb>
    87e8:	9004      	str	r0, [sp, #16]
    87ea:	9105      	str	r1, [sp, #20]
    87ec:	1c28      	adds	r0, r5, #0
    87ee:	f005 fa95 	bl	dd1c <____aeabi_i2d_from_thumb>
    87f2:	4a7f      	ldr	r2, [pc, #508]	; (89f0 <_dtoa_r+0x31c>)
    87f4:	4b7f      	ldr	r3, [pc, #508]	; (89f4 <_dtoa_r+0x320>)
    87f6:	f005 fa3d 	bl	dc74 <____aeabi_dmul_from_thumb>
    87fa:	1c02      	adds	r2, r0, #0
    87fc:	1c0b      	adds	r3, r1, #0
    87fe:	9804      	ldr	r0, [sp, #16]
    8800:	9905      	ldr	r1, [sp, #20]
    8802:	f005 fa3f 	bl	dc84 <____aeabi_dadd_from_thumb>
    8806:	9002      	str	r0, [sp, #8]
    8808:	9103      	str	r1, [sp, #12]
    880a:	f005 fa43 	bl	dc94 <____aeabi_d2iz_from_thumb>
    880e:	4b71      	ldr	r3, [pc, #452]	; (89d4 <_dtoa_r+0x300>)
    8810:	4a6f      	ldr	r2, [pc, #444]	; (89d0 <_dtoa_r+0x2fc>)
    8812:	9004      	str	r0, [sp, #16]
    8814:	9802      	ldr	r0, [sp, #8]
    8816:	9903      	ldr	r1, [sp, #12]
    8818:	f005 fa00 	bl	dc1c <____aeabi_dcmplt_from_thumb>
    881c:	2800      	cmp	r0, #0
    881e:	d00b      	beq.n	8838 <_dtoa_r+0x164>
    8820:	9804      	ldr	r0, [sp, #16]
    8822:	f005 fa7b 	bl	dd1c <____aeabi_i2d_from_thumb>
    8826:	9a02      	ldr	r2, [sp, #8]
    8828:	9b03      	ldr	r3, [sp, #12]
    882a:	f005 f9e9 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    882e:	4243      	negs	r3, r0
    8830:	4143      	adcs	r3, r0
    8832:	9804      	ldr	r0, [sp, #16]
    8834:	1ac0      	subs	r0, r0, r3
    8836:	9004      	str	r0, [sp, #16]
    8838:	9a04      	ldr	r2, [sp, #16]
    883a:	2101      	movs	r1, #1
    883c:	9111      	str	r1, [sp, #68]	; 0x44
    883e:	2a16      	cmp	r2, #22
    8840:	d810      	bhi.n	8864 <_dtoa_r+0x190>
    8842:	00d3      	lsls	r3, r2, #3
    8844:	4a74      	ldr	r2, [pc, #464]	; (8a18 <_dtoa_r+0x344>)
    8846:	18d3      	adds	r3, r2, r3
    8848:	6818      	ldr	r0, [r3, #0]
    884a:	6859      	ldr	r1, [r3, #4]
    884c:	1c32      	adds	r2, r6, #0
    884e:	1c3b      	adds	r3, r7, #0
    8850:	f005 fa34 	bl	dcbc <____aeabi_dcmpgt_from_thumb>
    8854:	2800      	cmp	r0, #0
    8856:	d100      	bne.n	885a <_dtoa_r+0x186>
    8858:	e31f      	b.n	8e9a <_dtoa_r+0x7c6>
    885a:	9b04      	ldr	r3, [sp, #16]
    885c:	2000      	movs	r0, #0
    885e:	3b01      	subs	r3, #1
    8860:	9304      	str	r3, [sp, #16]
    8862:	9011      	str	r0, [sp, #68]	; 0x44
    8864:	2201      	movs	r2, #1
    8866:	4252      	negs	r2, r2
    8868:	1c13      	adds	r3, r2, #0
    886a:	444b      	add	r3, r9
    886c:	1b5d      	subs	r5, r3, r5
    886e:	d500      	bpl.n	8872 <_dtoa_r+0x19e>
    8870:	e308      	b.n	8e84 <_dtoa_r+0x7b0>
    8872:	46aa      	mov	sl, r5
    8874:	2500      	movs	r5, #0
    8876:	950f      	str	r5, [sp, #60]	; 0x3c
    8878:	9804      	ldr	r0, [sp, #16]
    887a:	2800      	cmp	r0, #0
    887c:	da00      	bge.n	8880 <_dtoa_r+0x1ac>
    887e:	e2f8      	b.n	8e72 <_dtoa_r+0x79e>
    8880:	2100      	movs	r1, #0
    8882:	9014      	str	r0, [sp, #80]	; 0x50
    8884:	9113      	str	r1, [sp, #76]	; 0x4c
    8886:	4482      	add	sl, r0
    8888:	9926      	ldr	r1, [sp, #152]	; 0x98
    888a:	2909      	cmp	r1, #9
    888c:	d900      	bls.n	8890 <_dtoa_r+0x1bc>
    888e:	e157      	b.n	8b40 <_dtoa_r+0x46c>
    8890:	2501      	movs	r5, #1
    8892:	2905      	cmp	r1, #5
    8894:	dd02      	ble.n	889c <_dtoa_r+0x1c8>
    8896:	3904      	subs	r1, #4
    8898:	9126      	str	r1, [sp, #152]	; 0x98
    889a:	3d01      	subs	r5, #1
    889c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    889e:	2a03      	cmp	r2, #3
    88a0:	d101      	bne.n	88a6 <_dtoa_r+0x1d2>
    88a2:	f000 fd03 	bl	92ac <_dtoa_r+0xbd8>
    88a6:	dc00      	bgt.n	88aa <_dtoa_r+0x1d6>
    88a8:	e306      	b.n	8eb8 <_dtoa_r+0x7e4>
    88aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
    88ac:	2b04      	cmp	r3, #4
    88ae:	d101      	bne.n	88b4 <_dtoa_r+0x1e0>
    88b0:	f000 fd0a 	bl	92c8 <_dtoa_r+0xbf4>
    88b4:	2b05      	cmp	r3, #5
    88b6:	d000      	beq.n	88ba <_dtoa_r+0x1e6>
    88b8:	e301      	b.n	8ebe <_dtoa_r+0x7ea>
    88ba:	2001      	movs	r0, #1
    88bc:	9012      	str	r0, [sp, #72]	; 0x48
    88be:	9a04      	ldr	r2, [sp, #16]
    88c0:	1c13      	adds	r3, r2, #0
    88c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    88c4:	189b      	adds	r3, r3, r2
    88c6:	1c18      	adds	r0, r3, #0
    88c8:	3001      	adds	r0, #1
    88ca:	9310      	str	r3, [sp, #64]	; 0x40
    88cc:	2800      	cmp	r0, #0
    88ce:	dc01      	bgt.n	88d4 <_dtoa_r+0x200>
    88d0:	f000 fd27 	bl	9322 <_dtoa_r+0xc4e>
    88d4:	900b      	str	r0, [sp, #44]	; 0x2c
    88d6:	2100      	movs	r1, #0
    88d8:	6461      	str	r1, [r4, #68]	; 0x44
    88da:	2304      	movs	r3, #4
    88dc:	2817      	cmp	r0, #23
    88de:	d801      	bhi.n	88e4 <_dtoa_r+0x210>
    88e0:	f000 fe82 	bl	95e8 <_dtoa_r+0xf14>
    88e4:	005b      	lsls	r3, r3, #1
    88e6:	1c1a      	adds	r2, r3, #0
    88e8:	3214      	adds	r2, #20
    88ea:	3101      	adds	r1, #1
    88ec:	4282      	cmp	r2, r0
    88ee:	d9f9      	bls.n	88e4 <_dtoa_r+0x210>
    88f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    88f2:	220e      	movs	r2, #14
    88f4:	2300      	movs	r3, #0
    88f6:	4282      	cmp	r2, r0
    88f8:	415b      	adcs	r3, r3
    88fa:	6461      	str	r1, [r4, #68]	; 0x44
    88fc:	1c20      	adds	r0, r4, #0
    88fe:	401d      	ands	r5, r3
    8900:	f001 f9d2 	bl	9ca8 <_Balloc>
    8904:	900a      	str	r0, [sp, #40]	; 0x28
    8906:	6420      	str	r0, [r4, #64]	; 0x40
    8908:	2d00      	cmp	r5, #0
    890a:	d000      	beq.n	890e <_dtoa_r+0x23a>
    890c:	e12b      	b.n	8b66 <_dtoa_r+0x492>
    890e:	9a04      	ldr	r2, [sp, #16]
    8910:	9d04      	ldr	r5, [sp, #16]
    8912:	0fd1      	lsrs	r1, r2, #31
    8914:	2300      	movs	r3, #0
    8916:	220e      	movs	r2, #14
    8918:	42aa      	cmp	r2, r5
    891a:	4159      	adcs	r1, r3
    891c:	0609      	lsls	r1, r1, #24
    891e:	981a      	ldr	r0, [sp, #104]	; 0x68
    8920:	4299      	cmp	r1, r3
    8922:	d100      	bne.n	8926 <_dtoa_r+0x252>
    8924:	e206      	b.n	8d34 <_dtoa_r+0x660>
    8926:	4298      	cmp	r0, r3
    8928:	da00      	bge.n	892c <_dtoa_r+0x258>
    892a:	e203      	b.n	8d34 <_dtoa_r+0x660>
    892c:	493a      	ldr	r1, [pc, #232]	; (8a18 <_dtoa_r+0x344>)
    892e:	00ea      	lsls	r2, r5, #3
    8930:	188a      	adds	r2, r1, r2
    8932:	6810      	ldr	r0, [r2, #0]
    8934:	6851      	ldr	r1, [r2, #4]
    8936:	9002      	str	r0, [sp, #8]
    8938:	9103      	str	r1, [sp, #12]
    893a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    893c:	4299      	cmp	r1, r3
    893e:	dc00      	bgt.n	8942 <_dtoa_r+0x26e>
    8940:	e2e1      	b.n	8f06 <_dtoa_r+0x832>
    8942:	9a02      	ldr	r2, [sp, #8]
    8944:	9b03      	ldr	r3, [sp, #12]
    8946:	1c30      	adds	r0, r6, #0
    8948:	1c39      	adds	r1, r7, #0
    894a:	f005 f9e3 	bl	dd14 <____aeabi_ddiv_from_thumb>
    894e:	f005 f9a1 	bl	dc94 <____aeabi_d2iz_from_thumb>
    8952:	4680      	mov	r8, r0
    8954:	f005 f9e2 	bl	dd1c <____aeabi_i2d_from_thumb>
    8958:	9a02      	ldr	r2, [sp, #8]
    895a:	9b03      	ldr	r3, [sp, #12]
    895c:	f005 f98a 	bl	dc74 <____aeabi_dmul_from_thumb>
    8960:	1c02      	adds	r2, r0, #0
    8962:	1c0b      	adds	r3, r1, #0
    8964:	1c30      	adds	r0, r6, #0
    8966:	1c39      	adds	r1, r7, #0
    8968:	f005 f9e2 	bl	dd30 <____aeabi_dsub_from_thumb>
    896c:	2530      	movs	r5, #48	; 0x30
    896e:	1c06      	adds	r6, r0, #0
    8970:	1c0f      	adds	r7, r1, #0
    8972:	1c02      	adds	r2, r0, #0
    8974:	1c0b      	adds	r3, r1, #0
    8976:	980a      	ldr	r0, [sp, #40]	; 0x28
    8978:	1c29      	adds	r1, r5, #0
    897a:	4441      	add	r1, r8
    897c:	7001      	strb	r1, [r0, #0]
    897e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8980:	1c05      	adds	r5, r0, #0
    8982:	3501      	adds	r5, #1
    8984:	2901      	cmp	r1, #1
    8986:	d100      	bne.n	898a <_dtoa_r+0x2b6>
    8988:	e07c      	b.n	8a84 <_dtoa_r+0x3b0>
    898a:	1c30      	adds	r0, r6, #0
    898c:	1c39      	adds	r1, r7, #0
    898e:	4a1a      	ldr	r2, [pc, #104]	; (89f8 <_dtoa_r+0x324>)
    8990:	4b1a      	ldr	r3, [pc, #104]	; (89fc <_dtoa_r+0x328>)
    8992:	f005 f96f 	bl	dc74 <____aeabi_dmul_from_thumb>
    8996:	1c06      	adds	r6, r0, #0
    8998:	2001      	movs	r0, #1
    899a:	4680      	mov	r8, r0
    899c:	4b0d      	ldr	r3, [pc, #52]	; (89d4 <_dtoa_r+0x300>)
    899e:	4a0c      	ldr	r2, [pc, #48]	; (89d0 <_dtoa_r+0x2fc>)
    89a0:	1c30      	adds	r0, r6, #0
    89a2:	1c0f      	adds	r7, r1, #0
    89a4:	f005 f92c 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    89a8:	4243      	negs	r3, r0
    89aa:	4143      	adcs	r3, r0
    89ac:	425b      	negs	r3, r3
    89ae:	4641      	mov	r1, r8
    89b0:	4019      	ands	r1, r3
    89b2:	060b      	lsls	r3, r1, #24
    89b4:	2b00      	cmp	r3, #0
    89b6:	d100      	bne.n	89ba <_dtoa_r+0x2e6>
    89b8:	e185      	b.n	8cc6 <_dtoa_r+0x5f2>
    89ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    89bc:	2201      	movs	r2, #1
    89be:	469b      	mov	fp, r3
    89c0:	1c23      	adds	r3, r4, #0
    89c2:	4692      	mov	sl, r2
    89c4:	1c14      	adds	r4, r2, #0
    89c6:	4699      	mov	r9, r3
    89c8:	e03c      	b.n	8a44 <_dtoa_r+0x370>
    89ca:	46c0      	nop			; (mov r8, r8)
    89cc:	46c0      	nop			; (mov r8, r8)
    89ce:	46c0      	nop			; (mov r8, r8)
	...
    89dc:	3ff80000 	.word	0x3ff80000
    89e0:	636f4361 	.word	0x636f4361
    89e4:	3fd287a7 	.word	0x3fd287a7
    89e8:	8b60c8b3 	.word	0x8b60c8b3
    89ec:	3fc68a28 	.word	0x3fc68a28
    89f0:	509f79fb 	.word	0x509f79fb
    89f4:	3fd34413 	.word	0x3fd34413
    89f8:	00000000 	.word	0x00000000
    89fc:	40240000 	.word	0x40240000
    8a00:	7ff00000 	.word	0x7ff00000
    8a04:	0000e95d 	.word	0x0000e95d
    8a08:	0000270f 	.word	0x0000270f
    8a0c:	0000e96c 	.word	0x0000e96c
    8a10:	3ff00000 	.word	0x3ff00000
    8a14:	fffffc01 	.word	0xfffffc01
    8a18:	0000e098 	.word	0x0000e098
    8a1c:	4bb3      	ldr	r3, [pc, #716]	; (8cec <_dtoa_r+0x618>)
    8a1e:	4ab2      	ldr	r2, [pc, #712]	; (8ce8 <_dtoa_r+0x614>)
    8a20:	f005 f928 	bl	dc74 <____aeabi_dmul_from_thumb>
    8a24:	4ab2      	ldr	r2, [pc, #712]	; (8cf0 <_dtoa_r+0x61c>)
    8a26:	4bb3      	ldr	r3, [pc, #716]	; (8cf4 <_dtoa_r+0x620>)
    8a28:	1c0f      	adds	r7, r1, #0
    8a2a:	1c06      	adds	r6, r0, #0
    8a2c:	f005 f8e8 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    8a30:	4243      	negs	r3, r0
    8a32:	4143      	adcs	r3, r0
    8a34:	425b      	negs	r3, r3
    8a36:	4651      	mov	r1, sl
    8a38:	400b      	ands	r3, r1
    8a3a:	061b      	lsls	r3, r3, #24
    8a3c:	2b00      	cmp	r3, #0
    8a3e:	d101      	bne.n	8a44 <_dtoa_r+0x370>
    8a40:	f000 fd05 	bl	944e <_dtoa_r+0xd7a>
    8a44:	9a02      	ldr	r2, [sp, #8]
    8a46:	9b03      	ldr	r3, [sp, #12]
    8a48:	1c30      	adds	r0, r6, #0
    8a4a:	1c39      	adds	r1, r7, #0
    8a4c:	f005 f962 	bl	dd14 <____aeabi_ddiv_from_thumb>
    8a50:	f005 f920 	bl	dc94 <____aeabi_d2iz_from_thumb>
    8a54:	4680      	mov	r8, r0
    8a56:	f005 f961 	bl	dd1c <____aeabi_i2d_from_thumb>
    8a5a:	9a02      	ldr	r2, [sp, #8]
    8a5c:	9b03      	ldr	r3, [sp, #12]
    8a5e:	f005 f909 	bl	dc74 <____aeabi_dmul_from_thumb>
    8a62:	1c02      	adds	r2, r0, #0
    8a64:	1c0b      	adds	r3, r1, #0
    8a66:	1c30      	adds	r0, r6, #0
    8a68:	1c39      	adds	r1, r7, #0
    8a6a:	f005 f961 	bl	dd30 <____aeabi_dsub_from_thumb>
    8a6e:	2730      	movs	r7, #48	; 0x30
    8a70:	1c3e      	adds	r6, r7, #0
    8a72:	4446      	add	r6, r8
    8a74:	3401      	adds	r4, #1
    8a76:	702e      	strb	r6, [r5, #0]
    8a78:	1c02      	adds	r2, r0, #0
    8a7a:	1c0b      	adds	r3, r1, #0
    8a7c:	3501      	adds	r5, #1
    8a7e:	45a3      	cmp	fp, r4
    8a80:	d1cc      	bne.n	8a1c <_dtoa_r+0x348>
    8a82:	464c      	mov	r4, r9
    8a84:	1c10      	adds	r0, r2, #0
    8a86:	1c19      	adds	r1, r3, #0
    8a88:	f005 f8fc 	bl	dc84 <____aeabi_dadd_from_thumb>
    8a8c:	1c06      	adds	r6, r0, #0
    8a8e:	1c0f      	adds	r7, r1, #0
    8a90:	1c32      	adds	r2, r6, #0
    8a92:	9802      	ldr	r0, [sp, #8]
    8a94:	9903      	ldr	r1, [sp, #12]
    8a96:	1c3b      	adds	r3, r7, #0
    8a98:	f005 f8c0 	bl	dc1c <____aeabi_dcmplt_from_thumb>
    8a9c:	9904      	ldr	r1, [sp, #16]
    8a9e:	9117      	str	r1, [sp, #92]	; 0x5c
    8aa0:	2800      	cmp	r0, #0
    8aa2:	d10e      	bne.n	8ac2 <_dtoa_r+0x3ee>
    8aa4:	9802      	ldr	r0, [sp, #8]
    8aa6:	9903      	ldr	r1, [sp, #12]
    8aa8:	1c32      	adds	r2, r6, #0
    8aaa:	1c3b      	adds	r3, r7, #0
    8aac:	f005 f8a8 	bl	dc00 <____aeabi_dcmpeq_from_thumb>
    8ab0:	2800      	cmp	r0, #0
    8ab2:	d100      	bne.n	8ab6 <_dtoa_r+0x3e2>
    8ab4:	e107      	b.n	8cc6 <_dtoa_r+0x5f2>
    8ab6:	9a04      	ldr	r2, [sp, #16]
    8ab8:	4643      	mov	r3, r8
    8aba:	9217      	str	r2, [sp, #92]	; 0x5c
    8abc:	07db      	lsls	r3, r3, #31
    8abe:	d400      	bmi.n	8ac2 <_dtoa_r+0x3ee>
    8ac0:	e101      	b.n	8cc6 <_dtoa_r+0x5f2>
    8ac2:	990a      	ldr	r1, [sp, #40]	; 0x28
    8ac4:	e000      	b.n	8ac8 <_dtoa_r+0x3f4>
    8ac6:	1c1d      	adds	r5, r3, #0
    8ac8:	1e6b      	subs	r3, r5, #1
    8aca:	781a      	ldrb	r2, [r3, #0]
    8acc:	2a39      	cmp	r2, #57	; 0x39
    8ace:	d001      	beq.n	8ad4 <_dtoa_r+0x400>
    8ad0:	f000 fce8 	bl	94a4 <_dtoa_r+0xdd0>
    8ad4:	428b      	cmp	r3, r1
    8ad6:	d1f6      	bne.n	8ac6 <_dtoa_r+0x3f2>
    8ad8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    8ada:	2230      	movs	r2, #48	; 0x30
    8adc:	3701      	adds	r7, #1
    8ade:	910a      	str	r1, [sp, #40]	; 0x28
    8ae0:	9704      	str	r7, [sp, #16]
    8ae2:	700a      	strb	r2, [r1, #0]
    8ae4:	3201      	adds	r2, #1
    8ae6:	701a      	strb	r2, [r3, #0]
    8ae8:	e0ed      	b.n	8cc6 <_dtoa_r+0x5f2>
    8aea:	032d      	lsls	r5, r5, #12
    8aec:	2d00      	cmp	r5, #0
    8aee:	d000      	beq.n	8af2 <_dtoa_r+0x41e>
    8af0:	e63e      	b.n	8770 <_dtoa_r+0x9c>
    8af2:	4887      	ldr	r0, [pc, #540]	; (8d10 <_dtoa_r+0x63c>)
    8af4:	e63d      	b.n	8772 <_dtoa_r+0x9e>
    8af6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8af8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8afa:	4689      	mov	r9, r1
    8afc:	4a85      	ldr	r2, [pc, #532]	; (8d14 <_dtoa_r+0x640>)
    8afe:	444b      	add	r3, r9
    8b00:	18d2      	adds	r2, r2, r3
    8b02:	4690      	mov	r8, r2
    8b04:	2020      	movs	r0, #32
    8b06:	4580      	cmp	r8, r0
    8b08:	dc00      	bgt.n	8b0c <_dtoa_r+0x438>
    8b0a:	e1c0      	b.n	8e8e <_dtoa_r+0x7ba>
    8b0c:	1800      	adds	r0, r0, r0
    8b0e:	4982      	ldr	r1, [pc, #520]	; (8d18 <_dtoa_r+0x644>)
    8b10:	1a80      	subs	r0, r0, r2
    8b12:	4085      	lsls	r5, r0
    8b14:	185b      	adds	r3, r3, r1
    8b16:	1c32      	adds	r2, r6, #0
    8b18:	1c28      	adds	r0, r5, #0
    8b1a:	40da      	lsrs	r2, r3
    8b1c:	4310      	orrs	r0, r2
    8b1e:	f005 f891 	bl	dc44 <____aeabi_ui2d_from_thumb>
    8b22:	9002      	str	r0, [sp, #8]
    8b24:	9103      	str	r1, [sp, #12]
    8b26:	9803      	ldr	r0, [sp, #12]
    8b28:	4a7c      	ldr	r2, [pc, #496]	; (8d1c <_dtoa_r+0x648>)
    8b2a:	1c01      	adds	r1, r0, #0
    8b2c:	487c      	ldr	r0, [pc, #496]	; (8d20 <_dtoa_r+0x64c>)
    8b2e:	1c15      	adds	r5, r2, #0
    8b30:	1809      	adds	r1, r1, r0
    8b32:	2301      	movs	r3, #1
    8b34:	9103      	str	r1, [sp, #12]
    8b36:	4445      	add	r5, r8
    8b38:	9316      	str	r3, [sp, #88]	; 0x58
    8b3a:	e647      	b.n	87cc <_dtoa_r+0xf8>
    8b3c:	4879      	ldr	r0, [pc, #484]	; (8d24 <_dtoa_r+0x650>)
    8b3e:	e608      	b.n	8752 <_dtoa_r+0x7e>
    8b40:	2301      	movs	r3, #1
    8b42:	2200      	movs	r2, #0
    8b44:	9312      	str	r3, [sp, #72]	; 0x48
    8b46:	425b      	negs	r3, r3
    8b48:	9226      	str	r2, [sp, #152]	; 0x98
    8b4a:	9310      	str	r3, [sp, #64]	; 0x40
    8b4c:	930b      	str	r3, [sp, #44]	; 0x2c
    8b4e:	9227      	str	r2, [sp, #156]	; 0x9c
    8b50:	1c15      	adds	r5, r2, #0
    8b52:	2100      	movs	r1, #0
    8b54:	6461      	str	r1, [r4, #68]	; 0x44
    8b56:	1c20      	adds	r0, r4, #0
    8b58:	f001 f8a6 	bl	9ca8 <_Balloc>
    8b5c:	900a      	str	r0, [sp, #40]	; 0x28
    8b5e:	6420      	str	r0, [r4, #64]	; 0x40
    8b60:	2d00      	cmp	r5, #0
    8b62:	d100      	bne.n	8b66 <_dtoa_r+0x492>
    8b64:	e6d3      	b.n	890e <_dtoa_r+0x23a>
    8b66:	1c3a      	adds	r2, r7, #0
    8b68:	1c31      	adds	r1, r6, #0
    8b6a:	9102      	str	r1, [sp, #8]
    8b6c:	9203      	str	r2, [sp, #12]
    8b6e:	9a04      	ldr	r2, [sp, #16]
    8b70:	960c      	str	r6, [sp, #48]	; 0x30
    8b72:	970d      	str	r7, [sp, #52]	; 0x34
    8b74:	2a00      	cmp	r2, #0
    8b76:	dc00      	bgt.n	8b7a <_dtoa_r+0x4a6>
    8b78:	e2e1      	b.n	913e <_dtoa_r+0xa6a>
    8b7a:	230f      	movs	r3, #15
    8b7c:	496a      	ldr	r1, [pc, #424]	; (8d28 <_dtoa_r+0x654>)
    8b7e:	401a      	ands	r2, r3
    8b80:	00d2      	lsls	r2, r2, #3
    8b82:	188a      	adds	r2, r1, r2
    8b84:	6810      	ldr	r0, [r2, #0]
    8b86:	6851      	ldr	r1, [r2, #4]
    8b88:	9008      	str	r0, [sp, #32]
    8b8a:	9109      	str	r1, [sp, #36]	; 0x24
    8b8c:	9904      	ldr	r1, [sp, #16]
    8b8e:	110d      	asrs	r5, r1, #4
    8b90:	2702      	movs	r7, #2
    8b92:	06ea      	lsls	r2, r5, #27
    8b94:	d500      	bpl.n	8b98 <_dtoa_r+0x4c4>
    8b96:	e183      	b.n	8ea0 <_dtoa_r+0x7cc>
    8b98:	2d00      	cmp	r5, #0
    8b9a:	d012      	beq.n	8bc2 <_dtoa_r+0x4ee>
    8b9c:	2301      	movs	r3, #1
    8b9e:	4e63      	ldr	r6, [pc, #396]	; (8d2c <_dtoa_r+0x658>)
    8ba0:	9808      	ldr	r0, [sp, #32]
    8ba2:	9909      	ldr	r1, [sp, #36]	; 0x24
    8ba4:	4698      	mov	r8, r3
    8ba6:	4642      	mov	r2, r8
    8ba8:	4215      	tst	r5, r2
    8baa:	d004      	beq.n	8bb6 <_dtoa_r+0x4e2>
    8bac:	6832      	ldr	r2, [r6, #0]
    8bae:	6873      	ldr	r3, [r6, #4]
    8bb0:	3701      	adds	r7, #1
    8bb2:	f005 f85f 	bl	dc74 <____aeabi_dmul_from_thumb>
    8bb6:	106d      	asrs	r5, r5, #1
    8bb8:	3608      	adds	r6, #8
    8bba:	2d00      	cmp	r5, #0
    8bbc:	d1f3      	bne.n	8ba6 <_dtoa_r+0x4d2>
    8bbe:	9008      	str	r0, [sp, #32]
    8bc0:	9109      	str	r1, [sp, #36]	; 0x24
    8bc2:	980c      	ldr	r0, [sp, #48]	; 0x30
    8bc4:	990d      	ldr	r1, [sp, #52]	; 0x34
    8bc6:	9a08      	ldr	r2, [sp, #32]
    8bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8bca:	f005 f8a3 	bl	dd14 <____aeabi_ddiv_from_thumb>
    8bce:	900c      	str	r0, [sp, #48]	; 0x30
    8bd0:	910d      	str	r1, [sp, #52]	; 0x34
    8bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8bd4:	2b00      	cmp	r3, #0
    8bd6:	d032      	beq.n	8c3e <_dtoa_r+0x56a>
    8bd8:	4a47      	ldr	r2, [pc, #284]	; (8cf8 <_dtoa_r+0x624>)
    8bda:	4b48      	ldr	r3, [pc, #288]	; (8cfc <_dtoa_r+0x628>)
    8bdc:	980c      	ldr	r0, [sp, #48]	; 0x30
    8bde:	990d      	ldr	r1, [sp, #52]	; 0x34
    8be0:	f005 f81c 	bl	dc1c <____aeabi_dcmplt_from_thumb>
    8be4:	1e43      	subs	r3, r0, #1
    8be6:	4198      	sbcs	r0, r3
    8be8:	2501      	movs	r5, #1
    8bea:	4240      	negs	r0, r0
    8bec:	4005      	ands	r5, r0
    8bee:	062d      	lsls	r5, r5, #24
    8bf0:	2d00      	cmp	r5, #0
    8bf2:	d024      	beq.n	8c3e <_dtoa_r+0x56a>
    8bf4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8bf6:	2d00      	cmp	r5, #0
    8bf8:	dd21      	ble.n	8c3e <_dtoa_r+0x56a>
    8bfa:	9810      	ldr	r0, [sp, #64]	; 0x40
    8bfc:	2800      	cmp	r0, #0
    8bfe:	dc00      	bgt.n	8c02 <_dtoa_r+0x52e>
    8c00:	e299      	b.n	9136 <_dtoa_r+0xa62>
    8c02:	9904      	ldr	r1, [sp, #16]
    8c04:	3901      	subs	r1, #1
    8c06:	4b39      	ldr	r3, [pc, #228]	; (8cec <_dtoa_r+0x618>)
    8c08:	4a37      	ldr	r2, [pc, #220]	; (8ce8 <_dtoa_r+0x614>)
    8c0a:	9117      	str	r1, [sp, #92]	; 0x5c
    8c0c:	980c      	ldr	r0, [sp, #48]	; 0x30
    8c0e:	990d      	ldr	r1, [sp, #52]	; 0x34
    8c10:	f005 f830 	bl	dc74 <____aeabi_dmul_from_thumb>
    8c14:	900c      	str	r0, [sp, #48]	; 0x30
    8c16:	910d      	str	r1, [sp, #52]	; 0x34
    8c18:	1c78      	adds	r0, r7, #1
    8c1a:	f005 f87f 	bl	dd1c <____aeabi_i2d_from_thumb>
    8c1e:	1c02      	adds	r2, r0, #0
    8c20:	1c0b      	adds	r3, r1, #0
    8c22:	980c      	ldr	r0, [sp, #48]	; 0x30
    8c24:	990d      	ldr	r1, [sp, #52]	; 0x34
    8c26:	f005 f825 	bl	dc74 <____aeabi_dmul_from_thumb>
    8c2a:	4a35      	ldr	r2, [pc, #212]	; (8d00 <_dtoa_r+0x62c>)
    8c2c:	4b35      	ldr	r3, [pc, #212]	; (8d04 <_dtoa_r+0x630>)
    8c2e:	f005 f829 	bl	dc84 <____aeabi_dadd_from_thumb>
    8c32:	4a3f      	ldr	r2, [pc, #252]	; (8d30 <_dtoa_r+0x65c>)
    8c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c36:	1c05      	adds	r5, r0, #0
    8c38:	188e      	adds	r6, r1, r2
    8c3a:	9315      	str	r3, [sp, #84]	; 0x54
    8c3c:	e180      	b.n	8f40 <_dtoa_r+0x86c>
    8c3e:	1c38      	adds	r0, r7, #0
    8c40:	f005 f86c 	bl	dd1c <____aeabi_i2d_from_thumb>
    8c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c48:	f005 f814 	bl	dc74 <____aeabi_dmul_from_thumb>
    8c4c:	4a2c      	ldr	r2, [pc, #176]	; (8d00 <_dtoa_r+0x62c>)
    8c4e:	4b2d      	ldr	r3, [pc, #180]	; (8d04 <_dtoa_r+0x630>)
    8c50:	f005 f818 	bl	dc84 <____aeabi_dadd_from_thumb>
    8c54:	1c05      	adds	r5, r0, #0
    8c56:	4836      	ldr	r0, [pc, #216]	; (8d30 <_dtoa_r+0x65c>)
    8c58:	180f      	adds	r7, r1, r0
    8c5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8c5c:	1c3e      	adds	r6, r7, #0
    8c5e:	2900      	cmp	r1, #0
    8c60:	d000      	beq.n	8c64 <_dtoa_r+0x590>
    8c62:	e169      	b.n	8f38 <_dtoa_r+0x864>
    8c64:	4a28      	ldr	r2, [pc, #160]	; (8d08 <_dtoa_r+0x634>)
    8c66:	4b29      	ldr	r3, [pc, #164]	; (8d0c <_dtoa_r+0x638>)
    8c68:	980c      	ldr	r0, [sp, #48]	; 0x30
    8c6a:	990d      	ldr	r1, [sp, #52]	; 0x34
    8c6c:	f005 f860 	bl	dd30 <____aeabi_dsub_from_thumb>
    8c70:	1c2a      	adds	r2, r5, #0
    8c72:	1c3b      	adds	r3, r7, #0
    8c74:	9008      	str	r0, [sp, #32]
    8c76:	9109      	str	r1, [sp, #36]	; 0x24
    8c78:	f005 f820 	bl	dcbc <____aeabi_dcmpgt_from_thumb>
    8c7c:	2800      	cmp	r0, #0
    8c7e:	d000      	beq.n	8c82 <_dtoa_r+0x5ae>
    8c80:	e288      	b.n	9194 <_dtoa_r+0xac0>
    8c82:	1c2a      	adds	r2, r5, #0
    8c84:	2580      	movs	r5, #128	; 0x80
    8c86:	062d      	lsls	r5, r5, #24
    8c88:	9808      	ldr	r0, [sp, #32]
    8c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
    8c8c:	197b      	adds	r3, r7, r5
    8c8e:	f004 ffc5 	bl	dc1c <____aeabi_dcmplt_from_thumb>
    8c92:	2800      	cmp	r0, #0
    8c94:	d100      	bne.n	8c98 <_dtoa_r+0x5c4>
    8c96:	e24e      	b.n	9136 <_dtoa_r+0xa62>
    8c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8c9a:	9202      	str	r2, [sp, #8]
    8c9c:	4690      	mov	r8, r2
    8c9e:	9827      	ldr	r0, [sp, #156]	; 0x9c
    8ca0:	43c0      	mvns	r0, r0
    8ca2:	2100      	movs	r1, #0
    8ca4:	9004      	str	r0, [sp, #16]
    8ca6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    8ca8:	4689      	mov	r9, r1
    8caa:	1c20      	adds	r0, r4, #0
    8cac:	4641      	mov	r1, r8
    8cae:	f001 f825 	bl	9cfc <_Bfree>
    8cb2:	9802      	ldr	r0, [sp, #8]
    8cb4:	2800      	cmp	r0, #0
    8cb6:	d006      	beq.n	8cc6 <_dtoa_r+0x5f2>
    8cb8:	4581      	cmp	r9, r0
    8cba:	d000      	beq.n	8cbe <_dtoa_r+0x5ea>
    8cbc:	e22f      	b.n	911e <_dtoa_r+0xa4a>
    8cbe:	1c20      	adds	r0, r4, #0
    8cc0:	9902      	ldr	r1, [sp, #8]
    8cc2:	f001 f81b 	bl	9cfc <_Bfree>
    8cc6:	1c20      	adds	r0, r4, #0
    8cc8:	9907      	ldr	r1, [sp, #28]
    8cca:	f001 f817 	bl	9cfc <_Bfree>
    8cce:	2300      	movs	r3, #0
    8cd0:	702b      	strb	r3, [r5, #0]
    8cd2:	9b04      	ldr	r3, [sp, #16]
    8cd4:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    8cd6:	992a      	ldr	r1, [sp, #168]	; 0xa8
    8cd8:	3301      	adds	r3, #1
    8cda:	603b      	str	r3, [r7, #0]
    8cdc:	980a      	ldr	r0, [sp, #40]	; 0x28
    8cde:	2900      	cmp	r1, #0
    8ce0:	d100      	bne.n	8ce4 <_dtoa_r+0x610>
    8ce2:	e536      	b.n	8752 <_dtoa_r+0x7e>
    8ce4:	600d      	str	r5, [r1, #0]
    8ce6:	e534      	b.n	8752 <_dtoa_r+0x7e>
    8ce8:	00000000 	.word	0x00000000
    8cec:	40240000 	.word	0x40240000
	...
    8cfc:	3ff00000 	.word	0x3ff00000
    8d00:	00000000 	.word	0x00000000
    8d04:	401c0000 	.word	0x401c0000
    8d08:	00000000 	.word	0x00000000
    8d0c:	40140000 	.word	0x40140000
    8d10:	0000e960 	.word	0x0000e960
    8d14:	00000432 	.word	0x00000432
    8d18:	00000412 	.word	0x00000412
    8d1c:	fffffbcd 	.word	0xfffffbcd
    8d20:	fe100000 	.word	0xfe100000
    8d24:	0000e95c 	.word	0x0000e95c
    8d28:	0000e098 	.word	0x0000e098
    8d2c:	0000e160 	.word	0x0000e160
    8d30:	fcc00000 	.word	0xfcc00000
    8d34:	9912      	ldr	r1, [sp, #72]	; 0x48
    8d36:	2900      	cmp	r1, #0
    8d38:	d000      	beq.n	8d3c <_dtoa_r+0x668>
    8d3a:	e0c8      	b.n	8ece <_dtoa_r+0x7fa>
    8d3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8d40:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8d42:	9302      	str	r3, [sp, #8]
    8d44:	4690      	mov	r8, r2
    8d46:	2000      	movs	r0, #0
    8d48:	4582      	cmp	sl, r0
    8d4a:	dd0c      	ble.n	8d66 <_dtoa_r+0x692>
    8d4c:	4285      	cmp	r5, r0
    8d4e:	dd0a      	ble.n	8d66 <_dtoa_r+0x692>
    8d50:	4653      	mov	r3, sl
    8d52:	45aa      	cmp	sl, r5
    8d54:	dd00      	ble.n	8d58 <_dtoa_r+0x684>
    8d56:	1c2b      	adds	r3, r5, #0
    8d58:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8d5a:	4652      	mov	r2, sl
    8d5c:	1ac9      	subs	r1, r1, r3
    8d5e:	1ad2      	subs	r2, r2, r3
    8d60:	910f      	str	r1, [sp, #60]	; 0x3c
    8d62:	1aed      	subs	r5, r5, r3
    8d64:	4692      	mov	sl, r2
    8d66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8d68:	2b00      	cmp	r3, #0
    8d6a:	dd1e      	ble.n	8daa <_dtoa_r+0x6d6>
    8d6c:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d6e:	2800      	cmp	r0, #0
    8d70:	d100      	bne.n	8d74 <_dtoa_r+0x6a0>
    8d72:	e36e      	b.n	9452 <_dtoa_r+0xd7e>
    8d74:	2100      	movs	r1, #0
    8d76:	4588      	cmp	r8, r1
    8d78:	dd11      	ble.n	8d9e <_dtoa_r+0x6ca>
    8d7a:	9902      	ldr	r1, [sp, #8]
    8d7c:	4642      	mov	r2, r8
    8d7e:	1c20      	adds	r0, r4, #0
    8d80:	f001 f980 	bl	a084 <__pow5mult>
    8d84:	9002      	str	r0, [sp, #8]
    8d86:	9a07      	ldr	r2, [sp, #28]
    8d88:	9902      	ldr	r1, [sp, #8]
    8d8a:	1c20      	adds	r0, r4, #0
    8d8c:	f001 f8b6 	bl	9efc <__multiply>
    8d90:	9907      	ldr	r1, [sp, #28]
    8d92:	4681      	mov	r9, r0
    8d94:	1c20      	adds	r0, r4, #0
    8d96:	f000 ffb1 	bl	9cfc <_Bfree>
    8d9a:	464a      	mov	r2, r9
    8d9c:	9207      	str	r2, [sp, #28]
    8d9e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8da0:	4641      	mov	r1, r8
    8da2:	1a42      	subs	r2, r0, r1
    8da4:	2a00      	cmp	r2, #0
    8da6:	d000      	beq.n	8daa <_dtoa_r+0x6d6>
    8da8:	e369      	b.n	947e <_dtoa_r+0xdaa>
    8daa:	1c20      	adds	r0, r4, #0
    8dac:	2101      	movs	r1, #1
    8dae:	f001 f899 	bl	9ee4 <__i2b>
    8db2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8db4:	4680      	mov	r8, r0
    8db6:	2a00      	cmp	r2, #0
    8db8:	dd04      	ble.n	8dc4 <_dtoa_r+0x6f0>
    8dba:	4641      	mov	r1, r8
    8dbc:	1c20      	adds	r0, r4, #0
    8dbe:	f001 f961 	bl	a084 <__pow5mult>
    8dc2:	4680      	mov	r8, r0
    8dc4:	9826      	ldr	r0, [sp, #152]	; 0x98
    8dc6:	2300      	movs	r3, #0
    8dc8:	4699      	mov	r9, r3
    8dca:	2801      	cmp	r0, #1
    8dcc:	dc00      	bgt.n	8dd0 <_dtoa_r+0x6fc>
    8dce:	e2b6      	b.n	933e <_dtoa_r+0xc6a>
    8dd0:	9814      	ldr	r0, [sp, #80]	; 0x50
    8dd2:	2301      	movs	r3, #1
    8dd4:	2800      	cmp	r0, #0
    8dd6:	d000      	beq.n	8dda <_dtoa_r+0x706>
    8dd8:	e298      	b.n	930c <_dtoa_r+0xc38>
    8dda:	1c1a      	adds	r2, r3, #0
    8ddc:	4452      	add	r2, sl
    8dde:	211f      	movs	r1, #31
    8de0:	231c      	movs	r3, #28
    8de2:	400a      	ands	r2, r1
    8de4:	d000      	beq.n	8de8 <_dtoa_r+0x714>
    8de6:	e13b      	b.n	9060 <_dtoa_r+0x98c>
    8de8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8dea:	18c0      	adds	r0, r0, r3
    8dec:	900f      	str	r0, [sp, #60]	; 0x3c
    8dee:	18ed      	adds	r5, r5, r3
    8df0:	449a      	add	sl, r3
    8df2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8df4:	2900      	cmp	r1, #0
    8df6:	dd05      	ble.n	8e04 <_dtoa_r+0x730>
    8df8:	1c20      	adds	r0, r4, #0
    8dfa:	9907      	ldr	r1, [sp, #28]
    8dfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8dfe:	f001 f99b 	bl	a138 <__lshift>
    8e02:	9007      	str	r0, [sp, #28]
    8e04:	2200      	movs	r2, #0
    8e06:	4592      	cmp	sl, r2
    8e08:	dd05      	ble.n	8e16 <_dtoa_r+0x742>
    8e0a:	4641      	mov	r1, r8
    8e0c:	1c20      	adds	r0, r4, #0
    8e0e:	4652      	mov	r2, sl
    8e10:	f001 f992 	bl	a138 <__lshift>
    8e14:	4680      	mov	r8, r0
    8e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8e18:	2b00      	cmp	r3, #0
    8e1a:	d000      	beq.n	8e1e <_dtoa_r+0x74a>
    8e1c:	e257      	b.n	92ce <_dtoa_r+0xbfa>
    8e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e20:	2b00      	cmp	r3, #0
    8e22:	dd00      	ble.n	8e26 <_dtoa_r+0x752>
    8e24:	e128      	b.n	9078 <_dtoa_r+0x9a4>
    8e26:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e28:	2301      	movs	r3, #1
    8e2a:	2802      	cmp	r0, #2
    8e2c:	dc00      	bgt.n	8e30 <_dtoa_r+0x75c>
    8e2e:	2300      	movs	r3, #0
    8e30:	061b      	lsls	r3, r3, #24
    8e32:	2b00      	cmp	r3, #0
    8e34:	d100      	bne.n	8e38 <_dtoa_r+0x764>
    8e36:	e11f      	b.n	9078 <_dtoa_r+0x9a4>
    8e38:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8e3a:	2900      	cmp	r1, #0
    8e3c:	d000      	beq.n	8e40 <_dtoa_r+0x76c>
    8e3e:	e72e      	b.n	8c9e <_dtoa_r+0x5ca>
    8e40:	4641      	mov	r1, r8
    8e42:	1c20      	adds	r0, r4, #0
    8e44:	2205      	movs	r2, #5
    8e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e48:	f000 ff64 	bl	9d14 <__multadd>
    8e4c:	4680      	mov	r8, r0
    8e4e:	4641      	mov	r1, r8
    8e50:	9807      	ldr	r0, [sp, #28]
    8e52:	f001 f9d9 	bl	a208 <__mcmp>
    8e56:	2800      	cmp	r0, #0
    8e58:	dc00      	bgt.n	8e5c <_dtoa_r+0x788>
    8e5a:	e720      	b.n	8c9e <_dtoa_r+0x5ca>
    8e5c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e5e:	2331      	movs	r3, #49	; 0x31
    8e60:	7003      	strb	r3, [r0, #0]
    8e62:	9904      	ldr	r1, [sp, #16]
    8e64:	1c05      	adds	r5, r0, #0
    8e66:	3101      	adds	r1, #1
    8e68:	2200      	movs	r2, #0
    8e6a:	3501      	adds	r5, #1
    8e6c:	9104      	str	r1, [sp, #16]
    8e6e:	4691      	mov	r9, r2
    8e70:	e71b      	b.n	8caa <_dtoa_r+0x5d6>
    8e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8e74:	9b04      	ldr	r3, [sp, #16]
    8e76:	2000      	movs	r0, #0
    8e78:	1ad2      	subs	r2, r2, r3
    8e7a:	425d      	negs	r5, r3
    8e7c:	920f      	str	r2, [sp, #60]	; 0x3c
    8e7e:	9513      	str	r5, [sp, #76]	; 0x4c
    8e80:	9014      	str	r0, [sp, #80]	; 0x50
    8e82:	e501      	b.n	8888 <_dtoa_r+0x1b4>
    8e84:	426d      	negs	r5, r5
    8e86:	2300      	movs	r3, #0
    8e88:	950f      	str	r5, [sp, #60]	; 0x3c
    8e8a:	469a      	mov	sl, r3
    8e8c:	e4f4      	b.n	8878 <_dtoa_r+0x1a4>
    8e8e:	2020      	movs	r0, #32
    8e90:	1a80      	subs	r0, r0, r2
    8e92:	1c35      	adds	r5, r6, #0
    8e94:	4085      	lsls	r5, r0
    8e96:	1c28      	adds	r0, r5, #0
    8e98:	e641      	b.n	8b1e <_dtoa_r+0x44a>
    8e9a:	2100      	movs	r1, #0
    8e9c:	9111      	str	r1, [sp, #68]	; 0x44
    8e9e:	e4e1      	b.n	8864 <_dtoa_r+0x190>
    8ea0:	401d      	ands	r5, r3
    8ea2:	4bc7      	ldr	r3, [pc, #796]	; (91c0 <_dtoa_r+0xaec>)
    8ea4:	980c      	ldr	r0, [sp, #48]	; 0x30
    8ea6:	990d      	ldr	r1, [sp, #52]	; 0x34
    8ea8:	6a1a      	ldr	r2, [r3, #32]
    8eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8eac:	f004 ff32 	bl	dd14 <____aeabi_ddiv_from_thumb>
    8eb0:	3701      	adds	r7, #1
    8eb2:	900c      	str	r0, [sp, #48]	; 0x30
    8eb4:	910d      	str	r1, [sp, #52]	; 0x34
    8eb6:	e66f      	b.n	8b98 <_dtoa_r+0x4c4>
    8eb8:	2a02      	cmp	r2, #2
    8eba:	d100      	bne.n	8ebe <_dtoa_r+0x7ea>
    8ebc:	e1fa      	b.n	92b4 <_dtoa_r+0xbe0>
    8ebe:	2001      	movs	r0, #1
    8ec0:	4243      	negs	r3, r0
    8ec2:	2500      	movs	r5, #0
    8ec4:	9012      	str	r0, [sp, #72]	; 0x48
    8ec6:	9310      	str	r3, [sp, #64]	; 0x40
    8ec8:	930b      	str	r3, [sp, #44]	; 0x2c
    8eca:	9527      	str	r5, [sp, #156]	; 0x9c
    8ecc:	e641      	b.n	8b52 <_dtoa_r+0x47e>
    8ece:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8ed0:	2a01      	cmp	r2, #1
    8ed2:	dc00      	bgt.n	8ed6 <_dtoa_r+0x802>
    8ed4:	e2dd      	b.n	9492 <_dtoa_r+0xdbe>
    8ed6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8ed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8eda:	3a01      	subs	r2, #1
    8edc:	4293      	cmp	r3, r2
    8ede:	da00      	bge.n	8ee2 <_dtoa_r+0x80e>
    8ee0:	e2c3      	b.n	946a <_dtoa_r+0xd96>
    8ee2:	1a9b      	subs	r3, r3, r2
    8ee4:	4698      	mov	r8, r3
    8ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8ee8:	2a00      	cmp	r2, #0
    8eea:	da00      	bge.n	8eee <_dtoa_r+0x81a>
    8eec:	e2e8      	b.n	94c0 <_dtoa_r+0xdec>
    8eee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8ef0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ef2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8ef4:	1809      	adds	r1, r1, r0
    8ef6:	910f      	str	r1, [sp, #60]	; 0x3c
    8ef8:	4482      	add	sl, r0
    8efa:	2101      	movs	r1, #1
    8efc:	1c20      	adds	r0, r4, #0
    8efe:	f000 fff1 	bl	9ee4 <__i2b>
    8f02:	9002      	str	r0, [sp, #8]
    8f04:	e71f      	b.n	8d46 <_dtoa_r+0x672>
    8f06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    8f08:	429a      	cmp	r2, r3
    8f0a:	db00      	blt.n	8f0e <_dtoa_r+0x83a>
    8f0c:	e519      	b.n	8942 <_dtoa_r+0x26e>
    8f0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8f10:	2a00      	cmp	r2, #0
    8f12:	d000      	beq.n	8f16 <_dtoa_r+0x842>
    8f14:	e2b9      	b.n	948a <_dtoa_r+0xdb6>
    8f16:	4ba3      	ldr	r3, [pc, #652]	; (91a4 <_dtoa_r+0xad0>)
    8f18:	4aa1      	ldr	r2, [pc, #644]	; (91a0 <_dtoa_r+0xacc>)
    8f1a:	9802      	ldr	r0, [sp, #8]
    8f1c:	9903      	ldr	r1, [sp, #12]
    8f1e:	f004 fea9 	bl	dc74 <____aeabi_dmul_from_thumb>
    8f22:	1c32      	adds	r2, r6, #0
    8f24:	1c3b      	adds	r3, r7, #0
    8f26:	f004 fe6f 	bl	dc08 <____aeabi_dcmpge_from_thumb>
    8f2a:	2800      	cmp	r0, #0
    8f2c:	d000      	beq.n	8f30 <_dtoa_r+0x85c>
    8f2e:	e297      	b.n	9460 <_dtoa_r+0xd8c>
    8f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8f32:	4698      	mov	r8, r3
    8f34:	9302      	str	r3, [sp, #8]
    8f36:	e791      	b.n	8e5c <_dtoa_r+0x788>
    8f38:	9f04      	ldr	r7, [sp, #16]
    8f3a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f3c:	9717      	str	r7, [sp, #92]	; 0x5c
    8f3e:	9015      	str	r0, [sp, #84]	; 0x54
    8f40:	9912      	ldr	r1, [sp, #72]	; 0x48
    8f42:	2900      	cmp	r1, #0
    8f44:	d100      	bne.n	8f48 <_dtoa_r+0x874>
    8f46:	e13f      	b.n	91c8 <_dtoa_r+0xaf4>
    8f48:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8f4a:	3b01      	subs	r3, #1
    8f4c:	00da      	lsls	r2, r3, #3
    8f4e:	4b9d      	ldr	r3, [pc, #628]	; (91c4 <_dtoa_r+0xaf0>)
    8f50:	189b      	adds	r3, r3, r2
    8f52:	681a      	ldr	r2, [r3, #0]
    8f54:	685b      	ldr	r3, [r3, #4]
    8f56:	4894      	ldr	r0, [pc, #592]	; (91a8 <_dtoa_r+0xad4>)
    8f58:	4994      	ldr	r1, [pc, #592]	; (91ac <_dtoa_r+0xad8>)
    8f5a:	f004 fedb 	bl	dd14 <____aeabi_ddiv_from_thumb>
    8f5e:	1c2a      	adds	r2, r5, #0
    8f60:	1c33      	adds	r3, r6, #0
    8f62:	f004 fee5 	bl	dd30 <____aeabi_dsub_from_thumb>
    8f66:	9008      	str	r0, [sp, #32]
    8f68:	9109      	str	r1, [sp, #36]	; 0x24
    8f6a:	980c      	ldr	r0, [sp, #48]	; 0x30
    8f6c:	990d      	ldr	r1, [sp, #52]	; 0x34
    8f6e:	f004 fe91 	bl	dc94 <____aeabi_d2iz_from_thumb>
    8f72:	1c05      	adds	r5, r0, #0
    8f74:	f004 fed2 	bl	dd1c <____aeabi_i2d_from_thumb>
    8f78:	1c02      	adds	r2, r0, #0
    8f7a:	1c0b      	adds	r3, r1, #0
    8f7c:	980c      	ldr	r0, [sp, #48]	; 0x30
    8f7e:	990d      	ldr	r1, [sp, #52]	; 0x34
    8f80:	f004 fed6 	bl	dd30 <____aeabi_dsub_from_thumb>
    8f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8f86:	1c2b      	adds	r3, r5, #0
    8f88:	3330      	adds	r3, #48	; 0x30
    8f8a:	7013      	strb	r3, [r2, #0]
    8f8c:	1c06      	adds	r6, r0, #0
    8f8e:	1c0f      	adds	r7, r1, #0
    8f90:	1c15      	adds	r5, r2, #0
    8f92:	9808      	ldr	r0, [sp, #32]
    8f94:	9909      	ldr	r1, [sp, #36]	; 0x24
    8f96:	1c32      	adds	r2, r6, #0
    8f98:	1c3b      	adds	r3, r7, #0
    8f9a:	3501      	adds	r5, #1
    8f9c:	f004 fe8e 	bl	dcbc <____aeabi_dcmpgt_from_thumb>
    8fa0:	2800      	cmp	r0, #0
    8fa2:	d000      	beq.n	8fa6 <_dtoa_r+0x8d2>
    8fa4:	e315      	b.n	95d2 <_dtoa_r+0xefe>
    8fa6:	1c32      	adds	r2, r6, #0
    8fa8:	1c3b      	adds	r3, r7, #0
    8faa:	4881      	ldr	r0, [pc, #516]	; (91b0 <_dtoa_r+0xadc>)
    8fac:	4981      	ldr	r1, [pc, #516]	; (91b4 <_dtoa_r+0xae0>)
    8fae:	f004 febf 	bl	dd30 <____aeabi_dsub_from_thumb>
    8fb2:	1c02      	adds	r2, r0, #0
    8fb4:	1c0b      	adds	r3, r1, #0
    8fb6:	9808      	ldr	r0, [sp, #32]
    8fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
    8fba:	f004 fe7f 	bl	dcbc <____aeabi_dcmpgt_from_thumb>
    8fbe:	2800      	cmp	r0, #0
    8fc0:	d000      	beq.n	8fc4 <_dtoa_r+0x8f0>
    8fc2:	e57e      	b.n	8ac2 <_dtoa_r+0x3ee>
    8fc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8fc6:	2b01      	cmp	r3, #1
    8fc8:	dc00      	bgt.n	8fcc <_dtoa_r+0x8f8>
    8fca:	e0b4      	b.n	9136 <_dtoa_r+0xa62>
    8fcc:	4651      	mov	r1, sl
    8fce:	3001      	adds	r0, #1
    8fd0:	910c      	str	r1, [sp, #48]	; 0x30
    8fd2:	46a8      	mov	r8, r5
    8fd4:	4682      	mov	sl, r0
    8fd6:	46a3      	mov	fp, r4
    8fd8:	e012      	b.n	9000 <_dtoa_r+0x92c>
    8fda:	1c32      	adds	r2, r6, #0
    8fdc:	1c3b      	adds	r3, r7, #0
    8fde:	4874      	ldr	r0, [pc, #464]	; (91b0 <_dtoa_r+0xadc>)
    8fe0:	4974      	ldr	r1, [pc, #464]	; (91b4 <_dtoa_r+0xae0>)
    8fe2:	f004 fea5 	bl	dd30 <____aeabi_dsub_from_thumb>
    8fe6:	9a08      	ldr	r2, [sp, #32]
    8fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8fea:	f004 fe17 	bl	dc1c <____aeabi_dcmplt_from_thumb>
    8fee:	2800      	cmp	r0, #0
    8ff0:	d000      	beq.n	8ff4 <_dtoa_r+0x920>
    8ff2:	e260      	b.n	94b6 <_dtoa_r+0xde2>
    8ff4:	3001      	adds	r0, #1
    8ff6:	9915      	ldr	r1, [sp, #84]	; 0x54
    8ff8:	4482      	add	sl, r0
    8ffa:	458a      	cmp	sl, r1
    8ffc:	db00      	blt.n	9000 <_dtoa_r+0x92c>
    8ffe:	e097      	b.n	9130 <_dtoa_r+0xa5c>
    9000:	9808      	ldr	r0, [sp, #32]
    9002:	9909      	ldr	r1, [sp, #36]	; 0x24
    9004:	4a6c      	ldr	r2, [pc, #432]	; (91b8 <_dtoa_r+0xae4>)
    9006:	4b6d      	ldr	r3, [pc, #436]	; (91bc <_dtoa_r+0xae8>)
    9008:	f004 fe34 	bl	dc74 <____aeabi_dmul_from_thumb>
    900c:	4a6a      	ldr	r2, [pc, #424]	; (91b8 <_dtoa_r+0xae4>)
    900e:	4b6b      	ldr	r3, [pc, #428]	; (91bc <_dtoa_r+0xae8>)
    9010:	9008      	str	r0, [sp, #32]
    9012:	9109      	str	r1, [sp, #36]	; 0x24
    9014:	1c30      	adds	r0, r6, #0
    9016:	1c39      	adds	r1, r7, #0
    9018:	f004 fe2c 	bl	dc74 <____aeabi_dmul_from_thumb>
    901c:	1c0d      	adds	r5, r1, #0
    901e:	1c04      	adds	r4, r0, #0
    9020:	f004 fe38 	bl	dc94 <____aeabi_d2iz_from_thumb>
    9024:	4681      	mov	r9, r0
    9026:	f004 fe79 	bl	dd1c <____aeabi_i2d_from_thumb>
    902a:	1c02      	adds	r2, r0, #0
    902c:	1c0b      	adds	r3, r1, #0
    902e:	1c20      	adds	r0, r4, #0
    9030:	1c29      	adds	r1, r5, #0
    9032:	f004 fe7d 	bl	dd30 <____aeabi_dsub_from_thumb>
    9036:	2230      	movs	r2, #48	; 0x30
    9038:	1c13      	adds	r3, r2, #0
    903a:	444b      	add	r3, r9
    903c:	4645      	mov	r5, r8
    903e:	1c06      	adds	r6, r0, #0
    9040:	702b      	strb	r3, [r5, #0]
    9042:	2001      	movs	r0, #1
    9044:	4480      	add	r8, r0
    9046:	9a08      	ldr	r2, [sp, #32]
    9048:	9b09      	ldr	r3, [sp, #36]	; 0x24
    904a:	1c30      	adds	r0, r6, #0
    904c:	1c0f      	adds	r7, r1, #0
    904e:	f004 fde5 	bl	dc1c <____aeabi_dcmplt_from_thumb>
    9052:	2800      	cmp	r0, #0
    9054:	d0c1      	beq.n	8fda <_dtoa_r+0x906>
    9056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9058:	4645      	mov	r5, r8
    905a:	465c      	mov	r4, fp
    905c:	9304      	str	r3, [sp, #16]
    905e:	e632      	b.n	8cc6 <_dtoa_r+0x5f2>
    9060:	3304      	adds	r3, #4
    9062:	1a9b      	subs	r3, r3, r2
    9064:	2b04      	cmp	r3, #4
    9066:	dc00      	bgt.n	906a <_dtoa_r+0x996>
    9068:	e2b7      	b.n	95da <_dtoa_r+0xf06>
    906a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    906c:	3b04      	subs	r3, #4
    906e:	18d2      	adds	r2, r2, r3
    9070:	920f      	str	r2, [sp, #60]	; 0x3c
    9072:	18ed      	adds	r5, r5, r3
    9074:	449a      	add	sl, r3
    9076:	e6bc      	b.n	8df2 <_dtoa_r+0x71e>
    9078:	9b12      	ldr	r3, [sp, #72]	; 0x48
    907a:	2b00      	cmp	r3, #0
    907c:	d000      	beq.n	9080 <_dtoa_r+0x9ac>
    907e:	e172      	b.n	9366 <_dtoa_r+0xc92>
    9080:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9082:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9084:	990a      	ldr	r1, [sp, #40]	; 0x28
    9086:	46ab      	mov	fp, r5
    9088:	2501      	movs	r5, #1
    908a:	44ab      	add	fp, r5
    908c:	4647      	mov	r7, r8
    908e:	1c25      	adds	r5, r4, #0
    9090:	1c1e      	adds	r6, r3, #0
    9092:	4680      	mov	r8, r0
    9094:	4689      	mov	r9, r1
    9096:	9c07      	ldr	r4, [sp, #28]
    9098:	e006      	b.n	90a8 <_dtoa_r+0x9d4>
    909a:	1c21      	adds	r1, r4, #0
    909c:	1c28      	adds	r0, r5, #0
    909e:	220a      	movs	r2, #10
    90a0:	2300      	movs	r3, #0
    90a2:	f000 fe37 	bl	9d14 <__multadd>
    90a6:	1c04      	adds	r4, r0, #0
    90a8:	1c20      	adds	r0, r4, #0
    90aa:	1c39      	adds	r1, r7, #0
    90ac:	f7ff fa60 	bl	8570 <quorem>
    90b0:	464b      	mov	r3, r9
    90b2:	3030      	adds	r0, #48	; 0x30
    90b4:	5598      	strb	r0, [r3, r6]
    90b6:	1c33      	adds	r3, r6, #0
    90b8:	3601      	adds	r6, #1
    90ba:	445b      	add	r3, fp
    90bc:	45b0      	cmp	r8, r6
    90be:	dcec      	bgt.n	909a <_dtoa_r+0x9c6>
    90c0:	4682      	mov	sl, r0
    90c2:	2000      	movs	r0, #0
    90c4:	9407      	str	r4, [sp, #28]
    90c6:	46b8      	mov	r8, r7
    90c8:	1c2c      	adds	r4, r5, #0
    90ca:	4681      	mov	r9, r0
    90cc:	1c1d      	adds	r5, r3, #0
    90ce:	9907      	ldr	r1, [sp, #28]
    90d0:	1c20      	adds	r0, r4, #0
    90d2:	2201      	movs	r2, #1
    90d4:	f001 f830 	bl	a138 <__lshift>
    90d8:	4641      	mov	r1, r8
    90da:	9007      	str	r0, [sp, #28]
    90dc:	f001 f894 	bl	a208 <__mcmp>
    90e0:	2800      	cmp	r0, #0
    90e2:	dd10      	ble.n	9106 <_dtoa_r+0xa32>
    90e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    90e6:	e000      	b.n	90ea <_dtoa_r+0xa16>
    90e8:	1c1d      	adds	r5, r3, #0
    90ea:	1e6b      	subs	r3, r5, #1
    90ec:	781a      	ldrb	r2, [r3, #0]
    90ee:	2a39      	cmp	r2, #57	; 0x39
    90f0:	d000      	beq.n	90f4 <_dtoa_r+0xa20>
    90f2:	e22c      	b.n	954e <_dtoa_r+0xe7a>
    90f4:	428b      	cmp	r3, r1
    90f6:	d1f7      	bne.n	90e8 <_dtoa_r+0xa14>
    90f8:	9a04      	ldr	r2, [sp, #16]
    90fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    90fc:	3201      	adds	r2, #1
    90fe:	2331      	movs	r3, #49	; 0x31
    9100:	9204      	str	r2, [sp, #16]
    9102:	703b      	strb	r3, [r7, #0]
    9104:	e5d1      	b.n	8caa <_dtoa_r+0x5d6>
    9106:	2800      	cmp	r0, #0
    9108:	d104      	bne.n	9114 <_dtoa_r+0xa40>
    910a:	4651      	mov	r1, sl
    910c:	07c9      	lsls	r1, r1, #31
    910e:	d4e9      	bmi.n	90e4 <_dtoa_r+0xa10>
    9110:	e000      	b.n	9114 <_dtoa_r+0xa40>
    9112:	1c1d      	adds	r5, r3, #0
    9114:	1e6b      	subs	r3, r5, #1
    9116:	781a      	ldrb	r2, [r3, #0]
    9118:	2a30      	cmp	r2, #48	; 0x30
    911a:	d0fa      	beq.n	9112 <_dtoa_r+0xa3e>
    911c:	e5c5      	b.n	8caa <_dtoa_r+0x5d6>
    911e:	2100      	movs	r1, #0
    9120:	4589      	cmp	r9, r1
    9122:	d100      	bne.n	9126 <_dtoa_r+0xa52>
    9124:	e5cb      	b.n	8cbe <_dtoa_r+0x5ea>
    9126:	1c20      	adds	r0, r4, #0
    9128:	4649      	mov	r1, r9
    912a:	f000 fde7 	bl	9cfc <_Bfree>
    912e:	e5c6      	b.n	8cbe <_dtoa_r+0x5ea>
    9130:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9132:	465c      	mov	r4, fp
    9134:	46aa      	mov	sl, r5
    9136:	9e02      	ldr	r6, [sp, #8]
    9138:	9f03      	ldr	r7, [sp, #12]
    913a:	f7ff fbe8 	bl	890e <_dtoa_r+0x23a>
    913e:	9b04      	ldr	r3, [sp, #16]
    9140:	425d      	negs	r5, r3
    9142:	2702      	movs	r7, #2
    9144:	2d00      	cmp	r5, #0
    9146:	d100      	bne.n	914a <_dtoa_r+0xa76>
    9148:	e543      	b.n	8bd2 <_dtoa_r+0x4fe>
    914a:	230f      	movs	r3, #15
    914c:	402b      	ands	r3, r5
    914e:	00da      	lsls	r2, r3, #3
    9150:	4b1c      	ldr	r3, [pc, #112]	; (91c4 <_dtoa_r+0xaf0>)
    9152:	189b      	adds	r3, r3, r2
    9154:	980c      	ldr	r0, [sp, #48]	; 0x30
    9156:	990d      	ldr	r1, [sp, #52]	; 0x34
    9158:	681a      	ldr	r2, [r3, #0]
    915a:	685b      	ldr	r3, [r3, #4]
    915c:	f004 fd8a 	bl	dc74 <____aeabi_dmul_from_thumb>
    9160:	112d      	asrs	r5, r5, #4
    9162:	900c      	str	r0, [sp, #48]	; 0x30
    9164:	910d      	str	r1, [sp, #52]	; 0x34
    9166:	2d00      	cmp	r5, #0
    9168:	d100      	bne.n	916c <_dtoa_r+0xa98>
    916a:	e532      	b.n	8bd2 <_dtoa_r+0x4fe>
    916c:	2001      	movs	r0, #1
    916e:	4680      	mov	r8, r0
    9170:	4e13      	ldr	r6, [pc, #76]	; (91c0 <_dtoa_r+0xaec>)
    9172:	980c      	ldr	r0, [sp, #48]	; 0x30
    9174:	990d      	ldr	r1, [sp, #52]	; 0x34
    9176:	4642      	mov	r2, r8
    9178:	4215      	tst	r5, r2
    917a:	d004      	beq.n	9186 <_dtoa_r+0xab2>
    917c:	6832      	ldr	r2, [r6, #0]
    917e:	6873      	ldr	r3, [r6, #4]
    9180:	3701      	adds	r7, #1
    9182:	f004 fd77 	bl	dc74 <____aeabi_dmul_from_thumb>
    9186:	106d      	asrs	r5, r5, #1
    9188:	3608      	adds	r6, #8
    918a:	2d00      	cmp	r5, #0
    918c:	d1f3      	bne.n	9176 <_dtoa_r+0xaa2>
    918e:	900c      	str	r0, [sp, #48]	; 0x30
    9190:	910d      	str	r1, [sp, #52]	; 0x34
    9192:	e51e      	b.n	8bd2 <_dtoa_r+0x4fe>
    9194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9196:	4690      	mov	r8, r2
    9198:	9202      	str	r2, [sp, #8]
    919a:	e65f      	b.n	8e5c <_dtoa_r+0x788>
    919c:	46c0      	nop			; (mov r8, r8)
    919e:	46c0      	nop			; (mov r8, r8)
    91a0:	00000000 	.word	0x00000000
    91a4:	40140000 	.word	0x40140000
    91a8:	00000000 	.word	0x00000000
    91ac:	3fe00000 	.word	0x3fe00000
    91b0:	00000000 	.word	0x00000000
    91b4:	3ff00000 	.word	0x3ff00000
    91b8:	00000000 	.word	0x00000000
    91bc:	40240000 	.word	0x40240000
    91c0:	0000e160 	.word	0x0000e160
    91c4:	0000e098 	.word	0x0000e098
    91c8:	9915      	ldr	r1, [sp, #84]	; 0x54
    91ca:	4bd3      	ldr	r3, [pc, #844]	; (9518 <_dtoa_r+0xe44>)
    91cc:	3901      	subs	r1, #1
    91ce:	00ca      	lsls	r2, r1, #3
    91d0:	189b      	adds	r3, r3, r2
    91d2:	9108      	str	r1, [sp, #32]
    91d4:	1c2a      	adds	r2, r5, #0
    91d6:	6818      	ldr	r0, [r3, #0]
    91d8:	6859      	ldr	r1, [r3, #4]
    91da:	1c33      	adds	r3, r6, #0
    91dc:	f004 fd4a 	bl	dc74 <____aeabi_dmul_from_thumb>
    91e0:	9018      	str	r0, [sp, #96]	; 0x60
    91e2:	9119      	str	r1, [sp, #100]	; 0x64
    91e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    91e6:	990d      	ldr	r1, [sp, #52]	; 0x34
    91e8:	f004 fd54 	bl	dc94 <____aeabi_d2iz_from_thumb>
    91ec:	1c05      	adds	r5, r0, #0
    91ee:	f004 fd95 	bl	dd1c <____aeabi_i2d_from_thumb>
    91f2:	1c02      	adds	r2, r0, #0
    91f4:	1c0b      	adds	r3, r1, #0
    91f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    91f8:	990d      	ldr	r1, [sp, #52]	; 0x34
    91fa:	f004 fd99 	bl	dd30 <____aeabi_dsub_from_thumb>
    91fe:	1c2b      	adds	r3, r5, #0
    9200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9202:	3330      	adds	r3, #48	; 0x30
    9204:	7013      	strb	r3, [r2, #0]
    9206:	1c06      	adds	r6, r0, #0
    9208:	4693      	mov	fp, r2
    920a:	2301      	movs	r3, #1
    920c:	9815      	ldr	r0, [sp, #84]	; 0x54
    920e:	449b      	add	fp, r3
    9210:	1c0f      	adds	r7, r1, #0
    9212:	465d      	mov	r5, fp
    9214:	4298      	cmp	r0, r3
    9216:	d022      	beq.n	925e <_dtoa_r+0xb8a>
    9218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    921a:	4691      	mov	r9, r2
    921c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    921e:	465d      	mov	r5, fp
    9220:	4491      	add	r9, r2
    9222:	1c30      	adds	r0, r6, #0
    9224:	46a0      	mov	r8, r4
    9226:	4bb9      	ldr	r3, [pc, #740]	; (950c <_dtoa_r+0xe38>)
    9228:	4ab7      	ldr	r2, [pc, #732]	; (9508 <_dtoa_r+0xe34>)
    922a:	f004 fd23 	bl	dc74 <____aeabi_dmul_from_thumb>
    922e:	1c0f      	adds	r7, r1, #0
    9230:	1c06      	adds	r6, r0, #0
    9232:	f004 fd2f 	bl	dc94 <____aeabi_d2iz_from_thumb>
    9236:	1c04      	adds	r4, r0, #0
    9238:	f004 fd70 	bl	dd1c <____aeabi_i2d_from_thumb>
    923c:	3430      	adds	r4, #48	; 0x30
    923e:	1c02      	adds	r2, r0, #0
    9240:	1c0b      	adds	r3, r1, #0
    9242:	1c30      	adds	r0, r6, #0
    9244:	1c39      	adds	r1, r7, #0
    9246:	f004 fd73 	bl	dd30 <____aeabi_dsub_from_thumb>
    924a:	702c      	strb	r4, [r5, #0]
    924c:	3501      	adds	r5, #1
    924e:	454d      	cmp	r5, r9
    9250:	d1e9      	bne.n	9226 <_dtoa_r+0xb52>
    9252:	9b08      	ldr	r3, [sp, #32]
    9254:	1c1d      	adds	r5, r3, #0
    9256:	1c06      	adds	r6, r0, #0
    9258:	1c0f      	adds	r7, r1, #0
    925a:	4644      	mov	r4, r8
    925c:	445d      	add	r5, fp
    925e:	4aac      	ldr	r2, [pc, #688]	; (9510 <_dtoa_r+0xe3c>)
    9260:	4bac      	ldr	r3, [pc, #688]	; (9514 <_dtoa_r+0xe40>)
    9262:	9818      	ldr	r0, [sp, #96]	; 0x60
    9264:	9919      	ldr	r1, [sp, #100]	; 0x64
    9266:	f004 fd0d 	bl	dc84 <____aeabi_dadd_from_thumb>
    926a:	1c02      	adds	r2, r0, #0
    926c:	1c0b      	adds	r3, r1, #0
    926e:	1c30      	adds	r0, r6, #0
    9270:	1c39      	adds	r1, r7, #0
    9272:	f004 fd23 	bl	dcbc <____aeabi_dcmpgt_from_thumb>
    9276:	2800      	cmp	r0, #0
    9278:	d001      	beq.n	927e <_dtoa_r+0xbaa>
    927a:	f7ff fc22 	bl	8ac2 <_dtoa_r+0x3ee>
    927e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9280:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9282:	48a3      	ldr	r0, [pc, #652]	; (9510 <_dtoa_r+0xe3c>)
    9284:	49a3      	ldr	r1, [pc, #652]	; (9514 <_dtoa_r+0xe40>)
    9286:	f004 fd53 	bl	dd30 <____aeabi_dsub_from_thumb>
    928a:	1c02      	adds	r2, r0, #0
    928c:	1c0b      	adds	r3, r1, #0
    928e:	1c30      	adds	r0, r6, #0
    9290:	1c39      	adds	r1, r7, #0
    9292:	f004 fcc3 	bl	dc1c <____aeabi_dcmplt_from_thumb>
    9296:	2800      	cmp	r0, #0
    9298:	d101      	bne.n	929e <_dtoa_r+0xbca>
    929a:	e74c      	b.n	9136 <_dtoa_r+0xa62>
    929c:	1c1d      	adds	r5, r3, #0
    929e:	1e6b      	subs	r3, r5, #1
    92a0:	781a      	ldrb	r2, [r3, #0]
    92a2:	2a30      	cmp	r2, #48	; 0x30
    92a4:	d0fa      	beq.n	929c <_dtoa_r+0xbc8>
    92a6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    92a8:	9104      	str	r1, [sp, #16]
    92aa:	e50c      	b.n	8cc6 <_dtoa_r+0x5f2>
    92ac:	2100      	movs	r1, #0
    92ae:	9112      	str	r1, [sp, #72]	; 0x48
    92b0:	f7ff fb05 	bl	88be <_dtoa_r+0x1ea>
    92b4:	2200      	movs	r2, #0
    92b6:	9212      	str	r2, [sp, #72]	; 0x48
    92b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    92ba:	2b00      	cmp	r3, #0
    92bc:	dd39      	ble.n	9332 <_dtoa_r+0xc5e>
    92be:	1c18      	adds	r0, r3, #0
    92c0:	9310      	str	r3, [sp, #64]	; 0x40
    92c2:	930b      	str	r3, [sp, #44]	; 0x2c
    92c4:	f7ff fb07 	bl	88d6 <_dtoa_r+0x202>
    92c8:	2101      	movs	r1, #1
    92ca:	9112      	str	r1, [sp, #72]	; 0x48
    92cc:	e7f4      	b.n	92b8 <_dtoa_r+0xbe4>
    92ce:	9807      	ldr	r0, [sp, #28]
    92d0:	4641      	mov	r1, r8
    92d2:	f000 ff99 	bl	a208 <__mcmp>
    92d6:	2800      	cmp	r0, #0
    92d8:	db00      	blt.n	92dc <_dtoa_r+0xc08>
    92da:	e5a0      	b.n	8e1e <_dtoa_r+0x74a>
    92dc:	9804      	ldr	r0, [sp, #16]
    92de:	3801      	subs	r0, #1
    92e0:	9004      	str	r0, [sp, #16]
    92e2:	9907      	ldr	r1, [sp, #28]
    92e4:	220a      	movs	r2, #10
    92e6:	1c20      	adds	r0, r4, #0
    92e8:	2300      	movs	r3, #0
    92ea:	f000 fd13 	bl	9d14 <__multadd>
    92ee:	9910      	ldr	r1, [sp, #64]	; 0x40
    92f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    92f2:	9007      	str	r0, [sp, #28]
    92f4:	910b      	str	r1, [sp, #44]	; 0x2c
    92f6:	2a00      	cmp	r2, #0
    92f8:	d100      	bne.n	92fc <_dtoa_r+0xc28>
    92fa:	e590      	b.n	8e1e <_dtoa_r+0x74a>
    92fc:	1c20      	adds	r0, r4, #0
    92fe:	9902      	ldr	r1, [sp, #8]
    9300:	220a      	movs	r2, #10
    9302:	2300      	movs	r3, #0
    9304:	f000 fd06 	bl	9d14 <__multadd>
    9308:	9002      	str	r0, [sp, #8]
    930a:	e588      	b.n	8e1e <_dtoa_r+0x74a>
    930c:	4641      	mov	r1, r8
    930e:	690b      	ldr	r3, [r1, #16]
    9310:	3303      	adds	r3, #3
    9312:	009b      	lsls	r3, r3, #2
    9314:	4443      	add	r3, r8
    9316:	6858      	ldr	r0, [r3, #4]
    9318:	f000 fd92 	bl	9e40 <__hi0bits>
    931c:	2320      	movs	r3, #32
    931e:	1a1b      	subs	r3, r3, r0
    9320:	e55b      	b.n	8dda <_dtoa_r+0x706>
    9322:	2200      	movs	r2, #0
    9324:	230e      	movs	r3, #14
    9326:	4283      	cmp	r3, r0
    9328:	4152      	adcs	r2, r2
    932a:	4015      	ands	r5, r2
    932c:	900b      	str	r0, [sp, #44]	; 0x2c
    932e:	f7ff fc10 	bl	8b52 <_dtoa_r+0x47e>
    9332:	2001      	movs	r0, #1
    9334:	9010      	str	r0, [sp, #64]	; 0x40
    9336:	900b      	str	r0, [sp, #44]	; 0x2c
    9338:	9027      	str	r0, [sp, #156]	; 0x9c
    933a:	f7ff fc0a 	bl	8b52 <_dtoa_r+0x47e>
    933e:	454e      	cmp	r6, r9
    9340:	d000      	beq.n	9344 <_dtoa_r+0xc70>
    9342:	e545      	b.n	8dd0 <_dtoa_r+0x6fc>
    9344:	033b      	lsls	r3, r7, #12
    9346:	1c3a      	adds	r2, r7, #0
    9348:	454b      	cmp	r3, r9
    934a:	d000      	beq.n	934e <_dtoa_r+0xc7a>
    934c:	e540      	b.n	8dd0 <_dtoa_r+0x6fc>
    934e:	4b73      	ldr	r3, [pc, #460]	; (951c <_dtoa_r+0xe48>)
    9350:	401a      	ands	r2, r3
    9352:	4691      	mov	r9, r2
    9354:	d100      	bne.n	9358 <_dtoa_r+0xc84>
    9356:	e53b      	b.n	8dd0 <_dtoa_r+0x6fc>
    9358:	990f      	ldr	r1, [sp, #60]	; 0x3c
    935a:	2201      	movs	r2, #1
    935c:	3101      	adds	r1, #1
    935e:	910f      	str	r1, [sp, #60]	; 0x3c
    9360:	4492      	add	sl, r2
    9362:	4691      	mov	r9, r2
    9364:	e534      	b.n	8dd0 <_dtoa_r+0x6fc>
    9366:	2d00      	cmp	r5, #0
    9368:	dd05      	ble.n	9376 <_dtoa_r+0xca2>
    936a:	1c20      	adds	r0, r4, #0
    936c:	9902      	ldr	r1, [sp, #8]
    936e:	1c2a      	adds	r2, r5, #0
    9370:	f000 fee2 	bl	a138 <__lshift>
    9374:	9002      	str	r0, [sp, #8]
    9376:	9a02      	ldr	r2, [sp, #8]
    9378:	2300      	movs	r3, #0
    937a:	4693      	mov	fp, r2
    937c:	4599      	cmp	r9, r3
    937e:	d000      	beq.n	9382 <_dtoa_r+0xcae>
    9380:	e0d0      	b.n	9524 <_dtoa_r+0xe50>
    9382:	2301      	movs	r3, #1
    9384:	9802      	ldr	r0, [sp, #8]
    9386:	4033      	ands	r3, r6
    9388:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    938a:	9306      	str	r3, [sp, #24]
    938c:	1c07      	adds	r7, r0, #0
    938e:	46c1      	mov	r9, r8
    9390:	4649      	mov	r1, r9
    9392:	9807      	ldr	r0, [sp, #28]
    9394:	f7ff f8ec 	bl	8570 <quorem>
    9398:	3030      	adds	r0, #48	; 0x30
    939a:	9002      	str	r0, [sp, #8]
    939c:	1c39      	adds	r1, r7, #0
    939e:	9807      	ldr	r0, [sp, #28]
    93a0:	f000 ff32 	bl	a208 <__mcmp>
    93a4:	4649      	mov	r1, r9
    93a6:	4682      	mov	sl, r0
    93a8:	465a      	mov	r2, fp
    93aa:	1c20      	adds	r0, r4, #0
    93ac:	f000 ff4c 	bl	a248 <__mdiff>
    93b0:	68c3      	ldr	r3, [r0, #12]
    93b2:	4680      	mov	r8, r0
    93b4:	2601      	movs	r6, #1
    93b6:	2b00      	cmp	r3, #0
    93b8:	d03a      	beq.n	9430 <_dtoa_r+0xd5c>
    93ba:	4641      	mov	r1, r8
    93bc:	1c20      	adds	r0, r4, #0
    93be:	f000 fc9d 	bl	9cfc <_Bfree>
    93c2:	9926      	ldr	r1, [sp, #152]	; 0x98
    93c4:	4331      	orrs	r1, r6
    93c6:	d103      	bne.n	93d0 <_dtoa_r+0xcfc>
    93c8:	9a06      	ldr	r2, [sp, #24]
    93ca:	2a00      	cmp	r2, #0
    93cc:	d100      	bne.n	93d0 <_dtoa_r+0xcfc>
    93ce:	e0e7      	b.n	95a0 <_dtoa_r+0xecc>
    93d0:	2000      	movs	r0, #0
    93d2:	4582      	cmp	sl, r0
    93d4:	db78      	blt.n	94c8 <_dtoa_r+0xdf4>
    93d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    93d8:	4651      	mov	r1, sl
    93da:	4311      	orrs	r1, r2
    93dc:	d102      	bne.n	93e4 <_dtoa_r+0xd10>
    93de:	9b06      	ldr	r3, [sp, #24]
    93e0:	4283      	cmp	r3, r0
    93e2:	d071      	beq.n	94c8 <_dtoa_r+0xdf4>
    93e4:	2e00      	cmp	r6, #0
    93e6:	dd00      	ble.n	93ea <_dtoa_r+0xd16>
    93e8:	e0c3      	b.n	9572 <_dtoa_r+0xe9e>
    93ea:	2108      	movs	r1, #8
    93ec:	4668      	mov	r0, sp
    93ee:	5c08      	ldrb	r0, [r1, r0]
    93f0:	7028      	strb	r0, [r5, #0]
    93f2:	990a      	ldr	r1, [sp, #40]	; 0x28
    93f4:	3501      	adds	r5, #1
    93f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    93f8:	1a6b      	subs	r3, r5, r1
    93fa:	4293      	cmp	r3, r2
    93fc:	d100      	bne.n	9400 <_dtoa_r+0xd2c>
    93fe:	e0b1      	b.n	9564 <_dtoa_r+0xe90>
    9400:	1c20      	adds	r0, r4, #0
    9402:	9907      	ldr	r1, [sp, #28]
    9404:	220a      	movs	r2, #10
    9406:	2300      	movs	r3, #0
    9408:	f000 fc84 	bl	9d14 <__multadd>
    940c:	9007      	str	r0, [sp, #28]
    940e:	455f      	cmp	r7, fp
    9410:	d014      	beq.n	943c <_dtoa_r+0xd68>
    9412:	1c39      	adds	r1, r7, #0
    9414:	220a      	movs	r2, #10
    9416:	2300      	movs	r3, #0
    9418:	1c20      	adds	r0, r4, #0
    941a:	f000 fc7b 	bl	9d14 <__multadd>
    941e:	4659      	mov	r1, fp
    9420:	1c07      	adds	r7, r0, #0
    9422:	220a      	movs	r2, #10
    9424:	1c20      	adds	r0, r4, #0
    9426:	2300      	movs	r3, #0
    9428:	f000 fc74 	bl	9d14 <__multadd>
    942c:	4683      	mov	fp, r0
    942e:	e7af      	b.n	9390 <_dtoa_r+0xcbc>
    9430:	9807      	ldr	r0, [sp, #28]
    9432:	4641      	mov	r1, r8
    9434:	f000 fee8 	bl	a208 <__mcmp>
    9438:	1c06      	adds	r6, r0, #0
    943a:	e7be      	b.n	93ba <_dtoa_r+0xce6>
    943c:	1c39      	adds	r1, r7, #0
    943e:	1c20      	adds	r0, r4, #0
    9440:	220a      	movs	r2, #10
    9442:	2300      	movs	r3, #0
    9444:	f000 fc66 	bl	9d14 <__multadd>
    9448:	1c07      	adds	r7, r0, #0
    944a:	4683      	mov	fp, r0
    944c:	e7a0      	b.n	9390 <_dtoa_r+0xcbc>
    944e:	464c      	mov	r4, r9
    9450:	e439      	b.n	8cc6 <_dtoa_r+0x5f2>
    9452:	1c20      	adds	r0, r4, #0
    9454:	9907      	ldr	r1, [sp, #28]
    9456:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9458:	f000 fe14 	bl	a084 <__pow5mult>
    945c:	9007      	str	r0, [sp, #28]
    945e:	e4a4      	b.n	8daa <_dtoa_r+0x6d6>
    9460:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9462:	4680      	mov	r8, r0
    9464:	9002      	str	r0, [sp, #8]
    9466:	f7ff fc1a 	bl	8c9e <_dtoa_r+0x5ca>
    946a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    946c:	9814      	ldr	r0, [sp, #80]	; 0x50
    946e:	1b52      	subs	r2, r2, r5
    9470:	1880      	adds	r0, r0, r2
    9472:	18ad      	adds	r5, r5, r2
    9474:	2100      	movs	r1, #0
    9476:	9014      	str	r0, [sp, #80]	; 0x50
    9478:	9513      	str	r5, [sp, #76]	; 0x4c
    947a:	4688      	mov	r8, r1
    947c:	e533      	b.n	8ee6 <_dtoa_r+0x812>
    947e:	1c20      	adds	r0, r4, #0
    9480:	9907      	ldr	r1, [sp, #28]
    9482:	f000 fdff 	bl	a084 <__pow5mult>
    9486:	9007      	str	r0, [sp, #28]
    9488:	e48f      	b.n	8daa <_dtoa_r+0x6d6>
    948a:	4698      	mov	r8, r3
    948c:	9302      	str	r3, [sp, #8]
    948e:	f7ff fc06 	bl	8c9e <_dtoa_r+0x5ca>
    9492:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9494:	2b00      	cmp	r3, #0
    9496:	d05e      	beq.n	9556 <_dtoa_r+0xe82>
    9498:	4d21      	ldr	r5, [pc, #132]	; (9520 <_dtoa_r+0xe4c>)
    949a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    949c:	1940      	adds	r0, r0, r5
    949e:	4688      	mov	r8, r1
    94a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    94a2:	e526      	b.n	8ef2 <_dtoa_r+0x81e>
    94a4:	3201      	adds	r2, #1
    94a6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    94a8:	0612      	lsls	r2, r2, #24
    94aa:	0e12      	lsrs	r2, r2, #24
    94ac:	910a      	str	r1, [sp, #40]	; 0x28
    94ae:	9004      	str	r0, [sp, #16]
    94b0:	701a      	strb	r2, [r3, #0]
    94b2:	f7ff fc08 	bl	8cc6 <_dtoa_r+0x5f2>
    94b6:	4645      	mov	r5, r8
    94b8:	990a      	ldr	r1, [sp, #40]	; 0x28
    94ba:	465c      	mov	r4, fp
    94bc:	f7ff fb04 	bl	8ac8 <_dtoa_r+0x3f4>
    94c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    94c2:	2000      	movs	r0, #0
    94c4:	1a9d      	subs	r5, r3, r2
    94c6:	e514      	b.n	8ef2 <_dtoa_r+0x81e>
    94c8:	9802      	ldr	r0, [sp, #8]
    94ca:	46c8      	mov	r8, r9
    94cc:	4682      	mov	sl, r0
    94ce:	46b9      	mov	r9, r7
    94d0:	2e00      	cmp	r6, #0
    94d2:	dd0f      	ble.n	94f4 <_dtoa_r+0xe20>
    94d4:	9907      	ldr	r1, [sp, #28]
    94d6:	1c20      	adds	r0, r4, #0
    94d8:	2201      	movs	r2, #1
    94da:	f000 fe2d 	bl	a138 <__lshift>
    94de:	4641      	mov	r1, r8
    94e0:	9007      	str	r0, [sp, #28]
    94e2:	f000 fe91 	bl	a208 <__mcmp>
    94e6:	2800      	cmp	r0, #0
    94e8:	dd6d      	ble.n	95c6 <_dtoa_r+0xef2>
    94ea:	2239      	movs	r2, #57	; 0x39
    94ec:	4592      	cmp	sl, r2
    94ee:	d050      	beq.n	9592 <_dtoa_r+0xebe>
    94f0:	2301      	movs	r3, #1
    94f2:	449a      	add	sl, r3
    94f4:	4657      	mov	r7, sl
    94f6:	4658      	mov	r0, fp
    94f8:	702f      	strb	r7, [r5, #0]
    94fa:	3501      	adds	r5, #1
    94fc:	9002      	str	r0, [sp, #8]
    94fe:	f7ff fbd4 	bl	8caa <_dtoa_r+0x5d6>
    9502:	46c0      	nop			; (mov r8, r8)
    9504:	46c0      	nop			; (mov r8, r8)
    9506:	46c0      	nop			; (mov r8, r8)
    9508:	00000000 	.word	0x00000000
    950c:	40240000 	.word	0x40240000
    9510:	00000000 	.word	0x00000000
    9514:	3fe00000 	.word	0x3fe00000
    9518:	0000e098 	.word	0x0000e098
    951c:	7ff00000 	.word	0x7ff00000
    9520:	00000433 	.word	0x00000433
    9524:	6851      	ldr	r1, [r2, #4]
    9526:	1c20      	adds	r0, r4, #0
    9528:	f000 fbbe 	bl	9ca8 <_Balloc>
    952c:	9b02      	ldr	r3, [sp, #8]
    952e:	691a      	ldr	r2, [r3, #16]
    9530:	9902      	ldr	r1, [sp, #8]
    9532:	3202      	adds	r2, #2
    9534:	1c05      	adds	r5, r0, #0
    9536:	310c      	adds	r1, #12
    9538:	0092      	lsls	r2, r2, #2
    953a:	300c      	adds	r0, #12
    953c:	f7fb fe64 	bl	5208 <memcpy>
    9540:	1c20      	adds	r0, r4, #0
    9542:	1c29      	adds	r1, r5, #0
    9544:	2201      	movs	r2, #1
    9546:	f000 fdf7 	bl	a138 <__lshift>
    954a:	4683      	mov	fp, r0
    954c:	e719      	b.n	9382 <_dtoa_r+0xcae>
    954e:	3201      	adds	r2, #1
    9550:	701a      	strb	r2, [r3, #0]
    9552:	f7ff fbaa 	bl	8caa <_dtoa_r+0x5d6>
    9556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    955a:	2036      	movs	r0, #54	; 0x36
    955c:	1ac0      	subs	r0, r0, r3
    955e:	4690      	mov	r8, r2
    9560:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9562:	e4c6      	b.n	8ef2 <_dtoa_r+0x81e>
    9564:	9802      	ldr	r0, [sp, #8]
    9566:	4659      	mov	r1, fp
    9568:	46c8      	mov	r8, r9
    956a:	4682      	mov	sl, r0
    956c:	46b9      	mov	r9, r7
    956e:	9102      	str	r1, [sp, #8]
    9570:	e5ad      	b.n	90ce <_dtoa_r+0x9fa>
    9572:	9802      	ldr	r0, [sp, #8]
    9574:	2139      	movs	r1, #57	; 0x39
    9576:	4682      	mov	sl, r0
    9578:	46c8      	mov	r8, r9
    957a:	46b9      	mov	r9, r7
    957c:	458a      	cmp	sl, r1
    957e:	d008      	beq.n	9592 <_dtoa_r+0xebe>
    9580:	2001      	movs	r0, #1
    9582:	1c03      	adds	r3, r0, #0
    9584:	4453      	add	r3, sl
    9586:	4659      	mov	r1, fp
    9588:	702b      	strb	r3, [r5, #0]
    958a:	182d      	adds	r5, r5, r0
    958c:	9102      	str	r1, [sp, #8]
    958e:	f7ff fb8c 	bl	8caa <_dtoa_r+0x5d6>
    9592:	2339      	movs	r3, #57	; 0x39
    9594:	702b      	strb	r3, [r5, #0]
    9596:	465a      	mov	r2, fp
    9598:	3501      	adds	r5, #1
    959a:	9202      	str	r2, [sp, #8]
    959c:	990a      	ldr	r1, [sp, #40]	; 0x28
    959e:	e5a4      	b.n	90ea <_dtoa_r+0xa16>
    95a0:	9b02      	ldr	r3, [sp, #8]
    95a2:	46c8      	mov	r8, r9
    95a4:	4656      	mov	r6, sl
    95a6:	46b9      	mov	r9, r7
    95a8:	469a      	mov	sl, r3
    95aa:	2739      	movs	r7, #57	; 0x39
    95ac:	45ba      	cmp	sl, r7
    95ae:	d0f0      	beq.n	9592 <_dtoa_r+0xebe>
    95b0:	17f3      	asrs	r3, r6, #31
    95b2:	1b9b      	subs	r3, r3, r6
    95b4:	0fdb      	lsrs	r3, r3, #31
    95b6:	449a      	add	sl, r3
    95b8:	4650      	mov	r0, sl
    95ba:	4659      	mov	r1, fp
    95bc:	7028      	strb	r0, [r5, #0]
    95be:	3501      	adds	r5, #1
    95c0:	9102      	str	r1, [sp, #8]
    95c2:	f7ff fb72 	bl	8caa <_dtoa_r+0x5d6>
    95c6:	2800      	cmp	r0, #0
    95c8:	d194      	bne.n	94f4 <_dtoa_r+0xe20>
    95ca:	4651      	mov	r1, sl
    95cc:	07c9      	lsls	r1, r1, #31
    95ce:	d591      	bpl.n	94f4 <_dtoa_r+0xe20>
    95d0:	e78b      	b.n	94ea <_dtoa_r+0xe16>
    95d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    95d4:	9204      	str	r2, [sp, #16]
    95d6:	f7ff fb76 	bl	8cc6 <_dtoa_r+0x5f2>
    95da:	2b04      	cmp	r3, #4
    95dc:	d101      	bne.n	95e2 <_dtoa_r+0xf0e>
    95de:	f7ff fc08 	bl	8df2 <_dtoa_r+0x71e>
    95e2:	331c      	adds	r3, #28
    95e4:	f7ff fc00 	bl	8de8 <_dtoa_r+0x714>
    95e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    95ea:	230e      	movs	r3, #14
    95ec:	1c08      	adds	r0, r1, #0
    95ee:	4293      	cmp	r3, r2
    95f0:	4148      	adcs	r0, r1
    95f2:	4005      	ands	r5, r0
    95f4:	f7ff faaf 	bl	8b56 <_dtoa_r+0x482>

000095f8 <_fclose_r>:
    95f8:	b570      	push	{r4, r5, r6, lr}
    95fa:	1c05      	adds	r5, r0, #0
    95fc:	1c0c      	adds	r4, r1, #0
    95fe:	1e0e      	subs	r6, r1, #0
    9600:	d033      	beq.n	966a <_fclose_r+0x72>
    9602:	f7fb f9bb 	bl	497c <__sfp_lock_acquire>
    9606:	2d00      	cmp	r5, #0
    9608:	d002      	beq.n	9610 <_fclose_r+0x18>
    960a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    960c:	2b00      	cmp	r3, #0
    960e:	d030      	beq.n	9672 <_fclose_r+0x7a>
    9610:	220c      	movs	r2, #12
    9612:	5ea6      	ldrsh	r6, [r4, r2]
    9614:	2e00      	cmp	r6, #0
    9616:	d026      	beq.n	9666 <_fclose_r+0x6e>
    9618:	1c28      	adds	r0, r5, #0
    961a:	1c21      	adds	r1, r4, #0
    961c:	f7fa fff2 	bl	4604 <_fflush_r>
    9620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9622:	1c06      	adds	r6, r0, #0
    9624:	2b00      	cmp	r3, #0
    9626:	d005      	beq.n	9634 <_fclose_r+0x3c>
    9628:	69e1      	ldr	r1, [r4, #28]
    962a:	1c28      	adds	r0, r5, #0
    962c:	f000 f83e 	bl	96ac <fclose+0x18>
    9630:	2800      	cmp	r0, #0
    9632:	db2b      	blt.n	968c <_fclose_r+0x94>
    9634:	89a3      	ldrh	r3, [r4, #12]
    9636:	061a      	lsls	r2, r3, #24
    9638:	d423      	bmi.n	9682 <_fclose_r+0x8a>
    963a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    963c:	2900      	cmp	r1, #0
    963e:	d008      	beq.n	9652 <_fclose_r+0x5a>
    9640:	1c23      	adds	r3, r4, #0
    9642:	3340      	adds	r3, #64	; 0x40
    9644:	4299      	cmp	r1, r3
    9646:	d002      	beq.n	964e <_fclose_r+0x56>
    9648:	1c28      	adds	r0, r5, #0
    964a:	f7fb fa0d 	bl	4a68 <_free_r>
    964e:	2300      	movs	r3, #0
    9650:	6323      	str	r3, [r4, #48]	; 0x30
    9652:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9654:	2900      	cmp	r1, #0
    9656:	d004      	beq.n	9662 <_fclose_r+0x6a>
    9658:	1c28      	adds	r0, r5, #0
    965a:	f7fb fa05 	bl	4a68 <_free_r>
    965e:	2300      	movs	r3, #0
    9660:	6463      	str	r3, [r4, #68]	; 0x44
    9662:	2300      	movs	r3, #0
    9664:	81a3      	strh	r3, [r4, #12]
    9666:	f7fb f98b 	bl	4980 <__sfp_lock_release>
    966a:	1c30      	adds	r0, r6, #0
    966c:	bc70      	pop	{r4, r5, r6}
    966e:	bc02      	pop	{r1}
    9670:	4708      	bx	r1
    9672:	1c28      	adds	r0, r5, #0
    9674:	f7fb f8ba 	bl	47ec <__sinit>
    9678:	220c      	movs	r2, #12
    967a:	5ea6      	ldrsh	r6, [r4, r2]
    967c:	2e00      	cmp	r6, #0
    967e:	d1cb      	bne.n	9618 <_fclose_r+0x20>
    9680:	e7f1      	b.n	9666 <_fclose_r+0x6e>
    9682:	6921      	ldr	r1, [r4, #16]
    9684:	1c28      	adds	r0, r5, #0
    9686:	f7fb f9ef 	bl	4a68 <_free_r>
    968a:	e7d6      	b.n	963a <_fclose_r+0x42>
    968c:	2601      	movs	r6, #1
    968e:	4276      	negs	r6, r6
    9690:	e7d0      	b.n	9634 <_fclose_r+0x3c>
    9692:	46c0      	nop			; (mov r8, r8)

00009694 <fclose>:
    9694:	b508      	push	{r3, lr}
    9696:	4b04      	ldr	r3, [pc, #16]	; (96a8 <fclose+0x14>)
    9698:	1c01      	adds	r1, r0, #0
    969a:	6818      	ldr	r0, [r3, #0]
    969c:	f7ff ffac 	bl	95f8 <_fclose_r>
    96a0:	bc08      	pop	{r3}
    96a2:	bc02      	pop	{r1}
    96a4:	4708      	bx	r1
    96a6:	46c0      	nop			; (mov r8, r8)
    96a8:	40000000 	.word	0x40000000
    96ac:	4718      	bx	r3
    96ae:	46c0      	nop			; (mov r8, r8)

000096b0 <__sfvwrite_r>:
    96b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    96b2:	465f      	mov	r7, fp
    96b4:	4656      	mov	r6, sl
    96b6:	464d      	mov	r5, r9
    96b8:	4644      	mov	r4, r8
    96ba:	b4f0      	push	{r4, r5, r6, r7}
    96bc:	b083      	sub	sp, #12
    96be:	9001      	str	r0, [sp, #4]
    96c0:	6890      	ldr	r0, [r2, #8]
    96c2:	1c0c      	adds	r4, r1, #0
    96c4:	1c16      	adds	r6, r2, #0
    96c6:	2800      	cmp	r0, #0
    96c8:	d028      	beq.n	971c <__sfvwrite_r+0x6c>
    96ca:	898b      	ldrh	r3, [r1, #12]
    96cc:	1c1a      	adds	r2, r3, #0
    96ce:	0718      	lsls	r0, r3, #28
    96d0:	d52d      	bpl.n	972e <__sfvwrite_r+0x7e>
    96d2:	6909      	ldr	r1, [r1, #16]
    96d4:	2900      	cmp	r1, #0
    96d6:	d02a      	beq.n	972e <__sfvwrite_r+0x7e>
    96d8:	2102      	movs	r1, #2
    96da:	6835      	ldr	r5, [r6, #0]
    96dc:	4011      	ands	r1, r2
    96de:	d033      	beq.n	9748 <__sfvwrite_r+0x98>
    96e0:	2380      	movs	r3, #128	; 0x80
    96e2:	2200      	movs	r2, #0
    96e4:	00db      	lsls	r3, r3, #3
    96e6:	4691      	mov	r9, r2
    96e8:	1c17      	adds	r7, r2, #0
    96ea:	469a      	mov	sl, r3
    96ec:	46b0      	mov	r8, r6
    96ee:	2f00      	cmp	r7, #0
    96f0:	d068      	beq.n	97c4 <__sfvwrite_r+0x114>
    96f2:	69e1      	ldr	r1, [r4, #28]
    96f4:	1c3b      	adds	r3, r7, #0
    96f6:	4557      	cmp	r7, sl
    96f8:	d901      	bls.n	96fe <__sfvwrite_r+0x4e>
    96fa:	2380      	movs	r3, #128	; 0x80
    96fc:	00db      	lsls	r3, r3, #3
    96fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
    9700:	9801      	ldr	r0, [sp, #4]
    9702:	464a      	mov	r2, r9
    9704:	f000 f974 	bl	99f0 <__sfvwrite_r+0x340>
    9708:	2800      	cmp	r0, #0
    970a:	dd63      	ble.n	97d4 <__sfvwrite_r+0x124>
    970c:	4641      	mov	r1, r8
    970e:	688b      	ldr	r3, [r1, #8]
    9710:	4481      	add	r9, r0
    9712:	1a3f      	subs	r7, r7, r0
    9714:	1a18      	subs	r0, r3, r0
    9716:	6088      	str	r0, [r1, #8]
    9718:	2800      	cmp	r0, #0
    971a:	d1e8      	bne.n	96ee <__sfvwrite_r+0x3e>
    971c:	b003      	add	sp, #12
    971e:	bc3c      	pop	{r2, r3, r4, r5}
    9720:	4690      	mov	r8, r2
    9722:	4699      	mov	r9, r3
    9724:	46a2      	mov	sl, r4
    9726:	46ab      	mov	fp, r5
    9728:	bcf0      	pop	{r4, r5, r6, r7}
    972a:	bc02      	pop	{r1}
    972c:	4708      	bx	r1
    972e:	9801      	ldr	r0, [sp, #4]
    9730:	1c21      	adds	r1, r4, #0
    9732:	f7fe febd 	bl	84b0 <__swsetup_r>
    9736:	2800      	cmp	r0, #0
    9738:	d000      	beq.n	973c <__sfvwrite_r+0x8c>
    973a:	e14d      	b.n	99d8 <__sfvwrite_r+0x328>
    973c:	89a3      	ldrh	r3, [r4, #12]
    973e:	2102      	movs	r1, #2
    9740:	1c1a      	adds	r2, r3, #0
    9742:	6835      	ldr	r5, [r6, #0]
    9744:	4011      	ands	r1, r2
    9746:	d1cb      	bne.n	96e0 <__sfvwrite_r+0x30>
    9748:	2001      	movs	r0, #1
    974a:	4002      	ands	r2, r0
    974c:	d049      	beq.n	97e2 <__sfvwrite_r+0x132>
    974e:	9100      	str	r1, [sp, #0]
    9750:	468a      	mov	sl, r1
    9752:	468b      	mov	fp, r1
    9754:	1c0f      	adds	r7, r1, #0
    9756:	2f00      	cmp	r7, #0
    9758:	d076      	beq.n	9848 <__sfvwrite_r+0x198>
    975a:	9a00      	ldr	r2, [sp, #0]
    975c:	2a00      	cmp	r2, #0
    975e:	d100      	bne.n	9762 <__sfvwrite_r+0xb2>
    9760:	e0c2      	b.n	98e8 <__sfvwrite_r+0x238>
    9762:	46d1      	mov	r9, sl
    9764:	45ba      	cmp	sl, r7
    9766:	d900      	bls.n	976a <__sfvwrite_r+0xba>
    9768:	46b9      	mov	r9, r7
    976a:	6963      	ldr	r3, [r4, #20]
    976c:	68a2      	ldr	r2, [r4, #8]
    976e:	18d2      	adds	r2, r2, r3
    9770:	4690      	mov	r8, r2
    9772:	6820      	ldr	r0, [r4, #0]
    9774:	2201      	movs	r2, #1
    9776:	45c1      	cmp	r9, r8
    9778:	dc00      	bgt.n	977c <__sfvwrite_r+0xcc>
    977a:	2200      	movs	r2, #0
    977c:	0612      	lsls	r2, r2, #24
    977e:	2a00      	cmp	r2, #0
    9780:	d000      	beq.n	9784 <__sfvwrite_r+0xd4>
    9782:	e09e      	b.n	98c2 <__sfvwrite_r+0x212>
    9784:	4599      	cmp	r9, r3
    9786:	da00      	bge.n	978a <__sfvwrite_r+0xda>
    9788:	e07e      	b.n	9888 <__sfvwrite_r+0x1d8>
    978a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    978c:	69e1      	ldr	r1, [r4, #28]
    978e:	4684      	mov	ip, r0
    9790:	465a      	mov	r2, fp
    9792:	9801      	ldr	r0, [sp, #4]
    9794:	f000 f92d 	bl	99f2 <__sfvwrite_r+0x342>
    9798:	2100      	movs	r1, #0
    979a:	4680      	mov	r8, r0
    979c:	4588      	cmp	r8, r1
    979e:	dd19      	ble.n	97d4 <__sfvwrite_r+0x124>
    97a0:	4653      	mov	r3, sl
    97a2:	4640      	mov	r0, r8
    97a4:	1a1b      	subs	r3, r3, r0
    97a6:	469a      	mov	sl, r3
    97a8:	2100      	movs	r1, #0
    97aa:	458a      	cmp	sl, r1
    97ac:	d100      	bne.n	97b0 <__sfvwrite_r+0x100>
    97ae:	e07f      	b.n	98b0 <__sfvwrite_r+0x200>
    97b0:	68b3      	ldr	r3, [r6, #8]
    97b2:	4640      	mov	r0, r8
    97b4:	1a1b      	subs	r3, r3, r0
    97b6:	44c3      	add	fp, r8
    97b8:	1a3f      	subs	r7, r7, r0
    97ba:	60b3      	str	r3, [r6, #8]
    97bc:	2b00      	cmp	r3, #0
    97be:	d1ca      	bne.n	9756 <__sfvwrite_r+0xa6>
    97c0:	1c18      	adds	r0, r3, #0
    97c2:	e7ab      	b.n	971c <__sfvwrite_r+0x6c>
    97c4:	682b      	ldr	r3, [r5, #0]
    97c6:	686f      	ldr	r7, [r5, #4]
    97c8:	4699      	mov	r9, r3
    97ca:	3508      	adds	r5, #8
    97cc:	e78f      	b.n	96ee <__sfvwrite_r+0x3e>
    97ce:	9a01      	ldr	r2, [sp, #4]
    97d0:	230c      	movs	r3, #12
    97d2:	6013      	str	r3, [r2, #0]
    97d4:	89a3      	ldrh	r3, [r4, #12]
    97d6:	2240      	movs	r2, #64	; 0x40
    97d8:	4313      	orrs	r3, r2
    97da:	2001      	movs	r0, #1
    97dc:	81a3      	strh	r3, [r4, #12]
    97de:	4240      	negs	r0, r0
    97e0:	e79c      	b.n	971c <__sfvwrite_r+0x6c>
    97e2:	4691      	mov	r9, r2
    97e4:	1c17      	adds	r7, r2, #0
    97e6:	2f00      	cmp	r7, #0
    97e8:	d029      	beq.n	983e <__sfvwrite_r+0x18e>
    97ea:	68a1      	ldr	r1, [r4, #8]
    97ec:	2280      	movs	r2, #128	; 0x80
    97ee:	0092      	lsls	r2, r2, #2
    97f0:	4688      	mov	r8, r1
    97f2:	4213      	tst	r3, r2
    97f4:	d02f      	beq.n	9856 <__sfvwrite_r+0x1a6>
    97f6:	468a      	mov	sl, r1
    97f8:	4547      	cmp	r7, r8
    97fa:	d340      	bcc.n	987e <__sfvwrite_r+0x1ce>
    97fc:	2090      	movs	r0, #144	; 0x90
    97fe:	00c0      	lsls	r0, r0, #3
    9800:	4203      	tst	r3, r0
    9802:	d000      	beq.n	9806 <__sfvwrite_r+0x156>
    9804:	e09d      	b.n	9942 <__sfvwrite_r+0x292>
    9806:	6820      	ldr	r0, [r4, #0]
    9808:	468b      	mov	fp, r1
    980a:	46b8      	mov	r8, r7
    980c:	4652      	mov	r2, sl
    980e:	4649      	mov	r1, r9
    9810:	f000 f9fc 	bl	9c0c <memmove>
    9814:	68a3      	ldr	r3, [r4, #8]
    9816:	465a      	mov	r2, fp
    9818:	1a9b      	subs	r3, r3, r2
    981a:	60a3      	str	r3, [r4, #8]
    981c:	6823      	ldr	r3, [r4, #0]
    981e:	4453      	add	r3, sl
    9820:	6023      	str	r3, [r4, #0]
    9822:	46ba      	mov	sl, r7
    9824:	68b0      	ldr	r0, [r6, #8]
    9826:	4643      	mov	r3, r8
    9828:	4652      	mov	r2, sl
    982a:	1ac0      	subs	r0, r0, r3
    982c:	44d1      	add	r9, sl
    982e:	1abf      	subs	r7, r7, r2
    9830:	60b0      	str	r0, [r6, #8]
    9832:	2800      	cmp	r0, #0
    9834:	d100      	bne.n	9838 <__sfvwrite_r+0x188>
    9836:	e771      	b.n	971c <__sfvwrite_r+0x6c>
    9838:	89a3      	ldrh	r3, [r4, #12]
    983a:	2f00      	cmp	r7, #0
    983c:	d1d5      	bne.n	97ea <__sfvwrite_r+0x13a>
    983e:	6828      	ldr	r0, [r5, #0]
    9840:	686f      	ldr	r7, [r5, #4]
    9842:	4681      	mov	r9, r0
    9844:	3508      	adds	r5, #8
    9846:	e7ce      	b.n	97e6 <__sfvwrite_r+0x136>
    9848:	6828      	ldr	r0, [r5, #0]
    984a:	2100      	movs	r1, #0
    984c:	686f      	ldr	r7, [r5, #4]
    984e:	4683      	mov	fp, r0
    9850:	3508      	adds	r5, #8
    9852:	9100      	str	r1, [sp, #0]
    9854:	e77f      	b.n	9756 <__sfvwrite_r+0xa6>
    9856:	6820      	ldr	r0, [r4, #0]
    9858:	468a      	mov	sl, r1
    985a:	45b8      	cmp	r8, r7
    985c:	d35f      	bcc.n	991e <__sfvwrite_r+0x26e>
    985e:	6963      	ldr	r3, [r4, #20]
    9860:	429f      	cmp	r7, r3
    9862:	d34f      	bcc.n	9904 <__sfvwrite_r+0x254>
    9864:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9866:	69e1      	ldr	r1, [r4, #28]
    9868:	4684      	mov	ip, r0
    986a:	464a      	mov	r2, r9
    986c:	9801      	ldr	r0, [sp, #4]
    986e:	f000 f8c0 	bl	99f2 <__sfvwrite_r+0x342>
    9872:	2100      	movs	r1, #0
    9874:	4680      	mov	r8, r0
    9876:	4588      	cmp	r8, r1
    9878:	ddac      	ble.n	97d4 <__sfvwrite_r+0x124>
    987a:	4682      	mov	sl, r0
    987c:	e7d2      	b.n	9824 <__sfvwrite_r+0x174>
    987e:	46bb      	mov	fp, r7
    9880:	6820      	ldr	r0, [r4, #0]
    9882:	46ba      	mov	sl, r7
    9884:	46b8      	mov	r8, r7
    9886:	e7c1      	b.n	980c <__sfvwrite_r+0x15c>
    9888:	4659      	mov	r1, fp
    988a:	464a      	mov	r2, r9
    988c:	f000 f9be 	bl	9c0c <memmove>
    9890:	68a3      	ldr	r3, [r4, #8]
    9892:	464a      	mov	r2, r9
    9894:	1a9b      	subs	r3, r3, r2
    9896:	60a3      	str	r3, [r4, #8]
    9898:	6823      	ldr	r3, [r4, #0]
    989a:	46c8      	mov	r8, r9
    989c:	444b      	add	r3, r9
    989e:	6023      	str	r3, [r4, #0]
    98a0:	4640      	mov	r0, r8
    98a2:	4653      	mov	r3, sl
    98a4:	1a1b      	subs	r3, r3, r0
    98a6:	469a      	mov	sl, r3
    98a8:	2100      	movs	r1, #0
    98aa:	458a      	cmp	sl, r1
    98ac:	d000      	beq.n	98b0 <__sfvwrite_r+0x200>
    98ae:	e77f      	b.n	97b0 <__sfvwrite_r+0x100>
    98b0:	9801      	ldr	r0, [sp, #4]
    98b2:	1c21      	adds	r1, r4, #0
    98b4:	f7fa fea6 	bl	4604 <_fflush_r>
    98b8:	2800      	cmp	r0, #0
    98ba:	d18b      	bne.n	97d4 <__sfvwrite_r+0x124>
    98bc:	4652      	mov	r2, sl
    98be:	9200      	str	r2, [sp, #0]
    98c0:	e776      	b.n	97b0 <__sfvwrite_r+0x100>
    98c2:	6922      	ldr	r2, [r4, #16]
    98c4:	4282      	cmp	r2, r0
    98c6:	d300      	bcc.n	98ca <__sfvwrite_r+0x21a>
    98c8:	e75c      	b.n	9784 <__sfvwrite_r+0xd4>
    98ca:	4659      	mov	r1, fp
    98cc:	4642      	mov	r2, r8
    98ce:	f000 f99d 	bl	9c0c <memmove>
    98d2:	6823      	ldr	r3, [r4, #0]
    98d4:	4443      	add	r3, r8
    98d6:	6023      	str	r3, [r4, #0]
    98d8:	9801      	ldr	r0, [sp, #4]
    98da:	1c21      	adds	r1, r4, #0
    98dc:	f7fa fe92 	bl	4604 <_fflush_r>
    98e0:	2800      	cmp	r0, #0
    98e2:	d100      	bne.n	98e6 <__sfvwrite_r+0x236>
    98e4:	e75c      	b.n	97a0 <__sfvwrite_r+0xf0>
    98e6:	e775      	b.n	97d4 <__sfvwrite_r+0x124>
    98e8:	4658      	mov	r0, fp
    98ea:	210a      	movs	r1, #10
    98ec:	1c3a      	adds	r2, r7, #0
    98ee:	f000 f945 	bl	9b7c <memchr>
    98f2:	2800      	cmp	r0, #0
    98f4:	d06b      	beq.n	99ce <__sfvwrite_r+0x31e>
    98f6:	3001      	adds	r0, #1
    98f8:	465b      	mov	r3, fp
    98fa:	1ac3      	subs	r3, r0, r3
    98fc:	2001      	movs	r0, #1
    98fe:	469a      	mov	sl, r3
    9900:	9000      	str	r0, [sp, #0]
    9902:	e72e      	b.n	9762 <__sfvwrite_r+0xb2>
    9904:	4649      	mov	r1, r9
    9906:	1c3a      	adds	r2, r7, #0
    9908:	f000 f980 	bl	9c0c <memmove>
    990c:	68a3      	ldr	r3, [r4, #8]
    990e:	1bdb      	subs	r3, r3, r7
    9910:	60a3      	str	r3, [r4, #8]
    9912:	6823      	ldr	r3, [r4, #0]
    9914:	19db      	adds	r3, r3, r7
    9916:	46b8      	mov	r8, r7
    9918:	6023      	str	r3, [r4, #0]
    991a:	46ba      	mov	sl, r7
    991c:	e782      	b.n	9824 <__sfvwrite_r+0x174>
    991e:	6923      	ldr	r3, [r4, #16]
    9920:	4283      	cmp	r3, r0
    9922:	d29c      	bcs.n	985e <__sfvwrite_r+0x1ae>
    9924:	4649      	mov	r1, r9
    9926:	4642      	mov	r2, r8
    9928:	f000 f970 	bl	9c0c <memmove>
    992c:	6823      	ldr	r3, [r4, #0]
    992e:	4443      	add	r3, r8
    9930:	6023      	str	r3, [r4, #0]
    9932:	9801      	ldr	r0, [sp, #4]
    9934:	1c21      	adds	r1, r4, #0
    9936:	f7fa fe65 	bl	4604 <_fflush_r>
    993a:	2800      	cmp	r0, #0
    993c:	d100      	bne.n	9940 <__sfvwrite_r+0x290>
    993e:	e771      	b.n	9824 <__sfvwrite_r+0x174>
    9940:	e748      	b.n	97d4 <__sfvwrite_r+0x124>
    9942:	6921      	ldr	r1, [r4, #16]
    9944:	6822      	ldr	r2, [r4, #0]
    9946:	1a52      	subs	r2, r2, r1
    9948:	9200      	str	r2, [sp, #0]
    994a:	6962      	ldr	r2, [r4, #20]
    994c:	0050      	lsls	r0, r2, #1
    994e:	1882      	adds	r2, r0, r2
    9950:	0fd0      	lsrs	r0, r2, #31
    9952:	1882      	adds	r2, r0, r2
    9954:	9800      	ldr	r0, [sp, #0]
    9956:	1052      	asrs	r2, r2, #1
    9958:	3001      	adds	r0, #1
    995a:	4690      	mov	r8, r2
    995c:	19c0      	adds	r0, r0, r7
    995e:	4580      	cmp	r8, r0
    9960:	d201      	bcs.n	9966 <__sfvwrite_r+0x2b6>
    9962:	4680      	mov	r8, r0
    9964:	1c02      	adds	r2, r0, #0
    9966:	2080      	movs	r0, #128	; 0x80
    9968:	00c0      	lsls	r0, r0, #3
    996a:	4203      	tst	r3, r0
    996c:	d020      	beq.n	99b0 <__sfvwrite_r+0x300>
    996e:	1c11      	adds	r1, r2, #0
    9970:	9801      	ldr	r0, [sp, #4]
    9972:	f7fb f9c3 	bl	4cfc <_malloc_r>
    9976:	2100      	movs	r1, #0
    9978:	4682      	mov	sl, r0
    997a:	458a      	cmp	sl, r1
    997c:	d100      	bne.n	9980 <__sfvwrite_r+0x2d0>
    997e:	e726      	b.n	97ce <__sfvwrite_r+0x11e>
    9980:	9a00      	ldr	r2, [sp, #0]
    9982:	6921      	ldr	r1, [r4, #16]
    9984:	f7fb fc40 	bl	5208 <memcpy>
    9988:	89a2      	ldrh	r2, [r4, #12]
    998a:	4b18      	ldr	r3, [pc, #96]	; (99ec <__sfvwrite_r+0x33c>)
    998c:	4013      	ands	r3, r2
    998e:	2280      	movs	r2, #128	; 0x80
    9990:	4313      	orrs	r3, r2
    9992:	81a3      	strh	r3, [r4, #12]
    9994:	9a00      	ldr	r2, [sp, #0]
    9996:	4643      	mov	r3, r8
    9998:	1c10      	adds	r0, r2, #0
    999a:	4651      	mov	r1, sl
    999c:	4450      	add	r0, sl
    999e:	6163      	str	r3, [r4, #20]
    99a0:	1a9b      	subs	r3, r3, r2
    99a2:	6121      	str	r1, [r4, #16]
    99a4:	6020      	str	r0, [r4, #0]
    99a6:	46bb      	mov	fp, r7
    99a8:	60a3      	str	r3, [r4, #8]
    99aa:	46ba      	mov	sl, r7
    99ac:	46b8      	mov	r8, r7
    99ae:	e72d      	b.n	980c <__sfvwrite_r+0x15c>
    99b0:	9801      	ldr	r0, [sp, #4]
    99b2:	f000 fec1 	bl	a738 <_realloc_r>
    99b6:	2300      	movs	r3, #0
    99b8:	4682      	mov	sl, r0
    99ba:	459a      	cmp	sl, r3
    99bc:	d1ea      	bne.n	9994 <__sfvwrite_r+0x2e4>
    99be:	9801      	ldr	r0, [sp, #4]
    99c0:	6921      	ldr	r1, [r4, #16]
    99c2:	f7fb f851 	bl	4a68 <_free_r>
    99c6:	9801      	ldr	r0, [sp, #4]
    99c8:	230c      	movs	r3, #12
    99ca:	6003      	str	r3, [r0, #0]
    99cc:	e702      	b.n	97d4 <__sfvwrite_r+0x124>
    99ce:	1c79      	adds	r1, r7, #1
    99d0:	2201      	movs	r2, #1
    99d2:	468a      	mov	sl, r1
    99d4:	9200      	str	r2, [sp, #0]
    99d6:	e6c4      	b.n	9762 <__sfvwrite_r+0xb2>
    99d8:	89a3      	ldrh	r3, [r4, #12]
    99da:	2240      	movs	r2, #64	; 0x40
    99dc:	4313      	orrs	r3, r2
    99de:	9901      	ldr	r1, [sp, #4]
    99e0:	81a3      	strh	r3, [r4, #12]
    99e2:	2001      	movs	r0, #1
    99e4:	2309      	movs	r3, #9
    99e6:	600b      	str	r3, [r1, #0]
    99e8:	4240      	negs	r0, r0
    99ea:	e697      	b.n	971c <__sfvwrite_r+0x6c>
    99ec:	fffffb7f 	.word	0xfffffb7f
    99f0:	4730      	bx	r6
    99f2:	4760      	bx	ip

000099f4 <_setlocale_r>:
    99f4:	b538      	push	{r3, r4, r5, lr}
    99f6:	1e14      	subs	r4, r2, #0
    99f8:	d005      	beq.n	9a06 <_setlocale_r+0x12>
    99fa:	1c20      	adds	r0, r4, #0
    99fc:	490d      	ldr	r1, [pc, #52]	; (9a34 <_setlocale_r+0x40>)
    99fe:	f001 f8fb 	bl	abf8 <strcmp>
    9a02:	2800      	cmp	r0, #0
    9a04:	d103      	bne.n	9a0e <_setlocale_r+0x1a>
    9a06:	480c      	ldr	r0, [pc, #48]	; (9a38 <_setlocale_r+0x44>)
    9a08:	bc38      	pop	{r3, r4, r5}
    9a0a:	bc02      	pop	{r1}
    9a0c:	4708      	bx	r1
    9a0e:	4d0a      	ldr	r5, [pc, #40]	; (9a38 <_setlocale_r+0x44>)
    9a10:	1c20      	adds	r0, r4, #0
    9a12:	1c29      	adds	r1, r5, #0
    9a14:	f001 f8f0 	bl	abf8 <strcmp>
    9a18:	1c03      	adds	r3, r0, #0
    9a1a:	1c28      	adds	r0, r5, #0
    9a1c:	2b00      	cmp	r3, #0
    9a1e:	d0f3      	beq.n	9a08 <_setlocale_r+0x14>
    9a20:	1c20      	adds	r0, r4, #0
    9a22:	4906      	ldr	r1, [pc, #24]	; (9a3c <_setlocale_r+0x48>)
    9a24:	f001 f8e8 	bl	abf8 <strcmp>
    9a28:	1c03      	adds	r3, r0, #0
    9a2a:	2000      	movs	r0, #0
    9a2c:	4283      	cmp	r3, r0
    9a2e:	d1eb      	bne.n	9a08 <_setlocale_r+0x14>
    9a30:	1c28      	adds	r0, r5, #0
    9a32:	e7e9      	b.n	9a08 <_setlocale_r+0x14>
    9a34:	0000e970 	.word	0x0000e970
    9a38:	0000e918 	.word	0x0000e918
    9a3c:	0000e830 	.word	0x0000e830

00009a40 <__locale_charset>:
    9a40:	4800      	ldr	r0, [pc, #0]	; (9a44 <__locale_charset+0x4>)
    9a42:	4770      	bx	lr
    9a44:	40000840 	.word	0x40000840

00009a48 <__locale_mb_cur_max>:
    9a48:	4b01      	ldr	r3, [pc, #4]	; (9a50 <__locale_mb_cur_max+0x8>)
    9a4a:	6a18      	ldr	r0, [r3, #32]
    9a4c:	4770      	bx	lr
    9a4e:	46c0      	nop			; (mov r8, r8)
    9a50:	40000840 	.word	0x40000840

00009a54 <__locale_msgcharset>:
    9a54:	4801      	ldr	r0, [pc, #4]	; (9a5c <__locale_msgcharset+0x8>)
    9a56:	3024      	adds	r0, #36	; 0x24
    9a58:	4770      	bx	lr
    9a5a:	46c0      	nop			; (mov r8, r8)
    9a5c:	40000840 	.word	0x40000840

00009a60 <__locale_cjk_lang>:
    9a60:	2000      	movs	r0, #0
    9a62:	4770      	bx	lr

00009a64 <_localeconv_r>:
    9a64:	4801      	ldr	r0, [pc, #4]	; (9a6c <_localeconv_r+0x8>)
    9a66:	3044      	adds	r0, #68	; 0x44
    9a68:	4770      	bx	lr
    9a6a:	46c0      	nop			; (mov r8, r8)
    9a6c:	40000840 	.word	0x40000840

00009a70 <setlocale>:
    9a70:	b508      	push	{r3, lr}
    9a72:	1c0a      	adds	r2, r1, #0
    9a74:	4904      	ldr	r1, [pc, #16]	; (9a88 <setlocale+0x18>)
    9a76:	1c03      	adds	r3, r0, #0
    9a78:	6808      	ldr	r0, [r1, #0]
    9a7a:	1c19      	adds	r1, r3, #0
    9a7c:	f7ff ffba 	bl	99f4 <_setlocale_r>
    9a80:	bc08      	pop	{r3}
    9a82:	bc02      	pop	{r1}
    9a84:	4708      	bx	r1
    9a86:	46c0      	nop			; (mov r8, r8)
    9a88:	40000000 	.word	0x40000000

00009a8c <localeconv>:
    9a8c:	4801      	ldr	r0, [pc, #4]	; (9a94 <localeconv+0x8>)
    9a8e:	3044      	adds	r0, #68	; 0x44
    9a90:	4770      	bx	lr
    9a92:	46c0      	nop			; (mov r8, r8)
    9a94:	40000840 	.word	0x40000840

00009a98 <__smakebuf_r>:
    9a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a9a:	898b      	ldrh	r3, [r1, #12]
    9a9c:	b091      	sub	sp, #68	; 0x44
    9a9e:	1c05      	adds	r5, r0, #0
    9aa0:	1c0c      	adds	r4, r1, #0
    9aa2:	1c1a      	adds	r2, r3, #0
    9aa4:	0798      	lsls	r0, r3, #30
    9aa6:	d442      	bmi.n	9b2e <__smakebuf_r+0x96>
    9aa8:	200e      	movs	r0, #14
    9aaa:	5e09      	ldrsh	r1, [r1, r0]
    9aac:	2900      	cmp	r1, #0
    9aae:	db1b      	blt.n	9ae8 <__smakebuf_r+0x50>
    9ab0:	1c28      	adds	r0, r5, #0
    9ab2:	aa01      	add	r2, sp, #4
    9ab4:	f7f8 f872 	bl	1b9c <_fstat_r>
    9ab8:	2800      	cmp	r0, #0
    9aba:	db13      	blt.n	9ae4 <__smakebuf_r+0x4c>
    9abc:	9a02      	ldr	r2, [sp, #8]
    9abe:	23f0      	movs	r3, #240	; 0xf0
    9ac0:	021b      	lsls	r3, r3, #8
    9ac2:	4013      	ands	r3, r2
    9ac4:	4a2a      	ldr	r2, [pc, #168]	; (9b70 <__smakebuf_r+0xd8>)
    9ac6:	189f      	adds	r7, r3, r2
    9ac8:	427a      	negs	r2, r7
    9aca:	4157      	adcs	r7, r2
    9acc:	2280      	movs	r2, #128	; 0x80
    9ace:	0212      	lsls	r2, r2, #8
    9ad0:	4293      	cmp	r3, r2
    9ad2:	d042      	beq.n	9b5a <__smakebuf_r+0xc2>
    9ad4:	89a2      	ldrh	r2, [r4, #12]
    9ad6:	2380      	movs	r3, #128	; 0x80
    9ad8:	011b      	lsls	r3, r3, #4
    9ada:	4313      	orrs	r3, r2
    9adc:	2680      	movs	r6, #128	; 0x80
    9ade:	81a3      	strh	r3, [r4, #12]
    9ae0:	00f6      	lsls	r6, r6, #3
    9ae2:	e009      	b.n	9af8 <__smakebuf_r+0x60>
    9ae4:	89a3      	ldrh	r3, [r4, #12]
    9ae6:	1c1a      	adds	r2, r3, #0
    9ae8:	2640      	movs	r6, #64	; 0x40
    9aea:	0611      	lsls	r1, r2, #24
    9aec:	d532      	bpl.n	9b54 <__smakebuf_r+0xbc>
    9aee:	2280      	movs	r2, #128	; 0x80
    9af0:	0112      	lsls	r2, r2, #4
    9af2:	4313      	orrs	r3, r2
    9af4:	81a3      	strh	r3, [r4, #12]
    9af6:	2700      	movs	r7, #0
    9af8:	1c28      	adds	r0, r5, #0
    9afa:	1c31      	adds	r1, r6, #0
    9afc:	f7fb f8fe 	bl	4cfc <_malloc_r>
    9b00:	2800      	cmp	r0, #0
    9b02:	d00e      	beq.n	9b22 <__smakebuf_r+0x8a>
    9b04:	4b1b      	ldr	r3, [pc, #108]	; (9b74 <__smakebuf_r+0xdc>)
    9b06:	63eb      	str	r3, [r5, #60]	; 0x3c
    9b08:	89a3      	ldrh	r3, [r4, #12]
    9b0a:	2280      	movs	r2, #128	; 0x80
    9b0c:	4313      	orrs	r3, r2
    9b0e:	81a3      	strh	r3, [r4, #12]
    9b10:	6020      	str	r0, [r4, #0]
    9b12:	6120      	str	r0, [r4, #16]
    9b14:	6166      	str	r6, [r4, #20]
    9b16:	2f00      	cmp	r7, #0
    9b18:	d110      	bne.n	9b3c <__smakebuf_r+0xa4>
    9b1a:	b011      	add	sp, #68	; 0x44
    9b1c:	bcf0      	pop	{r4, r5, r6, r7}
    9b1e:	bc01      	pop	{r0}
    9b20:	4700      	bx	r0
    9b22:	89a3      	ldrh	r3, [r4, #12]
    9b24:	0598      	lsls	r0, r3, #22
    9b26:	d4f8      	bmi.n	9b1a <__smakebuf_r+0x82>
    9b28:	2202      	movs	r2, #2
    9b2a:	4313      	orrs	r3, r2
    9b2c:	81a3      	strh	r3, [r4, #12]
    9b2e:	1c23      	adds	r3, r4, #0
    9b30:	3343      	adds	r3, #67	; 0x43
    9b32:	6023      	str	r3, [r4, #0]
    9b34:	6123      	str	r3, [r4, #16]
    9b36:	2301      	movs	r3, #1
    9b38:	6163      	str	r3, [r4, #20]
    9b3a:	e7ee      	b.n	9b1a <__smakebuf_r+0x82>
    9b3c:	220e      	movs	r2, #14
    9b3e:	5ea1      	ldrsh	r1, [r4, r2]
    9b40:	1c28      	adds	r0, r5, #0
    9b42:	f002 fdd5 	bl	c6f0 <_isatty_r>
    9b46:	2800      	cmp	r0, #0
    9b48:	d0e7      	beq.n	9b1a <__smakebuf_r+0x82>
    9b4a:	89a3      	ldrh	r3, [r4, #12]
    9b4c:	2201      	movs	r2, #1
    9b4e:	4313      	orrs	r3, r2
    9b50:	81a3      	strh	r3, [r4, #12]
    9b52:	e7e2      	b.n	9b1a <__smakebuf_r+0x82>
    9b54:	19b6      	adds	r6, r6, r6
    9b56:	00f6      	lsls	r6, r6, #3
    9b58:	e7c9      	b.n	9aee <__smakebuf_r+0x56>
    9b5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9b5c:	4b06      	ldr	r3, [pc, #24]	; (9b78 <__smakebuf_r+0xe0>)
    9b5e:	429a      	cmp	r2, r3
    9b60:	d1b8      	bne.n	9ad4 <__smakebuf_r+0x3c>
    9b62:	89a3      	ldrh	r3, [r4, #12]
    9b64:	2680      	movs	r6, #128	; 0x80
    9b66:	00f6      	lsls	r6, r6, #3
    9b68:	4333      	orrs	r3, r6
    9b6a:	81a3      	strh	r3, [r4, #12]
    9b6c:	64e6      	str	r6, [r4, #76]	; 0x4c
    9b6e:	e7c3      	b.n	9af8 <__smakebuf_r+0x60>
    9b70:	ffffe000 	.word	0xffffe000
    9b74:	00004799 	.word	0x00004799
    9b78:	00005575 	.word	0x00005575

00009b7c <memchr>:
    9b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b7e:	0609      	lsls	r1, r1, #24
    9b80:	2403      	movs	r4, #3
    9b82:	1c03      	adds	r3, r0, #0
    9b84:	0e09      	lsrs	r1, r1, #24
    9b86:	4220      	tst	r0, r4
    9b88:	d00f      	beq.n	9baa <memchr+0x2e>
    9b8a:	1e10      	subs	r0, r2, #0
    9b8c:	d01f      	beq.n	9bce <memchr+0x52>
    9b8e:	781d      	ldrb	r5, [r3, #0]
    9b90:	1c18      	adds	r0, r3, #0
    9b92:	428d      	cmp	r5, r1
    9b94:	d105      	bne.n	9ba2 <memchr+0x26>
    9b96:	e01a      	b.n	9bce <memchr+0x52>
    9b98:	2a00      	cmp	r2, #0
    9b9a:	d017      	beq.n	9bcc <memchr+0x50>
    9b9c:	7818      	ldrb	r0, [r3, #0]
    9b9e:	4288      	cmp	r0, r1
    9ba0:	d018      	beq.n	9bd4 <memchr+0x58>
    9ba2:	3301      	adds	r3, #1
    9ba4:	3a01      	subs	r2, #1
    9ba6:	4223      	tst	r3, r4
    9ba8:	d1f6      	bne.n	9b98 <memchr+0x1c>
    9baa:	2a03      	cmp	r2, #3
    9bac:	d814      	bhi.n	9bd8 <memchr+0x5c>
    9bae:	1e10      	subs	r0, r2, #0
    9bb0:	d00d      	beq.n	9bce <memchr+0x52>
    9bb2:	781c      	ldrb	r4, [r3, #0]
    9bb4:	1c18      	adds	r0, r3, #0
    9bb6:	3a01      	subs	r2, #1
    9bb8:	428c      	cmp	r4, r1
    9bba:	d105      	bne.n	9bc8 <memchr+0x4c>
    9bbc:	e007      	b.n	9bce <memchr+0x52>
    9bbe:	3301      	adds	r3, #1
    9bc0:	7818      	ldrb	r0, [r3, #0]
    9bc2:	3a01      	subs	r2, #1
    9bc4:	4288      	cmp	r0, r1
    9bc6:	d005      	beq.n	9bd4 <memchr+0x58>
    9bc8:	2a00      	cmp	r2, #0
    9bca:	d1f8      	bne.n	9bbe <memchr+0x42>
    9bcc:	1c10      	adds	r0, r2, #0
    9bce:	bcf0      	pop	{r4, r5, r6, r7}
    9bd0:	bc02      	pop	{r1}
    9bd2:	4708      	bx	r1
    9bd4:	1c18      	adds	r0, r3, #0
    9bd6:	e7fa      	b.n	9bce <memchr+0x52>
    9bd8:	020f      	lsls	r7, r1, #8
    9bda:	430f      	orrs	r7, r1
    9bdc:	0438      	lsls	r0, r7, #16
    9bde:	4307      	orrs	r7, r0
    9be0:	4808      	ldr	r0, [pc, #32]	; (9c04 <memchr+0x88>)
    9be2:	4684      	mov	ip, r0
    9be4:	1c18      	adds	r0, r3, #0
    9be6:	cb10      	ldmia	r3!, {r4}
    9be8:	4e07      	ldr	r6, [pc, #28]	; (9c08 <memchr+0x8c>)
    9bea:	407c      	eors	r4, r7
    9bec:	19a5      	adds	r5, r4, r6
    9bee:	43a5      	bics	r5, r4
    9bf0:	1c2c      	adds	r4, r5, #0
    9bf2:	4665      	mov	r5, ip
    9bf4:	422c      	tst	r4, r5
    9bf6:	d103      	bne.n	9c00 <memchr+0x84>
    9bf8:	3a04      	subs	r2, #4
    9bfa:	1c18      	adds	r0, r3, #0
    9bfc:	2a03      	cmp	r2, #3
    9bfe:	d8f1      	bhi.n	9be4 <memchr+0x68>
    9c00:	1c03      	adds	r3, r0, #0
    9c02:	e7d4      	b.n	9bae <memchr+0x32>
    9c04:	80808080 	.word	0x80808080
    9c08:	fefefeff 	.word	0xfefefeff

00009c0c <memmove>:
    9c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c0e:	1c05      	adds	r5, r0, #0
    9c10:	1c0e      	adds	r6, r1, #0
    9c12:	4288      	cmp	r0, r1
    9c14:	d90f      	bls.n	9c36 <memmove+0x2a>
    9c16:	188b      	adds	r3, r1, r2
    9c18:	4298      	cmp	r0, r3
    9c1a:	d20c      	bcs.n	9c36 <memmove+0x2a>
    9c1c:	2a00      	cmp	r2, #0
    9c1e:	d007      	beq.n	9c30 <memmove+0x24>
    9c20:	1881      	adds	r1, r0, r2
    9c22:	3b01      	subs	r3, #1
    9c24:	781c      	ldrb	r4, [r3, #0]
    9c26:	3901      	subs	r1, #1
    9c28:	3a01      	subs	r2, #1
    9c2a:	700c      	strb	r4, [r1, #0]
    9c2c:	2a00      	cmp	r2, #0
    9c2e:	d1f8      	bne.n	9c22 <memmove+0x16>
    9c30:	bcf0      	pop	{r4, r5, r6, r7}
    9c32:	bc02      	pop	{r1}
    9c34:	4708      	bx	r1
    9c36:	2a0f      	cmp	r2, #15
    9c38:	d92d      	bls.n	9c96 <memmove+0x8a>
    9c3a:	1c0b      	adds	r3, r1, #0
    9c3c:	4303      	orrs	r3, r0
    9c3e:	079c      	lsls	r4, r3, #30
    9c40:	d12b      	bne.n	9c9a <memmove+0x8e>
    9c42:	1c0c      	adds	r4, r1, #0
    9c44:	1c03      	adds	r3, r0, #0
    9c46:	1c15      	adds	r5, r2, #0
    9c48:	6826      	ldr	r6, [r4, #0]
    9c4a:	601e      	str	r6, [r3, #0]
    9c4c:	6866      	ldr	r6, [r4, #4]
    9c4e:	605e      	str	r6, [r3, #4]
    9c50:	68a6      	ldr	r6, [r4, #8]
    9c52:	609e      	str	r6, [r3, #8]
    9c54:	68e6      	ldr	r6, [r4, #12]
    9c56:	3d10      	subs	r5, #16
    9c58:	60de      	str	r6, [r3, #12]
    9c5a:	3410      	adds	r4, #16
    9c5c:	3310      	adds	r3, #16
    9c5e:	2d0f      	cmp	r5, #15
    9c60:	d8f2      	bhi.n	9c48 <memmove+0x3c>
    9c62:	3a10      	subs	r2, #16
    9c64:	0916      	lsrs	r6, r2, #4
    9c66:	3601      	adds	r6, #1
    9c68:	230f      	movs	r3, #15
    9c6a:	0136      	lsls	r6, r6, #4
    9c6c:	401a      	ands	r2, r3
    9c6e:	1985      	adds	r5, r0, r6
    9c70:	198e      	adds	r6, r1, r6
    9c72:	2a03      	cmp	r2, #3
    9c74:	d90f      	bls.n	9c96 <memmove+0x8a>
    9c76:	1c37      	adds	r7, r6, #0
    9c78:	1c2c      	adds	r4, r5, #0
    9c7a:	1c13      	adds	r3, r2, #0
    9c7c:	cf02      	ldmia	r7!, {r1}
    9c7e:	3b04      	subs	r3, #4
    9c80:	c402      	stmia	r4!, {r1}
    9c82:	2b03      	cmp	r3, #3
    9c84:	d8fa      	bhi.n	9c7c <memmove+0x70>
    9c86:	3a04      	subs	r2, #4
    9c88:	0893      	lsrs	r3, r2, #2
    9c8a:	3301      	adds	r3, #1
    9c8c:	009b      	lsls	r3, r3, #2
    9c8e:	18ed      	adds	r5, r5, r3
    9c90:	18f6      	adds	r6, r6, r3
    9c92:	2303      	movs	r3, #3
    9c94:	401a      	ands	r2, r3
    9c96:	2a00      	cmp	r2, #0
    9c98:	d0ca      	beq.n	9c30 <memmove+0x24>
    9c9a:	2300      	movs	r3, #0
    9c9c:	5cf4      	ldrb	r4, [r6, r3]
    9c9e:	54ec      	strb	r4, [r5, r3]
    9ca0:	3301      	adds	r3, #1
    9ca2:	4293      	cmp	r3, r2
    9ca4:	d1fa      	bne.n	9c9c <memmove+0x90>
    9ca6:	e7c3      	b.n	9c30 <memmove+0x24>

00009ca8 <_Balloc>:
    9ca8:	b570      	push	{r4, r5, r6, lr}
    9caa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    9cac:	1c04      	adds	r4, r0, #0
    9cae:	1c0d      	adds	r5, r1, #0
    9cb0:	2b00      	cmp	r3, #0
    9cb2:	d00c      	beq.n	9cce <_Balloc+0x26>
    9cb4:	00aa      	lsls	r2, r5, #2
    9cb6:	189b      	adds	r3, r3, r2
    9cb8:	6818      	ldr	r0, [r3, #0]
    9cba:	2800      	cmp	r0, #0
    9cbc:	d010      	beq.n	9ce0 <_Balloc+0x38>
    9cbe:	6802      	ldr	r2, [r0, #0]
    9cc0:	601a      	str	r2, [r3, #0]
    9cc2:	2300      	movs	r3, #0
    9cc4:	6103      	str	r3, [r0, #16]
    9cc6:	60c3      	str	r3, [r0, #12]
    9cc8:	bc70      	pop	{r4, r5, r6}
    9cca:	bc02      	pop	{r1}
    9ccc:	4708      	bx	r1
    9cce:	2104      	movs	r1, #4
    9cd0:	2221      	movs	r2, #33	; 0x21
    9cd2:	f002 fc61 	bl	c598 <_calloc_r>
    9cd6:	1c03      	adds	r3, r0, #0
    9cd8:	64e0      	str	r0, [r4, #76]	; 0x4c
    9cda:	2800      	cmp	r0, #0
    9cdc:	d0f4      	beq.n	9cc8 <_Balloc+0x20>
    9cde:	e7e9      	b.n	9cb4 <_Balloc+0xc>
    9ce0:	2101      	movs	r1, #1
    9ce2:	1c0e      	adds	r6, r1, #0
    9ce4:	40ae      	lsls	r6, r5
    9ce6:	1d72      	adds	r2, r6, #5
    9ce8:	0092      	lsls	r2, r2, #2
    9cea:	1c20      	adds	r0, r4, #0
    9cec:	f002 fc54 	bl	c598 <_calloc_r>
    9cf0:	2800      	cmp	r0, #0
    9cf2:	d0e9      	beq.n	9cc8 <_Balloc+0x20>
    9cf4:	6045      	str	r5, [r0, #4]
    9cf6:	6086      	str	r6, [r0, #8]
    9cf8:	e7e3      	b.n	9cc2 <_Balloc+0x1a>
    9cfa:	46c0      	nop			; (mov r8, r8)

00009cfc <_Bfree>:
    9cfc:	b500      	push	{lr}
    9cfe:	2900      	cmp	r1, #0
    9d00:	d006      	beq.n	9d10 <_Bfree+0x14>
    9d02:	684b      	ldr	r3, [r1, #4]
    9d04:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    9d06:	009b      	lsls	r3, r3, #2
    9d08:	18d3      	adds	r3, r2, r3
    9d0a:	681a      	ldr	r2, [r3, #0]
    9d0c:	600a      	str	r2, [r1, #0]
    9d0e:	6019      	str	r1, [r3, #0]
    9d10:	bc01      	pop	{r0}
    9d12:	4700      	bx	r0

00009d14 <__multadd>:
    9d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d16:	464f      	mov	r7, r9
    9d18:	4646      	mov	r6, r8
    9d1a:	b4c0      	push	{r6, r7}
    9d1c:	1c0e      	adds	r6, r1, #0
    9d1e:	1c1c      	adds	r4, r3, #0
    9d20:	690d      	ldr	r5, [r1, #16]
    9d22:	4681      	mov	r9, r0
    9d24:	3114      	adds	r1, #20
    9d26:	2300      	movs	r3, #0
    9d28:	6808      	ldr	r0, [r1, #0]
    9d2a:	4680      	mov	r8, r0
    9d2c:	0400      	lsls	r0, r0, #16
    9d2e:	0c00      	lsrs	r0, r0, #16
    9d30:	4350      	muls	r0, r2
    9d32:	1820      	adds	r0, r4, r0
    9d34:	0c04      	lsrs	r4, r0, #16
    9d36:	4647      	mov	r7, r8
    9d38:	46a4      	mov	ip, r4
    9d3a:	0c3c      	lsrs	r4, r7, #16
    9d3c:	4354      	muls	r4, r2
    9d3e:	44a4      	add	ip, r4
    9d40:	4667      	mov	r7, ip
    9d42:	0c3c      	lsrs	r4, r7, #16
    9d44:	0400      	lsls	r0, r0, #16
    9d46:	043f      	lsls	r7, r7, #16
    9d48:	46bc      	mov	ip, r7
    9d4a:	0c00      	lsrs	r0, r0, #16
    9d4c:	4460      	add	r0, ip
    9d4e:	3301      	adds	r3, #1
    9d50:	c101      	stmia	r1!, {r0}
    9d52:	429d      	cmp	r5, r3
    9d54:	dce8      	bgt.n	9d28 <__multadd+0x14>
    9d56:	2c00      	cmp	r4, #0
    9d58:	d008      	beq.n	9d6c <__multadd+0x58>
    9d5a:	68b3      	ldr	r3, [r6, #8]
    9d5c:	429d      	cmp	r5, r3
    9d5e:	da0c      	bge.n	9d7a <__multadd+0x66>
    9d60:	1d2b      	adds	r3, r5, #4
    9d62:	009b      	lsls	r3, r3, #2
    9d64:	18f3      	adds	r3, r6, r3
    9d66:	3501      	adds	r5, #1
    9d68:	605c      	str	r4, [r3, #4]
    9d6a:	6135      	str	r5, [r6, #16]
    9d6c:	1c30      	adds	r0, r6, #0
    9d6e:	bc0c      	pop	{r2, r3}
    9d70:	4690      	mov	r8, r2
    9d72:	4699      	mov	r9, r3
    9d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9d76:	bc02      	pop	{r1}
    9d78:	4708      	bx	r1
    9d7a:	6871      	ldr	r1, [r6, #4]
    9d7c:	4648      	mov	r0, r9
    9d7e:	3101      	adds	r1, #1
    9d80:	f7ff ff92 	bl	9ca8 <_Balloc>
    9d84:	6932      	ldr	r2, [r6, #16]
    9d86:	210c      	movs	r1, #12
    9d88:	4680      	mov	r8, r0
    9d8a:	3202      	adds	r2, #2
    9d8c:	1c08      	adds	r0, r1, #0
    9d8e:	1c31      	adds	r1, r6, #0
    9d90:	0092      	lsls	r2, r2, #2
    9d92:	4440      	add	r0, r8
    9d94:	310c      	adds	r1, #12
    9d96:	f7fb fa37 	bl	5208 <memcpy>
    9d9a:	464f      	mov	r7, r9
    9d9c:	6873      	ldr	r3, [r6, #4]
    9d9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    9da0:	009b      	lsls	r3, r3, #2
    9da2:	18d3      	adds	r3, r2, r3
    9da4:	681a      	ldr	r2, [r3, #0]
    9da6:	6032      	str	r2, [r6, #0]
    9da8:	601e      	str	r6, [r3, #0]
    9daa:	4646      	mov	r6, r8
    9dac:	e7d8      	b.n	9d60 <__multadd+0x4c>
    9dae:	46c0      	nop			; (mov r8, r8)

00009db0 <__s2b>:
    9db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9db2:	464f      	mov	r7, r9
    9db4:	4646      	mov	r6, r8
    9db6:	b4c0      	push	{r6, r7}
    9db8:	1c06      	adds	r6, r0, #0
    9dba:	1c18      	adds	r0, r3, #0
    9dbc:	1c0d      	adds	r5, r1, #0
    9dbe:	3008      	adds	r0, #8
    9dc0:	2109      	movs	r1, #9
    9dc2:	4690      	mov	r8, r2
    9dc4:	1c1f      	adds	r7, r3, #0
    9dc6:	f003 ff61 	bl	dc8c <____aeabi_idiv_from_thumb>
    9dca:	2100      	movs	r1, #0
    9dcc:	2801      	cmp	r0, #1
    9dce:	dd04      	ble.n	9dda <__s2b+0x2a>
    9dd0:	2301      	movs	r3, #1
    9dd2:	005b      	lsls	r3, r3, #1
    9dd4:	3101      	adds	r1, #1
    9dd6:	4298      	cmp	r0, r3
    9dd8:	dcfb      	bgt.n	9dd2 <__s2b+0x22>
    9dda:	1c30      	adds	r0, r6, #0
    9ddc:	f7ff ff64 	bl	9ca8 <_Balloc>
    9de0:	9b08      	ldr	r3, [sp, #32]
    9de2:	6143      	str	r3, [r0, #20]
    9de4:	2301      	movs	r3, #1
    9de6:	6103      	str	r3, [r0, #16]
    9de8:	3308      	adds	r3, #8
    9dea:	1c01      	adds	r1, r0, #0
    9dec:	4598      	cmp	r8, r3
    9dee:	dd23      	ble.n	9e38 <__s2b+0x88>
    9df0:	195b      	adds	r3, r3, r5
    9df2:	4699      	mov	r9, r3
    9df4:	2409      	movs	r4, #9
    9df6:	5d2b      	ldrb	r3, [r5, r4]
    9df8:	1c30      	adds	r0, r6, #0
    9dfa:	3b30      	subs	r3, #48	; 0x30
    9dfc:	220a      	movs	r2, #10
    9dfe:	f7ff ff89 	bl	9d14 <__multadd>
    9e02:	3401      	adds	r4, #1
    9e04:	1c01      	adds	r1, r0, #0
    9e06:	45a0      	cmp	r8, r4
    9e08:	dcf5      	bgt.n	9df6 <__s2b+0x46>
    9e0a:	464d      	mov	r5, r9
    9e0c:	4445      	add	r5, r8
    9e0e:	3d08      	subs	r5, #8
    9e10:	4644      	mov	r4, r8
    9e12:	e008      	b.n	9e26 <__s2b+0x76>
    9e14:	782b      	ldrb	r3, [r5, #0]
    9e16:	1c30      	adds	r0, r6, #0
    9e18:	3b30      	subs	r3, #48	; 0x30
    9e1a:	220a      	movs	r2, #10
    9e1c:	f7ff ff7a 	bl	9d14 <__multadd>
    9e20:	3501      	adds	r5, #1
    9e22:	1c01      	adds	r1, r0, #0
    9e24:	3401      	adds	r4, #1
    9e26:	42a7      	cmp	r7, r4
    9e28:	dcf4      	bgt.n	9e14 <__s2b+0x64>
    9e2a:	1c08      	adds	r0, r1, #0
    9e2c:	bc0c      	pop	{r2, r3}
    9e2e:	4690      	mov	r8, r2
    9e30:	4699      	mov	r9, r3
    9e32:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9e34:	bc02      	pop	{r1}
    9e36:	4708      	bx	r1
    9e38:	350a      	adds	r5, #10
    9e3a:	2409      	movs	r4, #9
    9e3c:	e7f3      	b.n	9e26 <__s2b+0x76>
    9e3e:	46c0      	nop			; (mov r8, r8)

00009e40 <__hi0bits>:
    9e40:	b500      	push	{lr}
    9e42:	1c03      	adds	r3, r0, #0
    9e44:	0c02      	lsrs	r2, r0, #16
    9e46:	2000      	movs	r0, #0
    9e48:	4282      	cmp	r2, r0
    9e4a:	d101      	bne.n	9e50 <__hi0bits+0x10>
    9e4c:	041b      	lsls	r3, r3, #16
    9e4e:	3010      	adds	r0, #16
    9e50:	0e1a      	lsrs	r2, r3, #24
    9e52:	2a00      	cmp	r2, #0
    9e54:	d101      	bne.n	9e5a <__hi0bits+0x1a>
    9e56:	3008      	adds	r0, #8
    9e58:	021b      	lsls	r3, r3, #8
    9e5a:	0f1a      	lsrs	r2, r3, #28
    9e5c:	2a00      	cmp	r2, #0
    9e5e:	d101      	bne.n	9e64 <__hi0bits+0x24>
    9e60:	3004      	adds	r0, #4
    9e62:	011b      	lsls	r3, r3, #4
    9e64:	0f9a      	lsrs	r2, r3, #30
    9e66:	2a00      	cmp	r2, #0
    9e68:	d101      	bne.n	9e6e <__hi0bits+0x2e>
    9e6a:	3002      	adds	r0, #2
    9e6c:	009b      	lsls	r3, r3, #2
    9e6e:	2b00      	cmp	r3, #0
    9e70:	db03      	blt.n	9e7a <__hi0bits+0x3a>
    9e72:	3001      	adds	r0, #1
    9e74:	005a      	lsls	r2, r3, #1
    9e76:	d400      	bmi.n	9e7a <__hi0bits+0x3a>
    9e78:	2020      	movs	r0, #32
    9e7a:	bc02      	pop	{r1}
    9e7c:	4708      	bx	r1
    9e7e:	46c0      	nop			; (mov r8, r8)

00009e80 <__lo0bits>:
    9e80:	b500      	push	{lr}
    9e82:	6803      	ldr	r3, [r0, #0]
    9e84:	1c01      	adds	r1, r0, #0
    9e86:	2207      	movs	r2, #7
    9e88:	1c18      	adds	r0, r3, #0
    9e8a:	4010      	ands	r0, r2
    9e8c:	d00a      	beq.n	9ea4 <__lo0bits+0x24>
    9e8e:	3a06      	subs	r2, #6
    9e90:	2000      	movs	r0, #0
    9e92:	4213      	tst	r3, r2
    9e94:	d104      	bne.n	9ea0 <__lo0bits+0x20>
    9e96:	3002      	adds	r0, #2
    9e98:	4203      	tst	r3, r0
    9e9a:	d11f      	bne.n	9edc <__lo0bits+0x5c>
    9e9c:	089b      	lsrs	r3, r3, #2
    9e9e:	600b      	str	r3, [r1, #0]
    9ea0:	bc02      	pop	{r1}
    9ea2:	4708      	bx	r1
    9ea4:	041a      	lsls	r2, r3, #16
    9ea6:	2a00      	cmp	r2, #0
    9ea8:	d101      	bne.n	9eae <__lo0bits+0x2e>
    9eaa:	0c1b      	lsrs	r3, r3, #16
    9eac:	2010      	movs	r0, #16
    9eae:	22ff      	movs	r2, #255	; 0xff
    9eb0:	4213      	tst	r3, r2
    9eb2:	d101      	bne.n	9eb8 <__lo0bits+0x38>
    9eb4:	3008      	adds	r0, #8
    9eb6:	0a1b      	lsrs	r3, r3, #8
    9eb8:	071a      	lsls	r2, r3, #28
    9eba:	d101      	bne.n	9ec0 <__lo0bits+0x40>
    9ebc:	3004      	adds	r0, #4
    9ebe:	091b      	lsrs	r3, r3, #4
    9ec0:	079a      	lsls	r2, r3, #30
    9ec2:	d101      	bne.n	9ec8 <__lo0bits+0x48>
    9ec4:	3002      	adds	r0, #2
    9ec6:	089b      	lsrs	r3, r3, #2
    9ec8:	07da      	lsls	r2, r3, #31
    9eca:	d403      	bmi.n	9ed4 <__lo0bits+0x54>
    9ecc:	085b      	lsrs	r3, r3, #1
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d002      	beq.n	9ed8 <__lo0bits+0x58>
    9ed2:	3001      	adds	r0, #1
    9ed4:	600b      	str	r3, [r1, #0]
    9ed6:	e7e3      	b.n	9ea0 <__lo0bits+0x20>
    9ed8:	2020      	movs	r0, #32
    9eda:	e7e1      	b.n	9ea0 <__lo0bits+0x20>
    9edc:	40d3      	lsrs	r3, r2
    9ede:	600b      	str	r3, [r1, #0]
    9ee0:	1c10      	adds	r0, r2, #0
    9ee2:	e7dd      	b.n	9ea0 <__lo0bits+0x20>

00009ee4 <__i2b>:
    9ee4:	b510      	push	{r4, lr}
    9ee6:	1c0c      	adds	r4, r1, #0
    9ee8:	2101      	movs	r1, #1
    9eea:	f7ff fedd 	bl	9ca8 <_Balloc>
    9eee:	2301      	movs	r3, #1
    9ef0:	6144      	str	r4, [r0, #20]
    9ef2:	6103      	str	r3, [r0, #16]
    9ef4:	bc10      	pop	{r4}
    9ef6:	bc02      	pop	{r1}
    9ef8:	4708      	bx	r1
    9efa:	46c0      	nop			; (mov r8, r8)

00009efc <__multiply>:
    9efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9efe:	465f      	mov	r7, fp
    9f00:	4656      	mov	r6, sl
    9f02:	464d      	mov	r5, r9
    9f04:	4644      	mov	r4, r8
    9f06:	b4f0      	push	{r4, r5, r6, r7}
    9f08:	1c0d      	adds	r5, r1, #0
    9f0a:	690f      	ldr	r7, [r1, #16]
    9f0c:	6911      	ldr	r1, [r2, #16]
    9f0e:	4688      	mov	r8, r1
    9f10:	b085      	sub	sp, #20
    9f12:	1c16      	adds	r6, r2, #0
    9f14:	4547      	cmp	r7, r8
    9f16:	da05      	bge.n	9f24 <__multiply+0x28>
    9f18:	1c3b      	adds	r3, r7, #0
    9f1a:	4698      	mov	r8, r3
    9f1c:	1c2b      	adds	r3, r5, #0
    9f1e:	1c0f      	adds	r7, r1, #0
    9f20:	1c15      	adds	r5, r2, #0
    9f22:	1c1e      	adds	r6, r3, #0
    9f24:	1c3c      	adds	r4, r7, #0
    9f26:	68ab      	ldr	r3, [r5, #8]
    9f28:	4444      	add	r4, r8
    9f2a:	6869      	ldr	r1, [r5, #4]
    9f2c:	429c      	cmp	r4, r3
    9f2e:	dd00      	ble.n	9f32 <__multiply+0x36>
    9f30:	3101      	adds	r1, #1
    9f32:	f7ff feb9 	bl	9ca8 <_Balloc>
    9f36:	1d23      	adds	r3, r4, #4
    9f38:	009b      	lsls	r3, r3, #2
    9f3a:	1c02      	adds	r2, r0, #0
    9f3c:	181b      	adds	r3, r3, r0
    9f3e:	3304      	adds	r3, #4
    9f40:	3214      	adds	r2, #20
    9f42:	9002      	str	r0, [sp, #8]
    9f44:	9303      	str	r3, [sp, #12]
    9f46:	429a      	cmp	r2, r3
    9f48:	d205      	bcs.n	9f56 <__multiply+0x5a>
    9f4a:	9803      	ldr	r0, [sp, #12]
    9f4c:	1c13      	adds	r3, r2, #0
    9f4e:	2100      	movs	r1, #0
    9f50:	c302      	stmia	r3!, {r1}
    9f52:	4298      	cmp	r0, r3
    9f54:	d8fc      	bhi.n	9f50 <__multiply+0x54>
    9f56:	2314      	movs	r3, #20
    9f58:	195b      	adds	r3, r3, r5
    9f5a:	2104      	movs	r1, #4
    9f5c:	9300      	str	r3, [sp, #0]
    9f5e:	1c0b      	adds	r3, r1, #0
    9f60:	3704      	adds	r7, #4
    9f62:	4443      	add	r3, r8
    9f64:	00bf      	lsls	r7, r7, #2
    9f66:	009b      	lsls	r3, r3, #2
    9f68:	19ed      	adds	r5, r5, r7
    9f6a:	1c37      	adds	r7, r6, #0
    9f6c:	18f6      	adds	r6, r6, r3
    9f6e:	1876      	adds	r6, r6, r1
    9f70:	3714      	adds	r7, #20
    9f72:	46b4      	mov	ip, r6
    9f74:	3504      	adds	r5, #4
    9f76:	4567      	cmp	r7, ip
    9f78:	d26c      	bcs.n	a054 <__multiply+0x158>
    9f7a:	1c23      	adds	r3, r4, #0
    9f7c:	1c16      	adds	r6, r2, #0
    9f7e:	4664      	mov	r4, ip
    9f80:	469c      	mov	ip, r3
    9f82:	683b      	ldr	r3, [r7, #0]
    9f84:	041a      	lsls	r2, r3, #16
    9f86:	0c12      	lsrs	r2, r2, #16
    9f88:	4691      	mov	r9, r2
    9f8a:	2200      	movs	r2, #0
    9f8c:	4591      	cmp	r9, r2
    9f8e:	d029      	beq.n	9fe4 <__multiply+0xe8>
    9f90:	2100      	movs	r1, #0
    9f92:	4688      	mov	r8, r1
    9f94:	9a00      	ldr	r2, [sp, #0]
    9f96:	4649      	mov	r1, r9
    9f98:	1c33      	adds	r3, r6, #0
    9f9a:	46a1      	mov	r9, r4
    9f9c:	46ba      	mov	sl, r7
    9f9e:	4644      	mov	r4, r8
    9fa0:	46b3      	mov	fp, r6
    9fa2:	46a8      	mov	r8, r5
    9fa4:	1c0d      	adds	r5, r1, #0
    9fa6:	ca01      	ldmia	r2!, {r0}
    9fa8:	0407      	lsls	r7, r0, #16
    9faa:	0c3f      	lsrs	r7, r7, #16
    9fac:	436f      	muls	r7, r5
    9fae:	0c00      	lsrs	r0, r0, #16
    9fb0:	4368      	muls	r0, r5
    9fb2:	6819      	ldr	r1, [r3, #0]
    9fb4:	040e      	lsls	r6, r1, #16
    9fb6:	0c36      	lsrs	r6, r6, #16
    9fb8:	19be      	adds	r6, r7, r6
    9fba:	1936      	adds	r6, r6, r4
    9fbc:	0c09      	lsrs	r1, r1, #16
    9fbe:	0c34      	lsrs	r4, r6, #16
    9fc0:	1841      	adds	r1, r0, r1
    9fc2:	1909      	adds	r1, r1, r4
    9fc4:	0436      	lsls	r6, r6, #16
    9fc6:	0c0c      	lsrs	r4, r1, #16
    9fc8:	0c36      	lsrs	r6, r6, #16
    9fca:	0409      	lsls	r1, r1, #16
    9fcc:	4331      	orrs	r1, r6
    9fce:	c302      	stmia	r3!, {r1}
    9fd0:	4590      	cmp	r8, r2
    9fd2:	d8e8      	bhi.n	9fa6 <__multiply+0xaa>
    9fd4:	4645      	mov	r5, r8
    9fd6:	46a0      	mov	r8, r4
    9fd8:	4642      	mov	r2, r8
    9fda:	4657      	mov	r7, sl
    9fdc:	601a      	str	r2, [r3, #0]
    9fde:	683b      	ldr	r3, [r7, #0]
    9fe0:	464c      	mov	r4, r9
    9fe2:	465e      	mov	r6, fp
    9fe4:	0c1b      	lsrs	r3, r3, #16
    9fe6:	4698      	mov	r8, r3
    9fe8:	2300      	movs	r3, #0
    9fea:	4598      	cmp	r8, r3
    9fec:	d02c      	beq.n	a048 <__multiply+0x14c>
    9fee:	6832      	ldr	r2, [r6, #0]
    9ff0:	9b00      	ldr	r3, [sp, #0]
    9ff2:	9401      	str	r4, [sp, #4]
    9ff4:	1c31      	adds	r1, r6, #0
    9ff6:	46b3      	mov	fp, r6
    9ff8:	9e01      	ldr	r6, [sp, #4]
    9ffa:	469a      	mov	sl, r3
    9ffc:	46c1      	mov	r9, r8
    9ffe:	2300      	movs	r3, #0
    a000:	1c1c      	adds	r4, r3, #0
    a002:	46a8      	mov	r8, r5
    a004:	4653      	mov	r3, sl
    a006:	464d      	mov	r5, r9
    a008:	1c10      	adds	r0, r2, #0
    a00a:	46ba      	mov	sl, r7
    a00c:	46b1      	mov	r9, r6
    a00e:	1c1e      	adds	r6, r3, #0
    a010:	cb80      	ldmia	r3!, {r7}
    a012:	043f      	lsls	r7, r7, #16
    a014:	0c3f      	lsrs	r7, r7, #16
    a016:	436f      	muls	r7, r5
    a018:	0c00      	lsrs	r0, r0, #16
    a01a:	19e4      	adds	r4, r4, r7
    a01c:	1824      	adds	r4, r4, r0
    a01e:	0412      	lsls	r2, r2, #16
    a020:	0420      	lsls	r0, r4, #16
    a022:	0c12      	lsrs	r2, r2, #16
    a024:	4302      	orrs	r2, r0
    a026:	c104      	stmia	r1!, {r2}
    a028:	8876      	ldrh	r6, [r6, #2]
    a02a:	436e      	muls	r6, r5
    a02c:	6808      	ldr	r0, [r1, #0]
    a02e:	0402      	lsls	r2, r0, #16
    a030:	0c12      	lsrs	r2, r2, #16
    a032:	0c24      	lsrs	r4, r4, #16
    a034:	18b2      	adds	r2, r6, r2
    a036:	1912      	adds	r2, r2, r4
    a038:	0c14      	lsrs	r4, r2, #16
    a03a:	4598      	cmp	r8, r3
    a03c:	d8e7      	bhi.n	a00e <__multiply+0x112>
    a03e:	600a      	str	r2, [r1, #0]
    a040:	4645      	mov	r5, r8
    a042:	464c      	mov	r4, r9
    a044:	4657      	mov	r7, sl
    a046:	465e      	mov	r6, fp
    a048:	3704      	adds	r7, #4
    a04a:	42bc      	cmp	r4, r7
    a04c:	d901      	bls.n	a052 <__multiply+0x156>
    a04e:	3604      	adds	r6, #4
    a050:	e797      	b.n	9f82 <__multiply+0x86>
    a052:	4664      	mov	r4, ip
    a054:	2c00      	cmp	r4, #0
    a056:	dd08      	ble.n	a06a <__multiply+0x16e>
    a058:	9b03      	ldr	r3, [sp, #12]
    a05a:	e002      	b.n	a062 <__multiply+0x166>
    a05c:	3c01      	subs	r4, #1
    a05e:	2c00      	cmp	r4, #0
    a060:	dd03      	ble.n	a06a <__multiply+0x16e>
    a062:	3b04      	subs	r3, #4
    a064:	681a      	ldr	r2, [r3, #0]
    a066:	2a00      	cmp	r2, #0
    a068:	d0f8      	beq.n	a05c <__multiply+0x160>
    a06a:	9902      	ldr	r1, [sp, #8]
    a06c:	b005      	add	sp, #20
    a06e:	1c08      	adds	r0, r1, #0
    a070:	610c      	str	r4, [r1, #16]
    a072:	bc3c      	pop	{r2, r3, r4, r5}
    a074:	4690      	mov	r8, r2
    a076:	4699      	mov	r9, r3
    a078:	46a2      	mov	sl, r4
    a07a:	46ab      	mov	fp, r5
    a07c:	bcf0      	pop	{r4, r5, r6, r7}
    a07e:	bc02      	pop	{r1}
    a080:	4708      	bx	r1
    a082:	46c0      	nop			; (mov r8, r8)

0000a084 <__pow5mult>:
    a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a086:	464f      	mov	r7, r9
    a088:	4646      	mov	r6, r8
    a08a:	b4c0      	push	{r6, r7}
    a08c:	2303      	movs	r3, #3
    a08e:	4680      	mov	r8, r0
    a090:	1c0e      	adds	r6, r1, #0
    a092:	1c14      	adds	r4, r2, #0
    a094:	4013      	ands	r3, r2
    a096:	d138      	bne.n	a10a <__pow5mult+0x86>
    a098:	10a4      	asrs	r4, r4, #2
    a09a:	2c00      	cmp	r4, #0
    a09c:	d023      	beq.n	a0e6 <__pow5mult+0x62>
    a09e:	4641      	mov	r1, r8
    a0a0:	6c8d      	ldr	r5, [r1, #72]	; 0x48
    a0a2:	2d00      	cmp	r5, #0
    a0a4:	d03a      	beq.n	a11c <__pow5mult+0x98>
    a0a6:	2101      	movs	r1, #1
    a0a8:	4689      	mov	r9, r1
    a0aa:	e006      	b.n	a0ba <__pow5mult+0x36>
    a0ac:	1064      	asrs	r4, r4, #1
    a0ae:	2c00      	cmp	r4, #0
    a0b0:	d019      	beq.n	a0e6 <__pow5mult+0x62>
    a0b2:	682f      	ldr	r7, [r5, #0]
    a0b4:	2f00      	cmp	r7, #0
    a0b6:	d01d      	beq.n	a0f4 <__pow5mult+0x70>
    a0b8:	1c3d      	adds	r5, r7, #0
    a0ba:	464b      	mov	r3, r9
    a0bc:	421c      	tst	r4, r3
    a0be:	d0f5      	beq.n	a0ac <__pow5mult+0x28>
    a0c0:	4640      	mov	r0, r8
    a0c2:	1c31      	adds	r1, r6, #0
    a0c4:	1c2a      	adds	r2, r5, #0
    a0c6:	f7ff ff19 	bl	9efc <__multiply>
    a0ca:	2e00      	cmp	r6, #0
    a0cc:	d01b      	beq.n	a106 <__pow5mult+0x82>
    a0ce:	6873      	ldr	r3, [r6, #4]
    a0d0:	4641      	mov	r1, r8
    a0d2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    a0d4:	009b      	lsls	r3, r3, #2
    a0d6:	18d3      	adds	r3, r2, r3
    a0d8:	681a      	ldr	r2, [r3, #0]
    a0da:	1064      	asrs	r4, r4, #1
    a0dc:	6032      	str	r2, [r6, #0]
    a0de:	601e      	str	r6, [r3, #0]
    a0e0:	1c06      	adds	r6, r0, #0
    a0e2:	2c00      	cmp	r4, #0
    a0e4:	d1e5      	bne.n	a0b2 <__pow5mult+0x2e>
    a0e6:	1c30      	adds	r0, r6, #0
    a0e8:	bc0c      	pop	{r2, r3}
    a0ea:	4690      	mov	r8, r2
    a0ec:	4699      	mov	r9, r3
    a0ee:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a0f0:	bc02      	pop	{r1}
    a0f2:	4708      	bx	r1
    a0f4:	1c29      	adds	r1, r5, #0
    a0f6:	1c2a      	adds	r2, r5, #0
    a0f8:	4640      	mov	r0, r8
    a0fa:	f7ff feff 	bl	9efc <__multiply>
    a0fe:	6028      	str	r0, [r5, #0]
    a100:	6007      	str	r7, [r0, #0]
    a102:	1c05      	adds	r5, r0, #0
    a104:	e7d9      	b.n	a0ba <__pow5mult+0x36>
    a106:	1c06      	adds	r6, r0, #0
    a108:	e7d0      	b.n	a0ac <__pow5mult+0x28>
    a10a:	4a09      	ldr	r2, [pc, #36]	; (a130 <__pow5mult+0xac>)
    a10c:	3b01      	subs	r3, #1
    a10e:	009b      	lsls	r3, r3, #2
    a110:	589a      	ldr	r2, [r3, r2]
    a112:	2300      	movs	r3, #0
    a114:	f7ff fdfe 	bl	9d14 <__multadd>
    a118:	1c06      	adds	r6, r0, #0
    a11a:	e7bd      	b.n	a098 <__pow5mult+0x14>
    a11c:	4640      	mov	r0, r8
    a11e:	4905      	ldr	r1, [pc, #20]	; (a134 <__pow5mult+0xb0>)
    a120:	f7ff fee0 	bl	9ee4 <__i2b>
    a124:	4643      	mov	r3, r8
    a126:	6498      	str	r0, [r3, #72]	; 0x48
    a128:	2300      	movs	r3, #0
    a12a:	1c05      	adds	r5, r0, #0
    a12c:	6003      	str	r3, [r0, #0]
    a12e:	e7ba      	b.n	a0a6 <__pow5mult+0x22>
    a130:	0000e088 	.word	0x0000e088
    a134:	00000271 	.word	0x00000271

0000a138 <__lshift>:
    a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a13a:	465f      	mov	r7, fp
    a13c:	4656      	mov	r6, sl
    a13e:	464d      	mov	r5, r9
    a140:	4644      	mov	r4, r8
    a142:	b4f0      	push	{r4, r5, r6, r7}
    a144:	1c0e      	adds	r6, r1, #0
    a146:	6934      	ldr	r4, [r6, #16]
    a148:	1155      	asrs	r5, r2, #5
    a14a:	3401      	adds	r4, #1
    a14c:	68b3      	ldr	r3, [r6, #8]
    a14e:	1964      	adds	r4, r4, r5
    a150:	4683      	mov	fp, r0
    a152:	4690      	mov	r8, r2
    a154:	6849      	ldr	r1, [r1, #4]
    a156:	429c      	cmp	r4, r3
    a158:	dd03      	ble.n	a162 <__lshift+0x2a>
    a15a:	005b      	lsls	r3, r3, #1
    a15c:	3101      	adds	r1, #1
    a15e:	429c      	cmp	r4, r3
    a160:	dcfb      	bgt.n	a15a <__lshift+0x22>
    a162:	4658      	mov	r0, fp
    a164:	f7ff fda0 	bl	9ca8 <_Balloc>
    a168:	4682      	mov	sl, r0
    a16a:	2014      	movs	r0, #20
    a16c:	1c02      	adds	r2, r0, #0
    a16e:	4452      	add	r2, sl
    a170:	2d00      	cmp	r5, #0
    a172:	dd09      	ble.n	a188 <__lshift+0x50>
    a174:	2300      	movs	r3, #0
    a176:	1c19      	adds	r1, r3, #0
    a178:	3301      	adds	r3, #1
    a17a:	c202      	stmia	r2!, {r1}
    a17c:	42ab      	cmp	r3, r5
    a17e:	d1fb      	bne.n	a178 <__lshift+0x40>
    a180:	1d1a      	adds	r2, r3, #4
    a182:	0092      	lsls	r2, r2, #2
    a184:	4452      	add	r2, sl
    a186:	3204      	adds	r2, #4
    a188:	6935      	ldr	r5, [r6, #16]
    a18a:	211f      	movs	r1, #31
    a18c:	3504      	adds	r5, #4
    a18e:	468c      	mov	ip, r1
    a190:	1c33      	adds	r3, r6, #0
    a192:	00ad      	lsls	r5, r5, #2
    a194:	3314      	adds	r3, #20
    a196:	1975      	adds	r5, r6, r5
    a198:	4647      	mov	r7, r8
    a19a:	4660      	mov	r0, ip
    a19c:	3504      	adds	r5, #4
    a19e:	1c19      	adds	r1, r3, #0
    a1a0:	4007      	ands	r7, r0
    a1a2:	46b8      	mov	r8, r7
    a1a4:	d026      	beq.n	a1f4 <__lshift+0xbc>
    a1a6:	2120      	movs	r1, #32
    a1a8:	4647      	mov	r7, r8
    a1aa:	1bcf      	subs	r7, r1, r7
    a1ac:	46bc      	mov	ip, r7
    a1ae:	3920      	subs	r1, #32
    a1b0:	6818      	ldr	r0, [r3, #0]
    a1b2:	1c07      	adds	r7, r0, #0
    a1b4:	4640      	mov	r0, r8
    a1b6:	4087      	lsls	r7, r0
    a1b8:	4339      	orrs	r1, r7
    a1ba:	c202      	stmia	r2!, {r1}
    a1bc:	cb02      	ldmia	r3!, {r1}
    a1be:	4667      	mov	r7, ip
    a1c0:	40f9      	lsrs	r1, r7
    a1c2:	429d      	cmp	r5, r3
    a1c4:	d8f4      	bhi.n	a1b0 <__lshift+0x78>
    a1c6:	6011      	str	r1, [r2, #0]
    a1c8:	1e4b      	subs	r3, r1, #1
    a1ca:	4199      	sbcs	r1, r3
    a1cc:	1864      	adds	r4, r4, r1
    a1ce:	6873      	ldr	r3, [r6, #4]
    a1d0:	4659      	mov	r1, fp
    a1d2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    a1d4:	009b      	lsls	r3, r3, #2
    a1d6:	18d3      	adds	r3, r2, r3
    a1d8:	681a      	ldr	r2, [r3, #0]
    a1da:	4650      	mov	r0, sl
    a1dc:	3c01      	subs	r4, #1
    a1de:	6032      	str	r2, [r6, #0]
    a1e0:	6104      	str	r4, [r0, #16]
    a1e2:	601e      	str	r6, [r3, #0]
    a1e4:	bc3c      	pop	{r2, r3, r4, r5}
    a1e6:	4690      	mov	r8, r2
    a1e8:	4699      	mov	r9, r3
    a1ea:	46a2      	mov	sl, r4
    a1ec:	46ab      	mov	fp, r5
    a1ee:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a1f0:	bc02      	pop	{r1}
    a1f2:	4708      	bx	r1
    a1f4:	c908      	ldmia	r1!, {r3}
    a1f6:	c208      	stmia	r2!, {r3}
    a1f8:	428d      	cmp	r5, r1
    a1fa:	d9e8      	bls.n	a1ce <__lshift+0x96>
    a1fc:	c908      	ldmia	r1!, {r3}
    a1fe:	c208      	stmia	r2!, {r3}
    a200:	428d      	cmp	r5, r1
    a202:	d8f7      	bhi.n	a1f4 <__lshift+0xbc>
    a204:	e7e3      	b.n	a1ce <__lshift+0x96>
    a206:	46c0      	nop			; (mov r8, r8)

0000a208 <__mcmp>:
    a208:	b570      	push	{r4, r5, r6, lr}
    a20a:	1c03      	adds	r3, r0, #0
    a20c:	690e      	ldr	r6, [r1, #16]
    a20e:	6900      	ldr	r0, [r0, #16]
    a210:	1b80      	subs	r0, r0, r6
    a212:	2800      	cmp	r0, #0
    a214:	d10f      	bne.n	a236 <__mcmp+0x2e>
    a216:	3604      	adds	r6, #4
    a218:	00b6      	lsls	r6, r6, #2
    a21a:	1c1d      	adds	r5, r3, #0
    a21c:	1989      	adds	r1, r1, r6
    a21e:	199b      	adds	r3, r3, r6
    a220:	3514      	adds	r5, #20
    a222:	3304      	adds	r3, #4
    a224:	3104      	adds	r1, #4
    a226:	3b04      	subs	r3, #4
    a228:	3904      	subs	r1, #4
    a22a:	681c      	ldr	r4, [r3, #0]
    a22c:	680a      	ldr	r2, [r1, #0]
    a22e:	4294      	cmp	r4, r2
    a230:	d104      	bne.n	a23c <__mcmp+0x34>
    a232:	429d      	cmp	r5, r3
    a234:	d3f7      	bcc.n	a226 <__mcmp+0x1e>
    a236:	bc70      	pop	{r4, r5, r6}
    a238:	bc02      	pop	{r1}
    a23a:	4708      	bx	r1
    a23c:	4294      	cmp	r4, r2
    a23e:	4192      	sbcs	r2, r2
    a240:	2001      	movs	r0, #1
    a242:	4310      	orrs	r0, r2
    a244:	e7f7      	b.n	a236 <__mcmp+0x2e>
    a246:	46c0      	nop			; (mov r8, r8)

0000a248 <__mdiff>:
    a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a24a:	465f      	mov	r7, fp
    a24c:	4656      	mov	r6, sl
    a24e:	464d      	mov	r5, r9
    a250:	4644      	mov	r4, r8
    a252:	b4f0      	push	{r4, r5, r6, r7}
    a254:	1c07      	adds	r7, r0, #0
    a256:	1c0c      	adds	r4, r1, #0
    a258:	1c08      	adds	r0, r1, #0
    a25a:	1c11      	adds	r1, r2, #0
    a25c:	1c15      	adds	r5, r2, #0
    a25e:	f7ff ffd3 	bl	a208 <__mcmp>
    a262:	1e06      	subs	r6, r0, #0
    a264:	d067      	beq.n	a336 <__mdiff+0xee>
    a266:	2e00      	cmp	r6, #0
    a268:	db60      	blt.n	a32c <__mdiff+0xe4>
    a26a:	2600      	movs	r6, #0
    a26c:	6861      	ldr	r1, [r4, #4]
    a26e:	1c38      	adds	r0, r7, #0
    a270:	f7ff fd1a 	bl	9ca8 <_Balloc>
    a274:	6922      	ldr	r2, [r4, #16]
    a276:	2704      	movs	r7, #4
    a278:	4694      	mov	ip, r2
    a27a:	1c3b      	adds	r3, r7, #0
    a27c:	4463      	add	r3, ip
    a27e:	009b      	lsls	r3, r3, #2
    a280:	18e3      	adds	r3, r4, r3
    a282:	19db      	adds	r3, r3, r7
    a284:	692f      	ldr	r7, [r5, #16]
    a286:	3704      	adds	r7, #4
    a288:	00bf      	lsls	r7, r7, #2
    a28a:	19ef      	adds	r7, r5, r7
    a28c:	2214      	movs	r2, #20
    a28e:	3704      	adds	r7, #4
    a290:	1812      	adds	r2, r2, r0
    a292:	60c6      	str	r6, [r0, #12]
    a294:	4698      	mov	r8, r3
    a296:	46bb      	mov	fp, r7
    a298:	3414      	adds	r4, #20
    a29a:	3514      	adds	r5, #20
    a29c:	4691      	mov	r9, r2
    a29e:	2100      	movs	r1, #0
    a2a0:	cc40      	ldmia	r4!, {r6}
    a2a2:	cd04      	ldmia	r5!, {r2}
    a2a4:	0433      	lsls	r3, r6, #16
    a2a6:	0c1b      	lsrs	r3, r3, #16
    a2a8:	469a      	mov	sl, r3
    a2aa:	0413      	lsls	r3, r2, #16
    a2ac:	0c1b      	lsrs	r3, r3, #16
    a2ae:	4657      	mov	r7, sl
    a2b0:	1afb      	subs	r3, r7, r3
    a2b2:	185b      	adds	r3, r3, r1
    a2b4:	0c12      	lsrs	r2, r2, #16
    a2b6:	0c36      	lsrs	r6, r6, #16
    a2b8:	1419      	asrs	r1, r3, #16
    a2ba:	1ab6      	subs	r6, r6, r2
    a2bc:	1876      	adds	r6, r6, r1
    a2be:	041b      	lsls	r3, r3, #16
    a2c0:	0c1b      	lsrs	r3, r3, #16
    a2c2:	1431      	asrs	r1, r6, #16
    a2c4:	0436      	lsls	r6, r6, #16
    a2c6:	431e      	orrs	r6, r3
    a2c8:	464b      	mov	r3, r9
    a2ca:	c340      	stmia	r3!, {r6}
    a2cc:	1c22      	adds	r2, r4, #0
    a2ce:	4699      	mov	r9, r3
    a2d0:	45ab      	cmp	fp, r5
    a2d2:	d8e5      	bhi.n	a2a0 <__mdiff+0x58>
    a2d4:	45a0      	cmp	r8, r4
    a2d6:	d91b      	bls.n	a310 <__mdiff+0xc8>
    a2d8:	ca80      	ldmia	r2!, {r7}
    a2da:	043d      	lsls	r5, r7, #16
    a2dc:	0c2d      	lsrs	r5, r5, #16
    a2de:	194d      	adds	r5, r1, r5
    a2e0:	142e      	asrs	r6, r5, #16
    a2e2:	0c3f      	lsrs	r7, r7, #16
    a2e4:	19f6      	adds	r6, r6, r7
    a2e6:	042d      	lsls	r5, r5, #16
    a2e8:	1431      	asrs	r1, r6, #16
    a2ea:	0c2d      	lsrs	r5, r5, #16
    a2ec:	0436      	lsls	r6, r6, #16
    a2ee:	432e      	orrs	r6, r5
    a2f0:	c340      	stmia	r3!, {r6}
    a2f2:	4590      	cmp	r8, r2
    a2f4:	d8f0      	bhi.n	a2d8 <__mdiff+0x90>
    a2f6:	43e3      	mvns	r3, r4
    a2f8:	4443      	add	r3, r8
    a2fa:	089b      	lsrs	r3, r3, #2
    a2fc:	3301      	adds	r3, #1
    a2fe:	009b      	lsls	r3, r3, #2
    a300:	444b      	add	r3, r9
    a302:	3b04      	subs	r3, #4
    a304:	681a      	ldr	r2, [r3, #0]
    a306:	2a00      	cmp	r2, #0
    a308:	d106      	bne.n	a318 <__mdiff+0xd0>
    a30a:	2201      	movs	r2, #1
    a30c:	4252      	negs	r2, r2
    a30e:	4494      	add	ip, r2
    a310:	3b04      	subs	r3, #4
    a312:	681a      	ldr	r2, [r3, #0]
    a314:	2a00      	cmp	r2, #0
    a316:	d0f8      	beq.n	a30a <__mdiff+0xc2>
    a318:	4663      	mov	r3, ip
    a31a:	6103      	str	r3, [r0, #16]
    a31c:	bc3c      	pop	{r2, r3, r4, r5}
    a31e:	4690      	mov	r8, r2
    a320:	4699      	mov	r9, r3
    a322:	46a2      	mov	sl, r4
    a324:	46ab      	mov	fp, r5
    a326:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a328:	bc02      	pop	{r1}
    a32a:	4708      	bx	r1
    a32c:	1c23      	adds	r3, r4, #0
    a32e:	2601      	movs	r6, #1
    a330:	1c2c      	adds	r4, r5, #0
    a332:	1c1d      	adds	r5, r3, #0
    a334:	e79a      	b.n	a26c <__mdiff+0x24>
    a336:	1c38      	adds	r0, r7, #0
    a338:	1c31      	adds	r1, r6, #0
    a33a:	f7ff fcb5 	bl	9ca8 <_Balloc>
    a33e:	2301      	movs	r3, #1
    a340:	6103      	str	r3, [r0, #16]
    a342:	6146      	str	r6, [r0, #20]
    a344:	e7ea      	b.n	a31c <__mdiff+0xd4>
    a346:	46c0      	nop			; (mov r8, r8)

0000a348 <__ulp>:
    a348:	b510      	push	{r4, lr}
    a34a:	4b10      	ldr	r3, [pc, #64]	; (a38c <__ulp+0x44>)
    a34c:	4a10      	ldr	r2, [pc, #64]	; (a390 <__ulp+0x48>)
    a34e:	400b      	ands	r3, r1
    a350:	189b      	adds	r3, r3, r2
    a352:	2b00      	cmp	r3, #0
    a354:	dd04      	ble.n	a360 <__ulp+0x18>
    a356:	1c19      	adds	r1, r3, #0
    a358:	2000      	movs	r0, #0
    a35a:	bc10      	pop	{r4}
    a35c:	bc04      	pop	{r2}
    a35e:	4710      	bx	r2
    a360:	425b      	negs	r3, r3
    a362:	151b      	asrs	r3, r3, #20
    a364:	2b13      	cmp	r3, #19
    a366:	dd0a      	ble.n	a37e <__ulp+0x36>
    a368:	3b14      	subs	r3, #20
    a36a:	2000      	movs	r0, #0
    a36c:	2100      	movs	r1, #0
    a36e:	2201      	movs	r2, #1
    a370:	2b1e      	cmp	r3, #30
    a372:	dc02      	bgt.n	a37a <__ulp+0x32>
    a374:	241f      	movs	r4, #31
    a376:	1ae3      	subs	r3, r4, r3
    a378:	409a      	lsls	r2, r3
    a37a:	1c10      	adds	r0, r2, #0
    a37c:	e7ed      	b.n	a35a <__ulp+0x12>
    a37e:	2280      	movs	r2, #128	; 0x80
    a380:	0312      	lsls	r2, r2, #12
    a382:	1c11      	adds	r1, r2, #0
    a384:	4119      	asrs	r1, r3
    a386:	2000      	movs	r0, #0
    a388:	e7e7      	b.n	a35a <__ulp+0x12>
    a38a:	46c0      	nop			; (mov r8, r8)
    a38c:	7ff00000 	.word	0x7ff00000
    a390:	fcc00000 	.word	0xfcc00000

0000a394 <__b2d>:
    a394:	b5f0      	push	{r4, r5, r6, r7, lr}
    a396:	4647      	mov	r7, r8
    a398:	b480      	push	{r7}
    a39a:	6904      	ldr	r4, [r0, #16]
    a39c:	3404      	adds	r4, #4
    a39e:	00a4      	lsls	r4, r4, #2
    a3a0:	1904      	adds	r4, r0, r4
    a3a2:	6825      	ldr	r5, [r4, #0]
    a3a4:	1c07      	adds	r7, r0, #0
    a3a6:	1c28      	adds	r0, r5, #0
    a3a8:	1c0e      	adds	r6, r1, #0
    a3aa:	f7ff fd49 	bl	9e40 <__hi0bits>
    a3ae:	2320      	movs	r3, #32
    a3b0:	1a1b      	subs	r3, r3, r0
    a3b2:	3714      	adds	r7, #20
    a3b4:	6033      	str	r3, [r6, #0]
    a3b6:	280a      	cmp	r0, #10
    a3b8:	dc19      	bgt.n	a3ee <__b2d+0x5a>
    a3ba:	260b      	movs	r6, #11
    a3bc:	1a36      	subs	r6, r6, r0
    a3be:	1c29      	adds	r1, r5, #0
    a3c0:	40f1      	lsrs	r1, r6
    a3c2:	4688      	mov	r8, r1
    a3c4:	491a      	ldr	r1, [pc, #104]	; (a430 <__b2d+0x9c>)
    a3c6:	1c0b      	adds	r3, r1, #0
    a3c8:	4641      	mov	r1, r8
    a3ca:	430b      	orrs	r3, r1
    a3cc:	2100      	movs	r1, #0
    a3ce:	42a7      	cmp	r7, r4
    a3d0:	d202      	bcs.n	a3d8 <__b2d+0x44>
    a3d2:	3c04      	subs	r4, #4
    a3d4:	6821      	ldr	r1, [r4, #0]
    a3d6:	40f1      	lsrs	r1, r6
    a3d8:	3015      	adds	r0, #21
    a3da:	4085      	lsls	r5, r0
    a3dc:	1c0a      	adds	r2, r1, #0
    a3de:	432a      	orrs	r2, r5
    a3e0:	1c10      	adds	r0, r2, #0
    a3e2:	1c19      	adds	r1, r3, #0
    a3e4:	bc04      	pop	{r2}
    a3e6:	4690      	mov	r8, r2
    a3e8:	bcf0      	pop	{r4, r5, r6, r7}
    a3ea:	bc04      	pop	{r2}
    a3ec:	4710      	bx	r2
    a3ee:	2100      	movs	r1, #0
    a3f0:	42a7      	cmp	r7, r4
    a3f2:	d201      	bcs.n	a3f8 <__b2d+0x64>
    a3f4:	3c04      	subs	r4, #4
    a3f6:	6821      	ldr	r1, [r4, #0]
    a3f8:	380b      	subs	r0, #11
    a3fa:	2800      	cmp	r0, #0
    a3fc:	d013      	beq.n	a426 <__b2d+0x92>
    a3fe:	4b0c      	ldr	r3, [pc, #48]	; (a430 <__b2d+0x9c>)
    a400:	4085      	lsls	r5, r0
    a402:	432b      	orrs	r3, r5
    a404:	2620      	movs	r6, #32
    a406:	1a36      	subs	r6, r6, r0
    a408:	469c      	mov	ip, r3
    a40a:	1c0d      	adds	r5, r1, #0
    a40c:	40f5      	lsrs	r5, r6
    a40e:	4663      	mov	r3, ip
    a410:	432b      	orrs	r3, r5
    a412:	2500      	movs	r5, #0
    a414:	42bc      	cmp	r4, r7
    a416:	d902      	bls.n	a41e <__b2d+0x8a>
    a418:	3c04      	subs	r4, #4
    a41a:	6825      	ldr	r5, [r4, #0]
    a41c:	40f5      	lsrs	r5, r6
    a41e:	4081      	lsls	r1, r0
    a420:	1c2a      	adds	r2, r5, #0
    a422:	430a      	orrs	r2, r1
    a424:	e7dc      	b.n	a3e0 <__b2d+0x4c>
    a426:	4802      	ldr	r0, [pc, #8]	; (a430 <__b2d+0x9c>)
    a428:	1c03      	adds	r3, r0, #0
    a42a:	432b      	orrs	r3, r5
    a42c:	1c0a      	adds	r2, r1, #0
    a42e:	e7d7      	b.n	a3e0 <__b2d+0x4c>
    a430:	3ff00000 	.word	0x3ff00000

0000a434 <__d2b>:
    a434:	b5f0      	push	{r4, r5, r6, r7, lr}
    a436:	464f      	mov	r7, r9
    a438:	4646      	mov	r6, r8
    a43a:	b4c0      	push	{r6, r7}
    a43c:	b083      	sub	sp, #12
    a43e:	990a      	ldr	r1, [sp, #40]	; 0x28
    a440:	4688      	mov	r8, r1
    a442:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a444:	4689      	mov	r9, r1
    a446:	2101      	movs	r1, #1
    a448:	1c1f      	adds	r7, r3, #0
    a44a:	1c16      	adds	r6, r2, #0
    a44c:	f7ff fc2c 	bl	9ca8 <_Balloc>
    a450:	007d      	lsls	r5, r7, #1
    a452:	033b      	lsls	r3, r7, #12
    a454:	0b1b      	lsrs	r3, r3, #12
    a456:	0d6d      	lsrs	r5, r5, #21
    a458:	1c04      	adds	r4, r0, #0
    a45a:	9300      	str	r3, [sp, #0]
    a45c:	2d00      	cmp	r5, #0
    a45e:	d003      	beq.n	a468 <__d2b+0x34>
    a460:	2280      	movs	r2, #128	; 0x80
    a462:	0352      	lsls	r2, r2, #13
    a464:	4313      	orrs	r3, r2
    a466:	9300      	str	r3, [sp, #0]
    a468:	2e00      	cmp	r6, #0
    a46a:	d01a      	beq.n	a4a2 <__d2b+0x6e>
    a46c:	a801      	add	r0, sp, #4
    a46e:	9601      	str	r6, [sp, #4]
    a470:	f7ff fd06 	bl	9e80 <__lo0bits>
    a474:	2800      	cmp	r0, #0
    a476:	d134      	bne.n	a4e2 <__d2b+0xae>
    a478:	9b01      	ldr	r3, [sp, #4]
    a47a:	9e00      	ldr	r6, [sp, #0]
    a47c:	6163      	str	r3, [r4, #20]
    a47e:	61a6      	str	r6, [r4, #24]
    a480:	4273      	negs	r3, r6
    a482:	4173      	adcs	r3, r6
    a484:	2602      	movs	r6, #2
    a486:	1af6      	subs	r6, r6, r3
    a488:	6126      	str	r6, [r4, #16]
    a48a:	2d00      	cmp	r5, #0
    a48c:	d013      	beq.n	a4b6 <__d2b+0x82>
    a48e:	4b1b      	ldr	r3, [pc, #108]	; (a4fc <__d2b+0xc8>)
    a490:	18ed      	adds	r5, r5, r3
    a492:	2335      	movs	r3, #53	; 0x35
    a494:	182d      	adds	r5, r5, r0
    a496:	4641      	mov	r1, r8
    a498:	1a18      	subs	r0, r3, r0
    a49a:	464a      	mov	r2, r9
    a49c:	600d      	str	r5, [r1, #0]
    a49e:	6010      	str	r0, [r2, #0]
    a4a0:	e017      	b.n	a4d2 <__d2b+0x9e>
    a4a2:	4668      	mov	r0, sp
    a4a4:	f7ff fcec 	bl	9e80 <__lo0bits>
    a4a8:	9b00      	ldr	r3, [sp, #0]
    a4aa:	2601      	movs	r6, #1
    a4ac:	6163      	str	r3, [r4, #20]
    a4ae:	6126      	str	r6, [r4, #16]
    a4b0:	3020      	adds	r0, #32
    a4b2:	2d00      	cmp	r5, #0
    a4b4:	d1eb      	bne.n	a48e <__d2b+0x5a>
    a4b6:	4b12      	ldr	r3, [pc, #72]	; (a500 <__d2b+0xcc>)
    a4b8:	18c0      	adds	r0, r0, r3
    a4ba:	1cf3      	adds	r3, r6, #3
    a4bc:	009b      	lsls	r3, r3, #2
    a4be:	4641      	mov	r1, r8
    a4c0:	18e3      	adds	r3, r4, r3
    a4c2:	6008      	str	r0, [r1, #0]
    a4c4:	6858      	ldr	r0, [r3, #4]
    a4c6:	f7ff fcbb 	bl	9e40 <__hi0bits>
    a4ca:	0176      	lsls	r6, r6, #5
    a4cc:	1a36      	subs	r6, r6, r0
    a4ce:	464a      	mov	r2, r9
    a4d0:	6016      	str	r6, [r2, #0]
    a4d2:	b003      	add	sp, #12
    a4d4:	1c20      	adds	r0, r4, #0
    a4d6:	bc0c      	pop	{r2, r3}
    a4d8:	4690      	mov	r8, r2
    a4da:	4699      	mov	r9, r3
    a4dc:	bcf0      	pop	{r4, r5, r6, r7}
    a4de:	bc02      	pop	{r1}
    a4e0:	4708      	bx	r1
    a4e2:	9e00      	ldr	r6, [sp, #0]
    a4e4:	2320      	movs	r3, #32
    a4e6:	1a1b      	subs	r3, r3, r0
    a4e8:	1c32      	adds	r2, r6, #0
    a4ea:	409a      	lsls	r2, r3
    a4ec:	1c13      	adds	r3, r2, #0
    a4ee:	9a01      	ldr	r2, [sp, #4]
    a4f0:	40c6      	lsrs	r6, r0
    a4f2:	4313      	orrs	r3, r2
    a4f4:	6163      	str	r3, [r4, #20]
    a4f6:	9600      	str	r6, [sp, #0]
    a4f8:	e7c1      	b.n	a47e <__d2b+0x4a>
    a4fa:	46c0      	nop			; (mov r8, r8)
    a4fc:	fffffbcd 	.word	0xfffffbcd
    a500:	fffffbce 	.word	0xfffffbce

0000a504 <__ratio>:
    a504:	b5f0      	push	{r4, r5, r6, r7, lr}
    a506:	4647      	mov	r7, r8
    a508:	b480      	push	{r7}
    a50a:	b086      	sub	sp, #24
    a50c:	1c0f      	adds	r7, r1, #0
    a50e:	a905      	add	r1, sp, #20
    a510:	1c06      	adds	r6, r0, #0
    a512:	f7ff ff3f 	bl	a394 <__b2d>
    a516:	1c04      	adds	r4, r0, #0
    a518:	1c0d      	adds	r5, r1, #0
    a51a:	1c38      	adds	r0, r7, #0
    a51c:	a904      	add	r1, sp, #16
    a51e:	9402      	str	r4, [sp, #8]
    a520:	9503      	str	r5, [sp, #12]
    a522:	f7ff ff37 	bl	a394 <__b2d>
    a526:	6936      	ldr	r6, [r6, #16]
    a528:	1c02      	adds	r2, r0, #0
    a52a:	1c0b      	adds	r3, r1, #0
    a52c:	9804      	ldr	r0, [sp, #16]
    a52e:	9905      	ldr	r1, [sp, #20]
    a530:	46b0      	mov	r8, r6
    a532:	693e      	ldr	r6, [r7, #16]
    a534:	1a09      	subs	r1, r1, r0
    a536:	4640      	mov	r0, r8
    a538:	1b87      	subs	r7, r0, r6
    a53a:	017f      	lsls	r7, r7, #5
    a53c:	468c      	mov	ip, r1
    a53e:	1c3e      	adds	r6, r7, #0
    a540:	4466      	add	r6, ip
    a542:	9200      	str	r2, [sp, #0]
    a544:	9301      	str	r3, [sp, #4]
    a546:	2e00      	cmp	r6, #0
    a548:	dd0f      	ble.n	a56a <__ratio+0x66>
    a54a:	9903      	ldr	r1, [sp, #12]
    a54c:	0536      	lsls	r6, r6, #20
    a54e:	1989      	adds	r1, r1, r6
    a550:	9103      	str	r1, [sp, #12]
    a552:	9c02      	ldr	r4, [sp, #8]
    a554:	9d03      	ldr	r5, [sp, #12]
    a556:	1c29      	adds	r1, r5, #0
    a558:	1c20      	adds	r0, r4, #0
    a55a:	f003 fbdb 	bl	dd14 <____aeabi_ddiv_from_thumb>
    a55e:	b006      	add	sp, #24
    a560:	bc04      	pop	{r2}
    a562:	4690      	mov	r8, r2
    a564:	bcf0      	pop	{r4, r5, r6, r7}
    a566:	bc04      	pop	{r2}
    a568:	4710      	bx	r2
    a56a:	9b01      	ldr	r3, [sp, #4]
    a56c:	0536      	lsls	r6, r6, #20
    a56e:	1b9e      	subs	r6, r3, r6
    a570:	9601      	str	r6, [sp, #4]
    a572:	9a00      	ldr	r2, [sp, #0]
    a574:	9b01      	ldr	r3, [sp, #4]
    a576:	e7ee      	b.n	a556 <__ratio+0x52>

0000a578 <_mprec_log10>:
    a578:	b510      	push	{r4, lr}
    a57a:	1c04      	adds	r4, r0, #0
    a57c:	2817      	cmp	r0, #23
    a57e:	dd0b      	ble.n	a598 <_mprec_log10+0x20>
    a580:	490a      	ldr	r1, [pc, #40]	; (a5ac <_mprec_log10+0x34>)
    a582:	4809      	ldr	r0, [pc, #36]	; (a5a8 <_mprec_log10+0x30>)
    a584:	4a0a      	ldr	r2, [pc, #40]	; (a5b0 <_mprec_log10+0x38>)
    a586:	4b0b      	ldr	r3, [pc, #44]	; (a5b4 <_mprec_log10+0x3c>)
    a588:	3c01      	subs	r4, #1
    a58a:	f003 fb73 	bl	dc74 <____aeabi_dmul_from_thumb>
    a58e:	2c00      	cmp	r4, #0
    a590:	d1f8      	bne.n	a584 <_mprec_log10+0xc>
    a592:	bc10      	pop	{r4}
    a594:	bc04      	pop	{r2}
    a596:	4710      	bx	r2
    a598:	4b07      	ldr	r3, [pc, #28]	; (a5b8 <_mprec_log10+0x40>)
    a59a:	00c4      	lsls	r4, r0, #3
    a59c:	191c      	adds	r4, r3, r4
    a59e:	6920      	ldr	r0, [r4, #16]
    a5a0:	6961      	ldr	r1, [r4, #20]
    a5a2:	e7f6      	b.n	a592 <_mprec_log10+0x1a>
    a5a4:	46c0      	nop			; (mov r8, r8)
    a5a6:	46c0      	nop			; (mov r8, r8)
    a5a8:	00000000 	.word	0x00000000
    a5ac:	3ff00000 	.word	0x3ff00000
    a5b0:	00000000 	.word	0x00000000
    a5b4:	40240000 	.word	0x40240000
    a5b8:	0000e088 	.word	0x0000e088

0000a5bc <__copybits>:
    a5bc:	b570      	push	{r4, r5, r6, lr}
    a5be:	6915      	ldr	r5, [r2, #16]
    a5c0:	1e4e      	subs	r6, r1, #1
    a5c2:	3504      	adds	r5, #4
    a5c4:	1176      	asrs	r6, r6, #5
    a5c6:	00ad      	lsls	r5, r5, #2
    a5c8:	3601      	adds	r6, #1
    a5ca:	1c13      	adds	r3, r2, #0
    a5cc:	1955      	adds	r5, r2, r5
    a5ce:	00b6      	lsls	r6, r6, #2
    a5d0:	3314      	adds	r3, #20
    a5d2:	3504      	adds	r5, #4
    a5d4:	1986      	adds	r6, r0, r6
    a5d6:	42ab      	cmp	r3, r5
    a5d8:	d20a      	bcs.n	a5f0 <__copybits+0x34>
    a5da:	1c01      	adds	r1, r0, #0
    a5dc:	cb10      	ldmia	r3!, {r4}
    a5de:	c110      	stmia	r1!, {r4}
    a5e0:	429d      	cmp	r5, r3
    a5e2:	d8fb      	bhi.n	a5dc <__copybits+0x20>
    a5e4:	1aab      	subs	r3, r5, r2
    a5e6:	3b15      	subs	r3, #21
    a5e8:	089b      	lsrs	r3, r3, #2
    a5ea:	3301      	adds	r3, #1
    a5ec:	009b      	lsls	r3, r3, #2
    a5ee:	18c0      	adds	r0, r0, r3
    a5f0:	4286      	cmp	r6, r0
    a5f2:	d903      	bls.n	a5fc <__copybits+0x40>
    a5f4:	2300      	movs	r3, #0
    a5f6:	c008      	stmia	r0!, {r3}
    a5f8:	4286      	cmp	r6, r0
    a5fa:	d8fc      	bhi.n	a5f6 <__copybits+0x3a>
    a5fc:	bc70      	pop	{r4, r5, r6}
    a5fe:	bc01      	pop	{r0}
    a600:	4700      	bx	r0
    a602:	46c0      	nop			; (mov r8, r8)

0000a604 <__any_on>:
    a604:	b510      	push	{r4, lr}
    a606:	1c03      	adds	r3, r0, #0
    a608:	6900      	ldr	r0, [r0, #16]
    a60a:	114a      	asrs	r2, r1, #5
    a60c:	4290      	cmp	r0, r2
    a60e:	da17      	bge.n	a640 <__any_on+0x3c>
    a610:	1c02      	adds	r2, r0, #0
    a612:	3204      	adds	r2, #4
    a614:	0092      	lsls	r2, r2, #2
    a616:	1c19      	adds	r1, r3, #0
    a618:	189b      	adds	r3, r3, r2
    a61a:	3114      	adds	r1, #20
    a61c:	1d1a      	adds	r2, r3, #4
    a61e:	2000      	movs	r0, #0
    a620:	4291      	cmp	r1, r2
    a622:	d20a      	bcs.n	a63a <__any_on+0x36>
    a624:	681a      	ldr	r2, [r3, #0]
    a626:	3001      	adds	r0, #1
    a628:	2a00      	cmp	r2, #0
    a62a:	d106      	bne.n	a63a <__any_on+0x36>
    a62c:	4299      	cmp	r1, r3
    a62e:	d218      	bcs.n	a662 <__any_on+0x5e>
    a630:	3b04      	subs	r3, #4
    a632:	681a      	ldr	r2, [r3, #0]
    a634:	2a00      	cmp	r2, #0
    a636:	d0f9      	beq.n	a62c <__any_on+0x28>
    a638:	2001      	movs	r0, #1
    a63a:	bc10      	pop	{r4}
    a63c:	bc02      	pop	{r1}
    a63e:	4708      	bx	r1
    a640:	4290      	cmp	r0, r2
    a642:	dde6      	ble.n	a612 <__any_on+0xe>
    a644:	201f      	movs	r0, #31
    a646:	4001      	ands	r1, r0
    a648:	d0e3      	beq.n	a612 <__any_on+0xe>
    a64a:	1d10      	adds	r0, r2, #4
    a64c:	0080      	lsls	r0, r0, #2
    a64e:	1818      	adds	r0, r3, r0
    a650:	6844      	ldr	r4, [r0, #4]
    a652:	1c20      	adds	r0, r4, #0
    a654:	40c8      	lsrs	r0, r1
    a656:	4088      	lsls	r0, r1
    a658:	1c01      	adds	r1, r0, #0
    a65a:	2001      	movs	r0, #1
    a65c:	42a1      	cmp	r1, r4
    a65e:	d1ec      	bne.n	a63a <__any_on+0x36>
    a660:	e7d7      	b.n	a612 <__any_on+0xe>
    a662:	2000      	movs	r0, #0
    a664:	e7e9      	b.n	a63a <__any_on+0x36>
    a666:	46c0      	nop			; (mov r8, r8)

0000a668 <_putc_r>:
    a668:	b570      	push	{r4, r5, r6, lr}
    a66a:	1c05      	adds	r5, r0, #0
    a66c:	1c0e      	adds	r6, r1, #0
    a66e:	1c14      	adds	r4, r2, #0
    a670:	2800      	cmp	r0, #0
    a672:	d002      	beq.n	a67a <_putc_r+0x12>
    a674:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a676:	2b00      	cmp	r3, #0
    a678:	d01a      	beq.n	a6b0 <_putc_r+0x48>
    a67a:	68a3      	ldr	r3, [r4, #8]
    a67c:	3b01      	subs	r3, #1
    a67e:	60a3      	str	r3, [r4, #8]
    a680:	2b00      	cmp	r3, #0
    a682:	db08      	blt.n	a696 <_putc_r+0x2e>
    a684:	6823      	ldr	r3, [r4, #0]
    a686:	701e      	strb	r6, [r3, #0]
    a688:	6823      	ldr	r3, [r4, #0]
    a68a:	7818      	ldrb	r0, [r3, #0]
    a68c:	3301      	adds	r3, #1
    a68e:	6023      	str	r3, [r4, #0]
    a690:	bc70      	pop	{r4, r5, r6}
    a692:	bc02      	pop	{r1}
    a694:	4708      	bx	r1
    a696:	69a2      	ldr	r2, [r4, #24]
    a698:	4293      	cmp	r3, r2
    a69a:	db0c      	blt.n	a6b6 <_putc_r+0x4e>
    a69c:	6823      	ldr	r3, [r4, #0]
    a69e:	701e      	strb	r6, [r3, #0]
    a6a0:	6823      	ldr	r3, [r4, #0]
    a6a2:	7819      	ldrb	r1, [r3, #0]
    a6a4:	290a      	cmp	r1, #10
    a6a6:	d00c      	beq.n	a6c2 <_putc_r+0x5a>
    a6a8:	3301      	adds	r3, #1
    a6aa:	1c08      	adds	r0, r1, #0
    a6ac:	6023      	str	r3, [r4, #0]
    a6ae:	e7ef      	b.n	a690 <_putc_r+0x28>
    a6b0:	f7fa f89c 	bl	47ec <__sinit>
    a6b4:	e7e1      	b.n	a67a <_putc_r+0x12>
    a6b6:	1c28      	adds	r0, r5, #0
    a6b8:	1c31      	adds	r1, r6, #0
    a6ba:	1c22      	adds	r2, r4, #0
    a6bc:	f7fd fe88 	bl	83d0 <__swbuf_r>
    a6c0:	e7e6      	b.n	a690 <_putc_r+0x28>
    a6c2:	1c28      	adds	r0, r5, #0
    a6c4:	1c22      	adds	r2, r4, #0
    a6c6:	f7fd fe83 	bl	83d0 <__swbuf_r>
    a6ca:	e7e1      	b.n	a690 <_putc_r+0x28>

0000a6cc <putc>:
    a6cc:	b570      	push	{r4, r5, r6, lr}
    a6ce:	4d19      	ldr	r5, [pc, #100]	; (a734 <putc+0x68>)
    a6d0:	1c06      	adds	r6, r0, #0
    a6d2:	6828      	ldr	r0, [r5, #0]
    a6d4:	1c0c      	adds	r4, r1, #0
    a6d6:	2800      	cmp	r0, #0
    a6d8:	d002      	beq.n	a6e0 <putc+0x14>
    a6da:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a6dc:	2b00      	cmp	r3, #0
    a6de:	d01a      	beq.n	a716 <putc+0x4a>
    a6e0:	68a3      	ldr	r3, [r4, #8]
    a6e2:	3b01      	subs	r3, #1
    a6e4:	60a3      	str	r3, [r4, #8]
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	db08      	blt.n	a6fc <putc+0x30>
    a6ea:	6823      	ldr	r3, [r4, #0]
    a6ec:	701e      	strb	r6, [r3, #0]
    a6ee:	6823      	ldr	r3, [r4, #0]
    a6f0:	7818      	ldrb	r0, [r3, #0]
    a6f2:	3301      	adds	r3, #1
    a6f4:	6023      	str	r3, [r4, #0]
    a6f6:	bc70      	pop	{r4, r5, r6}
    a6f8:	bc02      	pop	{r1}
    a6fa:	4708      	bx	r1
    a6fc:	69a2      	ldr	r2, [r4, #24]
    a6fe:	4293      	cmp	r3, r2
    a700:	db0c      	blt.n	a71c <putc+0x50>
    a702:	6823      	ldr	r3, [r4, #0]
    a704:	701e      	strb	r6, [r3, #0]
    a706:	6823      	ldr	r3, [r4, #0]
    a708:	7819      	ldrb	r1, [r3, #0]
    a70a:	290a      	cmp	r1, #10
    a70c:	d00c      	beq.n	a728 <putc+0x5c>
    a70e:	3301      	adds	r3, #1
    a710:	1c08      	adds	r0, r1, #0
    a712:	6023      	str	r3, [r4, #0]
    a714:	e7ef      	b.n	a6f6 <putc+0x2a>
    a716:	f7fa f869 	bl	47ec <__sinit>
    a71a:	e7e1      	b.n	a6e0 <putc+0x14>
    a71c:	6828      	ldr	r0, [r5, #0]
    a71e:	1c31      	adds	r1, r6, #0
    a720:	1c22      	adds	r2, r4, #0
    a722:	f7fd fe55 	bl	83d0 <__swbuf_r>
    a726:	e7e6      	b.n	a6f6 <putc+0x2a>
    a728:	6828      	ldr	r0, [r5, #0]
    a72a:	1c22      	adds	r2, r4, #0
    a72c:	f7fd fe50 	bl	83d0 <__swbuf_r>
    a730:	e7e1      	b.n	a6f6 <putc+0x2a>
    a732:	46c0      	nop			; (mov r8, r8)
    a734:	40000000 	.word	0x40000000

0000a738 <_realloc_r>:
    a738:	b5f0      	push	{r4, r5, r6, r7, lr}
    a73a:	465f      	mov	r7, fp
    a73c:	4656      	mov	r6, sl
    a73e:	464d      	mov	r5, r9
    a740:	4644      	mov	r4, r8
    a742:	b4f0      	push	{r4, r5, r6, r7}
    a744:	b085      	sub	sp, #20
    a746:	4680      	mov	r8, r0
    a748:	1c0e      	adds	r6, r1, #0
    a74a:	1c17      	adds	r7, r2, #0
    a74c:	2900      	cmp	r1, #0
    a74e:	d100      	bne.n	a752 <_realloc_r+0x1a>
    a750:	e15f      	b.n	aa12 <_realloc_r+0x2da>
    a752:	1c34      	adds	r4, r6, #0
    a754:	1c3d      	adds	r5, r7, #0
    a756:	3c08      	subs	r4, #8
    a758:	350b      	adds	r5, #11
    a75a:	f7fa fe19 	bl	5390 <__malloc_lock>
    a75e:	6863      	ldr	r3, [r4, #4]
    a760:	2d16      	cmp	r5, #22
    a762:	d900      	bls.n	a766 <_realloc_r+0x2e>
    a764:	e085      	b.n	a872 <_realloc_r+0x13a>
    a766:	2210      	movs	r2, #16
    a768:	2100      	movs	r1, #0
    a76a:	9100      	str	r1, [sp, #0]
    a76c:	9201      	str	r2, [sp, #4]
    a76e:	1c15      	adds	r5, r2, #0
    a770:	42bd      	cmp	r5, r7
    a772:	d200      	bcs.n	a776 <_realloc_r+0x3e>
    a774:	e152      	b.n	aa1c <_realloc_r+0x2e4>
    a776:	9800      	ldr	r0, [sp, #0]
    a778:	2800      	cmp	r0, #0
    a77a:	d000      	beq.n	a77e <_realloc_r+0x46>
    a77c:	e14e      	b.n	aa1c <_realloc_r+0x2e4>
    a77e:	2203      	movs	r2, #3
    a780:	1c18      	adds	r0, r3, #0
    a782:	4390      	bics	r0, r2
    a784:	9901      	ldr	r1, [sp, #4]
    a786:	4681      	mov	r9, r0
    a788:	4692      	mov	sl, r2
    a78a:	4589      	cmp	r9, r1
    a78c:	da77      	bge.n	a87e <_realloc_r+0x146>
    a78e:	4abb      	ldr	r2, [pc, #748]	; (aa7c <_realloc_r+0x344>)
    a790:	6892      	ldr	r2, [r2, #8]
    a792:	1c21      	adds	r1, r4, #0
    a794:	4449      	add	r1, r9
    a796:	4694      	mov	ip, r2
    a798:	458c      	cmp	ip, r1
    a79a:	d100      	bne.n	a79e <_realloc_r+0x66>
    a79c:	e143      	b.n	aa26 <_realloc_r+0x2ee>
    a79e:	6848      	ldr	r0, [r1, #4]
    a7a0:	2201      	movs	r2, #1
    a7a2:	9003      	str	r0, [sp, #12]
    a7a4:	4390      	bics	r0, r2
    a7a6:	4683      	mov	fp, r0
    a7a8:	448b      	add	fp, r1
    a7aa:	4658      	mov	r0, fp
    a7ac:	6840      	ldr	r0, [r0, #4]
    a7ae:	4210      	tst	r0, r2
    a7b0:	d100      	bne.n	a7b4 <_realloc_r+0x7c>
    a7b2:	e081      	b.n	a8b8 <_realloc_r+0x180>
    a7b4:	9800      	ldr	r0, [sp, #0]
    a7b6:	1c01      	adds	r1, r0, #0
    a7b8:	07da      	lsls	r2, r3, #31
    a7ba:	d500      	bpl.n	a7be <_realloc_r+0x86>
    a7bc:	e09d      	b.n	a8fa <_realloc_r+0x1c2>
    a7be:	6823      	ldr	r3, [r4, #0]
    a7c0:	1ae3      	subs	r3, r4, r3
    a7c2:	469a      	mov	sl, r3
    a7c4:	685b      	ldr	r3, [r3, #4]
    a7c6:	469b      	mov	fp, r3
    a7c8:	465a      	mov	r2, fp
    a7ca:	2303      	movs	r3, #3
    a7cc:	439a      	bics	r2, r3
    a7ce:	1c13      	adds	r3, r2, #0
    a7d0:	2900      	cmp	r1, #0
    a7d2:	d100      	bne.n	a7d6 <_realloc_r+0x9e>
    a7d4:	e0d6      	b.n	a984 <_realloc_r+0x24c>
    a7d6:	4561      	cmp	r1, ip
    a7d8:	d100      	bne.n	a7dc <_realloc_r+0xa4>
    a7da:	e151      	b.n	aa80 <_realloc_r+0x348>
    a7dc:	444b      	add	r3, r9
    a7de:	9303      	str	r3, [sp, #12]
    a7e0:	181b      	adds	r3, r3, r0
    a7e2:	469b      	mov	fp, r3
    a7e4:	9b01      	ldr	r3, [sp, #4]
    a7e6:	455b      	cmp	r3, fp
    a7e8:	dd00      	ble.n	a7ec <_realloc_r+0xb4>
    a7ea:	e0cd      	b.n	a988 <_realloc_r+0x250>
    a7ec:	68cb      	ldr	r3, [r1, #12]
    a7ee:	688a      	ldr	r2, [r1, #8]
    a7f0:	60d3      	str	r3, [r2, #12]
    a7f2:	609a      	str	r2, [r3, #8]
    a7f4:	4650      	mov	r0, sl
    a7f6:	68c3      	ldr	r3, [r0, #12]
    a7f8:	6882      	ldr	r2, [r0, #8]
    a7fa:	60d3      	str	r3, [r2, #12]
    a7fc:	609a      	str	r2, [r3, #8]
    a7fe:	2304      	movs	r3, #4
    a800:	425b      	negs	r3, r3
    a802:	2108      	movs	r1, #8
    a804:	1c1a      	adds	r2, r3, #0
    a806:	1c0f      	adds	r7, r1, #0
    a808:	444a      	add	r2, r9
    a80a:	4457      	add	r7, sl
    a80c:	2a24      	cmp	r2, #36	; 0x24
    a80e:	d900      	bls.n	a812 <_realloc_r+0xda>
    a810:	e194      	b.n	ab3c <_realloc_r+0x404>
    a812:	1c39      	adds	r1, r7, #0
    a814:	2a13      	cmp	r2, #19
    a816:	d920      	bls.n	a85a <_realloc_r+0x122>
    a818:	1c33      	adds	r3, r6, #0
    a81a:	cb02      	ldmia	r3!, {r1}
    a81c:	6081      	str	r1, [r0, #8]
    a81e:	6871      	ldr	r1, [r6, #4]
    a820:	60c1      	str	r1, [r0, #12]
    a822:	2010      	movs	r0, #16
    a824:	1c01      	adds	r1, r0, #0
    a826:	4451      	add	r1, sl
    a828:	1d1e      	adds	r6, r3, #4
    a82a:	2a1b      	cmp	r2, #27
    a82c:	d915      	bls.n	a85a <_realloc_r+0x122>
    a82e:	685b      	ldr	r3, [r3, #4]
    a830:	4651      	mov	r1, sl
    a832:	610b      	str	r3, [r1, #16]
    a834:	6871      	ldr	r1, [r6, #4]
    a836:	4650      	mov	r0, sl
    a838:	6141      	str	r1, [r0, #20]
    a83a:	2018      	movs	r0, #24
    a83c:	1c01      	adds	r1, r0, #0
    a83e:	1d33      	adds	r3, r6, #4
    a840:	4451      	add	r1, sl
    a842:	3608      	adds	r6, #8
    a844:	2a24      	cmp	r2, #36	; 0x24
    a846:	d108      	bne.n	a85a <_realloc_r+0x122>
    a848:	685b      	ldr	r3, [r3, #4]
    a84a:	4651      	mov	r1, sl
    a84c:	618b      	str	r3, [r1, #24]
    a84e:	6873      	ldr	r3, [r6, #4]
    a850:	3a04      	subs	r2, #4
    a852:	61cb      	str	r3, [r1, #28]
    a854:	1c11      	adds	r1, r2, #0
    a856:	4451      	add	r1, sl
    a858:	3608      	adds	r6, #8
    a85a:	1c32      	adds	r2, r6, #0
    a85c:	ca01      	ldmia	r2!, {r0}
    a85e:	1c0b      	adds	r3, r1, #0
    a860:	c301      	stmia	r3!, {r0}
    a862:	6870      	ldr	r0, [r6, #4]
    a864:	6048      	str	r0, [r1, #4]
    a866:	6852      	ldr	r2, [r2, #4]
    a868:	605a      	str	r2, [r3, #4]
    a86a:	4650      	mov	r0, sl
    a86c:	6843      	ldr	r3, [r0, #4]
    a86e:	4654      	mov	r4, sl
    a870:	e008      	b.n	a884 <_realloc_r+0x14c>
    a872:	2207      	movs	r2, #7
    a874:	4395      	bics	r5, r2
    a876:	0fe8      	lsrs	r0, r5, #31
    a878:	9501      	str	r5, [sp, #4]
    a87a:	9000      	str	r0, [sp, #0]
    a87c:	e778      	b.n	a770 <_realloc_r+0x38>
    a87e:	1c27      	adds	r7, r4, #0
    a880:	3708      	adds	r7, #8
    a882:	4683      	mov	fp, r0
    a884:	4658      	mov	r0, fp
    a886:	1b42      	subs	r2, r0, r5
    a888:	2a0f      	cmp	r2, #15
    a88a:	d825      	bhi.n	a8d8 <_realloc_r+0x1a0>
    a88c:	2201      	movs	r2, #1
    a88e:	4013      	ands	r3, r2
    a890:	4659      	mov	r1, fp
    a892:	430b      	orrs	r3, r1
    a894:	6063      	str	r3, [r4, #4]
    a896:	445c      	add	r4, fp
    a898:	6863      	ldr	r3, [r4, #4]
    a89a:	431a      	orrs	r2, r3
    a89c:	6062      	str	r2, [r4, #4]
    a89e:	4640      	mov	r0, r8
    a8a0:	f7fa fd78 	bl	5394 <__malloc_unlock>
    a8a4:	b005      	add	sp, #20
    a8a6:	1c38      	adds	r0, r7, #0
    a8a8:	bc3c      	pop	{r2, r3, r4, r5}
    a8aa:	4690      	mov	r8, r2
    a8ac:	4699      	mov	r9, r3
    a8ae:	46a2      	mov	sl, r4
    a8b0:	46ab      	mov	fp, r5
    a8b2:	bcf0      	pop	{r4, r5, r6, r7}
    a8b4:	bc02      	pop	{r1}
    a8b6:	4708      	bx	r1
    a8b8:	9803      	ldr	r0, [sp, #12]
    a8ba:	4652      	mov	r2, sl
    a8bc:	4390      	bics	r0, r2
    a8be:	4683      	mov	fp, r0
    a8c0:	9a01      	ldr	r2, [sp, #4]
    a8c2:	44cb      	add	fp, r9
    a8c4:	455a      	cmp	r2, fp
    a8c6:	dd00      	ble.n	a8ca <_realloc_r+0x192>
    a8c8:	e776      	b.n	a7b8 <_realloc_r+0x80>
    a8ca:	68ca      	ldr	r2, [r1, #12]
    a8cc:	6889      	ldr	r1, [r1, #8]
    a8ce:	1c27      	adds	r7, r4, #0
    a8d0:	60ca      	str	r2, [r1, #12]
    a8d2:	6091      	str	r1, [r2, #8]
    a8d4:	3708      	adds	r7, #8
    a8d6:	e7d5      	b.n	a884 <_realloc_r+0x14c>
    a8d8:	2001      	movs	r0, #1
    a8da:	4003      	ands	r3, r0
    a8dc:	1961      	adds	r1, r4, r5
    a8de:	431d      	orrs	r5, r3
    a8e0:	1c03      	adds	r3, r0, #0
    a8e2:	4313      	orrs	r3, r2
    a8e4:	6065      	str	r5, [r4, #4]
    a8e6:	604b      	str	r3, [r1, #4]
    a8e8:	188a      	adds	r2, r1, r2
    a8ea:	6853      	ldr	r3, [r2, #4]
    a8ec:	4318      	orrs	r0, r3
    a8ee:	6050      	str	r0, [r2, #4]
    a8f0:	3108      	adds	r1, #8
    a8f2:	4640      	mov	r0, r8
    a8f4:	f7fa f8b8 	bl	4a68 <_free_r>
    a8f8:	e7d1      	b.n	a89e <_realloc_r+0x166>
    a8fa:	1c39      	adds	r1, r7, #0
    a8fc:	4640      	mov	r0, r8
    a8fe:	f7fa f9fd 	bl	4cfc <_malloc_r>
    a902:	1e07      	subs	r7, r0, #0
    a904:	d0cb      	beq.n	a89e <_realloc_r+0x166>
    a906:	6863      	ldr	r3, [r4, #4]
    a908:	2101      	movs	r1, #1
    a90a:	1c18      	adds	r0, r3, #0
    a90c:	1c3a      	adds	r2, r7, #0
    a90e:	4388      	bics	r0, r1
    a910:	3a08      	subs	r2, #8
    a912:	1821      	adds	r1, r4, r0
    a914:	428a      	cmp	r2, r1
    a916:	d100      	bne.n	a91a <_realloc_r+0x1e2>
    a918:	e108      	b.n	ab2c <_realloc_r+0x3f4>
    a91a:	2304      	movs	r3, #4
    a91c:	425b      	negs	r3, r3
    a91e:	1c1a      	adds	r2, r3, #0
    a920:	444a      	add	r2, r9
    a922:	2a24      	cmp	r2, #36	; 0x24
    a924:	d900      	bls.n	a928 <_realloc_r+0x1f0>
    a926:	e0a4      	b.n	aa72 <_realloc_r+0x33a>
    a928:	1c31      	adds	r1, r6, #0
    a92a:	1c3b      	adds	r3, r7, #0
    a92c:	2a13      	cmp	r2, #19
    a92e:	d919      	bls.n	a964 <_realloc_r+0x22c>
    a930:	1c34      	adds	r4, r6, #0
    a932:	cc08      	ldmia	r4!, {r3}
    a934:	1c38      	adds	r0, r7, #0
    a936:	c008      	stmia	r0!, {r3}
    a938:	6873      	ldr	r3, [r6, #4]
    a93a:	1d21      	adds	r1, r4, #4
    a93c:	607b      	str	r3, [r7, #4]
    a93e:	1d03      	adds	r3, r0, #4
    a940:	2a1b      	cmp	r2, #27
    a942:	d90f      	bls.n	a964 <_realloc_r+0x22c>
    a944:	6864      	ldr	r4, [r4, #4]
    a946:	6044      	str	r4, [r0, #4]
    a948:	1d0c      	adds	r4, r1, #4
    a94a:	6849      	ldr	r1, [r1, #4]
    a94c:	1d18      	adds	r0, r3, #4
    a94e:	6059      	str	r1, [r3, #4]
    a950:	3308      	adds	r3, #8
    a952:	1d21      	adds	r1, r4, #4
    a954:	2a24      	cmp	r2, #36	; 0x24
    a956:	d105      	bne.n	a964 <_realloc_r+0x22c>
    a958:	6862      	ldr	r2, [r4, #4]
    a95a:	6042      	str	r2, [r0, #4]
    a95c:	684a      	ldr	r2, [r1, #4]
    a95e:	3108      	adds	r1, #8
    a960:	605a      	str	r2, [r3, #4]
    a962:	3308      	adds	r3, #8
    a964:	1c08      	adds	r0, r1, #0
    a966:	c810      	ldmia	r0!, {r4}
    a968:	1c1a      	adds	r2, r3, #0
    a96a:	c210      	stmia	r2!, {r4}
    a96c:	6849      	ldr	r1, [r1, #4]
    a96e:	6059      	str	r1, [r3, #4]
    a970:	6843      	ldr	r3, [r0, #4]
    a972:	6053      	str	r3, [r2, #4]
    a974:	4640      	mov	r0, r8
    a976:	1c31      	adds	r1, r6, #0
    a978:	f7fa f876 	bl	4a68 <_free_r>
    a97c:	4640      	mov	r0, r8
    a97e:	f7fa fd09 	bl	5394 <__malloc_unlock>
    a982:	e78f      	b.n	a8a4 <_realloc_r+0x16c>
    a984:	444b      	add	r3, r9
    a986:	9303      	str	r3, [sp, #12]
    a988:	9b01      	ldr	r3, [sp, #4]
    a98a:	9803      	ldr	r0, [sp, #12]
    a98c:	4283      	cmp	r3, r0
    a98e:	dcb4      	bgt.n	a8fa <_realloc_r+0x1c2>
    a990:	4651      	mov	r1, sl
    a992:	68cb      	ldr	r3, [r1, #12]
    a994:	688a      	ldr	r2, [r1, #8]
    a996:	60d3      	str	r3, [r2, #12]
    a998:	609a      	str	r2, [r3, #8]
    a99a:	2304      	movs	r3, #4
    a99c:	2208      	movs	r2, #8
    a99e:	425b      	negs	r3, r3
    a9a0:	1c17      	adds	r7, r2, #0
    a9a2:	1c1a      	adds	r2, r3, #0
    a9a4:	444a      	add	r2, r9
    a9a6:	4457      	add	r7, sl
    a9a8:	2a24      	cmp	r2, #36	; 0x24
    a9aa:	d858      	bhi.n	aa5e <_realloc_r+0x326>
    a9ac:	1c39      	adds	r1, r7, #0
    a9ae:	2a13      	cmp	r2, #19
    a9b0:	d921      	bls.n	a9f6 <_realloc_r+0x2be>
    a9b2:	1c33      	adds	r3, r6, #0
    a9b4:	cb02      	ldmia	r3!, {r1}
    a9b6:	4650      	mov	r0, sl
    a9b8:	6081      	str	r1, [r0, #8]
    a9ba:	6871      	ldr	r1, [r6, #4]
    a9bc:	60c1      	str	r1, [r0, #12]
    a9be:	2010      	movs	r0, #16
    a9c0:	1c01      	adds	r1, r0, #0
    a9c2:	4451      	add	r1, sl
    a9c4:	1d1e      	adds	r6, r3, #4
    a9c6:	2a1b      	cmp	r2, #27
    a9c8:	d915      	bls.n	a9f6 <_realloc_r+0x2be>
    a9ca:	685b      	ldr	r3, [r3, #4]
    a9cc:	4651      	mov	r1, sl
    a9ce:	610b      	str	r3, [r1, #16]
    a9d0:	6871      	ldr	r1, [r6, #4]
    a9d2:	4650      	mov	r0, sl
    a9d4:	6141      	str	r1, [r0, #20]
    a9d6:	2018      	movs	r0, #24
    a9d8:	1c01      	adds	r1, r0, #0
    a9da:	1d33      	adds	r3, r6, #4
    a9dc:	4451      	add	r1, sl
    a9de:	3608      	adds	r6, #8
    a9e0:	2a24      	cmp	r2, #36	; 0x24
    a9e2:	d108      	bne.n	a9f6 <_realloc_r+0x2be>
    a9e4:	685b      	ldr	r3, [r3, #4]
    a9e6:	4651      	mov	r1, sl
    a9e8:	618b      	str	r3, [r1, #24]
    a9ea:	6873      	ldr	r3, [r6, #4]
    a9ec:	3a04      	subs	r2, #4
    a9ee:	61cb      	str	r3, [r1, #28]
    a9f0:	1c11      	adds	r1, r2, #0
    a9f2:	4451      	add	r1, sl
    a9f4:	3608      	adds	r6, #8
    a9f6:	1c32      	adds	r2, r6, #0
    a9f8:	ca01      	ldmia	r2!, {r0}
    a9fa:	1c0b      	adds	r3, r1, #0
    a9fc:	c301      	stmia	r3!, {r0}
    a9fe:	6870      	ldr	r0, [r6, #4]
    aa00:	6048      	str	r0, [r1, #4]
    aa02:	6852      	ldr	r2, [r2, #4]
    aa04:	9903      	ldr	r1, [sp, #12]
    aa06:	605a      	str	r2, [r3, #4]
    aa08:	4650      	mov	r0, sl
    aa0a:	6843      	ldr	r3, [r0, #4]
    aa0c:	468b      	mov	fp, r1
    aa0e:	4654      	mov	r4, sl
    aa10:	e738      	b.n	a884 <_realloc_r+0x14c>
    aa12:	1c11      	adds	r1, r2, #0
    aa14:	f7fa f972 	bl	4cfc <_malloc_r>
    aa18:	1c07      	adds	r7, r0, #0
    aa1a:	e743      	b.n	a8a4 <_realloc_r+0x16c>
    aa1c:	230c      	movs	r3, #12
    aa1e:	4641      	mov	r1, r8
    aa20:	600b      	str	r3, [r1, #0]
    aa22:	2700      	movs	r7, #0
    aa24:	e73e      	b.n	a8a4 <_realloc_r+0x16c>
    aa26:	6850      	ldr	r0, [r2, #4]
    aa28:	1c11      	adds	r1, r2, #0
    aa2a:	4652      	mov	r2, sl
    aa2c:	4390      	bics	r0, r2
    aa2e:	4682      	mov	sl, r0
    aa30:	2210      	movs	r2, #16
    aa32:	44ca      	add	sl, r9
    aa34:	1952      	adds	r2, r2, r5
    aa36:	4592      	cmp	sl, r2
    aa38:	da00      	bge.n	aa3c <_realloc_r+0x304>
    aa3a:	e6bd      	b.n	a7b8 <_realloc_r+0x80>
    aa3c:	4b0f      	ldr	r3, [pc, #60]	; (aa7c <_realloc_r+0x344>)
    aa3e:	1962      	adds	r2, r4, r5
    aa40:	4650      	mov	r0, sl
    aa42:	609a      	str	r2, [r3, #8]
    aa44:	1b41      	subs	r1, r0, r5
    aa46:	2301      	movs	r3, #1
    aa48:	4319      	orrs	r1, r3
    aa4a:	6051      	str	r1, [r2, #4]
    aa4c:	6862      	ldr	r2, [r4, #4]
    aa4e:	4013      	ands	r3, r2
    aa50:	431d      	orrs	r5, r3
    aa52:	6065      	str	r5, [r4, #4]
    aa54:	4640      	mov	r0, r8
    aa56:	f7fa fc9d 	bl	5394 <__malloc_unlock>
    aa5a:	1c37      	adds	r7, r6, #0
    aa5c:	e722      	b.n	a8a4 <_realloc_r+0x16c>
    aa5e:	1c38      	adds	r0, r7, #0
    aa60:	1c31      	adds	r1, r6, #0
    aa62:	f7ff f8d3 	bl	9c0c <memmove>
    aa66:	9803      	ldr	r0, [sp, #12]
    aa68:	4652      	mov	r2, sl
    aa6a:	6853      	ldr	r3, [r2, #4]
    aa6c:	4683      	mov	fp, r0
    aa6e:	4654      	mov	r4, sl
    aa70:	e708      	b.n	a884 <_realloc_r+0x14c>
    aa72:	1c38      	adds	r0, r7, #0
    aa74:	1c31      	adds	r1, r6, #0
    aa76:	f7ff f8c9 	bl	9c0c <memmove>
    aa7a:	e77b      	b.n	a974 <_realloc_r+0x23c>
    aa7c:	40000430 	.word	0x40000430
    aa80:	444b      	add	r3, r9
    aa82:	9303      	str	r3, [sp, #12]
    aa84:	181b      	adds	r3, r3, r0
    aa86:	469b      	mov	fp, r3
    aa88:	1c2b      	adds	r3, r5, #0
    aa8a:	3310      	adds	r3, #16
    aa8c:	459b      	cmp	fp, r3
    aa8e:	da00      	bge.n	aa92 <_realloc_r+0x35a>
    aa90:	e77a      	b.n	a988 <_realloc_r+0x250>
    aa92:	4652      	mov	r2, sl
    aa94:	68d3      	ldr	r3, [r2, #12]
    aa96:	2004      	movs	r0, #4
    aa98:	6892      	ldr	r2, [r2, #8]
    aa9a:	4240      	negs	r0, r0
    aa9c:	60d3      	str	r3, [r2, #12]
    aa9e:	609a      	str	r2, [r3, #8]
    aaa0:	2308      	movs	r3, #8
    aaa2:	1c02      	adds	r2, r0, #0
    aaa4:	1c1f      	adds	r7, r3, #0
    aaa6:	444a      	add	r2, r9
    aaa8:	4457      	add	r7, sl
    aaaa:	2a24      	cmp	r2, #36	; 0x24
    aaac:	d84e      	bhi.n	ab4c <_realloc_r+0x414>
    aaae:	1c39      	adds	r1, r7, #0
    aab0:	2a13      	cmp	r2, #19
    aab2:	d921      	bls.n	aaf8 <_realloc_r+0x3c0>
    aab4:	1c33      	adds	r3, r6, #0
    aab6:	cb02      	ldmia	r3!, {r1}
    aab8:	4650      	mov	r0, sl
    aaba:	6081      	str	r1, [r0, #8]
    aabc:	6871      	ldr	r1, [r6, #4]
    aabe:	60c1      	str	r1, [r0, #12]
    aac0:	2010      	movs	r0, #16
    aac2:	1c01      	adds	r1, r0, #0
    aac4:	4451      	add	r1, sl
    aac6:	1d1e      	adds	r6, r3, #4
    aac8:	2a1b      	cmp	r2, #27
    aaca:	d915      	bls.n	aaf8 <_realloc_r+0x3c0>
    aacc:	685b      	ldr	r3, [r3, #4]
    aace:	4651      	mov	r1, sl
    aad0:	610b      	str	r3, [r1, #16]
    aad2:	6871      	ldr	r1, [r6, #4]
    aad4:	4650      	mov	r0, sl
    aad6:	6141      	str	r1, [r0, #20]
    aad8:	2018      	movs	r0, #24
    aada:	1c01      	adds	r1, r0, #0
    aadc:	1d33      	adds	r3, r6, #4
    aade:	4451      	add	r1, sl
    aae0:	3608      	adds	r6, #8
    aae2:	2a24      	cmp	r2, #36	; 0x24
    aae4:	d108      	bne.n	aaf8 <_realloc_r+0x3c0>
    aae6:	685b      	ldr	r3, [r3, #4]
    aae8:	4651      	mov	r1, sl
    aaea:	618b      	str	r3, [r1, #24]
    aaec:	6873      	ldr	r3, [r6, #4]
    aaee:	3a04      	subs	r2, #4
    aaf0:	61cb      	str	r3, [r1, #28]
    aaf2:	1c11      	adds	r1, r2, #0
    aaf4:	4451      	add	r1, sl
    aaf6:	3608      	adds	r6, #8
    aaf8:	1c32      	adds	r2, r6, #0
    aafa:	ca01      	ldmia	r2!, {r0}
    aafc:	1c0b      	adds	r3, r1, #0
    aafe:	c301      	stmia	r3!, {r0}
    ab00:	6870      	ldr	r0, [r6, #4]
    ab02:	6048      	str	r0, [r1, #4]
    ab04:	6852      	ldr	r2, [r2, #4]
    ab06:	605a      	str	r2, [r3, #4]
    ab08:	1c2a      	adds	r2, r5, #0
    ab0a:	4b13      	ldr	r3, [pc, #76]	; (ab58 <_realloc_r+0x420>)
    ab0c:	4452      	add	r2, sl
    ab0e:	4659      	mov	r1, fp
    ab10:	1b48      	subs	r0, r1, r5
    ab12:	609a      	str	r2, [r3, #8]
    ab14:	2301      	movs	r3, #1
    ab16:	4318      	orrs	r0, r3
    ab18:	6050      	str	r0, [r2, #4]
    ab1a:	4650      	mov	r0, sl
    ab1c:	6842      	ldr	r2, [r0, #4]
    ab1e:	4013      	ands	r3, r2
    ab20:	431d      	orrs	r5, r3
    ab22:	6045      	str	r5, [r0, #4]
    ab24:	4640      	mov	r0, r8
    ab26:	f7fa fc35 	bl	5394 <__malloc_unlock>
    ab2a:	e6bb      	b.n	a8a4 <_realloc_r+0x16c>
    ab2c:	6852      	ldr	r2, [r2, #4]
    ab2e:	2103      	movs	r1, #3
    ab30:	438a      	bics	r2, r1
    ab32:	4693      	mov	fp, r2
    ab34:	1c27      	adds	r7, r4, #0
    ab36:	44cb      	add	fp, r9
    ab38:	3708      	adds	r7, #8
    ab3a:	e6a3      	b.n	a884 <_realloc_r+0x14c>
    ab3c:	1c31      	adds	r1, r6, #0
    ab3e:	1c38      	adds	r0, r7, #0
    ab40:	f7ff f864 	bl	9c0c <memmove>
    ab44:	4651      	mov	r1, sl
    ab46:	684b      	ldr	r3, [r1, #4]
    ab48:	4654      	mov	r4, sl
    ab4a:	e69b      	b.n	a884 <_realloc_r+0x14c>
    ab4c:	1c38      	adds	r0, r7, #0
    ab4e:	1c31      	adds	r1, r6, #0
    ab50:	f7ff f85c 	bl	9c0c <memmove>
    ab54:	e7d8      	b.n	ab08 <_realloc_r+0x3d0>
    ab56:	46c0      	nop			; (mov r8, r8)
    ab58:	40000430 	.word	0x40000430

0000ab5c <__fpclassifyd>:
    ab5c:	b530      	push	{r4, r5, lr}
    ab5e:	1c02      	adds	r2, r0, #0
    ab60:	1c0b      	adds	r3, r1, #0
    ab62:	1c11      	adds	r1, r2, #0
    ab64:	2002      	movs	r0, #2
    ab66:	4319      	orrs	r1, r3
    ab68:	d028      	beq.n	abbc <__fpclassifyd+0x60>
    ab6a:	4251      	negs	r1, r2
    ab6c:	414a      	adcs	r2, r1
    ab6e:	2a00      	cmp	r2, #0
    ab70:	d127      	bne.n	abc2 <__fpclassifyd+0x66>
    ab72:	4d1c      	ldr	r5, [pc, #112]	; (abe4 <__fpclassifyd+0x88>)
    ab74:	481c      	ldr	r0, [pc, #112]	; (abe8 <__fpclassifyd+0x8c>)
    ab76:	195c      	adds	r4, r3, r5
    ab78:	2100      	movs	r1, #0
    ab7a:	42a0      	cmp	r0, r4
    ab7c:	4149      	adcs	r1, r1
    ab7e:	2900      	cmp	r1, #0
    ab80:	d12c      	bne.n	abdc <__fpclassifyd+0x80>
    ab82:	4d1a      	ldr	r5, [pc, #104]	; (abec <__fpclassifyd+0x90>)
    ab84:	195c      	adds	r4, r3, r5
    ab86:	42a0      	cmp	r0, r4
    ab88:	4149      	adcs	r1, r1
    ab8a:	2900      	cmp	r1, #0
    ab8c:	d126      	bne.n	abdc <__fpclassifyd+0x80>
    ab8e:	2080      	movs	r0, #128	; 0x80
    ab90:	0600      	lsls	r0, r0, #24
    ab92:	181c      	adds	r4, r3, r0
    ab94:	4816      	ldr	r0, [pc, #88]	; (abf0 <__fpclassifyd+0x94>)
    ab96:	42a0      	cmp	r0, r4
    ab98:	4149      	adcs	r1, r1
    ab9a:	2900      	cmp	r1, #0
    ab9c:	d120      	bne.n	abe0 <__fpclassifyd+0x84>
    ab9e:	4298      	cmp	r0, r3
    aba0:	4149      	adcs	r1, r1
    aba2:	2900      	cmp	r1, #0
    aba4:	d11c      	bne.n	abe0 <__fpclassifyd+0x84>
    aba6:	2180      	movs	r1, #128	; 0x80
    aba8:	4c12      	ldr	r4, [pc, #72]	; (abf4 <__fpclassifyd+0x98>)
    abaa:	0349      	lsls	r1, r1, #13
    abac:	1858      	adds	r0, r3, r1
    abae:	191b      	adds	r3, r3, r4
    abb0:	4241      	negs	r1, r0
    abb2:	4148      	adcs	r0, r1
    abb4:	4259      	negs	r1, r3
    abb6:	414b      	adcs	r3, r1
    abb8:	4318      	orrs	r0, r3
    abba:	4010      	ands	r0, r2
    abbc:	bc30      	pop	{r4, r5}
    abbe:	bc02      	pop	{r1}
    abc0:	4708      	bx	r1
    abc2:	2480      	movs	r4, #128	; 0x80
    abc4:	0624      	lsls	r4, r4, #24
    abc6:	1919      	adds	r1, r3, r4
    abc8:	2900      	cmp	r1, #0
    abca:	d0f7      	beq.n	abbc <__fpclassifyd+0x60>
    abcc:	4d05      	ldr	r5, [pc, #20]	; (abe4 <__fpclassifyd+0x88>)
    abce:	4806      	ldr	r0, [pc, #24]	; (abe8 <__fpclassifyd+0x8c>)
    abd0:	195c      	adds	r4, r3, r5
    abd2:	2100      	movs	r1, #0
    abd4:	42a0      	cmp	r0, r4
    abd6:	4149      	adcs	r1, r1
    abd8:	2900      	cmp	r1, #0
    abda:	d0d2      	beq.n	ab82 <__fpclassifyd+0x26>
    abdc:	2004      	movs	r0, #4
    abde:	e7ed      	b.n	abbc <__fpclassifyd+0x60>
    abe0:	2003      	movs	r0, #3
    abe2:	e7eb      	b.n	abbc <__fpclassifyd+0x60>
    abe4:	7ff00000 	.word	0x7ff00000
    abe8:	7fdfffff 	.word	0x7fdfffff
    abec:	fff00000 	.word	0xfff00000
    abf0:	000fffff 	.word	0x000fffff
    abf4:	80100000 	.word	0x80100000

0000abf8 <strcmp>:
    abf8:	7802      	ldrb	r2, [r0, #0]
    abfa:	780b      	ldrb	r3, [r1, #0]
    abfc:	3001      	adds	r0, #1
    abfe:	3101      	adds	r1, #1
    ac00:	2a00      	cmp	r2, #0
    ac02:	d001      	beq.n	ac08 <strcmp+0x10>
    ac04:	429a      	cmp	r2, r3
    ac06:	d0f7      	beq.n	abf8 <strcmp>
    ac08:	1ad0      	subs	r0, r2, r3
    ac0a:	4770      	bx	lr

0000ac0c <__ssprint_r>:
    ac0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac0e:	465f      	mov	r7, fp
    ac10:	4656      	mov	r6, sl
    ac12:	464d      	mov	r5, r9
    ac14:	4644      	mov	r4, r8
    ac16:	b4f0      	push	{r4, r5, r6, r7}
    ac18:	6894      	ldr	r4, [r2, #8]
    ac1a:	b083      	sub	sp, #12
    ac1c:	9001      	str	r0, [sp, #4]
    ac1e:	1c0d      	adds	r5, r1, #0
    ac20:	1c16      	adds	r6, r2, #0
    ac22:	6817      	ldr	r7, [r2, #0]
    ac24:	2c00      	cmp	r4, #0
    ac26:	d076      	beq.n	ad16 <__ssprint_r+0x10a>
    ac28:	6808      	ldr	r0, [r1, #0]
    ac2a:	2100      	movs	r1, #0
    ac2c:	1c0c      	adds	r4, r1, #0
    ac2e:	468a      	mov	sl, r1
    ac30:	68ab      	ldr	r3, [r5, #8]
    ac32:	2c00      	cmp	r4, #0
    ac34:	d04a      	beq.n	accc <__ssprint_r+0xc0>
    ac36:	4698      	mov	r8, r3
    ac38:	4699      	mov	r9, r3
    ac3a:	4544      	cmp	r4, r8
    ac3c:	d350      	bcc.n	ace0 <__ssprint_r+0xd4>
    ac3e:	2190      	movs	r1, #144	; 0x90
    ac40:	89ab      	ldrh	r3, [r5, #12]
    ac42:	00c9      	lsls	r1, r1, #3
    ac44:	420b      	tst	r3, r1
    ac46:	d031      	beq.n	acac <__ssprint_r+0xa0>
    ac48:	6929      	ldr	r1, [r5, #16]
    ac4a:	696a      	ldr	r2, [r5, #20]
    ac4c:	1a40      	subs	r0, r0, r1
    ac4e:	4683      	mov	fp, r0
    ac50:	0050      	lsls	r0, r2, #1
    ac52:	1882      	adds	r2, r0, r2
    ac54:	0fd0      	lsrs	r0, r2, #31
    ac56:	1882      	adds	r2, r0, r2
    ac58:	1052      	asrs	r2, r2, #1
    ac5a:	1c60      	adds	r0, r4, #1
    ac5c:	4691      	mov	r9, r2
    ac5e:	4458      	add	r0, fp
    ac60:	4581      	cmp	r9, r0
    ac62:	d201      	bcs.n	ac68 <__ssprint_r+0x5c>
    ac64:	4681      	mov	r9, r0
    ac66:	1c02      	adds	r2, r0, #0
    ac68:	2080      	movs	r0, #128	; 0x80
    ac6a:	00c0      	lsls	r0, r0, #3
    ac6c:	4203      	tst	r3, r0
    ac6e:	d03a      	beq.n	ace6 <__ssprint_r+0xda>
    ac70:	1c11      	adds	r1, r2, #0
    ac72:	9801      	ldr	r0, [sp, #4]
    ac74:	f7fa f842 	bl	4cfc <_malloc_r>
    ac78:	2100      	movs	r1, #0
    ac7a:	4680      	mov	r8, r0
    ac7c:	4588      	cmp	r8, r1
    ac7e:	d03d      	beq.n	acfc <__ssprint_r+0xf0>
    ac80:	465a      	mov	r2, fp
    ac82:	6929      	ldr	r1, [r5, #16]
    ac84:	f7fa fac0 	bl	5208 <memcpy>
    ac88:	89ab      	ldrh	r3, [r5, #12]
    ac8a:	4828      	ldr	r0, [pc, #160]	; (ad2c <__ssprint_r+0x120>)
    ac8c:	2280      	movs	r2, #128	; 0x80
    ac8e:	4003      	ands	r3, r0
    ac90:	4313      	orrs	r3, r2
    ac92:	81ab      	strh	r3, [r5, #12]
    ac94:	4643      	mov	r3, r8
    ac96:	464a      	mov	r2, r9
    ac98:	4640      	mov	r0, r8
    ac9a:	4659      	mov	r1, fp
    ac9c:	612b      	str	r3, [r5, #16]
    ac9e:	4458      	add	r0, fp
    aca0:	1a53      	subs	r3, r2, r1
    aca2:	6028      	str	r0, [r5, #0]
    aca4:	616a      	str	r2, [r5, #20]
    aca6:	60ab      	str	r3, [r5, #8]
    aca8:	46a0      	mov	r8, r4
    acaa:	46a1      	mov	r9, r4
    acac:	464a      	mov	r2, r9
    acae:	4651      	mov	r1, sl
    acb0:	f7fe ffac 	bl	9c0c <memmove>
    acb4:	68ab      	ldr	r3, [r5, #8]
    acb6:	4642      	mov	r2, r8
    acb8:	6828      	ldr	r0, [r5, #0]
    acba:	1a9b      	subs	r3, r3, r2
    acbc:	68b2      	ldr	r2, [r6, #8]
    acbe:	4448      	add	r0, r9
    acc0:	1b14      	subs	r4, r2, r4
    acc2:	60ab      	str	r3, [r5, #8]
    acc4:	6028      	str	r0, [r5, #0]
    acc6:	60b4      	str	r4, [r6, #8]
    acc8:	2c00      	cmp	r4, #0
    acca:	d024      	beq.n	ad16 <__ssprint_r+0x10a>
    accc:	683a      	ldr	r2, [r7, #0]
    acce:	687c      	ldr	r4, [r7, #4]
    acd0:	4692      	mov	sl, r2
    acd2:	3708      	adds	r7, #8
    acd4:	2c00      	cmp	r4, #0
    acd6:	d0f9      	beq.n	accc <__ssprint_r+0xc0>
    acd8:	4698      	mov	r8, r3
    acda:	4699      	mov	r9, r3
    acdc:	4544      	cmp	r4, r8
    acde:	d2ae      	bcs.n	ac3e <__ssprint_r+0x32>
    ace0:	46a0      	mov	r8, r4
    ace2:	46a1      	mov	r9, r4
    ace4:	e7e2      	b.n	acac <__ssprint_r+0xa0>
    ace6:	9801      	ldr	r0, [sp, #4]
    ace8:	f7ff fd26 	bl	a738 <_realloc_r>
    acec:	2100      	movs	r1, #0
    acee:	4680      	mov	r8, r0
    acf0:	4588      	cmp	r8, r1
    acf2:	d1cf      	bne.n	ac94 <__ssprint_r+0x88>
    acf4:	6929      	ldr	r1, [r5, #16]
    acf6:	9801      	ldr	r0, [sp, #4]
    acf8:	f7f9 feb6 	bl	4a68 <_free_r>
    acfc:	9a01      	ldr	r2, [sp, #4]
    acfe:	230c      	movs	r3, #12
    ad00:	6013      	str	r3, [r2, #0]
    ad02:	89ab      	ldrh	r3, [r5, #12]
    ad04:	2240      	movs	r2, #64	; 0x40
    ad06:	4313      	orrs	r3, r2
    ad08:	81ab      	strh	r3, [r5, #12]
    ad0a:	2001      	movs	r0, #1
    ad0c:	2300      	movs	r3, #0
    ad0e:	60b3      	str	r3, [r6, #8]
    ad10:	6073      	str	r3, [r6, #4]
    ad12:	4240      	negs	r0, r0
    ad14:	e001      	b.n	ad1a <__ssprint_r+0x10e>
    ad16:	6074      	str	r4, [r6, #4]
    ad18:	1c20      	adds	r0, r4, #0
    ad1a:	b003      	add	sp, #12
    ad1c:	bc3c      	pop	{r2, r3, r4, r5}
    ad1e:	4690      	mov	r8, r2
    ad20:	4699      	mov	r9, r3
    ad22:	46a2      	mov	sl, r4
    ad24:	46ab      	mov	fp, r5
    ad26:	bcf0      	pop	{r4, r5, r6, r7}
    ad28:	bc02      	pop	{r1}
    ad2a:	4708      	bx	r1
    ad2c:	fffffb7f 	.word	0xfffffb7f

0000ad30 <_svfiprintf_r>:
    ad30:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad32:	465f      	mov	r7, fp
    ad34:	4656      	mov	r6, sl
    ad36:	464d      	mov	r5, r9
    ad38:	4644      	mov	r4, r8
    ad3a:	b4f0      	push	{r4, r5, r6, r7}
    ad3c:	b0ad      	sub	sp, #180	; 0xb4
    ad3e:	9002      	str	r0, [sp, #8]
    ad40:	9307      	str	r3, [sp, #28]
    ad42:	898b      	ldrh	r3, [r1, #12]
    ad44:	468b      	mov	fp, r1
    ad46:	1c15      	adds	r5, r2, #0
    ad48:	0618      	lsls	r0, r3, #24
    ad4a:	d504      	bpl.n	ad56 <_svfiprintf_r+0x26>
    ad4c:	690b      	ldr	r3, [r1, #16]
    ad4e:	2b00      	cmp	r3, #0
    ad50:	d101      	bne.n	ad56 <_svfiprintf_r+0x26>
    ad52:	f000 fd30 	bl	b7b6 <_svfiprintf_r+0xa86>
    ad56:	2300      	movs	r3, #0
    ad58:	ac28      	add	r4, sp, #160	; 0xa0
    ad5a:	a90e      	add	r1, sp, #56	; 0x38
    ad5c:	46aa      	mov	sl, r5
    ad5e:	9128      	str	r1, [sp, #160]	; 0xa0
    ad60:	60a3      	str	r3, [r4, #8]
    ad62:	6063      	str	r3, [r4, #4]
    ad64:	930c      	str	r3, [sp, #48]	; 0x30
    ad66:	9305      	str	r3, [sp, #20]
    ad68:	1c0d      	adds	r5, r1, #0
    ad6a:	4657      	mov	r7, sl
    ad6c:	783b      	ldrb	r3, [r7, #0]
    ad6e:	2b00      	cmp	r3, #0
    ad70:	d100      	bne.n	ad74 <_svfiprintf_r+0x44>
    ad72:	e32a      	b.n	b3ca <_svfiprintf_r+0x69a>
    ad74:	2b25      	cmp	r3, #37	; 0x25
    ad76:	d100      	bne.n	ad7a <_svfiprintf_r+0x4a>
    ad78:	e327      	b.n	b3ca <_svfiprintf_r+0x69a>
    ad7a:	1c3e      	adds	r6, r7, #0
    ad7c:	e001      	b.n	ad82 <_svfiprintf_r+0x52>
    ad7e:	2b00      	cmp	r3, #0
    ad80:	d003      	beq.n	ad8a <_svfiprintf_r+0x5a>
    ad82:	3601      	adds	r6, #1
    ad84:	7833      	ldrb	r3, [r6, #0]
    ad86:	2b25      	cmp	r3, #37	; 0x25
    ad88:	d1f9      	bne.n	ad7e <_svfiprintf_r+0x4e>
    ad8a:	1bf2      	subs	r2, r6, r7
    ad8c:	4690      	mov	r8, r2
    ad8e:	2000      	movs	r0, #0
    ad90:	4580      	cmp	r8, r0
    ad92:	d010      	beq.n	adb6 <_svfiprintf_r+0x86>
    ad94:	68a3      	ldr	r3, [r4, #8]
    ad96:	4443      	add	r3, r8
    ad98:	602f      	str	r7, [r5, #0]
    ad9a:	606a      	str	r2, [r5, #4]
    ad9c:	60a3      	str	r3, [r4, #8]
    ad9e:	6863      	ldr	r3, [r4, #4]
    ada0:	3301      	adds	r3, #1
    ada2:	6063      	str	r3, [r4, #4]
    ada4:	3508      	adds	r5, #8
    ada6:	2b07      	cmp	r3, #7
    ada8:	dd00      	ble.n	adac <_svfiprintf_r+0x7c>
    adaa:	e39f      	b.n	b4ec <_svfiprintf_r+0x7bc>
    adac:	9905      	ldr	r1, [sp, #20]
    adae:	1c0a      	adds	r2, r1, #0
    adb0:	4442      	add	r2, r8
    adb2:	9205      	str	r2, [sp, #20]
    adb4:	7833      	ldrb	r3, [r6, #0]
    adb6:	2b00      	cmp	r3, #0
    adb8:	d100      	bne.n	adbc <_svfiprintf_r+0x8c>
    adba:	e31a      	b.n	b3f2 <_svfiprintf_r+0x6c2>
    adbc:	23af      	movs	r3, #175	; 0xaf
    adbe:	2000      	movs	r0, #0
    adc0:	446b      	add	r3, sp
    adc2:	7018      	strb	r0, [r3, #0]
    adc4:	2100      	movs	r1, #0
    adc6:	2240      	movs	r2, #64	; 0x40
    adc8:	7873      	ldrb	r3, [r6, #1]
    adca:	1c77      	adds	r7, r6, #1
    adcc:	9104      	str	r1, [sp, #16]
    adce:	2601      	movs	r6, #1
    add0:	9100      	str	r1, [sp, #0]
    add2:	4690      	mov	r8, r2
    add4:	2080      	movs	r0, #128	; 0x80
    add6:	3a15      	subs	r2, #21
    add8:	49cf      	ldr	r1, [pc, #828]	; (b118 <_svfiprintf_r+0x3e8>)
    adda:	4276      	negs	r6, r6
    addc:	4684      	mov	ip, r0
    adde:	4692      	mov	sl, r2
    ade0:	3701      	adds	r7, #1
    ade2:	1c1a      	adds	r2, r3, #0
    ade4:	3a20      	subs	r2, #32
    ade6:	2a58      	cmp	r2, #88	; 0x58
    ade8:	d964      	bls.n	aeb4 <_svfiprintf_r+0x184>
    adea:	2b00      	cmp	r3, #0
    adec:	d100      	bne.n	adf0 <_svfiprintf_r+0xc0>
    adee:	e300      	b.n	b3f2 <_svfiprintf_r+0x6c2>
    adf0:	aa1e      	add	r2, sp, #120	; 0x78
    adf2:	7013      	strb	r3, [r2, #0]
    adf4:	23af      	movs	r3, #175	; 0xaf
    adf6:	2101      	movs	r1, #1
    adf8:	2000      	movs	r0, #0
    adfa:	446b      	add	r3, sp
    adfc:	7018      	strb	r0, [r3, #0]
    adfe:	9101      	str	r1, [sp, #4]
    ae00:	9103      	str	r1, [sp, #12]
    ae02:	920b      	str	r2, [sp, #44]	; 0x2c
    ae04:	2100      	movs	r1, #0
    ae06:	9106      	str	r1, [sp, #24]
    ae08:	9900      	ldr	r1, [sp, #0]
    ae0a:	2302      	movs	r3, #2
    ae0c:	4019      	ands	r1, r3
    ae0e:	4689      	mov	r9, r1
    ae10:	d002      	beq.n	ae18 <_svfiprintf_r+0xe8>
    ae12:	9a01      	ldr	r2, [sp, #4]
    ae14:	18d2      	adds	r2, r2, r3
    ae16:	9201      	str	r2, [sp, #4]
    ae18:	9800      	ldr	r0, [sp, #0]
    ae1a:	2384      	movs	r3, #132	; 0x84
    ae1c:	4018      	ands	r0, r3
    ae1e:	900d      	str	r0, [sp, #52]	; 0x34
    ae20:	d000      	beq.n	ae24 <_svfiprintf_r+0xf4>
    ae22:	e201      	b.n	b228 <_svfiprintf_r+0x4f8>
    ae24:	9904      	ldr	r1, [sp, #16]
    ae26:	9a01      	ldr	r2, [sp, #4]
    ae28:	1a8e      	subs	r6, r1, r2
    ae2a:	2e00      	cmp	r6, #0
    ae2c:	dc00      	bgt.n	ae30 <_svfiprintf_r+0x100>
    ae2e:	e1fb      	b.n	b228 <_svfiprintf_r+0x4f8>
    ae30:	2e10      	cmp	r6, #16
    ae32:	dc01      	bgt.n	ae38 <_svfiprintf_r+0x108>
    ae34:	f000 fcd5 	bl	b7e2 <_svfiprintf_r+0xab2>
    ae38:	4bb8      	ldr	r3, [pc, #736]	; (b11c <_svfiprintf_r+0x3ec>)
    ae3a:	469a      	mov	sl, r3
    ae3c:	4652      	mov	r2, sl
    ae3e:	2010      	movs	r0, #16
    ae40:	1c2b      	adds	r3, r5, #0
    ae42:	46ba      	mov	sl, r7
    ae44:	4680      	mov	r8, r0
    ae46:	465d      	mov	r5, fp
    ae48:	1c17      	adds	r7, r2, #0
    ae4a:	e005      	b.n	ae58 <_svfiprintf_r+0x128>
    ae4c:	3308      	adds	r3, #8
    ae4e:	1c1a      	adds	r2, r3, #0
    ae50:	3e10      	subs	r6, #16
    ae52:	3208      	adds	r2, #8
    ae54:	2e10      	cmp	r6, #16
    ae56:	dd18      	ble.n	ae8a <_svfiprintf_r+0x15a>
    ae58:	4642      	mov	r2, r8
    ae5a:	605a      	str	r2, [r3, #4]
    ae5c:	68a2      	ldr	r2, [r4, #8]
    ae5e:	3210      	adds	r2, #16
    ae60:	601f      	str	r7, [r3, #0]
    ae62:	60a2      	str	r2, [r4, #8]
    ae64:	6862      	ldr	r2, [r4, #4]
    ae66:	3201      	adds	r2, #1
    ae68:	6062      	str	r2, [r4, #4]
    ae6a:	2a07      	cmp	r2, #7
    ae6c:	ddee      	ble.n	ae4c <_svfiprintf_r+0x11c>
    ae6e:	9802      	ldr	r0, [sp, #8]
    ae70:	1c29      	adds	r1, r5, #0
    ae72:	1c22      	adds	r2, r4, #0
    ae74:	f7ff feca 	bl	ac0c <__ssprint_r>
    ae78:	2800      	cmp	r0, #0
    ae7a:	d001      	beq.n	ae80 <_svfiprintf_r+0x150>
    ae7c:	f000 fbf0 	bl	b660 <_svfiprintf_r+0x930>
    ae80:	3e10      	subs	r6, #16
    ae82:	aa10      	add	r2, sp, #64	; 0x40
    ae84:	ab0e      	add	r3, sp, #56	; 0x38
    ae86:	2e10      	cmp	r6, #16
    ae88:	dce6      	bgt.n	ae58 <_svfiprintf_r+0x128>
    ae8a:	46ab      	mov	fp, r5
    ae8c:	1c1d      	adds	r5, r3, #0
    ae8e:	1c3b      	adds	r3, r7, #0
    ae90:	4657      	mov	r7, sl
    ae92:	469a      	mov	sl, r3
    ae94:	4653      	mov	r3, sl
    ae96:	602b      	str	r3, [r5, #0]
    ae98:	68a3      	ldr	r3, [r4, #8]
    ae9a:	18f3      	adds	r3, r6, r3
    ae9c:	606e      	str	r6, [r5, #4]
    ae9e:	60a3      	str	r3, [r4, #8]
    aea0:	6863      	ldr	r3, [r4, #4]
    aea2:	3301      	adds	r3, #1
    aea4:	6063      	str	r3, [r4, #4]
    aea6:	2b07      	cmp	r3, #7
    aea8:	dd00      	ble.n	aeac <_svfiprintf_r+0x17c>
    aeaa:	e3ce      	b.n	b64a <_svfiprintf_r+0x91a>
    aeac:	1c13      	adds	r3, r2, #0
    aeae:	3308      	adds	r3, #8
    aeb0:	1c15      	adds	r5, r2, #0
    aeb2:	e1bb      	b.n	b22c <_svfiprintf_r+0x4fc>
    aeb4:	0092      	lsls	r2, r2, #2
    aeb6:	588a      	ldr	r2, [r1, r2]
    aeb8:	4697      	mov	pc, r2
    aeba:	9800      	ldr	r0, [sp, #0]
    aebc:	2310      	movs	r3, #16
    aebe:	4318      	orrs	r0, r3
    aec0:	9000      	str	r0, [sp, #0]
    aec2:	9900      	ldr	r1, [sp, #0]
    aec4:	2220      	movs	r2, #32
    aec6:	400a      	ands	r2, r1
    aec8:	d100      	bne.n	aecc <_svfiprintf_r+0x19c>
    aeca:	e385      	b.n	b5d8 <_svfiprintf_r+0x8a8>
    aecc:	9b07      	ldr	r3, [sp, #28]
    aece:	2207      	movs	r2, #7
    aed0:	3307      	adds	r3, #7
    aed2:	4393      	bics	r3, r2
    aed4:	6818      	ldr	r0, [r3, #0]
    aed6:	6859      	ldr	r1, [r3, #4]
    aed8:	3201      	adds	r2, #1
    aeda:	18d2      	adds	r2, r2, r3
    aedc:	9008      	str	r0, [sp, #32]
    aede:	9109      	str	r1, [sp, #36]	; 0x24
    aee0:	9207      	str	r2, [sp, #28]
    aee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aee4:	1c01      	adds	r1, r0, #0
    aee6:	4311      	orrs	r1, r2
    aee8:	1e4b      	subs	r3, r1, #1
    aeea:	4199      	sbcs	r1, r3
    aeec:	2301      	movs	r3, #1
    aeee:	22af      	movs	r2, #175	; 0xaf
    aef0:	2000      	movs	r0, #0
    aef2:	446a      	add	r2, sp
    aef4:	7010      	strb	r0, [r2, #0]
    aef6:	2e00      	cmp	r6, #0
    aef8:	db03      	blt.n	af02 <_svfiprintf_r+0x1d2>
    aefa:	9800      	ldr	r0, [sp, #0]
    aefc:	2280      	movs	r2, #128	; 0x80
    aefe:	4390      	bics	r0, r2
    af00:	9000      	str	r0, [sp, #0]
    af02:	2e00      	cmp	r6, #0
    af04:	d102      	bne.n	af0c <_svfiprintf_r+0x1dc>
    af06:	2900      	cmp	r1, #0
    af08:	d100      	bne.n	af0c <_svfiprintf_r+0x1dc>
    af0a:	e261      	b.n	b3d0 <_svfiprintf_r+0x6a0>
    af0c:	2b01      	cmp	r3, #1
    af0e:	d100      	bne.n	af12 <_svfiprintf_r+0x1e2>
    af10:	e31a      	b.n	b548 <_svfiprintf_r+0x818>
    af12:	2b02      	cmp	r3, #2
    af14:	d100      	bne.n	af18 <_svfiprintf_r+0x1e8>
    af16:	e340      	b.n	b59a <_svfiprintf_r+0x86a>
    af18:	2107      	movs	r1, #7
    af1a:	940b      	str	r4, [sp, #44]	; 0x2c
    af1c:	9701      	str	r7, [sp, #4]
    af1e:	9a08      	ldr	r2, [sp, #32]
    af20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af22:	4688      	mov	r8, r1
    af24:	46ac      	mov	ip, r5
    af26:	1c21      	adds	r1, r4, #0
    af28:	0758      	lsls	r0, r3, #29
    af2a:	4682      	mov	sl, r0
    af2c:	4645      	mov	r5, r8
    af2e:	08d0      	lsrs	r0, r2, #3
    af30:	4657      	mov	r7, sl
    af32:	4307      	orrs	r7, r0
    af34:	4015      	ands	r5, r2
    af36:	08d8      	lsrs	r0, r3, #3
    af38:	3901      	subs	r1, #1
    af3a:	3530      	adds	r5, #48	; 0x30
    af3c:	1c03      	adds	r3, r0, #0
    af3e:	1c38      	adds	r0, r7, #0
    af40:	700d      	strb	r5, [r1, #0]
    af42:	1c3a      	adds	r2, r7, #0
    af44:	4318      	orrs	r0, r3
    af46:	d1ef      	bne.n	af28 <_svfiprintf_r+0x1f8>
    af48:	910b      	str	r1, [sp, #44]	; 0x2c
    af4a:	9900      	ldr	r1, [sp, #0]
    af4c:	9208      	str	r2, [sp, #32]
    af4e:	9309      	str	r3, [sp, #36]	; 0x24
    af50:	1c2b      	adds	r3, r5, #0
    af52:	9f01      	ldr	r7, [sp, #4]
    af54:	4665      	mov	r5, ip
    af56:	469c      	mov	ip, r3
    af58:	07c9      	lsls	r1, r1, #31
    af5a:	d400      	bmi.n	af5e <_svfiprintf_r+0x22e>
    af5c:	e386      	b.n	b66c <_svfiprintf_r+0x93c>
    af5e:	2330      	movs	r3, #48	; 0x30
    af60:	459c      	cmp	ip, r3
    af62:	d101      	bne.n	af68 <_svfiprintf_r+0x238>
    af64:	f000 fc43 	bl	b7ee <_svfiprintf_r+0xabe>
    af68:	990b      	ldr	r1, [sp, #44]	; 0x2c
    af6a:	3901      	subs	r1, #1
    af6c:	2330      	movs	r3, #48	; 0x30
    af6e:	1a62      	subs	r2, r4, r1
    af70:	910b      	str	r1, [sp, #44]	; 0x2c
    af72:	700b      	strb	r3, [r1, #0]
    af74:	9203      	str	r2, [sp, #12]
    af76:	9606      	str	r6, [sp, #24]
    af78:	9803      	ldr	r0, [sp, #12]
    af7a:	9906      	ldr	r1, [sp, #24]
    af7c:	9001      	str	r0, [sp, #4]
    af7e:	4288      	cmp	r0, r1
    af80:	da00      	bge.n	af84 <_svfiprintf_r+0x254>
    af82:	9101      	str	r1, [sp, #4]
    af84:	22af      	movs	r2, #175	; 0xaf
    af86:	446a      	add	r2, sp
    af88:	7813      	ldrb	r3, [r2, #0]
    af8a:	9801      	ldr	r0, [sp, #4]
    af8c:	1e5a      	subs	r2, r3, #1
    af8e:	4193      	sbcs	r3, r2
    af90:	18c0      	adds	r0, r0, r3
    af92:	9001      	str	r0, [sp, #4]
    af94:	e738      	b.n	ae08 <_svfiprintf_r+0xd8>
    af96:	9900      	ldr	r1, [sp, #0]
    af98:	2310      	movs	r3, #16
    af9a:	4319      	orrs	r1, r3
    af9c:	9100      	str	r1, [sp, #0]
    af9e:	9a00      	ldr	r2, [sp, #0]
    afa0:	2320      	movs	r3, #32
    afa2:	4013      	ands	r3, r2
    afa4:	d100      	bne.n	afa8 <_svfiprintf_r+0x278>
    afa6:	e32c      	b.n	b602 <_svfiprintf_r+0x8d2>
    afa8:	9b07      	ldr	r3, [sp, #28]
    afaa:	2207      	movs	r2, #7
    afac:	3307      	adds	r3, #7
    afae:	4393      	bics	r3, r2
    afb0:	6819      	ldr	r1, [r3, #0]
    afb2:	685a      	ldr	r2, [r3, #4]
    afb4:	9108      	str	r1, [sp, #32]
    afb6:	9209      	str	r2, [sp, #36]	; 0x24
    afb8:	9908      	ldr	r1, [sp, #32]
    afba:	2008      	movs	r0, #8
    afbc:	18c0      	adds	r0, r0, r3
    afbe:	4311      	orrs	r1, r2
    afc0:	1e4b      	subs	r3, r1, #1
    afc2:	4199      	sbcs	r1, r3
    afc4:	9007      	str	r0, [sp, #28]
    afc6:	2300      	movs	r3, #0
    afc8:	e791      	b.n	aeee <_svfiprintf_r+0x1be>
    afca:	9a00      	ldr	r2, [sp, #0]
    afcc:	2310      	movs	r3, #16
    afce:	431a      	orrs	r2, r3
    afd0:	9200      	str	r2, [sp, #0]
    afd2:	9b00      	ldr	r3, [sp, #0]
    afd4:	069b      	lsls	r3, r3, #26
    afd6:	d400      	bmi.n	afda <_svfiprintf_r+0x2aa>
    afd8:	e327      	b.n	b62a <_svfiprintf_r+0x8fa>
    afda:	9b07      	ldr	r3, [sp, #28]
    afdc:	2207      	movs	r2, #7
    afde:	3307      	adds	r3, #7
    afe0:	4393      	bics	r3, r2
    afe2:	6819      	ldr	r1, [r3, #0]
    afe4:	685a      	ldr	r2, [r3, #4]
    afe6:	2008      	movs	r0, #8
    afe8:	18c0      	adds	r0, r0, r3
    afea:	9108      	str	r1, [sp, #32]
    afec:	9209      	str	r2, [sp, #36]	; 0x24
    afee:	9007      	str	r0, [sp, #28]
    aff0:	9909      	ldr	r1, [sp, #36]	; 0x24
    aff2:	2900      	cmp	r1, #0
    aff4:	da00      	bge.n	aff8 <_svfiprintf_r+0x2c8>
    aff6:	e357      	b.n	b6a8 <_svfiprintf_r+0x978>
    aff8:	9908      	ldr	r1, [sp, #32]
    affa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    affc:	4311      	orrs	r1, r2
    affe:	1e4b      	subs	r3, r1, #1
    b000:	4199      	sbcs	r1, r3
    b002:	2301      	movs	r3, #1
    b004:	e777      	b.n	aef6 <_svfiprintf_r+0x1c6>
    b006:	9b07      	ldr	r3, [sp, #28]
    b008:	9a07      	ldr	r2, [sp, #28]
    b00a:	681b      	ldr	r3, [r3, #0]
    b00c:	3204      	adds	r2, #4
    b00e:	9304      	str	r3, [sp, #16]
    b010:	2b00      	cmp	r3, #0
    b012:	db00      	blt.n	b016 <_svfiprintf_r+0x2e6>
    b014:	e326      	b.n	b664 <_svfiprintf_r+0x934>
    b016:	9804      	ldr	r0, [sp, #16]
    b018:	4240      	negs	r0, r0
    b01a:	9004      	str	r0, [sp, #16]
    b01c:	9207      	str	r2, [sp, #28]
    b01e:	9a00      	ldr	r2, [sp, #0]
    b020:	2304      	movs	r3, #4
    b022:	431a      	orrs	r2, r3
    b024:	9200      	str	r2, [sp, #0]
    b026:	783b      	ldrb	r3, [r7, #0]
    b028:	e6da      	b.n	ade0 <_svfiprintf_r+0xb0>
    b02a:	9b00      	ldr	r3, [sp, #0]
    b02c:	069b      	lsls	r3, r3, #26
    b02e:	d500      	bpl.n	b032 <_svfiprintf_r+0x302>
    b030:	e346      	b.n	b6c0 <_svfiprintf_r+0x990>
    b032:	9a00      	ldr	r2, [sp, #0]
    b034:	06d2      	lsls	r2, r2, #27
    b036:	d400      	bmi.n	b03a <_svfiprintf_r+0x30a>
    b038:	e38c      	b.n	b754 <_svfiprintf_r+0xa24>
    b03a:	9807      	ldr	r0, [sp, #28]
    b03c:	9905      	ldr	r1, [sp, #20]
    b03e:	6803      	ldr	r3, [r0, #0]
    b040:	3004      	adds	r0, #4
    b042:	6019      	str	r1, [r3, #0]
    b044:	9007      	str	r0, [sp, #28]
    b046:	e691      	b.n	ad6c <_svfiprintf_r+0x3c>
    b048:	9b00      	ldr	r3, [sp, #0]
    b04a:	2020      	movs	r0, #32
    b04c:	4303      	orrs	r3, r0
    b04e:	9300      	str	r3, [sp, #0]
    b050:	783b      	ldrb	r3, [r7, #0]
    b052:	e6c5      	b.n	ade0 <_svfiprintf_r+0xb0>
    b054:	9b07      	ldr	r3, [sp, #28]
    b056:	1c18      	adds	r0, r3, #0
    b058:	681b      	ldr	r3, [r3, #0]
    b05a:	9a00      	ldr	r2, [sp, #0]
    b05c:	9308      	str	r3, [sp, #32]
    b05e:	2302      	movs	r3, #2
    b060:	2100      	movs	r1, #0
    b062:	431a      	orrs	r2, r3
    b064:	9109      	str	r1, [sp, #36]	; 0x24
    b066:	9200      	str	r2, [sp, #0]
    b068:	3130      	adds	r1, #48	; 0x30
    b06a:	aa2b      	add	r2, sp, #172	; 0xac
    b06c:	3004      	adds	r0, #4
    b06e:	7011      	strb	r1, [r2, #0]
    b070:	3148      	adds	r1, #72	; 0x48
    b072:	7051      	strb	r1, [r2, #1]
    b074:	9007      	str	r0, [sp, #28]
    b076:	9908      	ldr	r1, [sp, #32]
    b078:	4829      	ldr	r0, [pc, #164]	; (b120 <_svfiprintf_r+0x3f0>)
    b07a:	1e4a      	subs	r2, r1, #1
    b07c:	4191      	sbcs	r1, r2
    b07e:	900c      	str	r0, [sp, #48]	; 0x30
    b080:	e735      	b.n	aeee <_svfiprintf_r+0x1be>
    b082:	4927      	ldr	r1, [pc, #156]	; (b120 <_svfiprintf_r+0x3f0>)
    b084:	9800      	ldr	r0, [sp, #0]
    b086:	910c      	str	r1, [sp, #48]	; 0x30
    b088:	2120      	movs	r1, #32
    b08a:	4001      	ands	r1, r0
    b08c:	d050      	beq.n	b130 <_svfiprintf_r+0x400>
    b08e:	9a07      	ldr	r2, [sp, #28]
    b090:	2107      	movs	r1, #7
    b092:	3207      	adds	r2, #7
    b094:	438a      	bics	r2, r1
    b096:	3101      	adds	r1, #1
    b098:	1889      	adds	r1, r1, r2
    b09a:	9107      	str	r1, [sp, #28]
    b09c:	6810      	ldr	r0, [r2, #0]
    b09e:	6851      	ldr	r1, [r2, #4]
    b0a0:	9008      	str	r0, [sp, #32]
    b0a2:	9109      	str	r1, [sp, #36]	; 0x24
    b0a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b0a6:	9908      	ldr	r1, [sp, #32]
    b0a8:	4311      	orrs	r1, r2
    b0aa:	1e4a      	subs	r2, r1, #1
    b0ac:	4191      	sbcs	r1, r2
    b0ae:	2900      	cmp	r1, #0
    b0b0:	d00d      	beq.n	b0ce <_svfiprintf_r+0x39e>
    b0b2:	9800      	ldr	r0, [sp, #0]
    b0b4:	2201      	movs	r2, #1
    b0b6:	4210      	tst	r0, r2
    b0b8:	d009      	beq.n	b0ce <_svfiprintf_r+0x39e>
    b0ba:	a92b      	add	r1, sp, #172	; 0xac
    b0bc:	2030      	movs	r0, #48	; 0x30
    b0be:	704b      	strb	r3, [r1, #1]
    b0c0:	7008      	strb	r0, [r1, #0]
    b0c2:	9900      	ldr	r1, [sp, #0]
    b0c4:	2302      	movs	r3, #2
    b0c6:	4319      	orrs	r1, r3
    b0c8:	9100      	str	r1, [sp, #0]
    b0ca:	1c11      	adds	r1, r2, #0
    b0cc:	e70f      	b.n	aeee <_svfiprintf_r+0x1be>
    b0ce:	2302      	movs	r3, #2
    b0d0:	e70d      	b.n	aeee <_svfiprintf_r+0x1be>
    b0d2:	21af      	movs	r1, #175	; 0xaf
    b0d4:	2200      	movs	r2, #0
    b0d6:	4469      	add	r1, sp
    b0d8:	9b07      	ldr	r3, [sp, #28]
    b0da:	700a      	strb	r2, [r1, #0]
    b0dc:	1c18      	adds	r0, r3, #0
    b0de:	681b      	ldr	r3, [r3, #0]
    b0e0:	3004      	adds	r0, #4
    b0e2:	9007      	str	r0, [sp, #28]
    b0e4:	930b      	str	r3, [sp, #44]	; 0x2c
    b0e6:	2b00      	cmp	r3, #0
    b0e8:	d100      	bne.n	b0ec <_svfiprintf_r+0x3bc>
    b0ea:	e388      	b.n	b7fe <_svfiprintf_r+0xace>
    b0ec:	2e00      	cmp	r6, #0
    b0ee:	da00      	bge.n	b0f2 <_svfiprintf_r+0x3c2>
    b0f0:	e313      	b.n	b71a <_svfiprintf_r+0x9ea>
    b0f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b0f4:	2100      	movs	r1, #0
    b0f6:	1c32      	adds	r2, r6, #0
    b0f8:	f7fe fd40 	bl	9b7c <memchr>
    b0fc:	2800      	cmp	r0, #0
    b0fe:	d100      	bne.n	b102 <_svfiprintf_r+0x3d2>
    b100:	e391      	b.n	b826 <_svfiprintf_r+0xaf6>
    b102:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b104:	1a40      	subs	r0, r0, r1
    b106:	9003      	str	r0, [sp, #12]
    b108:	42b0      	cmp	r0, r6
    b10a:	dc00      	bgt.n	b10e <_svfiprintf_r+0x3de>
    b10c:	e31e      	b.n	b74c <_svfiprintf_r+0xa1c>
    b10e:	2300      	movs	r3, #0
    b110:	9603      	str	r6, [sp, #12]
    b112:	9306      	str	r3, [sp, #24]
    b114:	e730      	b.n	af78 <_svfiprintf_r+0x248>
    b116:	46c0      	nop			; (mov r8, r8)
    b118:	0000e1b0 	.word	0x0000e1b0
    b11c:	0000e314 	.word	0x0000e314
    b120:	0000e940 	.word	0x0000e940
    b124:	4abf      	ldr	r2, [pc, #764]	; (b424 <_svfiprintf_r+0x6f4>)
    b126:	9800      	ldr	r0, [sp, #0]
    b128:	2120      	movs	r1, #32
    b12a:	920c      	str	r2, [sp, #48]	; 0x30
    b12c:	4001      	ands	r1, r0
    b12e:	d1ae      	bne.n	b08e <_svfiprintf_r+0x35e>
    b130:	9800      	ldr	r0, [sp, #0]
    b132:	2210      	movs	r2, #16
    b134:	4002      	ands	r2, r0
    b136:	d000      	beq.n	b13a <_svfiprintf_r+0x40a>
    b138:	e2cc      	b.n	b6d4 <_svfiprintf_r+0x9a4>
    b13a:	9800      	ldr	r0, [sp, #0]
    b13c:	2140      	movs	r1, #64	; 0x40
    b13e:	4001      	ands	r1, r0
    b140:	d100      	bne.n	b144 <_svfiprintf_r+0x414>
    b142:	e324      	b.n	b78e <_svfiprintf_r+0xa5e>
    b144:	9907      	ldr	r1, [sp, #28]
    b146:	8809      	ldrh	r1, [r1, #0]
    b148:	9209      	str	r2, [sp, #36]	; 0x24
    b14a:	9a07      	ldr	r2, [sp, #28]
    b14c:	3204      	adds	r2, #4
    b14e:	9108      	str	r1, [sp, #32]
    b150:	9207      	str	r2, [sp, #28]
    b152:	e7a7      	b.n	b0a4 <_svfiprintf_r+0x374>
    b154:	783b      	ldrb	r3, [r7, #0]
    b156:	2b6c      	cmp	r3, #108	; 0x6c
    b158:	d100      	bne.n	b15c <_svfiprintf_r+0x42c>
    b15a:	e2d6      	b.n	b70a <_svfiprintf_r+0x9da>
    b15c:	9800      	ldr	r0, [sp, #0]
    b15e:	2210      	movs	r2, #16
    b160:	4310      	orrs	r0, r2
    b162:	9000      	str	r0, [sp, #0]
    b164:	e63c      	b.n	ade0 <_svfiprintf_r+0xb0>
    b166:	9b00      	ldr	r3, [sp, #0]
    b168:	4640      	mov	r0, r8
    b16a:	4303      	orrs	r3, r0
    b16c:	9300      	str	r3, [sp, #0]
    b16e:	783b      	ldrb	r3, [r7, #0]
    b170:	e636      	b.n	ade0 <_svfiprintf_r+0xb0>
    b172:	9a07      	ldr	r2, [sp, #28]
    b174:	1c11      	adds	r1, r2, #0
    b176:	6812      	ldr	r2, [r2, #0]
    b178:	ab1e      	add	r3, sp, #120	; 0x78
    b17a:	3104      	adds	r1, #4
    b17c:	701a      	strb	r2, [r3, #0]
    b17e:	22af      	movs	r2, #175	; 0xaf
    b180:	9107      	str	r1, [sp, #28]
    b182:	2000      	movs	r0, #0
    b184:	2101      	movs	r1, #1
    b186:	446a      	add	r2, sp
    b188:	7010      	strb	r0, [r2, #0]
    b18a:	9101      	str	r1, [sp, #4]
    b18c:	9103      	str	r1, [sp, #12]
    b18e:	930b      	str	r3, [sp, #44]	; 0x2c
    b190:	e638      	b.n	ae04 <_svfiprintf_r+0xd4>
    b192:	23af      	movs	r3, #175	; 0xaf
    b194:	446b      	add	r3, sp
    b196:	4650      	mov	r0, sl
    b198:	7018      	strb	r0, [r3, #0]
    b19a:	783b      	ldrb	r3, [r7, #0]
    b19c:	e620      	b.n	ade0 <_svfiprintf_r+0xb0>
    b19e:	9800      	ldr	r0, [sp, #0]
    b1a0:	2301      	movs	r3, #1
    b1a2:	4318      	orrs	r0, r3
    b1a4:	9000      	str	r0, [sp, #0]
    b1a6:	783b      	ldrb	r3, [r7, #0]
    b1a8:	e61a      	b.n	ade0 <_svfiprintf_r+0xb0>
    b1aa:	20af      	movs	r0, #175	; 0xaf
    b1ac:	4468      	add	r0, sp
    b1ae:	7803      	ldrb	r3, [r0, #0]
    b1b0:	2b00      	cmp	r3, #0
    b1b2:	d000      	beq.n	b1b6 <_svfiprintf_r+0x486>
    b1b4:	e2a6      	b.n	b704 <_svfiprintf_r+0x9d4>
    b1b6:	2220      	movs	r2, #32
    b1b8:	7002      	strb	r2, [r0, #0]
    b1ba:	783b      	ldrb	r3, [r7, #0]
    b1bc:	e610      	b.n	ade0 <_svfiprintf_r+0xb0>
    b1be:	1c1a      	adds	r2, r3, #0
    b1c0:	2000      	movs	r0, #0
    b1c2:	3a30      	subs	r2, #48	; 0x30
    b1c4:	1c03      	adds	r3, r0, #0
    b1c6:	46a9      	mov	r9, r5
    b1c8:	009d      	lsls	r5, r3, #2
    b1ca:	18eb      	adds	r3, r5, r3
    b1cc:	783d      	ldrb	r5, [r7, #0]
    b1ce:	005b      	lsls	r3, r3, #1
    b1d0:	18d3      	adds	r3, r2, r3
    b1d2:	1c2a      	adds	r2, r5, #0
    b1d4:	3a30      	subs	r2, #48	; 0x30
    b1d6:	3701      	adds	r7, #1
    b1d8:	2a09      	cmp	r2, #9
    b1da:	d9f5      	bls.n	b1c8 <_svfiprintf_r+0x498>
    b1dc:	1c18      	adds	r0, r3, #0
    b1de:	9004      	str	r0, [sp, #16]
    b1e0:	1c2b      	adds	r3, r5, #0
    b1e2:	464d      	mov	r5, r9
    b1e4:	e5fd      	b.n	ade2 <_svfiprintf_r+0xb2>
    b1e6:	9800      	ldr	r0, [sp, #0]
    b1e8:	4662      	mov	r2, ip
    b1ea:	4310      	orrs	r0, r2
    b1ec:	9000      	str	r0, [sp, #0]
    b1ee:	783b      	ldrb	r3, [r7, #0]
    b1f0:	e5f6      	b.n	ade0 <_svfiprintf_r+0xb0>
    b1f2:	783b      	ldrb	r3, [r7, #0]
    b1f4:	3701      	adds	r7, #1
    b1f6:	2b2a      	cmp	r3, #42	; 0x2a
    b1f8:	d100      	bne.n	b1fc <_svfiprintf_r+0x4cc>
    b1fa:	e318      	b.n	b82e <_svfiprintf_r+0xafe>
    b1fc:	1c1a      	adds	r2, r3, #0
    b1fe:	3a30      	subs	r2, #48	; 0x30
    b200:	2600      	movs	r6, #0
    b202:	2a09      	cmp	r2, #9
    b204:	d900      	bls.n	b208 <_svfiprintf_r+0x4d8>
    b206:	e5ec      	b.n	ade2 <_svfiprintf_r+0xb2>
    b208:	00b3      	lsls	r3, r6, #2
    b20a:	199e      	adds	r6, r3, r6
    b20c:	783b      	ldrb	r3, [r7, #0]
    b20e:	0076      	lsls	r6, r6, #1
    b210:	18b6      	adds	r6, r6, r2
    b212:	1c1a      	adds	r2, r3, #0
    b214:	3a30      	subs	r2, #48	; 0x30
    b216:	3701      	adds	r7, #1
    b218:	2a09      	cmp	r2, #9
    b21a:	d9f5      	bls.n	b208 <_svfiprintf_r+0x4d8>
    b21c:	2e00      	cmp	r6, #0
    b21e:	db00      	blt.n	b222 <_svfiprintf_r+0x4f2>
    b220:	e5df      	b.n	ade2 <_svfiprintf_r+0xb2>
    b222:	2601      	movs	r6, #1
    b224:	4276      	negs	r6, r6
    b226:	e5dc      	b.n	ade2 <_svfiprintf_r+0xb2>
    b228:	1c2b      	adds	r3, r5, #0
    b22a:	3308      	adds	r3, #8
    b22c:	20af      	movs	r0, #175	; 0xaf
    b22e:	4468      	add	r0, sp
    b230:	7802      	ldrb	r2, [r0, #0]
    b232:	2a00      	cmp	r2, #0
    b234:	d00d      	beq.n	b252 <_svfiprintf_r+0x522>
    b236:	2201      	movs	r2, #1
    b238:	606a      	str	r2, [r5, #4]
    b23a:	68a2      	ldr	r2, [r4, #8]
    b23c:	3201      	adds	r2, #1
    b23e:	6028      	str	r0, [r5, #0]
    b240:	60a2      	str	r2, [r4, #8]
    b242:	6862      	ldr	r2, [r4, #4]
    b244:	3201      	adds	r2, #1
    b246:	6062      	str	r2, [r4, #4]
    b248:	2a07      	cmp	r2, #7
    b24a:	dd00      	ble.n	b24e <_svfiprintf_r+0x51e>
    b24c:	e16e      	b.n	b52c <_svfiprintf_r+0x7fc>
    b24e:	1c1d      	adds	r5, r3, #0
    b250:	3308      	adds	r3, #8
    b252:	2100      	movs	r1, #0
    b254:	4589      	cmp	r9, r1
    b256:	d00e      	beq.n	b276 <_svfiprintf_r+0x546>
    b258:	aa2b      	add	r2, sp, #172	; 0xac
    b25a:	602a      	str	r2, [r5, #0]
    b25c:	2202      	movs	r2, #2
    b25e:	606a      	str	r2, [r5, #4]
    b260:	68a2      	ldr	r2, [r4, #8]
    b262:	3202      	adds	r2, #2
    b264:	60a2      	str	r2, [r4, #8]
    b266:	6862      	ldr	r2, [r4, #4]
    b268:	3201      	adds	r2, #1
    b26a:	6062      	str	r2, [r4, #4]
    b26c:	2a07      	cmp	r2, #7
    b26e:	dd00      	ble.n	b272 <_svfiprintf_r+0x542>
    b270:	e151      	b.n	b516 <_svfiprintf_r+0x7e6>
    b272:	1c1d      	adds	r5, r3, #0
    b274:	3308      	adds	r3, #8
    b276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b278:	2a80      	cmp	r2, #128	; 0x80
    b27a:	d100      	bne.n	b27e <_svfiprintf_r+0x54e>
    b27c:	e0d6      	b.n	b42c <_svfiprintf_r+0x6fc>
    b27e:	9906      	ldr	r1, [sp, #24]
    b280:	9a03      	ldr	r2, [sp, #12]
    b282:	1a8e      	subs	r6, r1, r2
    b284:	2e00      	cmp	r6, #0
    b286:	dd42      	ble.n	b30e <_svfiprintf_r+0x5de>
    b288:	2e10      	cmp	r6, #16
    b28a:	dc00      	bgt.n	b28e <_svfiprintf_r+0x55e>
    b28c:	e25a      	b.n	b744 <_svfiprintf_r+0xa14>
    b28e:	4b66      	ldr	r3, [pc, #408]	; (b428 <_svfiprintf_r+0x6f8>)
    b290:	2010      	movs	r0, #16
    b292:	469a      	mov	sl, r3
    b294:	465a      	mov	r2, fp
    b296:	4680      	mov	r8, r0
    b298:	1c2b      	adds	r3, r5, #0
    b29a:	46bb      	mov	fp, r7
    b29c:	44d0      	add	r8, sl
    b29e:	4681      	mov	r9, r0
    b2a0:	9d02      	ldr	r5, [sp, #8]
    b2a2:	1c17      	adds	r7, r2, #0
    b2a4:	e005      	b.n	b2b2 <_svfiprintf_r+0x582>
    b2a6:	3308      	adds	r3, #8
    b2a8:	1c1a      	adds	r2, r3, #0
    b2aa:	3e10      	subs	r6, #16
    b2ac:	3208      	adds	r2, #8
    b2ae:	2e10      	cmp	r6, #16
    b2b0:	dd18      	ble.n	b2e4 <_svfiprintf_r+0x5b4>
    b2b2:	464a      	mov	r2, r9
    b2b4:	605a      	str	r2, [r3, #4]
    b2b6:	68a2      	ldr	r2, [r4, #8]
    b2b8:	4641      	mov	r1, r8
    b2ba:	3210      	adds	r2, #16
    b2bc:	6019      	str	r1, [r3, #0]
    b2be:	60a2      	str	r2, [r4, #8]
    b2c0:	6862      	ldr	r2, [r4, #4]
    b2c2:	3201      	adds	r2, #1
    b2c4:	6062      	str	r2, [r4, #4]
    b2c6:	2a07      	cmp	r2, #7
    b2c8:	dded      	ble.n	b2a6 <_svfiprintf_r+0x576>
    b2ca:	1c28      	adds	r0, r5, #0
    b2cc:	1c39      	adds	r1, r7, #0
    b2ce:	1c22      	adds	r2, r4, #0
    b2d0:	f7ff fc9c 	bl	ac0c <__ssprint_r>
    b2d4:	2800      	cmp	r0, #0
    b2d6:	d000      	beq.n	b2da <_svfiprintf_r+0x5aa>
    b2d8:	e106      	b.n	b4e8 <_svfiprintf_r+0x7b8>
    b2da:	3e10      	subs	r6, #16
    b2dc:	aa10      	add	r2, sp, #64	; 0x40
    b2de:	ab0e      	add	r3, sp, #56	; 0x38
    b2e0:	2e10      	cmp	r6, #16
    b2e2:	dce6      	bgt.n	b2b2 <_svfiprintf_r+0x582>
    b2e4:	1c1d      	adds	r5, r3, #0
    b2e6:	1c3b      	adds	r3, r7, #0
    b2e8:	465f      	mov	r7, fp
    b2ea:	469b      	mov	fp, r3
    b2ec:	2010      	movs	r0, #16
    b2ee:	1c03      	adds	r3, r0, #0
    b2f0:	4453      	add	r3, sl
    b2f2:	602b      	str	r3, [r5, #0]
    b2f4:	68a3      	ldr	r3, [r4, #8]
    b2f6:	606e      	str	r6, [r5, #4]
    b2f8:	18f6      	adds	r6, r6, r3
    b2fa:	6863      	ldr	r3, [r4, #4]
    b2fc:	3301      	adds	r3, #1
    b2fe:	60a6      	str	r6, [r4, #8]
    b300:	6063      	str	r3, [r4, #4]
    b302:	2b07      	cmp	r3, #7
    b304:	dd00      	ble.n	b308 <_svfiprintf_r+0x5d8>
    b306:	e0fb      	b.n	b500 <_svfiprintf_r+0x7d0>
    b308:	1c13      	adds	r3, r2, #0
    b30a:	3308      	adds	r3, #8
    b30c:	1c15      	adds	r5, r2, #0
    b30e:	9a03      	ldr	r2, [sp, #12]
    b310:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b312:	606a      	str	r2, [r5, #4]
    b314:	6029      	str	r1, [r5, #0]
    b316:	68a2      	ldr	r2, [r4, #8]
    b318:	9d03      	ldr	r5, [sp, #12]
    b31a:	1952      	adds	r2, r2, r5
    b31c:	60a2      	str	r2, [r4, #8]
    b31e:	6862      	ldr	r2, [r4, #4]
    b320:	3201      	adds	r2, #1
    b322:	6062      	str	r2, [r4, #4]
    b324:	2a07      	cmp	r2, #7
    b326:	dd00      	ble.n	b32a <_svfiprintf_r+0x5fa>
    b328:	e0c9      	b.n	b4be <_svfiprintf_r+0x78e>
    b32a:	9800      	ldr	r0, [sp, #0]
    b32c:	0740      	lsls	r0, r0, #29
    b32e:	d539      	bpl.n	b3a4 <_svfiprintf_r+0x674>
    b330:	9904      	ldr	r1, [sp, #16]
    b332:	9a01      	ldr	r2, [sp, #4]
    b334:	1a8d      	subs	r5, r1, r2
    b336:	2d00      	cmp	r5, #0
    b338:	dd34      	ble.n	b3a4 <_svfiprintf_r+0x674>
    b33a:	2d10      	cmp	r5, #16
    b33c:	dc00      	bgt.n	b340 <_svfiprintf_r+0x610>
    b33e:	e25b      	b.n	b7f8 <_svfiprintf_r+0xac8>
    b340:	4939      	ldr	r1, [pc, #228]	; (b428 <_svfiprintf_r+0x6f8>)
    b342:	46b8      	mov	r8, r7
    b344:	2610      	movs	r6, #16
    b346:	1c0f      	adds	r7, r1, #0
    b348:	e002      	b.n	b350 <_svfiprintf_r+0x620>
    b34a:	3d10      	subs	r5, #16
    b34c:	2d10      	cmp	r5, #16
    b34e:	dd15      	ble.n	b37c <_svfiprintf_r+0x64c>
    b350:	68a2      	ldr	r2, [r4, #8]
    b352:	3210      	adds	r2, #16
    b354:	601f      	str	r7, [r3, #0]
    b356:	605e      	str	r6, [r3, #4]
    b358:	60a2      	str	r2, [r4, #8]
    b35a:	6862      	ldr	r2, [r4, #4]
    b35c:	3201      	adds	r2, #1
    b35e:	6062      	str	r2, [r4, #4]
    b360:	3308      	adds	r3, #8
    b362:	2a07      	cmp	r2, #7
    b364:	ddf1      	ble.n	b34a <_svfiprintf_r+0x61a>
    b366:	9802      	ldr	r0, [sp, #8]
    b368:	4659      	mov	r1, fp
    b36a:	1c22      	adds	r2, r4, #0
    b36c:	f7ff fc4e 	bl	ac0c <__ssprint_r>
    b370:	2800      	cmp	r0, #0
    b372:	d146      	bne.n	b402 <_svfiprintf_r+0x6d2>
    b374:	3d10      	subs	r5, #16
    b376:	ab0e      	add	r3, sp, #56	; 0x38
    b378:	2d10      	cmp	r5, #16
    b37a:	dce9      	bgt.n	b350 <_svfiprintf_r+0x620>
    b37c:	46ba      	mov	sl, r7
    b37e:	4647      	mov	r7, r8
    b380:	4652      	mov	r2, sl
    b382:	605d      	str	r5, [r3, #4]
    b384:	601a      	str	r2, [r3, #0]
    b386:	68a3      	ldr	r3, [r4, #8]
    b388:	18ed      	adds	r5, r5, r3
    b38a:	6863      	ldr	r3, [r4, #4]
    b38c:	3301      	adds	r3, #1
    b38e:	60a5      	str	r5, [r4, #8]
    b390:	6063      	str	r3, [r4, #4]
    b392:	2b07      	cmp	r3, #7
    b394:	dd07      	ble.n	b3a6 <_svfiprintf_r+0x676>
    b396:	9802      	ldr	r0, [sp, #8]
    b398:	4659      	mov	r1, fp
    b39a:	1c22      	adds	r2, r4, #0
    b39c:	f7ff fc36 	bl	ac0c <__ssprint_r>
    b3a0:	2800      	cmp	r0, #0
    b3a2:	d12e      	bne.n	b402 <_svfiprintf_r+0x6d2>
    b3a4:	68a5      	ldr	r5, [r4, #8]
    b3a6:	9b01      	ldr	r3, [sp, #4]
    b3a8:	9804      	ldr	r0, [sp, #16]
    b3aa:	4283      	cmp	r3, r0
    b3ac:	da00      	bge.n	b3b0 <_svfiprintf_r+0x680>
    b3ae:	1c03      	adds	r3, r0, #0
    b3b0:	9905      	ldr	r1, [sp, #20]
    b3b2:	18c9      	adds	r1, r1, r3
    b3b4:	9105      	str	r1, [sp, #20]
    b3b6:	2d00      	cmp	r5, #0
    b3b8:	d000      	beq.n	b3bc <_svfiprintf_r+0x68c>
    b3ba:	e089      	b.n	b4d0 <_svfiprintf_r+0x7a0>
    b3bc:	2200      	movs	r2, #0
    b3be:	6062      	str	r2, [r4, #4]
    b3c0:	783b      	ldrb	r3, [r7, #0]
    b3c2:	ad0e      	add	r5, sp, #56	; 0x38
    b3c4:	2b00      	cmp	r3, #0
    b3c6:	d000      	beq.n	b3ca <_svfiprintf_r+0x69a>
    b3c8:	e4d4      	b.n	ad74 <_svfiprintf_r+0x44>
    b3ca:	1c3e      	adds	r6, r7, #0
    b3cc:	783b      	ldrb	r3, [r7, #0]
    b3ce:	e4f2      	b.n	adb6 <_svfiprintf_r+0x86>
    b3d0:	2b00      	cmp	r3, #0
    b3d2:	d000      	beq.n	b3d6 <_svfiprintf_r+0x6a6>
    b3d4:	e085      	b.n	b4e2 <_svfiprintf_r+0x7b2>
    b3d6:	9900      	ldr	r1, [sp, #0]
    b3d8:	07c9      	lsls	r1, r1, #31
    b3da:	d400      	bmi.n	b3de <_svfiprintf_r+0x6ae>
    b3dc:	e0b1      	b.n	b542 <_svfiprintf_r+0x812>
    b3de:	3327      	adds	r3, #39	; 0x27
    b3e0:	aa1e      	add	r2, sp, #120	; 0x78
    b3e2:	2130      	movs	r1, #48	; 0x30
    b3e4:	54d1      	strb	r1, [r2, r3]
    b3e6:	466b      	mov	r3, sp
    b3e8:	339f      	adds	r3, #159	; 0x9f
    b3ea:	1ae2      	subs	r2, r4, r3
    b3ec:	9203      	str	r2, [sp, #12]
    b3ee:	930b      	str	r3, [sp, #44]	; 0x2c
    b3f0:	e5c1      	b.n	af76 <_svfiprintf_r+0x246>
    b3f2:	68a3      	ldr	r3, [r4, #8]
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	d004      	beq.n	b402 <_svfiprintf_r+0x6d2>
    b3f8:	9802      	ldr	r0, [sp, #8]
    b3fa:	4659      	mov	r1, fp
    b3fc:	1c22      	adds	r2, r4, #0
    b3fe:	f7ff fc05 	bl	ac0c <__ssprint_r>
    b402:	465d      	mov	r5, fp
    b404:	89ab      	ldrh	r3, [r5, #12]
    b406:	0658      	lsls	r0, r3, #25
    b408:	d502      	bpl.n	b410 <_svfiprintf_r+0x6e0>
    b40a:	2301      	movs	r3, #1
    b40c:	425b      	negs	r3, r3
    b40e:	9305      	str	r3, [sp, #20]
    b410:	9805      	ldr	r0, [sp, #20]
    b412:	b02d      	add	sp, #180	; 0xb4
    b414:	bc3c      	pop	{r2, r3, r4, r5}
    b416:	4690      	mov	r8, r2
    b418:	4699      	mov	r9, r3
    b41a:	46a2      	mov	sl, r4
    b41c:	46ab      	mov	fp, r5
    b41e:	bcf0      	pop	{r4, r5, r6, r7}
    b420:	bc02      	pop	{r1}
    b422:	4708      	bx	r1
    b424:	0000e92c 	.word	0x0000e92c
    b428:	0000e314 	.word	0x0000e314
    b42c:	9804      	ldr	r0, [sp, #16]
    b42e:	9901      	ldr	r1, [sp, #4]
    b430:	1a46      	subs	r6, r0, r1
    b432:	2e00      	cmp	r6, #0
    b434:	dc00      	bgt.n	b438 <_svfiprintf_r+0x708>
    b436:	e177      	b.n	b728 <_svfiprintf_r+0x9f8>
    b438:	2e10      	cmp	r6, #16
    b43a:	dc00      	bgt.n	b43e <_svfiprintf_r+0x70e>
    b43c:	e1ef      	b.n	b81e <_svfiprintf_r+0xaee>
    b43e:	4acc      	ldr	r2, [pc, #816]	; (b770 <_svfiprintf_r+0xa40>)
    b440:	2310      	movs	r3, #16
    b442:	4692      	mov	sl, r2
    b444:	4698      	mov	r8, r3
    b446:	465a      	mov	r2, fp
    b448:	4699      	mov	r9, r3
    b44a:	46bb      	mov	fp, r7
    b44c:	1c2b      	adds	r3, r5, #0
    b44e:	44d0      	add	r8, sl
    b450:	9d02      	ldr	r5, [sp, #8]
    b452:	1c17      	adds	r7, r2, #0
    b454:	e005      	b.n	b462 <_svfiprintf_r+0x732>
    b456:	3308      	adds	r3, #8
    b458:	1c1a      	adds	r2, r3, #0
    b45a:	3e10      	subs	r6, #16
    b45c:	3208      	adds	r2, #8
    b45e:	2e10      	cmp	r6, #16
    b460:	dd17      	ble.n	b492 <_svfiprintf_r+0x762>
    b462:	68a2      	ldr	r2, [r4, #8]
    b464:	4640      	mov	r0, r8
    b466:	3210      	adds	r2, #16
    b468:	4649      	mov	r1, r9
    b46a:	6018      	str	r0, [r3, #0]
    b46c:	6059      	str	r1, [r3, #4]
    b46e:	60a2      	str	r2, [r4, #8]
    b470:	6862      	ldr	r2, [r4, #4]
    b472:	3201      	adds	r2, #1
    b474:	6062      	str	r2, [r4, #4]
    b476:	2a07      	cmp	r2, #7
    b478:	dded      	ble.n	b456 <_svfiprintf_r+0x726>
    b47a:	1c28      	adds	r0, r5, #0
    b47c:	1c39      	adds	r1, r7, #0
    b47e:	1c22      	adds	r2, r4, #0
    b480:	f7ff fbc4 	bl	ac0c <__ssprint_r>
    b484:	2800      	cmp	r0, #0
    b486:	d12f      	bne.n	b4e8 <_svfiprintf_r+0x7b8>
    b488:	3e10      	subs	r6, #16
    b48a:	aa10      	add	r2, sp, #64	; 0x40
    b48c:	ab0e      	add	r3, sp, #56	; 0x38
    b48e:	2e10      	cmp	r6, #16
    b490:	dce7      	bgt.n	b462 <_svfiprintf_r+0x732>
    b492:	1c1d      	adds	r5, r3, #0
    b494:	1c3b      	adds	r3, r7, #0
    b496:	465f      	mov	r7, fp
    b498:	469b      	mov	fp, r3
    b49a:	2010      	movs	r0, #16
    b49c:	1c03      	adds	r3, r0, #0
    b49e:	4453      	add	r3, sl
    b4a0:	602b      	str	r3, [r5, #0]
    b4a2:	68a3      	ldr	r3, [r4, #8]
    b4a4:	18f3      	adds	r3, r6, r3
    b4a6:	606e      	str	r6, [r5, #4]
    b4a8:	60a3      	str	r3, [r4, #8]
    b4aa:	6863      	ldr	r3, [r4, #4]
    b4ac:	3301      	adds	r3, #1
    b4ae:	6063      	str	r3, [r4, #4]
    b4b0:	2b07      	cmp	r3, #7
    b4b2:	dd00      	ble.n	b4b6 <_svfiprintf_r+0x786>
    b4b4:	e13b      	b.n	b72e <_svfiprintf_r+0x9fe>
    b4b6:	1c13      	adds	r3, r2, #0
    b4b8:	3308      	adds	r3, #8
    b4ba:	1c15      	adds	r5, r2, #0
    b4bc:	e6df      	b.n	b27e <_svfiprintf_r+0x54e>
    b4be:	9802      	ldr	r0, [sp, #8]
    b4c0:	4659      	mov	r1, fp
    b4c2:	1c22      	adds	r2, r4, #0
    b4c4:	f7ff fba2 	bl	ac0c <__ssprint_r>
    b4c8:	2800      	cmp	r0, #0
    b4ca:	d19a      	bne.n	b402 <_svfiprintf_r+0x6d2>
    b4cc:	ab0e      	add	r3, sp, #56	; 0x38
    b4ce:	e72c      	b.n	b32a <_svfiprintf_r+0x5fa>
    b4d0:	9802      	ldr	r0, [sp, #8]
    b4d2:	4659      	mov	r1, fp
    b4d4:	1c22      	adds	r2, r4, #0
    b4d6:	f7ff fb99 	bl	ac0c <__ssprint_r>
    b4da:	2800      	cmp	r0, #0
    b4dc:	d100      	bne.n	b4e0 <_svfiprintf_r+0x7b0>
    b4de:	e76d      	b.n	b3bc <_svfiprintf_r+0x68c>
    b4e0:	e78f      	b.n	b402 <_svfiprintf_r+0x6d2>
    b4e2:	9103      	str	r1, [sp, #12]
    b4e4:	940b      	str	r4, [sp, #44]	; 0x2c
    b4e6:	e546      	b.n	af76 <_svfiprintf_r+0x246>
    b4e8:	46bb      	mov	fp, r7
    b4ea:	e78a      	b.n	b402 <_svfiprintf_r+0x6d2>
    b4ec:	9802      	ldr	r0, [sp, #8]
    b4ee:	4659      	mov	r1, fp
    b4f0:	1c22      	adds	r2, r4, #0
    b4f2:	f7ff fb8b 	bl	ac0c <__ssprint_r>
    b4f6:	2800      	cmp	r0, #0
    b4f8:	d000      	beq.n	b4fc <_svfiprintf_r+0x7cc>
    b4fa:	e782      	b.n	b402 <_svfiprintf_r+0x6d2>
    b4fc:	ad0e      	add	r5, sp, #56	; 0x38
    b4fe:	e455      	b.n	adac <_svfiprintf_r+0x7c>
    b500:	9802      	ldr	r0, [sp, #8]
    b502:	4659      	mov	r1, fp
    b504:	1c22      	adds	r2, r4, #0
    b506:	f7ff fb81 	bl	ac0c <__ssprint_r>
    b50a:	2800      	cmp	r0, #0
    b50c:	d000      	beq.n	b510 <_svfiprintf_r+0x7e0>
    b50e:	e778      	b.n	b402 <_svfiprintf_r+0x6d2>
    b510:	ab10      	add	r3, sp, #64	; 0x40
    b512:	ad0e      	add	r5, sp, #56	; 0x38
    b514:	e6fb      	b.n	b30e <_svfiprintf_r+0x5de>
    b516:	9802      	ldr	r0, [sp, #8]
    b518:	4659      	mov	r1, fp
    b51a:	1c22      	adds	r2, r4, #0
    b51c:	f7ff fb76 	bl	ac0c <__ssprint_r>
    b520:	2800      	cmp	r0, #0
    b522:	d000      	beq.n	b526 <_svfiprintf_r+0x7f6>
    b524:	e76d      	b.n	b402 <_svfiprintf_r+0x6d2>
    b526:	ab10      	add	r3, sp, #64	; 0x40
    b528:	ad0e      	add	r5, sp, #56	; 0x38
    b52a:	e6a4      	b.n	b276 <_svfiprintf_r+0x546>
    b52c:	9802      	ldr	r0, [sp, #8]
    b52e:	4659      	mov	r1, fp
    b530:	1c22      	adds	r2, r4, #0
    b532:	f7ff fb6b 	bl	ac0c <__ssprint_r>
    b536:	2800      	cmp	r0, #0
    b538:	d000      	beq.n	b53c <_svfiprintf_r+0x80c>
    b53a:	e762      	b.n	b402 <_svfiprintf_r+0x6d2>
    b53c:	ab10      	add	r3, sp, #64	; 0x40
    b53e:	ad0e      	add	r5, sp, #56	; 0x38
    b540:	e687      	b.n	b252 <_svfiprintf_r+0x522>
    b542:	9303      	str	r3, [sp, #12]
    b544:	940b      	str	r4, [sp, #44]	; 0x2c
    b546:	e516      	b.n	af76 <_svfiprintf_r+0x246>
    b548:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b54a:	2b00      	cmp	r3, #0
    b54c:	d100      	bne.n	b550 <_svfiprintf_r+0x820>
    b54e:	e091      	b.n	b674 <_svfiprintf_r+0x944>
    b550:	46a9      	mov	r9, r5
    b552:	46b0      	mov	r8, r6
    b554:	940b      	str	r4, [sp, #44]	; 0x2c
    b556:	9d08      	ldr	r5, [sp, #32]
    b558:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b55a:	46ba      	mov	sl, r7
    b55c:	1c27      	adds	r7, r4, #0
    b55e:	1c28      	adds	r0, r5, #0
    b560:	1c31      	adds	r1, r6, #0
    b562:	220a      	movs	r2, #10
    b564:	2300      	movs	r3, #0
    b566:	f002 fbb3 	bl	dcd0 <____aeabi_uldivmod_from_thumb>
    b56a:	3f01      	subs	r7, #1
    b56c:	3230      	adds	r2, #48	; 0x30
    b56e:	703a      	strb	r2, [r7, #0]
    b570:	1c28      	adds	r0, r5, #0
    b572:	1c31      	adds	r1, r6, #0
    b574:	220a      	movs	r2, #10
    b576:	2300      	movs	r3, #0
    b578:	f002 fbaa 	bl	dcd0 <____aeabi_uldivmod_from_thumb>
    b57c:	1c02      	adds	r2, r0, #0
    b57e:	1c05      	adds	r5, r0, #0
    b580:	1c0e      	adds	r6, r1, #0
    b582:	430a      	orrs	r2, r1
    b584:	d1eb      	bne.n	b55e <_svfiprintf_r+0x82e>
    b586:	970b      	str	r7, [sp, #44]	; 0x2c
    b588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b58a:	1ae3      	subs	r3, r4, r3
    b58c:	9508      	str	r5, [sp, #32]
    b58e:	9609      	str	r6, [sp, #36]	; 0x24
    b590:	4657      	mov	r7, sl
    b592:	464d      	mov	r5, r9
    b594:	4646      	mov	r6, r8
    b596:	9303      	str	r3, [sp, #12]
    b598:	e4ed      	b.n	af76 <_svfiprintf_r+0x246>
    b59a:	200f      	movs	r0, #15
    b59c:	940b      	str	r4, [sp, #44]	; 0x2c
    b59e:	9a08      	ldr	r2, [sp, #32]
    b5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5a2:	4684      	mov	ip, r0
    b5a4:	1c21      	adds	r1, r4, #0
    b5a6:	46a8      	mov	r8, r5
    b5a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b5aa:	4660      	mov	r0, ip
    b5ac:	4010      	ands	r0, r2
    b5ae:	5c28      	ldrb	r0, [r5, r0]
    b5b0:	3901      	subs	r1, #1
    b5b2:	0915      	lsrs	r5, r2, #4
    b5b4:	46a9      	mov	r9, r5
    b5b6:	7008      	strb	r0, [r1, #0]
    b5b8:	0718      	lsls	r0, r3, #28
    b5ba:	1c05      	adds	r5, r0, #0
    b5bc:	4648      	mov	r0, r9
    b5be:	4305      	orrs	r5, r0
    b5c0:	0918      	lsrs	r0, r3, #4
    b5c2:	1c2a      	adds	r2, r5, #0
    b5c4:	1c03      	adds	r3, r0, #0
    b5c6:	4305      	orrs	r5, r0
    b5c8:	d1ee      	bne.n	b5a8 <_svfiprintf_r+0x878>
    b5ca:	1a60      	subs	r0, r4, r1
    b5cc:	910b      	str	r1, [sp, #44]	; 0x2c
    b5ce:	4645      	mov	r5, r8
    b5d0:	9208      	str	r2, [sp, #32]
    b5d2:	9309      	str	r3, [sp, #36]	; 0x24
    b5d4:	9003      	str	r0, [sp, #12]
    b5d6:	e4ce      	b.n	af76 <_svfiprintf_r+0x246>
    b5d8:	9800      	ldr	r0, [sp, #0]
    b5da:	2310      	movs	r3, #16
    b5dc:	4003      	ands	r3, r0
    b5de:	d000      	beq.n	b5e2 <_svfiprintf_r+0x8b2>
    b5e0:	e08b      	b.n	b6fa <_svfiprintf_r+0x9ca>
    b5e2:	9800      	ldr	r0, [sp, #0]
    b5e4:	2240      	movs	r2, #64	; 0x40
    b5e6:	4002      	ands	r2, r0
    b5e8:	d100      	bne.n	b5ec <_svfiprintf_r+0x8bc>
    b5ea:	e0c3      	b.n	b774 <_svfiprintf_r+0xa44>
    b5ec:	9907      	ldr	r1, [sp, #28]
    b5ee:	8809      	ldrh	r1, [r1, #0]
    b5f0:	9309      	str	r3, [sp, #36]	; 0x24
    b5f2:	9108      	str	r1, [sp, #32]
    b5f4:	9a07      	ldr	r2, [sp, #28]
    b5f6:	3204      	adds	r2, #4
    b5f8:	1e4b      	subs	r3, r1, #1
    b5fa:	4199      	sbcs	r1, r3
    b5fc:	9207      	str	r2, [sp, #28]
    b5fe:	2301      	movs	r3, #1
    b600:	e475      	b.n	aeee <_svfiprintf_r+0x1be>
    b602:	9800      	ldr	r0, [sp, #0]
    b604:	2210      	movs	r2, #16
    b606:	4002      	ands	r2, r0
    b608:	d16c      	bne.n	b6e4 <_svfiprintf_r+0x9b4>
    b60a:	9800      	ldr	r0, [sp, #0]
    b60c:	2340      	movs	r3, #64	; 0x40
    b60e:	4003      	ands	r3, r0
    b610:	d100      	bne.n	b614 <_svfiprintf_r+0x8e4>
    b612:	e0c4      	b.n	b79e <_svfiprintf_r+0xa6e>
    b614:	9907      	ldr	r1, [sp, #28]
    b616:	8809      	ldrh	r1, [r1, #0]
    b618:	9108      	str	r1, [sp, #32]
    b61a:	1e4b      	subs	r3, r1, #1
    b61c:	4199      	sbcs	r1, r3
    b61e:	9b07      	ldr	r3, [sp, #28]
    b620:	3304      	adds	r3, #4
    b622:	9307      	str	r3, [sp, #28]
    b624:	9209      	str	r2, [sp, #36]	; 0x24
    b626:	1c13      	adds	r3, r2, #0
    b628:	e461      	b.n	aeee <_svfiprintf_r+0x1be>
    b62a:	9a00      	ldr	r2, [sp, #0]
    b62c:	06d2      	lsls	r2, r2, #27
    b62e:	d430      	bmi.n	b692 <_svfiprintf_r+0x962>
    b630:	9900      	ldr	r1, [sp, #0]
    b632:	0649      	lsls	r1, r1, #25
    b634:	d52d      	bpl.n	b692 <_svfiprintf_r+0x962>
    b636:	9a07      	ldr	r2, [sp, #28]
    b638:	2300      	movs	r3, #0
    b63a:	5ed3      	ldrsh	r3, [r2, r3]
    b63c:	9308      	str	r3, [sp, #32]
    b63e:	17db      	asrs	r3, r3, #31
    b640:	9309      	str	r3, [sp, #36]	; 0x24
    b642:	9b07      	ldr	r3, [sp, #28]
    b644:	3304      	adds	r3, #4
    b646:	9307      	str	r3, [sp, #28]
    b648:	e4d2      	b.n	aff0 <_svfiprintf_r+0x2c0>
    b64a:	9802      	ldr	r0, [sp, #8]
    b64c:	4659      	mov	r1, fp
    b64e:	1c22      	adds	r2, r4, #0
    b650:	f7ff fadc 	bl	ac0c <__ssprint_r>
    b654:	2800      	cmp	r0, #0
    b656:	d000      	beq.n	b65a <_svfiprintf_r+0x92a>
    b658:	e6d3      	b.n	b402 <_svfiprintf_r+0x6d2>
    b65a:	ab10      	add	r3, sp, #64	; 0x40
    b65c:	ad0e      	add	r5, sp, #56	; 0x38
    b65e:	e5e5      	b.n	b22c <_svfiprintf_r+0x4fc>
    b660:	46ab      	mov	fp, r5
    b662:	e6ce      	b.n	b402 <_svfiprintf_r+0x6d2>
    b664:	783b      	ldrb	r3, [r7, #0]
    b666:	9207      	str	r2, [sp, #28]
    b668:	f7ff fbba 	bl	ade0 <_svfiprintf_r+0xb0>
    b66c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b66e:	1aa2      	subs	r2, r4, r2
    b670:	9203      	str	r2, [sp, #12]
    b672:	e480      	b.n	af76 <_svfiprintf_r+0x246>
    b674:	9808      	ldr	r0, [sp, #32]
    b676:	2809      	cmp	r0, #9
    b678:	d900      	bls.n	b67c <_svfiprintf_r+0x94c>
    b67a:	e769      	b.n	b550 <_svfiprintf_r+0x820>
    b67c:	1c01      	adds	r1, r0, #0
    b67e:	3130      	adds	r1, #48	; 0x30
    b680:	3327      	adds	r3, #39	; 0x27
    b682:	aa1e      	add	r2, sp, #120	; 0x78
    b684:	54d1      	strb	r1, [r2, r3]
    b686:	466b      	mov	r3, sp
    b688:	339f      	adds	r3, #159	; 0x9f
    b68a:	1ae1      	subs	r1, r4, r3
    b68c:	9103      	str	r1, [sp, #12]
    b68e:	930b      	str	r3, [sp, #44]	; 0x2c
    b690:	e471      	b.n	af76 <_svfiprintf_r+0x246>
    b692:	9807      	ldr	r0, [sp, #28]
    b694:	6803      	ldr	r3, [r0, #0]
    b696:	9308      	str	r3, [sp, #32]
    b698:	17db      	asrs	r3, r3, #31
    b69a:	9309      	str	r3, [sp, #36]	; 0x24
    b69c:	9909      	ldr	r1, [sp, #36]	; 0x24
    b69e:	3004      	adds	r0, #4
    b6a0:	9007      	str	r0, [sp, #28]
    b6a2:	2900      	cmp	r1, #0
    b6a4:	db00      	blt.n	b6a8 <_svfiprintf_r+0x978>
    b6a6:	e4a7      	b.n	aff8 <_svfiprintf_r+0x2c8>
    b6a8:	9a08      	ldr	r2, [sp, #32]
    b6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b6ac:	2100      	movs	r1, #0
    b6ae:	4250      	negs	r0, r2
    b6b0:	4199      	sbcs	r1, r3
    b6b2:	9008      	str	r0, [sp, #32]
    b6b4:	9109      	str	r1, [sp, #36]	; 0x24
    b6b6:	20af      	movs	r0, #175	; 0xaf
    b6b8:	232d      	movs	r3, #45	; 0x2d
    b6ba:	4468      	add	r0, sp
    b6bc:	7003      	strb	r3, [r0, #0]
    b6be:	e49b      	b.n	aff8 <_svfiprintf_r+0x2c8>
    b6c0:	9807      	ldr	r0, [sp, #28]
    b6c2:	9905      	ldr	r1, [sp, #20]
    b6c4:	6803      	ldr	r3, [r0, #0]
    b6c6:	17ca      	asrs	r2, r1, #31
    b6c8:	3004      	adds	r0, #4
    b6ca:	6019      	str	r1, [r3, #0]
    b6cc:	605a      	str	r2, [r3, #4]
    b6ce:	9007      	str	r0, [sp, #28]
    b6d0:	f7ff fb4c 	bl	ad6c <_svfiprintf_r+0x3c>
    b6d4:	9a07      	ldr	r2, [sp, #28]
    b6d6:	9807      	ldr	r0, [sp, #28]
    b6d8:	6812      	ldr	r2, [r2, #0]
    b6da:	3004      	adds	r0, #4
    b6dc:	9208      	str	r2, [sp, #32]
    b6de:	9109      	str	r1, [sp, #36]	; 0x24
    b6e0:	9007      	str	r0, [sp, #28]
    b6e2:	e4df      	b.n	b0a4 <_svfiprintf_r+0x374>
    b6e4:	9907      	ldr	r1, [sp, #28]
    b6e6:	6809      	ldr	r1, [r1, #0]
    b6e8:	9108      	str	r1, [sp, #32]
    b6ea:	1e4a      	subs	r2, r1, #1
    b6ec:	4191      	sbcs	r1, r2
    b6ee:	9a07      	ldr	r2, [sp, #28]
    b6f0:	3204      	adds	r2, #4
    b6f2:	9309      	str	r3, [sp, #36]	; 0x24
    b6f4:	9207      	str	r2, [sp, #28]
    b6f6:	f7ff fbfa 	bl	aeee <_svfiprintf_r+0x1be>
    b6fa:	9907      	ldr	r1, [sp, #28]
    b6fc:	6809      	ldr	r1, [r1, #0]
    b6fe:	9209      	str	r2, [sp, #36]	; 0x24
    b700:	9108      	str	r1, [sp, #32]
    b702:	e777      	b.n	b5f4 <_svfiprintf_r+0x8c4>
    b704:	783b      	ldrb	r3, [r7, #0]
    b706:	f7ff fb6b 	bl	ade0 <_svfiprintf_r+0xb0>
    b70a:	9a00      	ldr	r2, [sp, #0]
    b70c:	3b4c      	subs	r3, #76	; 0x4c
    b70e:	431a      	orrs	r2, r3
    b710:	9200      	str	r2, [sp, #0]
    b712:	3701      	adds	r7, #1
    b714:	783b      	ldrb	r3, [r7, #0]
    b716:	f7ff fb63 	bl	ade0 <_svfiprintf_r+0xb0>
    b71a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b71c:	f7f9 ff76 	bl	560c <strlen>
    b720:	2200      	movs	r2, #0
    b722:	9003      	str	r0, [sp, #12]
    b724:	9206      	str	r2, [sp, #24]
    b726:	e427      	b.n	af78 <_svfiprintf_r+0x248>
    b728:	1c2b      	adds	r3, r5, #0
    b72a:	3308      	adds	r3, #8
    b72c:	e5a7      	b.n	b27e <_svfiprintf_r+0x54e>
    b72e:	9802      	ldr	r0, [sp, #8]
    b730:	4659      	mov	r1, fp
    b732:	1c22      	adds	r2, r4, #0
    b734:	f7ff fa6a 	bl	ac0c <__ssprint_r>
    b738:	2800      	cmp	r0, #0
    b73a:	d000      	beq.n	b73e <_svfiprintf_r+0xa0e>
    b73c:	e661      	b.n	b402 <_svfiprintf_r+0x6d2>
    b73e:	ab10      	add	r3, sp, #64	; 0x40
    b740:	ad0e      	add	r5, sp, #56	; 0x38
    b742:	e59c      	b.n	b27e <_svfiprintf_r+0x54e>
    b744:	1c1a      	adds	r2, r3, #0
    b746:	4b0a      	ldr	r3, [pc, #40]	; (b770 <_svfiprintf_r+0xa40>)
    b748:	469a      	mov	sl, r3
    b74a:	e5cf      	b.n	b2ec <_svfiprintf_r+0x5bc>
    b74c:	2200      	movs	r2, #0
    b74e:	9206      	str	r2, [sp, #24]
    b750:	f7ff fc12 	bl	af78 <_svfiprintf_r+0x248>
    b754:	9a00      	ldr	r2, [sp, #0]
    b756:	0652      	lsls	r2, r2, #25
    b758:	d53b      	bpl.n	b7d2 <_svfiprintf_r+0xaa2>
    b75a:	9807      	ldr	r0, [sp, #28]
    b75c:	4669      	mov	r1, sp
    b75e:	2214      	movs	r2, #20
    b760:	6803      	ldr	r3, [r0, #0]
    b762:	5a51      	ldrh	r1, [r2, r1]
    b764:	3004      	adds	r0, #4
    b766:	8019      	strh	r1, [r3, #0]
    b768:	9007      	str	r0, [sp, #28]
    b76a:	f7ff faff 	bl	ad6c <_svfiprintf_r+0x3c>
    b76e:	46c0      	nop			; (mov r8, r8)
    b770:	0000e314 	.word	0x0000e314
    b774:	9b07      	ldr	r3, [sp, #28]
    b776:	9807      	ldr	r0, [sp, #28]
    b778:	681b      	ldr	r3, [r3, #0]
    b77a:	3004      	adds	r0, #4
    b77c:	1c19      	adds	r1, r3, #0
    b77e:	9308      	str	r3, [sp, #32]
    b780:	9209      	str	r2, [sp, #36]	; 0x24
    b782:	1e4b      	subs	r3, r1, #1
    b784:	4199      	sbcs	r1, r3
    b786:	9007      	str	r0, [sp, #28]
    b788:	2301      	movs	r3, #1
    b78a:	f7ff fbb0 	bl	aeee <_svfiprintf_r+0x1be>
    b78e:	9807      	ldr	r0, [sp, #28]
    b790:	6800      	ldr	r0, [r0, #0]
    b792:	9109      	str	r1, [sp, #36]	; 0x24
    b794:	9907      	ldr	r1, [sp, #28]
    b796:	3104      	adds	r1, #4
    b798:	9008      	str	r0, [sp, #32]
    b79a:	9107      	str	r1, [sp, #28]
    b79c:	e482      	b.n	b0a4 <_svfiprintf_r+0x374>
    b79e:	9807      	ldr	r0, [sp, #28]
    b7a0:	6800      	ldr	r0, [r0, #0]
    b7a2:	1c01      	adds	r1, r0, #0
    b7a4:	1e4a      	subs	r2, r1, #1
    b7a6:	4191      	sbcs	r1, r2
    b7a8:	9a07      	ldr	r2, [sp, #28]
    b7aa:	3204      	adds	r2, #4
    b7ac:	9008      	str	r0, [sp, #32]
    b7ae:	9309      	str	r3, [sp, #36]	; 0x24
    b7b0:	9207      	str	r2, [sp, #28]
    b7b2:	f7ff fb9c 	bl	aeee <_svfiprintf_r+0x1be>
    b7b6:	2140      	movs	r1, #64	; 0x40
    b7b8:	9802      	ldr	r0, [sp, #8]
    b7ba:	f7f9 fa9f 	bl	4cfc <_malloc_r>
    b7be:	4659      	mov	r1, fp
    b7c0:	6008      	str	r0, [r1, #0]
    b7c2:	6108      	str	r0, [r1, #16]
    b7c4:	2800      	cmp	r0, #0
    b7c6:	d03f      	beq.n	b848 <_svfiprintf_r+0xb18>
    b7c8:	2340      	movs	r3, #64	; 0x40
    b7ca:	4658      	mov	r0, fp
    b7cc:	6143      	str	r3, [r0, #20]
    b7ce:	f7ff fac2 	bl	ad56 <_svfiprintf_r+0x26>
    b7d2:	9a07      	ldr	r2, [sp, #28]
    b7d4:	9805      	ldr	r0, [sp, #20]
    b7d6:	6813      	ldr	r3, [r2, #0]
    b7d8:	3204      	adds	r2, #4
    b7da:	6018      	str	r0, [r3, #0]
    b7dc:	9207      	str	r2, [sp, #28]
    b7de:	f7ff fac5 	bl	ad6c <_svfiprintf_r+0x3c>
    b7e2:	491d      	ldr	r1, [pc, #116]	; (b858 <_svfiprintf_r+0xb28>)
    b7e4:	1c2a      	adds	r2, r5, #0
    b7e6:	3208      	adds	r2, #8
    b7e8:	468a      	mov	sl, r1
    b7ea:	f7ff fb53 	bl	ae94 <_svfiprintf_r+0x164>
    b7ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b7f0:	1a20      	subs	r0, r4, r0
    b7f2:	9003      	str	r0, [sp, #12]
    b7f4:	f7ff fbbf 	bl	af76 <_svfiprintf_r+0x246>
    b7f8:	4817      	ldr	r0, [pc, #92]	; (b858 <_svfiprintf_r+0xb28>)
    b7fa:	4682      	mov	sl, r0
    b7fc:	e5c0      	b.n	b380 <_svfiprintf_r+0x650>
    b7fe:	9603      	str	r6, [sp, #12]
    b800:	2e06      	cmp	r6, #6
    b802:	d906      	bls.n	b812 <_svfiprintf_r+0xae2>
    b804:	2106      	movs	r1, #6
    b806:	9103      	str	r1, [sp, #12]
    b808:	9101      	str	r1, [sp, #4]
    b80a:	4b14      	ldr	r3, [pc, #80]	; (b85c <_svfiprintf_r+0xb2c>)
    b80c:	930b      	str	r3, [sp, #44]	; 0x2c
    b80e:	f7ff faf9 	bl	ae04 <_svfiprintf_r+0xd4>
    b812:	9a03      	ldr	r2, [sp, #12]
    b814:	43d3      	mvns	r3, r2
    b816:	17db      	asrs	r3, r3, #31
    b818:	401a      	ands	r2, r3
    b81a:	9201      	str	r2, [sp, #4]
    b81c:	e7f5      	b.n	b80a <_svfiprintf_r+0xada>
    b81e:	1c1a      	adds	r2, r3, #0
    b820:	4b0d      	ldr	r3, [pc, #52]	; (b858 <_svfiprintf_r+0xb28>)
    b822:	469a      	mov	sl, r3
    b824:	e639      	b.n	b49a <_svfiprintf_r+0x76a>
    b826:	9603      	str	r6, [sp, #12]
    b828:	9006      	str	r0, [sp, #24]
    b82a:	f7ff fba5 	bl	af78 <_svfiprintf_r+0x248>
    b82e:	9b07      	ldr	r3, [sp, #28]
    b830:	9a07      	ldr	r2, [sp, #28]
    b832:	681e      	ldr	r6, [r3, #0]
    b834:	3204      	adds	r2, #4
    b836:	2e00      	cmp	r6, #0
    b838:	db00      	blt.n	b83c <_svfiprintf_r+0xb0c>
    b83a:	e713      	b.n	b664 <_svfiprintf_r+0x934>
    b83c:	2601      	movs	r6, #1
    b83e:	783b      	ldrb	r3, [r7, #0]
    b840:	4276      	negs	r6, r6
    b842:	9207      	str	r2, [sp, #28]
    b844:	f7ff facc 	bl	ade0 <_svfiprintf_r+0xb0>
    b848:	9a02      	ldr	r2, [sp, #8]
    b84a:	230c      	movs	r3, #12
    b84c:	6013      	str	r3, [r2, #0]
    b84e:	3b0b      	subs	r3, #11
    b850:	425b      	negs	r3, r3
    b852:	9305      	str	r3, [sp, #20]
    b854:	e5dc      	b.n	b410 <_svfiprintf_r+0x6e0>
    b856:	46c0      	nop			; (mov r8, r8)
    b858:	0000e314 	.word	0x0000e314
    b85c:	0000e954 	.word	0x0000e954

0000b860 <__sprint_r>:
    b860:	b5f0      	push	{r4, r5, r6, r7, lr}
    b862:	4657      	mov	r7, sl
    b864:	464e      	mov	r6, r9
    b866:	4645      	mov	r5, r8
    b868:	b4e0      	push	{r5, r6, r7}
    b86a:	4680      	mov	r8, r0
    b86c:	6890      	ldr	r0, [r2, #8]
    b86e:	1c0e      	adds	r6, r1, #0
    b870:	4691      	mov	r9, r2
    b872:	2800      	cmp	r0, #0
    b874:	d02d      	beq.n	b8d2 <__sprint_r+0x72>
    b876:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b878:	049a      	lsls	r2, r3, #18
    b87a:	d52c      	bpl.n	b8d6 <__sprint_r+0x76>
    b87c:	464b      	mov	r3, r9
    b87e:	681b      	ldr	r3, [r3, #0]
    b880:	469a      	mov	sl, r3
    b882:	4652      	mov	r2, sl
    b884:	6857      	ldr	r7, [r2, #4]
    b886:	08bf      	lsrs	r7, r7, #2
    b888:	6815      	ldr	r5, [r2, #0]
    b88a:	2f00      	cmp	r7, #0
    b88c:	dd18      	ble.n	b8c0 <__sprint_r+0x60>
    b88e:	2400      	movs	r4, #0
    b890:	e002      	b.n	b898 <__sprint_r+0x38>
    b892:	3401      	adds	r4, #1
    b894:	42a7      	cmp	r7, r4
    b896:	dd11      	ble.n	b8bc <__sprint_r+0x5c>
    b898:	cd02      	ldmia	r5!, {r1}
    b89a:	4640      	mov	r0, r8
    b89c:	1c32      	adds	r2, r6, #0
    b89e:	f000 feab 	bl	c5f8 <_fputwc_r>
    b8a2:	1c43      	adds	r3, r0, #1
    b8a4:	d1f5      	bne.n	b892 <__sprint_r+0x32>
    b8a6:	2300      	movs	r3, #0
    b8a8:	464a      	mov	r2, r9
    b8aa:	6093      	str	r3, [r2, #8]
    b8ac:	6053      	str	r3, [r2, #4]
    b8ae:	bc1c      	pop	{r2, r3, r4}
    b8b0:	4690      	mov	r8, r2
    b8b2:	4699      	mov	r9, r3
    b8b4:	46a2      	mov	sl, r4
    b8b6:	bcf0      	pop	{r4, r5, r6, r7}
    b8b8:	bc02      	pop	{r1}
    b8ba:	4708      	bx	r1
    b8bc:	464a      	mov	r2, r9
    b8be:	6890      	ldr	r0, [r2, #8]
    b8c0:	00bf      	lsls	r7, r7, #2
    b8c2:	1bc0      	subs	r0, r0, r7
    b8c4:	464b      	mov	r3, r9
    b8c6:	6098      	str	r0, [r3, #8]
    b8c8:	2800      	cmp	r0, #0
    b8ca:	d0ec      	beq.n	b8a6 <__sprint_r+0x46>
    b8cc:	2208      	movs	r2, #8
    b8ce:	4492      	add	sl, r2
    b8d0:	e7d7      	b.n	b882 <__sprint_r+0x22>
    b8d2:	6050      	str	r0, [r2, #4]
    b8d4:	e7eb      	b.n	b8ae <__sprint_r+0x4e>
    b8d6:	4640      	mov	r0, r8
    b8d8:	464a      	mov	r2, r9
    b8da:	f7fd fee9 	bl	96b0 <__sfvwrite_r>
    b8de:	e7e2      	b.n	b8a6 <__sprint_r+0x46>

0000b8e0 <_vfiprintf_r>:
    b8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8e2:	465f      	mov	r7, fp
    b8e4:	4656      	mov	r6, sl
    b8e6:	464d      	mov	r5, r9
    b8e8:	4644      	mov	r4, r8
    b8ea:	b4f0      	push	{r4, r5, r6, r7}
    b8ec:	4cd1      	ldr	r4, [pc, #836]	; (bc34 <_vfiprintf_r+0x354>)
    b8ee:	44a5      	add	sp, r4
    b8f0:	9001      	str	r0, [sp, #4]
    b8f2:	468b      	mov	fp, r1
    b8f4:	1c15      	adds	r5, r2, #0
    b8f6:	9307      	str	r3, [sp, #28]
    b8f8:	2800      	cmp	r0, #0
    b8fa:	d004      	beq.n	b906 <_vfiprintf_r+0x26>
    b8fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b8fe:	2b00      	cmp	r3, #0
    b900:	d101      	bne.n	b906 <_vfiprintf_r+0x26>
    b902:	f000 fc91 	bl	c228 <_vfiprintf_r+0x948>
    b906:	4658      	mov	r0, fp
    b908:	8982      	ldrh	r2, [r0, #12]
    b90a:	2180      	movs	r1, #128	; 0x80
    b90c:	0189      	lsls	r1, r1, #6
    b90e:	1c13      	adds	r3, r2, #0
    b910:	420a      	tst	r2, r1
    b912:	d107      	bne.n	b924 <_vfiprintf_r+0x44>
    b914:	430a      	orrs	r2, r1
    b916:	4659      	mov	r1, fp
    b918:	818a      	strh	r2, [r1, #12]
    b91a:	4bc7      	ldr	r3, [pc, #796]	; (bc38 <_vfiprintf_r+0x358>)
    b91c:	6e49      	ldr	r1, [r1, #100]	; 0x64
    b91e:	400b      	ands	r3, r1
    b920:	6643      	str	r3, [r0, #100]	; 0x64
    b922:	1c13      	adds	r3, r2, #0
    b924:	0719      	lsls	r1, r3, #28
    b926:	d401      	bmi.n	b92c <_vfiprintf_r+0x4c>
    b928:	f000 fdf8 	bl	c51c <_vfiprintf_r+0xc3c>
    b92c:	4658      	mov	r0, fp
    b92e:	6901      	ldr	r1, [r0, #16]
    b930:	2900      	cmp	r1, #0
    b932:	d101      	bne.n	b938 <_vfiprintf_r+0x58>
    b934:	f000 fdf2 	bl	c51c <_vfiprintf_r+0xc3c>
    b938:	211a      	movs	r1, #26
    b93a:	400b      	ands	r3, r1
    b93c:	2b0a      	cmp	r3, #10
    b93e:	d101      	bne.n	b944 <_vfiprintf_r+0x64>
    b940:	f000 fc35 	bl	c1ae <_vfiprintf_r+0x8ce>
    b944:	2194      	movs	r1, #148	; 0x94
    b946:	24a1      	movs	r4, #161	; 0xa1
    b948:	00c9      	lsls	r1, r1, #3
    b94a:	00e4      	lsls	r4, r4, #3
    b94c:	2300      	movs	r3, #0
    b94e:	446c      	add	r4, sp
    b950:	4469      	add	r1, sp
    b952:	46aa      	mov	sl, r5
    b954:	6021      	str	r1, [r4, #0]
    b956:	60a3      	str	r3, [r4, #8]
    b958:	6063      	str	r3, [r4, #4]
    b95a:	930c      	str	r3, [sp, #48]	; 0x30
    b95c:	9305      	str	r3, [sp, #20]
    b95e:	1c0d      	adds	r5, r1, #0
    b960:	4657      	mov	r7, sl
    b962:	783b      	ldrb	r3, [r7, #0]
    b964:	2b00      	cmp	r3, #0
    b966:	d100      	bne.n	b96a <_vfiprintf_r+0x8a>
    b968:	e352      	b.n	c010 <_vfiprintf_r+0x730>
    b96a:	2b25      	cmp	r3, #37	; 0x25
    b96c:	d100      	bne.n	b970 <_vfiprintf_r+0x90>
    b96e:	e34f      	b.n	c010 <_vfiprintf_r+0x730>
    b970:	1c3e      	adds	r6, r7, #0
    b972:	e001      	b.n	b978 <_vfiprintf_r+0x98>
    b974:	2b00      	cmp	r3, #0
    b976:	d003      	beq.n	b980 <_vfiprintf_r+0xa0>
    b978:	3601      	adds	r6, #1
    b97a:	7833      	ldrb	r3, [r6, #0]
    b97c:	2b25      	cmp	r3, #37	; 0x25
    b97e:	d1f9      	bne.n	b974 <_vfiprintf_r+0x94>
    b980:	1bf2      	subs	r2, r6, r7
    b982:	4690      	mov	r8, r2
    b984:	2000      	movs	r0, #0
    b986:	4580      	cmp	r8, r0
    b988:	d010      	beq.n	b9ac <_vfiprintf_r+0xcc>
    b98a:	68a3      	ldr	r3, [r4, #8]
    b98c:	4443      	add	r3, r8
    b98e:	602f      	str	r7, [r5, #0]
    b990:	606a      	str	r2, [r5, #4]
    b992:	60a3      	str	r3, [r4, #8]
    b994:	6863      	ldr	r3, [r4, #4]
    b996:	3301      	adds	r3, #1
    b998:	6063      	str	r3, [r4, #4]
    b99a:	3508      	adds	r5, #8
    b99c:	2b07      	cmp	r3, #7
    b99e:	dd00      	ble.n	b9a2 <_vfiprintf_r+0xc2>
    b9a0:	e3cc      	b.n	c13c <_vfiprintf_r+0x85c>
    b9a2:	9905      	ldr	r1, [sp, #20]
    b9a4:	1c0a      	adds	r2, r1, #0
    b9a6:	4442      	add	r2, r8
    b9a8:	9205      	str	r2, [sp, #20]
    b9aa:	7833      	ldrb	r3, [r6, #0]
    b9ac:	2b00      	cmp	r3, #0
    b9ae:	d100      	bne.n	b9b2 <_vfiprintf_r+0xd2>
    b9b0:	e344      	b.n	c03c <_vfiprintf_r+0x75c>
    b9b2:	4ba2      	ldr	r3, [pc, #648]	; (bc3c <_vfiprintf_r+0x35c>)
    b9b4:	2000      	movs	r0, #0
    b9b6:	446b      	add	r3, sp
    b9b8:	7018      	strb	r0, [r3, #0]
    b9ba:	2100      	movs	r1, #0
    b9bc:	2240      	movs	r2, #64	; 0x40
    b9be:	7873      	ldrb	r3, [r6, #1]
    b9c0:	1c77      	adds	r7, r6, #1
    b9c2:	9104      	str	r1, [sp, #16]
    b9c4:	2601      	movs	r6, #1
    b9c6:	9100      	str	r1, [sp, #0]
    b9c8:	4690      	mov	r8, r2
    b9ca:	2080      	movs	r0, #128	; 0x80
    b9cc:	3a15      	subs	r2, #21
    b9ce:	499c      	ldr	r1, [pc, #624]	; (bc40 <_vfiprintf_r+0x360>)
    b9d0:	4276      	negs	r6, r6
    b9d2:	4684      	mov	ip, r0
    b9d4:	4692      	mov	sl, r2
    b9d6:	3701      	adds	r7, #1
    b9d8:	1c1a      	adds	r2, r3, #0
    b9da:	3a20      	subs	r2, #32
    b9dc:	2a58      	cmp	r2, #88	; 0x58
    b9de:	d96b      	bls.n	bab8 <_vfiprintf_r+0x1d8>
    b9e0:	2b00      	cmp	r3, #0
    b9e2:	d100      	bne.n	b9e6 <_vfiprintf_r+0x106>
    b9e4:	e32a      	b.n	c03c <_vfiprintf_r+0x75c>
    b9e6:	229c      	movs	r2, #156	; 0x9c
    b9e8:	00d2      	lsls	r2, r2, #3
    b9ea:	446a      	add	r2, sp
    b9ec:	7013      	strb	r3, [r2, #0]
    b9ee:	4b93      	ldr	r3, [pc, #588]	; (bc3c <_vfiprintf_r+0x35c>)
    b9f0:	2101      	movs	r1, #1
    b9f2:	2000      	movs	r0, #0
    b9f4:	446b      	add	r3, sp
    b9f6:	7018      	strb	r0, [r3, #0]
    b9f8:	9102      	str	r1, [sp, #8]
    b9fa:	9103      	str	r1, [sp, #12]
    b9fc:	920b      	str	r2, [sp, #44]	; 0x2c
    b9fe:	2100      	movs	r1, #0
    ba00:	9106      	str	r1, [sp, #24]
    ba02:	9900      	ldr	r1, [sp, #0]
    ba04:	2302      	movs	r3, #2
    ba06:	4019      	ands	r1, r3
    ba08:	4689      	mov	r9, r1
    ba0a:	d002      	beq.n	ba12 <_vfiprintf_r+0x132>
    ba0c:	9a02      	ldr	r2, [sp, #8]
    ba0e:	18d2      	adds	r2, r2, r3
    ba10:	9202      	str	r2, [sp, #8]
    ba12:	9800      	ldr	r0, [sp, #0]
    ba14:	2384      	movs	r3, #132	; 0x84
    ba16:	4018      	ands	r0, r3
    ba18:	900d      	str	r0, [sp, #52]	; 0x34
    ba1a:	d000      	beq.n	ba1e <_vfiprintf_r+0x13e>
    ba1c:	e213      	b.n	be46 <_vfiprintf_r+0x566>
    ba1e:	9904      	ldr	r1, [sp, #16]
    ba20:	9a02      	ldr	r2, [sp, #8]
    ba22:	1a8e      	subs	r6, r1, r2
    ba24:	2e00      	cmp	r6, #0
    ba26:	dc00      	bgt.n	ba2a <_vfiprintf_r+0x14a>
    ba28:	e20d      	b.n	be46 <_vfiprintf_r+0x566>
    ba2a:	2e10      	cmp	r6, #16
    ba2c:	dc01      	bgt.n	ba32 <_vfiprintf_r+0x152>
    ba2e:	f000 fd61 	bl	c4f4 <_vfiprintf_r+0xc14>
    ba32:	4b84      	ldr	r3, [pc, #528]	; (bc44 <_vfiprintf_r+0x364>)
    ba34:	469a      	mov	sl, r3
    ba36:	4652      	mov	r2, sl
    ba38:	2010      	movs	r0, #16
    ba3a:	1c2b      	adds	r3, r5, #0
    ba3c:	46ba      	mov	sl, r7
    ba3e:	4680      	mov	r8, r0
    ba40:	465d      	mov	r5, fp
    ba42:	1c17      	adds	r7, r2, #0
    ba44:	e005      	b.n	ba52 <_vfiprintf_r+0x172>
    ba46:	3308      	adds	r3, #8
    ba48:	1c1a      	adds	r2, r3, #0
    ba4a:	3e10      	subs	r6, #16
    ba4c:	3208      	adds	r2, #8
    ba4e:	2e10      	cmp	r6, #16
    ba50:	dd1c      	ble.n	ba8c <_vfiprintf_r+0x1ac>
    ba52:	4642      	mov	r2, r8
    ba54:	605a      	str	r2, [r3, #4]
    ba56:	68a2      	ldr	r2, [r4, #8]
    ba58:	3210      	adds	r2, #16
    ba5a:	601f      	str	r7, [r3, #0]
    ba5c:	60a2      	str	r2, [r4, #8]
    ba5e:	6862      	ldr	r2, [r4, #4]
    ba60:	3201      	adds	r2, #1
    ba62:	6062      	str	r2, [r4, #4]
    ba64:	2a07      	cmp	r2, #7
    ba66:	ddee      	ble.n	ba46 <_vfiprintf_r+0x166>
    ba68:	9801      	ldr	r0, [sp, #4]
    ba6a:	1c29      	adds	r1, r5, #0
    ba6c:	1c22      	adds	r2, r4, #0
    ba6e:	f7ff fef7 	bl	b860 <__sprint_r>
    ba72:	2800      	cmp	r0, #0
    ba74:	d001      	beq.n	ba7a <_vfiprintf_r+0x19a>
    ba76:	f000 fcd8 	bl	c42a <_vfiprintf_r+0xb4a>
    ba7a:	2295      	movs	r2, #149	; 0x95
    ba7c:	2394      	movs	r3, #148	; 0x94
    ba7e:	00d2      	lsls	r2, r2, #3
    ba80:	00db      	lsls	r3, r3, #3
    ba82:	3e10      	subs	r6, #16
    ba84:	446a      	add	r2, sp
    ba86:	446b      	add	r3, sp
    ba88:	2e10      	cmp	r6, #16
    ba8a:	dce2      	bgt.n	ba52 <_vfiprintf_r+0x172>
    ba8c:	46ab      	mov	fp, r5
    ba8e:	1c1d      	adds	r5, r3, #0
    ba90:	1c3b      	adds	r3, r7, #0
    ba92:	4657      	mov	r7, sl
    ba94:	469a      	mov	sl, r3
    ba96:	4653      	mov	r3, sl
    ba98:	602b      	str	r3, [r5, #0]
    ba9a:	68a3      	ldr	r3, [r4, #8]
    ba9c:	18f3      	adds	r3, r6, r3
    ba9e:	606e      	str	r6, [r5, #4]
    baa0:	60a3      	str	r3, [r4, #8]
    baa2:	6863      	ldr	r3, [r4, #4]
    baa4:	3301      	adds	r3, #1
    baa6:	6063      	str	r3, [r4, #4]
    baa8:	2b07      	cmp	r3, #7
    baaa:	dd01      	ble.n	bab0 <_vfiprintf_r+0x1d0>
    baac:	f000 fc46 	bl	c33c <_vfiprintf_r+0xa5c>
    bab0:	1c13      	adds	r3, r2, #0
    bab2:	3308      	adds	r3, #8
    bab4:	1c15      	adds	r5, r2, #0
    bab6:	e1c8      	b.n	be4a <_vfiprintf_r+0x56a>
    bab8:	0092      	lsls	r2, r2, #2
    baba:	588a      	ldr	r2, [r1, r2]
    babc:	4697      	mov	pc, r2
    babe:	9800      	ldr	r0, [sp, #0]
    bac0:	2310      	movs	r3, #16
    bac2:	4318      	orrs	r0, r3
    bac4:	9000      	str	r0, [sp, #0]
    bac6:	9900      	ldr	r1, [sp, #0]
    bac8:	2220      	movs	r2, #32
    baca:	400a      	ands	r2, r1
    bacc:	d101      	bne.n	bad2 <_vfiprintf_r+0x1f2>
    bace:	f000 fc0a 	bl	c2e6 <_vfiprintf_r+0xa06>
    bad2:	9b07      	ldr	r3, [sp, #28]
    bad4:	2207      	movs	r2, #7
    bad6:	3307      	adds	r3, #7
    bad8:	4393      	bics	r3, r2
    bada:	6818      	ldr	r0, [r3, #0]
    badc:	6859      	ldr	r1, [r3, #4]
    bade:	3201      	adds	r2, #1
    bae0:	18d2      	adds	r2, r2, r3
    bae2:	9008      	str	r0, [sp, #32]
    bae4:	9109      	str	r1, [sp, #36]	; 0x24
    bae6:	9207      	str	r2, [sp, #28]
    bae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    baea:	1c01      	adds	r1, r0, #0
    baec:	4311      	orrs	r1, r2
    baee:	1e4b      	subs	r3, r1, #1
    baf0:	4199      	sbcs	r1, r3
    baf2:	2301      	movs	r3, #1
    baf4:	4a51      	ldr	r2, [pc, #324]	; (bc3c <_vfiprintf_r+0x35c>)
    baf6:	2000      	movs	r0, #0
    baf8:	446a      	add	r2, sp
    bafa:	7010      	strb	r0, [r2, #0]
    bafc:	2e00      	cmp	r6, #0
    bafe:	db03      	blt.n	bb08 <_vfiprintf_r+0x228>
    bb00:	9800      	ldr	r0, [sp, #0]
    bb02:	2280      	movs	r2, #128	; 0x80
    bb04:	4390      	bics	r0, r2
    bb06:	9000      	str	r0, [sp, #0]
    bb08:	2e00      	cmp	r6, #0
    bb0a:	d102      	bne.n	bb12 <_vfiprintf_r+0x232>
    bb0c:	2900      	cmp	r1, #0
    bb0e:	d100      	bne.n	bb12 <_vfiprintf_r+0x232>
    bb10:	e281      	b.n	c016 <_vfiprintf_r+0x736>
    bb12:	2b01      	cmp	r3, #1
    bb14:	d100      	bne.n	bb18 <_vfiprintf_r+0x238>
    bb16:	e3ad      	b.n	c274 <_vfiprintf_r+0x994>
    bb18:	2b02      	cmp	r3, #2
    bb1a:	d100      	bne.n	bb1e <_vfiprintf_r+0x23e>
    bb1c:	e38b      	b.n	c236 <_vfiprintf_r+0x956>
    bb1e:	2107      	movs	r1, #7
    bb20:	940b      	str	r4, [sp, #44]	; 0x2c
    bb22:	9702      	str	r7, [sp, #8]
    bb24:	9a08      	ldr	r2, [sp, #32]
    bb26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb28:	4688      	mov	r8, r1
    bb2a:	46ac      	mov	ip, r5
    bb2c:	1c21      	adds	r1, r4, #0
    bb2e:	0758      	lsls	r0, r3, #29
    bb30:	4682      	mov	sl, r0
    bb32:	4645      	mov	r5, r8
    bb34:	08d0      	lsrs	r0, r2, #3
    bb36:	4657      	mov	r7, sl
    bb38:	4307      	orrs	r7, r0
    bb3a:	4015      	ands	r5, r2
    bb3c:	08d8      	lsrs	r0, r3, #3
    bb3e:	3901      	subs	r1, #1
    bb40:	3530      	adds	r5, #48	; 0x30
    bb42:	1c03      	adds	r3, r0, #0
    bb44:	1c38      	adds	r0, r7, #0
    bb46:	700d      	strb	r5, [r1, #0]
    bb48:	1c3a      	adds	r2, r7, #0
    bb4a:	4318      	orrs	r0, r3
    bb4c:	d1ef      	bne.n	bb2e <_vfiprintf_r+0x24e>
    bb4e:	910b      	str	r1, [sp, #44]	; 0x2c
    bb50:	9900      	ldr	r1, [sp, #0]
    bb52:	9208      	str	r2, [sp, #32]
    bb54:	9309      	str	r3, [sp, #36]	; 0x24
    bb56:	1c2b      	adds	r3, r5, #0
    bb58:	9f02      	ldr	r7, [sp, #8]
    bb5a:	4665      	mov	r5, ip
    bb5c:	469c      	mov	ip, r3
    bb5e:	07c9      	lsls	r1, r1, #31
    bb60:	d401      	bmi.n	bb66 <_vfiprintf_r+0x286>
    bb62:	f000 fc05 	bl	c370 <_vfiprintf_r+0xa90>
    bb66:	2330      	movs	r3, #48	; 0x30
    bb68:	459c      	cmp	ip, r3
    bb6a:	d101      	bne.n	bb70 <_vfiprintf_r+0x290>
    bb6c:	f000 fcc8 	bl	c500 <_vfiprintf_r+0xc20>
    bb70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bb72:	3901      	subs	r1, #1
    bb74:	2330      	movs	r3, #48	; 0x30
    bb76:	1a62      	subs	r2, r4, r1
    bb78:	910b      	str	r1, [sp, #44]	; 0x2c
    bb7a:	700b      	strb	r3, [r1, #0]
    bb7c:	9203      	str	r2, [sp, #12]
    bb7e:	9606      	str	r6, [sp, #24]
    bb80:	9803      	ldr	r0, [sp, #12]
    bb82:	9906      	ldr	r1, [sp, #24]
    bb84:	9002      	str	r0, [sp, #8]
    bb86:	4288      	cmp	r0, r1
    bb88:	da00      	bge.n	bb8c <_vfiprintf_r+0x2ac>
    bb8a:	9102      	str	r1, [sp, #8]
    bb8c:	4a2b      	ldr	r2, [pc, #172]	; (bc3c <_vfiprintf_r+0x35c>)
    bb8e:	446a      	add	r2, sp
    bb90:	7813      	ldrb	r3, [r2, #0]
    bb92:	9802      	ldr	r0, [sp, #8]
    bb94:	1e5a      	subs	r2, r3, #1
    bb96:	4193      	sbcs	r3, r2
    bb98:	18c0      	adds	r0, r0, r3
    bb9a:	9002      	str	r0, [sp, #8]
    bb9c:	e731      	b.n	ba02 <_vfiprintf_r+0x122>
    bb9e:	9a00      	ldr	r2, [sp, #0]
    bba0:	2310      	movs	r3, #16
    bba2:	431a      	orrs	r2, r3
    bba4:	9200      	str	r2, [sp, #0]
    bba6:	9b00      	ldr	r3, [sp, #0]
    bba8:	069b      	lsls	r3, r3, #26
    bbaa:	d400      	bmi.n	bbae <_vfiprintf_r+0x2ce>
    bbac:	e38b      	b.n	c2c6 <_vfiprintf_r+0x9e6>
    bbae:	9b07      	ldr	r3, [sp, #28]
    bbb0:	2207      	movs	r2, #7
    bbb2:	3307      	adds	r3, #7
    bbb4:	4393      	bics	r3, r2
    bbb6:	6819      	ldr	r1, [r3, #0]
    bbb8:	685a      	ldr	r2, [r3, #4]
    bbba:	2008      	movs	r0, #8
    bbbc:	18c0      	adds	r0, r0, r3
    bbbe:	9108      	str	r1, [sp, #32]
    bbc0:	9209      	str	r2, [sp, #36]	; 0x24
    bbc2:	9007      	str	r0, [sp, #28]
    bbc4:	9909      	ldr	r1, [sp, #36]	; 0x24
    bbc6:	2900      	cmp	r1, #0
    bbc8:	da01      	bge.n	bbce <_vfiprintf_r+0x2ee>
    bbca:	f000 fbf4 	bl	c3b6 <_vfiprintf_r+0xad6>
    bbce:	9908      	ldr	r1, [sp, #32]
    bbd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bbd2:	4311      	orrs	r1, r2
    bbd4:	1e4b      	subs	r3, r1, #1
    bbd6:	4199      	sbcs	r1, r3
    bbd8:	2301      	movs	r3, #1
    bbda:	e78f      	b.n	bafc <_vfiprintf_r+0x21c>
    bbdc:	9900      	ldr	r1, [sp, #0]
    bbde:	2310      	movs	r3, #16
    bbe0:	4319      	orrs	r1, r3
    bbe2:	9100      	str	r1, [sp, #0]
    bbe4:	9a00      	ldr	r2, [sp, #0]
    bbe6:	2320      	movs	r3, #32
    bbe8:	4013      	ands	r3, r2
    bbea:	d100      	bne.n	bbee <_vfiprintf_r+0x30e>
    bbec:	e391      	b.n	c312 <_vfiprintf_r+0xa32>
    bbee:	9b07      	ldr	r3, [sp, #28]
    bbf0:	2207      	movs	r2, #7
    bbf2:	3307      	adds	r3, #7
    bbf4:	4393      	bics	r3, r2
    bbf6:	6819      	ldr	r1, [r3, #0]
    bbf8:	685a      	ldr	r2, [r3, #4]
    bbfa:	9108      	str	r1, [sp, #32]
    bbfc:	9209      	str	r2, [sp, #36]	; 0x24
    bbfe:	9908      	ldr	r1, [sp, #32]
    bc00:	2008      	movs	r0, #8
    bc02:	18c0      	adds	r0, r0, r3
    bc04:	4311      	orrs	r1, r2
    bc06:	1e4b      	subs	r3, r1, #1
    bc08:	4199      	sbcs	r1, r3
    bc0a:	9007      	str	r0, [sp, #28]
    bc0c:	2300      	movs	r3, #0
    bc0e:	e771      	b.n	baf4 <_vfiprintf_r+0x214>
    bc10:	9b07      	ldr	r3, [sp, #28]
    bc12:	9a07      	ldr	r2, [sp, #28]
    bc14:	681b      	ldr	r3, [r3, #0]
    bc16:	3204      	adds	r2, #4
    bc18:	9304      	str	r3, [sp, #16]
    bc1a:	2b00      	cmp	r3, #0
    bc1c:	db00      	blt.n	bc20 <_vfiprintf_r+0x340>
    bc1e:	e39c      	b.n	c35a <_vfiprintf_r+0xa7a>
    bc20:	9804      	ldr	r0, [sp, #16]
    bc22:	4240      	negs	r0, r0
    bc24:	9004      	str	r0, [sp, #16]
    bc26:	9207      	str	r2, [sp, #28]
    bc28:	9a00      	ldr	r2, [sp, #0]
    bc2a:	2304      	movs	r3, #4
    bc2c:	431a      	orrs	r2, r3
    bc2e:	9200      	str	r2, [sp, #0]
    bc30:	783b      	ldrb	r3, [r7, #0]
    bc32:	e6d0      	b.n	b9d6 <_vfiprintf_r+0xf6>
    bc34:	fffffae4 	.word	0xfffffae4
    bc38:	ffffdfff 	.word	0xffffdfff
    bc3c:	00000517 	.word	0x00000517
    bc40:	0000e334 	.word	0x0000e334
    bc44:	0000e498 	.word	0x0000e498
    bc48:	9a07      	ldr	r2, [sp, #28]
    bc4a:	239c      	movs	r3, #156	; 0x9c
    bc4c:	1c11      	adds	r1, r2, #0
    bc4e:	00db      	lsls	r3, r3, #3
    bc50:	6812      	ldr	r2, [r2, #0]
    bc52:	446b      	add	r3, sp
    bc54:	701a      	strb	r2, [r3, #0]
    bc56:	4ac7      	ldr	r2, [pc, #796]	; (bf74 <_vfiprintf_r+0x694>)
    bc58:	3104      	adds	r1, #4
    bc5a:	9107      	str	r1, [sp, #28]
    bc5c:	2000      	movs	r0, #0
    bc5e:	2101      	movs	r1, #1
    bc60:	446a      	add	r2, sp
    bc62:	7010      	strb	r0, [r2, #0]
    bc64:	9102      	str	r1, [sp, #8]
    bc66:	9103      	str	r1, [sp, #12]
    bc68:	930b      	str	r3, [sp, #44]	; 0x2c
    bc6a:	e6c8      	b.n	b9fe <_vfiprintf_r+0x11e>
    bc6c:	49c1      	ldr	r1, [pc, #772]	; (bf74 <_vfiprintf_r+0x694>)
    bc6e:	2200      	movs	r2, #0
    bc70:	4469      	add	r1, sp
    bc72:	9b07      	ldr	r3, [sp, #28]
    bc74:	700a      	strb	r2, [r1, #0]
    bc76:	1c18      	adds	r0, r3, #0
    bc78:	681b      	ldr	r3, [r3, #0]
    bc7a:	3004      	adds	r0, #4
    bc7c:	9007      	str	r0, [sp, #28]
    bc7e:	930b      	str	r3, [sp, #44]	; 0x2c
    bc80:	2b00      	cmp	r3, #0
    bc82:	d101      	bne.n	bc88 <_vfiprintf_r+0x3a8>
    bc84:	f000 fc24 	bl	c4d0 <_vfiprintf_r+0xbf0>
    bc88:	2e00      	cmp	r6, #0
    bc8a:	da01      	bge.n	bc90 <_vfiprintf_r+0x3b0>
    bc8c:	f000 fc18 	bl	c4c0 <_vfiprintf_r+0xbe0>
    bc90:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bc92:	2100      	movs	r1, #0
    bc94:	1c32      	adds	r2, r6, #0
    bc96:	f7fd ff71 	bl	9b7c <memchr>
    bc9a:	2800      	cmp	r0, #0
    bc9c:	d101      	bne.n	bca2 <_vfiprintf_r+0x3c2>
    bc9e:	f000 fc4d 	bl	c53c <_vfiprintf_r+0xc5c>
    bca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bca4:	1a40      	subs	r0, r0, r1
    bca6:	9003      	str	r0, [sp, #12]
    bca8:	42b0      	cmp	r0, r6
    bcaa:	dc00      	bgt.n	bcae <_vfiprintf_r+0x3ce>
    bcac:	e3d5      	b.n	c45a <_vfiprintf_r+0xb7a>
    bcae:	2300      	movs	r3, #0
    bcb0:	9603      	str	r6, [sp, #12]
    bcb2:	9306      	str	r3, [sp, #24]
    bcb4:	e764      	b.n	bb80 <_vfiprintf_r+0x2a0>
    bcb6:	49b0      	ldr	r1, [pc, #704]	; (bf78 <_vfiprintf_r+0x698>)
    bcb8:	9800      	ldr	r0, [sp, #0]
    bcba:	910c      	str	r1, [sp, #48]	; 0x30
    bcbc:	2120      	movs	r1, #32
    bcbe:	4001      	ands	r1, r0
    bcc0:	d064      	beq.n	bd8c <_vfiprintf_r+0x4ac>
    bcc2:	9a07      	ldr	r2, [sp, #28]
    bcc4:	2107      	movs	r1, #7
    bcc6:	3207      	adds	r2, #7
    bcc8:	438a      	bics	r2, r1
    bcca:	3101      	adds	r1, #1
    bccc:	1889      	adds	r1, r1, r2
    bcce:	9107      	str	r1, [sp, #28]
    bcd0:	6810      	ldr	r0, [r2, #0]
    bcd2:	6851      	ldr	r1, [r2, #4]
    bcd4:	9008      	str	r0, [sp, #32]
    bcd6:	9109      	str	r1, [sp, #36]	; 0x24
    bcd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bcda:	9908      	ldr	r1, [sp, #32]
    bcdc:	4311      	orrs	r1, r2
    bcde:	1e4a      	subs	r2, r1, #1
    bce0:	4191      	sbcs	r1, r2
    bce2:	2900      	cmp	r1, #0
    bce4:	d00e      	beq.n	bd04 <_vfiprintf_r+0x424>
    bce6:	9800      	ldr	r0, [sp, #0]
    bce8:	2201      	movs	r2, #1
    bcea:	4210      	tst	r0, r2
    bcec:	d00a      	beq.n	bd04 <_vfiprintf_r+0x424>
    bcee:	49a3      	ldr	r1, [pc, #652]	; (bf7c <_vfiprintf_r+0x69c>)
    bcf0:	2030      	movs	r0, #48	; 0x30
    bcf2:	4469      	add	r1, sp
    bcf4:	704b      	strb	r3, [r1, #1]
    bcf6:	7008      	strb	r0, [r1, #0]
    bcf8:	9900      	ldr	r1, [sp, #0]
    bcfa:	2302      	movs	r3, #2
    bcfc:	4319      	orrs	r1, r3
    bcfe:	9100      	str	r1, [sp, #0]
    bd00:	1c11      	adds	r1, r2, #0
    bd02:	e6f7      	b.n	baf4 <_vfiprintf_r+0x214>
    bd04:	2302      	movs	r3, #2
    bd06:	e6f5      	b.n	baf4 <_vfiprintf_r+0x214>
    bd08:	9b00      	ldr	r3, [sp, #0]
    bd0a:	2020      	movs	r0, #32
    bd0c:	4303      	orrs	r3, r0
    bd0e:	9300      	str	r3, [sp, #0]
    bd10:	783b      	ldrb	r3, [r7, #0]
    bd12:	e660      	b.n	b9d6 <_vfiprintf_r+0xf6>
    bd14:	9b07      	ldr	r3, [sp, #28]
    bd16:	1c18      	adds	r0, r3, #0
    bd18:	681b      	ldr	r3, [r3, #0]
    bd1a:	9a00      	ldr	r2, [sp, #0]
    bd1c:	9308      	str	r3, [sp, #32]
    bd1e:	2302      	movs	r3, #2
    bd20:	431a      	orrs	r2, r3
    bd22:	9200      	str	r2, [sp, #0]
    bd24:	4a95      	ldr	r2, [pc, #596]	; (bf7c <_vfiprintf_r+0x69c>)
    bd26:	2100      	movs	r1, #0
    bd28:	446a      	add	r2, sp
    bd2a:	9109      	str	r1, [sp, #36]	; 0x24
    bd2c:	3130      	adds	r1, #48	; 0x30
    bd2e:	3004      	adds	r0, #4
    bd30:	7011      	strb	r1, [r2, #0]
    bd32:	3148      	adds	r1, #72	; 0x48
    bd34:	7051      	strb	r1, [r2, #1]
    bd36:	9007      	str	r0, [sp, #28]
    bd38:	9908      	ldr	r1, [sp, #32]
    bd3a:	488f      	ldr	r0, [pc, #572]	; (bf78 <_vfiprintf_r+0x698>)
    bd3c:	1e4a      	subs	r2, r1, #1
    bd3e:	4191      	sbcs	r1, r2
    bd40:	900c      	str	r0, [sp, #48]	; 0x30
    bd42:	e6d7      	b.n	baf4 <_vfiprintf_r+0x214>
    bd44:	9b00      	ldr	r3, [sp, #0]
    bd46:	069b      	lsls	r3, r3, #26
    bd48:	d500      	bpl.n	bd4c <_vfiprintf_r+0x46c>
    bd4a:	e359      	b.n	c400 <_vfiprintf_r+0xb20>
    bd4c:	9a00      	ldr	r2, [sp, #0]
    bd4e:	06d2      	lsls	r2, r2, #27
    bd50:	d400      	bmi.n	bd54 <_vfiprintf_r+0x474>
    bd52:	e393      	b.n	c47c <_vfiprintf_r+0xb9c>
    bd54:	9807      	ldr	r0, [sp, #28]
    bd56:	9905      	ldr	r1, [sp, #20]
    bd58:	6803      	ldr	r3, [r0, #0]
    bd5a:	3004      	adds	r0, #4
    bd5c:	6019      	str	r1, [r3, #0]
    bd5e:	9007      	str	r0, [sp, #28]
    bd60:	e5ff      	b.n	b962 <_vfiprintf_r+0x82>
    bd62:	783b      	ldrb	r3, [r7, #0]
    bd64:	2b6c      	cmp	r3, #108	; 0x6c
    bd66:	d100      	bne.n	bd6a <_vfiprintf_r+0x48a>
    bd68:	e357      	b.n	c41a <_vfiprintf_r+0xb3a>
    bd6a:	9800      	ldr	r0, [sp, #0]
    bd6c:	2210      	movs	r2, #16
    bd6e:	4310      	orrs	r0, r2
    bd70:	9000      	str	r0, [sp, #0]
    bd72:	e630      	b.n	b9d6 <_vfiprintf_r+0xf6>
    bd74:	9b00      	ldr	r3, [sp, #0]
    bd76:	4640      	mov	r0, r8
    bd78:	4303      	orrs	r3, r0
    bd7a:	9300      	str	r3, [sp, #0]
    bd7c:	783b      	ldrb	r3, [r7, #0]
    bd7e:	e62a      	b.n	b9d6 <_vfiprintf_r+0xf6>
    bd80:	4a7f      	ldr	r2, [pc, #508]	; (bf80 <_vfiprintf_r+0x6a0>)
    bd82:	9800      	ldr	r0, [sp, #0]
    bd84:	2120      	movs	r1, #32
    bd86:	920c      	str	r2, [sp, #48]	; 0x30
    bd88:	4001      	ands	r1, r0
    bd8a:	d19a      	bne.n	bcc2 <_vfiprintf_r+0x3e2>
    bd8c:	9800      	ldr	r0, [sp, #0]
    bd8e:	2210      	movs	r2, #16
    bd90:	4002      	ands	r2, r0
    bd92:	d000      	beq.n	bd96 <_vfiprintf_r+0x4b6>
    bd94:	e31c      	b.n	c3d0 <_vfiprintf_r+0xaf0>
    bd96:	9800      	ldr	r0, [sp, #0]
    bd98:	2140      	movs	r1, #64	; 0x40
    bd9a:	4001      	ands	r1, r0
    bd9c:	d100      	bne.n	bda0 <_vfiprintf_r+0x4c0>
    bd9e:	e37a      	b.n	c496 <_vfiprintf_r+0xbb6>
    bda0:	9907      	ldr	r1, [sp, #28]
    bda2:	8809      	ldrh	r1, [r1, #0]
    bda4:	9209      	str	r2, [sp, #36]	; 0x24
    bda6:	9a07      	ldr	r2, [sp, #28]
    bda8:	3204      	adds	r2, #4
    bdaa:	9108      	str	r1, [sp, #32]
    bdac:	9207      	str	r2, [sp, #28]
    bdae:	e793      	b.n	bcd8 <_vfiprintf_r+0x3f8>
    bdb0:	4b70      	ldr	r3, [pc, #448]	; (bf74 <_vfiprintf_r+0x694>)
    bdb2:	4650      	mov	r0, sl
    bdb4:	446b      	add	r3, sp
    bdb6:	7018      	strb	r0, [r3, #0]
    bdb8:	783b      	ldrb	r3, [r7, #0]
    bdba:	e60c      	b.n	b9d6 <_vfiprintf_r+0xf6>
    bdbc:	9800      	ldr	r0, [sp, #0]
    bdbe:	2301      	movs	r3, #1
    bdc0:	4318      	orrs	r0, r3
    bdc2:	9000      	str	r0, [sp, #0]
    bdc4:	783b      	ldrb	r3, [r7, #0]
    bdc6:	e606      	b.n	b9d6 <_vfiprintf_r+0xf6>
    bdc8:	486a      	ldr	r0, [pc, #424]	; (bf74 <_vfiprintf_r+0x694>)
    bdca:	4468      	add	r0, sp
    bdcc:	7803      	ldrb	r3, [r0, #0]
    bdce:	2b00      	cmp	r3, #0
    bdd0:	d000      	beq.n	bdd4 <_vfiprintf_r+0x4f4>
    bdd2:	e31f      	b.n	c414 <_vfiprintf_r+0xb34>
    bdd4:	2220      	movs	r2, #32
    bdd6:	7002      	strb	r2, [r0, #0]
    bdd8:	783b      	ldrb	r3, [r7, #0]
    bdda:	e5fc      	b.n	b9d6 <_vfiprintf_r+0xf6>
    bddc:	1c1a      	adds	r2, r3, #0
    bdde:	2000      	movs	r0, #0
    bde0:	3a30      	subs	r2, #48	; 0x30
    bde2:	1c03      	adds	r3, r0, #0
    bde4:	46a9      	mov	r9, r5
    bde6:	009d      	lsls	r5, r3, #2
    bde8:	18eb      	adds	r3, r5, r3
    bdea:	783d      	ldrb	r5, [r7, #0]
    bdec:	005b      	lsls	r3, r3, #1
    bdee:	18d3      	adds	r3, r2, r3
    bdf0:	1c2a      	adds	r2, r5, #0
    bdf2:	3a30      	subs	r2, #48	; 0x30
    bdf4:	3701      	adds	r7, #1
    bdf6:	2a09      	cmp	r2, #9
    bdf8:	d9f5      	bls.n	bde6 <_vfiprintf_r+0x506>
    bdfa:	1c18      	adds	r0, r3, #0
    bdfc:	9004      	str	r0, [sp, #16]
    bdfe:	1c2b      	adds	r3, r5, #0
    be00:	464d      	mov	r5, r9
    be02:	e5e9      	b.n	b9d8 <_vfiprintf_r+0xf8>
    be04:	9800      	ldr	r0, [sp, #0]
    be06:	4662      	mov	r2, ip
    be08:	4310      	orrs	r0, r2
    be0a:	9000      	str	r0, [sp, #0]
    be0c:	783b      	ldrb	r3, [r7, #0]
    be0e:	e5e2      	b.n	b9d6 <_vfiprintf_r+0xf6>
    be10:	783b      	ldrb	r3, [r7, #0]
    be12:	3701      	adds	r7, #1
    be14:	2b2a      	cmp	r3, #42	; 0x2a
    be16:	d100      	bne.n	be1a <_vfiprintf_r+0x53a>
    be18:	e398      	b.n	c54c <_vfiprintf_r+0xc6c>
    be1a:	1c1a      	adds	r2, r3, #0
    be1c:	3a30      	subs	r2, #48	; 0x30
    be1e:	2600      	movs	r6, #0
    be20:	2a09      	cmp	r2, #9
    be22:	d900      	bls.n	be26 <_vfiprintf_r+0x546>
    be24:	e5d8      	b.n	b9d8 <_vfiprintf_r+0xf8>
    be26:	00b3      	lsls	r3, r6, #2
    be28:	199e      	adds	r6, r3, r6
    be2a:	783b      	ldrb	r3, [r7, #0]
    be2c:	0076      	lsls	r6, r6, #1
    be2e:	18b6      	adds	r6, r6, r2
    be30:	1c1a      	adds	r2, r3, #0
    be32:	3a30      	subs	r2, #48	; 0x30
    be34:	3701      	adds	r7, #1
    be36:	2a09      	cmp	r2, #9
    be38:	d9f5      	bls.n	be26 <_vfiprintf_r+0x546>
    be3a:	2e00      	cmp	r6, #0
    be3c:	db00      	blt.n	be40 <_vfiprintf_r+0x560>
    be3e:	e5cb      	b.n	b9d8 <_vfiprintf_r+0xf8>
    be40:	2601      	movs	r6, #1
    be42:	4276      	negs	r6, r6
    be44:	e5c8      	b.n	b9d8 <_vfiprintf_r+0xf8>
    be46:	1c2b      	adds	r3, r5, #0
    be48:	3308      	adds	r3, #8
    be4a:	484a      	ldr	r0, [pc, #296]	; (bf74 <_vfiprintf_r+0x694>)
    be4c:	4468      	add	r0, sp
    be4e:	7802      	ldrb	r2, [r0, #0]
    be50:	2a00      	cmp	r2, #0
    be52:	d00d      	beq.n	be70 <_vfiprintf_r+0x590>
    be54:	2201      	movs	r2, #1
    be56:	606a      	str	r2, [r5, #4]
    be58:	68a2      	ldr	r2, [r4, #8]
    be5a:	3201      	adds	r2, #1
    be5c:	6028      	str	r0, [r5, #0]
    be5e:	60a2      	str	r2, [r4, #8]
    be60:	6862      	ldr	r2, [r4, #4]
    be62:	3201      	adds	r2, #1
    be64:	6062      	str	r2, [r4, #4]
    be66:	2a07      	cmp	r2, #7
    be68:	dd00      	ble.n	be6c <_vfiprintf_r+0x58c>
    be6a:	e191      	b.n	c190 <_vfiprintf_r+0x8b0>
    be6c:	1c1d      	adds	r5, r3, #0
    be6e:	3308      	adds	r3, #8
    be70:	2100      	movs	r1, #0
    be72:	4589      	cmp	r9, r1
    be74:	d00f      	beq.n	be96 <_vfiprintf_r+0x5b6>
    be76:	4a41      	ldr	r2, [pc, #260]	; (bf7c <_vfiprintf_r+0x69c>)
    be78:	446a      	add	r2, sp
    be7a:	602a      	str	r2, [r5, #0]
    be7c:	2202      	movs	r2, #2
    be7e:	606a      	str	r2, [r5, #4]
    be80:	68a2      	ldr	r2, [r4, #8]
    be82:	3202      	adds	r2, #2
    be84:	60a2      	str	r2, [r4, #8]
    be86:	6862      	ldr	r2, [r4, #4]
    be88:	3201      	adds	r2, #1
    be8a:	6062      	str	r2, [r4, #4]
    be8c:	2a07      	cmp	r2, #7
    be8e:	dd00      	ble.n	be92 <_vfiprintf_r+0x5b2>
    be90:	e16f      	b.n	c172 <_vfiprintf_r+0x892>
    be92:	1c1d      	adds	r5, r3, #0
    be94:	3308      	adds	r3, #8
    be96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    be98:	2a80      	cmp	r2, #128	; 0x80
    be9a:	d100      	bne.n	be9e <_vfiprintf_r+0x5be>
    be9c:	e0e8      	b.n	c070 <_vfiprintf_r+0x790>
    be9e:	9906      	ldr	r1, [sp, #24]
    bea0:	9a03      	ldr	r2, [sp, #12]
    bea2:	1a8e      	subs	r6, r1, r2
    bea4:	2e00      	cmp	r6, #0
    bea6:	dd46      	ble.n	bf36 <_vfiprintf_r+0x656>
    bea8:	2e10      	cmp	r6, #16
    beaa:	dc00      	bgt.n	beae <_vfiprintf_r+0x5ce>
    beac:	e2d1      	b.n	c452 <_vfiprintf_r+0xb72>
    beae:	4b35      	ldr	r3, [pc, #212]	; (bf84 <_vfiprintf_r+0x6a4>)
    beb0:	2010      	movs	r0, #16
    beb2:	469a      	mov	sl, r3
    beb4:	465a      	mov	r2, fp
    beb6:	4680      	mov	r8, r0
    beb8:	1c2b      	adds	r3, r5, #0
    beba:	46bb      	mov	fp, r7
    bebc:	44d0      	add	r8, sl
    bebe:	4681      	mov	r9, r0
    bec0:	9d01      	ldr	r5, [sp, #4]
    bec2:	1c17      	adds	r7, r2, #0
    bec4:	e005      	b.n	bed2 <_vfiprintf_r+0x5f2>
    bec6:	3308      	adds	r3, #8
    bec8:	1c1a      	adds	r2, r3, #0
    beca:	3e10      	subs	r6, #16
    becc:	3208      	adds	r2, #8
    bece:	2e10      	cmp	r6, #16
    bed0:	dd1c      	ble.n	bf0c <_vfiprintf_r+0x62c>
    bed2:	464a      	mov	r2, r9
    bed4:	605a      	str	r2, [r3, #4]
    bed6:	68a2      	ldr	r2, [r4, #8]
    bed8:	4641      	mov	r1, r8
    beda:	3210      	adds	r2, #16
    bedc:	6019      	str	r1, [r3, #0]
    bede:	60a2      	str	r2, [r4, #8]
    bee0:	6862      	ldr	r2, [r4, #4]
    bee2:	3201      	adds	r2, #1
    bee4:	6062      	str	r2, [r4, #4]
    bee6:	2a07      	cmp	r2, #7
    bee8:	dded      	ble.n	bec6 <_vfiprintf_r+0x5e6>
    beea:	1c28      	adds	r0, r5, #0
    beec:	1c39      	adds	r1, r7, #0
    beee:	1c22      	adds	r2, r4, #0
    bef0:	f7ff fcb6 	bl	b860 <__sprint_r>
    bef4:	2800      	cmp	r0, #0
    bef6:	d000      	beq.n	befa <_vfiprintf_r+0x61a>
    bef8:	e11e      	b.n	c138 <_vfiprintf_r+0x858>
    befa:	2295      	movs	r2, #149	; 0x95
    befc:	2394      	movs	r3, #148	; 0x94
    befe:	00d2      	lsls	r2, r2, #3
    bf00:	00db      	lsls	r3, r3, #3
    bf02:	3e10      	subs	r6, #16
    bf04:	446a      	add	r2, sp
    bf06:	446b      	add	r3, sp
    bf08:	2e10      	cmp	r6, #16
    bf0a:	dce2      	bgt.n	bed2 <_vfiprintf_r+0x5f2>
    bf0c:	1c1d      	adds	r5, r3, #0
    bf0e:	1c3b      	adds	r3, r7, #0
    bf10:	465f      	mov	r7, fp
    bf12:	469b      	mov	fp, r3
    bf14:	2010      	movs	r0, #16
    bf16:	1c03      	adds	r3, r0, #0
    bf18:	4453      	add	r3, sl
    bf1a:	602b      	str	r3, [r5, #0]
    bf1c:	68a3      	ldr	r3, [r4, #8]
    bf1e:	606e      	str	r6, [r5, #4]
    bf20:	18f6      	adds	r6, r6, r3
    bf22:	6863      	ldr	r3, [r4, #4]
    bf24:	3301      	adds	r3, #1
    bf26:	60a6      	str	r6, [r4, #8]
    bf28:	6063      	str	r3, [r4, #4]
    bf2a:	2b07      	cmp	r3, #7
    bf2c:	dd00      	ble.n	bf30 <_vfiprintf_r+0x650>
    bf2e:	e111      	b.n	c154 <_vfiprintf_r+0x874>
    bf30:	1c13      	adds	r3, r2, #0
    bf32:	3308      	adds	r3, #8
    bf34:	1c15      	adds	r5, r2, #0
    bf36:	9a03      	ldr	r2, [sp, #12]
    bf38:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bf3a:	606a      	str	r2, [r5, #4]
    bf3c:	6029      	str	r1, [r5, #0]
    bf3e:	68a2      	ldr	r2, [r4, #8]
    bf40:	9d03      	ldr	r5, [sp, #12]
    bf42:	1952      	adds	r2, r2, r5
    bf44:	60a2      	str	r2, [r4, #8]
    bf46:	6862      	ldr	r2, [r4, #4]
    bf48:	3201      	adds	r2, #1
    bf4a:	6062      	str	r2, [r4, #4]
    bf4c:	2a07      	cmp	r2, #7
    bf4e:	dd00      	ble.n	bf52 <_vfiprintf_r+0x672>
    bf50:	e0db      	b.n	c10a <_vfiprintf_r+0x82a>
    bf52:	9800      	ldr	r0, [sp, #0]
    bf54:	0740      	lsls	r0, r0, #29
    bf56:	d546      	bpl.n	bfe6 <_vfiprintf_r+0x706>
    bf58:	9904      	ldr	r1, [sp, #16]
    bf5a:	9a02      	ldr	r2, [sp, #8]
    bf5c:	1a8d      	subs	r5, r1, r2
    bf5e:	2d00      	cmp	r5, #0
    bf60:	dd41      	ble.n	bfe6 <_vfiprintf_r+0x706>
    bf62:	2d10      	cmp	r5, #16
    bf64:	dc00      	bgt.n	bf68 <_vfiprintf_r+0x688>
    bf66:	e2d6      	b.n	c516 <_vfiprintf_r+0xc36>
    bf68:	4906      	ldr	r1, [pc, #24]	; (bf84 <_vfiprintf_r+0x6a4>)
    bf6a:	46b8      	mov	r8, r7
    bf6c:	2610      	movs	r6, #16
    bf6e:	1c0f      	adds	r7, r1, #0
    bf70:	e00d      	b.n	bf8e <_vfiprintf_r+0x6ae>
    bf72:	46c0      	nop			; (mov r8, r8)
    bf74:	00000517 	.word	0x00000517
    bf78:	0000e940 	.word	0x0000e940
    bf7c:	00000514 	.word	0x00000514
    bf80:	0000e92c 	.word	0x0000e92c
    bf84:	0000e498 	.word	0x0000e498
    bf88:	3d10      	subs	r5, #16
    bf8a:	2d10      	cmp	r5, #16
    bf8c:	dd17      	ble.n	bfbe <_vfiprintf_r+0x6de>
    bf8e:	68a2      	ldr	r2, [r4, #8]
    bf90:	3210      	adds	r2, #16
    bf92:	601f      	str	r7, [r3, #0]
    bf94:	605e      	str	r6, [r3, #4]
    bf96:	60a2      	str	r2, [r4, #8]
    bf98:	6862      	ldr	r2, [r4, #4]
    bf9a:	3201      	adds	r2, #1
    bf9c:	6062      	str	r2, [r4, #4]
    bf9e:	3308      	adds	r3, #8
    bfa0:	2a07      	cmp	r2, #7
    bfa2:	ddf1      	ble.n	bf88 <_vfiprintf_r+0x6a8>
    bfa4:	9801      	ldr	r0, [sp, #4]
    bfa6:	4659      	mov	r1, fp
    bfa8:	1c22      	adds	r2, r4, #0
    bfaa:	f7ff fc59 	bl	b860 <__sprint_r>
    bfae:	2800      	cmp	r0, #0
    bfb0:	d14c      	bne.n	c04c <_vfiprintf_r+0x76c>
    bfb2:	2394      	movs	r3, #148	; 0x94
    bfb4:	00db      	lsls	r3, r3, #3
    bfb6:	3d10      	subs	r5, #16
    bfb8:	446b      	add	r3, sp
    bfba:	2d10      	cmp	r5, #16
    bfbc:	dce7      	bgt.n	bf8e <_vfiprintf_r+0x6ae>
    bfbe:	46ba      	mov	sl, r7
    bfc0:	4647      	mov	r7, r8
    bfc2:	4652      	mov	r2, sl
    bfc4:	605d      	str	r5, [r3, #4]
    bfc6:	601a      	str	r2, [r3, #0]
    bfc8:	68a3      	ldr	r3, [r4, #8]
    bfca:	18ed      	adds	r5, r5, r3
    bfcc:	6863      	ldr	r3, [r4, #4]
    bfce:	3301      	adds	r3, #1
    bfd0:	60a5      	str	r5, [r4, #8]
    bfd2:	6063      	str	r3, [r4, #4]
    bfd4:	2b07      	cmp	r3, #7
    bfd6:	dd07      	ble.n	bfe8 <_vfiprintf_r+0x708>
    bfd8:	9801      	ldr	r0, [sp, #4]
    bfda:	4659      	mov	r1, fp
    bfdc:	1c22      	adds	r2, r4, #0
    bfde:	f7ff fc3f 	bl	b860 <__sprint_r>
    bfe2:	2800      	cmp	r0, #0
    bfe4:	d132      	bne.n	c04c <_vfiprintf_r+0x76c>
    bfe6:	68a5      	ldr	r5, [r4, #8]
    bfe8:	9b02      	ldr	r3, [sp, #8]
    bfea:	9804      	ldr	r0, [sp, #16]
    bfec:	4283      	cmp	r3, r0
    bfee:	da00      	bge.n	bff2 <_vfiprintf_r+0x712>
    bff0:	1c03      	adds	r3, r0, #0
    bff2:	9905      	ldr	r1, [sp, #20]
    bff4:	18c9      	adds	r1, r1, r3
    bff6:	9105      	str	r1, [sp, #20]
    bff8:	2d00      	cmp	r5, #0
    bffa:	d000      	beq.n	bffe <_vfiprintf_r+0x71e>
    bffc:	e090      	b.n	c120 <_vfiprintf_r+0x840>
    bffe:	2200      	movs	r2, #0
    c000:	6062      	str	r2, [r4, #4]
    c002:	2594      	movs	r5, #148	; 0x94
    c004:	783b      	ldrb	r3, [r7, #0]
    c006:	00ed      	lsls	r5, r5, #3
    c008:	446d      	add	r5, sp
    c00a:	2b00      	cmp	r3, #0
    c00c:	d000      	beq.n	c010 <_vfiprintf_r+0x730>
    c00e:	e4ac      	b.n	b96a <_vfiprintf_r+0x8a>
    c010:	1c3e      	adds	r6, r7, #0
    c012:	783b      	ldrb	r3, [r7, #0]
    c014:	e4ca      	b.n	b9ac <_vfiprintf_r+0xcc>
    c016:	2b00      	cmp	r3, #0
    c018:	d000      	beq.n	c01c <_vfiprintf_r+0x73c>
    c01a:	e08a      	b.n	c132 <_vfiprintf_r+0x852>
    c01c:	9900      	ldr	r1, [sp, #0]
    c01e:	07c9      	lsls	r1, r1, #31
    c020:	d400      	bmi.n	c024 <_vfiprintf_r+0x744>
    c022:	e105      	b.n	c230 <_vfiprintf_r+0x950>
    c024:	229c      	movs	r2, #156	; 0x9c
    c026:	00d2      	lsls	r2, r2, #3
    c028:	3327      	adds	r3, #39	; 0x27
    c02a:	446a      	add	r2, sp
    c02c:	2130      	movs	r1, #48	; 0x30
    c02e:	54d1      	strb	r1, [r2, r3]
    c030:	4bcc      	ldr	r3, [pc, #816]	; (c364 <_vfiprintf_r+0xa84>)
    c032:	446b      	add	r3, sp
    c034:	1ae2      	subs	r2, r4, r3
    c036:	9203      	str	r2, [sp, #12]
    c038:	930b      	str	r3, [sp, #44]	; 0x2c
    c03a:	e5a0      	b.n	bb7e <_vfiprintf_r+0x29e>
    c03c:	68a3      	ldr	r3, [r4, #8]
    c03e:	2b00      	cmp	r3, #0
    c040:	d004      	beq.n	c04c <_vfiprintf_r+0x76c>
    c042:	9801      	ldr	r0, [sp, #4]
    c044:	4659      	mov	r1, fp
    c046:	1c22      	adds	r2, r4, #0
    c048:	f7ff fc0a 	bl	b860 <__sprint_r>
    c04c:	465d      	mov	r5, fp
    c04e:	89ab      	ldrh	r3, [r5, #12]
    c050:	0658      	lsls	r0, r3, #25
    c052:	d502      	bpl.n	c05a <_vfiprintf_r+0x77a>
    c054:	2301      	movs	r3, #1
    c056:	425b      	negs	r3, r3
    c058:	9305      	str	r3, [sp, #20]
    c05a:	4bc3      	ldr	r3, [pc, #780]	; (c368 <_vfiprintf_r+0xa88>)
    c05c:	9805      	ldr	r0, [sp, #20]
    c05e:	449d      	add	sp, r3
    c060:	bc3c      	pop	{r2, r3, r4, r5}
    c062:	4690      	mov	r8, r2
    c064:	4699      	mov	r9, r3
    c066:	46a2      	mov	sl, r4
    c068:	46ab      	mov	fp, r5
    c06a:	bcf0      	pop	{r4, r5, r6, r7}
    c06c:	bc02      	pop	{r1}
    c06e:	4708      	bx	r1
    c070:	9804      	ldr	r0, [sp, #16]
    c072:	9902      	ldr	r1, [sp, #8]
    c074:	1a46      	subs	r6, r0, r1
    c076:	2e00      	cmp	r6, #0
    c078:	dc00      	bgt.n	c07c <_vfiprintf_r+0x79c>
    c07a:	e1d8      	b.n	c42e <_vfiprintf_r+0xb4e>
    c07c:	2e10      	cmp	r6, #16
    c07e:	dc00      	bgt.n	c082 <_vfiprintf_r+0x7a2>
    c080:	e258      	b.n	c534 <_vfiprintf_r+0xc54>
    c082:	4aba      	ldr	r2, [pc, #744]	; (c36c <_vfiprintf_r+0xa8c>)
    c084:	2310      	movs	r3, #16
    c086:	4692      	mov	sl, r2
    c088:	4698      	mov	r8, r3
    c08a:	465a      	mov	r2, fp
    c08c:	4699      	mov	r9, r3
    c08e:	46bb      	mov	fp, r7
    c090:	1c2b      	adds	r3, r5, #0
    c092:	44d0      	add	r8, sl
    c094:	9d01      	ldr	r5, [sp, #4]
    c096:	1c17      	adds	r7, r2, #0
    c098:	e005      	b.n	c0a6 <_vfiprintf_r+0x7c6>
    c09a:	3308      	adds	r3, #8
    c09c:	1c1a      	adds	r2, r3, #0
    c09e:	3e10      	subs	r6, #16
    c0a0:	3208      	adds	r2, #8
    c0a2:	2e10      	cmp	r6, #16
    c0a4:	dd1b      	ble.n	c0de <_vfiprintf_r+0x7fe>
    c0a6:	68a2      	ldr	r2, [r4, #8]
    c0a8:	4640      	mov	r0, r8
    c0aa:	3210      	adds	r2, #16
    c0ac:	4649      	mov	r1, r9
    c0ae:	6018      	str	r0, [r3, #0]
    c0b0:	6059      	str	r1, [r3, #4]
    c0b2:	60a2      	str	r2, [r4, #8]
    c0b4:	6862      	ldr	r2, [r4, #4]
    c0b6:	3201      	adds	r2, #1
    c0b8:	6062      	str	r2, [r4, #4]
    c0ba:	2a07      	cmp	r2, #7
    c0bc:	dded      	ble.n	c09a <_vfiprintf_r+0x7ba>
    c0be:	1c28      	adds	r0, r5, #0
    c0c0:	1c39      	adds	r1, r7, #0
    c0c2:	1c22      	adds	r2, r4, #0
    c0c4:	f7ff fbcc 	bl	b860 <__sprint_r>
    c0c8:	2800      	cmp	r0, #0
    c0ca:	d135      	bne.n	c138 <_vfiprintf_r+0x858>
    c0cc:	2295      	movs	r2, #149	; 0x95
    c0ce:	2394      	movs	r3, #148	; 0x94
    c0d0:	00d2      	lsls	r2, r2, #3
    c0d2:	00db      	lsls	r3, r3, #3
    c0d4:	3e10      	subs	r6, #16
    c0d6:	446a      	add	r2, sp
    c0d8:	446b      	add	r3, sp
    c0da:	2e10      	cmp	r6, #16
    c0dc:	dce3      	bgt.n	c0a6 <_vfiprintf_r+0x7c6>
    c0de:	1c1d      	adds	r5, r3, #0
    c0e0:	1c3b      	adds	r3, r7, #0
    c0e2:	465f      	mov	r7, fp
    c0e4:	469b      	mov	fp, r3
    c0e6:	2010      	movs	r0, #16
    c0e8:	1c03      	adds	r3, r0, #0
    c0ea:	4453      	add	r3, sl
    c0ec:	602b      	str	r3, [r5, #0]
    c0ee:	68a3      	ldr	r3, [r4, #8]
    c0f0:	18f3      	adds	r3, r6, r3
    c0f2:	606e      	str	r6, [r5, #4]
    c0f4:	60a3      	str	r3, [r4, #8]
    c0f6:	6863      	ldr	r3, [r4, #4]
    c0f8:	3301      	adds	r3, #1
    c0fa:	6063      	str	r3, [r4, #4]
    c0fc:	2b07      	cmp	r3, #7
    c0fe:	dd00      	ble.n	c102 <_vfiprintf_r+0x822>
    c100:	e198      	b.n	c434 <_vfiprintf_r+0xb54>
    c102:	1c13      	adds	r3, r2, #0
    c104:	3308      	adds	r3, #8
    c106:	1c15      	adds	r5, r2, #0
    c108:	e6c9      	b.n	be9e <_vfiprintf_r+0x5be>
    c10a:	9801      	ldr	r0, [sp, #4]
    c10c:	4659      	mov	r1, fp
    c10e:	1c22      	adds	r2, r4, #0
    c110:	f7ff fba6 	bl	b860 <__sprint_r>
    c114:	2800      	cmp	r0, #0
    c116:	d199      	bne.n	c04c <_vfiprintf_r+0x76c>
    c118:	2394      	movs	r3, #148	; 0x94
    c11a:	00db      	lsls	r3, r3, #3
    c11c:	446b      	add	r3, sp
    c11e:	e718      	b.n	bf52 <_vfiprintf_r+0x672>
    c120:	9801      	ldr	r0, [sp, #4]
    c122:	4659      	mov	r1, fp
    c124:	1c22      	adds	r2, r4, #0
    c126:	f7ff fb9b 	bl	b860 <__sprint_r>
    c12a:	2800      	cmp	r0, #0
    c12c:	d100      	bne.n	c130 <_vfiprintf_r+0x850>
    c12e:	e766      	b.n	bffe <_vfiprintf_r+0x71e>
    c130:	e78c      	b.n	c04c <_vfiprintf_r+0x76c>
    c132:	9103      	str	r1, [sp, #12]
    c134:	940b      	str	r4, [sp, #44]	; 0x2c
    c136:	e522      	b.n	bb7e <_vfiprintf_r+0x29e>
    c138:	46bb      	mov	fp, r7
    c13a:	e787      	b.n	c04c <_vfiprintf_r+0x76c>
    c13c:	9801      	ldr	r0, [sp, #4]
    c13e:	4659      	mov	r1, fp
    c140:	1c22      	adds	r2, r4, #0
    c142:	f7ff fb8d 	bl	b860 <__sprint_r>
    c146:	2800      	cmp	r0, #0
    c148:	d000      	beq.n	c14c <_vfiprintf_r+0x86c>
    c14a:	e77f      	b.n	c04c <_vfiprintf_r+0x76c>
    c14c:	2594      	movs	r5, #148	; 0x94
    c14e:	00ed      	lsls	r5, r5, #3
    c150:	446d      	add	r5, sp
    c152:	e426      	b.n	b9a2 <_vfiprintf_r+0xc2>
    c154:	9801      	ldr	r0, [sp, #4]
    c156:	4659      	mov	r1, fp
    c158:	1c22      	adds	r2, r4, #0
    c15a:	f7ff fb81 	bl	b860 <__sprint_r>
    c15e:	2800      	cmp	r0, #0
    c160:	d000      	beq.n	c164 <_vfiprintf_r+0x884>
    c162:	e773      	b.n	c04c <_vfiprintf_r+0x76c>
    c164:	2395      	movs	r3, #149	; 0x95
    c166:	2594      	movs	r5, #148	; 0x94
    c168:	00db      	lsls	r3, r3, #3
    c16a:	00ed      	lsls	r5, r5, #3
    c16c:	446b      	add	r3, sp
    c16e:	446d      	add	r5, sp
    c170:	e6e1      	b.n	bf36 <_vfiprintf_r+0x656>
    c172:	9801      	ldr	r0, [sp, #4]
    c174:	4659      	mov	r1, fp
    c176:	1c22      	adds	r2, r4, #0
    c178:	f7ff fb72 	bl	b860 <__sprint_r>
    c17c:	2800      	cmp	r0, #0
    c17e:	d000      	beq.n	c182 <_vfiprintf_r+0x8a2>
    c180:	e764      	b.n	c04c <_vfiprintf_r+0x76c>
    c182:	2395      	movs	r3, #149	; 0x95
    c184:	2594      	movs	r5, #148	; 0x94
    c186:	00db      	lsls	r3, r3, #3
    c188:	00ed      	lsls	r5, r5, #3
    c18a:	446b      	add	r3, sp
    c18c:	446d      	add	r5, sp
    c18e:	e682      	b.n	be96 <_vfiprintf_r+0x5b6>
    c190:	9801      	ldr	r0, [sp, #4]
    c192:	4659      	mov	r1, fp
    c194:	1c22      	adds	r2, r4, #0
    c196:	f7ff fb63 	bl	b860 <__sprint_r>
    c19a:	2800      	cmp	r0, #0
    c19c:	d000      	beq.n	c1a0 <_vfiprintf_r+0x8c0>
    c19e:	e755      	b.n	c04c <_vfiprintf_r+0x76c>
    c1a0:	2395      	movs	r3, #149	; 0x95
    c1a2:	2594      	movs	r5, #148	; 0x94
    c1a4:	00db      	lsls	r3, r3, #3
    c1a6:	00ed      	lsls	r5, r5, #3
    c1a8:	446b      	add	r3, sp
    c1aa:	446d      	add	r5, sp
    c1ac:	e660      	b.n	be70 <_vfiprintf_r+0x590>
    c1ae:	465b      	mov	r3, fp
    c1b0:	89d9      	ldrh	r1, [r3, #14]
    c1b2:	040b      	lsls	r3, r1, #16
    c1b4:	141b      	asrs	r3, r3, #16
    c1b6:	2b00      	cmp	r3, #0
    c1b8:	da01      	bge.n	c1be <_vfiprintf_r+0x8de>
    c1ba:	f7ff fbc3 	bl	b944 <_vfiprintf_r+0x64>
    c1be:	4658      	mov	r0, fp
    c1c0:	2302      	movs	r3, #2
    c1c2:	2487      	movs	r4, #135	; 0x87
    c1c4:	439a      	bics	r2, r3
    c1c6:	00e4      	lsls	r4, r4, #3
    c1c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    c1ca:	446c      	add	r4, sp
    c1cc:	6663      	str	r3, [r4, #100]	; 0x64
    c1ce:	69c3      	ldr	r3, [r0, #28]
    c1d0:	61e3      	str	r3, [r4, #28]
    c1d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c1d4:	81a2      	strh	r2, [r4, #12]
    c1d6:	81e1      	strh	r1, [r4, #14]
    c1d8:	6263      	str	r3, [r4, #36]	; 0x24
    c1da:	2487      	movs	r4, #135	; 0x87
    c1dc:	00e4      	lsls	r4, r4, #3
    c1de:	2380      	movs	r3, #128	; 0x80
    c1e0:	446c      	add	r4, sp
    c1e2:	00db      	lsls	r3, r3, #3
    c1e4:	a90e      	add	r1, sp, #56	; 0x38
    c1e6:	60a3      	str	r3, [r4, #8]
    c1e8:	6163      	str	r3, [r4, #20]
    c1ea:	2300      	movs	r3, #0
    c1ec:	6021      	str	r1, [r4, #0]
    c1ee:	6121      	str	r1, [r4, #16]
    c1f0:	61a3      	str	r3, [r4, #24]
    c1f2:	9801      	ldr	r0, [sp, #4]
    c1f4:	1c21      	adds	r1, r4, #0
    c1f6:	1c2a      	adds	r2, r5, #0
    c1f8:	9b07      	ldr	r3, [sp, #28]
    c1fa:	f7ff fb71 	bl	b8e0 <_vfiprintf_r>
    c1fe:	9005      	str	r0, [sp, #20]
    c200:	2800      	cmp	r0, #0
    c202:	db06      	blt.n	c212 <_vfiprintf_r+0x932>
    c204:	9801      	ldr	r0, [sp, #4]
    c206:	1c21      	adds	r1, r4, #0
    c208:	f7f8 f9fc 	bl	4604 <_fflush_r>
    c20c:	2800      	cmp	r0, #0
    c20e:	d000      	beq.n	c212 <_vfiprintf_r+0x932>
    c210:	e198      	b.n	c544 <_vfiprintf_r+0xc64>
    c212:	89a2      	ldrh	r2, [r4, #12]
    c214:	2340      	movs	r3, #64	; 0x40
    c216:	421a      	tst	r2, r3
    c218:	d100      	bne.n	c21c <_vfiprintf_r+0x93c>
    c21a:	e71e      	b.n	c05a <_vfiprintf_r+0x77a>
    c21c:	465d      	mov	r5, fp
    c21e:	89aa      	ldrh	r2, [r5, #12]
    c220:	4658      	mov	r0, fp
    c222:	4313      	orrs	r3, r2
    c224:	8183      	strh	r3, [r0, #12]
    c226:	e718      	b.n	c05a <_vfiprintf_r+0x77a>
    c228:	f7f8 fae0 	bl	47ec <__sinit>
    c22c:	f7ff fb6b 	bl	b906 <_vfiprintf_r+0x26>
    c230:	9303      	str	r3, [sp, #12]
    c232:	940b      	str	r4, [sp, #44]	; 0x2c
    c234:	e4a3      	b.n	bb7e <_vfiprintf_r+0x29e>
    c236:	200f      	movs	r0, #15
    c238:	940b      	str	r4, [sp, #44]	; 0x2c
    c23a:	9a08      	ldr	r2, [sp, #32]
    c23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c23e:	4684      	mov	ip, r0
    c240:	1c21      	adds	r1, r4, #0
    c242:	46a8      	mov	r8, r5
    c244:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    c246:	4660      	mov	r0, ip
    c248:	4010      	ands	r0, r2
    c24a:	5c28      	ldrb	r0, [r5, r0]
    c24c:	3901      	subs	r1, #1
    c24e:	0915      	lsrs	r5, r2, #4
    c250:	46a9      	mov	r9, r5
    c252:	7008      	strb	r0, [r1, #0]
    c254:	0718      	lsls	r0, r3, #28
    c256:	1c05      	adds	r5, r0, #0
    c258:	4648      	mov	r0, r9
    c25a:	4305      	orrs	r5, r0
    c25c:	0918      	lsrs	r0, r3, #4
    c25e:	1c2a      	adds	r2, r5, #0
    c260:	1c03      	adds	r3, r0, #0
    c262:	4305      	orrs	r5, r0
    c264:	d1ee      	bne.n	c244 <_vfiprintf_r+0x964>
    c266:	1a60      	subs	r0, r4, r1
    c268:	910b      	str	r1, [sp, #44]	; 0x2c
    c26a:	4645      	mov	r5, r8
    c26c:	9208      	str	r2, [sp, #32]
    c26e:	9309      	str	r3, [sp, #36]	; 0x24
    c270:	9003      	str	r0, [sp, #12]
    c272:	e484      	b.n	bb7e <_vfiprintf_r+0x29e>
    c274:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c276:	2b00      	cmp	r3, #0
    c278:	d100      	bne.n	c27c <_vfiprintf_r+0x99c>
    c27a:	e07e      	b.n	c37a <_vfiprintf_r+0xa9a>
    c27c:	46a9      	mov	r9, r5
    c27e:	46b0      	mov	r8, r6
    c280:	940b      	str	r4, [sp, #44]	; 0x2c
    c282:	9d08      	ldr	r5, [sp, #32]
    c284:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c286:	46ba      	mov	sl, r7
    c288:	1c27      	adds	r7, r4, #0
    c28a:	1c28      	adds	r0, r5, #0
    c28c:	1c31      	adds	r1, r6, #0
    c28e:	220a      	movs	r2, #10
    c290:	2300      	movs	r3, #0
    c292:	f001 fd1d 	bl	dcd0 <____aeabi_uldivmod_from_thumb>
    c296:	3f01      	subs	r7, #1
    c298:	3230      	adds	r2, #48	; 0x30
    c29a:	703a      	strb	r2, [r7, #0]
    c29c:	1c28      	adds	r0, r5, #0
    c29e:	1c31      	adds	r1, r6, #0
    c2a0:	220a      	movs	r2, #10
    c2a2:	2300      	movs	r3, #0
    c2a4:	f001 fd14 	bl	dcd0 <____aeabi_uldivmod_from_thumb>
    c2a8:	1c02      	adds	r2, r0, #0
    c2aa:	1c05      	adds	r5, r0, #0
    c2ac:	1c0e      	adds	r6, r1, #0
    c2ae:	430a      	orrs	r2, r1
    c2b0:	d1eb      	bne.n	c28a <_vfiprintf_r+0x9aa>
    c2b2:	970b      	str	r7, [sp, #44]	; 0x2c
    c2b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2b6:	1ae3      	subs	r3, r4, r3
    c2b8:	9508      	str	r5, [sp, #32]
    c2ba:	9609      	str	r6, [sp, #36]	; 0x24
    c2bc:	4657      	mov	r7, sl
    c2be:	464d      	mov	r5, r9
    c2c0:	4646      	mov	r6, r8
    c2c2:	9303      	str	r3, [sp, #12]
    c2c4:	e45b      	b.n	bb7e <_vfiprintf_r+0x29e>
    c2c6:	9a00      	ldr	r2, [sp, #0]
    c2c8:	06d2      	lsls	r2, r2, #27
    c2ca:	d468      	bmi.n	c39e <_vfiprintf_r+0xabe>
    c2cc:	9900      	ldr	r1, [sp, #0]
    c2ce:	0649      	lsls	r1, r1, #25
    c2d0:	d565      	bpl.n	c39e <_vfiprintf_r+0xabe>
    c2d2:	9a07      	ldr	r2, [sp, #28]
    c2d4:	2300      	movs	r3, #0
    c2d6:	5ed3      	ldrsh	r3, [r2, r3]
    c2d8:	9308      	str	r3, [sp, #32]
    c2da:	17db      	asrs	r3, r3, #31
    c2dc:	9309      	str	r3, [sp, #36]	; 0x24
    c2de:	9b07      	ldr	r3, [sp, #28]
    c2e0:	3304      	adds	r3, #4
    c2e2:	9307      	str	r3, [sp, #28]
    c2e4:	e46e      	b.n	bbc4 <_vfiprintf_r+0x2e4>
    c2e6:	9800      	ldr	r0, [sp, #0]
    c2e8:	2310      	movs	r3, #16
    c2ea:	4003      	ands	r3, r0
    c2ec:	d000      	beq.n	c2f0 <_vfiprintf_r+0xa10>
    c2ee:	e082      	b.n	c3f6 <_vfiprintf_r+0xb16>
    c2f0:	9800      	ldr	r0, [sp, #0]
    c2f2:	2240      	movs	r2, #64	; 0x40
    c2f4:	4002      	ands	r2, r0
    c2f6:	d100      	bne.n	c2fa <_vfiprintf_r+0xa1a>
    c2f8:	e0b3      	b.n	c462 <_vfiprintf_r+0xb82>
    c2fa:	9907      	ldr	r1, [sp, #28]
    c2fc:	8809      	ldrh	r1, [r1, #0]
    c2fe:	9309      	str	r3, [sp, #36]	; 0x24
    c300:	9108      	str	r1, [sp, #32]
    c302:	9a07      	ldr	r2, [sp, #28]
    c304:	3204      	adds	r2, #4
    c306:	1e4b      	subs	r3, r1, #1
    c308:	4199      	sbcs	r1, r3
    c30a:	9207      	str	r2, [sp, #28]
    c30c:	2301      	movs	r3, #1
    c30e:	f7ff fbf1 	bl	baf4 <_vfiprintf_r+0x214>
    c312:	9800      	ldr	r0, [sp, #0]
    c314:	2210      	movs	r2, #16
    c316:	4002      	ands	r2, r0
    c318:	d162      	bne.n	c3e0 <_vfiprintf_r+0xb00>
    c31a:	9800      	ldr	r0, [sp, #0]
    c31c:	2340      	movs	r3, #64	; 0x40
    c31e:	4003      	ands	r3, r0
    c320:	d100      	bne.n	c324 <_vfiprintf_r+0xa44>
    c322:	e0c1      	b.n	c4a8 <_vfiprintf_r+0xbc8>
    c324:	9907      	ldr	r1, [sp, #28]
    c326:	8809      	ldrh	r1, [r1, #0]
    c328:	9108      	str	r1, [sp, #32]
    c32a:	1e4b      	subs	r3, r1, #1
    c32c:	4199      	sbcs	r1, r3
    c32e:	9b07      	ldr	r3, [sp, #28]
    c330:	3304      	adds	r3, #4
    c332:	9307      	str	r3, [sp, #28]
    c334:	9209      	str	r2, [sp, #36]	; 0x24
    c336:	1c13      	adds	r3, r2, #0
    c338:	f7ff fbdc 	bl	baf4 <_vfiprintf_r+0x214>
    c33c:	9801      	ldr	r0, [sp, #4]
    c33e:	4659      	mov	r1, fp
    c340:	1c22      	adds	r2, r4, #0
    c342:	f7ff fa8d 	bl	b860 <__sprint_r>
    c346:	2800      	cmp	r0, #0
    c348:	d000      	beq.n	c34c <_vfiprintf_r+0xa6c>
    c34a:	e67f      	b.n	c04c <_vfiprintf_r+0x76c>
    c34c:	2395      	movs	r3, #149	; 0x95
    c34e:	2594      	movs	r5, #148	; 0x94
    c350:	00db      	lsls	r3, r3, #3
    c352:	00ed      	lsls	r5, r5, #3
    c354:	446b      	add	r3, sp
    c356:	446d      	add	r5, sp
    c358:	e577      	b.n	be4a <_vfiprintf_r+0x56a>
    c35a:	783b      	ldrb	r3, [r7, #0]
    c35c:	9207      	str	r2, [sp, #28]
    c35e:	f7ff fb3a 	bl	b9d6 <_vfiprintf_r+0xf6>
    c362:	46c0      	nop			; (mov r8, r8)
    c364:	00000507 	.word	0x00000507
    c368:	0000051c 	.word	0x0000051c
    c36c:	0000e498 	.word	0x0000e498
    c370:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c372:	1aa2      	subs	r2, r4, r2
    c374:	9203      	str	r2, [sp, #12]
    c376:	f7ff fc02 	bl	bb7e <_vfiprintf_r+0x29e>
    c37a:	9808      	ldr	r0, [sp, #32]
    c37c:	2809      	cmp	r0, #9
    c37e:	d900      	bls.n	c382 <_vfiprintf_r+0xaa2>
    c380:	e77c      	b.n	c27c <_vfiprintf_r+0x99c>
    c382:	229c      	movs	r2, #156	; 0x9c
    c384:	1c01      	adds	r1, r0, #0
    c386:	00d2      	lsls	r2, r2, #3
    c388:	3130      	adds	r1, #48	; 0x30
    c38a:	3327      	adds	r3, #39	; 0x27
    c38c:	446a      	add	r2, sp
    c38e:	54d1      	strb	r1, [r2, r3]
    c390:	4b75      	ldr	r3, [pc, #468]	; (c568 <_vfiprintf_r+0xc88>)
    c392:	446b      	add	r3, sp
    c394:	1ae1      	subs	r1, r4, r3
    c396:	9103      	str	r1, [sp, #12]
    c398:	930b      	str	r3, [sp, #44]	; 0x2c
    c39a:	f7ff fbf0 	bl	bb7e <_vfiprintf_r+0x29e>
    c39e:	9807      	ldr	r0, [sp, #28]
    c3a0:	6803      	ldr	r3, [r0, #0]
    c3a2:	9308      	str	r3, [sp, #32]
    c3a4:	17db      	asrs	r3, r3, #31
    c3a6:	9309      	str	r3, [sp, #36]	; 0x24
    c3a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    c3aa:	3004      	adds	r0, #4
    c3ac:	9007      	str	r0, [sp, #28]
    c3ae:	2900      	cmp	r1, #0
    c3b0:	db01      	blt.n	c3b6 <_vfiprintf_r+0xad6>
    c3b2:	f7ff fc0c 	bl	bbce <_vfiprintf_r+0x2ee>
    c3b6:	9a08      	ldr	r2, [sp, #32]
    c3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3ba:	2100      	movs	r1, #0
    c3bc:	4250      	negs	r0, r2
    c3be:	4199      	sbcs	r1, r3
    c3c0:	9008      	str	r0, [sp, #32]
    c3c2:	9109      	str	r1, [sp, #36]	; 0x24
    c3c4:	4869      	ldr	r0, [pc, #420]	; (c56c <_vfiprintf_r+0xc8c>)
    c3c6:	232d      	movs	r3, #45	; 0x2d
    c3c8:	4468      	add	r0, sp
    c3ca:	7003      	strb	r3, [r0, #0]
    c3cc:	f7ff fbff 	bl	bbce <_vfiprintf_r+0x2ee>
    c3d0:	9a07      	ldr	r2, [sp, #28]
    c3d2:	9807      	ldr	r0, [sp, #28]
    c3d4:	6812      	ldr	r2, [r2, #0]
    c3d6:	3004      	adds	r0, #4
    c3d8:	9208      	str	r2, [sp, #32]
    c3da:	9109      	str	r1, [sp, #36]	; 0x24
    c3dc:	9007      	str	r0, [sp, #28]
    c3de:	e47b      	b.n	bcd8 <_vfiprintf_r+0x3f8>
    c3e0:	9907      	ldr	r1, [sp, #28]
    c3e2:	6809      	ldr	r1, [r1, #0]
    c3e4:	9108      	str	r1, [sp, #32]
    c3e6:	1e4a      	subs	r2, r1, #1
    c3e8:	4191      	sbcs	r1, r2
    c3ea:	9a07      	ldr	r2, [sp, #28]
    c3ec:	3204      	adds	r2, #4
    c3ee:	9309      	str	r3, [sp, #36]	; 0x24
    c3f0:	9207      	str	r2, [sp, #28]
    c3f2:	f7ff fb7f 	bl	baf4 <_vfiprintf_r+0x214>
    c3f6:	9907      	ldr	r1, [sp, #28]
    c3f8:	6809      	ldr	r1, [r1, #0]
    c3fa:	9209      	str	r2, [sp, #36]	; 0x24
    c3fc:	9108      	str	r1, [sp, #32]
    c3fe:	e780      	b.n	c302 <_vfiprintf_r+0xa22>
    c400:	9807      	ldr	r0, [sp, #28]
    c402:	9905      	ldr	r1, [sp, #20]
    c404:	6803      	ldr	r3, [r0, #0]
    c406:	17ca      	asrs	r2, r1, #31
    c408:	3004      	adds	r0, #4
    c40a:	6019      	str	r1, [r3, #0]
    c40c:	605a      	str	r2, [r3, #4]
    c40e:	9007      	str	r0, [sp, #28]
    c410:	f7ff faa7 	bl	b962 <_vfiprintf_r+0x82>
    c414:	783b      	ldrb	r3, [r7, #0]
    c416:	f7ff fade 	bl	b9d6 <_vfiprintf_r+0xf6>
    c41a:	9a00      	ldr	r2, [sp, #0]
    c41c:	3b4c      	subs	r3, #76	; 0x4c
    c41e:	431a      	orrs	r2, r3
    c420:	9200      	str	r2, [sp, #0]
    c422:	3701      	adds	r7, #1
    c424:	783b      	ldrb	r3, [r7, #0]
    c426:	f7ff fad6 	bl	b9d6 <_vfiprintf_r+0xf6>
    c42a:	46ab      	mov	fp, r5
    c42c:	e60e      	b.n	c04c <_vfiprintf_r+0x76c>
    c42e:	1c2b      	adds	r3, r5, #0
    c430:	3308      	adds	r3, #8
    c432:	e534      	b.n	be9e <_vfiprintf_r+0x5be>
    c434:	9801      	ldr	r0, [sp, #4]
    c436:	4659      	mov	r1, fp
    c438:	1c22      	adds	r2, r4, #0
    c43a:	f7ff fa11 	bl	b860 <__sprint_r>
    c43e:	2800      	cmp	r0, #0
    c440:	d000      	beq.n	c444 <_vfiprintf_r+0xb64>
    c442:	e603      	b.n	c04c <_vfiprintf_r+0x76c>
    c444:	2395      	movs	r3, #149	; 0x95
    c446:	2594      	movs	r5, #148	; 0x94
    c448:	00db      	lsls	r3, r3, #3
    c44a:	00ed      	lsls	r5, r5, #3
    c44c:	446b      	add	r3, sp
    c44e:	446d      	add	r5, sp
    c450:	e525      	b.n	be9e <_vfiprintf_r+0x5be>
    c452:	1c1a      	adds	r2, r3, #0
    c454:	4b46      	ldr	r3, [pc, #280]	; (c570 <_vfiprintf_r+0xc90>)
    c456:	469a      	mov	sl, r3
    c458:	e55c      	b.n	bf14 <_vfiprintf_r+0x634>
    c45a:	2200      	movs	r2, #0
    c45c:	9206      	str	r2, [sp, #24]
    c45e:	f7ff fb8f 	bl	bb80 <_vfiprintf_r+0x2a0>
    c462:	9b07      	ldr	r3, [sp, #28]
    c464:	9807      	ldr	r0, [sp, #28]
    c466:	681b      	ldr	r3, [r3, #0]
    c468:	3004      	adds	r0, #4
    c46a:	1c19      	adds	r1, r3, #0
    c46c:	9308      	str	r3, [sp, #32]
    c46e:	9209      	str	r2, [sp, #36]	; 0x24
    c470:	1e4b      	subs	r3, r1, #1
    c472:	4199      	sbcs	r1, r3
    c474:	9007      	str	r0, [sp, #28]
    c476:	2301      	movs	r3, #1
    c478:	f7ff fb3c 	bl	baf4 <_vfiprintf_r+0x214>
    c47c:	9a00      	ldr	r2, [sp, #0]
    c47e:	0652      	lsls	r2, r2, #25
    c480:	d530      	bpl.n	c4e4 <_vfiprintf_r+0xc04>
    c482:	9807      	ldr	r0, [sp, #28]
    c484:	4669      	mov	r1, sp
    c486:	2214      	movs	r2, #20
    c488:	6803      	ldr	r3, [r0, #0]
    c48a:	5a51      	ldrh	r1, [r2, r1]
    c48c:	3004      	adds	r0, #4
    c48e:	8019      	strh	r1, [r3, #0]
    c490:	9007      	str	r0, [sp, #28]
    c492:	f7ff fa66 	bl	b962 <_vfiprintf_r+0x82>
    c496:	9807      	ldr	r0, [sp, #28]
    c498:	6800      	ldr	r0, [r0, #0]
    c49a:	9109      	str	r1, [sp, #36]	; 0x24
    c49c:	9907      	ldr	r1, [sp, #28]
    c49e:	3104      	adds	r1, #4
    c4a0:	9008      	str	r0, [sp, #32]
    c4a2:	9107      	str	r1, [sp, #28]
    c4a4:	f7ff fc18 	bl	bcd8 <_vfiprintf_r+0x3f8>
    c4a8:	9807      	ldr	r0, [sp, #28]
    c4aa:	6800      	ldr	r0, [r0, #0]
    c4ac:	1c01      	adds	r1, r0, #0
    c4ae:	1e4a      	subs	r2, r1, #1
    c4b0:	4191      	sbcs	r1, r2
    c4b2:	9a07      	ldr	r2, [sp, #28]
    c4b4:	3204      	adds	r2, #4
    c4b6:	9008      	str	r0, [sp, #32]
    c4b8:	9309      	str	r3, [sp, #36]	; 0x24
    c4ba:	9207      	str	r2, [sp, #28]
    c4bc:	f7ff fb1a 	bl	baf4 <_vfiprintf_r+0x214>
    c4c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c4c2:	f7f9 f8a3 	bl	560c <strlen>
    c4c6:	2200      	movs	r2, #0
    c4c8:	9003      	str	r0, [sp, #12]
    c4ca:	9206      	str	r2, [sp, #24]
    c4cc:	f7ff fb58 	bl	bb80 <_vfiprintf_r+0x2a0>
    c4d0:	9603      	str	r6, [sp, #12]
    c4d2:	2e06      	cmp	r6, #6
    c4d4:	d919      	bls.n	c50a <_vfiprintf_r+0xc2a>
    c4d6:	2106      	movs	r1, #6
    c4d8:	9103      	str	r1, [sp, #12]
    c4da:	9102      	str	r1, [sp, #8]
    c4dc:	4b25      	ldr	r3, [pc, #148]	; (c574 <_vfiprintf_r+0xc94>)
    c4de:	930b      	str	r3, [sp, #44]	; 0x2c
    c4e0:	f7ff fa8d 	bl	b9fe <_vfiprintf_r+0x11e>
    c4e4:	9a07      	ldr	r2, [sp, #28]
    c4e6:	9805      	ldr	r0, [sp, #20]
    c4e8:	6813      	ldr	r3, [r2, #0]
    c4ea:	3204      	adds	r2, #4
    c4ec:	6018      	str	r0, [r3, #0]
    c4ee:	9207      	str	r2, [sp, #28]
    c4f0:	f7ff fa37 	bl	b962 <_vfiprintf_r+0x82>
    c4f4:	491e      	ldr	r1, [pc, #120]	; (c570 <_vfiprintf_r+0xc90>)
    c4f6:	1c2a      	adds	r2, r5, #0
    c4f8:	3208      	adds	r2, #8
    c4fa:	468a      	mov	sl, r1
    c4fc:	f7ff facb 	bl	ba96 <_vfiprintf_r+0x1b6>
    c500:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c502:	1a20      	subs	r0, r4, r0
    c504:	9003      	str	r0, [sp, #12]
    c506:	f7ff fb3a 	bl	bb7e <_vfiprintf_r+0x29e>
    c50a:	9a03      	ldr	r2, [sp, #12]
    c50c:	43d3      	mvns	r3, r2
    c50e:	17db      	asrs	r3, r3, #31
    c510:	401a      	ands	r2, r3
    c512:	9202      	str	r2, [sp, #8]
    c514:	e7e2      	b.n	c4dc <_vfiprintf_r+0xbfc>
    c516:	4816      	ldr	r0, [pc, #88]	; (c570 <_vfiprintf_r+0xc90>)
    c518:	4682      	mov	sl, r0
    c51a:	e552      	b.n	bfc2 <_vfiprintf_r+0x6e2>
    c51c:	9801      	ldr	r0, [sp, #4]
    c51e:	4659      	mov	r1, fp
    c520:	f7fb ffc6 	bl	84b0 <__swsetup_r>
    c524:	2800      	cmp	r0, #0
    c526:	d000      	beq.n	c52a <_vfiprintf_r+0xc4a>
    c528:	e594      	b.n	c054 <_vfiprintf_r+0x774>
    c52a:	4659      	mov	r1, fp
    c52c:	898a      	ldrh	r2, [r1, #12]
    c52e:	1c13      	adds	r3, r2, #0
    c530:	f7ff fa02 	bl	b938 <_vfiprintf_r+0x58>
    c534:	1c1a      	adds	r2, r3, #0
    c536:	4b0e      	ldr	r3, [pc, #56]	; (c570 <_vfiprintf_r+0xc90>)
    c538:	469a      	mov	sl, r3
    c53a:	e5d4      	b.n	c0e6 <_vfiprintf_r+0x806>
    c53c:	9603      	str	r6, [sp, #12]
    c53e:	9006      	str	r0, [sp, #24]
    c540:	f7ff fb1e 	bl	bb80 <_vfiprintf_r+0x2a0>
    c544:	2301      	movs	r3, #1
    c546:	425b      	negs	r3, r3
    c548:	9305      	str	r3, [sp, #20]
    c54a:	e662      	b.n	c212 <_vfiprintf_r+0x932>
    c54c:	9b07      	ldr	r3, [sp, #28]
    c54e:	9a07      	ldr	r2, [sp, #28]
    c550:	681e      	ldr	r6, [r3, #0]
    c552:	3204      	adds	r2, #4
    c554:	2e00      	cmp	r6, #0
    c556:	db00      	blt.n	c55a <_vfiprintf_r+0xc7a>
    c558:	e6ff      	b.n	c35a <_vfiprintf_r+0xa7a>
    c55a:	2601      	movs	r6, #1
    c55c:	783b      	ldrb	r3, [r7, #0]
    c55e:	4276      	negs	r6, r6
    c560:	9207      	str	r2, [sp, #28]
    c562:	f7ff fa38 	bl	b9d6 <_vfiprintf_r+0xf6>
    c566:	46c0      	nop			; (mov r8, r8)
    c568:	00000507 	.word	0x00000507
    c56c:	00000517 	.word	0x00000517
    c570:	0000e498 	.word	0x0000e498
    c574:	0000e954 	.word	0x0000e954

0000c578 <vfiprintf>:
    c578:	b538      	push	{r3, r4, r5, lr}
    c57a:	1c13      	adds	r3, r2, #0
    c57c:	4a05      	ldr	r2, [pc, #20]	; (c594 <vfiprintf+0x1c>)
    c57e:	1c05      	adds	r5, r0, #0
    c580:	1c0c      	adds	r4, r1, #0
    c582:	6810      	ldr	r0, [r2, #0]
    c584:	1c29      	adds	r1, r5, #0
    c586:	1c22      	adds	r2, r4, #0
    c588:	f7ff f9aa 	bl	b8e0 <_vfiprintf_r>
    c58c:	bc38      	pop	{r3, r4, r5}
    c58e:	bc02      	pop	{r1}
    c590:	4708      	bx	r1
    c592:	46c0      	nop			; (mov r8, r8)
    c594:	40000000 	.word	0x40000000

0000c598 <_calloc_r>:
    c598:	b510      	push	{r4, lr}
    c59a:	4351      	muls	r1, r2
    c59c:	f7f8 fbae 	bl	4cfc <_malloc_r>
    c5a0:	1e04      	subs	r4, r0, #0
    c5a2:	d01f      	beq.n	c5e4 <_calloc_r+0x4c>
    c5a4:	1c23      	adds	r3, r4, #0
    c5a6:	3b08      	subs	r3, #8
    c5a8:	685a      	ldr	r2, [r3, #4]
    c5aa:	2303      	movs	r3, #3
    c5ac:	439a      	bics	r2, r3
    c5ae:	3a04      	subs	r2, #4
    c5b0:	2a24      	cmp	r2, #36	; 0x24
    c5b2:	d81b      	bhi.n	c5ec <_calloc_r+0x54>
    c5b4:	1c23      	adds	r3, r4, #0
    c5b6:	2a13      	cmp	r2, #19
    c5b8:	d90f      	bls.n	c5da <_calloc_r+0x42>
    c5ba:	2100      	movs	r1, #0
    c5bc:	1c20      	adds	r0, r4, #0
    c5be:	c002      	stmia	r0!, {r1}
    c5c0:	6061      	str	r1, [r4, #4]
    c5c2:	1d03      	adds	r3, r0, #4
    c5c4:	2a1b      	cmp	r2, #27
    c5c6:	d908      	bls.n	c5da <_calloc_r+0x42>
    c5c8:	6041      	str	r1, [r0, #4]
    c5ca:	1d18      	adds	r0, r3, #4
    c5cc:	6059      	str	r1, [r3, #4]
    c5ce:	3308      	adds	r3, #8
    c5d0:	2a24      	cmp	r2, #36	; 0x24
    c5d2:	d102      	bne.n	c5da <_calloc_r+0x42>
    c5d4:	6041      	str	r1, [r0, #4]
    c5d6:	6059      	str	r1, [r3, #4]
    c5d8:	3308      	adds	r3, #8
    c5da:	2100      	movs	r1, #0
    c5dc:	1c1a      	adds	r2, r3, #0
    c5de:	c202      	stmia	r2!, {r1}
    c5e0:	6059      	str	r1, [r3, #4]
    c5e2:	6051      	str	r1, [r2, #4]
    c5e4:	1c20      	adds	r0, r4, #0
    c5e6:	bc10      	pop	{r4}
    c5e8:	bc02      	pop	{r1}
    c5ea:	4708      	bx	r1
    c5ec:	1c20      	adds	r0, r4, #0
    c5ee:	2100      	movs	r1, #0
    c5f0:	f7f8 fe88 	bl	5304 <memset>
    c5f4:	e7f6      	b.n	c5e4 <_calloc_r+0x4c>
    c5f6:	46c0      	nop			; (mov r8, r8)

0000c5f8 <_fputwc_r>:
    c5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5fa:	464f      	mov	r7, r9
    c5fc:	4646      	mov	r6, r8
    c5fe:	b4c0      	push	{r6, r7}
    c600:	1c14      	adds	r4, r2, #0
    c602:	2380      	movs	r3, #128	; 0x80
    c604:	8992      	ldrh	r2, [r2, #12]
    c606:	019b      	lsls	r3, r3, #6
    c608:	b083      	sub	sp, #12
    c60a:	4681      	mov	r9, r0
    c60c:	4688      	mov	r8, r1
    c60e:	421a      	tst	r2, r3
    c610:	d104      	bne.n	c61c <_fputwc_r+0x24>
    c612:	431a      	orrs	r2, r3
    c614:	81a2      	strh	r2, [r4, #12]
    c616:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c618:	4313      	orrs	r3, r2
    c61a:	6663      	str	r3, [r4, #100]	; 0x64
    c61c:	f7fd fa14 	bl	9a48 <__locale_mb_cur_max>
    c620:	2801      	cmp	r0, #1
    c622:	d044      	beq.n	c6ae <_fputwc_r+0xb6>
    c624:	af01      	add	r7, sp, #4
    c626:	1c23      	adds	r3, r4, #0
    c628:	335c      	adds	r3, #92	; 0x5c
    c62a:	4648      	mov	r0, r9
    c62c:	1c39      	adds	r1, r7, #0
    c62e:	4642      	mov	r2, r8
    c630:	f000 f8fe 	bl	c830 <_wcrtomb_r>
    c634:	1c06      	adds	r6, r0, #0
    c636:	1c43      	adds	r3, r0, #1
    c638:	d023      	beq.n	c682 <_fputwc_r+0x8a>
    c63a:	2800      	cmp	r0, #0
    c63c:	d02c      	beq.n	c698 <_fputwc_r+0xa0>
    c63e:	2500      	movs	r5, #0
    c640:	e008      	b.n	c654 <_fputwc_r+0x5c>
    c642:	6823      	ldr	r3, [r4, #0]
    c644:	5d7a      	ldrb	r2, [r7, r5]
    c646:	701a      	strb	r2, [r3, #0]
    c648:	6823      	ldr	r3, [r4, #0]
    c64a:	3301      	adds	r3, #1
    c64c:	6023      	str	r3, [r4, #0]
    c64e:	3501      	adds	r5, #1
    c650:	42b5      	cmp	r5, r6
    c652:	d221      	bcs.n	c698 <_fputwc_r+0xa0>
    c654:	68a3      	ldr	r3, [r4, #8]
    c656:	3b01      	subs	r3, #1
    c658:	60a3      	str	r3, [r4, #8]
    c65a:	2b00      	cmp	r3, #0
    c65c:	daf1      	bge.n	c642 <_fputwc_r+0x4a>
    c65e:	69a2      	ldr	r2, [r4, #24]
    c660:	4293      	cmp	r3, r2
    c662:	db1b      	blt.n	c69c <_fputwc_r+0xa4>
    c664:	6823      	ldr	r3, [r4, #0]
    c666:	5d7a      	ldrb	r2, [r7, r5]
    c668:	701a      	strb	r2, [r3, #0]
    c66a:	6823      	ldr	r3, [r4, #0]
    c66c:	7819      	ldrb	r1, [r3, #0]
    c66e:	290a      	cmp	r1, #10
    c670:	d015      	beq.n	c69e <_fputwc_r+0xa6>
    c672:	3301      	adds	r3, #1
    c674:	6023      	str	r3, [r4, #0]
    c676:	2200      	movs	r2, #0
    c678:	2a00      	cmp	r2, #0
    c67a:	d0e8      	beq.n	c64e <_fputwc_r+0x56>
    c67c:	2001      	movs	r0, #1
    c67e:	4240      	negs	r0, r0
    c680:	e003      	b.n	c68a <_fputwc_r+0x92>
    c682:	89a3      	ldrh	r3, [r4, #12]
    c684:	2240      	movs	r2, #64	; 0x40
    c686:	4313      	orrs	r3, r2
    c688:	81a3      	strh	r3, [r4, #12]
    c68a:	b003      	add	sp, #12
    c68c:	bc0c      	pop	{r2, r3}
    c68e:	4690      	mov	r8, r2
    c690:	4699      	mov	r9, r3
    c692:	bcf0      	pop	{r4, r5, r6, r7}
    c694:	bc02      	pop	{r1}
    c696:	4708      	bx	r1
    c698:	4640      	mov	r0, r8
    c69a:	e7f6      	b.n	c68a <_fputwc_r+0x92>
    c69c:	5d79      	ldrb	r1, [r7, r5]
    c69e:	1c22      	adds	r2, r4, #0
    c6a0:	4648      	mov	r0, r9
    c6a2:	f7fb fe95 	bl	83d0 <__swbuf_r>
    c6a6:	1c42      	adds	r2, r0, #1
    c6a8:	4253      	negs	r3, r2
    c6aa:	415a      	adcs	r2, r3
    c6ac:	e7e4      	b.n	c678 <_fputwc_r+0x80>
    c6ae:	23ff      	movs	r3, #255	; 0xff
    c6b0:	4598      	cmp	r8, r3
    c6b2:	d8b7      	bhi.n	c624 <_fputwc_r+0x2c>
    c6b4:	3bff      	subs	r3, #255	; 0xff
    c6b6:	4598      	cmp	r8, r3
    c6b8:	d0b4      	beq.n	c624 <_fputwc_r+0x2c>
    c6ba:	af01      	add	r7, sp, #4
    c6bc:	4643      	mov	r3, r8
    c6be:	703b      	strb	r3, [r7, #0]
    c6c0:	1c06      	adds	r6, r0, #0
    c6c2:	e7bc      	b.n	c63e <_fputwc_r+0x46>

0000c6c4 <fputwc>:
    c6c4:	b570      	push	{r4, r5, r6, lr}
    c6c6:	4c09      	ldr	r4, [pc, #36]	; (c6ec <fputwc+0x28>)
    c6c8:	1c06      	adds	r6, r0, #0
    c6ca:	6820      	ldr	r0, [r4, #0]
    c6cc:	1c0d      	adds	r5, r1, #0
    c6ce:	2800      	cmp	r0, #0
    c6d0:	d005      	beq.n	c6de <fputwc+0x1a>
    c6d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	d102      	bne.n	c6de <fputwc+0x1a>
    c6d8:	f7f8 f888 	bl	47ec <__sinit>
    c6dc:	6820      	ldr	r0, [r4, #0]
    c6de:	1c31      	adds	r1, r6, #0
    c6e0:	1c2a      	adds	r2, r5, #0
    c6e2:	f7ff ff89 	bl	c5f8 <_fputwc_r>
    c6e6:	bc70      	pop	{r4, r5, r6}
    c6e8:	bc02      	pop	{r1}
    c6ea:	4708      	bx	r1
    c6ec:	40000000 	.word	0x40000000

0000c6f0 <_isatty_r>:
    c6f0:	b538      	push	{r3, r4, r5, lr}
    c6f2:	4c08      	ldr	r4, [pc, #32]	; (c714 <_isatty_r+0x24>)
    c6f4:	2300      	movs	r3, #0
    c6f6:	1c05      	adds	r5, r0, #0
    c6f8:	6023      	str	r3, [r4, #0]
    c6fa:	1c08      	adds	r0, r1, #0
    c6fc:	f7f5 fa88 	bl	1c10 <_isatty>
    c700:	1c43      	adds	r3, r0, #1
    c702:	d002      	beq.n	c70a <_isatty_r+0x1a>
    c704:	bc38      	pop	{r3, r4, r5}
    c706:	bc02      	pop	{r1}
    c708:	4708      	bx	r1
    c70a:	6823      	ldr	r3, [r4, #0]
    c70c:	2b00      	cmp	r3, #0
    c70e:	d0f9      	beq.n	c704 <_isatty_r+0x14>
    c710:	602b      	str	r3, [r5, #0]
    c712:	e7f7      	b.n	c704 <_isatty_r+0x14>
    c714:	40000b8c 	.word	0x40000b8c

0000c718 <cleanup_glue>:
    c718:	b538      	push	{r3, r4, r5, lr}
    c71a:	1c0c      	adds	r4, r1, #0
    c71c:	6809      	ldr	r1, [r1, #0]
    c71e:	1c05      	adds	r5, r0, #0
    c720:	2900      	cmp	r1, #0
    c722:	d001      	beq.n	c728 <cleanup_glue+0x10>
    c724:	f7ff fff8 	bl	c718 <cleanup_glue>
    c728:	1c28      	adds	r0, r5, #0
    c72a:	1c21      	adds	r1, r4, #0
    c72c:	f7f8 f99c 	bl	4a68 <_free_r>
    c730:	bc38      	pop	{r3, r4, r5}
    c732:	bc01      	pop	{r0}
    c734:	4700      	bx	r0
    c736:	46c0      	nop			; (mov r8, r8)

0000c738 <_reclaim_reent>:
    c738:	b570      	push	{r4, r5, r6, lr}
    c73a:	4b28      	ldr	r3, [pc, #160]	; (c7dc <_reclaim_reent+0xa4>)
    c73c:	681b      	ldr	r3, [r3, #0]
    c73e:	1c05      	adds	r5, r0, #0
    c740:	4298      	cmp	r0, r3
    c742:	d03a      	beq.n	c7ba <_reclaim_reent+0x82>
    c744:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    c746:	2b00      	cmp	r3, #0
    c748:	d016      	beq.n	c778 <_reclaim_reent+0x40>
    c74a:	2200      	movs	r2, #0
    c74c:	1c16      	adds	r6, r2, #0
    c74e:	0092      	lsls	r2, r2, #2
    c750:	5899      	ldr	r1, [r3, r2]
    c752:	2900      	cmp	r1, #0
    c754:	d101      	bne.n	c75a <_reclaim_reent+0x22>
    c756:	e007      	b.n	c768 <_reclaim_reent+0x30>
    c758:	1c21      	adds	r1, r4, #0
    c75a:	680c      	ldr	r4, [r1, #0]
    c75c:	1c28      	adds	r0, r5, #0
    c75e:	f7f8 f983 	bl	4a68 <_free_r>
    c762:	2c00      	cmp	r4, #0
    c764:	d1f8      	bne.n	c758 <_reclaim_reent+0x20>
    c766:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    c768:	3601      	adds	r6, #1
    c76a:	1c32      	adds	r2, r6, #0
    c76c:	2e20      	cmp	r6, #32
    c76e:	d1ee      	bne.n	c74e <_reclaim_reent+0x16>
    c770:	1c28      	adds	r0, r5, #0
    c772:	1c19      	adds	r1, r3, #0
    c774:	f7f8 f978 	bl	4a68 <_free_r>
    c778:	6c29      	ldr	r1, [r5, #64]	; 0x40
    c77a:	2900      	cmp	r1, #0
    c77c:	d002      	beq.n	c784 <_reclaim_reent+0x4c>
    c77e:	1c28      	adds	r0, r5, #0
    c780:	f7f8 f972 	bl	4a68 <_free_r>
    c784:	23a4      	movs	r3, #164	; 0xa4
    c786:	005b      	lsls	r3, r3, #1
    c788:	58e9      	ldr	r1, [r5, r3]
    c78a:	2900      	cmp	r1, #0
    c78c:	d00c      	beq.n	c7a8 <_reclaim_reent+0x70>
    c78e:	1c2e      	adds	r6, r5, #0
    c790:	364d      	adds	r6, #77	; 0x4d
    c792:	36ff      	adds	r6, #255	; 0xff
    c794:	42b1      	cmp	r1, r6
    c796:	d101      	bne.n	c79c <_reclaim_reent+0x64>
    c798:	e006      	b.n	c7a8 <_reclaim_reent+0x70>
    c79a:	1c21      	adds	r1, r4, #0
    c79c:	680c      	ldr	r4, [r1, #0]
    c79e:	1c28      	adds	r0, r5, #0
    c7a0:	f7f8 f962 	bl	4a68 <_free_r>
    c7a4:	42a6      	cmp	r6, r4
    c7a6:	d1f8      	bne.n	c79a <_reclaim_reent+0x62>
    c7a8:	6d69      	ldr	r1, [r5, #84]	; 0x54
    c7aa:	2900      	cmp	r1, #0
    c7ac:	d002      	beq.n	c7b4 <_reclaim_reent+0x7c>
    c7ae:	1c28      	adds	r0, r5, #0
    c7b0:	f7f8 f95a 	bl	4a68 <_free_r>
    c7b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
    c7b6:	2b00      	cmp	r3, #0
    c7b8:	d102      	bne.n	c7c0 <_reclaim_reent+0x88>
    c7ba:	bc70      	pop	{r4, r5, r6}
    c7bc:	bc01      	pop	{r0}
    c7be:	4700      	bx	r0
    c7c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    c7c2:	1c28      	adds	r0, r5, #0
    c7c4:	f000 f832 	bl	c82c <_wrapup_reent+0x4c>
    c7c8:	23b8      	movs	r3, #184	; 0xb8
    c7ca:	009b      	lsls	r3, r3, #2
    c7cc:	58e9      	ldr	r1, [r5, r3]
    c7ce:	2900      	cmp	r1, #0
    c7d0:	d0f3      	beq.n	c7ba <_reclaim_reent+0x82>
    c7d2:	1c28      	adds	r0, r5, #0
    c7d4:	f7ff ffa0 	bl	c718 <cleanup_glue>
    c7d8:	e7ef      	b.n	c7ba <_reclaim_reent+0x82>
    c7da:	46c0      	nop			; (mov r8, r8)
    c7dc:	40000000 	.word	0x40000000

0000c7e0 <_wrapup_reent>:
    c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7e2:	1e07      	subs	r7, r0, #0
    c7e4:	d01c      	beq.n	c820 <_wrapup_reent+0x40>
    c7e6:	23a4      	movs	r3, #164	; 0xa4
    c7e8:	005b      	lsls	r3, r3, #1
    c7ea:	58fe      	ldr	r6, [r7, r3]
    c7ec:	2e00      	cmp	r6, #0
    c7ee:	d00e      	beq.n	c80e <_wrapup_reent+0x2e>
    c7f0:	6873      	ldr	r3, [r6, #4]
    c7f2:	1e5c      	subs	r4, r3, #1
    c7f4:	d408      	bmi.n	c808 <_wrapup_reent+0x28>
    c7f6:	1c5d      	adds	r5, r3, #1
    c7f8:	00ad      	lsls	r5, r5, #2
    c7fa:	1975      	adds	r5, r6, r5
    c7fc:	682b      	ldr	r3, [r5, #0]
    c7fe:	f000 f815 	bl	c82c <_wrapup_reent+0x4c>
    c802:	3d04      	subs	r5, #4
    c804:	3c01      	subs	r4, #1
    c806:	d5f9      	bpl.n	c7fc <_wrapup_reent+0x1c>
    c808:	6836      	ldr	r6, [r6, #0]
    c80a:	2e00      	cmp	r6, #0
    c80c:	d1f0      	bne.n	c7f0 <_wrapup_reent+0x10>
    c80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c810:	2b00      	cmp	r3, #0
    c812:	d002      	beq.n	c81a <_wrapup_reent+0x3a>
    c814:	1c38      	adds	r0, r7, #0
    c816:	f000 f809 	bl	c82c <_wrapup_reent+0x4c>
    c81a:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c81c:	bc01      	pop	{r0}
    c81e:	4700      	bx	r0
    c820:	4b01      	ldr	r3, [pc, #4]	; (c828 <_wrapup_reent+0x48>)
    c822:	681f      	ldr	r7, [r3, #0]
    c824:	e7df      	b.n	c7e6 <_wrapup_reent+0x6>
    c826:	46c0      	nop			; (mov r8, r8)
    c828:	40000000 	.word	0x40000000
    c82c:	4718      	bx	r3
    c82e:	46c0      	nop			; (mov r8, r8)

0000c830 <_wcrtomb_r>:
    c830:	b5f0      	push	{r4, r5, r6, r7, lr}
    c832:	4647      	mov	r7, r8
    c834:	b480      	push	{r7}
    c836:	b086      	sub	sp, #24
    c838:	1c05      	adds	r5, r0, #0
    c83a:	1c0c      	adds	r4, r1, #0
    c83c:	1c17      	adds	r7, r2, #0
    c83e:	1c1e      	adds	r6, r3, #0
    c840:	2900      	cmp	r1, #0
    c842:	d017      	beq.n	c874 <_wcrtomb_r+0x44>
    c844:	4b11      	ldr	r3, [pc, #68]	; (c88c <_wcrtomb_r+0x5c>)
    c846:	681b      	ldr	r3, [r3, #0]
    c848:	4698      	mov	r8, r3
    c84a:	f7fd f8f9 	bl	9a40 <__locale_charset>
    c84e:	9600      	str	r6, [sp, #0]
    c850:	1c03      	adds	r3, r0, #0
    c852:	1c21      	adds	r1, r4, #0
    c854:	1c28      	adds	r0, r5, #0
    c856:	1c3a      	adds	r2, r7, #0
    c858:	f000 f855 	bl	c906 <wcrtomb+0x76>
    c85c:	1c43      	adds	r3, r0, #1
    c85e:	d103      	bne.n	c868 <_wcrtomb_r+0x38>
    c860:	2300      	movs	r3, #0
    c862:	6033      	str	r3, [r6, #0]
    c864:	338a      	adds	r3, #138	; 0x8a
    c866:	602b      	str	r3, [r5, #0]
    c868:	b006      	add	sp, #24
    c86a:	bc04      	pop	{r2}
    c86c:	4690      	mov	r8, r2
    c86e:	bcf0      	pop	{r4, r5, r6, r7}
    c870:	bc02      	pop	{r1}
    c872:	4708      	bx	r1
    c874:	4b05      	ldr	r3, [pc, #20]	; (c88c <_wcrtomb_r+0x5c>)
    c876:	681f      	ldr	r7, [r3, #0]
    c878:	f7fd f8e2 	bl	9a40 <__locale_charset>
    c87c:	9600      	str	r6, [sp, #0]
    c87e:	1c03      	adds	r3, r0, #0
    c880:	a903      	add	r1, sp, #12
    c882:	1c28      	adds	r0, r5, #0
    c884:	1c22      	adds	r2, r4, #0
    c886:	f000 f83d 	bl	c904 <wcrtomb+0x74>
    c88a:	e7e7      	b.n	c85c <_wcrtomb_r+0x2c>
    c88c:	400008bc 	.word	0x400008bc

0000c890 <wcrtomb>:
    c890:	b5f0      	push	{r4, r5, r6, r7, lr}
    c892:	464f      	mov	r7, r9
    c894:	4646      	mov	r6, r8
    c896:	b4c0      	push	{r6, r7}
    c898:	b087      	sub	sp, #28
    c89a:	1c04      	adds	r4, r0, #0
    c89c:	1c0f      	adds	r7, r1, #0
    c89e:	1c16      	adds	r6, r2, #0
    c8a0:	2800      	cmp	r0, #0
    c8a2:	d01c      	beq.n	c8de <wcrtomb+0x4e>
    c8a4:	4b15      	ldr	r3, [pc, #84]	; (c8fc <wcrtomb+0x6c>)
    c8a6:	4d16      	ldr	r5, [pc, #88]	; (c900 <wcrtomb+0x70>)
    c8a8:	681b      	ldr	r3, [r3, #0]
    c8aa:	4699      	mov	r9, r3
    c8ac:	682b      	ldr	r3, [r5, #0]
    c8ae:	4698      	mov	r8, r3
    c8b0:	f7fd f8c6 	bl	9a40 <__locale_charset>
    c8b4:	9600      	str	r6, [sp, #0]
    c8b6:	1c03      	adds	r3, r0, #0
    c8b8:	1c21      	adds	r1, r4, #0
    c8ba:	4640      	mov	r0, r8
    c8bc:	1c3a      	adds	r2, r7, #0
    c8be:	f000 f823 	bl	c908 <wcrtomb+0x78>
    c8c2:	1c43      	adds	r3, r0, #1
    c8c4:	d104      	bne.n	c8d0 <wcrtomb+0x40>
    c8c6:	2300      	movs	r3, #0
    c8c8:	6033      	str	r3, [r6, #0]
    c8ca:	682b      	ldr	r3, [r5, #0]
    c8cc:	228a      	movs	r2, #138	; 0x8a
    c8ce:	601a      	str	r2, [r3, #0]
    c8d0:	b007      	add	sp, #28
    c8d2:	bc0c      	pop	{r2, r3}
    c8d4:	4690      	mov	r8, r2
    c8d6:	4699      	mov	r9, r3
    c8d8:	bcf0      	pop	{r4, r5, r6, r7}
    c8da:	bc02      	pop	{r1}
    c8dc:	4708      	bx	r1
    c8de:	4b07      	ldr	r3, [pc, #28]	; (c8fc <wcrtomb+0x6c>)
    c8e0:	4d07      	ldr	r5, [pc, #28]	; (c900 <wcrtomb+0x70>)
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	682f      	ldr	r7, [r5, #0]
    c8e6:	4698      	mov	r8, r3
    c8e8:	f7fd f8aa 	bl	9a40 <__locale_charset>
    c8ec:	9600      	str	r6, [sp, #0]
    c8ee:	1c03      	adds	r3, r0, #0
    c8f0:	a903      	add	r1, sp, #12
    c8f2:	1c38      	adds	r0, r7, #0
    c8f4:	1c22      	adds	r2, r4, #0
    c8f6:	f000 f806 	bl	c906 <wcrtomb+0x76>
    c8fa:	e7e2      	b.n	c8c2 <wcrtomb+0x32>
    c8fc:	400008bc 	.word	0x400008bc
    c900:	40000000 	.word	0x40000000
    c904:	4738      	bx	r7
    c906:	4740      	bx	r8
    c908:	4748      	bx	r9
    c90a:	46c0      	nop			; (mov r8, r8)

0000c90c <__ascii_wctomb>:
    c90c:	b500      	push	{lr}
    c90e:	1c03      	adds	r3, r0, #0
    c910:	1e08      	subs	r0, r1, #0
    c912:	d003      	beq.n	c91c <__ascii_wctomb+0x10>
    c914:	2aff      	cmp	r2, #255	; 0xff
    c916:	d803      	bhi.n	c920 <__ascii_wctomb+0x14>
    c918:	7002      	strb	r2, [r0, #0]
    c91a:	2001      	movs	r0, #1
    c91c:	bc02      	pop	{r1}
    c91e:	4708      	bx	r1
    c920:	228a      	movs	r2, #138	; 0x8a
    c922:	2001      	movs	r0, #1
    c924:	601a      	str	r2, [r3, #0]
    c926:	4240      	negs	r0, r0
    c928:	e7f8      	b.n	c91c <__ascii_wctomb+0x10>
    c92a:	46c0      	nop			; (mov r8, r8)

0000c92c <_wctomb_r>:
    c92c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c92e:	4647      	mov	r7, r8
    c930:	b480      	push	{r7}
    c932:	1c1e      	adds	r6, r3, #0
    c934:	4b0a      	ldr	r3, [pc, #40]	; (c960 <_wctomb_r+0x34>)
    c936:	681b      	ldr	r3, [r3, #0]
    c938:	b082      	sub	sp, #8
    c93a:	4698      	mov	r8, r3
    c93c:	1c05      	adds	r5, r0, #0
    c93e:	1c17      	adds	r7, r2, #0
    c940:	1c0c      	adds	r4, r1, #0
    c942:	f7fd f87d 	bl	9a40 <__locale_charset>
    c946:	9600      	str	r6, [sp, #0]
    c948:	1c03      	adds	r3, r0, #0
    c94a:	1c3a      	adds	r2, r7, #0
    c94c:	1c28      	adds	r0, r5, #0
    c94e:	1c21      	adds	r1, r4, #0
    c950:	f000 f808 	bl	c964 <_wctomb_r+0x38>
    c954:	b002      	add	sp, #8
    c956:	bc04      	pop	{r2}
    c958:	4690      	mov	r8, r2
    c95a:	bcf0      	pop	{r4, r5, r6, r7}
    c95c:	bc02      	pop	{r1}
    c95e:	4708      	bx	r1
    c960:	400008bc 	.word	0x400008bc
    c964:	4740      	bx	r8
    c966:	46c0      	nop			; (mov r8, r8)

0000c968 <__aeabi_drsub>:
    c968:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    c96c:	ea000000 	b	c974 <__adddf3>

0000c970 <__aeabi_dsub>:
    c970:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

0000c974 <__adddf3>:
    c974:	e92d4030 	push	{r4, r5, lr}
    c978:	e1a04081 	lsl	r4, r1, #1
    c97c:	e1a05083 	lsl	r5, r3, #1
    c980:	e1340005 	teq	r4, r5
    c984:	01300002 	teqeq	r0, r2
    c988:	1194c000 	orrsne	ip, r4, r0
    c98c:	1195c002 	orrsne	ip, r5, r2
    c990:	11f0cac4 	mvnsne	ip, r4, asr #21
    c994:	11f0cac5 	mvnsne	ip, r5, asr #21
    c998:	0a00008c 	beq	cbd0 <__adddf3+0x25c>
    c99c:	e1a04aa4 	lsr	r4, r4, #21
    c9a0:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    c9a4:	b2655000 	rsblt	r5, r5, #0
    c9a8:	da000006 	ble	c9c8 <__adddf3+0x54>
    c9ac:	e0844005 	add	r4, r4, r5
    c9b0:	e0202002 	eor	r2, r0, r2
    c9b4:	e0213003 	eor	r3, r1, r3
    c9b8:	e0220000 	eor	r0, r2, r0
    c9bc:	e0231001 	eor	r1, r3, r1
    c9c0:	e0202002 	eor	r2, r0, r2
    c9c4:	e0213003 	eor	r3, r1, r3
    c9c8:	e3550036 	cmp	r5, #54	; 0x36
    c9cc:	88bd4030 	pophi	{r4, r5, lr}
    c9d0:	812fff1e 	bxhi	lr
    c9d4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    c9d8:	e1a01601 	lsl	r1, r1, #12
    c9dc:	e3a0c601 	mov	ip, #1048576	; 0x100000
    c9e0:	e18c1621 	orr	r1, ip, r1, lsr #12
    c9e4:	0a000001 	beq	c9f0 <__adddf3+0x7c>
    c9e8:	e2700000 	rsbs	r0, r0, #0
    c9ec:	e2e11000 	rsc	r1, r1, #0
    c9f0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    c9f4:	e1a03603 	lsl	r3, r3, #12
    c9f8:	e18c3623 	orr	r3, ip, r3, lsr #12
    c9fc:	0a000001 	beq	ca08 <__adddf3+0x94>
    ca00:	e2722000 	rsbs	r2, r2, #0
    ca04:	e2e33000 	rsc	r3, r3, #0
    ca08:	e1340005 	teq	r4, r5
    ca0c:	0a000069 	beq	cbb8 <__adddf3+0x244>
    ca10:	e2444001 	sub	r4, r4, #1
    ca14:	e275e020 	rsbs	lr, r5, #32
    ca18:	ba000005 	blt	ca34 <__adddf3+0xc0>
    ca1c:	e1a0ce12 	lsl	ip, r2, lr
    ca20:	e0900532 	adds	r0, r0, r2, lsr r5
    ca24:	e2a11000 	adc	r1, r1, #0
    ca28:	e0900e13 	adds	r0, r0, r3, lsl lr
    ca2c:	e0b11553 	adcs	r1, r1, r3, asr r5
    ca30:	ea000006 	b	ca50 <__adddf3+0xdc>
    ca34:	e2455020 	sub	r5, r5, #32
    ca38:	e28ee020 	add	lr, lr, #32
    ca3c:	e3520001 	cmp	r2, #1
    ca40:	e1a0ce13 	lsl	ip, r3, lr
    ca44:	238cc002 	orrcs	ip, ip, #2
    ca48:	e0900553 	adds	r0, r0, r3, asr r5
    ca4c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    ca50:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    ca54:	5a000002 	bpl	ca64 <__adddf3+0xf0>
    ca58:	e27cc000 	rsbs	ip, ip, #0
    ca5c:	e2f00000 	rscs	r0, r0, #0
    ca60:	e2e11000 	rsc	r1, r1, #0
    ca64:	e3510601 	cmp	r1, #1048576	; 0x100000
    ca68:	3a00000f 	bcc	caac <__adddf3+0x138>
    ca6c:	e3510602 	cmp	r1, #2097152	; 0x200000
    ca70:	3a000006 	bcc	ca90 <__adddf3+0x11c>
    ca74:	e1b010a1 	lsrs	r1, r1, #1
    ca78:	e1b00060 	rrxs	r0, r0
    ca7c:	e1a0c06c 	rrx	ip, ip
    ca80:	e2844001 	add	r4, r4, #1
    ca84:	e1a02a84 	lsl	r2, r4, #21
    ca88:	e3720501 	cmn	r2, #4194304	; 0x400000
    ca8c:	2a00006b 	bcs	cc40 <__adddf3+0x2cc>
    ca90:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    ca94:	01b0c0a0 	lsrseq	ip, r0, #1
    ca98:	e2b00000 	adcs	r0, r0, #0
    ca9c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    caa0:	e1811005 	orr	r1, r1, r5
    caa4:	e8bd4030 	pop	{r4, r5, lr}
    caa8:	e12fff1e 	bx	lr
    caac:	e1b0c08c 	lsls	ip, ip, #1
    cab0:	e0b00000 	adcs	r0, r0, r0
    cab4:	e0a11001 	adc	r1, r1, r1
    cab8:	e3110601 	tst	r1, #1048576	; 0x100000
    cabc:	e2444001 	sub	r4, r4, #1
    cac0:	1afffff2 	bne	ca90 <__adddf3+0x11c>
    cac4:	e3310000 	teq	r1, #0
    cac8:	13a03014 	movne	r3, #20
    cacc:	03a03034 	moveq	r3, #52	; 0x34
    cad0:	01a01000 	moveq	r1, r0
    cad4:	03a00000 	moveq	r0, #0
    cad8:	e1a02001 	mov	r2, r1
    cadc:	e3520801 	cmp	r2, #65536	; 0x10000
    cae0:	21a02822 	lsrcs	r2, r2, #16
    cae4:	22433010 	subcs	r3, r3, #16
    cae8:	e3520c01 	cmp	r2, #256	; 0x100
    caec:	21a02422 	lsrcs	r2, r2, #8
    caf0:	22433008 	subcs	r3, r3, #8
    caf4:	e3520010 	cmp	r2, #16
    caf8:	21a02222 	lsrcs	r2, r2, #4
    cafc:	22433004 	subcs	r3, r3, #4
    cb00:	e3520004 	cmp	r2, #4
    cb04:	22433002 	subcs	r3, r3, #2
    cb08:	304330a2 	subcc	r3, r3, r2, lsr #1
    cb0c:	e04331a2 	sub	r3, r3, r2, lsr #3
    cb10:	e2532020 	subs	r2, r3, #32
    cb14:	aa000007 	bge	cb38 <__adddf3+0x1c4>
    cb18:	e292200c 	adds	r2, r2, #12
    cb1c:	da000004 	ble	cb34 <__adddf3+0x1c0>
    cb20:	e282c014 	add	ip, r2, #20
    cb24:	e262200c 	rsb	r2, r2, #12
    cb28:	e1a00c11 	lsl	r0, r1, ip
    cb2c:	e1a01231 	lsr	r1, r1, r2
    cb30:	ea000004 	b	cb48 <__adddf3+0x1d4>
    cb34:	e2822014 	add	r2, r2, #20
    cb38:	d262c020 	rsble	ip, r2, #32
    cb3c:	e1a01211 	lsl	r1, r1, r2
    cb40:	d1811c30 	orrle	r1, r1, r0, lsr ip
    cb44:	d1a00210 	lslle	r0, r0, r2
    cb48:	e0544003 	subs	r4, r4, r3
    cb4c:	a0811a04 	addge	r1, r1, r4, lsl #20
    cb50:	a1811005 	orrge	r1, r1, r5
    cb54:	a8bd4030 	popge	{r4, r5, lr}
    cb58:	a12fff1e 	bxge	lr
    cb5c:	e1e04004 	mvn	r4, r4
    cb60:	e254401f 	subs	r4, r4, #31
    cb64:	aa00000f 	bge	cba8 <__adddf3+0x234>
    cb68:	e294400c 	adds	r4, r4, #12
    cb6c:	ca000006 	bgt	cb8c <__adddf3+0x218>
    cb70:	e2844014 	add	r4, r4, #20
    cb74:	e2642020 	rsb	r2, r4, #32
    cb78:	e1a00430 	lsr	r0, r0, r4
    cb7c:	e1800211 	orr	r0, r0, r1, lsl r2
    cb80:	e1851431 	orr	r1, r5, r1, lsr r4
    cb84:	e8bd4030 	pop	{r4, r5, lr}
    cb88:	e12fff1e 	bx	lr
    cb8c:	e264400c 	rsb	r4, r4, #12
    cb90:	e2642020 	rsb	r2, r4, #32
    cb94:	e1a00230 	lsr	r0, r0, r2
    cb98:	e1800411 	orr	r0, r0, r1, lsl r4
    cb9c:	e1a01005 	mov	r1, r5
    cba0:	e8bd4030 	pop	{r4, r5, lr}
    cba4:	e12fff1e 	bx	lr
    cba8:	e1a00431 	lsr	r0, r1, r4
    cbac:	e1a01005 	mov	r1, r5
    cbb0:	e8bd4030 	pop	{r4, r5, lr}
    cbb4:	e12fff1e 	bx	lr
    cbb8:	e3340000 	teq	r4, #0
    cbbc:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    cbc0:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    cbc4:	02844001 	addeq	r4, r4, #1
    cbc8:	12455001 	subne	r5, r5, #1
    cbcc:	eaffff8f 	b	ca10 <__adddf3+0x9c>
    cbd0:	e1f0cac4 	mvns	ip, r4, asr #21
    cbd4:	11f0cac5 	mvnsne	ip, r5, asr #21
    cbd8:	0a00001d 	beq	cc54 <__adddf3+0x2e0>
    cbdc:	e1340005 	teq	r4, r5
    cbe0:	01300002 	teqeq	r0, r2
    cbe4:	0a000004 	beq	cbfc <__adddf3+0x288>
    cbe8:	e194c000 	orrs	ip, r4, r0
    cbec:	01a01003 	moveq	r1, r3
    cbf0:	01a00002 	moveq	r0, r2
    cbf4:	e8bd4030 	pop	{r4, r5, lr}
    cbf8:	e12fff1e 	bx	lr
    cbfc:	e1310003 	teq	r1, r3
    cc00:	13a01000 	movne	r1, #0
    cc04:	13a00000 	movne	r0, #0
    cc08:	18bd4030 	popne	{r4, r5, lr}
    cc0c:	112fff1e 	bxne	lr
    cc10:	e1b0caa4 	lsrs	ip, r4, #21
    cc14:	1a000004 	bne	cc2c <__adddf3+0x2b8>
    cc18:	e1b00080 	lsls	r0, r0, #1
    cc1c:	e0b11001 	adcs	r1, r1, r1
    cc20:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    cc24:	e8bd4030 	pop	{r4, r5, lr}
    cc28:	e12fff1e 	bx	lr
    cc2c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    cc30:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    cc34:	38bd4030 	popcc	{r4, r5, lr}
    cc38:	312fff1e 	bxcc	lr
    cc3c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    cc40:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    cc44:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    cc48:	e3a00000 	mov	r0, #0
    cc4c:	e8bd4030 	pop	{r4, r5, lr}
    cc50:	e12fff1e 	bx	lr
    cc54:	e1f0cac4 	mvns	ip, r4, asr #21
    cc58:	11a01003 	movne	r1, r3
    cc5c:	11a00002 	movne	r0, r2
    cc60:	01f0cac5 	mvnseq	ip, r5, asr #21
    cc64:	11a03001 	movne	r3, r1
    cc68:	11a02000 	movne	r2, r0
    cc6c:	e1904601 	orrs	r4, r0, r1, lsl #12
    cc70:	01925603 	orrseq	r5, r2, r3, lsl #12
    cc74:	01310003 	teqeq	r1, r3
    cc78:	13811702 	orrne	r1, r1, #524288	; 0x80000
    cc7c:	e8bd4030 	pop	{r4, r5, lr}
    cc80:	e12fff1e 	bx	lr

0000cc84 <__aeabi_ui2d>:
    cc84:	e3300000 	teq	r0, #0
    cc88:	03a01000 	moveq	r1, #0
    cc8c:	012fff1e 	bxeq	lr
    cc90:	e92d4030 	push	{r4, r5, lr}
    cc94:	e3a04b01 	mov	r4, #1024	; 0x400
    cc98:	e2844032 	add	r4, r4, #50	; 0x32
    cc9c:	e3a05000 	mov	r5, #0
    cca0:	e3a01000 	mov	r1, #0
    cca4:	eaffff86 	b	cac4 <__adddf3+0x150>

0000cca8 <__aeabi_i2d>:
    cca8:	e3300000 	teq	r0, #0
    ccac:	03a01000 	moveq	r1, #0
    ccb0:	012fff1e 	bxeq	lr
    ccb4:	e92d4030 	push	{r4, r5, lr}
    ccb8:	e3a04b01 	mov	r4, #1024	; 0x400
    ccbc:	e2844032 	add	r4, r4, #50	; 0x32
    ccc0:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    ccc4:	42600000 	rsbmi	r0, r0, #0
    ccc8:	e3a01000 	mov	r1, #0
    cccc:	eaffff7c 	b	cac4 <__adddf3+0x150>

0000ccd0 <__aeabi_f2d>:
    ccd0:	e1b02080 	lsls	r2, r0, #1
    ccd4:	e1a011c2 	asr	r1, r2, #3
    ccd8:	e1a01061 	rrx	r1, r1
    ccdc:	e1a00e02 	lsl	r0, r2, #28
    cce0:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    cce4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    cce8:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    ccec:	112fff1e 	bxne	lr
    ccf0:	e3320000 	teq	r2, #0
    ccf4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    ccf8:	012fff1e 	bxeq	lr
    ccfc:	e92d4030 	push	{r4, r5, lr}
    cd00:	e3a04d0e 	mov	r4, #896	; 0x380
    cd04:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    cd08:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    cd0c:	eaffff6c 	b	cac4 <__adddf3+0x150>

0000cd10 <__aeabi_ul2d>:
    cd10:	e1902001 	orrs	r2, r0, r1
    cd14:	012fff1e 	bxeq	lr
    cd18:	e92d4030 	push	{r4, r5, lr}
    cd1c:	e3a05000 	mov	r5, #0
    cd20:	ea000006 	b	cd40 <__aeabi_l2d+0x1c>

0000cd24 <__aeabi_l2d>:
    cd24:	e1902001 	orrs	r2, r0, r1
    cd28:	012fff1e 	bxeq	lr
    cd2c:	e92d4030 	push	{r4, r5, lr}
    cd30:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    cd34:	5a000001 	bpl	cd40 <__aeabi_l2d+0x1c>
    cd38:	e2700000 	rsbs	r0, r0, #0
    cd3c:	e2e11000 	rsc	r1, r1, #0
    cd40:	e3a04b01 	mov	r4, #1024	; 0x400
    cd44:	e2844032 	add	r4, r4, #50	; 0x32
    cd48:	e1b0cb21 	lsrs	ip, r1, #22
    cd4c:	0affff44 	beq	ca64 <__adddf3+0xf0>
    cd50:	e3a02003 	mov	r2, #3
    cd54:	e1b0c1ac 	lsrs	ip, ip, #3
    cd58:	12822003 	addne	r2, r2, #3
    cd5c:	e1b0c1ac 	lsrs	ip, ip, #3
    cd60:	12822003 	addne	r2, r2, #3
    cd64:	e08221ac 	add	r2, r2, ip, lsr #3
    cd68:	e2623020 	rsb	r3, r2, #32
    cd6c:	e1a0c310 	lsl	ip, r0, r3
    cd70:	e1a00230 	lsr	r0, r0, r2
    cd74:	e1800311 	orr	r0, r0, r1, lsl r3
    cd78:	e1a01231 	lsr	r1, r1, r2
    cd7c:	e0844002 	add	r4, r4, r2
    cd80:	eaffff37 	b	ca64 <__adddf3+0xf0>

0000cd84 <__aeabi_dmul>:
    cd84:	e92d4070 	push	{r4, r5, r6, lr}
    cd88:	e3a0c0ff 	mov	ip, #255	; 0xff
    cd8c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    cd90:	e01c4a21 	ands	r4, ip, r1, lsr #20
    cd94:	101c5a23 	andsne	r5, ip, r3, lsr #20
    cd98:	1134000c 	teqne	r4, ip
    cd9c:	1135000c 	teqne	r5, ip
    cda0:	0b000075 	bleq	cf7c <__aeabi_dmul+0x1f8>
    cda4:	e0844005 	add	r4, r4, r5
    cda8:	e0216003 	eor	r6, r1, r3
    cdac:	e1c11a8c 	bic	r1, r1, ip, lsl #21
    cdb0:	e1c33a8c 	bic	r3, r3, ip, lsl #21
    cdb4:	e1905601 	orrs	r5, r0, r1, lsl #12
    cdb8:	11925603 	orrsne	r5, r2, r3, lsl #12
    cdbc:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    cdc0:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    cdc4:	0a00001d 	beq	ce40 <__aeabi_dmul+0xbc>
    cdc8:	e08ec290 	umull	ip, lr, r0, r2
    cdcc:	e3a05000 	mov	r5, #0
    cdd0:	e0a5e291 	umlal	lr, r5, r1, r2
    cdd4:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    cdd8:	e0a5e390 	umlal	lr, r5, r0, r3
    cddc:	e3a06000 	mov	r6, #0
    cde0:	e0a65391 	umlal	r5, r6, r1, r3
    cde4:	e33c0000 	teq	ip, #0
    cde8:	138ee001 	orrne	lr, lr, #1
    cdec:	e24440ff 	sub	r4, r4, #255	; 0xff
    cdf0:	e3560c02 	cmp	r6, #512	; 0x200
    cdf4:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    cdf8:	2a000002 	bcs	ce08 <__aeabi_dmul+0x84>
    cdfc:	e1b0e08e 	lsls	lr, lr, #1
    ce00:	e0b55005 	adcs	r5, r5, r5
    ce04:	e0a66006 	adc	r6, r6, r6
    ce08:	e1821586 	orr	r1, r2, r6, lsl #11
    ce0c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    ce10:	e1a00585 	lsl	r0, r5, #11
    ce14:	e1800aae 	orr	r0, r0, lr, lsr #21
    ce18:	e1a0e58e 	lsl	lr, lr, #11
    ce1c:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    ce20:	835c0c07 	cmphi	ip, #1792	; 0x700
    ce24:	8a000011 	bhi	ce70 <__aeabi_dmul+0xec>
    ce28:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    ce2c:	01b0e0a0 	lsrseq	lr, r0, #1
    ce30:	e2b00000 	adcs	r0, r0, #0
    ce34:	e0a11a04 	adc	r1, r1, r4, lsl #20
    ce38:	e8bd4070 	pop	{r4, r5, r6, lr}
    ce3c:	e12fff1e 	bx	lr
    ce40:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    ce44:	e1861001 	orr	r1, r6, r1
    ce48:	e1800002 	orr	r0, r0, r2
    ce4c:	e0211003 	eor	r1, r1, r3
    ce50:	e05440ac 	subs	r4, r4, ip, lsr #1
    ce54:	c074500c 	rsbsgt	r5, r4, ip
    ce58:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    ce5c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    ce60:	c12fff1e 	bxgt	lr
    ce64:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    ce68:	e3a0e000 	mov	lr, #0
    ce6c:	e2544001 	subs	r4, r4, #1
    ce70:	ca00005d 	bgt	cfec <__aeabi_dmul+0x268>
    ce74:	e3740036 	cmn	r4, #54	; 0x36
    ce78:	d3a00000 	movle	r0, #0
    ce7c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    ce80:	d8bd4070 	pople	{r4, r5, r6, lr}
    ce84:	d12fff1e 	bxle	lr
    ce88:	e2644000 	rsb	r4, r4, #0
    ce8c:	e2544020 	subs	r4, r4, #32
    ce90:	aa00001a 	bge	cf00 <__aeabi_dmul+0x17c>
    ce94:	e294400c 	adds	r4, r4, #12
    ce98:	ca00000c 	bgt	ced0 <__aeabi_dmul+0x14c>
    ce9c:	e2844014 	add	r4, r4, #20
    cea0:	e2645020 	rsb	r5, r4, #32
    cea4:	e1a03510 	lsl	r3, r0, r5
    cea8:	e1a00430 	lsr	r0, r0, r4
    ceac:	e1800511 	orr	r0, r0, r1, lsl r5
    ceb0:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    ceb4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    ceb8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    cebc:	e0a21431 	adc	r1, r2, r1, lsr r4
    cec0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    cec4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    cec8:	e8bd4070 	pop	{r4, r5, r6, lr}
    cecc:	e12fff1e 	bx	lr
    ced0:	e264400c 	rsb	r4, r4, #12
    ced4:	e2645020 	rsb	r5, r4, #32
    ced8:	e1a03410 	lsl	r3, r0, r4
    cedc:	e1a00530 	lsr	r0, r0, r5
    cee0:	e1800411 	orr	r0, r0, r1, lsl r4
    cee4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    cee8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    ceec:	e2a11000 	adc	r1, r1, #0
    cef0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    cef4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    cef8:	e8bd4070 	pop	{r4, r5, r6, lr}
    cefc:	e12fff1e 	bx	lr
    cf00:	e2645020 	rsb	r5, r4, #32
    cf04:	e18ee510 	orr	lr, lr, r0, lsl r5
    cf08:	e1a03430 	lsr	r3, r0, r4
    cf0c:	e1833511 	orr	r3, r3, r1, lsl r5
    cf10:	e1a00431 	lsr	r0, r1, r4
    cf14:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    cf18:	e1c00431 	bic	r0, r0, r1, lsr r4
    cf1c:	e0800fa3 	add	r0, r0, r3, lsr #31
    cf20:	e19ee083 	orrs	lr, lr, r3, lsl #1
    cf24:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    cf28:	e8bd4070 	pop	{r4, r5, r6, lr}
    cf2c:	e12fff1e 	bx	lr
    cf30:	e3340000 	teq	r4, #0
    cf34:	1a000008 	bne	cf5c <__aeabi_dmul+0x1d8>
    cf38:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    cf3c:	e1b00080 	lsls	r0, r0, #1
    cf40:	e0a11001 	adc	r1, r1, r1
    cf44:	e3110601 	tst	r1, #1048576	; 0x100000
    cf48:	02444001 	subeq	r4, r4, #1
    cf4c:	0afffffa 	beq	cf3c <__aeabi_dmul+0x1b8>
    cf50:	e1811006 	orr	r1, r1, r6
    cf54:	e3350000 	teq	r5, #0
    cf58:	112fff1e 	bxne	lr
    cf5c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    cf60:	e1b02082 	lsls	r2, r2, #1
    cf64:	e0a33003 	adc	r3, r3, r3
    cf68:	e3130601 	tst	r3, #1048576	; 0x100000
    cf6c:	02455001 	subeq	r5, r5, #1
    cf70:	0afffffa 	beq	cf60 <__aeabi_dmul+0x1dc>
    cf74:	e1833006 	orr	r3, r3, r6
    cf78:	e12fff1e 	bx	lr
    cf7c:	e134000c 	teq	r4, ip
    cf80:	e00c5a23 	and	r5, ip, r3, lsr #20
    cf84:	1135000c 	teqne	r5, ip
    cf88:	0a000007 	beq	cfac <__aeabi_dmul+0x228>
    cf8c:	e1906081 	orrs	r6, r0, r1, lsl #1
    cf90:	11926083 	orrsne	r6, r2, r3, lsl #1
    cf94:	1affffe5 	bne	cf30 <__aeabi_dmul+0x1ac>
    cf98:	e0211003 	eor	r1, r1, r3
    cf9c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    cfa0:	e3a00000 	mov	r0, #0
    cfa4:	e8bd4070 	pop	{r4, r5, r6, lr}
    cfa8:	e12fff1e 	bx	lr
    cfac:	e1906081 	orrs	r6, r0, r1, lsl #1
    cfb0:	01a00002 	moveq	r0, r2
    cfb4:	01a01003 	moveq	r1, r3
    cfb8:	11926083 	orrsne	r6, r2, r3, lsl #1
    cfbc:	0a000010 	beq	d004 <__aeabi_dmul+0x280>
    cfc0:	e134000c 	teq	r4, ip
    cfc4:	1a000001 	bne	cfd0 <__aeabi_dmul+0x24c>
    cfc8:	e1906601 	orrs	r6, r0, r1, lsl #12
    cfcc:	1a00000c 	bne	d004 <__aeabi_dmul+0x280>
    cfd0:	e135000c 	teq	r5, ip
    cfd4:	1a000003 	bne	cfe8 <__aeabi_dmul+0x264>
    cfd8:	e1926603 	orrs	r6, r2, r3, lsl #12
    cfdc:	11a00002 	movne	r0, r2
    cfe0:	11a01003 	movne	r1, r3
    cfe4:	1a000006 	bne	d004 <__aeabi_dmul+0x280>
    cfe8:	e0211003 	eor	r1, r1, r3
    cfec:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    cff0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    cff4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    cff8:	e3a00000 	mov	r0, #0
    cffc:	e8bd4070 	pop	{r4, r5, r6, lr}
    d000:	e12fff1e 	bx	lr
    d004:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    d008:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    d00c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d010:	e12fff1e 	bx	lr

0000d014 <__aeabi_ddiv>:
    d014:	e92d4070 	push	{r4, r5, r6, lr}
    d018:	e3a0c0ff 	mov	ip, #255	; 0xff
    d01c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    d020:	e01c4a21 	ands	r4, ip, r1, lsr #20
    d024:	101c5a23 	andsne	r5, ip, r3, lsr #20
    d028:	1134000c 	teqne	r4, ip
    d02c:	1135000c 	teqne	r5, ip
    d030:	0b00005e 	bleq	d1b0 <__aeabi_ddiv+0x19c>
    d034:	e0444005 	sub	r4, r4, r5
    d038:	e021e003 	eor	lr, r1, r3
    d03c:	e1925603 	orrs	r5, r2, r3, lsl #12
    d040:	e1a01601 	lsl	r1, r1, #12
    d044:	0a00004c 	beq	d17c <__aeabi_ddiv+0x168>
    d048:	e1a03603 	lsl	r3, r3, #12
    d04c:	e3a05201 	mov	r5, #268435456	; 0x10000000
    d050:	e1853223 	orr	r3, r5, r3, lsr #4
    d054:	e1833c22 	orr	r3, r3, r2, lsr #24
    d058:	e1a02402 	lsl	r2, r2, #8
    d05c:	e1855221 	orr	r5, r5, r1, lsr #4
    d060:	e1855c20 	orr	r5, r5, r0, lsr #24
    d064:	e1a06400 	lsl	r6, r0, #8
    d068:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    d06c:	e1550003 	cmp	r5, r3
    d070:	01560002 	cmpeq	r6, r2
    d074:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    d078:	e2844c03 	add	r4, r4, #768	; 0x300
    d07c:	2a000001 	bcs	d088 <__aeabi_ddiv+0x74>
    d080:	e1b030a3 	lsrs	r3, r3, #1
    d084:	e1a02062 	rrx	r2, r2
    d088:	e0566002 	subs	r6, r6, r2
    d08c:	e0c55003 	sbc	r5, r5, r3
    d090:	e1b030a3 	lsrs	r3, r3, #1
    d094:	e1a02062 	rrx	r2, r2
    d098:	e3a00601 	mov	r0, #1048576	; 0x100000
    d09c:	e3a0c702 	mov	ip, #524288	; 0x80000
    d0a0:	e056e002 	subs	lr, r6, r2
    d0a4:	e0d5e003 	sbcs	lr, r5, r3
    d0a8:	20466002 	subcs	r6, r6, r2
    d0ac:	21a0500e 	movcs	r5, lr
    d0b0:	2180000c 	orrcs	r0, r0, ip
    d0b4:	e1b030a3 	lsrs	r3, r3, #1
    d0b8:	e1a02062 	rrx	r2, r2
    d0bc:	e056e002 	subs	lr, r6, r2
    d0c0:	e0d5e003 	sbcs	lr, r5, r3
    d0c4:	20466002 	subcs	r6, r6, r2
    d0c8:	21a0500e 	movcs	r5, lr
    d0cc:	218000ac 	orrcs	r0, r0, ip, lsr #1
    d0d0:	e1b030a3 	lsrs	r3, r3, #1
    d0d4:	e1a02062 	rrx	r2, r2
    d0d8:	e056e002 	subs	lr, r6, r2
    d0dc:	e0d5e003 	sbcs	lr, r5, r3
    d0e0:	20466002 	subcs	r6, r6, r2
    d0e4:	21a0500e 	movcs	r5, lr
    d0e8:	2180012c 	orrcs	r0, r0, ip, lsr #2
    d0ec:	e1b030a3 	lsrs	r3, r3, #1
    d0f0:	e1a02062 	rrx	r2, r2
    d0f4:	e056e002 	subs	lr, r6, r2
    d0f8:	e0d5e003 	sbcs	lr, r5, r3
    d0fc:	20466002 	subcs	r6, r6, r2
    d100:	21a0500e 	movcs	r5, lr
    d104:	218001ac 	orrcs	r0, r0, ip, lsr #3
    d108:	e195e006 	orrs	lr, r5, r6
    d10c:	0a00000d 	beq	d148 <__aeabi_ddiv+0x134>
    d110:	e1a05205 	lsl	r5, r5, #4
    d114:	e1855e26 	orr	r5, r5, r6, lsr #28
    d118:	e1a06206 	lsl	r6, r6, #4
    d11c:	e1a03183 	lsl	r3, r3, #3
    d120:	e1833ea2 	orr	r3, r3, r2, lsr #29
    d124:	e1a02182 	lsl	r2, r2, #3
    d128:	e1b0c22c 	lsrs	ip, ip, #4
    d12c:	1affffdb 	bne	d0a0 <__aeabi_ddiv+0x8c>
    d130:	e3110601 	tst	r1, #1048576	; 0x100000
    d134:	1a000006 	bne	d154 <__aeabi_ddiv+0x140>
    d138:	e1811000 	orr	r1, r1, r0
    d13c:	e3a00000 	mov	r0, #0
    d140:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    d144:	eaffffd5 	b	d0a0 <__aeabi_ddiv+0x8c>
    d148:	e3110601 	tst	r1, #1048576	; 0x100000
    d14c:	01811000 	orreq	r1, r1, r0
    d150:	03a00000 	moveq	r0, #0
    d154:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    d158:	835c0c07 	cmphi	ip, #1792	; 0x700
    d15c:	8affff43 	bhi	ce70 <__aeabi_dmul+0xec>
    d160:	e055c003 	subs	ip, r5, r3
    d164:	0056c002 	subseq	ip, r6, r2
    d168:	01b0c0a0 	lsrseq	ip, r0, #1
    d16c:	e2b00000 	adcs	r0, r0, #0
    d170:	e0a11a04 	adc	r1, r1, r4, lsl #20
    d174:	e8bd4070 	pop	{r4, r5, r6, lr}
    d178:	e12fff1e 	bx	lr
    d17c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    d180:	e18e1621 	orr	r1, lr, r1, lsr #12
    d184:	e09440ac 	adds	r4, r4, ip, lsr #1
    d188:	c074500c 	rsbsgt	r5, r4, ip
    d18c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    d190:	c8bd4070 	popgt	{r4, r5, r6, lr}
    d194:	c12fff1e 	bxgt	lr
    d198:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    d19c:	e3a0e000 	mov	lr, #0
    d1a0:	e2544001 	subs	r4, r4, #1
    d1a4:	eaffff31 	b	ce70 <__aeabi_dmul+0xec>
    d1a8:	e185e006 	orr	lr, r5, r6
    d1ac:	eaffff2f 	b	ce70 <__aeabi_dmul+0xec>
    d1b0:	e00c5a23 	and	r5, ip, r3, lsr #20
    d1b4:	e134000c 	teq	r4, ip
    d1b8:	0135000c 	teqeq	r5, ip
    d1bc:	0affff90 	beq	d004 <__aeabi_dmul+0x280>
    d1c0:	e134000c 	teq	r4, ip
    d1c4:	1a000006 	bne	d1e4 <__aeabi_ddiv+0x1d0>
    d1c8:	e1904601 	orrs	r4, r0, r1, lsl #12
    d1cc:	1affff8c 	bne	d004 <__aeabi_dmul+0x280>
    d1d0:	e135000c 	teq	r5, ip
    d1d4:	1affff83 	bne	cfe8 <__aeabi_dmul+0x264>
    d1d8:	e1a00002 	mov	r0, r2
    d1dc:	e1a01003 	mov	r1, r3
    d1e0:	eaffff87 	b	d004 <__aeabi_dmul+0x280>
    d1e4:	e135000c 	teq	r5, ip
    d1e8:	1a000004 	bne	d200 <__aeabi_ddiv+0x1ec>
    d1ec:	e1925603 	orrs	r5, r2, r3, lsl #12
    d1f0:	0affff68 	beq	cf98 <__aeabi_dmul+0x214>
    d1f4:	e1a00002 	mov	r0, r2
    d1f8:	e1a01003 	mov	r1, r3
    d1fc:	eaffff80 	b	d004 <__aeabi_dmul+0x280>
    d200:	e1906081 	orrs	r6, r0, r1, lsl #1
    d204:	11926083 	orrsne	r6, r2, r3, lsl #1
    d208:	1affff48 	bne	cf30 <__aeabi_dmul+0x1ac>
    d20c:	e1904081 	orrs	r4, r0, r1, lsl #1
    d210:	1affff74 	bne	cfe8 <__aeabi_dmul+0x264>
    d214:	e1925083 	orrs	r5, r2, r3, lsl #1
    d218:	1affff5e 	bne	cf98 <__aeabi_dmul+0x214>
    d21c:	eaffff78 	b	d004 <__aeabi_dmul+0x280>

0000d220 <__gedf2>:
    d220:	e3e0c000 	mvn	ip, #0
    d224:	ea000002 	b	d234 <__cmpdf2+0x4>

0000d228 <__ledf2>:
    d228:	e3a0c001 	mov	ip, #1
    d22c:	ea000000 	b	d234 <__cmpdf2+0x4>

0000d230 <__cmpdf2>:
    d230:	e3a0c001 	mov	ip, #1
    d234:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    d238:	e1a0c081 	lsl	ip, r1, #1
    d23c:	e1f0cacc 	mvns	ip, ip, asr #21
    d240:	e1a0c083 	lsl	ip, r3, #1
    d244:	11f0cacc 	mvnsne	ip, ip, asr #21
    d248:	0a00000e 	beq	d288 <__cmpdf2+0x58>
    d24c:	e28dd004 	add	sp, sp, #4
    d250:	e190c081 	orrs	ip, r0, r1, lsl #1
    d254:	0192c083 	orrseq	ip, r2, r3, lsl #1
    d258:	11310003 	teqne	r1, r3
    d25c:	01300002 	teqeq	r0, r2
    d260:	03a00000 	moveq	r0, #0
    d264:	012fff1e 	bxeq	lr
    d268:	e3700000 	cmn	r0, #0
    d26c:	e1310003 	teq	r1, r3
    d270:	51510003 	cmppl	r1, r3
    d274:	01500002 	cmpeq	r0, r2
    d278:	21a00fc3 	asrcs	r0, r3, #31
    d27c:	31e00fc3 	mvncc	r0, r3, asr #31
    d280:	e3800001 	orr	r0, r0, #1
    d284:	e12fff1e 	bx	lr
    d288:	e1a0c081 	lsl	ip, r1, #1
    d28c:	e1f0cacc 	mvns	ip, ip, asr #21
    d290:	1a000001 	bne	d29c <__cmpdf2+0x6c>
    d294:	e190c601 	orrs	ip, r0, r1, lsl #12
    d298:	1a000004 	bne	d2b0 <__cmpdf2+0x80>
    d29c:	e1a0c083 	lsl	ip, r3, #1
    d2a0:	e1f0cacc 	mvns	ip, ip, asr #21
    d2a4:	1affffe8 	bne	d24c <__cmpdf2+0x1c>
    d2a8:	e192c603 	orrs	ip, r2, r3, lsl #12
    d2ac:	0affffe6 	beq	d24c <__cmpdf2+0x1c>
    d2b0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    d2b4:	e12fff1e 	bx	lr

0000d2b8 <__aeabi_cdrcmple>:
    d2b8:	e1a0c000 	mov	ip, r0
    d2bc:	e1a00002 	mov	r0, r2
    d2c0:	e1a0200c 	mov	r2, ip
    d2c4:	e1a0c001 	mov	ip, r1
    d2c8:	e1a01003 	mov	r1, r3
    d2cc:	e1a0300c 	mov	r3, ip
    d2d0:	eaffffff 	b	d2d4 <__aeabi_cdcmpeq>

0000d2d4 <__aeabi_cdcmpeq>:
    d2d4:	e92d4001 	push	{r0, lr}
    d2d8:	ebffffd4 	bl	d230 <__cmpdf2>
    d2dc:	e3500000 	cmp	r0, #0
    d2e0:	43700000 	cmnmi	r0, #0
    d2e4:	e8bd4001 	pop	{r0, lr}
    d2e8:	e12fff1e 	bx	lr

0000d2ec <__aeabi_dcmpeq>:
    d2ec:	e52de008 	str	lr, [sp, #-8]!
    d2f0:	ebfffff7 	bl	d2d4 <__aeabi_cdcmpeq>
    d2f4:	03a00001 	moveq	r0, #1
    d2f8:	13a00000 	movne	r0, #0
    d2fc:	e49de008 	ldr	lr, [sp], #8
    d300:	e12fff1e 	bx	lr

0000d304 <__aeabi_dcmplt>:
    d304:	e52de008 	str	lr, [sp, #-8]!
    d308:	ebfffff1 	bl	d2d4 <__aeabi_cdcmpeq>
    d30c:	33a00001 	movcc	r0, #1
    d310:	23a00000 	movcs	r0, #0
    d314:	e49de008 	ldr	lr, [sp], #8
    d318:	e12fff1e 	bx	lr

0000d31c <__aeabi_dcmple>:
    d31c:	e52de008 	str	lr, [sp, #-8]!
    d320:	ebffffeb 	bl	d2d4 <__aeabi_cdcmpeq>
    d324:	93a00001 	movls	r0, #1
    d328:	83a00000 	movhi	r0, #0
    d32c:	e49de008 	ldr	lr, [sp], #8
    d330:	e12fff1e 	bx	lr

0000d334 <__aeabi_dcmpge>:
    d334:	e52de008 	str	lr, [sp, #-8]!
    d338:	ebffffde 	bl	d2b8 <__aeabi_cdrcmple>
    d33c:	93a00001 	movls	r0, #1
    d340:	83a00000 	movhi	r0, #0
    d344:	e49de008 	ldr	lr, [sp], #8
    d348:	e12fff1e 	bx	lr

0000d34c <__aeabi_dcmpgt>:
    d34c:	e52de008 	str	lr, [sp, #-8]!
    d350:	ebffffd8 	bl	d2b8 <__aeabi_cdrcmple>
    d354:	33a00001 	movcc	r0, #1
    d358:	23a00000 	movcs	r0, #0
    d35c:	e49de008 	ldr	lr, [sp], #8
    d360:	e12fff1e 	bx	lr

0000d364 <__aeabi_d2iz>:
    d364:	e1a02081 	lsl	r2, r1, #1
    d368:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    d36c:	2a00000c 	bcs	d3a4 <__aeabi_d2iz+0x40>
    d370:	5a000009 	bpl	d39c <__aeabi_d2iz+0x38>
    d374:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    d378:	e0532ac2 	subs	r2, r3, r2, asr #21
    d37c:	9a00000a 	bls	d3ac <__aeabi_d2iz+0x48>
    d380:	e1a03581 	lsl	r3, r1, #11
    d384:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    d388:	e1833aa0 	orr	r3, r3, r0, lsr #21
    d38c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    d390:	e1a00233 	lsr	r0, r3, r2
    d394:	12600000 	rsbne	r0, r0, #0
    d398:	e12fff1e 	bx	lr
    d39c:	e3a00000 	mov	r0, #0
    d3a0:	e12fff1e 	bx	lr
    d3a4:	e1900601 	orrs	r0, r0, r1, lsl #12
    d3a8:	1a000002 	bne	d3b8 <__aeabi_d2iz+0x54>
    d3ac:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    d3b0:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    d3b4:	e12fff1e 	bx	lr
    d3b8:	e3a00000 	mov	r0, #0
    d3bc:	e12fff1e 	bx	lr

0000d3c0 <__aeabi_uldivmod>:
    d3c0:	e3530000 	cmp	r3, #0
    d3c4:	03520000 	cmpeq	r2, #0
    d3c8:	1a000004 	bne	d3e0 <__aeabi_uldivmod+0x20>
    d3cc:	e3510000 	cmp	r1, #0
    d3d0:	03500000 	cmpeq	r0, #0
    d3d4:	13e01000 	mvnne	r1, #0
    d3d8:	13e00000 	mvnne	r0, #0
    d3dc:	ea000221 	b	dc68 <____aeabi_ldiv0_from_arm>
    d3e0:	e24dd008 	sub	sp, sp, #8
    d3e4:	e92d6000 	push	{sp, lr}
    d3e8:	eb00022b 	bl	dc9c <____gnu_uldivmod_helper_from_arm>
    d3ec:	e59de004 	ldr	lr, [sp, #4]
    d3f0:	e28dd008 	add	sp, sp, #8
    d3f4:	e8bd000c 	pop	{r2, r3}
    d3f8:	e12fff1e 	bx	lr

0000d3fc <__gnu_ldivmod_helper>:
    d3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3fe:	b083      	sub	sp, #12
    d400:	1c1d      	adds	r5, r3, #0
    d402:	1c14      	adds	r4, r2, #0
    d404:	9000      	str	r0, [sp, #0]
    d406:	9101      	str	r1, [sp, #4]
    d408:	f000 f856 	bl	d4b8 <__divdi3>
    d40c:	1c2b      	adds	r3, r5, #0
    d40e:	1c22      	adds	r2, r4, #0
    d410:	1c06      	adds	r6, r0, #0
    d412:	1c0f      	adds	r7, r1, #0
    d414:	f000 f82a 	bl	d46c <__aeabi_lmul>
    d418:	9b00      	ldr	r3, [sp, #0]
    d41a:	9c01      	ldr	r4, [sp, #4]
    d41c:	9a08      	ldr	r2, [sp, #32]
    d41e:	1a1b      	subs	r3, r3, r0
    d420:	418c      	sbcs	r4, r1
    d422:	b003      	add	sp, #12
    d424:	1c30      	adds	r0, r6, #0
    d426:	1c39      	adds	r1, r7, #0
    d428:	6013      	str	r3, [r2, #0]
    d42a:	6054      	str	r4, [r2, #4]
    d42c:	bcf0      	pop	{r4, r5, r6, r7}
    d42e:	bc04      	pop	{r2}
    d430:	4710      	bx	r2
    d432:	46c0      	nop			; (mov r8, r8)

0000d434 <__gnu_uldivmod_helper>:
    d434:	b5f0      	push	{r4, r5, r6, r7, lr}
    d436:	b083      	sub	sp, #12
    d438:	1c1d      	adds	r5, r3, #0
    d43a:	1c14      	adds	r4, r2, #0
    d43c:	9000      	str	r0, [sp, #0]
    d43e:	9101      	str	r1, [sp, #4]
    d440:	f000 fa0e 	bl	d860 <__udivdi3>
    d444:	1c2b      	adds	r3, r5, #0
    d446:	1c22      	adds	r2, r4, #0
    d448:	1c06      	adds	r6, r0, #0
    d44a:	1c0f      	adds	r7, r1, #0
    d44c:	f000 f80e 	bl	d46c <__aeabi_lmul>
    d450:	9b00      	ldr	r3, [sp, #0]
    d452:	9c01      	ldr	r4, [sp, #4]
    d454:	9a08      	ldr	r2, [sp, #32]
    d456:	1a1b      	subs	r3, r3, r0
    d458:	418c      	sbcs	r4, r1
    d45a:	b003      	add	sp, #12
    d45c:	1c30      	adds	r0, r6, #0
    d45e:	1c39      	adds	r1, r7, #0
    d460:	6013      	str	r3, [r2, #0]
    d462:	6054      	str	r4, [r2, #4]
    d464:	bcf0      	pop	{r4, r5, r6, r7}
    d466:	bc04      	pop	{r2}
    d468:	4710      	bx	r2
    d46a:	46c0      	nop			; (mov r8, r8)

0000d46c <__aeabi_lmul>:
    d46c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d46e:	0406      	lsls	r6, r0, #16
    d470:	0415      	lsls	r5, r2, #16
    d472:	0c2f      	lsrs	r7, r5, #16
    d474:	1c04      	adds	r4, r0, #0
    d476:	0c15      	lsrs	r5, r2, #16
    d478:	0c00      	lsrs	r0, r0, #16
    d47a:	469c      	mov	ip, r3
    d47c:	0c33      	lsrs	r3, r6, #16
    d47e:	1c1e      	adds	r6, r3, #0
    d480:	437e      	muls	r6, r7
    d482:	436b      	muls	r3, r5
    d484:	4347      	muls	r7, r0
    d486:	4345      	muls	r5, r0
    d488:	18fb      	adds	r3, r7, r3
    d48a:	0c30      	lsrs	r0, r6, #16
    d48c:	1818      	adds	r0, r3, r0
    d48e:	4287      	cmp	r7, r0
    d490:	d902      	bls.n	d498 <__aeabi_lmul+0x2c>
    d492:	2380      	movs	r3, #128	; 0x80
    d494:	025f      	lsls	r7, r3, #9
    d496:	19ed      	adds	r5, r5, r7
    d498:	0433      	lsls	r3, r6, #16
    d49a:	1c26      	adds	r6, r4, #0
    d49c:	4664      	mov	r4, ip
    d49e:	4374      	muls	r4, r6
    d4a0:	4351      	muls	r1, r2
    d4a2:	0c07      	lsrs	r7, r0, #16
    d4a4:	19ed      	adds	r5, r5, r7
    d4a6:	1861      	adds	r1, r4, r1
    d4a8:	0c1f      	lsrs	r7, r3, #16
    d4aa:	0400      	lsls	r0, r0, #16
    d4ac:	19c0      	adds	r0, r0, r7
    d4ae:	1949      	adds	r1, r1, r5
    d4b0:	bcf0      	pop	{r4, r5, r6, r7}
    d4b2:	bc04      	pop	{r2}
    d4b4:	4710      	bx	r2
    d4b6:	46c0      	nop			; (mov r8, r8)

0000d4b8 <__divdi3>:
    d4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4ba:	465f      	mov	r7, fp
    d4bc:	4656      	mov	r6, sl
    d4be:	464d      	mov	r5, r9
    d4c0:	4644      	mov	r4, r8
    d4c2:	b4f0      	push	{r4, r5, r6, r7}
    d4c4:	1c04      	adds	r4, r0, #0
    d4c6:	2000      	movs	r0, #0
    d4c8:	1c0d      	adds	r5, r1, #0
    d4ca:	4680      	mov	r8, r0
    d4cc:	b085      	sub	sp, #20
    d4ce:	1c19      	adds	r1, r3, #0
    d4d0:	4545      	cmp	r5, r8
    d4d2:	da00      	bge.n	d4d6 <__divdi3+0x1e>
    d4d4:	e0df      	b.n	d696 <__divdi3+0x1de>
    d4d6:	2900      	cmp	r1, #0
    d4d8:	da00      	bge.n	d4dc <__divdi3+0x24>
    d4da:	e0d3      	b.n	d684 <__divdi3+0x1cc>
    d4dc:	46a3      	mov	fp, r4
    d4de:	1c27      	adds	r7, r4, #0
    d4e0:	46a9      	mov	r9, r5
    d4e2:	4692      	mov	sl, r2
    d4e4:	1c16      	adds	r6, r2, #0
    d4e6:	1c2c      	adds	r4, r5, #0
    d4e8:	1e1d      	subs	r5, r3, #0
    d4ea:	d14f      	bne.n	d58c <__divdi3+0xd4>
    d4ec:	454a      	cmp	r2, r9
    d4ee:	d800      	bhi.n	d4f2 <__divdi3+0x3a>
    d4f0:	e07a      	b.n	d5e8 <__divdi3+0x130>
    d4f2:	1c10      	adds	r0, r2, #0
    d4f4:	f000 fbde 	bl	dcb4 <____clzsi2_from_thumb>
    d4f8:	2800      	cmp	r0, #0
    d4fa:	d007      	beq.n	d50c <__divdi3+0x54>
    d4fc:	2520      	movs	r5, #32
    d4fe:	1a2a      	subs	r2, r5, r0
    d500:	4659      	mov	r1, fp
    d502:	4084      	lsls	r4, r0
    d504:	40d1      	lsrs	r1, r2
    d506:	4086      	lsls	r6, r0
    d508:	430c      	orrs	r4, r1
    d50a:	4087      	lsls	r7, r0
    d50c:	0c35      	lsrs	r5, r6, #16
    d50e:	0430      	lsls	r0, r6, #16
    d510:	0c03      	lsrs	r3, r0, #16
    d512:	1c29      	adds	r1, r5, #0
    d514:	1c20      	adds	r0, r4, #0
    d516:	469b      	mov	fp, r3
    d518:	f000 fb9e 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d51c:	465a      	mov	r2, fp
    d51e:	4342      	muls	r2, r0
    d520:	4681      	mov	r9, r0
    d522:	1c29      	adds	r1, r5, #0
    d524:	1c20      	adds	r0, r4, #0
    d526:	4692      	mov	sl, r2
    d528:	f000 fc06 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d52c:	0c3c      	lsrs	r4, r7, #16
    d52e:	0409      	lsls	r1, r1, #16
    d530:	4321      	orrs	r1, r4
    d532:	458a      	cmp	sl, r1
    d534:	d909      	bls.n	d54a <__divdi3+0x92>
    d536:	2401      	movs	r4, #1
    d538:	4263      	negs	r3, r4
    d53a:	1989      	adds	r1, r1, r6
    d53c:	4499      	add	r9, r3
    d53e:	428e      	cmp	r6, r1
    d540:	d803      	bhi.n	d54a <__divdi3+0x92>
    d542:	458a      	cmp	sl, r1
    d544:	d901      	bls.n	d54a <__divdi3+0x92>
    d546:	4499      	add	r9, r3
    d548:	1989      	adds	r1, r1, r6
    d54a:	4650      	mov	r0, sl
    d54c:	1a08      	subs	r0, r1, r0
    d54e:	1c29      	adds	r1, r5, #0
    d550:	4682      	mov	sl, r0
    d552:	f000 fb81 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d556:	4659      	mov	r1, fp
    d558:	4341      	muls	r1, r0
    d55a:	1c04      	adds	r4, r0, #0
    d55c:	468b      	mov	fp, r1
    d55e:	4650      	mov	r0, sl
    d560:	1c29      	adds	r1, r5, #0
    d562:	f000 fbe9 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d566:	043f      	lsls	r7, r7, #16
    d568:	0409      	lsls	r1, r1, #16
    d56a:	0c3f      	lsrs	r7, r7, #16
    d56c:	430f      	orrs	r7, r1
    d56e:	45bb      	cmp	fp, r7
    d570:	d907      	bls.n	d582 <__divdi3+0xca>
    d572:	19bf      	adds	r7, r7, r6
    d574:	3c01      	subs	r4, #1
    d576:	42be      	cmp	r6, r7
    d578:	d803      	bhi.n	d582 <__divdi3+0xca>
    d57a:	455f      	cmp	r7, fp
    d57c:	41ad      	sbcs	r5, r5
    d57e:	426e      	negs	r6, r5
    d580:	1ba4      	subs	r4, r4, r6
    d582:	464b      	mov	r3, r9
    d584:	041a      	lsls	r2, r3, #16
    d586:	4322      	orrs	r2, r4
    d588:	2500      	movs	r5, #0
    d58a:	e003      	b.n	d594 <__divdi3+0xdc>
    d58c:	454d      	cmp	r5, r9
    d58e:	d916      	bls.n	d5be <__divdi3+0x106>
    d590:	2500      	movs	r5, #0
    d592:	1c2a      	adds	r2, r5, #0
    d594:	1c13      	adds	r3, r2, #0
    d596:	2200      	movs	r2, #0
    d598:	1c2c      	adds	r4, r5, #0
    d59a:	4590      	cmp	r8, r2
    d59c:	d004      	beq.n	d5a8 <__divdi3+0xf0>
    d59e:	1c19      	adds	r1, r3, #0
    d5a0:	1c2a      	adds	r2, r5, #0
    d5a2:	2400      	movs	r4, #0
    d5a4:	424b      	negs	r3, r1
    d5a6:	4194      	sbcs	r4, r2
    d5a8:	b005      	add	sp, #20
    d5aa:	1c18      	adds	r0, r3, #0
    d5ac:	1c21      	adds	r1, r4, #0
    d5ae:	bc3c      	pop	{r2, r3, r4, r5}
    d5b0:	4690      	mov	r8, r2
    d5b2:	4699      	mov	r9, r3
    d5b4:	46a2      	mov	sl, r4
    d5b6:	46ab      	mov	fp, r5
    d5b8:	bcf0      	pop	{r4, r5, r6, r7}
    d5ba:	bc04      	pop	{r2}
    d5bc:	4710      	bx	r2
    d5be:	1c18      	adds	r0, r3, #0
    d5c0:	f000 fb78 	bl	dcb4 <____clzsi2_from_thumb>
    d5c4:	1e04      	subs	r4, r0, #0
    d5c6:	d000      	beq.n	d5ca <__divdi3+0x112>
    d5c8:	e0c1      	b.n	d74e <__divdi3+0x296>
    d5ca:	465f      	mov	r7, fp
    d5cc:	4650      	mov	r0, sl
    d5ce:	4287      	cmp	r7, r0
    d5d0:	4164      	adcs	r4, r4
    d5d2:	0624      	lsls	r4, r4, #24
    d5d4:	2c00      	cmp	r4, #0
    d5d6:	d104      	bne.n	d5e2 <__divdi3+0x12a>
    d5d8:	454d      	cmp	r5, r9
    d5da:	41ad      	sbcs	r5, r5
    d5dc:	426d      	negs	r5, r5
    d5de:	2d00      	cmp	r5, #0
    d5e0:	d0d7      	beq.n	d592 <__divdi3+0xda>
    d5e2:	2500      	movs	r5, #0
    d5e4:	2201      	movs	r2, #1
    d5e6:	e7d5      	b.n	d594 <__divdi3+0xdc>
    d5e8:	2a00      	cmp	r2, #0
    d5ea:	d104      	bne.n	d5f6 <__divdi3+0x13e>
    d5ec:	2001      	movs	r0, #1
    d5ee:	1c11      	adds	r1, r2, #0
    d5f0:	f000 fb32 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d5f4:	1c06      	adds	r6, r0, #0
    d5f6:	1c30      	adds	r0, r6, #0
    d5f8:	f000 fb5c 	bl	dcb4 <____clzsi2_from_thumb>
    d5fc:	2800      	cmp	r0, #0
    d5fe:	d153      	bne.n	d6a8 <__divdi3+0x1f0>
    d600:	0432      	lsls	r2, r6, #16
    d602:	3001      	adds	r0, #1
    d604:	1ba4      	subs	r4, r4, r6
    d606:	0c13      	lsrs	r3, r2, #16
    d608:	9000      	str	r0, [sp, #0]
    d60a:	46a3      	mov	fp, r4
    d60c:	0c35      	lsrs	r5, r6, #16
    d60e:	469a      	mov	sl, r3
    d610:	1c29      	adds	r1, r5, #0
    d612:	4658      	mov	r0, fp
    d614:	f000 fb20 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d618:	1c29      	adds	r1, r5, #0
    d61a:	4681      	mov	r9, r0
    d61c:	4654      	mov	r4, sl
    d61e:	4344      	muls	r4, r0
    d620:	4658      	mov	r0, fp
    d622:	f000 fb89 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d626:	0c3a      	lsrs	r2, r7, #16
    d628:	0409      	lsls	r1, r1, #16
    d62a:	4311      	orrs	r1, r2
    d62c:	428c      	cmp	r4, r1
    d62e:	d908      	bls.n	d642 <__divdi3+0x18a>
    d630:	2001      	movs	r0, #1
    d632:	4242      	negs	r2, r0
    d634:	1989      	adds	r1, r1, r6
    d636:	4491      	add	r9, r2
    d638:	428e      	cmp	r6, r1
    d63a:	d802      	bhi.n	d642 <__divdi3+0x18a>
    d63c:	428c      	cmp	r4, r1
    d63e:	d900      	bls.n	d642 <__divdi3+0x18a>
    d640:	e10a      	b.n	d858 <__divdi3+0x3a0>
    d642:	1b09      	subs	r1, r1, r4
    d644:	468b      	mov	fp, r1
    d646:	1c08      	adds	r0, r1, #0
    d648:	1c29      	adds	r1, r5, #0
    d64a:	f000 fb05 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d64e:	4653      	mov	r3, sl
    d650:	4343      	muls	r3, r0
    d652:	1c29      	adds	r1, r5, #0
    d654:	1c04      	adds	r4, r0, #0
    d656:	4658      	mov	r0, fp
    d658:	469a      	mov	sl, r3
    d65a:	f000 fb6d 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d65e:	043f      	lsls	r7, r7, #16
    d660:	040d      	lsls	r5, r1, #16
    d662:	0c3f      	lsrs	r7, r7, #16
    d664:	432f      	orrs	r7, r5
    d666:	45ba      	cmp	sl, r7
    d668:	d907      	bls.n	d67a <__divdi3+0x1c2>
    d66a:	19bf      	adds	r7, r7, r6
    d66c:	3c01      	subs	r4, #1
    d66e:	42be      	cmp	r6, r7
    d670:	d803      	bhi.n	d67a <__divdi3+0x1c2>
    d672:	4557      	cmp	r7, sl
    d674:	4192      	sbcs	r2, r2
    d676:	4256      	negs	r6, r2
    d678:	1ba4      	subs	r4, r4, r6
    d67a:	464e      	mov	r6, r9
    d67c:	0432      	lsls	r2, r6, #16
    d67e:	4322      	orrs	r2, r4
    d680:	9d00      	ldr	r5, [sp, #0]
    d682:	e787      	b.n	d594 <__divdi3+0xdc>
    d684:	4647      	mov	r7, r8
    d686:	43ff      	mvns	r7, r7
    d688:	1c10      	adds	r0, r2, #0
    d68a:	1c19      	adds	r1, r3, #0
    d68c:	46b8      	mov	r8, r7
    d68e:	2300      	movs	r3, #0
    d690:	4242      	negs	r2, r0
    d692:	418b      	sbcs	r3, r1
    d694:	e722      	b.n	d4dc <__divdi3+0x24>
    d696:	3001      	adds	r0, #1
    d698:	1c26      	adds	r6, r4, #0
    d69a:	1c2f      	adds	r7, r5, #0
    d69c:	4240      	negs	r0, r0
    d69e:	2500      	movs	r5, #0
    d6a0:	4274      	negs	r4, r6
    d6a2:	41bd      	sbcs	r5, r7
    d6a4:	4680      	mov	r8, r0
    d6a6:	e716      	b.n	d4d6 <__divdi3+0x1e>
    d6a8:	2520      	movs	r5, #32
    d6aa:	1a2b      	subs	r3, r5, r0
    d6ac:	1c3a      	adds	r2, r7, #0
    d6ae:	40da      	lsrs	r2, r3
    d6b0:	1c15      	adds	r5, r2, #0
    d6b2:	1c21      	adds	r1, r4, #0
    d6b4:	4084      	lsls	r4, r0
    d6b6:	4086      	lsls	r6, r0
    d6b8:	40d9      	lsrs	r1, r3
    d6ba:	4325      	orrs	r5, r4
    d6bc:	468b      	mov	fp, r1
    d6be:	9500      	str	r5, [sp, #0]
    d6c0:	0431      	lsls	r1, r6, #16
    d6c2:	0c35      	lsrs	r5, r6, #16
    d6c4:	0c0b      	lsrs	r3, r1, #16
    d6c6:	4087      	lsls	r7, r0
    d6c8:	1c29      	adds	r1, r5, #0
    d6ca:	4658      	mov	r0, fp
    d6cc:	469a      	mov	sl, r3
    d6ce:	f000 fac3 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d6d2:	4653      	mov	r3, sl
    d6d4:	4343      	muls	r3, r0
    d6d6:	1c04      	adds	r4, r0, #0
    d6d8:	1c29      	adds	r1, r5, #0
    d6da:	4658      	mov	r0, fp
    d6dc:	4699      	mov	r9, r3
    d6de:	f000 fb2b 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d6e2:	9b00      	ldr	r3, [sp, #0]
    d6e4:	0409      	lsls	r1, r1, #16
    d6e6:	0c18      	lsrs	r0, r3, #16
    d6e8:	4301      	orrs	r1, r0
    d6ea:	4589      	cmp	r9, r1
    d6ec:	d907      	bls.n	d6fe <__divdi3+0x246>
    d6ee:	1989      	adds	r1, r1, r6
    d6f0:	3c01      	subs	r4, #1
    d6f2:	428e      	cmp	r6, r1
    d6f4:	d803      	bhi.n	d6fe <__divdi3+0x246>
    d6f6:	4589      	cmp	r9, r1
    d6f8:	d901      	bls.n	d6fe <__divdi3+0x246>
    d6fa:	3c01      	subs	r4, #1
    d6fc:	1989      	adds	r1, r1, r6
    d6fe:	464a      	mov	r2, r9
    d700:	1a89      	subs	r1, r1, r2
    d702:	9101      	str	r1, [sp, #4]
    d704:	1c08      	adds	r0, r1, #0
    d706:	1c29      	adds	r1, r5, #0
    d708:	f000 faa6 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d70c:	4653      	mov	r3, sl
    d70e:	4343      	muls	r3, r0
    d710:	4681      	mov	r9, r0
    d712:	1c29      	adds	r1, r5, #0
    d714:	9801      	ldr	r0, [sp, #4]
    d716:	469b      	mov	fp, r3
    d718:	f000 fb0e 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d71c:	9b00      	ldr	r3, [sp, #0]
    d71e:	041a      	lsls	r2, r3, #16
    d720:	0409      	lsls	r1, r1, #16
    d722:	0c10      	lsrs	r0, r2, #16
    d724:	4301      	orrs	r1, r0
    d726:	458b      	cmp	fp, r1
    d728:	d909      	bls.n	d73e <__divdi3+0x286>
    d72a:	2001      	movs	r0, #1
    d72c:	4242      	negs	r2, r0
    d72e:	1989      	adds	r1, r1, r6
    d730:	4491      	add	r9, r2
    d732:	428e      	cmp	r6, r1
    d734:	d803      	bhi.n	d73e <__divdi3+0x286>
    d736:	458b      	cmp	fp, r1
    d738:	d901      	bls.n	d73e <__divdi3+0x286>
    d73a:	4491      	add	r9, r2
    d73c:	1989      	adds	r1, r1, r6
    d73e:	465b      	mov	r3, fp
    d740:	0424      	lsls	r4, r4, #16
    d742:	4648      	mov	r0, r9
    d744:	1acb      	subs	r3, r1, r3
    d746:	4320      	orrs	r0, r4
    d748:	469b      	mov	fp, r3
    d74a:	9000      	str	r0, [sp, #0]
    d74c:	e760      	b.n	d610 <__divdi3+0x158>
    d74e:	2620      	movs	r6, #32
    d750:	1b33      	subs	r3, r6, r4
    d752:	4656      	mov	r6, sl
    d754:	40a5      	lsls	r5, r4
    d756:	40de      	lsrs	r6, r3
    d758:	4651      	mov	r1, sl
    d75a:	1c38      	adds	r0, r7, #0
    d75c:	432e      	orrs	r6, r5
    d75e:	40d8      	lsrs	r0, r3
    d760:	40a1      	lsls	r1, r4
    d762:	464a      	mov	r2, r9
    d764:	464d      	mov	r5, r9
    d766:	40da      	lsrs	r2, r3
    d768:	9100      	str	r1, [sp, #0]
    d76a:	40a5      	lsls	r5, r4
    d76c:	1c01      	adds	r1, r0, #0
    d76e:	4693      	mov	fp, r2
    d770:	4329      	orrs	r1, r5
    d772:	0432      	lsls	r2, r6, #16
    d774:	0c35      	lsrs	r5, r6, #16
    d776:	0c13      	lsrs	r3, r2, #16
    d778:	9101      	str	r1, [sp, #4]
    d77a:	4658      	mov	r0, fp
    d77c:	1c29      	adds	r1, r5, #0
    d77e:	9302      	str	r3, [sp, #8]
    d780:	f000 fa6a 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d784:	4682      	mov	sl, r0
    d786:	9802      	ldr	r0, [sp, #8]
    d788:	4651      	mov	r1, sl
    d78a:	4341      	muls	r1, r0
    d78c:	4658      	mov	r0, fp
    d78e:	4689      	mov	r9, r1
    d790:	1c29      	adds	r1, r5, #0
    d792:	f000 fad1 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d796:	9a01      	ldr	r2, [sp, #4]
    d798:	0409      	lsls	r1, r1, #16
    d79a:	0c13      	lsrs	r3, r2, #16
    d79c:	4319      	orrs	r1, r3
    d79e:	4589      	cmp	r9, r1
    d7a0:	d909      	bls.n	d7b6 <__divdi3+0x2fe>
    d7a2:	2001      	movs	r0, #1
    d7a4:	4242      	negs	r2, r0
    d7a6:	1989      	adds	r1, r1, r6
    d7a8:	4492      	add	sl, r2
    d7aa:	428e      	cmp	r6, r1
    d7ac:	d803      	bhi.n	d7b6 <__divdi3+0x2fe>
    d7ae:	4589      	cmp	r9, r1
    d7b0:	d901      	bls.n	d7b6 <__divdi3+0x2fe>
    d7b2:	4492      	add	sl, r2
    d7b4:	1989      	adds	r1, r1, r6
    d7b6:	464b      	mov	r3, r9
    d7b8:	1acb      	subs	r3, r1, r3
    d7ba:	1c18      	adds	r0, r3, #0
    d7bc:	1c29      	adds	r1, r5, #0
    d7be:	9303      	str	r3, [sp, #12]
    d7c0:	f000 fa4a 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d7c4:	9902      	ldr	r1, [sp, #8]
    d7c6:	4683      	mov	fp, r0
    d7c8:	4658      	mov	r0, fp
    d7ca:	4348      	muls	r0, r1
    d7cc:	1c29      	adds	r1, r5, #0
    d7ce:	4681      	mov	r9, r0
    d7d0:	9803      	ldr	r0, [sp, #12]
    d7d2:	f000 fab1 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d7d6:	9a01      	ldr	r2, [sp, #4]
    d7d8:	0413      	lsls	r3, r2, #16
    d7da:	0409      	lsls	r1, r1, #16
    d7dc:	0c1d      	lsrs	r5, r3, #16
    d7de:	4329      	orrs	r1, r5
    d7e0:	4589      	cmp	r9, r1
    d7e2:	d905      	bls.n	d7f0 <__divdi3+0x338>
    d7e4:	2501      	movs	r5, #1
    d7e6:	426b      	negs	r3, r5
    d7e8:	1989      	adds	r1, r1, r6
    d7ea:	449b      	add	fp, r3
    d7ec:	428e      	cmp	r6, r1
    d7ee:	d92e      	bls.n	d84e <__divdi3+0x396>
    d7f0:	464e      	mov	r6, r9
    d7f2:	4650      	mov	r0, sl
    d7f4:	1b8e      	subs	r6, r1, r6
    d7f6:	0402      	lsls	r2, r0, #16
    d7f8:	4659      	mov	r1, fp
    d7fa:	430a      	orrs	r2, r1
    d7fc:	9900      	ldr	r1, [sp, #0]
    d7fe:	0415      	lsls	r5, r2, #16
    d800:	0408      	lsls	r0, r1, #16
    d802:	0c2b      	lsrs	r3, r5, #16
    d804:	0c00      	lsrs	r0, r0, #16
    d806:	0c15      	lsrs	r5, r2, #16
    d808:	46b1      	mov	r9, r6
    d80a:	0c0e      	lsrs	r6, r1, #16
    d80c:	1c01      	adds	r1, r0, #0
    d80e:	4359      	muls	r1, r3
    d810:	4373      	muls	r3, r6
    d812:	4368      	muls	r0, r5
    d814:	4375      	muls	r5, r6
    d816:	18c3      	adds	r3, r0, r3
    d818:	0c0e      	lsrs	r6, r1, #16
    d81a:	199b      	adds	r3, r3, r6
    d81c:	468c      	mov	ip, r1
    d81e:	4298      	cmp	r0, r3
    d820:	d902      	bls.n	d828 <__divdi3+0x370>
    d822:	2080      	movs	r0, #128	; 0x80
    d824:	0241      	lsls	r1, r0, #9
    d826:	186d      	adds	r5, r5, r1
    d828:	0c1e      	lsrs	r6, r3, #16
    d82a:	19ad      	adds	r5, r5, r6
    d82c:	45a9      	cmp	r9, r5
    d82e:	d30b      	bcc.n	d848 <__divdi3+0x390>
    d830:	d001      	beq.n	d836 <__divdi3+0x37e>
    d832:	2500      	movs	r5, #0
    d834:	e6ae      	b.n	d594 <__divdi3+0xdc>
    d836:	40a7      	lsls	r7, r4
    d838:	1c3c      	adds	r4, r7, #0
    d83a:	4667      	mov	r7, ip
    d83c:	0439      	lsls	r1, r7, #16
    d83e:	041d      	lsls	r5, r3, #16
    d840:	0c0f      	lsrs	r7, r1, #16
    d842:	19eb      	adds	r3, r5, r7
    d844:	429c      	cmp	r4, r3
    d846:	d2f4      	bcs.n	d832 <__divdi3+0x37a>
    d848:	3a01      	subs	r2, #1
    d84a:	2500      	movs	r5, #0
    d84c:	e6a2      	b.n	d594 <__divdi3+0xdc>
    d84e:	4589      	cmp	r9, r1
    d850:	d9ce      	bls.n	d7f0 <__divdi3+0x338>
    d852:	449b      	add	fp, r3
    d854:	1989      	adds	r1, r1, r6
    d856:	e7cb      	b.n	d7f0 <__divdi3+0x338>
    d858:	4491      	add	r9, r2
    d85a:	1989      	adds	r1, r1, r6
    d85c:	e6f1      	b.n	d642 <__divdi3+0x18a>
    d85e:	46c0      	nop			; (mov r8, r8)

0000d860 <__udivdi3>:
    d860:	b5f0      	push	{r4, r5, r6, r7, lr}
    d862:	465f      	mov	r7, fp
    d864:	4656      	mov	r6, sl
    d866:	464d      	mov	r5, r9
    d868:	4644      	mov	r4, r8
    d86a:	b4f0      	push	{r4, r5, r6, r7}
    d86c:	b083      	sub	sp, #12
    d86e:	4680      	mov	r8, r0
    d870:	1c0d      	adds	r5, r1, #0
    d872:	1c17      	adds	r7, r2, #0
    d874:	1c1e      	adds	r6, r3, #0
    d876:	1c14      	adds	r4, r2, #0
    d878:	4681      	mov	r9, r0
    d87a:	468a      	mov	sl, r1
    d87c:	2b00      	cmp	r3, #0
    d87e:	d15b      	bne.n	d938 <__udivdi3+0xd8>
    d880:	4552      	cmp	r2, sl
    d882:	d96e      	bls.n	d962 <__udivdi3+0x102>
    d884:	1c10      	adds	r0, r2, #0
    d886:	f000 fa15 	bl	dcb4 <____clzsi2_from_thumb>
    d88a:	2800      	cmp	r0, #0
    d88c:	d00c      	beq.n	d8a8 <__udivdi3+0x48>
    d88e:	2620      	movs	r6, #32
    d890:	1c2b      	adds	r3, r5, #0
    d892:	4641      	mov	r1, r8
    d894:	1a35      	subs	r5, r6, r0
    d896:	40e9      	lsrs	r1, r5
    d898:	4083      	lsls	r3, r0
    d89a:	1c0a      	adds	r2, r1, #0
    d89c:	431a      	orrs	r2, r3
    d89e:	4692      	mov	sl, r2
    d8a0:	4642      	mov	r2, r8
    d8a2:	4082      	lsls	r2, r0
    d8a4:	4084      	lsls	r4, r0
    d8a6:	4691      	mov	r9, r2
    d8a8:	0c25      	lsrs	r5, r4, #16
    d8aa:	0427      	lsls	r7, r4, #16
    d8ac:	0c3b      	lsrs	r3, r7, #16
    d8ae:	1c29      	adds	r1, r5, #0
    d8b0:	4650      	mov	r0, sl
    d8b2:	469b      	mov	fp, r3
    d8b4:	f000 f9d0 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d8b8:	1c29      	adds	r1, r5, #0
    d8ba:	1c07      	adds	r7, r0, #0
    d8bc:	465e      	mov	r6, fp
    d8be:	4346      	muls	r6, r0
    d8c0:	4650      	mov	r0, sl
    d8c2:	f000 fa39 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d8c6:	464a      	mov	r2, r9
    d8c8:	0409      	lsls	r1, r1, #16
    d8ca:	0c10      	lsrs	r0, r2, #16
    d8cc:	4301      	orrs	r1, r0
    d8ce:	428e      	cmp	r6, r1
    d8d0:	d907      	bls.n	d8e2 <__udivdi3+0x82>
    d8d2:	1909      	adds	r1, r1, r4
    d8d4:	3f01      	subs	r7, #1
    d8d6:	428c      	cmp	r4, r1
    d8d8:	d803      	bhi.n	d8e2 <__udivdi3+0x82>
    d8da:	428e      	cmp	r6, r1
    d8dc:	d901      	bls.n	d8e2 <__udivdi3+0x82>
    d8de:	3f01      	subs	r7, #1
    d8e0:	1909      	adds	r1, r1, r4
    d8e2:	1b89      	subs	r1, r1, r6
    d8e4:	4688      	mov	r8, r1
    d8e6:	1c08      	adds	r0, r1, #0
    d8e8:	1c29      	adds	r1, r5, #0
    d8ea:	f000 f9b5 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d8ee:	465b      	mov	r3, fp
    d8f0:	4343      	muls	r3, r0
    d8f2:	1c29      	adds	r1, r5, #0
    d8f4:	1c06      	adds	r6, r0, #0
    d8f6:	4640      	mov	r0, r8
    d8f8:	469b      	mov	fp, r3
    d8fa:	f000 fa1d 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d8fe:	464d      	mov	r5, r9
    d900:	0428      	lsls	r0, r5, #16
    d902:	0409      	lsls	r1, r1, #16
    d904:	0c05      	lsrs	r5, r0, #16
    d906:	4329      	orrs	r1, r5
    d908:	458b      	cmp	fp, r1
    d90a:	d907      	bls.n	d91c <__udivdi3+0xbc>
    d90c:	1909      	adds	r1, r1, r4
    d90e:	3e01      	subs	r6, #1
    d910:	428c      	cmp	r4, r1
    d912:	d803      	bhi.n	d91c <__udivdi3+0xbc>
    d914:	4559      	cmp	r1, fp
    d916:	4192      	sbcs	r2, r2
    d918:	4254      	negs	r4, r2
    d91a:	1b36      	subs	r6, r6, r4
    d91c:	043f      	lsls	r7, r7, #16
    d91e:	433e      	orrs	r6, r7
    d920:	2300      	movs	r3, #0
    d922:	b003      	add	sp, #12
    d924:	1c30      	adds	r0, r6, #0
    d926:	1c19      	adds	r1, r3, #0
    d928:	bc3c      	pop	{r2, r3, r4, r5}
    d92a:	4690      	mov	r8, r2
    d92c:	4699      	mov	r9, r3
    d92e:	46a2      	mov	sl, r4
    d930:	46ab      	mov	fp, r5
    d932:	bcf0      	pop	{r4, r5, r6, r7}
    d934:	bc04      	pop	{r2}
    d936:	4710      	bx	r2
    d938:	42ab      	cmp	r3, r5
    d93a:	d860      	bhi.n	d9fe <__udivdi3+0x19e>
    d93c:	1c18      	adds	r0, r3, #0
    d93e:	f000 f9b9 	bl	dcb4 <____clzsi2_from_thumb>
    d942:	1e04      	subs	r4, r0, #0
    d944:	d15e      	bne.n	da04 <__udivdi3+0x1a4>
    d946:	4643      	mov	r3, r8
    d948:	42bb      	cmp	r3, r7
    d94a:	4164      	adcs	r4, r4
    d94c:	0627      	lsls	r7, r4, #24
    d94e:	2f00      	cmp	r7, #0
    d950:	d104      	bne.n	d95c <__udivdi3+0xfc>
    d952:	42ae      	cmp	r6, r5
    d954:	41ad      	sbcs	r5, r5
    d956:	426b      	negs	r3, r5
    d958:	2b00      	cmp	r3, #0
    d95a:	d051      	beq.n	da00 <__udivdi3+0x1a0>
    d95c:	2300      	movs	r3, #0
    d95e:	2601      	movs	r6, #1
    d960:	e7df      	b.n	d922 <__udivdi3+0xc2>
    d962:	2a00      	cmp	r2, #0
    d964:	d104      	bne.n	d970 <__udivdi3+0x110>
    d966:	2001      	movs	r0, #1
    d968:	1c11      	adds	r1, r2, #0
    d96a:	f000 f975 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d96e:	1c04      	adds	r4, r0, #0
    d970:	1c20      	adds	r0, r4, #0
    d972:	f000 f99f 	bl	dcb4 <____clzsi2_from_thumb>
    d976:	2800      	cmp	r0, #0
    d978:	d000      	beq.n	d97c <__udivdi3+0x11c>
    d97a:	e0b8      	b.n	daee <__udivdi3+0x28e>
    d97c:	0426      	lsls	r6, r4, #16
    d97e:	1b2d      	subs	r5, r5, r4
    d980:	0c33      	lsrs	r3, r6, #16
    d982:	2101      	movs	r1, #1
    d984:	46aa      	mov	sl, r5
    d986:	0c27      	lsrs	r7, r4, #16
    d988:	4698      	mov	r8, r3
    d98a:	468b      	mov	fp, r1
    d98c:	1c39      	adds	r1, r7, #0
    d98e:	4650      	mov	r0, sl
    d990:	f000 f962 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d994:	1c39      	adds	r1, r7, #0
    d996:	1c06      	adds	r6, r0, #0
    d998:	4645      	mov	r5, r8
    d99a:	4345      	muls	r5, r0
    d99c:	4650      	mov	r0, sl
    d99e:	f000 f9cb 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d9a2:	464a      	mov	r2, r9
    d9a4:	0409      	lsls	r1, r1, #16
    d9a6:	0c10      	lsrs	r0, r2, #16
    d9a8:	4301      	orrs	r1, r0
    d9aa:	428d      	cmp	r5, r1
    d9ac:	d906      	bls.n	d9bc <__udivdi3+0x15c>
    d9ae:	1909      	adds	r1, r1, r4
    d9b0:	3e01      	subs	r6, #1
    d9b2:	428c      	cmp	r4, r1
    d9b4:	d802      	bhi.n	d9bc <__udivdi3+0x15c>
    d9b6:	428d      	cmp	r5, r1
    d9b8:	d900      	bls.n	d9bc <__udivdi3+0x15c>
    d9ba:	e0ed      	b.n	db98 <__udivdi3+0x338>
    d9bc:	1b49      	subs	r1, r1, r5
    d9be:	468a      	mov	sl, r1
    d9c0:	1c08      	adds	r0, r1, #0
    d9c2:	1c39      	adds	r1, r7, #0
    d9c4:	f000 f948 	bl	dc58 <____aeabi_uidiv_from_thumb>
    d9c8:	4643      	mov	r3, r8
    d9ca:	4343      	muls	r3, r0
    d9cc:	1c39      	adds	r1, r7, #0
    d9ce:	1c05      	adds	r5, r0, #0
    d9d0:	4650      	mov	r0, sl
    d9d2:	4698      	mov	r8, r3
    d9d4:	f000 f9b0 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    d9d8:	464a      	mov	r2, r9
    d9da:	0413      	lsls	r3, r2, #16
    d9dc:	0409      	lsls	r1, r1, #16
    d9de:	0c1f      	lsrs	r7, r3, #16
    d9e0:	4339      	orrs	r1, r7
    d9e2:	4588      	cmp	r8, r1
    d9e4:	d907      	bls.n	d9f6 <__udivdi3+0x196>
    d9e6:	1909      	adds	r1, r1, r4
    d9e8:	3d01      	subs	r5, #1
    d9ea:	428c      	cmp	r4, r1
    d9ec:	d803      	bhi.n	d9f6 <__udivdi3+0x196>
    d9ee:	4541      	cmp	r1, r8
    d9f0:	4180      	sbcs	r0, r0
    d9f2:	4244      	negs	r4, r0
    d9f4:	1b2d      	subs	r5, r5, r4
    d9f6:	0436      	lsls	r6, r6, #16
    d9f8:	432e      	orrs	r6, r5
    d9fa:	465b      	mov	r3, fp
    d9fc:	e791      	b.n	d922 <__udivdi3+0xc2>
    d9fe:	2300      	movs	r3, #0
    da00:	1c1e      	adds	r6, r3, #0
    da02:	e78e      	b.n	d922 <__udivdi3+0xc2>
    da04:	2220      	movs	r2, #32
    da06:	1b10      	subs	r0, r2, r4
    da08:	1c3b      	adds	r3, r7, #0
    da0a:	4642      	mov	r2, r8
    da0c:	40c2      	lsrs	r2, r0
    da0e:	40c3      	lsrs	r3, r0
    da10:	40a7      	lsls	r7, r4
    da12:	1c29      	adds	r1, r5, #0
    da14:	40a6      	lsls	r6, r4
    da16:	431e      	orrs	r6, r3
    da18:	40c1      	lsrs	r1, r0
    da1a:	9700      	str	r7, [sp, #0]
    da1c:	40a5      	lsls	r5, r4
    da1e:	1c17      	adds	r7, r2, #0
    da20:	468b      	mov	fp, r1
    da22:	432f      	orrs	r7, r5
    da24:	0431      	lsls	r1, r6, #16
    da26:	0c35      	lsrs	r5, r6, #16
    da28:	0c0b      	lsrs	r3, r1, #16
    da2a:	4658      	mov	r0, fp
    da2c:	1c29      	adds	r1, r5, #0
    da2e:	9701      	str	r7, [sp, #4]
    da30:	469a      	mov	sl, r3
    da32:	f000 f911 	bl	dc58 <____aeabi_uidiv_from_thumb>
    da36:	4653      	mov	r3, sl
    da38:	4343      	muls	r3, r0
    da3a:	1c07      	adds	r7, r0, #0
    da3c:	1c29      	adds	r1, r5, #0
    da3e:	4658      	mov	r0, fp
    da40:	4699      	mov	r9, r3
    da42:	f000 f979 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    da46:	9801      	ldr	r0, [sp, #4]
    da48:	0409      	lsls	r1, r1, #16
    da4a:	0c02      	lsrs	r2, r0, #16
    da4c:	4311      	orrs	r1, r2
    da4e:	4589      	cmp	r9, r1
    da50:	d907      	bls.n	da62 <__udivdi3+0x202>
    da52:	1989      	adds	r1, r1, r6
    da54:	3f01      	subs	r7, #1
    da56:	428e      	cmp	r6, r1
    da58:	d803      	bhi.n	da62 <__udivdi3+0x202>
    da5a:	4589      	cmp	r9, r1
    da5c:	d901      	bls.n	da62 <__udivdi3+0x202>
    da5e:	3f01      	subs	r7, #1
    da60:	1989      	adds	r1, r1, r6
    da62:	464b      	mov	r3, r9
    da64:	1acb      	subs	r3, r1, r3
    da66:	1c18      	adds	r0, r3, #0
    da68:	1c29      	adds	r1, r5, #0
    da6a:	469b      	mov	fp, r3
    da6c:	f000 f8f4 	bl	dc58 <____aeabi_uidiv_from_thumb>
    da70:	4651      	mov	r1, sl
    da72:	4341      	muls	r1, r0
    da74:	4681      	mov	r9, r0
    da76:	468a      	mov	sl, r1
    da78:	4658      	mov	r0, fp
    da7a:	1c29      	adds	r1, r5, #0
    da7c:	f000 f95c 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    da80:	9b01      	ldr	r3, [sp, #4]
    da82:	0418      	lsls	r0, r3, #16
    da84:	0409      	lsls	r1, r1, #16
    da86:	0c05      	lsrs	r5, r0, #16
    da88:	4329      	orrs	r1, r5
    da8a:	458a      	cmp	sl, r1
    da8c:	d905      	bls.n	da9a <__udivdi3+0x23a>
    da8e:	2201      	movs	r2, #1
    da90:	4253      	negs	r3, r2
    da92:	1989      	adds	r1, r1, r6
    da94:	4499      	add	r9, r3
    da96:	428e      	cmp	r6, r1
    da98:	d979      	bls.n	db8e <__udivdi3+0x32e>
    da9a:	043e      	lsls	r6, r7, #16
    da9c:	464a      	mov	r2, r9
    da9e:	9f00      	ldr	r7, [sp, #0]
    daa0:	4655      	mov	r5, sl
    daa2:	4316      	orrs	r6, r2
    daa4:	0432      	lsls	r2, r6, #16
    daa6:	1b49      	subs	r1, r1, r5
    daa8:	043d      	lsls	r5, r7, #16
    daaa:	0c13      	lsrs	r3, r2, #16
    daac:	0c30      	lsrs	r0, r6, #16
    daae:	0c2a      	lsrs	r2, r5, #16
    dab0:	0c3f      	lsrs	r7, r7, #16
    dab2:	1c15      	adds	r5, r2, #0
    dab4:	435d      	muls	r5, r3
    dab6:	437b      	muls	r3, r7
    dab8:	4342      	muls	r2, r0
    daba:	4347      	muls	r7, r0
    dabc:	18d3      	adds	r3, r2, r3
    dabe:	0c28      	lsrs	r0, r5, #16
    dac0:	181b      	adds	r3, r3, r0
    dac2:	429a      	cmp	r2, r3
    dac4:	d902      	bls.n	dacc <__udivdi3+0x26c>
    dac6:	2280      	movs	r2, #128	; 0x80
    dac8:	0250      	lsls	r0, r2, #9
    daca:	183f      	adds	r7, r7, r0
    dacc:	0c18      	lsrs	r0, r3, #16
    dace:	183f      	adds	r7, r7, r0
    dad0:	42b9      	cmp	r1, r7
    dad2:	d309      	bcc.n	dae8 <__udivdi3+0x288>
    dad4:	d109      	bne.n	daea <__udivdi3+0x28a>
    dad6:	4641      	mov	r1, r8
    dad8:	40a1      	lsls	r1, r4
    dada:	042d      	lsls	r5, r5, #16
    dadc:	1c0c      	adds	r4, r1, #0
    dade:	0c2f      	lsrs	r7, r5, #16
    dae0:	0419      	lsls	r1, r3, #16
    dae2:	19cb      	adds	r3, r1, r7
    dae4:	429c      	cmp	r4, r3
    dae6:	d200      	bcs.n	daea <__udivdi3+0x28a>
    dae8:	3e01      	subs	r6, #1
    daea:	2300      	movs	r3, #0
    daec:	e719      	b.n	d922 <__udivdi3+0xc2>
    daee:	2320      	movs	r3, #32
    daf0:	1a1e      	subs	r6, r3, r0
    daf2:	4641      	mov	r1, r8
    daf4:	40f1      	lsrs	r1, r6
    daf6:	1c2a      	adds	r2, r5, #0
    daf8:	1c0f      	adds	r7, r1, #0
    dafa:	4085      	lsls	r5, r0
    dafc:	4084      	lsls	r4, r0
    dafe:	40f2      	lsrs	r2, r6
    db00:	432f      	orrs	r7, r5
    db02:	4692      	mov	sl, r2
    db04:	9700      	str	r7, [sp, #0]
    db06:	4642      	mov	r2, r8
    db08:	0c27      	lsrs	r7, r4, #16
    db0a:	0421      	lsls	r1, r4, #16
    db0c:	4082      	lsls	r2, r0
    db0e:	0c0b      	lsrs	r3, r1, #16
    db10:	4650      	mov	r0, sl
    db12:	1c39      	adds	r1, r7, #0
    db14:	4691      	mov	r9, r2
    db16:	4698      	mov	r8, r3
    db18:	f000 f89e 	bl	dc58 <____aeabi_uidiv_from_thumb>
    db1c:	1c39      	adds	r1, r7, #0
    db1e:	1c06      	adds	r6, r0, #0
    db20:	4645      	mov	r5, r8
    db22:	4345      	muls	r5, r0
    db24:	4650      	mov	r0, sl
    db26:	f000 f907 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    db2a:	9a00      	ldr	r2, [sp, #0]
    db2c:	0409      	lsls	r1, r1, #16
    db2e:	0c10      	lsrs	r0, r2, #16
    db30:	4301      	orrs	r1, r0
    db32:	428d      	cmp	r5, r1
    db34:	d907      	bls.n	db46 <__udivdi3+0x2e6>
    db36:	1909      	adds	r1, r1, r4
    db38:	3e01      	subs	r6, #1
    db3a:	428c      	cmp	r4, r1
    db3c:	d803      	bhi.n	db46 <__udivdi3+0x2e6>
    db3e:	428d      	cmp	r5, r1
    db40:	d901      	bls.n	db46 <__udivdi3+0x2e6>
    db42:	3e01      	subs	r6, #1
    db44:	1909      	adds	r1, r1, r4
    db46:	1b49      	subs	r1, r1, r5
    db48:	468a      	mov	sl, r1
    db4a:	1c08      	adds	r0, r1, #0
    db4c:	1c39      	adds	r1, r7, #0
    db4e:	f000 f883 	bl	dc58 <____aeabi_uidiv_from_thumb>
    db52:	4643      	mov	r3, r8
    db54:	4343      	muls	r3, r0
    db56:	1c05      	adds	r5, r0, #0
    db58:	1c39      	adds	r1, r7, #0
    db5a:	4650      	mov	r0, sl
    db5c:	469b      	mov	fp, r3
    db5e:	f000 f8eb 	bl	dd38 <____aeabi_uidivmod_from_thumb>
    db62:	9b00      	ldr	r3, [sp, #0]
    db64:	041a      	lsls	r2, r3, #16
    db66:	0409      	lsls	r1, r1, #16
    db68:	0c10      	lsrs	r0, r2, #16
    db6a:	4301      	orrs	r1, r0
    db6c:	458b      	cmp	fp, r1
    db6e:	d907      	bls.n	db80 <__udivdi3+0x320>
    db70:	1909      	adds	r1, r1, r4
    db72:	3d01      	subs	r5, #1
    db74:	428c      	cmp	r4, r1
    db76:	d803      	bhi.n	db80 <__udivdi3+0x320>
    db78:	458b      	cmp	fp, r1
    db7a:	d901      	bls.n	db80 <__udivdi3+0x320>
    db7c:	3d01      	subs	r5, #1
    db7e:	1909      	adds	r1, r1, r4
    db80:	465b      	mov	r3, fp
    db82:	0436      	lsls	r6, r6, #16
    db84:	1acb      	subs	r3, r1, r3
    db86:	4335      	orrs	r5, r6
    db88:	469a      	mov	sl, r3
    db8a:	46ab      	mov	fp, r5
    db8c:	e6fe      	b.n	d98c <__udivdi3+0x12c>
    db8e:	458a      	cmp	sl, r1
    db90:	d983      	bls.n	da9a <__udivdi3+0x23a>
    db92:	4499      	add	r9, r3
    db94:	1989      	adds	r1, r1, r6
    db96:	e780      	b.n	da9a <__udivdi3+0x23a>
    db98:	3e01      	subs	r6, #1
    db9a:	1909      	adds	r1, r1, r4
    db9c:	e70e      	b.n	d9bc <__udivdi3+0x15c>
    db9e:	46c0      	nop			; (mov r8, r8)

0000dba0 <__clzsi2>:
    dba0:	e3a0101c 	mov	r1, #28
    dba4:	e3500801 	cmp	r0, #65536	; 0x10000
    dba8:	21a00820 	lsrcs	r0, r0, #16
    dbac:	22411010 	subcs	r1, r1, #16
    dbb0:	e3500c01 	cmp	r0, #256	; 0x100
    dbb4:	21a00420 	lsrcs	r0, r0, #8
    dbb8:	22411008 	subcs	r1, r1, #8
    dbbc:	e3500010 	cmp	r0, #16
    dbc0:	21a00220 	lsrcs	r0, r0, #4
    dbc4:	22411004 	subcs	r1, r1, #4
    dbc8:	e28f2008 	add	r2, pc, #8
    dbcc:	e7d20000 	ldrb	r0, [r2, r0]
    dbd0:	e0800001 	add	r0, r0, r1
    dbd4:	e12fff1e 	bx	lr
    dbd8:	02020304 	.word	0x02020304
    dbdc:	01010101 	.word	0x01010101
	...

0000dbe8 <__vPortDisableInterruptsFromThumb_from_thumb>:
    dbe8:	4778      	bx	pc
    dbea:	46c0      	nop			; (mov r8, r8)
    dbec:	eaffc986 	b	20c <vPortDisableInterruptsFromThumb>

0000dbf0 <__vPortExitCritical_from_thumb>:
    dbf0:	4778      	bx	pc
    dbf2:	46c0      	nop			; (mov r8, r8)
    dbf4:	eaffc99b 	b	268 <vPortExitCritical>

0000dbf8 <____aeabi_idivmod_from_thumb>:
    dbf8:	4778      	bx	pc
    dbfa:	46c0      	nop			; (mov r8, r8)
    dbfc:	eaffda77 	b	45e0 <__aeabi_idivmod>

0000dc00 <____aeabi_dcmpeq_from_thumb>:
    dc00:	4778      	bx	pc
    dc02:	46c0      	nop			; (mov r8, r8)
    dc04:	eafffdb8 	b	d2ec <__aeabi_dcmpeq>

0000dc08 <____aeabi_dcmpge_from_thumb>:
    dc08:	4778      	bx	pc
    dc0a:	46c0      	nop			; (mov r8, r8)
    dc0c:	eafffdc8 	b	d334 <__aeabi_dcmpge>

0000dc10 <__vTaskSuspend_from_arm>:
    dc10:	e59fc000 	ldr	ip, [pc]	; dc18 <__vTaskSuspend_from_arm+0x8>
    dc14:	e12fff1c 	bx	ip
    dc18:	00003ee1 	.word	0x00003ee1

0000dc1c <____aeabi_dcmplt_from_thumb>:
    dc1c:	4778      	bx	pc
    dc1e:	46c0      	nop			; (mov r8, r8)
    dc20:	eafffdb7 	b	d304 <__aeabi_dcmplt>

0000dc24 <__putchar_from_arm>:
    dc24:	e59fc000 	ldr	ip, [pc]	; dc2c <__putchar_from_arm+0x8>
    dc28:	e12fff1c 	bx	ip
    dc2c:	000053e9 	.word	0x000053e9

0000dc30 <__fflush_from_arm>:
    dc30:	e59fc000 	ldr	ip, [pc]	; dc38 <__fflush_from_arm+0x8>
    dc34:	e12fff1c 	bx	ip
    dc38:	00004761 	.word	0x00004761

0000dc3c <__i2enable_from_thumb>:
    dc3c:	4778      	bx	pc
    dc3e:	46c0      	nop			; (mov r8, r8)
    dc40:	eaffc999 	b	2ac <i2enable>

0000dc44 <____aeabi_ui2d_from_thumb>:
    dc44:	4778      	bx	pc
    dc46:	46c0      	nop			; (mov r8, r8)
    dc48:	eafffc0d 	b	cc84 <__aeabi_ui2d>

0000dc4c <__vTaskDelay_from_arm>:
    dc4c:	e59fc000 	ldr	ip, [pc]	; dc54 <__vTaskDelay_from_arm+0x8>
    dc50:	e12fff1c 	bx	ip
    dc54:	00003d31 	.word	0x00003d31

0000dc58 <____aeabi_uidiv_from_thumb>:
    dc58:	4778      	bx	pc
    dc5a:	46c0      	nop			; (mov r8, r8)
    dc5c:	eaffd9cc 	b	4394 <__aeabi_uidiv>

0000dc60 <__vPortEnterCritical_from_thumb>:
    dc60:	4778      	bx	pc
    dc62:	46c0      	nop			; (mov r8, r8)
    dc64:	eaffc974 	b	23c <vPortEnterCritical>

0000dc68 <____aeabi_ldiv0_from_arm>:
    dc68:	e59fc000 	ldr	ip, [pc]	; dc70 <____aeabi_ldiv0_from_arm+0x8>
    dc6c:	e12fff1c 	bx	ip
    dc70:	00004601 	.word	0x00004601

0000dc74 <____aeabi_dmul_from_thumb>:
    dc74:	4778      	bx	pc
    dc76:	46c0      	nop			; (mov r8, r8)
    dc78:	eafffc41 	b	cd84 <__aeabi_dmul>

0000dc7c <__vPortISRStartFirstTask_from_thumb>:
    dc7c:	4778      	bx	pc
    dc7e:	46c0      	nop			; (mov r8, r8)
    dc80:	eaffc8ef 	b	44 <vPortISRStartFirstTask>

0000dc84 <____aeabi_dadd_from_thumb>:
    dc84:	4778      	bx	pc
    dc86:	46c0      	nop			; (mov r8, r8)
    dc88:	eafffb39 	b	c974 <__adddf3>

0000dc8c <____aeabi_idiv_from_thumb>:
    dc8c:	4778      	bx	pc
    dc8e:	46c0      	nop			; (mov r8, r8)
    dc90:	eaffda06 	b	44b0 <__aeabi_idiv>

0000dc94 <____aeabi_d2iz_from_thumb>:
    dc94:	4778      	bx	pc
    dc96:	46c0      	nop			; (mov r8, r8)
    dc98:	eafffdb1 	b	d364 <__aeabi_d2iz>

0000dc9c <____gnu_uldivmod_helper_from_arm>:
    dc9c:	e59fc000 	ldr	ip, [pc]	; dca4 <____gnu_uldivmod_helper_from_arm+0x8>
    dca0:	e12fff1c 	bx	ip
    dca4:	0000d435 	.word	0x0000d435

0000dca8 <__xQueueGenericSend_from_arm>:
    dca8:	e59fc000 	ldr	ip, [pc]	; dcb0 <__xQueueGenericSend_from_arm+0x8>
    dcac:	e12fff1c 	bx	ip
    dcb0:	00003049 	.word	0x00003049

0000dcb4 <____clzsi2_from_thumb>:
    dcb4:	4778      	bx	pc
    dcb6:	46c0      	nop			; (mov r8, r8)
    dcb8:	eaffffb8 	b	dba0 <__clzsi2>

0000dcbc <____aeabi_dcmpgt_from_thumb>:
    dcbc:	4778      	bx	pc
    dcbe:	46c0      	nop			; (mov r8, r8)
    dcc0:	eafffda1 	b	d34c <__aeabi_dcmpgt>

0000dcc4 <__vTaskIncrementTick_from_arm>:
    dcc4:	e59fc000 	ldr	ip, [pc]	; dccc <__vTaskIncrementTick_from_arm+0x8>
    dcc8:	e12fff1c 	bx	ip
    dccc:	000039ed 	.word	0x000039ed

0000dcd0 <____aeabi_uldivmod_from_thumb>:
    dcd0:	4778      	bx	pc
    dcd2:	46c0      	nop			; (mov r8, r8)
    dcd4:	eafffdb9 	b	d3c0 <__aeabi_uldivmod>

0000dcd8 <__vTaskSwitchContext_from_arm>:
    dcd8:	e59fc000 	ldr	ip, [pc]	; dce0 <__vTaskSwitchContext_from_arm+0x8>
    dcdc:	e12fff1c 	bx	ip
    dce0:	00003e19 	.word	0x00003e19

0000dce4 <__xQueueGenericReceive_from_arm>:
    dce4:	e59fc000 	ldr	ip, [pc]	; dcec <__xQueueGenericReceive_from_arm+0x8>
    dce8:	e12fff1c 	bx	ip
    dcec:	000031e9 	.word	0x000031e9

0000dcf0 <____aeabi_idiv0_from_arm>:
    dcf0:	e59fc000 	ldr	ip, [pc]	; dcf8 <____aeabi_idiv0_from_arm+0x8>
    dcf4:	e12fff1c 	bx	ip
    dcf8:	00004601 	.word	0x00004601

0000dcfc <__puts_from_arm>:
    dcfc:	e59fc000 	ldr	ip, [pc]	; dd04 <__puts_from_arm+0x8>
    dd00:	e12fff1c 	bx	ip
    dd04:	0000546d 	.word	0x0000546d

0000dd08 <__main_from_arm>:
    dd08:	e59fc000 	ldr	ip, [pc]	; dd10 <__main_from_arm+0x8>
    dd0c:	e12fff1c 	bx	ip
    dd10:	00000d75 	.word	0x00000d75

0000dd14 <____aeabi_ddiv_from_thumb>:
    dd14:	4778      	bx	pc
    dd16:	46c0      	nop			; (mov r8, r8)
    dd18:	eafffcbd 	b	d014 <__aeabi_ddiv>

0000dd1c <____aeabi_i2d_from_thumb>:
    dd1c:	4778      	bx	pc
    dd1e:	46c0      	nop			; (mov r8, r8)
    dd20:	eafffbe0 	b	cca8 <__aeabi_i2d>

0000dd24 <__printf_from_arm>:
    dd24:	e59fc000 	ldr	ip, [pc]	; dd2c <__printf_from_arm+0x8>
    dd28:	e12fff1c 	bx	ip
    dd2c:	000053b5 	.word	0x000053b5

0000dd30 <____aeabi_dsub_from_thumb>:
    dd30:	4778      	bx	pc
    dd32:	46c0      	nop			; (mov r8, r8)
    dd34:	eafffb0d 	b	c970 <__aeabi_dsub>

0000dd38 <____aeabi_uidivmod_from_thumb>:
    dd38:	4778      	bx	pc
    dd3a:	46c0      	nop			; (mov r8, r8)
    dd3c:	eaffd9d3 	b	4490 <__aeabi_uidivmod>
	...

0000dd78 <_global_impure_ptr>:
    dd78:	40000008 00005d04 0000575e 0000575e     ...@.]..^W..^W..
    dd88:	00005d14 0000575e 0000575e 0000575e     .]..^W..^W..^W..
    dd98:	0000575e 0000575e 0000575e 00005cae     ^W..^W..^W...\..
    dda8:	00005cc4 0000575e 000059c8 00005c52     .\..^W...Y..R\..
    ddb8:	0000575e 00005cce 00005cda 00005cda     ^W...\...\...\..
    ddc8:	00005cda 00005cda 00005cda 00005cda     .\...\...\...\..
    ddd8:	00005cda 00005cda 00005cda 0000575e     .\...\...\..^W..
    dde8:	0000575e 0000575e 0000575e 0000575e     ^W..^W..^W..^W..
    ddf8:	0000575e 0000575e 0000575e 0000575e     ^W..^W..^W..^W..
    de08:	0000575e 00005a24 00005afc 0000575e     ^W..$Z...Z..^W..
    de18:	00005afc 0000575e 0000575e 0000575e     .Z..^W..^W..^W..
    de28:	0000575e 00005b70 0000575e 0000575e     ^W..p[..^W..^W..
    de38:	00005b7c 0000575e 0000575e 0000575e     |[..^W..^W..^W..
    de48:	0000575e 0000575e 00005bbc 0000575e     ^W..^W...[..^W..
    de58:	0000575e 00005bf6 0000575e 0000575e     ^W...[..^W..^W..
    de68:	0000575e 0000575e 0000575e 0000575e     ^W..^W..^W..^W..
    de78:	0000575e 0000575e 0000575e 0000575e     ^W..^W..^W..^W..
    de88:	00005d20 00005e3e 00005afc 00005afc      ]..>^...Z...Z..
    de98:	00005afc 00005ca2 00005e3e 0000575e     .Z...\..>^..^W..
    dea8:	0000575e 00005e0c 0000575e 00005e20     ^W...^..^W.. ^..
    deb8:	00005e4e 00005d48 00005d7c 0000575e     N^..H]..|]..^W..
    dec8:	00005d86 0000575e 00005e46 0000575e     .]..^W..F^..^W..
    ded8:	0000575e 00005dde                       ^W...]..

0000dee0 <blanks.3930>:
    dee0:	20202020 20202020 20202020 20202020                     

0000def0 <zeroes.3931>:
    def0:	30303030 30303030 30303030 30303030     0000000000000000
    df00:	0000736a 00006cf6 00006cf6 0000737e     js...l...l..~s..
    df10:	00006cf6 00006cf6 00006cf6 00006cf6     .l...l...l...l..
    df20:	00006cf6 00006cf6 00007308 00007320     .l...l...s.. s..
    df30:	00006cf6 00006fa0 000072c2 00006cf6     .l...o...r...l..
    df40:	0000732c 0000733a 0000733a 0000733a     ,s..:s..:s..:s..
    df50:	0000733a 0000733a 0000733a 0000733a     :s..:s..:s..:s..
    df60:	0000733a 0000733a 00006cf6 00006cf6     :s..:s...l...l..
    df70:	00006cf6 00006cf6 00006cf6 00006cf6     .l...l...l...l..
    df80:	00006cf6 00006cf6 00006cf6 00006cf6     .l...l...l...l..
    df90:	00007070 0000713a 00006cf6 0000713a     pp..:q...l..:q..
    dfa0:	00006cf6 00006cf6 00006cf6 00006cf6     .l...l...l...l..
    dfb0:	000071aa 00006cf6 00006cf6 00007230     .q...l...l..0r..
    dfc0:	00006cf6 00006cf6 00006cf6 00006cf6     .l...l...l...l..
    dfd0:	00006cf6 0000728c 00006cf6 00006cf6     .l...r...l...l..
    dfe0:	000071b8 00006cf6 00006cf6 00006cf6     .q...l...l...l..
    dff0:	00006cf6 00006cf6 00006cf6 00006cf6     .l...l...l...l..
    e000:	00006cf6 00006cf6 00006cf6 00007216     .l...l...l...r..
    e010:	0000748e 0000713a 0000713a 0000713a     .t..:q..:q..:q..
    e020:	00007480 0000748e 00006cf6 00006cf6     .t...t...l...l..
    e030:	0000744a 00006cf6 00007460 00007492     Jt...l..`t...t..
    e040:	0000738c 000073be 00006cf6 000073ca     .s...s...l...s..
    e050:	00006cf6 00007496 00006cf6 00006cf6     .l...t...l...l..
    e060:	0000741e                                .t..

0000e064 <blanks.3945>:
    e064:	20202020 20202020 20202020 20202020                     

0000e074 <zeroes.3946>:
    e074:	30303030 30303030 30303030 30303030     0000000000000000
    e084:	00000000                                ....

0000e088 <p05.2452>:
    e088:	00000005 00000019 0000007d 00000000     ........}.......

0000e098 <__mprec_tens>:
    e098:	00000000 3ff00000 00000000 40240000     .......?......$@
    e0a8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    e0b8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    e0c8:	00000000 412e8480 00000000 416312d0     .......A......cA
    e0d8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    e0e8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    e0f8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    e108:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    e118:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    e128:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    e138:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    e148:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    e158:	79d99db4 44ea7843                       ...yCx.D

0000e160 <__mprec_bigtens>:
    e160:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    e170:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    e180:	7f73bf3c 75154fdd                       <.s..O.u

0000e188 <__mprec_tinytens>:
    e188:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    e198:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    e1a8:	64ac6f43 0ac80628 0000b1aa 0000adea     Co.d(...........
    e1b8:	0000adea 0000b19e 0000adea 0000adea     ................
    e1c8:	0000adea 0000adea 0000adea 0000adea     ................
    e1d8:	0000b006 0000b192 0000adea 0000b01e     ................
    e1e8:	0000b1f2 0000adea 0000b1e6 0000b1be     ................
    e1f8:	0000b1be 0000b1be 0000b1be 0000b1be     ................
    e208:	0000b1be 0000b1be 0000b1be 0000b1be     ................
    e218:	0000adea 0000adea 0000adea 0000adea     ................
    e228:	0000adea 0000adea 0000adea 0000adea     ................
    e238:	0000adea 0000adea 0000afca 0000adea     ................
    e248:	0000adea 0000adea 0000adea 0000adea     ................
    e258:	0000adea 0000adea 0000adea 0000adea     ................
    e268:	0000adea 0000af96 0000adea 0000adea     ................
    e278:	0000adea 0000adea 0000adea 0000aeba     ................
    e288:	0000adea 0000adea 0000b124 0000adea     ........$.......
    e298:	0000adea 0000adea 0000adea 0000adea     ................
    e2a8:	0000adea 0000adea 0000adea 0000adea     ................
    e2b8:	0000adea 0000b172 0000afd2 0000adea     ....r...........
    e2c8:	0000adea 0000adea 0000b166 0000afd2     ........f.......
    e2d8:	0000adea 0000adea 0000b154 0000adea     ........T.......
    e2e8:	0000b02a 0000af9e 0000b054 0000b048     *.......T...H...
    e2f8:	0000adea 0000b0d2 0000adea 0000aec2     ................
    e308:	0000adea 0000adea 0000b082              ............

0000e314 <blanks.3874>:
    e314:	20202020 20202020 20202020 20202020                     

0000e324 <zeroes.3875>:
    e324:	30303030 30303030 30303030 30303030     0000000000000000
    e334:	0000bdc8 0000b9e0 0000b9e0 0000bdbc     ................
    e344:	0000b9e0 0000b9e0 0000b9e0 0000b9e0     ................
    e354:	0000b9e0 0000b9e0 0000bc10 0000bdb0     ................
    e364:	0000b9e0 0000bc28 0000be10 0000b9e0     ....(...........
    e374:	0000be04 0000bddc 0000bddc 0000bddc     ................
    e384:	0000bddc 0000bddc 0000bddc 0000bddc     ................
    e394:	0000bddc 0000bddc 0000b9e0 0000b9e0     ................
    e3a4:	0000b9e0 0000b9e0 0000b9e0 0000b9e0     ................
    e3b4:	0000b9e0 0000b9e0 0000b9e0 0000b9e0     ................
    e3c4:	0000bb9e 0000b9e0 0000b9e0 0000b9e0     ................
    e3d4:	0000b9e0 0000b9e0 0000b9e0 0000b9e0     ................
    e3e4:	0000b9e0 0000b9e0 0000b9e0 0000bbdc     ................
    e3f4:	0000b9e0 0000b9e0 0000b9e0 0000b9e0     ................
    e404:	0000b9e0 0000babe 0000b9e0 0000b9e0     ................
    e414:	0000bd80 0000b9e0 0000b9e0 0000b9e0     ................
    e424:	0000b9e0 0000b9e0 0000b9e0 0000b9e0     ................
    e434:	0000b9e0 0000b9e0 0000b9e0 0000bc48     ............H...
    e444:	0000bba6 0000b9e0 0000b9e0 0000b9e0     ................
    e454:	0000bd74 0000bba6 0000b9e0 0000b9e0     t...............
    e464:	0000bd62 0000b9e0 0000bd44 0000bbe4     b.......D.......
    e474:	0000bd14 0000bd08 0000b9e0 0000bc6c     ............l...
    e484:	0000b9e0 0000bac6 0000b9e0 0000b9e0     ................
    e494:	0000bcb6                                ....

0000e498 <blanks.3888>:
    e498:	20202020 20202020 20202020 20202020                     

0000e4a8 <zeroes.3889>:
    e4a8:	30303030 30303030 30303030 30303030     0000000000000000
    e4b8:	74736572 65747261 65722072 74726f70     restarter report
    e4c8:	252e2e2e 00000078 73206f4e 20686375     ...%x...No such 
    e4d8:	69766564 34256563 00000a78 61206f6e     device%4x...no a
    e4e8:	6f6e6b63 67656c77 78252865 00000a29     cknowlege(%x)...
    e4f8:	64616572 2e676e69 0020202e 74696157     reading..  .Wait
    e508:	00000009 65727825 78250967 00000000     ....%xreg.%x....
    e518:	74617453 69207375 78252073 0000000a     Status is %x....
    e528:	64616552 67656220 3e5b6e69 00002020     Read begin[>  ..
    e538:	3d080808 0063253e 656e6f64 2e2e2e2e     ...=>%c.done....
    e548:	0000002e 61746166 0000006c 75626544     ....fatal...Debu
    e558:	67313333 00000000 69676552 72657473     331g....Register
    e568:	73655220 00007465 75746553 65622070      Reset..Setup be
    e578:	5b6e6967 0000203e 7461440d 72742061     gin[> ...Data tr
    e588:	6d736e61 6f697469 6e45206e 00002164     ansmition End!..
    e598:	616d6553 65766967 00000000              Semagive....

0000e5a4 <OV7670>:
    e5a4:	00001204 000040d0 00008c02 0000703a     .....@......:p..
    e5b4:	00007211 000040d0 00008c02 0000703a     .r...@......:p..
    e5c4:	00007135 00007211 000073f0 0000a202     5q...r...s......
    e5d4:	00001500 00007a20 00007b10 00007c1e     .... z...{...|..
    e5e4:	00007d35 00007e5a 00007f69 00008076     5}..Z~..i...v...
    e5f4:	00008180 00008288 0000838f 00008496     ................
    e604:	000085a3 000086af 000087c4 000088d7     ................
    e614:	000089e8 000013e0 00000000 00001000     ................
    e624:	00000d40 00001418 0000a505 0000ab07     @...............
    e634:	00002495 00002533 000026e3 00009f78     .$..3%...&..x...
    e644:	0000a068 0000a103 0000a6d8 0000a7d8     h...............
    e654:	0000a8f0 0000a990 0000aa94 000013e5     ................
    e664:	00000e61 00000f4b 00001602 00001e07     a...K...........
    e674:	00002102 00002291 00002907 0000330b     .!..."...)...3..
    e684:	0000350b 0000371d 00003871 0000392a     .5...7..q8..*9..
    e694:	00003c78 00004d34 00004e20 00006900     x<..4M.. N...i..
    e6a4:	00006b0a 00007410 00008d4f 00008e00     .k...t..O.......
    e6b4:	00008f00 00009000 00009100 00009600     ................
    e6c4:	00009a00 0000b084 0000b10c 0000b20e     ................
    e6d4:	0000b382 0000b80a 0000430a 000044f0     .........C...D..
    e6e4:	00004534 0000483a 00005999 00005a88     4E..:H...Y...Z..
    e6f4:	00005b44 00005c67 00005d49 00005e0e     D[..g\..I]...^..
    e704:	00006c0a 00006d55 00006e11 00006f9f     .l..Um...n...o..
    e714:	00006a40 00000140 00000260 000013e7     @j..@...`.......
    e724:	00004f80 00005080 00005100 00005222     .O...P...Q.."R..
    e734:	0000535e 00005480 0000589e 00004108     ^S...T...X...A..
    e744:	00003f00 00007505 000076e1 00004c00     .?...u...v...L..
    e754:	00007701 00003dc3 00004b09 0000c960     .w...=...K..`...
    e764:	00004138 00005640 00003411 00003b12     8A..@V...4...;..
    e774:	0000a488 00009600 00009730 00009820     ........0... ...
    e784:	00009930 00009a84 00009b29 00009c03     0.......).......
    e794:	00009d4c 00009e3f 00007804 00007901     L...?....x...y..
    e7a4:	0000c8f0 00001020 00001016 00001010     .... ...........
    e7b4:	0000100c 00001008 00001004 00000ff4     ................
    e7c4:	0000101c 6c6c6548 00002c6f 726f7720     ....Hello,.. wor
    e7d4:	0021646c 72737369 00000000 0000444c     ld!.issr....LD..
    e7e4:	72617473 53492074 63204953 656e6e6f     start ISSI conne
    e7f4:	6f697463 0000006e 3d767270 00007825     ction...prv=%x..
    e804:	253d7243 00000064 0964252d 000a6425     Cr=%d...-%d.%d..
    e814:	6967696d 00000000 6f757974 00000075     migi....tyuou...
    e824:	78252020 2e2e2e2e 09783425 00000000       %x....%4x.....
    e834:	00096425 58383025 00000000 32302520     %d..%08X.... %02
    e844:	00000058 6e6f4351 00314273 6f725051     X...QConsB1.QPro
    e854:	00324264 6f725051 00334264 6e6f4351     dB2.QProdB3.QCon
    e864:	00344273 6f725051 00354264 6e6f4351     sB4.QProdB5.QCon
    e874:	00364273 73655442 00003174 73655442     sB6.BTest1..BTes
    e884:	00003274 4d746e49 00687461 516e6547     t2..IntMath.GenQ
    e894:	00000000 6f4c754d 00000077 654d754d     ....MuLow...MuMe
    e8a4:	00000064 6948754d 00006867 6b656550     d...MuHigh..Peek
    e8b4:	0000004c 6b656550 0000004d 6b656550     L...PeekM...Peek
    e8c4:	00003148 6b656550 00003248 5f544e43     H1..PeekH2..CNT_
    e8d4:	00434e49 5f4d494c 00434e49 54435f43     INC.LIM_INC.C_CT
    e8e4:	00004c52 50535553 0058545f 50535553     RL..SUSP_TX.SUSP
    e8f4:	0058525f 09097325 25096325 75250975     _RX.%s..%c.%u.%u
    e904:	0d752509 0000000a 454c4449 00000000     .%u.....IDLE....
    e914:	00000a0d 00000043 00464e49 00666e69     ....C...INF.inf.
    e924:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
    e934:	42413938 46454443 00000000 33323130     89ABCDEF....0123
    e944:	37363534 62613938 66656463 00000000     456789abcdef....
    e954:	6c756e28 0000296c 00000030 69666e49     (null)..0...Infi
    e964:	7974696e 00000000 004e614e 49534f50     nity....NaN.POSI
    e974:	00000058                                X...
