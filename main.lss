
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ee1c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000ee1c  0000ee1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000008c8  40000000  0000ee24  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002c8  400008c8  0000f6ec  000188c8  2**2
                  ALLOC
  4 .ARM.attributes 00000032  00000000  00000000  000188c8  2**0
                  CONTENTS, READONLY
  5 .comment      0000002a  00000000  00000000  000188fa  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000708  00000000  00000000  00018928  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000cc7  00000000  00000000  00019030  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00006c05  00000000  00000000  00019cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001c91  00000000  00000000  000208fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002d14  00000000  00000000  0002258d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002378  00000000  00000000  000252a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001fe0  00000000  00000000  0002761c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000040e7  00000000  00000000  000295fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000009ca  00000000  00000000  0002d6e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e0  00000000  00000000  0002e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_undf-0x20>:

.section .startup,"ax"
         .code 32
         .align 0

	b     _start						/* reset - _start			*/
       0:	ea0011d0 	b	4748 <_startup>
	ldr   pc, _undf						/* undefined - _undf		*/
       4:	e59ff014 	ldr	pc, [pc, #20]	; 20 <_undf>
	ldr   pc, _swi						/* SWI - _swi				*/
       8:	e59ff014 	ldr	pc, [pc, #20]	; 24 <_swi>
	ldr   pc, _pabt						/* program abort - _pabt	*/
       c:	e59ff014 	ldr	pc, [pc, #20]	; 28 <_pabt>
	ldr   pc, _dabt						/* data abort - _dabt		*/
      10:	e59ff014 	ldr	pc, [pc, #20]	; 2c <_dabt>
	nop									/* reserved					*/
      14:	e1a00000 	nop			; (mov r0, r0)
	ldr   pc, [pc,#-0x120]				/* IRQ - read the VIC		*/
      18:	e51ff120 	ldr	pc, [pc, #-288]	; ffffff00 <__batteryram_start+0x1ff7bf00>
	ldr   pc, _fiq						/* FIQ - _fiq				*/
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <_fiq>

00000020 <_undf>:
      20:	00000034 	.word	0x00000034

00000024 <_swi>:
      24:	00000098 	.word	0x00000098

00000028 <_pabt>:
      28:	00000038 	.word	0x00000038

0000002c <_dabt>:
      2c:	0000003c 	.word	0x0000003c

00000030 <_fiq>:
      30:	00000040 	.word	0x00000040

00000034 <__undf>:
_swi:   .word vPortYieldProcessor       /* SWI						*/
_pabt:  .word __pabt                    /* program abort			*/
_dabt:  .word __dabt                    /* data abort				*/
_fiq:   .word __fiq                     /* FIQ						*/

__undf: b     .                         /* undefined				*/
      34:	eafffffe 	b	34 <__undf>

00000038 <__pabt>:
__pabt: b     .                         /* program abort			*/
      38:	eafffffe 	b	38 <__pabt>

0000003c <__dabt>:
__dabt: b     .                         /* data abort				*/
      3c:	eafffffe 	b	3c <__dabt>

00000040 <__fiq>:
__fiq:  b     .                         /* FIQ						*/
      40:	eafffffe 	b	40 <__fiq>

00000044 <vPortISRStartFirstTask>:

void vPortISRStartFirstTask( void )
{
	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
      44:	e59f0044 	ldr	r0, [pc, #68]	; 90 <I_BIT+0x10>
      48:	e5900000 	ldr	r0, [r0]
      4c:	e590e000 	ldr	lr, [r0]
      50:	e59f003c 	ldr	r0, [pc, #60]	; 94 <I_BIT+0x14>
      54:	e8be0002 	ldm	lr!, {r1}
      58:	e5801000 	str	r1, [r0]
      5c:	e8be0001 	ldm	lr!, {r0}
      60:	e169f000 	msr	SPSR_fc, r0
      64:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
      68:	e1a00000 	nop			; (mov r0, r0)
      6c:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
      70:	e25ef004 	subs	pc, lr, #4
      74:	e59f000c 	ldr	r0, [pc, #12]	; 88 <I_BIT+0x8>
      78:	e5903000 	ldr	r3, [r0]
      7c:	e59f3008 	ldr	r3, [pc, #8]	; 8c <I_BIT+0xc>
      80:	e5933000 	ldr	r3, [r3]
}
      84:	e12fff1e 	bx	lr
      88:	400008c0 	.word	0x400008c0
      8c:	40000afc 	.word	0x40000afc
      90:	40000afc 	.word	0x40000afc
      94:	400008c0 	.word	0x400008c0

00000098 <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
      98:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
      9c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
      a0:	e94d2000 	stmdb	sp, {sp}^
      a4:	e1a00000 	nop			; (mov r0, r0)
      a8:	e24dd004 	sub	sp, sp, #4
      ac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
      b0:	e9204000 	stmdb	r0!, {lr}
      b4:	e1a0e000 	mov	lr, r0
      b8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
      bc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
      c0:	e1a00000 	nop			; (mov r0, r0)
      c4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
      c8:	e14f0000 	mrs	r0, SPSR
      cc:	e92e0001 	stmdb	lr!, {r0}
      d0:	e59f0064 	ldr	r0, [pc, #100]	; 13c <IRQ_STACK_SIZE+0x3c>
      d4:	e5900000 	ldr	r0, [r0]
      d8:	e92e0001 	stmdb	lr!, {r0}
      dc:	e59f005c 	ldr	r0, [pc, #92]	; 140 <IRQ_STACK_SIZE+0x40>
      e0:	e5900000 	ldr	r0, [r0]
      e4:	e580e000 	str	lr, [r0]
      e8:	e59f2044 	ldr	r2, [pc, #68]	; 134 <IRQ_STACK_SIZE+0x34>
      ec:	e59f3044 	ldr	r3, [pc, #68]	; 138 <IRQ_STACK_SIZE+0x38>
      f0:	e5921000 	ldr	r1, [r2]
      f4:	e5931000 	ldr	r1, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile( "bl			vTaskSwitchContext" );
      f8:	eb003804 	bl	e110 <__vTaskSwitchContext_from_arm>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
      fc:	e59f003c 	ldr	r0, [pc, #60]	; 140 <IRQ_STACK_SIZE+0x40>
     100:	e5900000 	ldr	r0, [r0]
     104:	e590e000 	ldr	lr, [r0]
     108:	e59f002c 	ldr	r0, [pc, #44]	; 13c <IRQ_STACK_SIZE+0x3c>
     10c:	e8be0002 	ldm	lr!, {r1}
     110:	e5801000 	str	r1, [r0]
     114:	e8be0001 	ldm	lr!, {r0}
     118:	e169f000 	msr	SPSR_fc, r0
     11c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
     120:	e1a00000 	nop			; (mov r0, r0)
     124:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
     128:	e25ef004 	subs	pc, lr, #4
     12c:	e5922000 	ldr	r2, [r2]
     130:	e5933000 	ldr	r3, [r3]
     134:	400008c0 	.word	0x400008c0
     138:	40000afc 	.word	0x40000afc
     13c:	400008c0 	.word	0x400008c0
     140:	40000afc 	.word	0x40000afc

00000144 <vPreemptiveTick>:
	saved on entry as part of the context switch. */
	void vPreemptiveTick( void ) __attribute__((naked));
	void vPreemptiveTick( void )
	{
		/* Save the context of the interrupted task. */
		portSAVE_CONTEXT();	
     144:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     148:	e94d2000 	stmdb	sp, {sp}^
     14c:	e1a00000 	nop			; (mov r0, r0)
     150:	e24dd004 	sub	sp, sp, #4
     154:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     158:	e9204000 	stmdb	r0!, {lr}
     15c:	e1a0e000 	mov	lr, r0
     160:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     164:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
     168:	e1a00000 	nop			; (mov r0, r0)
     16c:	e24ee03c 	sub	lr, lr, #60	; 0x3c
     170:	e14f0000 	mrs	r0, SPSR
     174:	e92e0001 	stmdb	lr!, {r0}
     178:	e59f0084 	ldr	r0, [pc, #132]	; 204 <vPreemptiveTick+0xc0>
     17c:	e5900000 	ldr	r0, [r0]
     180:	e92e0001 	stmdb	lr!, {r0}
     184:	e59f007c 	ldr	r0, [pc, #124]	; 208 <vPreemptiveTick+0xc4>
     188:	e5900000 	ldr	r0, [r0]
     18c:	e580e000 	str	lr, [r0]
     190:	e59f2060 	ldr	r2, [pc, #96]	; 1f8 <vPreemptiveTick+0xb4>
     194:	e59f3060 	ldr	r3, [pc, #96]	; 1fc <vPreemptiveTick+0xb8>
     198:	e5921000 	ldr	r1, [r2]
     19c:	e5931000 	ldr	r1, [r3]

		/* Increment the RTOS tick count, then look for the highest priority 
		task that is ready to run. */
		__asm volatile( "bl vTaskIncrementTick" );
     1a0:	eb0037ff 	bl	e1a4 <__vTaskIncrementTick_from_arm>
		__asm volatile( "bl vTaskSwitchContext" );
     1a4:	eb0037d9 	bl	e110 <__vTaskSwitchContext_from_arm>

		/* Ready for the next interrupt. */
		T0IR = 2;
     1a8:	e59f0050 	ldr	r0, [pc, #80]	; 200 <vPreemptiveTick+0xbc>
     1ac:	e3a0c002 	mov	ip, #2
     1b0:	e580c000 	str	ip, [r0]
		VICVectAddr = portCLEAR_VIC_INTERRUPT;
     1b4:	e3e01000 	mvn	r1, #0
     1b8:	e3a00000 	mov	r0, #0
     1bc:	e50100ff 	str	r0, [r1, #-255]	; 0xffffff01
		
		/* Restore the context of the new task. */
		portRESTORE_CONTEXT();
     1c0:	e59f0040 	ldr	r0, [pc, #64]	; 208 <vPreemptiveTick+0xc4>
     1c4:	e5900000 	ldr	r0, [r0]
     1c8:	e590e000 	ldr	lr, [r0]
     1cc:	e59f0030 	ldr	r0, [pc, #48]	; 204 <vPreemptiveTick+0xc0>
     1d0:	e8be0002 	ldm	lr!, {r1}
     1d4:	e5801000 	str	r1, [r0]
     1d8:	e8be0001 	ldm	lr!, {r0}
     1dc:	e169f000 	msr	SPSR_fc, r0
     1e0:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
     1e4:	e1a00000 	nop			; (mov r0, r0)
     1e8:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
     1ec:	e25ef004 	subs	pc, lr, #4
     1f0:	e5922000 	ldr	r2, [r2]
     1f4:	e5933000 	ldr	r3, [r3]
     1f8:	400008c0 	.word	0x400008c0
     1fc:	40000afc 	.word	0x40000afc
     200:	e0004000 	.word	0xe0004000
     204:	400008c0 	.word	0x400008c0
     208:	40000afc 	.word	0x40000afc

0000020c <vPortDisableInterruptsFromThumb>:
	void vPortDisableInterruptsFromThumb( void ) __attribute__ ((naked));
	void vPortEnableInterruptsFromThumb( void ) __attribute__ ((naked));

	void vPortDisableInterruptsFromThumb( void )
	{
		__asm volatile ( 
     20c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     210:	e10f0000 	mrs	r0, CPSR
     214:	e38000c0 	orr	r0, r0, #192	; 0xc0
     218:	e129f000 	msr	CPSR_fc, r0
     21c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     220:	e12fff1e 	bx	lr

00000224 <vPortEnableInterruptsFromThumb>:
			"BX		R14" );					/* Return back to thumb.					*/
	}
			
	void vPortEnableInterruptsFromThumb( void )
	{
		__asm volatile ( 
     224:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     228:	e10f0000 	mrs	r0, CPSR
     22c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
     230:	e129f000 	msr	CPSR_fc, r0
     234:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     238:	e12fff1e 	bx	lr

0000023c <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
     23c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     240:	e10f0000 	mrs	r0, CPSR
     244:	e38000c0 	orr	r0, r0, #192	; 0xc0
     248:	e129f000 	msr	CPSR_fc, r0
     24c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
     250:	e59f300c 	ldr	r3, [pc, #12]	; 264 <vPortEnterCritical+0x28>
     254:	e5930000 	ldr	r0, [r3]
     258:	e2802001 	add	r2, r0, #1
     25c:	e5832000 	str	r2, [r3]
}
     260:	e12fff1e 	bx	lr
     264:	400008c0 	.word	0x400008c0

00000268 <vPortExitCritical>:

void vPortExitCritical( void )
{
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
     268:	e59f3038 	ldr	r3, [pc, #56]	; 2a8 <vPortExitCritical+0x40>
     26c:	e5932000 	ldr	r2, [r3]
     270:	e3520000 	cmp	r2, #0
     274:	012fff1e 	bxeq	lr
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
     278:	e5931000 	ldr	r1, [r3]
     27c:	e2410001 	sub	r0, r1, #1
     280:	e5830000 	str	r0, [r3]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
     284:	e5933000 	ldr	r3, [r3]
     288:	e3530000 	cmp	r3, #0
     28c:	112fff1e 	bxne	lr
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
     290:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     294:	e10f0000 	mrs	r0, CPSR
     298:	e3c000c0 	bic	r0, r0, #192	; 0xc0
     29c:	e129f000 	msr	CPSR_fc, r0
     2a0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     2a4:	e12fff1e 	bx	lr
     2a8:	400008c0 	.word	0x400008c0

000002ac <i2enable>:
Problem	:
****************************************************************************/
void
i2enable ()
{
  PINMODE0 = 0x00000000;
     2ac:	e59f3008 	ldr	r3, [pc, #8]	; 2bc <i2enable+0x10>
     2b0:	e3a02000 	mov	r2, #0
     2b4:	e5832040 	str	r2, [r3, #64]	; 0x40
}
     2b8:	e12fff1e 	bx	lr
     2bc:	e002c000 	.word	0xe002c000

000002c0 <i2cmasterset>:
discribe	:the i2c periphrals which given number will be master
****************************************************************************/
int
i2cmasterset (int a)
{
  switch (a)
     2c0:	e3500001 	cmp	r0, #1
     2c4:	0a00000e 	beq	304 <i2cmasterset+0x44>
     2c8:	e3500002 	cmp	r0, #2
     2cc:	0a000007 	beq	2f0 <i2cmasterset+0x30>
     2d0:	e3500000 	cmp	r0, #0
     2d4:	1a000003 	bne	2e8 <i2cmasterset+0x28>
    {
    case 0:
      I20CONSET = 0x40;
     2d8:	e59f3038 	ldr	r3, [pc, #56]	; 318 <i2cmasterset+0x58>
     2dc:	e3a02040 	mov	r2, #64	; 0x40
     2e0:	e5832000 	str	r2, [r3]
      return 0;
     2e4:	e12fff1e 	bx	lr
    case 2:
      I22CONSET = 0x40;
      return 0;
      break;
    default:
      return 1;
     2e8:	e3a00001 	mov	r0, #1
    }
}
     2ec:	e12fff1e 	bx	lr
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     2f0:	e59f2024 	ldr	r2, [pc, #36]	; 31c <i2cmasterset+0x5c>
     2f4:	e3a0c040 	mov	ip, #64	; 0x40
     2f8:	e582c000 	str	ip, [r2]
      return 0;
     2fc:	e3a00000 	mov	r0, #0
     300:	e12fff1e 	bx	lr
    case 0:
      I20CONSET = 0x40;
      return 0;
      break;
    case 1:
      I21CONSET = 0x40;
     304:	e59f1014 	ldr	r1, [pc, #20]	; 320 <i2cmasterset+0x60>
     308:	e3a00040 	mov	r0, #64	; 0x40
     30c:	e5810000 	str	r0, [r1]
      return 0;
     310:	e3a00000 	mov	r0, #0
     314:	e12fff1e 	bx	lr
     318:	e001c000 	.word	0xe001c000
     31c:	e0080000 	.word	0xe0080000
     320:	e005c000 	.word	0xe005c000

00000324 <i2cstart>:
discribe	:the i2c will start
****************************************************************************/
int
i2cstart (int a)
{
  switch (a)
     324:	e3500001 	cmp	r0, #1
     328:	0a000015 	beq	384 <i2cstart+0x60>
     32c:	e3500002 	cmp	r0, #2
     330:	0a00000b 	beq	364 <i2cstart+0x40>
     334:	e3500000 	cmp	r0, #0
     338:	1a000007 	bne	35c <i2cstart+0x38>
    {
    case 0:
      I20CONSET = 0x60;
     33c:	e59f2060 	ldr	r2, [pc, #96]	; 3a4 <i2cstart+0x80>
     340:	e3a03060 	mov	r3, #96	; 0x60
     344:	e5823000 	str	r3, [r2]
      while (I20STAT != 0x08);
     348:	e5920004 	ldr	r0, [r2, #4]
     34c:	e3500008 	cmp	r0, #8
     350:	1afffffc 	bne	348 <i2cstart+0x24>
      break;
    case 2:
      I22CONSET = 0x60;
      while (I22STAT != 0x08);
//              printf("I2C now started\n");
      return 0;
     354:	e3a00000 	mov	r0, #0
     358:	e12fff1e 	bx	lr
      break;
    default:
      return 1;
     35c:	e3a00001 	mov	r0, #1
    }
}
     360:	e12fff1e 	bx	lr
      I21CONSET = 0x60;
      while (I21STAT != 0x08);
      return 0;
      break;
    case 2:
      I22CONSET = 0x60;
     364:	e59f203c 	ldr	r2, [pc, #60]	; 3a8 <i2cstart+0x84>
     368:	e3a03060 	mov	r3, #96	; 0x60
     36c:	e5823000 	str	r3, [r2]
      while (I22STAT != 0x08);
     370:	e5920004 	ldr	r0, [r2, #4]
     374:	e3500008 	cmp	r0, #8
     378:	1afffffc 	bne	370 <i2cstart+0x4c>
//              printf("I2C now started\n");
      return 0;
     37c:	e3a00000 	mov	r0, #0
     380:	e12fff1e 	bx	lr
      I20CONSET = 0x60;
      while (I20STAT != 0x08);
      return 0;
      break;
    case 1:
      I21CONSET = 0x60;
     384:	e59f2020 	ldr	r2, [pc, #32]	; 3ac <i2cstart+0x88>
     388:	e3a01060 	mov	r1, #96	; 0x60
     38c:	e5821000 	str	r1, [r2]
      while (I21STAT != 0x08);
     390:	e592c004 	ldr	ip, [r2, #4]
     394:	e35c0008 	cmp	ip, #8
     398:	1afffffc 	bne	390 <i2cstart+0x6c>
      break;
    case 2:
      I22CONSET = 0x60;
      while (I22STAT != 0x08);
//              printf("I2C now started\n");
      return 0;
     39c:	e3a00000 	mov	r0, #0
     3a0:	e12fff1e 	bx	lr
     3a4:	e001c000 	.word	0xe001c000
     3a8:	e0080000 	.word	0xe0080000
     3ac:	e005c000 	.word	0xe005c000

000003b0 <i2crestart>:
discribe	:the i2c will restart
****************************************************************************/
int
i2crestart (int a)
{
  switch (a)
     3b0:	e3500001 	cmp	r0, #1
function name	:i2crestart
discribe	:the i2c will restart
****************************************************************************/
int
i2crestart (int a)
{
     3b4:	e92d4008 	push	{r3, lr}
  switch (a)
     3b8:	0a00002d 	beq	474 <i2crestart+0xc4>
     3bc:	e3500002 	cmp	r0, #2
     3c0:	0a000017 	beq	424 <i2crestart+0x74>
     3c4:	e3500000 	cmp	r0, #0
      while ((I22STAT != 0x10) && (I22STAT != 0x08));
      printf ("restarter report...%x", I22STAT);
      return 0;
      break;
    default:
      return 1;
     3c8:	13a00001 	movne	r0, #1
discribe	:the i2c will restart
****************************************************************************/
int
i2crestart (int a)
{
  switch (a)
     3cc:	1a000012 	bne	41c <i2crestart+0x6c>
    {
    case 0:
      I20CONSET = 0x14;
     3d0:	e59f30ec 	ldr	r3, [pc, #236]	; 4c4 <i2crestart+0x114>
     3d4:	e3a01014 	mov	r1, #20
      I20CONCLR = 0x08;
     3d8:	e3a00008 	mov	r0, #8
      I20CONSET = 0x60;
     3dc:	e3a02060 	mov	r2, #96	; 0x60
i2crestart (int a)
{
  switch (a)
    {
    case 0:
      I20CONSET = 0x14;
     3e0:	e5831000 	str	r1, [r3]
      I20CONCLR = 0x08;
     3e4:	e5830018 	str	r0, [r3, #24]
      I20CONSET = 0x60;
     3e8:	e5832000 	str	r2, [r3]
      while ((I20STAT != 0x10) && (I20STAT != 0x08));
     3ec:	ea000002 	b	3fc <i2crestart+0x4c>
     3f0:	e593e004 	ldr	lr, [r3, #4]
     3f4:	e35e0008 	cmp	lr, #8
     3f8:	0a000002 	beq	408 <i2crestart+0x58>
     3fc:	e593c004 	ldr	ip, [r3, #4]
     400:	e35c0010 	cmp	ip, #16
     404:	1afffff9 	bne	3f0 <i2crestart+0x40>
      printf ("restarter report...%x", I20STAT);
     408:	e59f30b4 	ldr	r3, [pc, #180]	; 4c4 <i2crestart+0x114>
     40c:	e59f00b4 	ldr	r0, [pc, #180]	; 4c8 <i2crestart+0x118>
     410:	e5931004 	ldr	r1, [r3, #4]
     414:	eb003753 	bl	e168 <__printf_from_arm>
      return 0;
     418:	e3a00000 	mov	r0, #0
      return 0;
      break;
    default:
      return 1;
    }
}
     41c:	e8bd4008 	pop	{r3, lr}
     420:	e12fff1e 	bx	lr
      while ((I21STAT != 0x10) && (I21STAT != 0x08));
      printf ("restarter report...%x", I21STAT);
      return 0;
      break;
    case 2:
      I22CONSET = 0x14;
     424:	e59f30a0 	ldr	r3, [pc, #160]	; 4cc <i2crestart+0x11c>
     428:	e3a01014 	mov	r1, #20
      I22CONCLR = 0x08;
     42c:	e3a00008 	mov	r0, #8
      I22CONSET = 0x60;
     430:	e3a02060 	mov	r2, #96	; 0x60
      while ((I21STAT != 0x10) && (I21STAT != 0x08));
      printf ("restarter report...%x", I21STAT);
      return 0;
      break;
    case 2:
      I22CONSET = 0x14;
     434:	e5831000 	str	r1, [r3]
      I22CONCLR = 0x08;
     438:	e5830018 	str	r0, [r3, #24]
      I22CONSET = 0x60;
     43c:	e5832000 	str	r2, [r3]
      while ((I22STAT != 0x10) && (I22STAT != 0x08));
     440:	ea000002 	b	450 <i2crestart+0xa0>
     444:	e593e004 	ldr	lr, [r3, #4]
     448:	e35e0008 	cmp	lr, #8
     44c:	0a000002 	beq	45c <i2crestart+0xac>
     450:	e593c004 	ldr	ip, [r3, #4]
     454:	e35c0010 	cmp	ip, #16
     458:	1afffff9 	bne	444 <i2crestart+0x94>
      printf ("restarter report...%x", I22STAT);
     45c:	e59f3068 	ldr	r3, [pc, #104]	; 4cc <i2crestart+0x11c>
     460:	e59f0060 	ldr	r0, [pc, #96]	; 4c8 <i2crestart+0x118>
     464:	e5931004 	ldr	r1, [r3, #4]
     468:	eb00373e 	bl	e168 <__printf_from_arm>
      return 0;
     46c:	e3a00000 	mov	r0, #0
     470:	eaffffe9 	b	41c <i2crestart+0x6c>
      while ((I20STAT != 0x10) && (I20STAT != 0x08));
      printf ("restarter report...%x", I20STAT);
      return 0;
      break;
    case 1:
      I21CONSET = 0x14;
     474:	e59f3054 	ldr	r3, [pc, #84]	; 4d0 <i2crestart+0x120>
     478:	e3a01014 	mov	r1, #20
      I21CONCLR = 0x08;
     47c:	e3a00008 	mov	r0, #8
      I21CONSET = 0x60;
     480:	e3a02060 	mov	r2, #96	; 0x60
      while ((I20STAT != 0x10) && (I20STAT != 0x08));
      printf ("restarter report...%x", I20STAT);
      return 0;
      break;
    case 1:
      I21CONSET = 0x14;
     484:	e5831000 	str	r1, [r3]
      I21CONCLR = 0x08;
     488:	e5830018 	str	r0, [r3, #24]
      I21CONSET = 0x60;
     48c:	e5832000 	str	r2, [r3]
      while ((I21STAT != 0x10) && (I21STAT != 0x08));
     490:	ea000002 	b	4a0 <i2crestart+0xf0>
     494:	e593e004 	ldr	lr, [r3, #4]
     498:	e35e0008 	cmp	lr, #8
     49c:	0a000002 	beq	4ac <i2crestart+0xfc>
     4a0:	e593c004 	ldr	ip, [r3, #4]
     4a4:	e35c0010 	cmp	ip, #16
     4a8:	1afffff9 	bne	494 <i2crestart+0xe4>
      printf ("restarter report...%x", I21STAT);
     4ac:	e59f301c 	ldr	r3, [pc, #28]	; 4d0 <i2crestart+0x120>
     4b0:	e59f0010 	ldr	r0, [pc, #16]	; 4c8 <i2crestart+0x118>
     4b4:	e5931004 	ldr	r1, [r3, #4]
     4b8:	eb00372a 	bl	e168 <__printf_from_arm>
      return 0;
     4bc:	e3a00000 	mov	r0, #0
     4c0:	eaffffd5 	b	41c <i2crestart+0x6c>
     4c4:	e001c000 	.word	0xe001c000
     4c8:	0000e978 	.word	0x0000e978
     4cc:	e0080000 	.word	0xe0080000
     4d0:	e005c000 	.word	0xe005c000

000004d4 <i2cstop>:
discribe	:the i2c will stop
****************************************************************************/
int
i2cstop (int a)
{
  switch (a)
     4d4:	e3500002 	cmp	r0, #2
     4d8:	1a000004 	bne	4f0 <i2cstop+0x1c>
    {
    case 2:
      I22CONSET = 0x50;
     4dc:	e59f3014 	ldr	r3, [pc, #20]	; 4f8 <i2cstop+0x24>
     4e0:	e3a00050 	mov	r0, #80	; 0x50
      I22CONCLR = 0x2C;
     4e4:	e3a0202c 	mov	r2, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     4e8:	e5830000 	str	r0, [r3]
      I22CONCLR = 0x2C;
     4ec:	e5832018 	str	r2, [r3, #24]
//              printf("I2C stopped\n");
      break;
    default:
      return 1;
    }
}
     4f0:	e3a00001 	mov	r0, #1
     4f4:	e12fff1e 	bx	lr
     4f8:	e0080000 	.word	0xe0080000

000004fc <i2csender>:
*****************************************************************************/
void
i2csender (int Continue, unsigned int Data, int Keta)
{
//int i2cStatus;
  if (Continue == 0)
     4fc:	e3500000 	cmp	r0, #0
parameter 	:bus_num,data
return value	:void
*****************************************************************************/
void
i2csender (int Continue, unsigned int Data, int Keta)
{
     500:	e92d4008 	push	{r3, lr}
//int i2cStatus;
  if (Continue == 0)
     504:	0a00000d 	beq	540 <i2csender+0x44>
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     508:	e3520000 	cmp	r2, #0
	{
	  I22DAT = (Data & 0xFF);
     50c:	159f0098 	ldrne	r0, [pc, #152]	; 5ac <i2csender+0xb0>
	  I22CONCLR = 0x28;
     510:	13a0c028 	movne	ip, #40	; 0x28
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     514:	0a000022 	beq	5a4 <i2csender+0xa8>
	{
	  I22DAT = (Data & 0xFF);
     518:	e20130ff 	and	r3, r1, #255	; 0xff
     51c:	e5803008 	str	r3, [r0, #8]
	  I22CONCLR = 0x28;
     520:	e580c018 	str	ip, [r0, #24]
	  while (I22STAT != 0x28);
     524:	e5903004 	ldr	r3, [r0, #4]
     528:	e3530028 	cmp	r3, #40	; 0x28
     52c:	1afffffc 	bne	524 <i2csender+0x28>
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     530:	e2522008 	subs	r2, r2, #8
     534:	0a00001a 	beq	5a4 <i2csender+0xa8>
	{
	  I22DAT = (Data & 0xFF);
	  I22CONCLR = 0x28;
	  while (I22STAT != 0x28);
//              printf("Data%4x::::\n",Data);
	  Data = Data >> 8;
     538:	e1a01421 	lsr	r1, r1, #8
     53c:	eafffff5 	b	518 <i2csender+0x1c>
i2csender (int Continue, unsigned int Data, int Keta)
{
//int i2cStatus;
  if (Continue == 0)
    {
      I22DAT = Data;
     540:	e59f3064 	ldr	r3, [pc, #100]	; 5ac <i2csender+0xb0>
     544:	e5831008 	str	r1, [r3, #8]
      I22CONSET |= 0x04;
     548:	e593c000 	ldr	ip, [r3]
      I22CONCLR = 0x08;
     54c:	e3a02008 	mov	r2, #8
{
//int i2cStatus;
  if (Continue == 0)
    {
      I22DAT = Data;
      I22CONSET |= 0x04;
     550:	e38c0004 	orr	r0, ip, #4
     554:	e5830000 	str	r0, [r3]
      I22CONCLR = 0x08;
     558:	e5832018 	str	r2, [r3, #24]
//      printf("requesting%x",Data);
      while (I22STAT != 0x18 && I22STAT != 0x20);
     55c:	e5932004 	ldr	r2, [r3, #4]
     560:	e3520018 	cmp	r2, #24
     564:	0a000002 	beq	574 <i2csender+0x78>
     568:	e5930004 	ldr	r0, [r3, #4]
     56c:	e3500020 	cmp	r0, #32
     570:	1afffff9 	bne	55c <i2csender+0x60>
      FIO2PIN1 = 0x2;
     574:	e59f0034 	ldr	r0, [pc, #52]	; 5b0 <i2csender+0xb4>
     578:	e3a02002 	mov	r2, #2
     57c:	e54020aa 	strb	r2, [r0, #-170]	; 0xffffff56
      if (I22STAT == 0x20)
     580:	e59fc024 	ldr	ip, [pc, #36]	; 5ac <i2csender+0xb0>
     584:	e59c3004 	ldr	r3, [ip, #4]
     588:	e3530020 	cmp	r3, #32
     58c:	1a000004 	bne	5a4 <i2csender+0xa8>
	{
	  printf ("No such device%4x\n", Data);
     590:	e59f001c 	ldr	r0, [pc, #28]	; 5b4 <i2csender+0xb8>
     594:	eb0036f3 	bl	e168 <__printf_from_arm>
	  i2cErr = 0x22;
     598:	e59f3018 	ldr	r3, [pc, #24]	; 5b8 <i2csender+0xbc>
     59c:	e3a01022 	mov	r1, #34	; 0x22
     5a0:	e5831000 	str	r1, [r3]
	}
//      if(I22STAT==0x28)i2cErr = 0;
//      break;
    }
//      return i2cErr;
}
     5a4:	e8bd4008 	pop	{r3, lr}
     5a8:	e12fff1e 	bx	lr
     5ac:	e0080000 	.word	0xe0080000
     5b0:	3fffc0ff 	.word	0x3fffc0ff
     5b4:	0000e990 	.word	0x0000e990
     5b8:	40000924 	.word	0x40000924

000005bc <novorvisesender>:

void
novorvisesender (int Continue, unsigned int Data, int Keta)
{
  if (Continue == 0)
     5bc:	e3500000 	cmp	r0, #0
//      return i2cErr;
}

void
novorvisesender (int Continue, unsigned int Data, int Keta)
{
     5c0:	e92d4038 	push	{r3, r4, r5, lr}
     5c4:	e1a04001 	mov	r4, r1
  if (Continue == 0)
     5c8:	0a000021 	beq	654 <novorvisesender+0x98>
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     5cc:	e3520000 	cmp	r2, #0
	{
	  I22DAT = (Data & 0xFF);
     5d0:	159f10a8 	ldrne	r1, [pc, #168]	; 680 <novorvisesender+0xc4>
	  I22CONCLR = 0x28;
     5d4:	13a00028 	movne	r0, #40	; 0x28
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     5d8:	0a00001b 	beq	64c <novorvisesender+0x90>
	{
	  I22DAT = (Data & 0xFF);
     5dc:	e20430ff 	and	r3, r4, #255	; 0xff
     5e0:	e5813008 	str	r3, [r1, #8]
	  I22CONCLR = 0x28;
     5e4:	e5810018 	str	r0, [r1, #24]
	  while (I22STAT != 0x28);
     5e8:	e591c004 	ldr	ip, [r1, #4]
     5ec:	e35c0028 	cmp	ip, #40	; 0x28
     5f0:	1afffffc 	bne	5e8 <novorvisesender+0x2c>
	  i2cErr = 0x22;
	}
    }
  else
    {
      for (; Keta != 0; Keta -= 8)
     5f4:	e2522008 	subs	r2, r2, #8
     5f8:	0a000013 	beq	64c <novorvisesender+0x90>
	{
	  I22DAT = (Data & 0xFF);
	  I22CONCLR = 0x28;
	  while (I22STAT != 0x28);
	  Data = Data >> 8;
     5fc:	e1a04424 	lsr	r4, r4, #8
     600:	eafffff5 	b	5dc <novorvisesender+0x20>
    {
      I22DAT = Data;
      I22CONSET |= 0x04;
      I22CONCLR = 0x08;
      while (I22STAT != 0x18 && I22STAT != 0x20)
	printf (".");
     604:	e3a0002e 	mov	r0, #46	; 0x2e
     608:	eb003699 	bl	e074 <__putchar_from_arm>
  if (Continue == 0)
    {
      I22DAT = Data;
      I22CONSET |= 0x04;
      I22CONCLR = 0x08;
      while (I22STAT != 0x18 && I22STAT != 0x20)
     60c:	e5953004 	ldr	r3, [r5, #4]
     610:	e3530018 	cmp	r3, #24
     614:	0a000002 	beq	624 <novorvisesender+0x68>
     618:	e595c004 	ldr	ip, [r5, #4]
     61c:	e35c0020 	cmp	ip, #32
     620:	1afffff7 	bne	604 <novorvisesender+0x48>
	printf (".");
      if (I22STAT == 0x20)
     624:	e59f1054 	ldr	r1, [pc, #84]	; 680 <novorvisesender+0xc4>
     628:	e5910004 	ldr	r0, [r1, #4]
     62c:	e3500020 	cmp	r0, #32
     630:	1a000005 	bne	64c <novorvisesender+0x90>
	{
	  printf ("No such device%4x\n", Data);
     634:	e59f0048 	ldr	r0, [pc, #72]	; 684 <novorvisesender+0xc8>
     638:	e1a01004 	mov	r1, r4
     63c:	eb0036c9 	bl	e168 <__printf_from_arm>
	  i2cErr = 0x22;
     640:	e59fc040 	ldr	ip, [pc, #64]	; 688 <novorvisesender+0xcc>
     644:	e3a02022 	mov	r2, #34	; 0x22
     648:	e58c2000 	str	r2, [ip]
	}
//                              if(I22STAT==0x28)i2cErr = 0;
//                              break;
    }
//      return i2cErr;
}
     64c:	e8bd4038 	pop	{r3, r4, r5, lr}
     650:	e12fff1e 	bx	lr
void
novorvisesender (int Continue, unsigned int Data, int Keta)
{
  if (Continue == 0)
    {
      I22DAT = Data;
     654:	e59f5024 	ldr	r5, [pc, #36]	; 680 <novorvisesender+0xc4>
     658:	e5851008 	str	r1, [r5, #8]
      I22CONSET |= 0x04;
     65c:	e5952000 	ldr	r2, [r5]
      I22CONCLR = 0x08;
     660:	e3a00008 	mov	r0, #8
novorvisesender (int Continue, unsigned int Data, int Keta)
{
  if (Continue == 0)
    {
      I22DAT = Data;
      I22CONSET |= 0x04;
     664:	e3821004 	orr	r1, r2, #4
     668:	e5851000 	str	r1, [r5]
      I22CONCLR = 0x08;
     66c:	e5850018 	str	r0, [r5, #24]
      while (I22STAT != 0x18 && I22STAT != 0x20)
     670:	e5953004 	ldr	r3, [r5, #4]
     674:	e3530018 	cmp	r3, #24
     678:	1affffe6 	bne	618 <novorvisesender+0x5c>
     67c:	eaffffe8 	b	624 <novorvisesender+0x68>
     680:	e0080000 	.word	0xe0080000
     684:	0000e990 	.word	0x0000e990
     688:	40000924 	.word	0x40000924

0000068c <tinyreader>:

/***********************************************************************************************************************************
*/
int
tinyreader (int Keta, int Adr, int registernumber)
{
     68c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
upper:
  I22DAT = (Adr + 1);
     690:	e59f40e4 	ldr	r4, [pc, #228]	; 77c <tinyreader+0xf0>

/***********************************************************************************************************************************
*/
int
tinyreader (int Keta, int Adr, int registernumber)
{
     694:	e1a06000 	mov	r6, r0
     698:	e1a05002 	mov	r5, r2
      printf ("reading..  ");
      I22CONSET |= 0x04;
      I22CONCLR = 0x28;
      printf ("Wait\t");
      while (I22STAT != 0x50);
      printf ("%xreg\t%x", registernumber++, I22DAT);
     69c:	e2818001 	add	r8, r1, #1
tinyreader (int Keta, int Adr, int registernumber)
{
upper:
  I22DAT = (Adr + 1);
  I22CONSET |= 0x04;
  I22CONCLR = 0x08;
     6a0:	e3a07008 	mov	r7, #8
*/
int
tinyreader (int Keta, int Adr, int registernumber)
{
upper:
  I22DAT = (Adr + 1);
     6a4:	e5848008 	str	r8, [r4, #8]
  I22CONSET |= 0x04;
     6a8:	e5940000 	ldr	r0, [r4]
     6ac:	e3803004 	orr	r3, r0, #4
     6b0:	e5843000 	str	r3, [r4]
  I22CONCLR = 0x08;
     6b4:	e5847018 	str	r7, [r4, #24]
  while (I22STAT != 0x40 && I22STAT != 0x48);
     6b8:	e5941004 	ldr	r1, [r4, #4]
     6bc:	e3510040 	cmp	r1, #64	; 0x40
     6c0:	0a000002 	beq	6d0 <tinyreader+0x44>
     6c4:	e5942004 	ldr	r2, [r4, #4]
     6c8:	e3520048 	cmp	r2, #72	; 0x48
     6cc:	1afffff9 	bne	6b8 <tinyreader+0x2c>
  if (I22STAT == 0x48)
     6d0:	e594c004 	ldr	ip, [r4, #4]
     6d4:	e35c0048 	cmp	ip, #72	; 0x48
     6d8:	e59f309c 	ldr	r3, [pc, #156]	; 77c <tinyreader+0xf0>
     6dc:	1a000005 	bne	6f8 <tinyreader+0x6c>
    {
      printf ("no acknowlege(%x)\n", I22STAT);
     6e0:	e5941004 	ldr	r1, [r4, #4]
     6e4:	e59f0094 	ldr	r0, [pc, #148]	; 780 <tinyreader+0xf4>
     6e8:	eb00369e 	bl	e168 <__printf_from_arm>
      i2crestart (2);
     6ec:	e3a00002 	mov	r0, #2
     6f0:	ebffff2e 	bl	3b0 <i2crestart>
      goto upper;
     6f4:	eaffffea 	b	6a4 <tinyreader+0x18>
    }
  if (I22STAT == 0x40);
  while (registernumber != (Keta + 1))
     6f8:	e2866001 	add	r6, r6, #1
     6fc:	e1550006 	cmp	r5, r6
    {
      printf ("no acknowlege(%x)\n", I22STAT);
      i2crestart (2);
      goto upper;
    }
  if (I22STAT == 0x40);
     700:	e5932004 	ldr	r2, [r3, #4]
  while (registernumber != (Keta + 1))
     704:	0a000016 	beq	764 <tinyreader+0xd8>
    {
      printf ("reading..  ");
      I22CONSET |= 0x04;
     708:	e1a04003 	mov	r4, r3
      I22CONCLR = 0x28;
     70c:	e3a08028 	mov	r8, #40	; 0x28
      printf ("Wait\t");
      while (I22STAT != 0x50);
     710:	e1a07003 	mov	r7, r3
      goto upper;
    }
  if (I22STAT == 0x40);
  while (registernumber != (Keta + 1))
    {
      printf ("reading..  ");
     714:	e59f0068 	ldr	r0, [pc, #104]	; 784 <tinyreader+0xf8>
     718:	eb003692 	bl	e168 <__printf_from_arm>
      I22CONSET |= 0x04;
     71c:	e5941000 	ldr	r1, [r4]
     720:	e3813004 	orr	r3, r1, #4
     724:	e5843000 	str	r3, [r4]
      I22CONCLR = 0x28;
      printf ("Wait\t");
     728:	e59f0058 	ldr	r0, [pc, #88]	; 788 <tinyreader+0xfc>
  if (I22STAT == 0x40);
  while (registernumber != (Keta + 1))
    {
      printf ("reading..  ");
      I22CONSET |= 0x04;
      I22CONCLR = 0x28;
     72c:	e5848018 	str	r8, [r4, #24]
      printf ("Wait\t");
     730:	eb00368c 	bl	e168 <__printf_from_arm>
      while (I22STAT != 0x50);
     734:	e594e004 	ldr	lr, [r4, #4]
     738:	e35e0050 	cmp	lr, #80	; 0x50
     73c:	1afffffc 	bne	734 <tinyreader+0xa8>
      printf ("%xreg\t%x", registernumber++, I22DAT);
     740:	e1a01005 	mov	r1, r5
     744:	e5972008 	ldr	r2, [r7, #8]
     748:	e59f003c 	ldr	r0, [pc, #60]	; 78c <tinyreader+0x100>
     74c:	eb003685 	bl	e168 <__printf_from_arm>
     750:	e2855001 	add	r5, r5, #1
      vTaskDelay (10 / portTICK_RATE_MS);
     754:	e3a0000a 	mov	r0, #10
     758:	eb003671 	bl	e124 <__vTaskDelay_from_arm>
      printf ("no acknowlege(%x)\n", I22STAT);
      i2crestart (2);
      goto upper;
    }
  if (I22STAT == 0x40);
  while (registernumber != (Keta + 1))
     75c:	e1550006 	cmp	r5, r6
     760:	1affffeb 	bne	714 <tinyreader+0x88>
      vTaskDelay (10 / portTICK_RATE_MS);

//                                      if(a==32)return;
    }

  I22CONCLR = 0x0C;
     764:	e59f2010 	ldr	r2, [pc, #16]	; 77c <tinyreader+0xf0>
     768:	e3a0000c 	mov	r0, #12
     76c:	e5820018 	str	r0, [r2, #24]
//      return i2cErr;
}
     770:	e3a00000 	mov	r0, #0
     774:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     778:	e12fff1e 	bx	lr
     77c:	e0080000 	.word	0xe0080000
     780:	0000e9a4 	.word	0x0000e9a4
     784:	0000e9b8 	.word	0x0000e9b8
     788:	0000e9c4 	.word	0x0000e9c4
     78c:	0000e9cc 	.word	0x0000e9cc

00000790 <i2creader>:

int
i2creader (int Keta, int Adr, int registernumber)
{
     790:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  char Loopy;
upper:
  I22DAT = (Adr + 1);
     794:	e59f4190 	ldr	r4, [pc, #400]	; 92c <i2creader+0x19c>
//      return i2cErr;
}

int
i2creader (int Keta, int Adr, int registernumber)
{
     798:	e1a06000 	mov	r6, r0
     79c:	e1a07002 	mov	r7, r2
	  break;
	case 2:
	  Loopy = '-';
	  break;
	case 3:
	  Loopy = '\\';
     7a0:	e281a001 	add	sl, r1, #1
{
  char Loopy;
upper:
  I22DAT = (Adr + 1);
  I22CONSET |= 0x04;
  I22CONCLR = 0x08;
     7a4:	e3a08008 	mov	r8, #8
int
i2creader (int Keta, int Adr, int registernumber)
{
  char Loopy;
upper:
  I22DAT = (Adr + 1);
     7a8:	e584a008 	str	sl, [r4, #8]
  I22CONSET |= 0x04;
     7ac:	e5941000 	ldr	r1, [r4]
     7b0:	e3810004 	orr	r0, r1, #4
     7b4:	e5840000 	str	r0, [r4]
  I22CONCLR = 0x08;
     7b8:	e5848018 	str	r8, [r4, #24]
  printf ("Status is %x\n", I22STAT);
     7bc:	e59f016c 	ldr	r0, [pc, #364]	; 930 <i2creader+0x1a0>
     7c0:	e5941004 	ldr	r1, [r4, #4]
     7c4:	eb003667 	bl	e168 <__printf_from_arm>
  while (I22STAT != 0x40 && I22STAT != 0x48)
     7c8:	e5943004 	ldr	r3, [r4, #4]
     7cc:	e3530040 	cmp	r3, #64	; 0x40
     7d0:	1a000005 	bne	7ec <i2creader+0x5c>
     7d4:	ea000007 	b	7f8 <i2creader+0x68>
    printf (".");
     7d8:	e3a0002e 	mov	r0, #46	; 0x2e
     7dc:	eb003624 	bl	e074 <__putchar_from_arm>
upper:
  I22DAT = (Adr + 1);
  I22CONSET |= 0x04;
  I22CONCLR = 0x08;
  printf ("Status is %x\n", I22STAT);
  while (I22STAT != 0x40 && I22STAT != 0x48)
     7e0:	e5949004 	ldr	r9, [r4, #4]
     7e4:	e3590040 	cmp	r9, #64	; 0x40
     7e8:	0a000002 	beq	7f8 <i2creader+0x68>
     7ec:	e5942004 	ldr	r2, [r4, #4]
     7f0:	e3520048 	cmp	r2, #72	; 0x48
     7f4:	1afffff7 	bne	7d8 <i2creader+0x48>
    printf (".");
  if (I22STAT == 0x48)
     7f8:	e594c004 	ldr	ip, [r4, #4]
     7fc:	e35c0048 	cmp	ip, #72	; 0x48
     800:	e59f9124 	ldr	r9, [pc, #292]	; 92c <i2creader+0x19c>
     804:	1a000005 	bne	820 <i2creader+0x90>
    {
      printf ("no acknowlege(%x)\n", I22STAT);
     808:	e5941004 	ldr	r1, [r4, #4]
     80c:	e59f0120 	ldr	r0, [pc, #288]	; 934 <i2creader+0x1a4>
     810:	eb003654 	bl	e168 <__printf_from_arm>
      i2crestart (2);
     814:	e3a00002 	mov	r0, #2
     818:	ebfffee4 	bl	3b0 <i2crestart>
      goto upper;
     81c:	eaffffe1 	b	7a8 <i2creader+0x18>
    }
  if (I22STAT == 0x40);
  printf ("Read begin[>  ");
     820:	e59f0110 	ldr	r0, [pc, #272]	; 938 <i2creader+0x1a8>
  while (registernumber++ != (Keta + 1))
     824:	e2866001 	add	r6, r6, #1
    {
      printf ("no acknowlege(%x)\n", I22STAT);
      i2crestart (2);
      goto upper;
    }
  if (I22STAT == 0x40);
     828:	e5993004 	ldr	r3, [r9, #4]
  printf ("Read begin[>  ");
     82c:	eb00364d 	bl	e168 <__printf_from_arm>
  while (registernumber++ != (Keta + 1))
     830:	e1570006 	cmp	r7, r6
     834:	059f8100 	ldreq	r8, [pc, #256]	; 93c <i2creader+0x1ac>
     838:	0a000030 	beq	900 <i2creader+0x170>
     83c:	e59f80f8 	ldr	r8, [pc, #248]	; 93c <i2creader+0x1ac>
     840:	e2877001 	add	r7, r7, #1
    {
      I22CONSET |= 0x04;
     844:	e1a04009 	mov	r4, r9
      I22CONCLR = 0x28;
     848:	e3a0a028 	mov	sl, #40	; 0x28
    }
  if (I22STAT == 0x40);
  printf ("Read begin[>  ");
  while (registernumber++ != (Keta + 1))
    {
      I22CONSET |= 0x04;
     84c:	e5943000 	ldr	r3, [r4]
     850:	e383e004 	orr	lr, r3, #4
     854:	e584e000 	str	lr, [r4]
      I22CONCLR = 0x28;
     858:	e584a018 	str	sl, [r4, #24]
      while (I22STAT != 0x50);
     85c:	e5940004 	ldr	r0, [r4, #4]
     860:	e3500050 	cmp	r0, #80	; 0x50
     864:	1afffffc 	bne	85c <i2creader+0xcc>
      vTaskDelay (10 / portTICK_RATE_MS);
     868:	e3a0000a 	mov	r0, #10
     86c:	eb00362c 	bl	e124 <__vTaskDelay_from_arm>
      switch (registernumber % 4)
     870:	e1a00fc7 	asr	r0, r7, #31
     874:	e1a02f20 	lsr	r2, r0, #30
     878:	e0873002 	add	r3, r7, r2
     87c:	e203c003 	and	ip, r3, #3
     880:	e062100c 	rsb	r1, r2, ip
     884:	e3510003 	cmp	r1, #3
     888:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
     88c:	ea000019 	b	8f8 <i2creader+0x168>
     890:	000008ec 	.word	0x000008ec
     894:	000008e0 	.word	0x000008e0
     898:	000008d4 	.word	0x000008d4
     89c:	000008a0 	.word	0x000008a0
	case 2:
	  Loopy = '-';
	  break;
	case 3:
	  Loopy = '\\';
	  break;
     8a0:	e3a0105c 	mov	r1, #92	; 0x5c
	  break;
	case 2:
	  Loopy = '-';
	  break;
	case 3:
	  Loopy = '\\';
     8a4:	e1a05001 	mov	r5, r1
	  break;
	}
      printf ("\b\b\b=>%c", Loopy);
     8a8:	e59f0090 	ldr	r0, [pc, #144]	; 940 <i2creader+0x1b0>
     8ac:	eb00362d 	bl	e168 <__printf_from_arm>
      fflush (stdout);
     8b0:	e5981000 	ldr	r1, [r8]
     8b4:	e5910008 	ldr	r0, [r1, #8]
     8b8:	eb00362f 	bl	e17c <__fflush_from_arm>
      vTaskDelay (10 / portTICK_RATE_MS);
     8bc:	e3a0000a 	mov	r0, #10
     8c0:	eb003617 	bl	e124 <__vTaskDelay_from_arm>
      i2crestart (2);
      goto upper;
    }
  if (I22STAT == 0x40);
  printf ("Read begin[>  ");
  while (registernumber++ != (Keta + 1))
     8c4:	e1560007 	cmp	r6, r7
     8c8:	0a00000c 	beq	900 <i2creader+0x170>
     8cc:	e2877001 	add	r7, r7, #1
     8d0:	eaffffdd 	b	84c <i2creader+0xbc>
	case 1:
	  Loopy = '/';
	  break;
	case 2:
	  Loopy = '-';
	  break;
     8d4:	e3a0102d 	mov	r1, #45	; 0x2d
	  break;
	case 1:
	  Loopy = '/';
	  break;
	case 2:
	  Loopy = '-';
     8d8:	e1a05001 	mov	r5, r1
	  break;
     8dc:	eafffff1 	b	8a8 <i2creader+0x118>
	case 0:
	  Loopy = '|';
	  break;
	case 1:
	  Loopy = '/';
	  break;
     8e0:	e3a0102f 	mov	r1, #47	; 0x2f
	{
	case 0:
	  Loopy = '|';
	  break;
	case 1:
	  Loopy = '/';
     8e4:	e1a05001 	mov	r5, r1
	  break;
     8e8:	eaffffee 	b	8a8 <i2creader+0x118>
    {
      I22CONSET |= 0x04;
      I22CONCLR = 0x28;
      while (I22STAT != 0x50);
      vTaskDelay (10 / portTICK_RATE_MS);
      switch (registernumber % 4)
     8ec:	e3a0107c 	mov	r1, #124	; 0x7c
	{
	case 0:
	  Loopy = '|';
     8f0:	e1a05001 	mov	r5, r1
     8f4:	eaffffeb 	b	8a8 <i2creader+0x118>
    {
      I22CONSET |= 0x04;
      I22CONCLR = 0x28;
      while (I22STAT != 0x50);
      vTaskDelay (10 / portTICK_RATE_MS);
      switch (registernumber % 4)
     8f8:	e1a01005 	mov	r1, r5
     8fc:	eaffffe9 	b	8a8 <i2creader+0x118>
      printf ("\b\b\b=>%c", Loopy);
      fflush (stdout);
      vTaskDelay (10 / portTICK_RATE_MS);
//                                      if(a==32)return;
    }
  printf ("done.....");
     900:	e59f003c 	ldr	r0, [pc, #60]	; 944 <i2creader+0x1b4>
     904:	eb003617 	bl	e168 <__printf_from_arm>
  fflush (stdout);
     908:	e5983000 	ldr	r3, [r8]
     90c:	e5930008 	ldr	r0, [r3, #8]
     910:	eb003619 	bl	e17c <__fflush_from_arm>
  I22CONCLR = 0x0C;
     914:	e59f2010 	ldr	r2, [pc, #16]	; 92c <i2creader+0x19c>
     918:	e3a0c00c 	mov	ip, #12
     91c:	e582c018 	str	ip, [r2, #24]
//      return i2cErr;
}
     920:	e3a00000 	mov	r0, #0
     924:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
     928:	e12fff1e 	bx	lr
     92c:	e0080000 	.word	0xe0080000
     930:	0000e9d8 	.word	0x0000e9d8
     934:	0000e9a4 	.word	0x0000e9a4
     938:	0000e9e8 	.word	0x0000e9e8
     93c:	40000000 	.word	0x40000000
     940:	0000e9f8 	.word	0x0000e9f8
     944:	0000ea00 	.word	0x0000ea00

00000948 <tinyread>:

/*********************************************************************************************************************
*********************************************************************************************************************/
void
tinyread (int subadr, int size, int NumByte)
{
     948:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     94c:	e1a07000 	mov	r7, r0
  i2cstart (2);
     950:	e3a00002 	mov	r0, #2

/*********************************************************************************************************************
*********************************************************************************************************************/
void
tinyread (int subadr, int size, int NumByte)
{
     954:	e1a06001 	mov	r6, r1
     958:	e1a05002 	mov	r5, r2
  i2cstart (2);
  i2cErr = 0;			//i want to read!b So, start.
     95c:	e59f407c 	ldr	r4, [pc, #124]	; 9e0 <tinyread+0x98>
/*********************************************************************************************************************
*********************************************************************************************************************/
void
tinyread (int subadr, int size, int NumByte)
{
  i2cstart (2);
     960:	ebfffe6f 	bl	324 <i2cstart>
  i2cErr = 0;			//i want to read!b So, start.
     964:	e3a0c000 	mov	ip, #0
  novorvisesender (0, 0x42, 8);	//Hey, ?
     968:	e1a0000c 	mov	r0, ip
     96c:	e3a01042 	mov	r1, #66	; 0x42
     970:	e3a02008 	mov	r2, #8
*********************************************************************************************************************/
void
tinyread (int subadr, int size, int NumByte)
{
  i2cstart (2);
  i2cErr = 0;			//i want to read!b So, start.
     974:	e584c000 	str	ip, [r4]
  novorvisesender (0, 0x42, 8);	//Hey, ?
     978:	ebffff0f 	bl	5bc <novorvisesender>
  if (i2cErr == 0x22)
     97c:	e5943000 	ldr	r3, [r4]
     980:	e3530022 	cmp	r3, #34	; 0x22
     984:	0a000012 	beq	9d4 <tinyread+0x8c>
    {
      printf ("fatal");
      i2cstop (2);
      return;
    }
  i2csender (1, subadr, 8);
     988:	e1a01007 	mov	r1, r7
     98c:	e3a02008 	mov	r2, #8
     990:	e3a00001 	mov	r0, #1
     994:	ebfffed8 	bl	4fc <i2csender>
  i2crestart (2);		//if you understand, restart,please.
     998:	e3a00002 	mov	r0, #2
     99c:	ebfffe83 	bl	3b0 <i2crestart>
  tinyreader (size, 0x42, NumByte);	//
     9a0:	e1a00006 	mov	r0, r6
     9a4:	e3a01042 	mov	r1, #66	; 0x42
     9a8:	e1a02005 	mov	r2, r5
     9ac:	ebffff36 	bl	68c <tinyreader>
  vTaskDelay (30 / portTICK_RATE_MS);
     9b0:	e3a0001e 	mov	r0, #30
     9b4:	eb0035da 	bl	e124 <__vTaskDelay_from_arm>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     9b8:	e59f0024 	ldr	r0, [pc, #36]	; 9e4 <tinyread+0x9c>
     9bc:	e3a01050 	mov	r1, #80	; 0x50
      I22CONCLR = 0x2C;
     9c0:	e3a0202c 	mov	r2, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     9c4:	e5801000 	str	r1, [r0]
      I22CONCLR = 0x2C;
     9c8:	e5802018 	str	r2, [r0, #24]
  i2csender (1, subadr, 8);
  i2crestart (2);		//if you understand, restart,please.
  tinyreader (size, 0x42, NumByte);	//
  vTaskDelay (30 / portTICK_RATE_MS);
  i2cstop (2);
}
     9cc:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     9d0:	e12fff1e 	bx	lr
  i2cstart (2);
  i2cErr = 0;			//i want to read!b So, start.
  novorvisesender (0, 0x42, 8);	//Hey, ?
  if (i2cErr == 0x22)
    {
      printf ("fatal");
     9d4:	e59f000c 	ldr	r0, [pc, #12]	; 9e8 <tinyread+0xa0>
     9d8:	eb0035e2 	bl	e168 <__printf_from_arm>
     9dc:	eafffff5 	b	9b8 <tinyread+0x70>
     9e0:	40000924 	.word	0x40000924
     9e4:	e0080000 	.word	0xe0080000
     9e8:	0000ea0c 	.word	0x0000ea0c

000009ec <SCCBread>:
  i2cstop (2);
}

void
SCCBread (int subadr, int size, int NumByte)
{
     9ec:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     9f0:	e1a07000 	mov	r7, r0
  i2cstart (2);
     9f4:	e3a00002 	mov	r0, #2
  i2cstop (2);
}

void
SCCBread (int subadr, int size, int NumByte)
{
     9f8:	e1a06001 	mov	r6, r1
     9fc:	e1a05002 	mov	r5, r2
  i2cstart (2);
//      vTaskDelay(300 / portTICK_RATE_MS);
  i2cErr = 0;			//i want to read!b So, start.
     a00:	e59f4090 	ldr	r4, [pc, #144]	; a98 <SCCBread+0xac>
}

void
SCCBread (int subadr, int size, int NumByte)
{
  i2cstart (2);
     a04:	ebfffe46 	bl	324 <i2cstart>
//      vTaskDelay(300 / portTICK_RATE_MS);
  i2cErr = 0;			//i want to read!b So, start.
     a08:	e3a0c000 	mov	ip, #0
  i2csender (0, 0x42, 8);	//Hey, ?
     a0c:	e1a0000c 	mov	r0, ip
     a10:	e3a01042 	mov	r1, #66	; 0x42
     a14:	e3a02008 	mov	r2, #8
void
SCCBread (int subadr, int size, int NumByte)
{
  i2cstart (2);
//      vTaskDelay(300 / portTICK_RATE_MS);
  i2cErr = 0;			//i want to read!b So, start.
     a18:	e584c000 	str	ip, [r4]
  i2csender (0, 0x42, 8);	//Hey, ?
     a1c:	ebfffeb6 	bl	4fc <i2csender>
  if (i2cErr == 0x22)
     a20:	e5943000 	ldr	r3, [r4]
     a24:	e3530022 	cmp	r3, #34	; 0x22
     a28:	0a000012 	beq	a78 <SCCBread+0x8c>
    {
      printf ("fatal");
      i2cstop (2);
      return;
    }
  i2csender (1, subadr, 8);
     a2c:	e1a01007 	mov	r1, r7
     a30:	e3a02008 	mov	r2, #8
     a34:	e3a00001 	mov	r0, #1
     a38:	ebfffeaf 	bl	4fc <i2csender>
//      printf("Adress read request at%4x OK\n\n", subadr);     //0x03byte? 
  i2crestart (2);		//if you understand, restart,please.
     a3c:	e3a00002 	mov	r0, #2
     a40:	ebfffe5a 	bl	3b0 <i2crestart>
  i2creader (size, 0x42, NumByte);	//
     a44:	e1a02005 	mov	r2, r5
     a48:	e1a00006 	mov	r0, r6
     a4c:	e3a01042 	mov	r1, #66	; 0x42
     a50:	ebffff4e 	bl	790 <i2creader>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     a54:	e59f3040 	ldr	r3, [pc, #64]	; a9c <SCCBread+0xb0>
     a58:	e3a02050 	mov	r2, #80	; 0x50
      I22CONCLR = 0x2C;
     a5c:	e3a0c02c 	mov	ip, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     a60:	e5832000 	str	r2, [r3]
  i2csender (1, subadr, 8);
//      printf("Adress read request at%4x OK\n\n", subadr);     //0x03byte? 
  i2crestart (2);		//if you understand, restart,please.
  i2creader (size, 0x42, NumByte);	//
  i2cstop (2);
  printf ("Debu331g\n");
     a64:	e59f0034 	ldr	r0, [pc, #52]	; aa0 <SCCBread+0xb4>
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
      I22CONCLR = 0x2C;
     a68:	e583c018 	str	ip, [r3, #24]
  i2csender (1, subadr, 8);
//      printf("Adress read request at%4x OK\n\n", subadr);     //0x03byte? 
  i2crestart (2);		//if you understand, restart,please.
  i2creader (size, 0x42, NumByte);	//
  i2cstop (2);
  printf ("Debu331g\n");
     a6c:	eb00357d 	bl	e068 <__puts_from_arm>
}
     a70:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     a74:	e12fff1e 	bx	lr
//      vTaskDelay(300 / portTICK_RATE_MS);
  i2cErr = 0;			//i want to read!b So, start.
  i2csender (0, 0x42, 8);	//Hey, ?
  if (i2cErr == 0x22)
    {
      printf ("fatal");
     a78:	e59f0024 	ldr	r0, [pc, #36]	; aa4 <SCCBread+0xb8>
     a7c:	eb0035b9 	bl	e168 <__printf_from_arm>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     a80:	e59f0014 	ldr	r0, [pc, #20]	; a9c <SCCBread+0xb0>
     a84:	e3a01050 	mov	r1, #80	; 0x50
      I22CONCLR = 0x2C;
     a88:	e3a0202c 	mov	r2, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     a8c:	e5801000 	str	r1, [r0]
      I22CONCLR = 0x2C;
     a90:	e5802018 	str	r2, [r0, #24]
     a94:	eafffff5 	b	a70 <SCCBread+0x84>
     a98:	40000924 	.word	0x40000924
     a9c:	e0080000 	.word	0xe0080000
     aa0:	0000ea14 	.word	0x0000ea14
     aa4:	0000ea0c 	.word	0x0000ea0c

00000aa8 <SCCBwrite>:
  printf ("Debu331g\n");
}

int
SCCBwrite (int subadr, int size, int Data)
{
     aa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     aac:	e1a08000 	mov	r8, r0
  i2cstart (2);
     ab0:	e3a00002 	mov	r0, #2
  printf ("Debu331g\n");
}

int
SCCBwrite (int subadr, int size, int Data)
{
     ab4:	e1a06001 	mov	r6, r1
     ab8:	e1a07002 	mov	r7, r2
  i2cstart (2);
     abc:	ebfffe18 	bl	324 <i2cstart>
//      vTaskDelay(1 / portTICK_RATE_MS);
  FIO2CLR1=2; 
     ac0:	e59f3090 	ldr	r3, [pc, #144]	; b58 <SCCBwrite+0xb0>
  i2cErr = 0;
     ac4:	e59f5090 	ldr	r5, [pc, #144]	; b5c <SCCBwrite+0xb4>
     ac8:	e3a04000 	mov	r4, #0
int
SCCBwrite (int subadr, int size, int Data)
{
  i2cstart (2);
//      vTaskDelay(1 / portTICK_RATE_MS);
  FIO2CLR1=2; 
     acc:	e3a0c002 	mov	ip, #2
     ad0:	e543c0a2 	strb	ip, [r3, #-162]	; 0xffffff5e
  i2cErr = 0;
  i2csender (0, 0x42, 8);
     ad4:	e1a00004 	mov	r0, r4
     ad8:	e3a01042 	mov	r1, #66	; 0x42
     adc:	e3a02008 	mov	r2, #8
SCCBwrite (int subadr, int size, int Data)
{
  i2cstart (2);
//      vTaskDelay(1 / portTICK_RATE_MS);
  FIO2CLR1=2; 
  i2cErr = 0;
     ae0:	e5854000 	str	r4, [r5]
  i2csender (0, 0x42, 8);
     ae4:	ebfffe84 	bl	4fc <i2csender>
  if (i2cErr == 0x22)
     ae8:	e5953000 	ldr	r3, [r5]
     aec:	e3530022 	cmp	r3, #34	; 0x22
     af0:	0a00000f 	beq	b34 <SCCBwrite+0x8c>
    {
      printf ("fatal");
      i2cstop (2);
      return -1;
    }
  i2csender (1, subadr, 8);	//3byte? 
     af4:	e3a00001 	mov	r0, #1
     af8:	e1a01008 	mov	r1, r8
     afc:	e3a02008 	mov	r2, #8
     b00:	ebfffe7d 	bl	4fc <i2csender>
  i2csender (1, Data, size);
     b04:	e3a00001 	mov	r0, #1
     b08:	e1a02006 	mov	r2, r6
     b0c:	e1a01007 	mov	r1, r7
     b10:	ebfffe79 	bl	4fc <i2csender>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     b14:	e59f3044 	ldr	r3, [pc, #68]	; b60 <SCCBwrite+0xb8>
     b18:	e3a02050 	mov	r2, #80	; 0x50
      I22CONCLR = 0x2C;
     b1c:	e3a0c02c 	mov	ip, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     b20:	e5832000 	str	r2, [r3]
      I22CONCLR = 0x2C;
     b24:	e583c018 	str	ip, [r3, #24]
      return -1;
    }
  i2csender (1, subadr, 8);	//3byte? 
  i2csender (1, Data, size);
  i2cstop (2);
  return 0;
     b28:	e1a00004 	mov	r0, r4
}
     b2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     b30:	e12fff1e 	bx	lr
  FIO2CLR1=2; 
  i2cErr = 0;
  i2csender (0, 0x42, 8);
  if (i2cErr == 0x22)
    {
      printf ("fatal");
     b34:	e59f0028 	ldr	r0, [pc, #40]	; b64 <SCCBwrite+0xbc>
     b38:	eb00358a 	bl	e168 <__printf_from_arm>
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     b3c:	e59f101c 	ldr	r1, [pc, #28]	; b60 <SCCBwrite+0xb8>
     b40:	e3a00050 	mov	r0, #80	; 0x50
      I22CONCLR = 0x2C;
     b44:	e3a0202c 	mov	r2, #44	; 0x2c
i2cstop (int a)
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
     b48:	e5810000 	str	r0, [r1]
  i2csender (0, 0x42, 8);
  if (i2cErr == 0x22)
    {
      printf ("fatal");
      i2cstop (2);
      return -1;
     b4c:	e3e00000 	mvn	r0, #0
{
  switch (a)
    {
    case 2:
      I22CONSET = 0x50;
      I22CONCLR = 0x2C;
     b50:	e5812018 	str	r2, [r1, #24]
  i2csender (0, 0x42, 8);
  if (i2cErr == 0x22)
    {
      printf ("fatal");
      i2cstop (2);
      return -1;
     b54:	eafffff4 	b	b2c <SCCBwrite+0x84>
     b58:	3fffc0ff 	.word	0x3fffc0ff
     b5c:	40000924 	.word	0x40000924
     b60:	e0080000 	.word	0xe0080000
     b64:	0000ea0c 	.word	0x0000ea0c

00000b68 <SCCBByteWrite>:

int
SCCBByteWrite (int inp)
{
//      printf("%x,%x,%x",inp >> 8, 8, inp & 0xFF);
 return SCCBwrite ((inp >> 8 & 0xFF), 8, (inp & 0xFF)) ;
     b68:	e1a03420 	lsr	r3, r0, #8
     b6c:	e20020ff 	and	r2, r0, #255	; 0xff
     b70:	e3a01008 	mov	r1, #8
     b74:	e20300ff 	and	r0, r3, #255	; 0xff
     b78:	eaffffca 	b	aa8 <SCCBwrite>

00000b7c <vi2c>:
}

void
vi2c (void *pvParameters)
{
     b7c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  int regpointer = 0;
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
     b80:	e59f4130 	ldr	r4, [pc, #304]	; cb8 <vi2c+0x13c>
     b84:	e3a01000 	mov	r1, #0
     b88:	e1a03001 	mov	r3, r1
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     b8c:	e3a06040 	mov	r6, #64	; 0x40
void
vi2c (void *pvParameters)
{
  int regpointer = 0;
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
     b90:	e3e02000 	mvn	r2, #0
     b94:	e5940000 	ldr	r0, [r4]
     b98:	eb00357e 	bl	e198 <__xQueueGenericReceive_from_arm>
  i2cmasterset (2);
  I22SCLH = 80;
     b9c:	e2865010 	add	r5, r6, #16
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     ba0:	e59f1114 	ldr	r1, [pc, #276]	; cbc <vi2c+0x140>
  int regpointer = 0;
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
  i2cmasterset (2);
  I22SCLH = 80;
  I22SCLL = 180;
     ba4:	e2852064 	add	r2, r5, #100	; 0x64
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     ba8:	e5816000 	str	r6, [r1]
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
  i2cmasterset (2);
  I22SCLH = 80;
  I22SCLL = 180;
  printf ("Register Reset\n");
     bac:	e59f010c 	ldr	r0, [pc, #268]	; cc0 <vi2c+0x144>
{
  int regpointer = 0;
  char Loopy;
  xSemaphoreTake (Mutex, portMAX_DELAY);
  i2cmasterset (2);
  I22SCLH = 80;
     bb0:	e5815010 	str	r5, [r1, #16]
  I22SCLL = 180;
     bb4:	e5812014 	str	r2, [r1, #20]
  printf ("Register Reset\n");
     bb8:	eb00352a 	bl	e068 <__puts_from_arm>
  vTaskDelay (300 / portTICK_RATE_MS);
     bbc:	e3a00f4b 	mov	r0, #300	; 0x12c
     bc0:	eb003557 	bl	e124 <__vTaskDelay_from_arm>
  RESETREG
     bc4:	e3a00d4a 	mov	r0, #4736	; 0x1280
     bc8:	ebffffe6 	bl	b68 <SCCBByteWrite>
  vTaskDelay (200 / portTICK_RATE_MS);
  printf ("Setup begin[> ");
  fflush (stdout);
     bcc:	e59f50f0 	ldr	r5, [pc, #240]	; cc4 <vi2c+0x148>
  I22SCLH = 80;
  I22SCLL = 180;
  printf ("Register Reset\n");
  vTaskDelay (300 / portTICK_RATE_MS);
  RESETREG
  vTaskDelay (200 / portTICK_RATE_MS);
     bd0:	e3a000c8 	mov	r0, #200	; 0xc8
     bd4:	eb003552 	bl	e124 <__vTaskDelay_from_arm>
  printf ("Setup begin[> ");
     bd8:	e59f00e8 	ldr	r0, [pc, #232]	; cc8 <vi2c+0x14c>
     bdc:	eb003561 	bl	e168 <__printf_from_arm>
  fflush (stdout);
     be0:	e5953000 	ldr	r3, [r5]
     be4:	e5930008 	ldr	r0, [r3, #8]
     be8:	eb003563 	bl	e17c <__fflush_from_arm>
     bec:	e59f70d8 	ldr	r7, [pc, #216]	; ccc <vi2c+0x150>
  for (regpointer = 0; regpointer != 129;)
     bf0:	e3a06000 	mov	r6, #0
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
     bf4:	e7970106 	ldr	r0, [r7, r6, lsl #2]
     bf8:	ebffffda 	bl	b68 <SCCBByteWrite>
     bfc:	e3700001 	cmn	r0, #1
     c00:	0a000029 	beq	cac <vi2c+0x130>
      regpointer++;
     c04:	e2866001 	add	r6, r6, #1
      	switch (regpointer % 4)
     c08:	e2061003 	and	r1, r6, #3
     c0c:	e3510002 	cmp	r1, #2
	  break;
	  case 1:
	  Loopy = '/';
	  break;
	  case 2:
	  Loopy = '-';
     c10:	03a0102d 	moveq	r1, #45	; 0x2d
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
      regpointer++;
      	switch (regpointer % 4)
     c14:	0a000005 	beq	c30 <vi2c+0xb4>
     c18:	e3510003 	cmp	r1, #3
	  break;
	  case 2:
	  Loopy = '-';
	  break;
	  case 3:
	  Loopy = '\\';
     c1c:	03a0105c 	moveq	r1, #92	; 0x5c
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
      regpointer++;
      	switch (regpointer % 4)
     c20:	0a000002 	beq	c30 <vi2c+0xb4>
	  {
	  case 0:
	  Loopy = '|';
     c24:	e3510001 	cmp	r1, #1
     c28:	03a0102f 	moveq	r1, #47	; 0x2f
     c2c:	13a0107c 	movne	r1, #124	; 0x7c
	  break;
	  case 3:
	  Loopy = '\\';
	  break;
	  }
	printf ("\b\b\b=>%c", Loopy);
     c30:	e59f0098 	ldr	r0, [pc, #152]	; cd0 <vi2c+0x154>
     c34:	eb00354b 	bl	e168 <__printf_from_arm>
	fflush (stdout);
     c38:	e5950000 	ldr	r0, [r5]
     c3c:	e5900008 	ldr	r0, [r0, #8]
     c40:	eb00354d 	bl	e17c <__fflush_from_arm>
      vTaskDelay (10 / portTICK_RATE_MS);
     c44:	e3a0000a 	mov	r0, #10
     c48:	eb003535 	bl	e124 <__vTaskDelay_from_arm>
  vTaskDelay (300 / portTICK_RATE_MS);
  RESETREG
  vTaskDelay (200 / portTICK_RATE_MS);
  printf ("Setup begin[> ");
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
     c4c:	e3560081 	cmp	r6, #129	; 0x81
     c50:	1affffe7 	bne	bf4 <vi2c+0x78>
	  }
	printf ("\b\b\b=>%c", Loopy);
	fflush (stdout);
      vTaskDelay (10 / portTICK_RATE_MS);
    }
  printf ("\rData transmition End!\n");
     c54:	e59f0078 	ldr	r0, [pc, #120]	; cd4 <vi2c+0x158>
     c58:	eb003502 	bl	e068 <__puts_from_arm>
  fflush (stdout);
     c5c:	e595c000 	ldr	ip, [r5]
     c60:	e59c0008 	ldr	r0, [ip, #8]
     c64:	eb003544 	bl	e17c <__fflush_from_arm>
  SCCBread (0x00, 0xca, 0);
     c68:	e3a00000 	mov	r0, #0
     c6c:	e1a02000 	mov	r2, r0
     c70:	e3a010ca 	mov	r1, #202	; 0xca
     c74:	ebffff5c 	bl	9ec <SCCBread>
  printf("Semagive");
     c78:	e59f0058 	ldr	r0, [pc, #88]	; cd8 <vi2c+0x15c>
     c7c:	eb003539 	bl	e168 <__printf_from_arm>
  fflush (stdout);
     c80:	e5957000 	ldr	r7, [r5]
     c84:	e5970008 	ldr	r0, [r7, #8]
     c88:	eb00353b 	bl	e17c <__fflush_from_arm>
  xSemaphoreGive (Mutex);
     c8c:	e3a01000 	mov	r1, #0
     c90:	e5940000 	ldr	r0, [r4]
     c94:	e1a02001 	mov	r2, r1
     c98:	e1a03001 	mov	r3, r1
     c9c:	eb00354b 	bl	e1d0 <__xQueueGenericSend_from_arm>
//  vTaskResume ( g_issrhandle );
//  xTaskCreate (ISSR, (signed portCHAR *) "ITS", configMINIMAL_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL);
  while (1) vTaskDelay(10000 / portTICK_RATE_MS);
     ca0:	e59f0034 	ldr	r0, [pc, #52]	; cdc <vi2c+0x160>
     ca4:	eb00351e 	bl	e124 <__vTaskDelay_from_arm>
     ca8:	eafffffc 	b	ca0 <vi2c+0x124>
  vTaskDelay (300 / portTICK_RATE_MS);
  RESETREG
  vTaskDelay (200 / portTICK_RATE_MS);
  printf ("Setup begin[> ");
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
     cac:	e3560081 	cmp	r6, #129	; 0x81
     cb0:	1affffcf 	bne	bf4 <vi2c+0x78>
     cb4:	eaffffe6 	b	c54 <vi2c+0xd8>
     cb8:	40000944 	.word	0x40000944
     cbc:	e0080000 	.word	0xe0080000
     cc0:	0000ea20 	.word	0x0000ea20
     cc4:	40000000 	.word	0x40000000
     cc8:	0000ea30 	.word	0x0000ea30
     ccc:	0000ea64 	.word	0x0000ea64
     cd0:	0000e9f8 	.word	0x0000e9f8
     cd4:	0000ea40 	.word	0x0000ea40
     cd8:	0000ea58 	.word	0x0000ea58
     cdc:	00002710 	.word	0x00002710

00000ce0 <waiti2c>:
  while (1) vTaskDelay(10000 / portTICK_RATE_MS);
}
void
waiti2c (unsigned int Delay){
	while(Delay--);
	}
     ce0:	e12fff1e 	bx	lr

00000ce4 <nonei2c>:
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     ce4:	e59f10e8 	ldr	r1, [pc, #232]	; dd4 <nonei2c+0xf0>
waiti2c (unsigned int Delay){
	while(Delay--);
	}
void
nonei2c (void *pvParameters)
{
     ce8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  int regpointer = 0;
  char Loopy;
  i2cmasterset (2);
  I22SCLH = 80;
  I22SCLL = 180;
     cec:	e3a020b4 	mov	r2, #180	; 0xb4
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     cf0:	e3a05040 	mov	r5, #64	; 0x40
nonei2c (void *pvParameters)
{
  int regpointer = 0;
  char Loopy;
  i2cmasterset (2);
  I22SCLH = 80;
     cf4:	e3a04050 	mov	r4, #80	; 0x50
    case 1:
      I21CONSET = 0x40;
      return 0;
      break;
    case 2:
      I22CONSET = 0x40;
     cf8:	e5815000 	str	r5, [r1]
  int regpointer = 0;
  char Loopy;
  i2cmasterset (2);
  I22SCLH = 80;
  I22SCLL = 180;
  printf ("Register Reset\n");
     cfc:	e59f00d4 	ldr	r0, [pc, #212]	; dd8 <nonei2c+0xf4>
nonei2c (void *pvParameters)
{
  int regpointer = 0;
  char Loopy;
  i2cmasterset (2);
  I22SCLH = 80;
     d00:	e5814010 	str	r4, [r1, #16]
  I22SCLL = 180;
     d04:	e5812014 	str	r2, [r1, #20]
  printf ("Register Reset\n");
     d08:	eb0034d6 	bl	e068 <__puts_from_arm>
  waiti2c (300000);
  RESETREG
  waiti2c (200000);
  printf ("Setup begin[> ");
  fflush (stdout);
     d0c:	e59f50c8 	ldr	r5, [pc, #200]	; ddc <nonei2c+0xf8>
  i2cmasterset (2);
  I22SCLH = 80;
  I22SCLL = 180;
  printf ("Register Reset\n");
  waiti2c (300000);
  RESETREG
     d10:	e3a00d4a 	mov	r0, #4736	; 0x1280
     d14:	ebffff93 	bl	b68 <SCCBByteWrite>
  waiti2c (200000);
  printf ("Setup begin[> ");
     d18:	e59f00c0 	ldr	r0, [pc, #192]	; de0 <nonei2c+0xfc>
     d1c:	eb003511 	bl	e168 <__printf_from_arm>
  fflush (stdout);
     d20:	e5953000 	ldr	r3, [r5]
     d24:	e5930008 	ldr	r0, [r3, #8]
     d28:	eb003513 	bl	e17c <__fflush_from_arm>
     d2c:	e59f70b0 	ldr	r7, [pc, #176]	; de4 <nonei2c+0x100>
  for (regpointer = 0; regpointer != 129;)
     d30:	e59f60b0 	ldr	r6, [pc, #176]	; de8 <nonei2c+0x104>
     d34:	e3a04000 	mov	r4, #0
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
     d38:	e1a00007 	mov	r0, r7
     d3c:	ebffff89 	bl	b68 <SCCBByteWrite>
     d40:	e3700001 	cmn	r0, #1
     d44:	0a000016 	beq	da4 <nonei2c+0xc0>
      regpointer++;
     d48:	e2844001 	add	r4, r4, #1
      	switch (regpointer % 4)
     d4c:	e2041003 	and	r1, r4, #3
     d50:	e3510002 	cmp	r1, #2
	  case 1:
	  Loopy = '/';
	  break;
	  case 2:
	  Loopy = '-';
	  break;
     d54:	03a0102d 	moveq	r1, #45	; 0x2d
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
      regpointer++;
      	switch (regpointer % 4)
     d58:	0a000005 	beq	d74 <nonei2c+0x90>
     d5c:	e3510003 	cmp	r1, #3
	  case 2:
	  Loopy = '-';
	  break;
	  case 3:
	  Loopy = '\\';
	  break;
     d60:	03a0105c 	moveq	r1, #92	; 0x5c
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
      regpointer++;
      	switch (regpointer % 4)
     d64:	0a000002 	beq	d74 <nonei2c+0x90>
     d68:	e3510001 	cmp	r1, #1
     d6c:	03a0102f 	moveq	r1, #47	; 0x2f
     d70:	13a0107c 	movne	r1, #124	; 0x7c
	  break;
	  case 3:
	  Loopy = '\\';
	  break;
	  }
	printf ("\b\b\b=>%c", Loopy);
     d74:	e59f0070 	ldr	r0, [pc, #112]	; dec <nonei2c+0x108>
     d78:	eb0034fa 	bl	e168 <__printf_from_arm>
	fflush (stdout);
     d7c:	e5950000 	ldr	r0, [r5]
     d80:	e5900008 	ldr	r0, [r0, #8]
     d84:	eb0034fc 	bl	e17c <__fflush_from_arm>
  waiti2c (300000);
  RESETREG
  waiti2c (200000);
  printf ("Setup begin[> ");
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
     d88:	e3540081 	cmp	r4, #129	; 0x81
     d8c:	0a000006 	beq	dac <nonei2c+0xc8>
     d90:	e7967104 	ldr	r7, [r6, r4, lsl #2]
    {
      if (SCCBByteWrite (OV7670[regpointer]) == -1) continue;
     d94:	e1a00007 	mov	r0, r7
     d98:	ebffff72 	bl	b68 <SCCBByteWrite>
     d9c:	e3700001 	cmn	r0, #1
     da0:	1affffe8 	bne	d48 <nonei2c+0x64>
  waiti2c (300000);
  RESETREG
  waiti2c (200000);
  printf ("Setup begin[> ");
  fflush (stdout);
  for (regpointer = 0; regpointer != 129;)
     da4:	e3540081 	cmp	r4, #129	; 0x81
     da8:	1affffe2 	bne	d38 <nonei2c+0x54>
	  }
	printf ("\b\b\b=>%c", Loopy);
	fflush (stdout);
      waiti2c (1000);
    }
  printf ("\rData transmition End!\n");
     dac:	e59f003c 	ldr	r0, [pc, #60]	; df0 <nonei2c+0x10c>
     db0:	eb0034ac 	bl	e068 <__puts_from_arm>
  fflush (stdout);
     db4:	e595c000 	ldr	ip, [r5]
     db8:	e59c0008 	ldr	r0, [ip, #8]
     dbc:	eb0034ee 	bl	e17c <__fflush_from_arm>
  SCCBread (0x00, 0xca, 0);
     dc0:	e3a00000 	mov	r0, #0
     dc4:	e3a010ca 	mov	r1, #202	; 0xca
     dc8:	e1a02000 	mov	r2, r0
}
     dcc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
	fflush (stdout);
      waiti2c (1000);
    }
  printf ("\rData transmition End!\n");
  fflush (stdout);
  SCCBread (0x00, 0xca, 0);
     dd0:	eaffff05 	b	9ec <SCCBread>
     dd4:	e0080000 	.word	0xe0080000
     dd8:	0000ea20 	.word	0x0000ea20
     ddc:	40000000 	.word	0x40000000
     de0:	0000ea30 	.word	0x0000ea30
     de4:	00001204 	.word	0x00001204
     de8:	0000ea64 	.word	0x0000ea64
     dec:	0000e9f8 	.word	0x0000e9f8
     df0:	0000ea40 	.word	0x0000ea40

00000df4 <ymzwrite0>:
}
int
ymzwrite0 (int frec, int adr)
{
     df4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
  FIO4PIN = 0x200 + adr;
  FIO4PIN = 0x100 + (frec & 0xFF);
  FIO4PIN = 0x300 + (frec & 0xFF);
  FIO4PIN = adr + 1;
  FIO4PIN = 0x201 + adr;
  highbyte = (frec >> 8) & 0xFF;
     df8:	e1a04440 	asr	r4, r0, #8
  fflush (stdout);
  SCCBread (0x00, 0xca, 0);
}
int
ymzwrite0 (int frec, int adr)
{
     dfc:	e1a06000 	mov	r6, r0
  int highbyte;
  FIO4PIN = 0x00;
     e00:	e59f2050 	ldr	r2, [pc, #80]	; e58 <ymzwrite0+0x64>
  FIO4PIN = adr;
  FIO4PIN = 0x200 + adr;
  FIO4PIN = 0x100 + (frec & 0xFF);
     e04:	e20600ff 	and	r0, r6, #255	; 0xff
ymzwrite0 (int frec, int adr)
{
  int highbyte;
  FIO4PIN = 0x00;
  FIO4PIN = adr;
  FIO4PIN = 0x200 + adr;
     e08:	e281cc02 	add	ip, r1, #512	; 0x200
  FIO4PIN = 0x100 + (frec & 0xFF);
  FIO4PIN = 0x300 + (frec & 0xFF);
  FIO4PIN = adr + 1;
  FIO4PIN = 0x201 + adr;
  highbyte = (frec >> 8) & 0xFF;
     e0c:	e20450ff 	and	r5, r4, #255	; 0xff
{
  int highbyte;
  FIO4PIN = 0x00;
  FIO4PIN = adr;
  FIO4PIN = 0x200 + adr;
  FIO4PIN = 0x100 + (frec & 0xFF);
     e10:	e2808c01 	add	r8, r0, #256	; 0x100
  FIO4PIN = 0x300 + (frec & 0xFF);
     e14:	e2803c03 	add	r3, r0, #768	; 0x300
  FIO4PIN = adr + 1;
     e18:	e2817001 	add	r7, r1, #1
  FIO4PIN = 0x201 + adr;
     e1c:	e28c6001 	add	r6, ip, #1
  highbyte = (frec >> 8) & 0xFF;
  FIO4PIN = 0x100 + highbyte;
     e20:	e2855c01 	add	r5, r5, #256	; 0x100
  FIO4PIN = 0x300 + (frec >> 8);
     e24:	e2844c03 	add	r4, r4, #768	; 0x300
}
int
ymzwrite0 (int frec, int adr)
{
  int highbyte;
  FIO4PIN = 0x00;
     e28:	e3a00000 	mov	r0, #0
     e2c:	e5020f6b 	str	r0, [r2, #-3947]	; 0xfffff095
  FIO4PIN = adr;
     e30:	e5021f6b 	str	r1, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x200 + adr;
     e34:	e502cf6b 	str	ip, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x100 + (frec & 0xFF);
     e38:	e5028f6b 	str	r8, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x300 + (frec & 0xFF);
     e3c:	e5023f6b 	str	r3, [r2, #-3947]	; 0xfffff095
  FIO4PIN = adr + 1;
     e40:	e5027f6b 	str	r7, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x201 + adr;
     e44:	e5026f6b 	str	r6, [r2, #-3947]	; 0xfffff095
  highbyte = (frec >> 8) & 0xFF;
  FIO4PIN = 0x100 + highbyte;
     e48:	e5025f6b 	str	r5, [r2, #-3947]	; 0xfffff095
  FIO4PIN = 0x300 + (frec >> 8);
     e4c:	e5024f6b 	str	r4, [r2, #-3947]	; 0xfffff095
}
     e50:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     e54:	e12fff1e 	bx	lr
     e58:	3fffcfff 	.word	0x3fffcfff

00000e5c <ymzwrite1>:

int
ymzwrite1 (int value, int adr)
{
  FIO4PIN = 0x00;
     e5c:	e59f3030 	ldr	r3, [pc, #48]	; e94 <ymzwrite1+0x38>
  FIO4PIN = 0x300 + (frec >> 8);
}

int
ymzwrite1 (int value, int adr)
{
     e60:	e92d0030 	push	{r4, r5}
  FIO4PIN = 0x00;
  FIO4PIN = adr;
  FIO4PIN = (0x200 + adr);
  FIO4PIN = (0x100 + value);
     e64:	e280cc01 	add	ip, r0, #256	; 0x100
  FIO4PIN = (0x300 + value);
     e68:	e2802c03 	add	r2, r0, #768	; 0x300
int
ymzwrite1 (int value, int adr)
{
  FIO4PIN = 0x00;
  FIO4PIN = adr;
  FIO4PIN = (0x200 + adr);
     e6c:	e2814c02 	add	r4, r1, #512	; 0x200
}

int
ymzwrite1 (int value, int adr)
{
  FIO4PIN = 0x00;
     e70:	e3a05000 	mov	r5, #0
     e74:	e5035f6b 	str	r5, [r3, #-3947]	; 0xfffff095
  FIO4PIN = adr;
  FIO4PIN = (0x200 + adr);
  FIO4PIN = (0x100 + value);
  FIO4PIN = (0x300 + value);
  return adr * 16 + value;
}
     e78:	e0800201 	add	r0, r0, r1, lsl #4

int
ymzwrite1 (int value, int adr)
{
  FIO4PIN = 0x00;
  FIO4PIN = adr;
     e7c:	e5031f6b 	str	r1, [r3, #-3947]	; 0xfffff095
  FIO4PIN = (0x200 + adr);
     e80:	e5034f6b 	str	r4, [r3, #-3947]	; 0xfffff095
  FIO4PIN = (0x100 + value);
     e84:	e503cf6b 	str	ip, [r3, #-3947]	; 0xfffff095
  FIO4PIN = (0x300 + value);
     e88:	e5032f6b 	str	r2, [r3, #-3947]	; 0xfffff095
  return adr * 16 + value;
}
     e8c:	e8bd0030 	pop	{r4, r5}
     e90:	e12fff1e 	bx	lr
     e94:	3fffcfff 	.word	0x3fffcfff

00000e98 <ISSR>:
}

/*-----------------------------------------------------------*/
void
ISSR (void *pvParameters)
{
     e98:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  unsigned int bakData = 0;
  int tole = 0;
  int cnt = 0;
  int cot = 0;
  int flg = 0;
  vTaskDelay (30 / portTICK_RATE_MS);
     e9c:	e3a0001e 	mov	r0, #30
     ea0:	eb00349f 	bl	e124 <__vTaskDelay_from_arm>
  GPIOInit (1, FAST_PORT, DIR_OUT, LED1_MASK);
     ea4:	e3a00001 	mov	r0, #1
     ea8:	e1a02000 	mov	r2, r0
     eac:	e3a03701 	mov	r3, #262144	; 0x40000
     eb0:	e1a01000 	mov	r1, r0
     eb4:	eb0034a1 	bl	e140 <__GPIOInit_from_arm>
  FIO2DIR0 = 1;
     eb8:	e59f31a8 	ldr	r3, [pc, #424]	; 1068 <ISSR+0x1d0>
     ebc:	e3a02001 	mov	r2, #1
     ec0:	e54320bf 	strb	r2, [r3, #-191]	; 0xffffff41
     ec4:	e59f51a0 	ldr	r5, [pc, #416]	; 106c <ISSR+0x1d4>
  while (!xSemaphoreTake (Mutex, 300 / portTICK_RATE_MS)) FIO1PIN ^= LED1_MASK;
     ec8:	e59f41a0 	ldr	r4, [pc, #416]	; 1070 <ISSR+0x1d8>
     ecc:	ea000002 	b	edc <ISSR+0x44>
     ed0:	e5141fcb 	ldr	r1, [r4, #-4043]	; 0xfffff035
     ed4:	e2210701 	eor	r0, r1, #262144	; 0x40000
     ed8:	e5040fcb 	str	r0, [r4, #-4043]	; 0xfffff035
     edc:	e3a01000 	mov	r1, #0
     ee0:	e5950000 	ldr	r0, [r5]
     ee4:	e3a02f4b 	mov	r2, #300	; 0x12c
     ee8:	e1a03001 	mov	r3, r1
     eec:	eb0034a9 	bl	e198 <__xQueueGenericReceive_from_arm>
     ef0:	e3500000 	cmp	r0, #0
     ef4:	0afffff5 	beq	ed0 <ISSR+0x38>
     ef8:	e3a04000 	mov	r4, #0
     efc:	e59f6170 	ldr	r6, [pc, #368]	; 1074 <ISSR+0x1dc>
     f00:	e1a05004 	mov	r5, r4
     f04:	e1a0a004 	mov	sl, r4
     f08:	e1a09004 	mov	r9, r4
     f0c:	e1a07004 	mov	r7, r4
     f10:	e1a08004 	mov	r8, r4
  while(1){
 	 while (1){
		  vTaskDelay (1 / portTICK_RATE_MS);
     f14:	e3a00001 	mov	r0, #1
     f18:	eb003481 	bl	e124 <__vTaskDelay_from_arm>
		  if( tole++==0 ){
     f1c:	e3590000 	cmp	r9, #0
     f20:	e2899001 	add	r9, r9, #1
     f24:	0a000020 	beq	fac <ISSR+0x114>
			  FIO1PIN ^= LED1_MASK;
  			  FIO2PIN0 ^= 1;
			  flg ^= 1; 
			  fflush(stdout);
			}
		  else if( tole==10 ){
     f28:	e359000a 	cmp	r9, #10
     f2c:	0a00002b 	beq	fe0 <ISSR+0x148>
				  bakData = bakData + ((FIO2PIN0&2)<<cot++);
				  fflush(stdout);
				}
		  }
// 	  	  if(cot%12==0 && cnt!=0 && cot!=0)break;
		  if( tole==-10 && (flg%2)==0 && bakData != tmpData )break;
     f30:	e379000a 	cmn	r9, #10
     f34:	1afffff6 	bne	f14 <ISSR+0x7c>
     f38:	e2049001 	and	r9, r4, #1
     f3c:	e2299001 	eor	r9, r9, #1
     f40:	e1570008 	cmp	r7, r8
     f44:	03a09000 	moveq	r9, #0
     f48:	12099001 	andne	r9, r9, #1
     f4c:	e3590000 	cmp	r9, #0
     f50:	03e09009 	mvneq	r9, #9
     f54:	0affffee 	beq	f14 <ISSR+0x7c>
 		} 
// 	  if(cot%12==0 && cnt!=0 && cot!=0){
//	  if(bakData != tmpData){
		  printf("%x",bakData>>1);
     f58:	e1a010a7 	lsr	r1, r7, #1
     f5c:	e59f0114 	ldr	r0, [pc, #276]	; 1078 <ISSR+0x1e0>
     f60:	eb003480 	bl	e168 <__printf_from_arm>
		  fflush(stdout);
     f64:	e5965000 	ldr	r5, [r6]
     f68:	e5950008 	ldr	r0, [r5, #8]
     f6c:	eb003482 	bl	e17c <__fflush_from_arm>
		  printf("\n");
     f70:	e3a0000a 	mov	r0, #10
     f74:	eb00343e 	bl	e074 <__putchar_from_arm>
		  fflush(stdout);
     f78:	e5967000 	ldr	r7, [r6]
		  tole=cnt=tmpData=bakData=cot=0;
     f7c:	e3a05000 	mov	r5, #0
// 	  if(cot%12==0 && cnt!=0 && cot!=0){
//	  if(bakData != tmpData){
		  printf("%x",bakData>>1);
		  fflush(stdout);
		  printf("\n");
		  fflush(stdout);
     f80:	e5970008 	ldr	r0, [r7, #8]
     f84:	eb00347c 	bl	e17c <__fflush_from_arm>
		  tole=cnt=tmpData=bakData=cot=0;
     f88:	e1a09005 	mov	r9, r5
  GPIOInit (1, FAST_PORT, DIR_OUT, LED1_MASK);
  FIO2DIR0 = 1;
  while (!xSemaphoreTake (Mutex, 300 / portTICK_RATE_MS)) FIO1PIN ^= LED1_MASK;
  while(1){
 	 while (1){
		  vTaskDelay (1 / portTICK_RATE_MS);
     f8c:	e3a00001 	mov	r0, #1
     f90:	eb003463 	bl	e124 <__vTaskDelay_from_arm>
		  if( tole++==0 ){
     f94:	e3590000 	cmp	r9, #0
//	  if(bakData != tmpData){
		  printf("%x",bakData>>1);
		  fflush(stdout);
		  printf("\n");
		  fflush(stdout);
		  tole=cnt=tmpData=bakData=cot=0;
     f98:	e1a0a005 	mov	sl, r5
     f9c:	e1a07005 	mov	r7, r5
     fa0:	e1a08005 	mov	r8, r5
  FIO2DIR0 = 1;
  while (!xSemaphoreTake (Mutex, 300 / portTICK_RATE_MS)) FIO1PIN ^= LED1_MASK;
  while(1){
 	 while (1){
		  vTaskDelay (1 / portTICK_RATE_MS);
		  if( tole++==0 ){
     fa4:	e2899001 	add	r9, r9, #1
     fa8:	1affffde 	bne	f28 <ISSR+0x90>
			  FIO1PIN ^= LED1_MASK;
     fac:	e59f10bc 	ldr	r1, [pc, #188]	; 1070 <ISSR+0x1d8>
     fb0:	e511cfcb 	ldr	ip, [r1, #-4043]	; 0xfffff035
     fb4:	e22c0701 	eor	r0, ip, #262144	; 0x40000
     fb8:	e5010fcb 	str	r0, [r1, #-4043]	; 0xfffff035
  			  FIO2PIN0 ^= 1;
     fbc:	e59f30a4 	ldr	r3, [pc, #164]	; 1068 <ISSR+0x1d0>
     fc0:	e55320ab 	ldrb	r2, [r3, #-171]	; 0xffffff55
     fc4:	e222e001 	eor	lr, r2, #1
     fc8:	e543e0ab 	strb	lr, [r3, #-171]	; 0xffffff55
			  flg ^= 1; 
			  fflush(stdout);
     fcc:	e596c000 	ldr	ip, [r6]
     fd0:	e59c0008 	ldr	r0, [ip, #8]
 	 while (1){
		  vTaskDelay (1 / portTICK_RATE_MS);
		  if( tole++==0 ){
			  FIO1PIN ^= LED1_MASK;
  			  FIO2PIN0 ^= 1;
			  flg ^= 1; 
     fd4:	e2244001 	eor	r4, r4, #1
			  fflush(stdout);
     fd8:	eb003467 	bl	e17c <__fflush_from_arm>
     fdc:	eaffffd3 	b	f30 <ISSR+0x98>
			}
		  else if( tole==10 ){
			  tole = -10;
			  if((flg%2)==1){
     fe0:	e1a0efa4 	lsr	lr, r4, #31
     fe4:	e084200e 	add	r2, r4, lr
     fe8:	e2023001 	and	r3, r2, #1
     fec:	e06e9003 	rsb	r9, lr, r3
     ff0:	e3590001 	cmp	r9, #1
     ff4:	0a00000a 	beq	1024 <ISSR+0x18c>
			  	  printf("%4x",tmpData>>1);
				  fflush(stdout);
				  printf("T");
				  fflush(stdout);
			  }
			  if ((flg%2)==0){
     ff8:	e2149001 	ands	r9, r4, #1
     ffc:	1affffce 	bne	f3c <ISSR+0xa4>
				  bakData = bakData + ((FIO2PIN0&2)<<cot++);
    1000:	e59f0060 	ldr	r0, [pc, #96]	; 1068 <ISSR+0x1d0>
				  fflush(stdout);
    1004:	e5962000 	ldr	r2, [r6]
				  fflush(stdout);
				  printf("T");
				  fflush(stdout);
			  }
			  if ((flg%2)==0){
				  bakData = bakData + ((FIO2PIN0&2)<<cot++);
    1008:	e55010ab 	ldrb	r1, [r0, #-171]	; 0xffffff55
				  fflush(stdout);
    100c:	e5920008 	ldr	r0, [r2, #8]
				  fflush(stdout);
				  printf("T");
				  fflush(stdout);
			  }
			  if ((flg%2)==0){
				  bakData = bakData + ((FIO2PIN0&2)<<cot++);
    1010:	e2013002 	and	r3, r1, #2
    1014:	e0877513 	add	r7, r7, r3, lsl r5
    1018:	e2855001 	add	r5, r5, #1
				  fflush(stdout);
    101c:	eb003456 	bl	e17c <__fflush_from_arm>
    1020:	eaffffc5 	b	f3c <ISSR+0xa4>
			  fflush(stdout);
			}
		  else if( tole==10 ){
			  tole = -10;
			  if((flg%2)==1){
				  tmpData = tmpData + ((FIO2PIN0&2)<<cnt++);
    1024:	e59fe03c 	ldr	lr, [pc, #60]	; 1068 <ISSR+0x1d0>
    1028:	e55e90ab 	ldrb	r9, [lr, #-171]	; 0xffffff55
    102c:	e209c002 	and	ip, r9, #2
    1030:	e0888a1c 	add	r8, r8, ip, lsl sl
			  	  printf("%4x",tmpData>>1);
    1034:	e59f0040 	ldr	r0, [pc, #64]	; 107c <ISSR+0x1e4>
    1038:	e1a010a8 	lsr	r1, r8, #1
    103c:	eb003449 	bl	e168 <__printf_from_arm>
				  fflush(stdout);
    1040:	e5961000 	ldr	r1, [r6]
    1044:	e5910008 	ldr	r0, [r1, #8]
    1048:	eb00344b 	bl	e17c <__fflush_from_arm>
				  printf("T");
    104c:	e3a00054 	mov	r0, #84	; 0x54
    1050:	eb003407 	bl	e074 <__putchar_from_arm>
				  fflush(stdout);
    1054:	e5960000 	ldr	r0, [r6]
    1058:	e5900008 	ldr	r0, [r0, #8]
			  fflush(stdout);
			}
		  else if( tole==10 ){
			  tole = -10;
			  if((flg%2)==1){
				  tmpData = tmpData + ((FIO2PIN0&2)<<cnt++);
    105c:	e28aa001 	add	sl, sl, #1
			  	  printf("%4x",tmpData>>1);
				  fflush(stdout);
				  printf("T");
				  fflush(stdout);
    1060:	eb003445 	bl	e17c <__fflush_from_arm>
    1064:	eaffffe3 	b	ff8 <ISSR+0x160>
    1068:	3fffc0ff 	.word	0x3fffc0ff
    106c:	40000944 	.word	0x40000944
    1070:	3fffcfff 	.word	0x3fffcfff
    1074:	40000000 	.word	0x40000000
    1078:	0000eca4 	.word	0x0000eca4
    107c:	0000ec68 	.word	0x0000ec68

00001080 <main>:
xSemaphoreHandle Mutex;

/*-----------------------------------------------------------*/
void
main (void)
{
    1080:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1084:	e24dd010 	sub	sp, sp, #16
  TargetResetInit ();		//
    1088:	eb00341d 	bl	e104 <__TargetResetInit_from_arm>
  GPIOResetInit ();
    108c:	eb00342e 	bl	e14c <__GPIOResetInit_from_arm>
/*******UART initialize***************/
void
UARTint (void)
{
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
    1090:	e59f10b0 	ldr	r1, [pc, #176]	; 1148 <main+0xc8>
    1094:	e3a03083 	mov	r3, #131	; 0x83
  Fdiv = (Fpclk / 16) / UART_BAUD;	/*baud rate */
  U0DLM = Fdiv / 256;
  U0DLL = Fdiv % 256;
    1098:	e3a0c013 	mov	ip, #19
  U0LCR = 0x03;			/* DLAB = 0 */
  U0FCR = 0x07;			/* Enable and reset TX and RX FIFO. */
    109c:	e3a02007 	mov	r2, #7
UARTint (void)
{
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
  Fdiv = (Fpclk / 16) / UART_BAUD;	/*baud rate */
  U0DLM = Fdiv / 256;
    10a0:	e3a04000 	mov	r4, #0
main (void)
{
  TargetResetInit ();		//
  GPIOResetInit ();
  UARTint ();
  FIO2PIN1 = 2;
    10a4:	e59f50a0 	ldr	r5, [pc, #160]	; 114c <main+0xcc>
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
  Fdiv = (Fpclk / 16) / UART_BAUD;	/*baud rate */
  U0DLM = Fdiv / 256;
  U0DLL = Fdiv % 256;
  U0LCR = 0x03;			/* DLAB = 0 */
    10a8:	e3a07003 	mov	r7, #3
/*******UART initialize***************/
void
UARTint (void)
{
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
    10ac:	e581300c 	str	r3, [r1, #12]
  U0DLM = Fdiv / 256;
  U0DLL = Fdiv % 256;
  U0LCR = 0x03;			/* DLAB = 0 */
  U0FCR = 0x07;			/* Enable and reset TX and RX FIFO. */

  printf ("Hello,");
    10b0:	e59f0098 	ldr	r0, [pc, #152]	; 1150 <main+0xd0>
UARTint (void)
{
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
  Fdiv = (Fpclk / 16) / UART_BAUD;	/*baud rate */
  U0DLM = Fdiv / 256;
    10b4:	e5814004 	str	r4, [r1, #4]
main (void)
{
  TargetResetInit ();		//
  GPIOResetInit ();
  UARTint ();
  FIO2PIN1 = 2;
    10b8:	e3a06002 	mov	r6, #2
{
  DWORD Fdiv, i = 0;
  U0LCR = 0x83;			/* 8 bits, no Parity, 1 Stop bit */
  Fdiv = (Fpclk / 16) / UART_BAUD;	/*baud rate */
  U0DLM = Fdiv / 256;
  U0DLL = Fdiv % 256;
    10bc:	e581c000 	str	ip, [r1]
  U0LCR = 0x03;			/* DLAB = 0 */
    10c0:	e581700c 	str	r7, [r1, #12]
  U0FCR = 0x07;			/* Enable and reset TX and RX FIFO. */
    10c4:	e5812008 	str	r2, [r1, #8]

  printf ("Hello,");
    10c8:	eb003426 	bl	e168 <__printf_from_arm>
main (void)
{
  TargetResetInit ();		//
  GPIOResetInit ();
  UARTint ();
  FIO2PIN1 = 2;
    10cc:	e54560aa 	strb	r6, [r5, #-170]	; 0xffffff56
  Mutex = xSemaphoreCreateMutex ();
    10d0:	eb0033f8 	bl	e0b8 <__xQueueCreateMutex_from_arm>
    10d4:	e59f8078 	ldr	r8, [pc, #120]	; 1154 <main+0xd4>
    10d8:	e5880000 	str	r0, [r8]
  printf (" world!\n");
    10dc:	e59f0074 	ldr	r0, [pc, #116]	; 1158 <main+0xd8>
    10e0:	eb0033e0 	bl	e068 <__puts_from_arm>
  if(Mutex != NULL){
    10e4:	e5983000 	ldr	r3, [r8]
    10e8:	e1530004 	cmp	r3, r4
    10ec:	0a000014 	beq	1144 <main+0xc4>
//      xTaskCreate (vLedTask, (signed portCHAR *) "LED",
//		   configMINIMAL_STACK_SIZE, NULL,
//		   mainCHECK_TASK_PRIORITY - 1, NULL);
      /* Start2csender the tasks defined within this file/specific to this demo. */
      xTaskCreate (ISSR, (signed portCHAR *) "issr", configMINIMAL_STACK_SIZE,
    10f0:	e3a0e004 	mov	lr, #4
    10f4:	e59f1060 	ldr	r1, [pc, #96]	; 115c <main+0xdc>
    10f8:	e3a02068 	mov	r2, #104	; 0x68
    10fc:	e1a03004 	mov	r3, r4
    1100:	e59f0058 	ldr	r0, [pc, #88]	; 1160 <main+0xe0>
    1104:	e58de000 	str	lr, [sp]
    1108:	e58d4004 	str	r4, [sp, #4]
    110c:	e58d4008 	str	r4, [sp, #8]
    1110:	e58d400c 	str	r4, [sp, #12]
    1114:	eb0033e4 	bl	e0ac <__xTaskGenericCreate_from_arm>
		   NULL, mainCHECK_TASK_PRIORITY +1, NULL);
      xTaskCreate (vi2c, (signed portCHAR *) "LD", configMINIMAL_STACK_SIZE,
    1118:	e59f1044 	ldr	r1, [pc, #68]	; 1164 <main+0xe4>
    111c:	e3a02068 	mov	r2, #104	; 0x68
    1120:	e1a03004 	mov	r3, r4
    1124:	e59f003c 	ldr	r0, [pc, #60]	; 1168 <main+0xe8>
    1128:	e58d7000 	str	r7, [sp]
    112c:	e58d4004 	str	r4, [sp, #4]
    1130:	e58d4008 	str	r4, [sp, #8]
    1134:	e58d400c 	str	r4, [sp, #12]
    1138:	eb0033db 	bl	e0ac <__xTaskGenericCreate_from_arm>
		   NULL, mainCHECK_TASK_PRIORITY , NULL);
      vTaskStartScheduler ();
    113c:	eb0033d5 	bl	e098 <__vTaskStartScheduler_from_arm>
  FIO2SET1 = 2;
    1140:	e54560a6 	strb	r6, [r5, #-166]	; 0xffffff5a
    1144:	eafffffe 	b	1144 <main+0xc4>
    1148:	e000c000 	.word	0xe000c000
    114c:	3fffc0ff 	.word	0x3fffc0ff
    1150:	0000ec6c 	.word	0x0000ec6c
    1154:	40000944 	.word	0x40000944
    1158:	0000ec74 	.word	0x0000ec74
    115c:	0000ec7c 	.word	0x0000ec7c
    1160:	00000e98 	.word	0x00000e98
    1164:	0000ec84 	.word	0x0000ec84
    1168:	00000b7c 	.word	0x00000b7c

0000116c <getISSI>:

//*******************************************************************************************************
//      ----------------------------------- Routines -------------------------------
void
getISSI (void)
{
    116c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
  int bitshift = 0;
  int il = 0;
  int prv;
  int crr;
  vTaskDelay (10 / portTICK_RATE_MS);
    1170:	e3a0000a 	mov	r0, #10
    1174:	eb0033ea 	bl	e124 <__vTaskDelay_from_arm>
    1178:	e59f4084 	ldr	r4, [pc, #132]	; 1204 <getISSI+0x98>
  while(pdTRUE!=xSemaphoreTake(Mutex, 301 / portTICK_RATE_MS))vTaskDelay( 400 / portTICK_RATE_MS);
    117c:	ea000000 	b	1184 <getISSI+0x18>
    1180:	eb0033e7 	bl	e124 <__vTaskDelay_from_arm>
    1184:	e3a01000 	mov	r1, #0
    1188:	e59f2078 	ldr	r2, [pc, #120]	; 1208 <getISSI+0x9c>
    118c:	e1a03001 	mov	r3, r1
    1190:	e5940000 	ldr	r0, [r4]
    1194:	eb0033ff 	bl	e198 <__xQueueGenericReceive_from_arm>
    1198:	e3500001 	cmp	r0, #1
    119c:	e1a05000 	mov	r5, r0
    11a0:	e3a00e19 	mov	r0, #400	; 0x190
    11a4:	1afffff5 	bne	1180 <getISSI+0x14>
  printf ("start ISSI connection\n");
    11a8:	e59f005c 	ldr	r0, [pc, #92]	; 120c <getISSI+0xa0>
    11ac:	eb0033ad 	bl	e068 <__puts_from_arm>
  while (1)
    {
      il++;
      FIO2SET0 = 1;
    11b0:	e59f4058 	ldr	r4, [pc, #88]	; 1210 <getISSI+0xa4>
    11b4:	e1a06005 	mov	r6, r5
    11b8:	e54460a7 	strb	r6, [r4, #-167]	; 0xffffff59
      prv = FIO2PIN0 & 3;
    11bc:	e554c0ab 	ldrb	ip, [r4, #-171]	; 0xffffff55
      bitshift = (bitshift << 1) + ((prv & 2) >> 1);
      vTaskDelay (100 / portTICK_RATE_MS);
    11c0:	e3a00064 	mov	r0, #100	; 0x64
  printf ("start ISSI connection\n");
  while (1)
    {
      il++;
      FIO2SET0 = 1;
      prv = FIO2PIN0 & 3;
    11c4:	e20c7003 	and	r7, ip, #3
      bitshift = (bitshift << 1) + ((prv & 2) >> 1);
      vTaskDelay (100 / portTICK_RATE_MS);
    11c8:	eb0033d5 	bl	e124 <__vTaskDelay_from_arm>
      FIO2CLR0 = 1;
//      FIO2CLR1 = 2;
      FIO2SET1 = 2;
    11cc:	e3a02002 	mov	r2, #2
      printf ("prv=%x", prv);
    11d0:	e1a01007 	mov	r1, r7
      il++;
      FIO2SET0 = 1;
      prv = FIO2PIN0 & 3;
      bitshift = (bitshift << 1) + ((prv & 2) >> 1);
      vTaskDelay (100 / portTICK_RATE_MS);
      FIO2CLR0 = 1;
    11d4:	e54450a3 	strb	r5, [r4, #-163]	; 0xffffff5d
//      FIO2CLR1 = 2;
      FIO2SET1 = 2;
      printf ("prv=%x", prv);
    11d8:	e59f0034 	ldr	r0, [pc, #52]	; 1214 <getISSI+0xa8>
      prv = FIO2PIN0 & 3;
      bitshift = (bitshift << 1) + ((prv & 2) >> 1);
      vTaskDelay (100 / portTICK_RATE_MS);
      FIO2CLR0 = 1;
//      FIO2CLR1 = 2;
      FIO2SET1 = 2;
    11dc:	e54420a6 	strb	r2, [r4, #-166]	; 0xffffff5a
      printf ("prv=%x", prv);
    11e0:	eb0033e0 	bl	e168 <__printf_from_arm>
      crr = FIO0PIN & 3;
    11e4:	e59f302c 	ldr	r3, [pc, #44]	; 1218 <getISSI+0xac>
    11e8:	e5131feb 	ldr	r1, [r3, #-4075]	; 0xfffff015
      printf ("Cr=%d", crr);
    11ec:	e59f0028 	ldr	r0, [pc, #40]	; 121c <getISSI+0xb0>
      vTaskDelay (100 / portTICK_RATE_MS);
      FIO2CLR0 = 1;
//      FIO2CLR1 = 2;
      FIO2SET1 = 2;
      printf ("prv=%x", prv);
      crr = FIO0PIN & 3;
    11f0:	e2011003 	and	r1, r1, #3
      printf ("Cr=%d", crr);
    11f4:	eb0033db 	bl	e168 <__printf_from_arm>
      if (crr & 2 != prv & 2)
	{
	  printf ("-%d\t%d\n", crr, il);
	  break;
	}
      vTaskDelay (100 / portTICK_RATE_MS);
    11f8:	e3a00064 	mov	r0, #100	; 0x64
    11fc:	eb0033c8 	bl	e124 <__vTaskDelay_from_arm>
    }
    1200:	eaffffec 	b	11b8 <getISSI+0x4c>
    1204:	40000944 	.word	0x40000944
    1208:	0000012d 	.word	0x0000012d
    120c:	0000ec88 	.word	0x0000ec88
    1210:	3fffc0ff 	.word	0x3fffc0ff
    1214:	0000eca0 	.word	0x0000eca0
    1218:	3fffcfff 	.word	0x3fffcfff
    121c:	0000eca8 	.word	0x0000eca8

00001220 <vApplicationTickHook>:
//      -----------------------------------T A S K s.-------------------------------^^

void
vApplicationTickHook (void)
{
}
    1220:	e12fff1e 	bx	lr

00001224 <vtrsTask>:
    }
}

void
vtrsTask (void *pvParameters)
{
    1224:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  vTaskDelay (300 / portTICK_RATE_MS);
    1228:	e3a00f4b 	mov	r0, #300	; 0x12c
    122c:	eb0033bc 	bl	e124 <__vTaskDelay_from_arm>
    1230:	e59f40f0 	ldr	r4, [pc, #240]	; 1328 <vtrsTask+0x104>
    1234:	e59f80f0 	ldr	r8, [pc, #240]	; 132c <vtrsTask+0x108>
    1238:	e59f70f0 	ldr	r7, [pc, #240]	; 1330 <vtrsTask+0x10c>
    123c:	e59f90f0 	ldr	r9, [pc, #240]	; 1334 <vtrsTask+0x110>
    1240:	e59fa0f0 	ldr	sl, [pc, #240]	; 1338 <vtrsTask+0x114>
  for (;;)
    {
      if ((2 * res[6]) <= (white + black))
    1244:	e1a06004 	mov	r6, r4
    1248:	e1a05004 	mov	r5, r4
}

void
vtrsTask (void *pvParameters)
{
  vTaskDelay (300 / portTICK_RATE_MS);
    124c:	e5982000 	ldr	r2, [r8]
    1250:	e5973000 	ldr	r3, [r7]
    {
      if ((2 * res[6]) <= (white + black))
	{
	  printf ("migi");
	  left = 0;
	  right = 10;
    1254:	e3a0b00a 	mov	fp, #10
    1258:	e0823003 	add	r3, r2, r3
    125c:	ea000002 	b	126c <vtrsTask+0x48>
		 || ((2 * res[3]) <= (white + black))
		 || ((2 * res[4]) <= (white + black)));
	  left = 10;
	  right = 10;
	}
      if ((2 * res[4]) <= ((white + black)))
    1260:	e594e010 	ldr	lr, [r4, #16]
    1264:	e153008e 	cmp	r3, lr, lsl #1
    1268:	2a000016 	bcs	12c8 <vtrsTask+0xa4>
vtrsTask (void *pvParameters)
{
  vTaskDelay (300 / portTICK_RATE_MS);
  for (;;)
    {
      if ((2 * res[6]) <= (white + black))
    126c:	e5940018 	ldr	r0, [r4, #24]
    1270:	e1530080 	cmp	r3, r0, lsl #1
    1274:	3afffff9 	bcc	1260 <vtrsTask+0x3c>
	{
	  printf ("migi");
    1278:	e59f00bc 	ldr	r0, [pc, #188]	; 133c <vtrsTask+0x118>
    127c:	eb0033b9 	bl	e168 <__printf_from_arm>
	  left = 0;
	  right = 10;
    1280:	e5961008 	ldr	r1, [r6, #8]
    1284:	e5983000 	ldr	r3, [r8]
    1288:	e597c000 	ldr	ip, [r7]
    128c:	e596200c 	ldr	r2, [r6, #12]
    1290:	e5960010 	ldr	r0, [r6, #16]
    1294:	e589b000 	str	fp, [r9]
    1298:	e1a01081 	lsl	r1, r1, #1
    129c:	e08c3003 	add	r3, ip, r3
    12a0:	e1a02082 	lsl	r2, r2, #1
    12a4:	e1a00080 	lsl	r0, r0, #1
	  while ((2 * res[2]) <= (white + black)
    12a8:	e1510003 	cmp	r1, r3
    12ac:	9a00001c 	bls	1324 <vtrsTask+0x100>
		 || ((2 * res[3]) <= (white + black))
    12b0:	e1530002 	cmp	r3, r2
    12b4:	2afffffb 	bcs	12a8 <vtrsTask+0x84>
		 || ((2 * res[4]) <= (white + black)));
    12b8:	e1530000 	cmp	r3, r0
    12bc:	2afffff9 	bcs	12a8 <vtrsTask+0x84>
	  left = 10;
    12c0:	e58ab000 	str	fp, [sl]
    12c4:	eaffffe5 	b	1260 <vtrsTask+0x3c>
	  right = 10;
	}
      if ((2 * res[4]) <= ((white + black)))
	{
	  printf ("tyuou");
    12c8:	e59f0070 	ldr	r0, [pc, #112]	; 1340 <vtrsTask+0x11c>
    12cc:	eb0033a5 	bl	e168 <__printf_from_arm>
	  left = 10;
    12d0:	e5982000 	ldr	r2, [r8]
    12d4:	e595000c 	ldr	r0, [r5, #12]
    12d8:	e595c008 	ldr	ip, [r5, #8]
    12dc:	e5973000 	ldr	r3, [r7]
    12e0:	e595b010 	ldr	fp, [r5, #16]
    12e4:	e3a0100a 	mov	r1, #10
    12e8:	e58a1000 	str	r1, [sl]
    12ec:	e0833002 	add	r3, r3, r2
    12f0:	e1a0108c 	lsl	r1, ip, #1
    12f4:	e1a02080 	lsl	r2, r0, #1
    12f8:	e1a0008b 	lsl	r0, fp, #1
	  right = 0;
	  while (((2 * res[2]) <= (white + black))
    12fc:	e1510003 	cmp	r1, r3
    1300:	9a000006 	bls	1320 <vtrsTask+0xfc>
		 || ((2 * res[3]) <= (white + black))
    1304:	e1530002 	cmp	r3, r2
    1308:	2afffffb 	bcs	12fc <vtrsTask+0xd8>
		 || ((2 * res[4]) <= (white + black)));
    130c:	e1530000 	cmp	r3, r0
    1310:	2afffff9 	bcs	12fc <vtrsTask+0xd8>
	  left = 10;
	  right = 10;
    1314:	e3a0e00a 	mov	lr, #10
    1318:	e589e000 	str	lr, [r9]
    131c:	eaffffca 	b	124c <vtrsTask+0x28>
    1320:	eafffffe 	b	1320 <vtrsTask+0xfc>
    1324:	eafffffe 	b	1324 <vtrsTask+0x100>
    1328:	40000910 	.word	0x40000910
    132c:	40000908 	.word	0x40000908
    1330:	40000948 	.word	0x40000948
    1334:	4000090c 	.word	0x4000090c
    1338:	40000940 	.word	0x40000940
    133c:	0000ecb8 	.word	0x0000ecb8
    1340:	0000ecc0 	.word	0x0000ecc0

00001344 <ADC_Read>:
}
unsigned int
ADC_Read (unsigned int ch)
{
  unsigned int i;
  AD0CR = (0x00200400 | (1 << ch));	// Init ADC (Pclk = 18MHz) and select channel. Sampling rate = 4.5MHz
    1344:	e3a02001 	mov	r2, #1
    1348:	e1a01012 	lsl	r1, r2, r0
    134c:	e59f20c8 	ldr	r2, [pc, #200]	; 141c <ADC_Read+0xd8>
    1350:	e381c602 	orr	ip, r1, #2097152	; 0x200000
    1354:	e38c1b01 	orr	r1, ip, #1024	; 0x400
    1358:	e5821000 	str	r1, [r2]
  AD0CR |= 0x01000000;		// Start A/D Conversion
    135c:	e592c000 	ldr	ip, [r2]
    1360:	e38c1401 	orr	r1, ip, #16777216	; 0x1000000
    1364:	e5821000 	str	r1, [r2]
  do
    {
      switch (ch)
    1368:	e3500007 	cmp	r0, #7
    136c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    1370:	ea000008 	b	1398 <ADC_Read+0x54>
    1374:	000013dc 	.word	0x000013dc
    1378:	000013cc 	.word	0x000013cc
    137c:	000013bc 	.word	0x000013bc
    1380:	000013ac 	.word	0x000013ac
    1384:	000013fc 	.word	0x000013fc
    1388:	000013ec 	.word	0x000013ec
    138c:	0000140c 	.word	0x0000140c
    1390:	00001394 	.word	0x00001394
	  break;
	case 6:
	  i = AD0DR6;
	  break;
	case 7:
	  i = AD0DR7;
    1394:	e592302c 	ldr	r3, [r2, #44]	; 0x2c
	  break;
	}

    }
  while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
    1398:	e3530000 	cmp	r3, #0
    139c:	aafffff1 	bge	1368 <ADC_Read+0x24>
  return (i >> 6) & 0x03FF;	// bit 6:15 is 10 bit AD value
    13a0:	e1a03803 	lsl	r3, r3, #16
}
    13a4:	e1a00b23 	lsr	r0, r3, #22
    13a8:	e12fff1e 	bx	lr
	  break;
	case 2:
	  i = AD0DR2;
	  break;
	case 3:
	  i = AD0DR3;
    13ac:	e592301c 	ldr	r3, [r2, #28]
	  i = AD0DR7;
	  break;
	}

    }
  while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
    13b0:	e3530000 	cmp	r3, #0
    13b4:	aaffffeb 	bge	1368 <ADC_Read+0x24>
    13b8:	eafffff8 	b	13a0 <ADC_Read+0x5c>
	  break;
	case 1:
	  i = AD0DR1;
	  break;
	case 2:
	  i = AD0DR2;
    13bc:	e5923018 	ldr	r3, [r2, #24]
	  i = AD0DR7;
	  break;
	}

    }
  while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
    13c0:	e3530000 	cmp	r3, #0
    13c4:	aaffffe7 	bge	1368 <ADC_Read+0x24>
    13c8:	eafffff4 	b	13a0 <ADC_Read+0x5c>
	{
	case 0:
	  i = AD0DR0;		// Read A/D Data Register
	  break;
	case 1:
	  i = AD0DR1;
    13cc:	e5923014 	ldr	r3, [r2, #20]
	  i = AD0DR7;
	  break;
	}

    }
  while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
    13d0:	e3530000 	cmp	r3, #0
    13d4:	aaffffe3 	bge	1368 <ADC_Read+0x24>
    13d8:	eafffff0 	b	13a0 <ADC_Read+0x5c>
  do
    {
      switch (ch)
	{
	case 0:
	  i = AD0DR0;		// Read A/D Data Register
    13dc:	e5923010 	ldr	r3, [r2, #16]
	  i = AD0DR7;
	  break;
	}

    }
  while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
    13e0:	e3530000 	cmp	r3, #0
    13e4:	aaffffdf 	bge	1368 <ADC_Read+0x24>
    13e8:	eaffffec 	b	13a0 <ADC_Read+0x5c>
	  break;
	case 4:
	  i = AD0DR4;
	  break;
	case 5:
	  i = AD0DR5;
    13ec:	e5923024 	ldr	r3, [r2, #36]	; 0x24
	  i = AD0DR7;
	  break;
	}

    }
  while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
    13f0:	e3530000 	cmp	r3, #0
    13f4:	aaffffdb 	bge	1368 <ADC_Read+0x24>
    13f8:	eaffffe8 	b	13a0 <ADC_Read+0x5c>
	  break;
	case 3:
	  i = AD0DR3;
	  break;
	case 4:
	  i = AD0DR4;
    13fc:	e5923020 	ldr	r3, [r2, #32]
	  i = AD0DR7;
	  break;
	}

    }
  while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
    1400:	e3530000 	cmp	r3, #0
    1404:	aaffffd7 	bge	1368 <ADC_Read+0x24>
    1408:	eaffffe4 	b	13a0 <ADC_Read+0x5c>
	  break;
	case 5:
	  i = AD0DR5;
	  break;
	case 6:
	  i = AD0DR6;
    140c:	e5923028 	ldr	r3, [r2, #40]	; 0x28
	  i = AD0DR7;
	  break;
	}

    }
  while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
    1410:	e3530000 	cmp	r3, #0
    1414:	aaffffd3 	bge	1368 <ADC_Read+0x24>
    1418:	eaffffe0 	b	13a0 <ADC_Read+0x5c>
    141c:	e0034000 	.word	0xe0034000

00001420 <vValueTask>:
unsigned int res[5];
int white, black;
//-----------------
void
vValueTask (void *pvParameters)
{
    1420:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  int i;
  unsigned int a, t;
  vTaskDelay (30 / portTICK_RATE_MS);
    1424:	e3a0001e 	mov	r0, #30
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    1428:	e59f71a8 	ldr	r7, [pc, #424]	; 15d8 <vValueTask+0x1b8>
    142c:	e59f61a8 	ldr	r6, [pc, #424]	; 15dc <vValueTask+0x1bc>
void
vValueTask (void *pvParameters)
{
  int i;
  unsigned int a, t;
  vTaskDelay (30 / portTICK_RATE_MS);
    1430:	eb00333b 	bl	e124 <__vTaskDelay_from_arm>
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    1434:	e3a03000 	mov	r3, #0
    1438:	e5873000 	str	r3, [r7]
    143c:	e5863000 	str	r3, [r6]
    1440:	e59f4198 	ldr	r4, [pc, #408]	; 15e0 <vValueTask+0x1c0>
	{
	  res[a] = ADC_Read (a);
	  printf ("  %x....%4x\t", a, res[a]);
	}
      printf ("\n");
      white += ((res[1] + res[3] + res[4]) / 3);
    1444:	e59f8198 	ldr	r8, [pc, #408]	; 15e4 <vValueTask+0x1c4>
vValueTask (void *pvParameters)
{
  int i;
  unsigned int a, t;
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    1448:	e3a05014 	mov	r5, #20
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    144c:	e3a00000 	mov	r0, #0
    1450:	ebffffbb 	bl	1344 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    1454:	e3a01000 	mov	r1, #0
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1458:	e1a03000 	mov	r3, r0
	  printf ("  %x....%4x\t", a, res[a]);
    145c:	e1a02000 	mov	r2, r0
    1460:	e59f0180 	ldr	r0, [pc, #384]	; 15e8 <vValueTask+0x1c8>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1464:	e5843000 	str	r3, [r4]
	  printf ("  %x....%4x\t", a, res[a]);
    1468:	eb00333e 	bl	e168 <__printf_from_arm>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    146c:	e3a00001 	mov	r0, #1
    1470:	ebffffb3 	bl	1344 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    1474:	e3a01001 	mov	r1, #1
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1478:	e1a0c000 	mov	ip, r0
	  printf ("  %x....%4x\t", a, res[a]);
    147c:	e1a02000 	mov	r2, r0
    1480:	e59f0160 	ldr	r0, [pc, #352]	; 15e8 <vValueTask+0x1c8>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1484:	e584c004 	str	ip, [r4, #4]
	  printf ("  %x....%4x\t", a, res[a]);
    1488:	eb003336 	bl	e168 <__printf_from_arm>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    148c:	e3a00002 	mov	r0, #2
    1490:	ebffffab 	bl	1344 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    1494:	e3a01002 	mov	r1, #2
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1498:	e1a03000 	mov	r3, r0
	  printf ("  %x....%4x\t", a, res[a]);
    149c:	e1a02000 	mov	r2, r0
    14a0:	e59f0140 	ldr	r0, [pc, #320]	; 15e8 <vValueTask+0x1c8>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    14a4:	e5843008 	str	r3, [r4, #8]
	  printf ("  %x....%4x\t", a, res[a]);
    14a8:	eb00332e 	bl	e168 <__printf_from_arm>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    14ac:	e3a00003 	mov	r0, #3
    14b0:	ebffffa3 	bl	1344 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    14b4:	e3a01003 	mov	r1, #3
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    14b8:	e1a0c000 	mov	ip, r0
	  printf ("  %x....%4x\t", a, res[a]);
    14bc:	e1a02000 	mov	r2, r0
    14c0:	e59f0120 	ldr	r0, [pc, #288]	; 15e8 <vValueTask+0x1c8>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    14c4:	e584c00c 	str	ip, [r4, #12]
	  printf ("  %x....%4x\t", a, res[a]);
    14c8:	eb003326 	bl	e168 <__printf_from_arm>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    14cc:	e3a00004 	mov	r0, #4
    14d0:	ebffff9b 	bl	1344 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    14d4:	e3a01004 	mov	r1, #4
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    14d8:	e1a03000 	mov	r3, r0
	  printf ("  %x....%4x\t", a, res[a]);
    14dc:	e1a02000 	mov	r2, r0
    14e0:	e59f0100 	ldr	r0, [pc, #256]	; 15e8 <vValueTask+0x1c8>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    14e4:	e5843010 	str	r3, [r4, #16]
	  printf ("  %x....%4x\t", a, res[a]);
    14e8:	eb00331e 	bl	e168 <__printf_from_arm>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    14ec:	e3a00005 	mov	r0, #5
    14f0:	ebffff93 	bl	1344 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    14f4:	e3a01005 	mov	r1, #5
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    14f8:	e1a0c000 	mov	ip, r0
	  printf ("  %x....%4x\t", a, res[a]);
    14fc:	e1a02000 	mov	r2, r0
    1500:	e59f00e0 	ldr	r0, [pc, #224]	; 15e8 <vValueTask+0x1c8>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1504:	e584c014 	str	ip, [r4, #20]
	  printf ("  %x....%4x\t", a, res[a]);
    1508:	eb003316 	bl	e168 <__printf_from_arm>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    150c:	e3a00006 	mov	r0, #6
    1510:	ebffff8b 	bl	1344 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    1514:	e3a01006 	mov	r1, #6
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1518:	e1a03000 	mov	r3, r0
	  printf ("  %x....%4x\t", a, res[a]);
    151c:	e1a02000 	mov	r2, r0
    1520:	e59f00c0 	ldr	r0, [pc, #192]	; 15e8 <vValueTask+0x1c8>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1524:	e5843018 	str	r3, [r4, #24]
	  printf ("  %x....%4x\t", a, res[a]);
    1528:	eb00330e 	bl	e168 <__printf_from_arm>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    152c:	e3a00007 	mov	r0, #7
    1530:	ebffff83 	bl	1344 <ADC_Read>
	  printf ("  %x....%4x\t", a, res[a]);
    1534:	e3a01007 	mov	r1, #7
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1538:	e1a0c000 	mov	ip, r0
	  printf ("  %x....%4x\t", a, res[a]);
    153c:	e1a02000 	mov	r2, r0
    1540:	e59f00a0 	ldr	r0, [pc, #160]	; 15e8 <vValueTask+0x1c8>
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    {
      for (a = 0; a <= 7; a++)
	{
	  res[a] = ADC_Read (a);
    1544:	e584c01c 	str	ip, [r4, #28]
	  printf ("  %x....%4x\t", a, res[a]);
    1548:	eb003306 	bl	e168 <__printf_from_arm>
	}
      printf ("\n");
    154c:	e3a0000a 	mov	r0, #10
    1550:	eb0032c7 	bl	e074 <__putchar_from_arm>
      white += ((res[1] + res[3] + res[4]) / 3);
    1554:	e5943004 	ldr	r3, [r4, #4]
    1558:	e284100c 	add	r1, r4, #12
    155c:	e8911002 	ldm	r1, {r1, ip}
    1560:	e0812003 	add	r2, r1, r3
    1564:	e082000c 	add	r0, r2, ip
    1568:	e0803098 	umull	r3, r0, r8, r0
      black += (res[2]);
    156c:	e5961000 	ldr	r1, [r6]
	{
	  res[a] = ADC_Read (a);
	  printf ("  %x....%4x\t", a, res[a]);
	}
      printf ("\n");
      white += ((res[1] + res[3] + res[4]) / 3);
    1570:	e5973000 	ldr	r3, [r7]
      black += (res[2]);
    1574:	e594c008 	ldr	ip, [r4, #8]
	{
	  res[a] = ADC_Read (a);
	  printf ("  %x....%4x\t", a, res[a]);
	}
      printf ("\n");
      white += ((res[1] + res[3] + res[4]) / 3);
    1578:	e08320a0 	add	r2, r3, r0, lsr #1
vValueTask (void *pvParameters)
{
  int i;
  unsigned int a, t;
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    157c:	e2555001 	subs	r5, r5, #1
	  res[a] = ADC_Read (a);
	  printf ("  %x....%4x\t", a, res[a]);
	}
      printf ("\n");
      white += ((res[1] + res[3] + res[4]) / 3);
      black += (res[2]);
    1580:	e081000c 	add	r0, r1, ip
	{
	  res[a] = ADC_Read (a);
	  printf ("  %x....%4x\t", a, res[a]);
	}
      printf ("\n");
      white += ((res[1] + res[3] + res[4]) / 3);
    1584:	e5872000 	str	r2, [r7]
      black += (res[2]);
    1588:	e5860000 	str	r0, [r6]
vValueTask (void *pvParameters)
{
  int i;
  unsigned int a, t;
  vTaskDelay (30 / portTICK_RATE_MS);
  for (white = 0, black = 0, i = 1; i <= 20; i++)
    158c:	1affffae 	bne	144c <vValueTask+0x2c>
//      printf("white %x, black %x", white, black);
//      write_ROM(0x1A, 32, white);             //(int subadr, int size, int Data)
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
    1590:	e3550004 	cmp	r5, #4
    1594:	9a000002 	bls	15a4 <vValueTask+0x184>
	{
	  res[a] = ADC_Read (a);
	  printf ("%d\t", res[a]);
	  vTaskDelay (3 / portTICK_RATE_MS);
	}
      printf ("\n");
    1598:	e3a0000a 	mov	r0, #10
    159c:	eb0032b4 	bl	e074 <__putchar_from_arm>
//      printf("white %x, black %x", white, black);
//      write_ROM(0x1A, 32, white);             //(int subadr, int size, int Data)
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
    15a0:	e3a05000 	mov	r5, #0
	{
	  res[a] = ADC_Read (a);
    15a4:	e1a00005 	mov	r0, r5
    15a8:	ebffff65 	bl	1344 <ADC_Read>
	  printf ("%d\t", res[a]);
    15ac:	e1a01000 	mov	r1, r0
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
	{
	  res[a] = ADC_Read (a);
    15b0:	e1a06000 	mov	r6, r0
	  printf ("%d\t", res[a]);
    15b4:	e59f0030 	ldr	r0, [pc, #48]	; 15ec <vValueTask+0x1cc>
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
	{
	  res[a] = ADC_Read (a);
    15b8:	e7846105 	str	r6, [r4, r5, lsl #2]
	  printf ("%d\t", res[a]);
    15bc:	eb0032e9 	bl	e168 <__printf_from_arm>
//      printf("white %x, black %x", white, black);
//      write_ROM(0x1A, 32, white);             //(int subadr, int size, int Data)
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
    15c0:	e2855001 	add	r5, r5, #1
	{
	  res[a] = ADC_Read (a);
	  printf ("%d\t", res[a]);
	  vTaskDelay (3 / portTICK_RATE_MS);
    15c4:	e3a00003 	mov	r0, #3
    15c8:	eb0032d5 	bl	e124 <__vTaskDelay_from_arm>
//      printf("white %x, black %x", white, black);
//      write_ROM(0x1A, 32, white);             //(int subadr, int size, int Data)
//      write_ROM(0x2A, 32, black);             //(int subadr, int size, int Data)
  while (1)
    {
      for (a = 0; a <= 4; a++)
    15cc:	e3550004 	cmp	r5, #4
    15d0:	8afffff0 	bhi	1598 <vValueTask+0x178>
    15d4:	eafffff2 	b	15a4 <vValueTask+0x184>
    15d8:	40000908 	.word	0x40000908
    15dc:	40000948 	.word	0x40000948
    15e0:	40000910 	.word	0x40000910
    15e4:	aaaaaaab 	.word	0xaaaaaaab
    15e8:	0000ecc8 	.word	0x0000ecc8
    15ec:	0000ecd8 	.word	0x0000ecd8

000015f0 <init_VIC>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void init_VIC(void) 
{
    15f0:	b570      	push	{r4, r5, r6, lr}
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    15f2:	480d      	ldr	r0, [pc, #52]	; (1628 <init_VIC+0x38>)
    VICVectAddr = 0;
    15f4:	4b0d      	ldr	r3, [pc, #52]	; (162c <init_VIC+0x3c>)
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    15f6:	2101      	movs	r1, #1
    VICVectAddr = 0;
    15f8:	2500      	movs	r5, #0
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    15fa:	424a      	negs	r2, r1
    15fc:	6002      	str	r2, [r0, #0]
    VICVectAddr = 0;
    15fe:	601d      	str	r5, [r3, #0]
    VICIntSelect = 0;
    1600:	4b0b      	ldr	r3, [pc, #44]	; (1630 <init_VIC+0x40>)
    1602:	480c      	ldr	r0, [pc, #48]	; (1634 <init_VIC+0x44>)

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    1604:	4e0c      	ldr	r6, [pc, #48]	; (1638 <init_VIC+0x48>)
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;
    1606:	601d      	str	r5, [r3, #0]
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
		*vect_cntl = 0xF;
    1608:	240f      	movs	r4, #15
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;
    160a:	33f4      	adds	r3, #244	; 0xf4
    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
    160c:	1c19      	adds	r1, r3, #0
    160e:	c120      	stmia	r1!, {r5}
		*vect_cntl = 0xF;
    1610:	1c02      	adds	r2, r0, #0
    1612:	c210      	stmia	r2!, {r4}
    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
    1614:	605d      	str	r5, [r3, #4]
    1616:	1d0b      	adds	r3, r1, #4
		*vect_cntl = 0xF;
    1618:	6044      	str	r4, [r0, #4]
    161a:	1d10      	adds	r0, r2, #4
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    161c:	42b3      	cmp	r3, r6
    161e:	d1f5      	bne.n	160c <init_VIC+0x1c>
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
		*vect_cntl = 0xF;
    }
    return;
}
    1620:	bc70      	pop	{r4, r5, r6}
    1622:	bc01      	pop	{r0}
    1624:	4700      	bx	r0
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	fffff014 	.word	0xfffff014
    162c:	ffffff00 	.word	0xffffff00
    1630:	fffff00c 	.word	0xfffff00c
    1634:	fffff200 	.word	0xfffff200
    1638:	fffff180 	.word	0xfffff180

0000163c <install_irq>:
**						interrupt priority
** Returned value:		true or false, return false if IntNum is out of range
** 
******************************************************************************/
DWORD install_irq( DWORD IntNumber, void *HandlerAddr, DWORD Priority )
{
    163c:	b570      	push	{r4, r5, r6, lr}
    DWORD *vect_addr;
    DWORD *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    163e:	2401      	movs	r4, #1
    1640:	4b0a      	ldr	r3, [pc, #40]	; (166c <install_irq+0x30>)
    1642:	1c25      	adds	r5, r4, #0
    1644:	4085      	lsls	r5, r0
    1646:	601d      	str	r5, [r3, #0]
    if ( IntNumber >= VIC_SIZE )
    {
		return ( FALSE );
    1648:	2300      	movs	r3, #0
{
    DWORD *vect_addr;
    DWORD *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    if ( IntNumber >= VIC_SIZE )
    164a:	281f      	cmp	r0, #31
    164c:	d80a      	bhi.n	1664 <install_irq+0x28>
		return ( FALSE );
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
    164e:	4e08      	ldr	r6, [pc, #32]	; (1670 <install_irq+0x34>)
    1650:	1983      	adds	r3, r0, r6
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
    1652:	009e      	lsls	r6, r3, #2
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
    1654:	4b07      	ldr	r3, [pc, #28]	; (1674 <install_irq+0x38>)
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
    1656:	6031      	str	r1, [r6, #0]
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
    1658:	18c6      	adds	r6, r0, r3
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
		*vect_cntl = Priority;
		VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    165a:	4807      	ldr	r0, [pc, #28]	; (1678 <install_irq+0x3c>)
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
		*vect_cntl = Priority;
    165c:	00b1      	lsls	r1, r6, #2
    165e:	600a      	str	r2, [r1, #0]
		VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    1660:	6005      	str	r5, [r0, #0]
		return( TRUE );
    1662:	1c23      	adds	r3, r4, #0
    }
}
    1664:	1c18      	adds	r0, r3, #0
    1666:	bc70      	pop	{r4, r5, r6}
    1668:	bc02      	pop	{r1}
    166a:	4708      	bx	r1
    166c:	fffff014 	.word	0xfffff014
    1670:	3ffffc40 	.word	0x3ffffc40
    1674:	3ffffc80 	.word	0x3ffffc80
    1678:	fffff010 	.word	0xfffff010

0000167c <RTCInit>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
DWORD RTCInit( void )
{
    167c:	b5f0      	push	{r4, r5, r6, r7, lr}
    167e:	4657      	mov	r7, sl
    1680:	464e      	mov	r6, r9
    1682:	4645      	mov	r5, r8
    1684:	b4e0      	push	{r5, r6, r7}
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
    1686:	4d2d      	ldr	r5, [pc, #180]	; (173c <RTCInit+0xc0>)
    1688:	2200      	movs	r2, #0
    168a:	602a      	str	r2, [r5, #0]
	RTC_CIIR = 0;
	RTC_CCR = 0;
	RTC_CCR = CCR_CLKSRC ;
	RTC_PREINT = PREINT_RTC;
    168c:	21e4      	movs	r1, #228	; 0xe4
*****************************************************************************/
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
    168e:	3d04      	subs	r5, #4
	RTC_CCR = 0;
	RTC_CCR = CCR_CLKSRC ;
	RTC_PREINT = PREINT_RTC;
    1690:	4e2b      	ldr	r6, [pc, #172]	; (1740 <RTCInit+0xc4>)
	RTC_PREFRAC = PREFRAC_RTC;
    1692:	4f2c      	ldr	r7, [pc, #176]	; (1744 <RTCInit+0xc8>)
*****************************************************************************/
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
    1694:	602a      	str	r2, [r5, #0]
	RTC_CCR = 0;
	RTC_CCR = CCR_CLKSRC ;
	RTC_PREINT = PREINT_RTC;
    1696:	004b      	lsls	r3, r1, #1
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
	RTC_CCR = 0;
    1698:	3d04      	subs	r5, #4
	RTC_CCR = CCR_CLKSRC ;
    169a:	2410      	movs	r4, #16
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
	RTC_CCR = 0;
    169c:	602a      	str	r2, [r5, #0]
	RTC_CCR = CCR_CLKSRC ;
    169e:	602c      	str	r4, [r5, #0]
	RTC_PREINT = PREINT_RTC;
    16a0:	6033      	str	r3, [r6, #0]
	RTC_PREFRAC = PREFRAC_RTC;
    16a2:	6077      	str	r7, [r6, #4]
** 
*****************************************************************************/
void RTCStart( void ) 
{
  /*--- Start RTC counters ---*/
  RTC_CCR |= CCR_CLKEN;
    16a4:	6828      	ldr	r0, [r5, #0]
    16a6:	2401      	movs	r4, #1
    16a8:	4320      	orrs	r0, r4
    16aa:	6028      	str	r0, [r5, #0]
  RTC_ILR = ILR_RTCCIF;
    16ac:	3d08      	subs	r5, #8
    16ae:	602c      	str	r4, [r5, #0]
	RTC_PREINT = PREINT_RTC;
	RTC_PREFRAC = PREFRAC_RTC;

	RTCStart(); 

	if(RTC_CONF_STAT != CONF_COMPLETED){
    16b0:	4825      	ldr	r0, [pc, #148]	; (1748 <RTCInit+0xcc>)
    16b2:	4926      	ldr	r1, [pc, #152]	; (174c <RTCInit+0xd0>)
    16b4:	6803      	ldr	r3, [r0, #0]
    16b6:	468a      	mov	sl, r1
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
DWORD RTCInit( void )
{
    16b8:	b088      	sub	sp, #32
	RTC_PREINT = PREINT_RTC;
	RTC_PREFRAC = PREFRAC_RTC;

	RTCStart(); 

	if(RTC_CONF_STAT != CONF_COMPLETED){
    16ba:	4553      	cmp	r3, sl
    16bc:	d034      	beq.n	1728 <RTCInit+0xac>
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
    16be:	4f24      	ldr	r7, [pc, #144]	; (1750 <RTCInit+0xd4>)
		RTC_MIN   = 43;
    16c0:	4e24      	ldr	r6, [pc, #144]	; (1754 <RTCInit+0xd8>)
    16c2:	232b      	movs	r3, #43	; 0x2b
		RTC_HOUR  = 23;
    16c4:	4d24      	ldr	r5, [pc, #144]	; (1758 <RTCInit+0xdc>)
	RTCStart(); 

	if(RTC_CONF_STAT != CONF_COMPLETED){
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
    16c6:	603a      	str	r2, [r7, #0]
		RTC_MIN   = 43;
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
    16c8:	4924      	ldr	r1, [pc, #144]	; (175c <RTCInit+0xe0>)

	if(RTC_CONF_STAT != CONF_COMPLETED){
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
		RTC_MIN   = 43;
    16ca:	6033      	str	r3, [r6, #0]
		RTC_HOUR  = 23;
    16cc:	3b14      	subs	r3, #20
    16ce:	602b      	str	r3, [r5, #0]
		RTC_DOM   = 29;
		RTC_MONTH = 7;
    16d0:	4a23      	ldr	r2, [pc, #140]	; (1760 <RTCInit+0xe4>)
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
		RTC_MIN   = 43;
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
    16d2:	3306      	adds	r3, #6
    16d4:	600b      	str	r3, [r1, #0]
		RTC_MONTH = 7;
    16d6:	3b16      	subs	r3, #22
    16d8:	6013      	str	r3, [r2, #0]
		RTC_YEAR  = 2009;    
    16da:	4c22      	ldr	r4, [pc, #136]	; (1764 <RTCInit+0xe8>)
    16dc:	4b22      	ldr	r3, [pc, #136]	; (1768 <RTCInit+0xec>)
    16de:	601c      	str	r4, [r3, #0]
*****************************************************************************/
RTCTime RTCGetTime( void ) 
{
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
    16e0:	683f      	ldr	r7, [r7, #0]
  LocalTime.RTC_Min = RTC_MIN;
    16e2:	6836      	ldr	r6, [r6, #0]
  LocalTime.RTC_Hour = RTC_HOUR;
    16e4:	682d      	ldr	r5, [r5, #0]
  LocalTime.RTC_Mday = RTC_DOM;
    16e6:	6809      	ldr	r1, [r1, #0]
    16e8:	4689      	mov	r9, r1
  LocalTime.RTC_Wday = RTC_DOW;
    16ea:	4920      	ldr	r1, [pc, #128]	; (176c <RTCInit+0xf0>)
RTCTime RTCGetTime( void ) 
{
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
  LocalTime.RTC_Min = RTC_MIN;
    16ec:	46b4      	mov	ip, r6
  LocalTime.RTC_Hour = RTC_HOUR;
    16ee:	46a8      	mov	r8, r5
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
  LocalTime.RTC_Year = RTC_YEAR;
    16f0:	4664      	mov	r4, ip
    
  LocalTime.RTC_Sec = RTC_SEC;
  LocalTime.RTC_Min = RTC_MIN;
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
    16f2:	680d      	ldr	r5, [r1, #0]
  LocalTime.RTC_Yday = RTC_DOY;
    16f4:	3104      	adds	r1, #4
    16f6:	6809      	ldr	r1, [r1, #0]
  LocalTime.RTC_Mon = RTC_MONTH;
    16f8:	6816      	ldr	r6, [r2, #0]
  LocalTime.RTC_Year = RTC_YEAR;
    16fa:	681a      	ldr	r2, [r3, #0]
    16fc:	9401      	str	r4, [sp, #4]
    16fe:	4644      	mov	r4, r8
    1700:	9402      	str	r4, [sp, #8]
    1702:	9506      	str	r5, [sp, #24]
    1704:	464c      	mov	r4, r9
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    1706:	4d1a      	ldr	r5, [pc, #104]	; (1770 <RTCInit+0xf4>)
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
  LocalTime.RTC_Year = RTC_YEAR;
    1708:	9700      	str	r7, [sp, #0]
    170a:	9604      	str	r6, [sp, #16]
    170c:	9205      	str	r2, [sp, #20]
    170e:	9107      	str	r1, [sp, #28]
    1710:	9403      	str	r4, [sp, #12]
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    1712:	1c2f      	adds	r7, r5, #0
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
  LocalTime.RTC_Year = RTC_YEAR;
    1714:	466b      	mov	r3, sp
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    1716:	cb70      	ldmia	r3!, {r4, r5, r6}
    1718:	c770      	stmia	r7!, {r4, r5, r6}
    171a:	1c3a      	adds	r2, r7, #0
    171c:	cb70      	ldmia	r3!, {r4, r5, r6}
    171e:	c270      	stmia	r2!, {r4, r5, r6}
		
		RTC_CONF_STAT = CONF_COMPLETED;
    1720:	4651      	mov	r1, sl
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    1722:	cb60      	ldmia	r3!, {r5, r6}
    1724:	c260      	stmia	r2!, {r5, r6}
		
		RTC_CONF_STAT = CONF_COMPLETED;
    1726:	6001      	str	r1, [r0, #0]
	}

	return (TRUE);
}
    1728:	b008      	add	sp, #32
    172a:	2001      	movs	r0, #1
    172c:	bc1c      	pop	{r2, r3, r4}
    172e:	4690      	mov	r8, r2
    1730:	4699      	mov	r9, r3
    1732:	46a2      	mov	sl, r4
    1734:	bcf0      	pop	{r4, r5, r6, r7}
    1736:	bc02      	pop	{r1}
    1738:	4708      	bx	r1
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	e0024010 	.word	0xe0024010
    1740:	e0024080 	.word	0xe0024080
    1744:	000061c0 	.word	0x000061c0
    1748:	e0084004 	.word	0xe0084004
    174c:	a5a5a5a5 	.word	0xa5a5a5a5
    1750:	e0024020 	.word	0xe0024020
    1754:	e0024024 	.word	0xe0024024
    1758:	e0024028 	.word	0xe0024028
    175c:	e002402c 	.word	0xe002402c
    1760:	e0024038 	.word	0xe0024038
    1764:	000007d9 	.word	0x000007d9
    1768:	e002403c 	.word	0xe002403c
    176c:	e0024030 	.word	0xe0024030
    1770:	4000098c 	.word	0x4000098c

00001774 <RTCStart>:
** 
*****************************************************************************/
void RTCStart( void ) 
{
  /*--- Start RTC counters ---*/
  RTC_CCR |= CCR_CLKEN;
    1774:	4a03      	ldr	r2, [pc, #12]	; (1784 <RTCStart+0x10>)
    1776:	6811      	ldr	r1, [r2, #0]
    1778:	2301      	movs	r3, #1
    177a:	4319      	orrs	r1, r3
    177c:	6011      	str	r1, [r2, #0]
  RTC_ILR = ILR_RTCCIF;
    177e:	3a08      	subs	r2, #8
    1780:	6013      	str	r3, [r2, #0]
  return;
}
    1782:	4770      	bx	lr
    1784:	e0024008 	.word	0xe0024008

00001788 <RTCStop>:
** 
*****************************************************************************/
void RTCStop( void )
{   
  /*--- Stop RTC counters ---*/
  RTC_CCR &= ~CCR_CLKEN;
    1788:	4b02      	ldr	r3, [pc, #8]	; (1794 <RTCStop+0xc>)
    178a:	681a      	ldr	r2, [r3, #0]
    178c:	2101      	movs	r1, #1
    178e:	438a      	bics	r2, r1
    1790:	601a      	str	r2, [r3, #0]
  return;
} 
    1792:	4770      	bx	lr
    1794:	e0024008 	.word	0xe0024008

00001798 <RTC_CTCReset>:
** 
*****************************************************************************/
void RTC_CTCReset( void )
{   
  /*--- Reset CTC ---*/
  RTC_CCR |= CCR_CTCRST;
    1798:	4b02      	ldr	r3, [pc, #8]	; (17a4 <RTC_CTCReset+0xc>)
    179a:	681a      	ldr	r2, [r3, #0]
    179c:	2102      	movs	r1, #2
    179e:	430a      	orrs	r2, r1
    17a0:	601a      	str	r2, [r3, #0]
  return;
}
    17a2:	4770      	bx	lr
    17a4:	e0024008 	.word	0xe0024008

000017a8 <RTCSetTime>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetTime( RTCTime Time ) 
{
    17a8:	b084      	sub	sp, #16
    17aa:	b510      	push	{r4, lr}
    17ac:	9305      	str	r3, [sp, #20]
  RTC_SEC   = Time.RTC_Sec;
    17ae:	4b0b      	ldr	r3, [pc, #44]	; (17dc <RTCSetTime+0x34>)
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetTime( RTCTime Time ) 
{
    17b0:	9204      	str	r2, [sp, #16]
    17b2:	9002      	str	r0, [sp, #8]
    17b4:	9103      	str	r1, [sp, #12]
  RTC_SEC   = Time.RTC_Sec;
    17b6:	6018      	str	r0, [r3, #0]
  RTC_MIN   = Time.RTC_Min;
    17b8:	9903      	ldr	r1, [sp, #12]
    17ba:	6059      	str	r1, [r3, #4]
  RTC_HOUR  = Time.RTC_Hour;
    17bc:	9804      	ldr	r0, [sp, #16]
    17be:	6098      	str	r0, [r3, #8]
  RTC_DOM   = Time.RTC_Mday;
    17c0:	9a05      	ldr	r2, [sp, #20]
    17c2:	60da      	str	r2, [r3, #12]
  RTC_DOW   = Time.RTC_Wday;
    17c4:	9c08      	ldr	r4, [sp, #32]
    17c6:	611c      	str	r4, [r3, #16]
  RTC_DOY   = Time.RTC_Yday;
    17c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    17ca:	6159      	str	r1, [r3, #20]
  RTC_MONTH = Time.RTC_Mon;
    17cc:	9806      	ldr	r0, [sp, #24]
    17ce:	6198      	str	r0, [r3, #24]
  RTC_YEAR  = Time.RTC_Year;    
    17d0:	9a07      	ldr	r2, [sp, #28]
    17d2:	61da      	str	r2, [r3, #28]
  return;
}
    17d4:	bc10      	pop	{r4}
    17d6:	bc08      	pop	{r3}
    17d8:	b004      	add	sp, #16
    17da:	4718      	bx	r3
    17dc:	e0024020 	.word	0xe0024020

000017e0 <RTCSetAlarm>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetAlarm( RTCTime Alarm ) 
{   
    17e0:	b084      	sub	sp, #16
    17e2:	b510      	push	{r4, lr}
    17e4:	9305      	str	r3, [sp, #20]
  RTC_ALSEC  = Alarm.RTC_Sec;
    17e6:	4b0b      	ldr	r3, [pc, #44]	; (1814 <RTCSetAlarm+0x34>)
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetAlarm( RTCTime Alarm ) 
{   
    17e8:	9204      	str	r2, [sp, #16]
    17ea:	9002      	str	r0, [sp, #8]
    17ec:	9103      	str	r1, [sp, #12]
  RTC_ALSEC  = Alarm.RTC_Sec;
    17ee:	6018      	str	r0, [r3, #0]
  RTC_ALMIN  = Alarm.RTC_Min;
    17f0:	9903      	ldr	r1, [sp, #12]
    17f2:	6059      	str	r1, [r3, #4]
  RTC_ALHOUR = Alarm.RTC_Hour;
    17f4:	9804      	ldr	r0, [sp, #16]
    17f6:	6098      	str	r0, [r3, #8]
  RTC_ALDOM  = Alarm.RTC_Mday;
    17f8:	9a05      	ldr	r2, [sp, #20]
    17fa:	60da      	str	r2, [r3, #12]
  RTC_ALDOW  = Alarm.RTC_Wday;
    17fc:	9c08      	ldr	r4, [sp, #32]
    17fe:	611c      	str	r4, [r3, #16]
  RTC_ALDOY  = Alarm.RTC_Yday;
    1800:	9909      	ldr	r1, [sp, #36]	; 0x24
    1802:	6159      	str	r1, [r3, #20]
  RTC_ALMON  = Alarm.RTC_Mon;
    1804:	9806      	ldr	r0, [sp, #24]
    1806:	6198      	str	r0, [r3, #24]
  RTC_ALYEAR = Alarm.RTC_Year;    
    1808:	9a07      	ldr	r2, [sp, #28]
    180a:	61da      	str	r2, [r3, #28]
  return;
}
    180c:	bc10      	pop	{r4}
    180e:	bc08      	pop	{r3}
    1810:	b004      	add	sp, #16
    1812:	4718      	bx	r3
    1814:	e0024060 	.word	0xe0024060

00001818 <RTCGetTime>:
** parameters:			None
** Returned value:		The data structure of the RTC time table
** 
*****************************************************************************/
RTCTime RTCGetTime( void ) 
{
    1818:	b5f0      	push	{r4, r5, r6, r7, lr}
    181a:	4647      	mov	r7, r8
    181c:	b480      	push	{r7}
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
    181e:	4a0f      	ldr	r2, [pc, #60]	; (185c <RTCGetTime+0x44>)
    1820:	6813      	ldr	r3, [r2, #0]
    1822:	469c      	mov	ip, r3
  LocalTime.RTC_Min = RTC_MIN;
    1824:	4b0e      	ldr	r3, [pc, #56]	; (1860 <RTCGetTime+0x48>)
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
    1826:	490f      	ldr	r1, [pc, #60]	; (1864 <RTCGetTime+0x4c>)
RTCTime RTCGetTime( void ) 
{
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
  LocalTime.RTC_Min = RTC_MIN;
    1828:	681f      	ldr	r7, [r3, #0]
  LocalTime.RTC_Hour = RTC_HOUR;
    182a:	685e      	ldr	r6, [r3, #4]
  LocalTime.RTC_Mday = RTC_DOM;
    182c:	689d      	ldr	r5, [r3, #8]
  LocalTime.RTC_Wday = RTC_DOW;
    182e:	68da      	ldr	r2, [r3, #12]
  LocalTime.RTC_Yday = RTC_DOY;
    1830:	3310      	adds	r3, #16
    1832:	681b      	ldr	r3, [r3, #0]
  LocalTime.RTC_Mon = RTC_MONTH;
    1834:	680c      	ldr	r4, [r1, #0]
  LocalTime.RTC_Year = RTC_YEAR;
    1836:	3104      	adds	r1, #4
    1838:	6809      	ldr	r1, [r1, #0]
    183a:	4688      	mov	r8, r1
    183c:	4661      	mov	r1, ip
    183e:	6001      	str	r1, [r0, #0]
    1840:	4641      	mov	r1, r8
    1842:	6047      	str	r7, [r0, #4]
    1844:	6086      	str	r6, [r0, #8]
    1846:	60c5      	str	r5, [r0, #12]
    1848:	6104      	str	r4, [r0, #16]
    184a:	6141      	str	r1, [r0, #20]
    184c:	6182      	str	r2, [r0, #24]
    184e:	61c3      	str	r3, [r0, #28]
  return ( LocalTime );    
}
    1850:	bc04      	pop	{r2}
    1852:	4690      	mov	r8, r2
    1854:	bcf0      	pop	{r4, r5, r6, r7}
    1856:	bc02      	pop	{r1}
    1858:	4708      	bx	r1
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	e0024020 	.word	0xe0024020
    1860:	e0024024 	.word	0xe0024024
    1864:	e0024038 	.word	0xe0024038

00001868 <RTCSetAlarmMask>:
** 
*****************************************************************************/
void RTCSetAlarmMask( DWORD AlarmMask ) 
{
  /*--- Set alarm mask ---*/    
  RTC_AMR = AlarmMask;
    1868:	4b01      	ldr	r3, [pc, #4]	; (1870 <RTCSetAlarmMask+0x8>)
    186a:	6018      	str	r0, [r3, #0]
  return;
}
    186c:	4770      	bx	lr
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	e0024010 	.word	0xe0024010

00001874 <UARTInit>:
**						interrupt handler can't be installed to the 
**						VIC table
** 
*****************************************************************************/
DWORD UARTInit( DWORD PortNum, DWORD baudrate )
{
    1874:	b538      	push	{r3, r4, r5, lr}
    DWORD Fdiv;

	if ( PortNum == 0 )
    1876:	1e04      	subs	r4, r0, #0
    1878:	d022      	beq.n	18c0 <UARTInit+0x4c>
    	}
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
	}
	return( FALSE ); 
    187a:	2000      	movs	r0, #0
    	}
    	U0IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
	}
	else if ( PortNum == 1 )
    187c:	2c01      	cmp	r4, #1
    187e:	d002      	beq.n	1886 <UARTInit+0x12>
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
	}
	return( FALSE ); 
}
    1880:	bc38      	pop	{r3, r4, r5}
    1882:	bc02      	pop	{r1}
    1884:	4708      	bx	r1
	else if ( PortNum == 1 )
	{
#if EA_BOARD_LPC24XX
		PINSEL7 |= 0x0000000F;	/* P3.16 TXD1, P3.17 RXD1 */
#else							/* Default is Keil MCB2300 board */							
		PINSEL0 |= 0x40000000;	/* Enable TxD1 P0.15 */
    1886:	4b1a      	ldr	r3, [pc, #104]	; (18f0 <UARTInit+0x7c>)
    1888:	2580      	movs	r5, #128	; 0x80
    188a:	6818      	ldr	r0, [r3, #0]
    188c:	05ea      	lsls	r2, r5, #23
    188e:	4302      	orrs	r2, r0
    1890:	601a      	str	r2, [r3, #0]
		PINSEL1 |= 0x00000001;	/* Enable RxD1 P0.16 */
    1892:	685d      	ldr	r5, [r3, #4]
    1894:	4325      	orrs	r5, r4
    1896:	605d      	str	r5, [r3, #4]
#endif
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    1898:	4d16      	ldr	r5, [pc, #88]	; (18f4 <UARTInit+0x80>)
    189a:	2083      	movs	r0, #131	; 0x83
    189c:	6028      	str	r0, [r5, #0]
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    189e:	4816      	ldr	r0, [pc, #88]	; (18f8 <UARTInit+0x84>)
    18a0:	f00c fc3c 	bl	e11c <____aeabi_uidiv_from_thumb>
    	U1DLM = Fdiv / 256;							
    18a4:	4b15      	ldr	r3, [pc, #84]	; (18fc <UARTInit+0x88>)
    18a6:	0a01      	lsrs	r1, r0, #8
    18a8:	6019      	str	r1, [r3, #0]
    	U1DLL = Fdiv % 256;
    18aa:	22ff      	movs	r2, #255	; 0xff
    18ac:	4914      	ldr	r1, [pc, #80]	; (1900 <UARTInit+0x8c>)
    18ae:	4010      	ands	r0, r2
		U1LCR = 0x03;		/* DLAB = 0 */
    	U1FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    18b0:	4a14      	ldr	r2, [pc, #80]	; (1904 <UARTInit+0x90>)
		PINSEL1 |= 0x00000001;	/* Enable RxD1 P0.16 */
#endif
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U1DLM = Fdiv / 256;							
    	U1DLL = Fdiv % 256;
    18b2:	6008      	str	r0, [r1, #0]
		U1LCR = 0x03;		/* DLAB = 0 */
    18b4:	2303      	movs	r3, #3
    	U1FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    18b6:	2107      	movs	r1, #7
#endif
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U1DLM = Fdiv / 256;							
    	U1DLL = Fdiv % 256;
		U1LCR = 0x03;		/* DLAB = 0 */
    18b8:	602b      	str	r3, [r5, #0]
    	{
			return (FALSE);
    	}
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
    18ba:	1c20      	adds	r0, r4, #0
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U1DLM = Fdiv / 256;							
    	U1DLL = Fdiv % 256;
		U1LCR = 0x03;		/* DLAB = 0 */
    	U1FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    18bc:	6011      	str	r1, [r2, #0]
    	{
			return (FALSE);
    	}
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
    18be:	e7df      	b.n	1880 <UARTInit+0xc>
{
    DWORD Fdiv;

	if ( PortNum == 0 )
	{
		PINSEL0 = 0x00000050;       /* RxD0 and TxD0 */
    18c0:	4d0b      	ldr	r5, [pc, #44]	; (18f0 <UARTInit+0x7c>)
    18c2:	2450      	movs	r4, #80	; 0x50
    18c4:	602c      	str	r4, [r5, #0]

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    18c6:	4c10      	ldr	r4, [pc, #64]	; (1908 <UARTInit+0x94>)
    18c8:	2083      	movs	r0, #131	; 0x83
    18ca:	6020      	str	r0, [r4, #0]
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    18cc:	480a      	ldr	r0, [pc, #40]	; (18f8 <UARTInit+0x84>)
    18ce:	f00c fc25 	bl	e11c <____aeabi_uidiv_from_thumb>
    	U0DLM = Fdiv / 256;							
    18d2:	4b0e      	ldr	r3, [pc, #56]	; (190c <UARTInit+0x98>)
    18d4:	0a02      	lsrs	r2, r0, #8
    	U0DLL = Fdiv % 256;
    18d6:	25ff      	movs	r5, #255	; 0xff
    18d8:	490d      	ldr	r1, [pc, #52]	; (1910 <UARTInit+0x9c>)
	{
		PINSEL0 = 0x00000050;       /* RxD0 and TxD0 */

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U0DLM = Fdiv / 256;							
    18da:	601a      	str	r2, [r3, #0]
    	U0DLL = Fdiv % 256;
    18dc:	4028      	ands	r0, r5
		U0LCR = 0x03;		/* DLAB = 0 */
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    18de:	4b0d      	ldr	r3, [pc, #52]	; (1914 <UARTInit+0xa0>)
		PINSEL0 = 0x00000050;       /* RxD0 and TxD0 */

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U0DLM = Fdiv / 256;							
    	U0DLL = Fdiv % 256;
    18e0:	6008      	str	r0, [r1, #0]
		U0LCR = 0x03;		/* DLAB = 0 */
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    18e2:	2207      	movs	r2, #7

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U0DLM = Fdiv / 256;							
    	U0DLL = Fdiv % 256;
		U0LCR = 0x03;		/* DLAB = 0 */
    18e4:	2003      	movs	r0, #3
    18e6:	6020      	str	r0, [r4, #0]
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    18e8:	601a      	str	r2, [r3, #0]
    	{
			return (FALSE);
    	}
    	U0IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
    18ea:	2001      	movs	r0, #1
    18ec:	e7c8      	b.n	1880 <UARTInit+0xc>
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	e002c000 	.word	0xe002c000
    18f4:	e001000c 	.word	0xe001000c
    18f8:	00225510 	.word	0x00225510
    18fc:	e0010004 	.word	0xe0010004
    1900:	e0010000 	.word	0xe0010000
    1904:	e0010008 	.word	0xe0010008
    1908:	e000c00c 	.word	0xe000c00c
    190c:	e000c004 	.word	0xe000c004
    1910:	e000c000 	.word	0xe000c000
    1914:	e000c008 	.word	0xe000c008

00001918 <UARTPutch>:
** parameters:			portNum, charactor
** Returned value:		None
** 
*****************************************************************************/
void UARTPutch( DWORD portNum, BYTE charactor)
{
    1918:	b500      	push	{lr}
	if ( portNum == 0 )
    191a:	2800      	cmp	r0, #0
    191c:	d108      	bne.n	1930 <UARTPutch+0x18>
		if (charactor== '\n') {
		while (!(U0LSR & 0x20));
		U0THR = '\r';
		}
*/
		while (!(U0LSR & 0x20));
    191e:	4808      	ldr	r0, [pc, #32]	; (1940 <UARTPutch+0x28>)
    1920:	2220      	movs	r2, #32
    1922:	6803      	ldr	r3, [r0, #0]
    1924:	4213      	tst	r3, r2
    1926:	d0fc      	beq.n	1922 <UARTPutch+0xa>
		U0THR = charactor;
    1928:	4806      	ldr	r0, [pc, #24]	; (1944 <UARTPutch+0x2c>)
    192a:	6001      	str	r1, [r0, #0]
		while (!(U1LSR & 0x20));
		U1THR = charactor;
#endif
	}
    return;
}
    192c:	bc01      	pop	{r0}
    192e:	4700      	bx	r0
		if (charactor== '\n') {
		while (!(U1LSR & 0x20));
		U1THR = '\r';
		}
*/
		while (!(U1LSR & 0x20));
    1930:	4805      	ldr	r0, [pc, #20]	; (1948 <UARTPutch+0x30>)
    1932:	2220      	movs	r2, #32
    1934:	6803      	ldr	r3, [r0, #0]
    1936:	4213      	tst	r3, r2
    1938:	d0fc      	beq.n	1934 <UARTPutch+0x1c>
		U1THR = charactor;
    193a:	4a04      	ldr	r2, [pc, #16]	; (194c <UARTPutch+0x34>)
    193c:	6011      	str	r1, [r2, #0]
    193e:	e7f5      	b.n	192c <UARTPutch+0x14>
    1940:	e000c014 	.word	0xe000c014
    1944:	e000c000 	.word	0xe000c000
    1948:	e0010014 	.word	0xe0010014
    194c:	e0010000 	.word	0xe0010000

00001950 <UARTGetch>:
** parameters:			portNum, charactor
** Returned value:		None
** 
*****************************************************************************/
char UARTGetch (DWORD portNum)
{
    1950:	b500      	push	{lr}
#ifdef BUFFERING_UART
    int c;
#endif
	if ( portNum == 0 )
    1952:	2800      	cmp	r0, #0
    1954:	d10a      	bne.n	196c <UARTGetch+0x1c>
		}
		else {
			return FALSE;
		}
#else
		while (!(U0LSR & 0x01));
    1956:	490a      	ldr	r1, [pc, #40]	; (1980 <UARTGetch+0x30>)
    1958:	2201      	movs	r2, #1
    195a:	680b      	ldr	r3, [r1, #0]
    195c:	4213      	tst	r3, r2
    195e:	d0fc      	beq.n	195a <UARTGetch+0xa>
		return (U0RBR);
    1960:	4a08      	ldr	r2, [pc, #32]	; (1984 <UARTGetch+0x34>)
    1962:	6811      	ldr	r1, [r2, #0]
    1964:	0608      	lsls	r0, r1, #24
    1966:	0e00      	lsrs	r0, r0, #24
#else
		while (!(U1LSR & 0x01));
		return (U1RBR);
#endif
	}
}
    1968:	bc02      	pop	{r1}
    196a:	4708      	bx	r1
		}
		else {
			return FALSE;
		}
#else
		while (!(U1LSR & 0x01));
    196c:	4906      	ldr	r1, [pc, #24]	; (1988 <UARTGetch+0x38>)
    196e:	2201      	movs	r2, #1
    1970:	680b      	ldr	r3, [r1, #0]
    1972:	4213      	tst	r3, r2
    1974:	d0fc      	beq.n	1970 <UARTGetch+0x20>
		return (U1RBR);
    1976:	4a05      	ldr	r2, [pc, #20]	; (198c <UARTGetch+0x3c>)
    1978:	6811      	ldr	r1, [r2, #0]
    197a:	0608      	lsls	r0, r1, #24
    197c:	0e00      	lsrs	r0, r0, #24
    197e:	e7f3      	b.n	1968 <UARTGetch+0x18>
    1980:	e000c014 	.word	0xe000c014
    1984:	e000c000 	.word	0xe000c000
    1988:	e0010014 	.word	0xe0010014
    198c:	e0010000 	.word	0xe0010000

00001990 <GPIOInit>:
**                  regular GPIO, direction, Mask
** Returned value:  None
**
*****************************************************************************/
void GPIOInit( DWORD PortNum, DWORD PortType, DWORD PortDir, DWORD Mask )
{
    1990:	b530      	push	{r4, r5, lr}
	if ( (PortType == REGULAR_PORT) && ((PortNum == 0) || (PortNum == 1)) )
    1992:	2501      	movs	r5, #1
    1994:	2400      	movs	r4, #0
    1996:	4285      	cmp	r5, r0
    1998:	4164      	adcs	r4, r4
    199a:	2902      	cmp	r1, #2
    199c:	d110      	bne.n	19c0 <GPIOInit+0x30>
    199e:	2c00      	cmp	r4, #0
    19a0:	d00e      	beq.n	19c0 <GPIOInit+0x30>
	{
		SCS &= ~GPIOM;    /* set GPIOx to use regular I/O */
    19a2:	4917      	ldr	r1, [pc, #92]	; (1a00 <GPIOInit+0x70>)
    19a4:	680c      	ldr	r4, [r1, #0]
    19a6:	43ac      	bics	r4, r5
    19a8:	600c      	str	r4, [r1, #0]
		if ( PortDir == DIR_OUT )
    19aa:	42aa      	cmp	r2, r5
    19ac:	d015      	beq.n	19da <GPIOInit+0x4a>
				+ PortNum * REGULAR_PORT_DIR_INDEX)) |= Mask;
		}
		else
		{
			(*(volatile unsigned long *)(REGULAR_PORT_DIR_BASE
				+ PortNum * REGULAR_PORT_DIR_INDEX)) &= ~Mask;
    19ae:	4a15      	ldr	r2, [pc, #84]	; (1a04 <GPIOInit+0x74>)
    19b0:	0105      	lsls	r5, r0, #4
    19b2:	18ac      	adds	r4, r5, r2
    19b4:	6820      	ldr	r0, [r4, #0]
    19b6:	4398      	bics	r0, r3
    19b8:	6020      	str	r0, [r4, #0]
			(*(volatile unsigned long *)(HS_PORT_DIR_BASE
				+ PortNum * HS_PORT_DIR_INDEX)) &= ~Mask;
		}
	}
	return;
}
    19ba:	bc30      	pop	{r4, r5}
    19bc:	bc01      	pop	{r0}
    19be:	4700      	bx	r0
		{
			(*(volatile unsigned long *)(REGULAR_PORT_DIR_BASE
				+ PortNum * REGULAR_PORT_DIR_INDEX)) &= ~Mask;
		}
	}
	else if ( PortType == FAST_PORT )
    19c0:	2901      	cmp	r1, #1
    19c2:	d1fa      	bne.n	19ba <GPIOInit+0x2a>
	{
		if ( (PortNum == 0) || (PortNum == 1) )
    19c4:	2c00      	cmp	r4, #0
    19c6:	d10f      	bne.n	19e8 <GPIOInit+0x58>
		{
			SCS |= GPIOM; /* set GPIOx to use Fast I/O */
		}
		if ( PortDir == DIR_OUT )
    19c8:	2a01      	cmp	r2, #1
    19ca:	d012      	beq.n	19f2 <GPIOInit+0x62>
				+ PortNum * HS_PORT_DIR_INDEX)) |= Mask;
		}
		else
		{
			(*(volatile unsigned long *)(HS_PORT_DIR_BASE
				+ PortNum * HS_PORT_DIR_INDEX)) &= ~Mask;
    19cc:	4a0e      	ldr	r2, [pc, #56]	; (1a08 <GPIOInit+0x78>)
    19ce:	1880      	adds	r0, r0, r2
    19d0:	0145      	lsls	r5, r0, #5
    19d2:	6829      	ldr	r1, [r5, #0]
    19d4:	4399      	bics	r1, r3
    19d6:	6029      	str	r1, [r5, #0]
    19d8:	e7ef      	b.n	19ba <GPIOInit+0x2a>
	{
		SCS &= ~GPIOM;    /* set GPIOx to use regular I/O */
		if ( PortDir == DIR_OUT )
		{
			(*(volatile unsigned long *)(REGULAR_PORT_DIR_BASE
				+ PortNum * REGULAR_PORT_DIR_INDEX)) |= Mask;
    19da:	490a      	ldr	r1, [pc, #40]	; (1a04 <GPIOInit+0x74>)
    19dc:	0105      	lsls	r5, r0, #4
    19de:	1868      	adds	r0, r5, r1
    19e0:	6802      	ldr	r2, [r0, #0]
    19e2:	4313      	orrs	r3, r2
    19e4:	6003      	str	r3, [r0, #0]
    19e6:	e7e8      	b.n	19ba <GPIOInit+0x2a>
	}
	else if ( PortType == FAST_PORT )
	{
		if ( (PortNum == 0) || (PortNum == 1) )
		{
			SCS |= GPIOM; /* set GPIOx to use Fast I/O */
    19e8:	4c05      	ldr	r4, [pc, #20]	; (1a00 <GPIOInit+0x70>)
    19ea:	6825      	ldr	r5, [r4, #0]
    19ec:	4329      	orrs	r1, r5
    19ee:	6021      	str	r1, [r4, #0]
    19f0:	e7ea      	b.n	19c8 <GPIOInit+0x38>
		}
		if ( PortDir == DIR_OUT )
		{
			(*(volatile unsigned long *)(HS_PORT_DIR_BASE
				+ PortNum * HS_PORT_DIR_INDEX)) |= Mask;
    19f2:	4c05      	ldr	r4, [pc, #20]	; (1a08 <GPIOInit+0x78>)
    19f4:	1902      	adds	r2, r0, r4
    19f6:	0151      	lsls	r1, r2, #5
    19f8:	6808      	ldr	r0, [r1, #0]
    19fa:	4303      	orrs	r3, r0
    19fc:	600b      	str	r3, [r1, #0]
    19fe:	e7dc      	b.n	19ba <GPIOInit+0x2a>
    1a00:	e01fc1a0 	.word	0xe01fc1a0
    1a04:	e0028008 	.word	0xe0028008
    1a08:	01fffe00 	.word	0x01fffe00

00001a0c <__NOP>:
/*-----------------------------------------
		   Common Basis Functions
-------------------------------------------*/
inline void __NOP(void)
{
	__asm__ __volatile__("nop"); 
    1a0c:	46c0      	nop			; (mov r8, r8)
}
    1a0e:	4770      	bx	lr

00001a10 <time_waste>:

void time_waste(volatile uint32_t dv)
{
    1a10:	b500      	push	{lr}
    1a12:	b085      	sub	sp, #20
    1a14:	9001      	str	r0, [sp, #4]
	volatile uint32_t cnt;
	for (cnt=0; cnt<dv ; cnt++ ) { ; }
    1a16:	2000      	movs	r0, #0
    1a18:	9003      	str	r0, [sp, #12]
    1a1a:	9a03      	ldr	r2, [sp, #12]
    1a1c:	9b01      	ldr	r3, [sp, #4]
    1a1e:	429a      	cmp	r2, r3
    1a20:	d206      	bcs.n	1a30 <time_waste+0x20>
    1a22:	9a03      	ldr	r2, [sp, #12]
    1a24:	3201      	adds	r2, #1
    1a26:	9203      	str	r2, [sp, #12]
    1a28:	9903      	ldr	r1, [sp, #12]
    1a2a:	9b01      	ldr	r3, [sp, #4]
    1a2c:	4299      	cmp	r1, r3
    1a2e:	d3f8      	bcc.n	1a22 <time_waste+0x12>
}
    1a30:	b005      	add	sp, #20
    1a32:	bc01      	pop	{r0}
    1a34:	4700      	bx	r0
    1a36:	46c0      	nop			; (mov r8, r8)

00001a38 <_delay_us>:

void _delay_us(volatile uint32_t us)
{
    1a38:	b500      	push	{lr}
    1a3a:	b083      	sub	sp, #12
    1a3c:	9001      	str	r0, [sp, #4]
    1a3e:	e005      	b.n	1a4c <_delay_us+0x14>
/*-----------------------------------------
		   Common Basis Functions
-------------------------------------------*/
inline void __NOP(void)
{
	__asm__ __volatile__("nop"); 
    1a40:	46c0      	nop			; (mov r8, r8)
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	46c0      	nop			; (mov r8, r8)
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	46c0      	nop			; (mov r8, r8)
    1a4a:	46c0      	nop			; (mov r8, r8)
	for (cnt=0; cnt<dv ; cnt++ ) { ; }
}

void _delay_us(volatile uint32_t us)
{
	while(--us) { __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();}
    1a4c:	9801      	ldr	r0, [sp, #4]
    1a4e:	3801      	subs	r0, #1
    1a50:	9001      	str	r0, [sp, #4]
    1a52:	9b01      	ldr	r3, [sp, #4]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d1f3      	bne.n	1a40 <_delay_us+0x8>
}
    1a58:	b003      	add	sp, #12
    1a5a:	bc01      	pop	{r0}
    1a5c:	4700      	bx	r0
    1a5e:	46c0      	nop			; (mov r8, r8)

00001a60 <dump>:

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
{
    1a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a62:	465f      	mov	r7, fp
    1a64:	4656      	mov	r6, sl
    1a66:	464d      	mov	r5, r9
    1a68:	4644      	mov	r4, r8
    1a6a:	b4f0      	push	{r4, r5, r6, r7}
    1a6c:	b087      	sub	sp, #28
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
    1a6e:	090a      	lsrs	r2, r1, #4

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
{
    1a70:	1c04      	adds	r4, r0, #0
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
    1a72:	9201      	str	r2, [sp, #4]
    1a74:	070b      	lsls	r3, r1, #28
    1a76:	d001      	beq.n	1a7c <dump+0x1c>
    1a78:	3201      	adds	r2, #1
    1a7a:	9201      	str	r2, [sp, #4]
	DBG_print("\n");
    1a7c:	200a      	movs	r0, #10
    1a7e:	f003 feef 	bl	5860 <putchar>
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
    1a82:	9a01      	ldr	r2, [sp, #4]
    1a84:	2a00      	cmp	r2, #0
    1a86:	dc00      	bgt.n	1a8a <dump+0x2a>
    1a88:	e0f9      	b.n	1c7e <dump+0x21e>
    1a8a:	2300      	movs	r3, #0
    1a8c:	4ab9      	ldr	r2, [pc, #740]	; (1d74 <dump+0x314>)
    1a8e:	9300      	str	r3, [sp, #0]
#endif

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
    1a90:	3318      	adds	r3, #24
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
    1a92:	46a0      	mov	r8, r4
    1a94:	4691      	mov	r9, r2
#endif

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
    1a96:	446b      	add	r3, sp
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1a98:	222e      	movs	r2, #46	; 0x2e
    1a9a:	4cb7      	ldr	r4, [pc, #732]	; (1d78 <dump+0x318>)
    1a9c:	af02      	add	r7, sp, #8
#endif

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
    1a9e:	469a      	mov	sl, r3
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1aa0:	4693      	mov	fp, r2
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
    1aa2:	4641      	mov	r1, r8
    1aa4:	48b5      	ldr	r0, [pc, #724]	; (1d7c <dump+0x31c>)
    1aa6:	f003 fec1 	bl	582c <printf>
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
    1aaa:	4643      	mov	r3, r8
    1aac:	7819      	ldrb	r1, [r3, #0]
    1aae:	4648      	mov	r0, r9
    1ab0:	7039      	strb	r1, [r7, #0]
    1ab2:	f003 febb 	bl	582c <printf>
    1ab6:	4642      	mov	r2, r8
    1ab8:	7851      	ldrb	r1, [r2, #1]
    1aba:	4648      	mov	r0, r9
    1abc:	7079      	strb	r1, [r7, #1]
    1abe:	f003 feb5 	bl	582c <printf>
    1ac2:	4643      	mov	r3, r8
    1ac4:	7899      	ldrb	r1, [r3, #2]
    1ac6:	4648      	mov	r0, r9
    1ac8:	70b9      	strb	r1, [r7, #2]
    1aca:	f003 feaf 	bl	582c <printf>
    1ace:	4642      	mov	r2, r8
    1ad0:	78d1      	ldrb	r1, [r2, #3]
    1ad2:	4648      	mov	r0, r9
    1ad4:	70f9      	strb	r1, [r7, #3]
    1ad6:	f003 fea9 	bl	582c <printf>
    1ada:	4643      	mov	r3, r8
    1adc:	7919      	ldrb	r1, [r3, #4]
    1ade:	4648      	mov	r0, r9
    1ae0:	7139      	strb	r1, [r7, #4]
    1ae2:	f003 fea3 	bl	582c <printf>
    1ae6:	4642      	mov	r2, r8
    1ae8:	7951      	ldrb	r1, [r2, #5]
    1aea:	4648      	mov	r0, r9
    1aec:	7179      	strb	r1, [r7, #5]
    1aee:	f003 fe9d 	bl	582c <printf>
    1af2:	4643      	mov	r3, r8
    1af4:	7999      	ldrb	r1, [r3, #6]
    1af6:	4648      	mov	r0, r9
    1af8:	71b9      	strb	r1, [r7, #6]
    1afa:	f003 fe97 	bl	582c <printf>
    1afe:	4642      	mov	r2, r8
    1b00:	79d1      	ldrb	r1, [r2, #7]
    1b02:	4648      	mov	r0, r9
    1b04:	71f9      	strb	r1, [r7, #7]
    1b06:	f003 fe91 	bl	582c <printf>
    1b0a:	4643      	mov	r3, r8
    1b0c:	7a19      	ldrb	r1, [r3, #8]
    1b0e:	4648      	mov	r0, r9
    1b10:	7239      	strb	r1, [r7, #8]
    1b12:	f003 fe8b 	bl	582c <printf>
    1b16:	4642      	mov	r2, r8
    1b18:	7a51      	ldrb	r1, [r2, #9]
    1b1a:	4648      	mov	r0, r9
    1b1c:	7279      	strb	r1, [r7, #9]
    1b1e:	f003 fe85 	bl	582c <printf>
    1b22:	4643      	mov	r3, r8
    1b24:	7a99      	ldrb	r1, [r3, #10]
    1b26:	4648      	mov	r0, r9
    1b28:	72b9      	strb	r1, [r7, #10]
    1b2a:	f003 fe7f 	bl	582c <printf>
    1b2e:	4642      	mov	r2, r8
    1b30:	7ad1      	ldrb	r1, [r2, #11]
    1b32:	4648      	mov	r0, r9
    1b34:	72f9      	strb	r1, [r7, #11]
    1b36:	f003 fe79 	bl	582c <printf>
    1b3a:	4643      	mov	r3, r8
    1b3c:	7b19      	ldrb	r1, [r3, #12]
    1b3e:	4648      	mov	r0, r9
    1b40:	7339      	strb	r1, [r7, #12]
    1b42:	f003 fe73 	bl	582c <printf>
    1b46:	4642      	mov	r2, r8
    1b48:	7b51      	ldrb	r1, [r2, #13]
    1b4a:	4648      	mov	r0, r9
    1b4c:	7379      	strb	r1, [r7, #13]
    1b4e:	f003 fe6d 	bl	582c <printf>
    1b52:	4643      	mov	r3, r8
    1b54:	7b99      	ldrb	r1, [r3, #14]
    1b56:	4648      	mov	r0, r9
    1b58:	73b9      	strb	r1, [r7, #14]
    1b5a:	f003 fe67 	bl	582c <printf>
    1b5e:	4642      	mov	r2, r8
    1b60:	7bd1      	ldrb	r1, [r2, #15]
    1b62:	4648      	mov	r0, r9
    1b64:	73f9      	strb	r1, [r7, #15]
    1b66:	f003 fe61 	bl	582c <printf>
    1b6a:	2010      	movs	r0, #16
    1b6c:	4480      	add	r8, r0
		DBG_putch(' ');
    1b6e:	6820      	ldr	r0, [r4, #0]
    1b70:	6882      	ldr	r2, [r0, #8]
    1b72:	6893      	ldr	r3, [r2, #8]
    1b74:	3b01      	subs	r3, #1
    1b76:	6093      	str	r3, [r2, #8]
    1b78:	2b00      	cmp	r3, #0
    1b7a:	da00      	bge.n	1b7e <dump+0x11e>
    1b7c:	e0c4      	b.n	1d08 <dump+0x2a8>
    1b7e:	6812      	ldr	r2, [r2, #0]
    1b80:	2020      	movs	r0, #32
    1b82:	7010      	strb	r0, [r2, #0]
    1b84:	6820      	ldr	r0, [r4, #0]
    1b86:	6882      	ldr	r2, [r0, #8]
    1b88:	6811      	ldr	r1, [r2, #0]
    1b8a:	3101      	adds	r1, #1
    1b8c:	6011      	str	r1, [r2, #0]
    1b8e:	2301      	movs	r3, #1
    1b90:	1c3d      	adds	r5, r7, #0
    1b92:	43bb      	bics	r3, r7
    1b94:	d040      	beq.n	1c18 <dump+0x1b8>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1b96:	7839      	ldrb	r1, [r7, #0]
    1b98:	1c0b      	adds	r3, r1, #0
    1b9a:	3b20      	subs	r3, #32
    1b9c:	061d      	lsls	r5, r3, #24
    1b9e:	0e2e      	lsrs	r6, r5, #24
    1ba0:	2e5f      	cmp	r6, #95	; 0x5f
    1ba2:	d800      	bhi.n	1ba6 <dump+0x146>
    1ba4:	e0a0      	b.n	1ce8 <dump+0x288>
    1ba6:	6893      	ldr	r3, [r2, #8]
    1ba8:	3b01      	subs	r3, #1
    1baa:	6093      	str	r3, [r2, #8]
    1bac:	2b00      	cmp	r3, #0
    1bae:	da00      	bge.n	1bb2 <dump+0x152>
    1bb0:	e0c7      	b.n	1d42 <dump+0x2e2>
    1bb2:	6812      	ldr	r2, [r2, #0]
    1bb4:	4658      	mov	r0, fp
    1bb6:	7010      	strb	r0, [r2, #0]
    1bb8:	6821      	ldr	r1, [r4, #0]
    1bba:	688a      	ldr	r2, [r1, #8]
    1bbc:	6810      	ldr	r0, [r2, #0]
    1bbe:	3001      	adds	r0, #1
    1bc0:	6010      	str	r0, [r2, #0]
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1bc2:	6820      	ldr	r0, [r4, #0]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1bc4:	1c7d      	adds	r5, r7, #1
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1bc6:	6882      	ldr	r2, [r0, #8]
    1bc8:	e026      	b.n	1c18 <dump+0x1b8>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1bca:	6893      	ldr	r3, [r2, #8]
    1bcc:	3b01      	subs	r3, #1
    1bce:	6093      	str	r3, [r2, #8]
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	db3a      	blt.n	1c4a <dump+0x1ea>
    1bd4:	6812      	ldr	r2, [r2, #0]
    1bd6:	7011      	strb	r1, [r2, #0]
    1bd8:	6823      	ldr	r3, [r4, #0]
    1bda:	689e      	ldr	r6, [r3, #8]
    1bdc:	6831      	ldr	r1, [r6, #0]
    1bde:	3101      	adds	r1, #1
    1be0:	6031      	str	r1, [r6, #0]
    1be2:	1c6e      	adds	r6, r5, #1
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
    1be4:	45b2      	cmp	sl, r6
    1be6:	d040      	beq.n	1c6a <dump+0x20a>
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1be8:	7869      	ldrb	r1, [r5, #1]
    1bea:	1c0d      	adds	r5, r1, #0
    1bec:	3d20      	subs	r5, #32
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1bee:	6820      	ldr	r0, [r4, #0]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1bf0:	062b      	lsls	r3, r5, #24
    1bf2:	0e1d      	lsrs	r5, r3, #24
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1bf4:	6882      	ldr	r2, [r0, #8]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1bf6:	2d5f      	cmp	r5, #95	; 0x5f
    1bf8:	d81e      	bhi.n	1c38 <dump+0x1d8>
    1bfa:	6893      	ldr	r3, [r2, #8]
    1bfc:	3b01      	subs	r3, #1
    1bfe:	6093      	str	r3, [r2, #8]
    1c00:	2b00      	cmp	r3, #0
    1c02:	db63      	blt.n	1ccc <dump+0x26c>
    1c04:	6810      	ldr	r0, [r2, #0]
    1c06:	7001      	strb	r1, [r0, #0]
    1c08:	6822      	ldr	r2, [r4, #0]
    1c0a:	6893      	ldr	r3, [r2, #8]
    1c0c:	6819      	ldr	r1, [r3, #0]
    1c0e:	3101      	adds	r1, #1
    1c10:	6019      	str	r1, [r3, #0]
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1c12:	6820      	ldr	r0, [r4, #0]
    1c14:	6882      	ldr	r2, [r0, #8]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1c16:	1c75      	adds	r5, r6, #1
    1c18:	7829      	ldrb	r1, [r5, #0]
    1c1a:	1c0e      	adds	r6, r1, #0
    1c1c:	3e20      	subs	r6, #32
    1c1e:	0633      	lsls	r3, r6, #24
    1c20:	0e1e      	lsrs	r6, r3, #24
    1c22:	2e5f      	cmp	r6, #95	; 0x5f
    1c24:	d9d1      	bls.n	1bca <dump+0x16a>
    1c26:	6893      	ldr	r3, [r2, #8]
    1c28:	3b01      	subs	r3, #1
    1c2a:	6093      	str	r3, [r2, #8]
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	db2f      	blt.n	1c90 <dump+0x230>
    1c30:	6812      	ldr	r2, [r2, #0]
    1c32:	4658      	mov	r0, fp
    1c34:	7010      	strb	r0, [r2, #0]
    1c36:	e7cf      	b.n	1bd8 <dump+0x178>
    1c38:	6893      	ldr	r3, [r2, #8]
    1c3a:	3b01      	subs	r3, #1
    1c3c:	6093      	str	r3, [r2, #8]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	db35      	blt.n	1cae <dump+0x24e>
    1c42:	6813      	ldr	r3, [r2, #0]
    1c44:	4658      	mov	r0, fp
    1c46:	7018      	strb	r0, [r3, #0]
    1c48:	e7de      	b.n	1c08 <dump+0x1a8>
    1c4a:	6996      	ldr	r6, [r2, #24]
    1c4c:	42b3      	cmp	r3, r6
    1c4e:	db2b      	blt.n	1ca8 <dump+0x248>
    1c50:	6810      	ldr	r0, [r2, #0]
    1c52:	7001      	strb	r1, [r0, #0]
    1c54:	6820      	ldr	r0, [r4, #0]
    1c56:	6882      	ldr	r2, [r0, #8]
    1c58:	6813      	ldr	r3, [r2, #0]
    1c5a:	7819      	ldrb	r1, [r3, #0]
    1c5c:	290a      	cmp	r1, #10
    1c5e:	d023      	beq.n	1ca8 <dump+0x248>
    1c60:	3301      	adds	r3, #1
    1c62:	1c6e      	adds	r6, r5, #1
    1c64:	6013      	str	r3, [r2, #0]
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
    1c66:	45b2      	cmp	sl, r6
    1c68:	d1be      	bne.n	1be8 <dump+0x188>
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
		}
        DBG_print("\n");
    1c6a:	200a      	movs	r0, #10
    1c6c:	f003 fdf8 	bl	5860 <putchar>
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
    1c70:	9b00      	ldr	r3, [sp, #0]
    1c72:	9d01      	ldr	r5, [sp, #4]
    1c74:	3301      	adds	r3, #1
    1c76:	9300      	str	r3, [sp, #0]
    1c78:	429d      	cmp	r5, r3
    1c7a:	dd00      	ble.n	1c7e <dump+0x21e>
    1c7c:	e711      	b.n	1aa2 <dump+0x42>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
		}
        DBG_print("\n");
	}
}
    1c7e:	b007      	add	sp, #28
    1c80:	bc3c      	pop	{r2, r3, r4, r5}
    1c82:	4690      	mov	r8, r2
    1c84:	4699      	mov	r9, r3
    1c86:	46a2      	mov	sl, r4
    1c88:	46ab      	mov	fp, r5
    1c8a:	bcf0      	pop	{r4, r5, r6, r7}
    1c8c:	bc01      	pop	{r0}
    1c8e:	4700      	bx	r0
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1c90:	6991      	ldr	r1, [r2, #24]
    1c92:	428b      	cmp	r3, r1
    1c94:	db30      	blt.n	1cf8 <dump+0x298>
    1c96:	6813      	ldr	r3, [r2, #0]
    1c98:	465e      	mov	r6, fp
    1c9a:	701e      	strb	r6, [r3, #0]
    1c9c:	6820      	ldr	r0, [r4, #0]
    1c9e:	6882      	ldr	r2, [r0, #8]
    1ca0:	6813      	ldr	r3, [r2, #0]
    1ca2:	7819      	ldrb	r1, [r3, #0]
    1ca4:	290a      	cmp	r1, #10
    1ca6:	d1db      	bne.n	1c60 <dump+0x200>
    1ca8:	f006 fdce 	bl	8848 <__swbuf_r>
    1cac:	e799      	b.n	1be2 <dump+0x182>
    1cae:	6991      	ldr	r1, [r2, #24]
    1cb0:	428b      	cmp	r3, r1
    1cb2:	db25      	blt.n	1d00 <dump+0x2a0>
    1cb4:	6815      	ldr	r5, [r2, #0]
    1cb6:	465a      	mov	r2, fp
    1cb8:	702a      	strb	r2, [r5, #0]
    1cba:	6820      	ldr	r0, [r4, #0]
    1cbc:	6882      	ldr	r2, [r0, #8]
    1cbe:	6813      	ldr	r3, [r2, #0]
    1cc0:	7819      	ldrb	r1, [r3, #0]
    1cc2:	290a      	cmp	r1, #10
    1cc4:	d00d      	beq.n	1ce2 <dump+0x282>
    1cc6:	3301      	adds	r3, #1
    1cc8:	6013      	str	r3, [r2, #0]
    1cca:	e7a2      	b.n	1c12 <dump+0x1b2>
    1ccc:	6995      	ldr	r5, [r2, #24]
    1cce:	42ab      	cmp	r3, r5
    1cd0:	db07      	blt.n	1ce2 <dump+0x282>
    1cd2:	6810      	ldr	r0, [r2, #0]
    1cd4:	7001      	strb	r1, [r0, #0]
    1cd6:	6820      	ldr	r0, [r4, #0]
    1cd8:	6882      	ldr	r2, [r0, #8]
    1cda:	6813      	ldr	r3, [r2, #0]
    1cdc:	7819      	ldrb	r1, [r3, #0]
    1cde:	290a      	cmp	r1, #10
    1ce0:	d1f1      	bne.n	1cc6 <dump+0x266>
    1ce2:	f006 fdb1 	bl	8848 <__swbuf_r>
    1ce6:	e794      	b.n	1c12 <dump+0x1b2>
    1ce8:	6893      	ldr	r3, [r2, #8]
    1cea:	3b01      	subs	r3, #1
    1cec:	6093      	str	r3, [r2, #8]
    1cee:	2b00      	cmp	r3, #0
    1cf0:	db19      	blt.n	1d26 <dump+0x2c6>
    1cf2:	6813      	ldr	r3, [r2, #0]
    1cf4:	7019      	strb	r1, [r3, #0]
    1cf6:	e75f      	b.n	1bb8 <dump+0x158>
    1cf8:	212e      	movs	r1, #46	; 0x2e
    1cfa:	f006 fda5 	bl	8848 <__swbuf_r>
    1cfe:	e770      	b.n	1be2 <dump+0x182>
    1d00:	212e      	movs	r1, #46	; 0x2e
    1d02:	f006 fda1 	bl	8848 <__swbuf_r>
    1d06:	e784      	b.n	1c12 <dump+0x1b2>
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1d08:	6991      	ldr	r1, [r2, #24]
    1d0a:	428b      	cmp	r3, r1
    1d0c:	db28      	blt.n	1d60 <dump+0x300>
    1d0e:	6816      	ldr	r6, [r2, #0]
    1d10:	2520      	movs	r5, #32
    1d12:	7035      	strb	r5, [r6, #0]
    1d14:	6820      	ldr	r0, [r4, #0]
    1d16:	6882      	ldr	r2, [r0, #8]
    1d18:	6813      	ldr	r3, [r2, #0]
    1d1a:	7819      	ldrb	r1, [r3, #0]
    1d1c:	290a      	cmp	r1, #10
    1d1e:	d020      	beq.n	1d62 <dump+0x302>
    1d20:	3301      	adds	r3, #1
    1d22:	6013      	str	r3, [r2, #0]
    1d24:	e733      	b.n	1b8e <dump+0x12e>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1d26:	6995      	ldr	r5, [r2, #24]
    1d28:	42ab      	cmp	r3, r5
    1d2a:	db16      	blt.n	1d5a <dump+0x2fa>
    1d2c:	6816      	ldr	r6, [r2, #0]
    1d2e:	7031      	strb	r1, [r6, #0]
    1d30:	6820      	ldr	r0, [r4, #0]
    1d32:	6882      	ldr	r2, [r0, #8]
    1d34:	6813      	ldr	r3, [r2, #0]
    1d36:	7819      	ldrb	r1, [r3, #0]
    1d38:	290a      	cmp	r1, #10
    1d3a:	d00e      	beq.n	1d5a <dump+0x2fa>
    1d3c:	3301      	adds	r3, #1
    1d3e:	6013      	str	r3, [r2, #0]
    1d40:	e73f      	b.n	1bc2 <dump+0x162>
    1d42:	6991      	ldr	r1, [r2, #24]
    1d44:	428b      	cmp	r3, r1
    1d46:	db11      	blt.n	1d6c <dump+0x30c>
    1d48:	6815      	ldr	r5, [r2, #0]
    1d4a:	465e      	mov	r6, fp
    1d4c:	702e      	strb	r6, [r5, #0]
    1d4e:	6820      	ldr	r0, [r4, #0]
    1d50:	6882      	ldr	r2, [r0, #8]
    1d52:	6813      	ldr	r3, [r2, #0]
    1d54:	7819      	ldrb	r1, [r3, #0]
    1d56:	290a      	cmp	r1, #10
    1d58:	d1f0      	bne.n	1d3c <dump+0x2dc>
    1d5a:	f006 fd75 	bl	8848 <__swbuf_r>
    1d5e:	e730      	b.n	1bc2 <dump+0x162>
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1d60:	2120      	movs	r1, #32
    1d62:	f006 fd71 	bl	8848 <__swbuf_r>
    1d66:	6820      	ldr	r0, [r4, #0]
    1d68:	6882      	ldr	r2, [r0, #8]
    1d6a:	e710      	b.n	1b8e <dump+0x12e>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1d6c:	212e      	movs	r1, #46	; 0x2e
    1d6e:	f006 fd6b 	bl	8848 <__swbuf_r>
    1d72:	e726      	b.n	1bc2 <dump+0x162>
    1d74:	0000ece4 	.word	0x0000ece4
    1d78:	40000000 	.word	0x40000000
    1d7c:	0000ecdc 	.word	0x0000ecdc

00001d80 <TargetInit>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void TargetInit(void)
{
    1d80:	b508      	push	{r3, lr}
    /* Add your codes here */
    i2enable();
    1d82:	f00c f9b3 	bl	e0ec <__i2enable_from_thumb>
    PCONP |= 0x00001000;
    1d86:	4b04      	ldr	r3, [pc, #16]	; (1d98 <TargetInit+0x18>)
    1d88:	2080      	movs	r0, #128	; 0x80
    1d8a:	6819      	ldr	r1, [r3, #0]
    1d8c:	0142      	lsls	r2, r0, #5
    1d8e:	430a      	orrs	r2, r1
    1d90:	601a      	str	r2, [r3, #0]
    return;
}
    1d92:	bc08      	pop	{r3}
    1d94:	bc01      	pop	{r0}
    1d96:	4700      	bx	r0
    1d98:	e01fc0c4 	.word	0xe01fc0c4

00001d9c <GPIOResetInit>:
** 
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    1d9c:	4b1c      	ldr	r3, [pc, #112]	; (1e10 <GPIOResetInit+0x74>)
    1d9e:	4a1d      	ldr	r2, [pc, #116]	; (1e14 <GPIOResetInit+0x78>)
    PINSEL1 = 0x00154000;
    1da0:	21aa      	movs	r1, #170	; 0xaa
** 
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    1da2:	601a      	str	r2, [r3, #0]
    PINSEL1 = 0x00154000;
    1da4:	0348      	lsls	r0, r1, #13
    PINSEL2 = 0x00000000;
    PINSEL3 = 0xF0000000;
    1da6:	22f0      	movs	r2, #240	; 0xf0
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    1da8:	6058      	str	r0, [r3, #4]
    PINSEL2 = 0x00000000;
    PINSEL3 = 0xF0000000;
    1daa:	0611      	lsls	r1, r2, #24
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    PINSEL2 = 0x00000000;
    1dac:	481a      	ldr	r0, [pc, #104]	; (1e18 <GPIOResetInit+0x7c>)
    PINSEL7 = 0x00000000;
    PINSEL8 = 0x00000000;
    PINSEL9 = 0x00000000;
   PINSEL10 = 0x00000000;
    
     IODIR0 = 0x00000000;
    1dae:	4a1b      	ldr	r2, [pc, #108]	; (1e1c <GPIOResetInit+0x80>)
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    PINSEL2 = 0x00000000;
    1db0:	2300      	movs	r3, #0
    1db2:	6003      	str	r3, [r0, #0]
    PINSEL3 = 0xF0000000;
    1db4:	6041      	str	r1, [r0, #4]
    PINSEL4 = 0x00000000;
    1db6:	6083      	str	r3, [r0, #8]
    PINSEL5 = 0x00000000;
    1db8:	60c3      	str	r3, [r0, #12]
    PINSEL6 = 0x00000000;
    1dba:	6103      	str	r3, [r0, #16]
    PINSEL7 = 0x00000000;
    1dbc:	6143      	str	r3, [r0, #20]
    PINSEL8 = 0x00000000;
    1dbe:	6183      	str	r3, [r0, #24]
    PINSEL9 = 0x00000000;
    1dc0:	61c3      	str	r3, [r0, #28]
   PINSEL10 = 0x00000000;
    1dc2:	6203      	str	r3, [r0, #32]
    
     IODIR0 = 0x00000000;
    1dc4:	6013      	str	r3, [r2, #0]
     IODIR1 = 0x00000000;
    1dc6:	6113      	str	r3, [r2, #16]
     IOSET0 = 0x00000000;
    1dc8:	3a04      	subs	r2, #4
    1dca:	6013      	str	r3, [r2, #0]
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    FIO1DIR = 0x00000000;
    FIO2DIR = 0x00000201;
    1dcc:	4814      	ldr	r0, [pc, #80]	; (1e20 <GPIOResetInit+0x84>)
   PINSEL10 = 0x00000000;
    
     IODIR0 = 0x00000000;
     IODIR1 = 0x00000000;
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    1dce:	6113      	str	r3, [r2, #16]
    
    FIO0DIR = 0x00000000;
    1dd0:	4a14      	ldr	r2, [pc, #80]	; (1e24 <GPIOResetInit+0x88>)
    FIO1DIR = 0x00000000;
    FIO2DIR = 0x00000201;
    FIO3DIR = 0x00000000;
    FIO4DIR = 0x0000FFFF;
    1dd2:	4915      	ldr	r1, [pc, #84]	; (1e28 <GPIOResetInit+0x8c>)
     IODIR0 = 0x00000000;
     IODIR1 = 0x00000000;
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    1dd4:	6013      	str	r3, [r2, #0]
    FIO1DIR = 0x00000000;
    1dd6:	6213      	str	r3, [r2, #32]
    FIO2DIR = 0x00000201;
    1dd8:	6410      	str	r0, [r2, #64]	; 0x40
    FIO3DIR = 0x00000000;
    1dda:	6613      	str	r3, [r2, #96]	; 0x60
     IODIR1 = 0x00000000;
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    FIO1DIR = 0x00000000;
    1ddc:	3220      	adds	r2, #32
    FIO2DIR = 0x00000201;
    FIO3DIR = 0x00000000;
    FIO4DIR = 0x0000FFFF;
    1dde:	6611      	str	r1, [r2, #96]	; 0x60
    
	FIO0MASK = 0x00000000;
    1de0:	3a10      	subs	r2, #16
    1de2:	6013      	str	r3, [r2, #0]
	FIO0PIN = 0x00000000;
    1de4:	6053      	str	r3, [r2, #4]
	FIO0SET = 0x00000000;
    1de6:	6093      	str	r3, [r2, #8]
	FIO0CLR = 0x00000000;
    1de8:	60d3      	str	r3, [r2, #12]
	
	FIO1MASK = 0x00000000;
    1dea:	3220      	adds	r2, #32
    1dec:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0x00000000;
    1dee:	6053      	str	r3, [r2, #4]
	FIO1SET = 0x00000000;
    1df0:	6093      	str	r3, [r2, #8]
	FIO1CLR = 0x00000000;
    1df2:	60d3      	str	r3, [r2, #12]
	
	FIO2MASK = 0x00000000;
    1df4:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0x00000000;
    1df6:	6253      	str	r3, [r2, #36]	; 0x24
	FIO2SET = 0x00000000;
    1df8:	6293      	str	r3, [r2, #40]	; 0x28
	FIO2CLR = 0x00000000;
    1dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

	FIO3MASK = 0x00000000;
    1dfc:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0x00000000;
    1dfe:	6453      	str	r3, [r2, #68]	; 0x44
	FIO3SET = 0x00000000;
    1e00:	6493      	str	r3, [r2, #72]	; 0x48
	FIO3CLR = 0x00000000;
    1e02:	64d3      	str	r3, [r2, #76]	; 0x4c
	
	FIO4MASK = 0x00000000;
    1e04:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0x00000000;
    1e06:	6653      	str	r3, [r2, #100]	; 0x64
	FIO4SET = 0x00000000;
    1e08:	6693      	str	r3, [r2, #104]	; 0x68
	FIO4CLR = 0x00000000;
    1e0a:	66d3      	str	r3, [r2, #108]	; 0x6c
	
    return;        
}
    1e0c:	4770      	bx	lr
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	e002c000 	.word	0xe002c000
    1e14:	0fa00050 	.word	0x0fa00050
    1e18:	e002c008 	.word	0xe002c008
    1e1c:	e0028008 	.word	0xe0028008
    1e20:	00000201 	.word	0x00000201
    1e24:	3fffc000 	.word	0x3fffc000
    1e28:	0000ffff 	.word	0x0000ffff

00001e2c <ConfigurePLL>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void ConfigurePLL ( void )
{
    1e2c:	b510      	push	{r4, lr}
	DWORD MValue, NValue;

	if ( PLLSTAT & (1 << 25) )
    1e2e:	4829      	ldr	r0, [pc, #164]	; (1ed4 <ConfigurePLL+0xa8>)
    1e30:	6803      	ldr	r3, [r0, #0]
    1e32:	019a      	lsls	r2, r3, #6
    1e34:	d506      	bpl.n	1e44 <ConfigurePLL+0x18>
    {
		PLLCON = 1;			/* Enable PLL, disconnected */
    1e36:	4928      	ldr	r1, [pc, #160]	; (1ed8 <ConfigurePLL+0xac>)
    1e38:	2201      	movs	r2, #1
    1e3a:	600a      	str	r2, [r1, #0]
	 	PLLFEED = 0xaa;
    1e3c:	32a9      	adds	r2, #169	; 0xa9
    1e3e:	60ca      	str	r2, [r1, #12]
		PLLFEED = 0x55;
    1e40:	3a55      	subs	r2, #85	; 0x55
    1e42:	60ca      	str	r2, [r1, #12]
    }

    PLLCON = 0;				/* Disable PLL, disconnected */
    1e44:	4b24      	ldr	r3, [pc, #144]	; (1ed8 <ConfigurePLL+0xac>)
    1e46:	2200      	movs	r2, #0
    1e48:	601a      	str	r2, [r3, #0]
    PLLFEED = 0xaa;
    1e4a:	32aa      	adds	r2, #170	; 0xaa
    1e4c:	60da      	str	r2, [r3, #12]
    PLLFEED = 0x55;
    1e4e:	3a55      	subs	r2, #85	; 0x55
    1e50:	60da      	str	r2, [r3, #12]
    
	SCS |= 0x20;			/* Enable main OSC */
    1e52:	4922      	ldr	r1, [pc, #136]	; (1edc <ConfigurePLL+0xb0>)
    1e54:	680c      	ldr	r4, [r1, #0]
    1e56:	3a35      	subs	r2, #53	; 0x35
    1e58:	4314      	orrs	r4, r2
    1e5a:	600c      	str	r4, [r1, #0]
    while( !(SCS & 0x40) );	/* Wait until main OSC is usable */
    1e5c:	3220      	adds	r2, #32
    1e5e:	6808      	ldr	r0, [r1, #0]
    1e60:	4210      	tst	r0, r2
    1e62:	d0fc      	beq.n	1e5e <ConfigurePLL+0x32>

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
    1e64:	4b1e      	ldr	r3, [pc, #120]	; (1ee0 <ConfigurePLL+0xb4>)
    1e66:	2001      	movs	r0, #1
    1e68:	6018      	str	r0, [r3, #0]
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
    1e6a:	220b      	movs	r2, #11
    1e6c:	3b88      	subs	r3, #136	; 0x88
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	PLLCON = 1;				/* Enable PLL */
    1e6e:	4c1a      	ldr	r4, [pc, #104]	; (1ed8 <ConfigurePLL+0xac>)
    while( !(SCS & 0x40) );	/* Wait until main OSC is usable */

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
    1e70:	601a      	str	r2, [r3, #0]
	PLLFEED = 0xAA;
    1e72:	21aa      	movs	r1, #170	; 0xaa
	PLLFEED = 0x55;
    1e74:	324a      	adds	r2, #74	; 0x4a

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
	PLLFEED = 0xAA;
    1e76:	6099      	str	r1, [r3, #8]
	PLLFEED = 0x55;
    1e78:	609a      	str	r2, [r3, #8]
	PLLCON = 1;				/* Enable PLL */
    1e7a:	6020      	str	r0, [r4, #0]
	PLLFEED = 0xAA;
    1e7c:	6099      	str	r1, [r3, #8]
	PLLFEED = 0x55;
    1e7e:	609a      	str	r2, [r3, #8]

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
	PLLFEED = 0xAA;
    1e80:	3308      	adds	r3, #8
	PLLCON = 1;				/* Enable PLL */
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	

    CCLKCFG = CCLKDivValue;	        /* Fcore = 72 MHz */
    1e82:	3a52      	subs	r2, #82	; 0x52
    1e84:	679a      	str	r2, [r3, #120]	; 0x78
#if USE_USB
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
    1e86:	3202      	adds	r2, #2
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    1e88:	392a      	subs	r1, #42	; 0x2a
	PLLFEED = 0x55;
	

    CCLKCFG = CCLKDivValue;	        /* Fcore = 72 MHz */
#if USE_USB
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
    1e8a:	67da      	str	r2, [r3, #124]	; 0x7c
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    1e8c:	4811      	ldr	r0, [pc, #68]	; (1ed4 <ConfigurePLL+0xa8>)
    1e8e:	04c9      	lsls	r1, r1, #19
    1e90:	6803      	ldr	r3, [r0, #0]
    1e92:	4a10      	ldr	r2, [pc, #64]	; (1ed4 <ConfigurePLL+0xa8>)
    1e94:	420b      	tst	r3, r1
    1e96:	d0fb      	beq.n	1e90 <ConfigurePLL+0x64>
    
    MValue = PLLSTAT & 0x00007FFF;
    1e98:	6813      	ldr	r3, [r2, #0]
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
    1e9a:	6814      	ldr	r4, [r2, #0]
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    
    MValue = PLLSTAT & 0x00007FFF;
    1e9c:	045a      	lsls	r2, r3, #17
    1e9e:	0c52      	lsrs	r2, r2, #17
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
    1ea0:	3a0b      	subs	r2, #11
    1ea2:	0220      	lsls	r0, r4, #8
    1ea4:	1e51      	subs	r1, r2, #1
    1ea6:	418a      	sbcs	r2, r1
    1ea8:	0e01      	lsrs	r1, r0, #24
    while ((MValue != PLL_MValue) && ( NValue != PLL_NValue) );
    1eaa:	2900      	cmp	r1, #0
    1eac:	d10f      	bne.n	1ece <ConfigurePLL+0xa2>

    PLLCON = 3;				/* enable and connect */
    1eae:	490a      	ldr	r1, [pc, #40]	; (1ed8 <ConfigurePLL+0xac>)
    1eb0:	2003      	movs	r0, #3
    1eb2:	6008      	str	r0, [r1, #0]
    PLLFEED = 0xaa;
    1eb4:	30a7      	adds	r0, #167	; 0xa7
    1eb6:	60c8      	str	r0, [r1, #12]
    PLLFEED = 0x55;
    1eb8:	3855      	subs	r0, #85	; 0x55
    1eba:	60c8      	str	r0, [r1, #12]
	while ( ((PLLSTAT & (1 << 25)) == 0) );	/* Check connect bit status */
    1ebc:	302b      	adds	r0, #43	; 0x2b
    1ebe:	4905      	ldr	r1, [pc, #20]	; (1ed4 <ConfigurePLL+0xa8>)
    1ec0:	0482      	lsls	r2, r0, #18
    1ec2:	680c      	ldr	r4, [r1, #0]
    1ec4:	4214      	tst	r4, r2
    1ec6:	d0fc      	beq.n	1ec2 <ConfigurePLL+0x96>


	return;
}
    1ec8:	bc10      	pop	{r4}
    1eca:	bc01      	pop	{r0}
    1ecc:	4700      	bx	r0

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    
    MValue = PLLSTAT & 0x00007FFF;
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
    while ((MValue != PLL_MValue) && ( NValue != PLL_NValue) );
    1ece:	2a00      	cmp	r2, #0
    1ed0:	d0ed      	beq.n	1eae <ConfigurePLL+0x82>
    1ed2:	e7fe      	b.n	1ed2 <ConfigurePLL+0xa6>
    1ed4:	e01fc088 	.word	0xe01fc088
    1ed8:	e01fc080 	.word	0xe01fc080
    1edc:	e01fc1a0 	.word	0xe01fc1a0
    1ee0:	e01fc10c 	.word	0xe01fc10c

00001ee4 <TargetResetInit>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void TargetResetInit(void)
{
    1ee4:	b508      	push	{r3, lr}
#endif

#ifdef __DEBUG_RAM    
    MEMMAP = 0x2;			/* remap to internal RAM */
#else
    MEMMAP = 0x1;			/* remap to internal flash */
    1ee6:	4b0f      	ldr	r3, [pc, #60]	; (1f24 <TargetResetInit+0x40>)
    1ee8:	2201      	movs	r2, #1
    1eea:	601a      	str	r2, [r3, #0]
#endif 


#if USE_USB
	PCONP |= 0x80000000;		/* Turn On USB PCLK */
    1eec:	3384      	adds	r3, #132	; 0x84
    1eee:	6819      	ldr	r1, [r3, #0]
    1ef0:	327f      	adds	r2, #127	; 0x7f
    1ef2:	0610      	lsls	r0, r2, #24
    1ef4:	4308      	orrs	r0, r1
    1ef6:	6018      	str	r0, [r3, #0]
#endif
	/* Configure PLL, switch from IRC to Main OSC */
	ConfigurePLL();
    1ef8:	f7ff ff98 	bl	1e2c <ConfigurePLL>
#if (Fpclk / (Fcclk / 4)) == 1
    PCLKSEL0 = 0x00000000;	/* PCLK is 1/4 CCLK */
    PCLKSEL1 = 0x00000000;
#endif
#if (Fpclk / (Fcclk / 4)) == 2
    PCLKSEL0 = 0xAAAAAAAA;	/* PCLK is 1/2 CCLK */
    1efc:	4b0a      	ldr	r3, [pc, #40]	; (1f28 <TargetResetInit+0x44>)
    1efe:	490b      	ldr	r1, [pc, #44]	; (1f2c <TargetResetInit+0x48>)
    1f00:	600b      	str	r3, [r1, #0]
    PCLKSEL1 = 0xAAAAAAAA;	 
    1f02:	604b      	str	r3, [r1, #4]
    PCLKSEL0 = 0x55555555;	/* PCLK is the same as CCLK */
    PCLKSEL1 = 0x55555555;	
#endif

    /* Set memory accelerater module*/
    MAMCR = 0;
    1f04:	4b0a      	ldr	r3, [pc, #40]	; (1f30 <TargetResetInit+0x4c>)
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
    1f06:	480b      	ldr	r0, [pc, #44]	; (1f34 <TargetResetInit+0x50>)
    PCLKSEL0 = 0x55555555;	/* PCLK is the same as CCLK */
    PCLKSEL1 = 0x55555555;	
#endif

    /* Set memory accelerater module*/
    MAMCR = 0;
    1f08:	2200      	movs	r2, #0
    1f0a:	601a      	str	r2, [r3, #0]
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
    1f0c:	2103      	movs	r1, #3
#endif
#endif
    MAMCR = 2;
    1f0e:	2202      	movs	r2, #2
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
    1f10:	6001      	str	r1, [r0, #0]
#endif
#endif
    MAMCR = 2;
    1f12:	601a      	str	r2, [r3, #0]
	
	init_VIC();
    1f14:	f7ff fb6c 	bl	15f0 <init_VIC>
	
	TargetInit();
    1f18:	f7ff ff32 	bl	1d80 <TargetInit>
	
    return;
}
    1f1c:	bc08      	pop	{r3}
    1f1e:	bc01      	pop	{r0}
    1f20:	4700      	bx	r0
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	e01fc040 	.word	0xe01fc040
    1f28:	aaaaaaaa 	.word	0xaaaaaaaa
    1f2c:	e01fc1a8 	.word	0xe01fc1a8
    1f30:	e01fc000 	.word	0xe01fc000
    1f34:	e01fc004 	.word	0xe01fc004

00001f38 <_read_r>:
	#define TRUE  1
#endif

/* new code for _read_r provided by Alexey Shusharin - Thanks */
_ssize_t _read_r(struct _reent *r, int file, void *ptr, size_t len)
{
    1f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3a:	4647      	mov	r7, r8
    1f3c:	b480      	push	{r7}
    1f3e:	1c1f      	adds	r7, r3, #0
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
    1f40:	1e1c      	subs	r4, r3, #0
    1f42:	d011      	beq.n	1f68 <_read_r+0x30>
    1f44:	2600      	movs	r6, #0
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1f46:	3b02      	subs	r3, #2
{
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
    1f48:	1c15      	adds	r5, r2, #0
  for (i = 0; i < len; i++)
    1f4a:	1c34      	adds	r4, r6, #0
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1f4c:	4698      	mov	r8, r3
  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
  {
	/* 20090521Nemui */
	do{		
		c = getch();
    1f4e:	2000      	movs	r0, #0
    1f50:	f7ff fcfe 	bl	1950 <UARTGetch>
	}while(c == FALSE);
    1f54:	2800      	cmp	r0, #0
    1f56:	d0fa      	beq.n	1f4e <_read_r+0x16>
	/* 20090521Nemui */
	
    *p++ = c;
    1f58:	7028      	strb	r0, [r5, #0]
    1f5a:	3501      	adds	r5, #1
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1f5c:	280d      	cmp	r0, #13
    1f5e:	d009      	beq.n	1f74 <_read_r+0x3c>
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
    1f60:	3401      	adds	r4, #1
    1f62:	1c26      	adds	r6, r4, #0
    1f64:	42a7      	cmp	r7, r4
    1f66:	d8f2      	bhi.n	1f4e <_read_r+0x16>
	  #endif
      return i + 2;
    }
  }
  return i;
}
    1f68:	1c20      	adds	r0, r4, #0
    1f6a:	bc04      	pop	{r2}
    1f6c:	4690      	mov	r8, r2
    1f6e:	bcf0      	pop	{r4, r5, r6, r7}
    1f70:	bc02      	pop	{r1}
    1f72:	4708      	bx	r1
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1f74:	45b0      	cmp	r8, r6
    1f76:	d3f3      	bcc.n	1f60 <_read_r+0x28>
    {
      *p = '\n';					 /* 0x0A */
    1f78:	200a      	movs	r0, #10
    1f7a:	7028      	strb	r0, [r5, #0]
	  #ifdef ECHOBACK 
		putch('\n');				 /* 0x0A */
	  #endif
      return i + 2;
    1f7c:	3402      	adds	r4, #2
    1f7e:	e7f3      	b.n	1f68 <_read_r+0x30>

00001f80 <_write_r>:
_ssize_t _write_r (
    struct _reent *r, 
    int file, 
    const void *ptr, 
    size_t len)
{
    1f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f82:	1c15      	adds	r5, r2, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1f84:	1e1e      	subs	r6, r3, #0
    1f86:	d02b      	beq.n	1fe0 <_write_r+0x60>
		if (*p == '\n' ) putch('\r');
    1f88:	7811      	ldrb	r1, [r2, #0]
    1f8a:	1e77      	subs	r7, r6, #1
    1f8c:	2301      	movs	r3, #1
    1f8e:	401f      	ands	r7, r3
    1f90:	290a      	cmp	r1, #10
    1f92:	d02f      	beq.n	1ff4 <_write_r+0x74>
		putch(*p++);
    1f94:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1f96:	2401      	movs	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1f98:	f7ff fcbe 	bl	1918 <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1f9c:	42b4      	cmp	r4, r6
    1f9e:	d21f      	bcs.n	1fe0 <_write_r+0x60>
    1fa0:	2f00      	cmp	r7, #0
    1fa2:	d008      	beq.n	1fb6 <_write_r+0x36>
		if (*p == '\n' ) putch('\r');
    1fa4:	5d29      	ldrb	r1, [r5, r4]
    1fa6:	290a      	cmp	r1, #10
    1fa8:	d02a      	beq.n	2000 <_write_r+0x80>
		putch(*p++);
    1faa:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1fac:	3401      	adds	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1fae:	f7ff fcb3 	bl	1918 <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1fb2:	42b4      	cmp	r4, r6
    1fb4:	d214      	bcs.n	1fe0 <_write_r+0x60>
		if (*p == '\n' ) putch('\r');
    1fb6:	5d29      	ldrb	r1, [r5, r4]
    1fb8:	290a      	cmp	r1, #10
    1fba:	d015      	beq.n	1fe8 <_write_r+0x68>
		putch(*p++);
    1fbc:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1fbe:	3401      	adds	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1fc0:	f7ff fcaa 	bl	1918 <UARTPutch>
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
		if (*p == '\n' ) putch('\r');
    1fc4:	5d29      	ldrb	r1, [r5, r4]
    1fc6:	290a      	cmp	r1, #10
    1fc8:	d1ef      	bne.n	1faa <_write_r+0x2a>
    1fca:	2000      	movs	r0, #0
    1fcc:	210d      	movs	r1, #13
    1fce:	f7ff fca3 	bl	1918 <UARTPutch>
    1fd2:	5d29      	ldrb	r1, [r5, r4]
		putch(*p++);
    1fd4:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1fd6:	3401      	adds	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1fd8:	f7ff fc9e 	bl	1918 <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1fdc:	42b4      	cmp	r4, r6
    1fde:	d3ea      	bcc.n	1fb6 <_write_r+0x36>
		if (*p == '\n' ) putch('\r');
		putch(*p++);
	}
	
	return len;
}
    1fe0:	1c30      	adds	r0, r6, #0
    1fe2:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fe4:	bc02      	pop	{r1}
    1fe6:	4708      	bx	r1
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
		if (*p == '\n' ) putch('\r');
    1fe8:	3103      	adds	r1, #3
    1fea:	2000      	movs	r0, #0
    1fec:	f7ff fc94 	bl	1918 <UARTPutch>
    1ff0:	5d29      	ldrb	r1, [r5, r4]
    1ff2:	e7e3      	b.n	1fbc <_write_r+0x3c>
    1ff4:	210d      	movs	r1, #13
    1ff6:	2000      	movs	r0, #0
    1ff8:	f7ff fc8e 	bl	1918 <UARTPutch>
    1ffc:	7829      	ldrb	r1, [r5, #0]
    1ffe:	e7c9      	b.n	1f94 <_write_r+0x14>
    2000:	3103      	adds	r1, #3
    2002:	2000      	movs	r0, #0
    2004:	f7ff fc88 	bl	1918 <UARTPutch>
    2008:	5d29      	ldrb	r1, [r5, r4]
    200a:	e7ce      	b.n	1faa <_write_r+0x2a>

0000200c <_close_r>:
int _close_r(
    struct _reent *r, 
    int file)
{
	return 0;
}
    200c:	2000      	movs	r0, #0
    200e:	4770      	bx	lr

00002010 <_lseek_r>:
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
}
    2010:	2000      	movs	r0, #0
    2012:	4770      	bx	lr

00002014 <_fstat_r>:
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
    2014:	2080      	movs	r0, #128	; 0x80
    2016:	0183      	lsls	r3, r0, #6
    2018:	6053      	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
}
    201a:	2000      	movs	r0, #0
    201c:	4770      	bx	lr
    201e:	46c0      	nop			; (mov r8, r8)

00002020 <isatty>:
int isatty(int file); /* avoid warning */
#endif
int isatty(int file)
{
	return 1;
}
    2020:	2001      	movs	r0, #1
    2022:	4770      	bx	lr

00002024 <_exit>:


void _exit(int n) {
    2024:	b500      	push	{lr}
    2026:	e7fe      	b.n	2026 <_exit+0x2>

00002028 <_getpid>:
}

int _getpid(int file)
{
	return 1;
}
    2028:	2001      	movs	r0, #1
    202a:	4770      	bx	lr

0000202c <_kill>:

int _kill(int file)
{
	return 1;
}
    202c:	2001      	movs	r0, #1
    202e:	4770      	bx	lr

00002030 <_sbrk_r>:
/* messages must be suppressed.											*/

void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
    2030:	b500      	push	{lr}
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
    2032:	4b05      	ldr	r3, [pc, #20]	; (2048 <_sbrk_r+0x18>)
    2034:	6818      	ldr	r0, [r3, #0]
    2036:	2800      	cmp	r0, #0
    2038:	d003      	beq.n	2042 <_sbrk_r+0x12>
		heap_ptr = end;
	}
	base = heap_ptr;	/*  Point to end of heap.					*/
	heap_ptr += nbytes;	/*  Increase heap.							*/
    203a:	1841      	adds	r1, r0, r1
    203c:	6019      	str	r1, [r3, #0]
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
    203e:	bc02      	pop	{r1}
    2040:	4708      	bx	r1
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
    2042:	4802      	ldr	r0, [pc, #8]	; (204c <_sbrk_r+0x1c>)
    2044:	e7f9      	b.n	203a <_sbrk_r+0xa>
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	400009b4 	.word	0x400009b4
    204c:	40000b90 	.word	0x40000b90

00002050 <_sbrk>:
}



void * _sbrk(ptrdiff_t incr)
{
    2050:	b500      	push	{lr}
  char  *base;

/* Initialize if first time through. */

  if (!heap_ptr) heap_ptr = end;
    2052:	4a05      	ldr	r2, [pc, #20]	; (2068 <_sbrk+0x18>)
    2054:	6813      	ldr	r3, [r2, #0]
    2056:	2b00      	cmp	r3, #0
    2058:	d004      	beq.n	2064 <_sbrk+0x14>

  base = heap_ptr;      /*  Point to end of heap.                       */
  heap_ptr += incr;     /*  Increase heap.                              */
    205a:	1818      	adds	r0, r3, r0
    205c:	6010      	str	r0, [r2, #0]

  return base;          /*  Return pointer to start of new heap area.   */
}
    205e:	1c18      	adds	r0, r3, #0
    2060:	bc02      	pop	{r1}
    2062:	4708      	bx	r1
{
  char  *base;

/* Initialize if first time through. */

  if (!heap_ptr) heap_ptr = end;
    2064:	4b01      	ldr	r3, [pc, #4]	; (206c <_sbrk+0x1c>)
    2066:	e7f8      	b.n	205a <_sbrk+0xa>
    2068:	400009b4 	.word	0x400009b4
    206c:	40000b90 	.word	0x40000b90

00002070 <_open>:

  return base;          /*  Return pointer to start of new heap area.   */
}

int _open(const char *path, int flags, ...)
{
    2070:	b40e      	push	{r1, r2, r3}
  return 1;
}
    2072:	2001      	movs	r0, #1
    2074:	b003      	add	sp, #12
    2076:	4770      	bx	lr

00002078 <_close>:

int _close(int fd)
{
  return 0;
}
    2078:	2000      	movs	r0, #0
    207a:	4770      	bx	lr

0000207c <_fstat>:

int _fstat(int fd, struct stat *st)
{
  st->st_mode = S_IFCHR;
    207c:	2080      	movs	r0, #128	; 0x80
    207e:	0183      	lsls	r3, r0, #6
    2080:	604b      	str	r3, [r1, #4]
  return 0;
}
    2082:	2000      	movs	r0, #0
    2084:	4770      	bx	lr
    2086:	46c0      	nop			; (mov r8, r8)

00002088 <_isatty>:

int _isatty(int fd)
{
  return 1;
}
    2088:	2001      	movs	r0, #1
    208a:	4770      	bx	lr

0000208c <_lseek>:


int _lseek(int fd, off_t pos, int whence)
{
  return 0;
}
    208c:	2000      	movs	r0, #0
    208e:	4770      	bx	lr

00002090 <_read>:

int _read(int fd, char *buf, size_t cnt)
{
    2090:	b510      	push	{r4, lr}
  *buf = getch();
    2092:	2000      	movs	r0, #0
{
  return 0;
}

int _read(int fd, char *buf, size_t cnt)
{
    2094:	1c0c      	adds	r4, r1, #0
  *buf = getch();
    2096:	f7ff fc5b 	bl	1950 <UARTGetch>
    209a:	7020      	strb	r0, [r4, #0]

  return 1;
}
    209c:	2001      	movs	r0, #1
    209e:	bc10      	pop	{r4}
    20a0:	bc02      	pop	{r1}
    20a2:	4708      	bx	r1

000020a4 <_write>:

int _write(int fd, const char *buf, size_t cnt)
{
    20a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20a6:	1c0d      	adds	r5, r1, #0
  int i;

  for (i = 0; i < cnt; i++)
    20a8:	1e16      	subs	r6, r2, #0
    20aa:	d020      	beq.n	20ee <_write+0x4a>
    20ac:	2401      	movs	r4, #1
    putch(buf[i]);
    20ae:	7809      	ldrb	r1, [r1, #0]
    20b0:	2000      	movs	r0, #0
    20b2:	1e77      	subs	r7, r6, #1
    20b4:	f7ff fc30 	bl	1918 <UARTPutch>

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    20b8:	1c23      	adds	r3, r4, #0
    20ba:	4027      	ands	r7, r4
    20bc:	429e      	cmp	r6, r3
    20be:	d916      	bls.n	20ee <_write+0x4a>
    20c0:	2f00      	cmp	r7, #0
    20c2:	d007      	beq.n	20d4 <_write+0x30>
    putch(buf[i]);
    20c4:	7869      	ldrb	r1, [r5, #1]
    20c6:	2000      	movs	r0, #0

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    20c8:	2402      	movs	r4, #2
    putch(buf[i]);
    20ca:	f7ff fc25 	bl	1918 <UARTPutch>

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    20ce:	1c23      	adds	r3, r4, #0
    20d0:	42a6      	cmp	r6, r4
    20d2:	d90c      	bls.n	20ee <_write+0x4a>
    putch(buf[i]);
    20d4:	5ce9      	ldrb	r1, [r5, r3]
    20d6:	2000      	movs	r0, #0

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    20d8:	3401      	adds	r4, #1
    putch(buf[i]);
    20da:	f7ff fc1d 	bl	1918 <UARTPutch>
    20de:	5d29      	ldrb	r1, [r5, r4]
    20e0:	2000      	movs	r0, #0

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    20e2:	3401      	adds	r4, #1
    putch(buf[i]);
    20e4:	f7ff fc18 	bl	1918 <UARTPutch>

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    20e8:	1c23      	adds	r3, r4, #0
    20ea:	42a6      	cmp	r6, r4
    20ec:	d8f2      	bhi.n	20d4 <_write+0x30>
    putch(buf[i]);

  return cnt;
}
    20ee:	1c30      	adds	r0, r6, #0
    20f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    20f2:	bc02      	pop	{r1}
    20f4:	4708      	bx	r1
    20f6:	46c0      	nop			; (mov r8, r8)

000020f8 <vBlockingQueueProducer>:
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
    20f8:	b570      	push	{r4, r5, r6, lr}
    20fa:	b082      	sub	sp, #8
unsigned short usValue = 0;
    20fc:	466d      	mov	r5, sp
    20fe:	3506      	adds	r5, #6
    2100:	2600      	movs	r6, #0
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
    2102:	1c04      	adds	r4, r0, #0
unsigned short usValue = 0;
    2104:	802e      	strh	r6, [r5, #0]
    2106:	e000      	b.n	210a <vBlockingQueueProducer+0x12>

	for( ;; )
	{		
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
		{
			sErrorEverOccurred = pdTRUE;
    2108:	2601      	movs	r6, #1

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;

	for( ;; )
	{		
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
    210a:	6820      	ldr	r0, [r4, #0]
    210c:	6862      	ldr	r2, [r4, #4]
    210e:	1c29      	adds	r1, r5, #0
    2110:	2300      	movs	r3, #0
    2112:	f001 f9d5 	bl	34c0 <xQueueGenericSend>
    2116:	2801      	cmp	r0, #1
    2118:	d1f6      	bne.n	2108 <vBlockingQueueProducer+0x10>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
    211a:	2e00      	cmp	r6, #0
    211c:	d105      	bne.n	212a <vBlockingQueueProducer+0x32>
			{
				( *pxQueueParameters->psCheckVariable )++;
    211e:	68a3      	ldr	r3, [r4, #8]
    2120:	8819      	ldrh	r1, [r3, #0]
    2122:	3101      	adds	r1, #1
    2124:	0408      	lsls	r0, r1, #16
    2126:	0c02      	lsrs	r2, r0, #16
    2128:	801a      	strh	r2, [r3, #0]
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
    212a:	882a      	ldrh	r2, [r5, #0]
    212c:	3201      	adds	r2, #1
    212e:	802a      	strh	r2, [r5, #0]
    2130:	e7eb      	b.n	210a <vBlockingQueueProducer+0x12>
    2132:	46c0      	nop			; (mov r8, r8)

00002134 <vBlockingQueueConsumer>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
    2134:	b5f0      	push	{r4, r5, r6, r7, lr}
    2136:	b083      	sub	sp, #12
unsigned short usData, usExpectedValue = 0;
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
    2138:	2700      	movs	r7, #0
    213a:	466d      	mov	r5, sp
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
    213c:	1c04      	adds	r4, r0, #0
unsigned short usData, usExpectedValue = 0;
    213e:	1c3e      	adds	r6, r7, #0
    2140:	3506      	adds	r5, #6

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;

	for( ;; )
	{	
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
    2142:	6820      	ldr	r0, [r4, #0]
    2144:	6862      	ldr	r2, [r4, #4]
    2146:	1c29      	adds	r1, r5, #0
    2148:	2300      	movs	r3, #0
    214a:	f001 fa89 	bl	3660 <xQueueGenericReceive>
    214e:	2801      	cmp	r0, #1
    2150:	d1f7      	bne.n	2142 <vBlockingQueueConsumer+0xe>
		{
			if( usData != usExpectedValue )
    2152:	882b      	ldrh	r3, [r5, #0]
    2154:	42b3      	cmp	r3, r6
    2156:	d002      	beq.n	215e <vBlockingQueueConsumer+0x2a>
    2158:	1c1e      	adds	r6, r3, #0
			{
				/* Catch-up. */
				usExpectedValue = usData;

				sErrorEverOccurred = pdTRUE;
    215a:	1c07      	adds	r7, r0, #0
    215c:	e7f1      	b.n	2142 <vBlockingQueueConsumer+0xe>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */	
				if( sErrorEverOccurred == pdFALSE )
    215e:	2f00      	cmp	r7, #0
    2160:	d105      	bne.n	216e <vBlockingQueueConsumer+0x3a>
				{
					( *pxQueueParameters->psCheckVariable )++;
    2162:	68a2      	ldr	r2, [r4, #8]
    2164:	8816      	ldrh	r6, [r2, #0]
    2166:	3601      	adds	r6, #1
    2168:	0430      	lsls	r0, r6, #16
    216a:	0c01      	lsrs	r1, r0, #16
    216c:	8011      	strh	r1, [r2, #0]
				}
							
				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
    216e:	1c59      	adds	r1, r3, #1
    2170:	040b      	lsls	r3, r1, #16
    2172:	0c1e      	lsrs	r6, r3, #16
    2174:	e7e5      	b.n	2142 <vBlockingQueueConsumer+0xe>
    2176:	46c0      	nop			; (mov r8, r8)

00002178 <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( unsigned short ) 0, ( unsigned short ) 0, ( unsigned short ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( unsigned portBASE_TYPE uxPriority )
{
    2178:	b5f0      	push	{r4, r5, r6, r7, lr}
    217a:	465f      	mov	r7, fp
    217c:	4656      	mov	r6, sl
    217e:	464d      	mov	r5, r9
    2180:	4644      	mov	r4, r8
    2182:	b4f0      	push	{r4, r5, r6, r7}
    2184:	b087      	sub	sp, #28
    2186:	9005      	str	r0, [sp, #20]
const portTickType xDontBlock = ( portTickType ) 0;

	/* Create the first two tasks as described at the top of the file. */
	
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    2188:	200c      	movs	r0, #12
    218a:	f002 fac1 	bl	4710 <pvPortMalloc>

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    218e:	2102      	movs	r1, #2
const portTickType xDontBlock = ( portTickType ) 0;

	/* Create the first two tasks as described at the top of the file. */
	
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    2190:	1c05      	adds	r5, r0, #0

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    2192:	2001      	movs	r0, #1
    2194:	f001 f958 	bl	3448 <xQueueCreate>

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
    2198:	27fa      	movs	r7, #250	; 0xfa

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    219a:	4a47      	ldr	r2, [pc, #284]	; (22b8 <vStartBlockingQueueTasks+0x140>)
	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
    219c:	00bf      	lsls	r7, r7, #2
    219e:	606f      	str	r7, [r5, #4]
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    21a0:	6028      	str	r0, [r5, #0]
	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    21a2:	60aa      	str	r2, [r5, #8]
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    21a4:	200c      	movs	r0, #12
	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    21a6:	4692      	mov	sl, r2
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    21a8:	f002 fab2 	bl	4710 <pvPortMalloc>
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
    21ac:	4b43      	ldr	r3, [pc, #268]	; (22bc <vStartBlockingQueueTasks+0x144>)
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
    21ae:	682c      	ldr	r4, [r5, #0]
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
    21b0:	6083      	str	r3, [r0, #8]
    21b2:	4698      	mov	r8, r3


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    21b4:	4a42      	ldr	r2, [pc, #264]	; (22c0 <vStartBlockingQueueTasks+0x148>)
    21b6:	9b05      	ldr	r3, [sp, #20]
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
    21b8:	6004      	str	r4, [r0, #0]

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
    21ba:	2400      	movs	r4, #0
    21bc:	6044      	str	r4, [r0, #4]
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    21be:	4693      	mov	fp, r2
	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    21c0:	1c06      	adds	r6, r0, #0
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    21c2:	9300      	str	r3, [sp, #0]
    21c4:	1c10      	adds	r0, r2, #0
    21c6:	1c2b      	adds	r3, r5, #0
    21c8:	493e      	ldr	r1, [pc, #248]	; (22c4 <vStartBlockingQueueTasks+0x14c>)
    21ca:	2268      	movs	r2, #104	; 0x68
    21cc:	9401      	str	r4, [sp, #4]
    21ce:	9402      	str	r4, [sp, #8]
    21d0:	9403      	str	r4, [sp, #12]
    21d2:	f001 fb9f 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueProducer, ( signed char * ) "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
    21d6:	4a3c      	ldr	r2, [pc, #240]	; (22c8 <vStartBlockingQueueTasks+0x150>)
    21d8:	1c33      	adds	r3, r6, #0
    21da:	4691      	mov	r9, r2
    21dc:	493b      	ldr	r1, [pc, #236]	; (22cc <vStartBlockingQueueTasks+0x154>)
    21de:	1c10      	adds	r0, r2, #0
    21e0:	2268      	movs	r2, #104	; 0x68
    21e2:	9400      	str	r4, [sp, #0]
    21e4:	9401      	str	r4, [sp, #4]
    21e6:	9402      	str	r4, [sp, #8]
    21e8:	9403      	str	r4, [sp, #12]
    21ea:	f001 fb93 	bl	3914 <xTaskGenericCreate>
	

	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    21ee:	200c      	movs	r0, #12
    21f0:	f002 fa8e 	bl	4710 <pvPortMalloc>
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    21f4:	2102      	movs	r1, #2
	

	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    21f6:	1c05      	adds	r5, r0, #0
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    21f8:	2001      	movs	r0, #1
    21fa:	f001 f925 	bl	3448 <xQueueCreate>
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
    21fe:	2202      	movs	r2, #2
    2200:	1c11      	adds	r1, r2, #0
    2202:	4441      	add	r1, r8

	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    2204:	6028      	str	r0, [r5, #0]
	pxQueueParameters3->xBlockTime = xDontBlock;
    2206:	606c      	str	r4, [r5, #4]
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
    2208:	60a9      	str	r1, [r5, #8]

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    220a:	200c      	movs	r0, #12
    220c:	f002 fa80 	bl	4710 <pvPortMalloc>
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    2210:	2202      	movs	r2, #2
	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    2212:	1c06      	adds	r6, r0, #0
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    2214:	1c13      	adds	r3, r2, #0
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
    2216:	6828      	ldr	r0, [r5, #0]
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    2218:	4453      	add	r3, sl
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
	pxQueueParameters4->xBlockTime = xBlockTime;
    221a:	6077      	str	r7, [r6, #4]
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
    221c:	6030      	str	r0, [r6, #0]
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    221e:	60b3      	str	r3, [r6, #8]

	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QProdB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
    2220:	4658      	mov	r0, fp
    2222:	1c2b      	adds	r3, r5, #0
    2224:	492a      	ldr	r1, [pc, #168]	; (22d0 <vStartBlockingQueueTasks+0x158>)
    2226:	3266      	adds	r2, #102	; 0x66
    2228:	9400      	str	r4, [sp, #0]
    222a:	9401      	str	r4, [sp, #4]
    222c:	9402      	str	r4, [sp, #8]
    222e:	9403      	str	r4, [sp, #12]
    2230:	f001 fb70 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueProducer, ( signed char * ) "QConsB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
    2234:	9d05      	ldr	r5, [sp, #20]
    2236:	1c33      	adds	r3, r6, #0
    2238:	2268      	movs	r2, #104	; 0x68
    223a:	4648      	mov	r0, r9
    223c:	4925      	ldr	r1, [pc, #148]	; (22d4 <vStartBlockingQueueTasks+0x15c>)
    223e:	9500      	str	r5, [sp, #0]
    2240:	9401      	str	r4, [sp, #4]
    2242:	9402      	str	r4, [sp, #8]
    2244:	9403      	str	r4, [sp, #12]
    2246:	f001 fb65 	bl	3914 <xTaskGenericCreate>



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    224a:	200c      	movs	r0, #12
    224c:	f002 fa60 	bl	4710 <pvPortMalloc>
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    2250:	2102      	movs	r1, #2



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    2252:	1c05      	adds	r5, r0, #0
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    2254:	2005      	movs	r0, #5
    2256:	f001 f8f7 	bl	3448 <xQueueCreate>
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
    225a:	2204      	movs	r2, #4
    225c:	1c11      	adds	r1, r2, #0
    225e:	4441      	add	r1, r8


	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    2260:	6028      	str	r0, [r5, #0]
	pxQueueParameters5->xBlockTime = xBlockTime;
    2262:	606f      	str	r7, [r5, #4]
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
    2264:	60a9      	str	r1, [r5, #8]

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    2266:	200c      	movs	r0, #12
    2268:	f002 fa52 	bl	4710 <pvPortMalloc>
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
	pxQueueParameters6->xBlockTime = xBlockTime;
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    226c:	2204      	movs	r2, #4
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    226e:	1c06      	adds	r6, r0, #0
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
	pxQueueParameters6->xBlockTime = xBlockTime;
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    2270:	1c13      	adds	r3, r2, #0
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
    2272:	6828      	ldr	r0, [r5, #0]
	pxQueueParameters6->xBlockTime = xBlockTime;
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    2274:	4453      	add	r3, sl
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
    2276:	6030      	str	r0, [r6, #0]
	pxQueueParameters6->xBlockTime = xBlockTime;
    2278:	6077      	str	r7, [r6, #4]
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    227a:	60b3      	str	r3, [r6, #8]

	xTaskCreate( vBlockingQueueProducer, ( signed char * ) "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
    227c:	4648      	mov	r0, r9
    227e:	1c2b      	adds	r3, r5, #0
    2280:	4915      	ldr	r1, [pc, #84]	; (22d8 <vStartBlockingQueueTasks+0x160>)
    2282:	3264      	adds	r2, #100	; 0x64
    2284:	9400      	str	r4, [sp, #0]
    2286:	9401      	str	r4, [sp, #4]
    2288:	9402      	str	r4, [sp, #8]
    228a:	9403      	str	r4, [sp, #12]
    228c:	f001 fb42 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
    2290:	4658      	mov	r0, fp
    2292:	1c33      	adds	r3, r6, #0
    2294:	4911      	ldr	r1, [pc, #68]	; (22dc <vStartBlockingQueueTasks+0x164>)
    2296:	2268      	movs	r2, #104	; 0x68
    2298:	9400      	str	r4, [sp, #0]
    229a:	9401      	str	r4, [sp, #4]
    229c:	9402      	str	r4, [sp, #8]
    229e:	9403      	str	r4, [sp, #12]
    22a0:	f001 fb38 	bl	3914 <xTaskGenericCreate>
}
    22a4:	b007      	add	sp, #28
    22a6:	bc3c      	pop	{r2, r3, r4, r5}
    22a8:	4690      	mov	r8, r2
    22aa:	4699      	mov	r9, r3
    22ac:	46a2      	mov	sl, r4
    22ae:	46ab      	mov	fp, r5
    22b0:	bcf0      	pop	{r4, r5, r6, r7}
    22b2:	bc01      	pop	{r0}
    22b4:	4700      	bx	r0
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	400009d0 	.word	0x400009d0
    22bc:	400009c0 	.word	0x400009c0
    22c0:	00002135 	.word	0x00002135
    22c4:	0000ecec 	.word	0x0000ecec
    22c8:	000020f9 	.word	0x000020f9
    22cc:	0000ecf4 	.word	0x0000ecf4
    22d0:	0000ecfc 	.word	0x0000ecfc
    22d4:	0000ed04 	.word	0x0000ed04
    22d8:	0000ed0c 	.word	0x0000ed0c
    22dc:	0000ed14 	.word	0x0000ed14

000022e0 <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreBlockingQueuesStillRunning( void )
{
    22e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    22e2:	4c27      	ldr	r4, [pc, #156]	; (2380 <xAreBlockingQueuesStillRunning+0xa0>)
    22e4:	4927      	ldr	r1, [pc, #156]	; (2384 <xAreBlockingQueuesStillRunning+0xa4>)
    22e6:	8825      	ldrh	r5, [r4, #0]
	}
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreBlockingQueuesStillRunning( void )
    22e8:	2200      	movs	r2, #0
    22ea:	5e8e      	ldrsh	r6, [r1, r2]
    22ec:	042f      	lsls	r7, r5, #16
    22ee:	143a      	asrs	r2, r7, #16
    22f0:	1ab6      	subs	r6, r6, r2
    22f2:	1e73      	subs	r3, r6, #1
    22f4:	419e      	sbcs	r6, r3
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    22f6:	8823      	ldrh	r3, [r4, #0]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    22f8:	4a23      	ldr	r2, [pc, #140]	; (2388 <xAreBlockingQueuesStillRunning+0xa8>)
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    22fa:	800b      	strh	r3, [r1, #0]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    22fc:	4b23      	ldr	r3, [pc, #140]	; (238c <xAreBlockingQueuesStillRunning+0xac>)
    22fe:	8810      	ldrh	r0, [r2, #0]
    2300:	2700      	movs	r7, #0
    2302:	5fdd      	ldrsh	r5, [r3, r7]
    2304:	0400      	lsls	r0, r0, #16
    2306:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    2308:	1be8      	subs	r0, r5, r7
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    230a:	8817      	ldrh	r7, [r2, #0]
    230c:	801f      	strh	r7, [r3, #0]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    230e:	1e45      	subs	r5, r0, #1
    2310:	41a8      	sbcs	r0, r5
    2312:	4245      	negs	r5, r0
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    2314:	8860      	ldrh	r0, [r4, #2]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    2316:	402e      	ands	r6, r5
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    2318:	0400      	lsls	r0, r0, #16
    231a:	2702      	movs	r7, #2
    231c:	5fcd      	ldrsh	r5, [r1, r7]
    231e:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    2320:	1be8      	subs	r0, r5, r7
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    2322:	8867      	ldrh	r7, [r4, #2]
    2324:	804f      	strh	r7, [r1, #2]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    2326:	1e45      	subs	r5, r0, #1
    2328:	41a8      	sbcs	r0, r5
    232a:	4245      	negs	r5, r0
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    232c:	8850      	ldrh	r0, [r2, #2]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    232e:	402e      	ands	r6, r5
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    2330:	0400      	lsls	r0, r0, #16
    2332:	2702      	movs	r7, #2
    2334:	5fdd      	ldrsh	r5, [r3, r7]
    2336:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    2338:	1be8      	subs	r0, r5, r7
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    233a:	8857      	ldrh	r7, [r2, #2]
    233c:	805f      	strh	r7, [r3, #2]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    233e:	1e45      	subs	r5, r0, #1
    2340:	41a8      	sbcs	r0, r5
    2342:	4245      	negs	r5, r0
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    2344:	88a0      	ldrh	r0, [r4, #4]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    2346:	402e      	ands	r6, r5
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    2348:	0400      	lsls	r0, r0, #16
    234a:	2704      	movs	r7, #4
    234c:	5fcd      	ldrsh	r5, [r1, r7]
    234e:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    2350:	1be8      	subs	r0, r5, r7
    2352:	1e45      	subs	r5, r0, #1
    2354:	41a8      	sbcs	r0, r5
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    2356:	88a5      	ldrh	r5, [r4, #4]
    2358:	808d      	strh	r5, [r1, #4]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    235a:	8891      	ldrh	r1, [r2, #4]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    235c:	4247      	negs	r7, r0
    235e:	1c30      	adds	r0, r6, #0
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    2360:	2504      	movs	r5, #4
    2362:	5f5c      	ldrsh	r4, [r3, r5]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    2364:	4038      	ands	r0, r7
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    2366:	040f      	lsls	r7, r1, #16
    2368:	143e      	asrs	r6, r7, #16
		{
			xReturn = pdFALSE;
    236a:	1ba5      	subs	r5, r4, r6
    236c:	1e6c      	subs	r4, r5, #1
    236e:	41a5      	sbcs	r5, r4
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    2370:	8892      	ldrh	r2, [r2, #4]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    2372:	4269      	negs	r1, r5
    2374:	4008      	ands	r0, r1
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    2376:	809a      	strh	r2, [r3, #4]
	}

	return xReturn;
}
    2378:	bcf0      	pop	{r4, r5, r6, r7}
    237a:	bc02      	pop	{r1}
    237c:	4708      	bx	r1
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	400009d0 	.word	0x400009d0
    2384:	400009c8 	.word	0x400009c8
    2388:	400009c0 	.word	0x400009c0
    238c:	400009b8 	.word	0x400009b8

00002390 <vSecondaryBlockTimeTestTask>:
	}
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
    2390:	b5f0      	push	{r4, r5, r6, r7, lr}
    2392:	4657      	mov	r7, sl
    2394:	464e      	mov	r6, r9
    2396:	4645      	mov	r5, r8
    2398:	b4e0      	push	{r5, r6, r7}
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
    239a:	2300      	movs	r3, #0
    239c:	469a      	mov	sl, r3
    239e:	4c24      	ldr	r4, [pc, #144]	; (2430 <vSecondaryBlockTimeTestTask+0xa0>)
		xTimeWhenBlocking = xTaskGetTickCount();

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
		xRunIndicator = bktRUN_INDICATOR;
    23a0:	3355      	adds	r3, #85	; 0x55
    23a2:	4e24      	ldr	r6, [pc, #144]	; (2434 <vSecondaryBlockTimeTestTask+0xa4>)
    23a4:	4d24      	ldr	r5, [pc, #144]	; (2438 <vSecondaryBlockTimeTestTask+0xa8>)
    23a6:	4f25      	ldr	r7, [pc, #148]	; (243c <vSecondaryBlockTimeTestTask+0xac>)
	}
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
    23a8:	b082      	sub	sp, #8
		xTimeWhenBlocking = xTaskGetTickCount();

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
		xRunIndicator = bktRUN_INDICATOR;
    23aa:	4698      	mov	r8, r3
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
    23ac:	2000      	movs	r0, #0
    23ae:	f001 ffd3 	bl	4358 <vTaskSuspend>
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
    23b2:	f001 fd09 	bl	3dc8 <xTaskGetTickCount>

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
    23b6:	4653      	mov	r3, sl
    23b8:	9301      	str	r3, [sp, #4]
		xRunIndicator = bktRUN_INDICATOR;
    23ba:	4643      	mov	r3, r8
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
    23bc:	4681      	mov	r9, r0

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
		xRunIndicator = bktRUN_INDICATOR;
    23be:	6023      	str	r3, [r4, #0]
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
    23c0:	6830      	ldr	r0, [r6, #0]
    23c2:	a901      	add	r1, sp, #4
    23c4:	22af      	movs	r2, #175	; 0xaf
    23c6:	4653      	mov	r3, sl
    23c8:	f001 f87a 	bl	34c0 <xQueueGenericSend>
    23cc:	2800      	cmp	r0, #0
    23ce:	d001      	beq.n	23d4 <vSecondaryBlockTimeTestTask+0x44>
		{
			xErrorOccurred = pdTRUE;
    23d0:	2001      	movs	r0, #1
    23d2:	6028      	str	r0, [r5, #0]
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    23d4:	f001 fcf8 	bl	3dc8 <xTaskGetTickCount>
    23d8:	464b      	mov	r3, r9
    23da:	1ac0      	subs	r0, r0, r3

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
    23dc:	28ae      	cmp	r0, #174	; 0xae
    23de:	d901      	bls.n	23e4 <vSecondaryBlockTimeTestTask+0x54>
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
    23e0:	28be      	cmp	r0, #190	; 0xbe
    23e2:	d901      	bls.n	23e8 <vSecondaryBlockTimeTestTask+0x58>
		{
			xErrorOccurred = pdTRUE;
    23e4:	2101      	movs	r1, #1
    23e6:	6029      	str	r1, [r5, #0]
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
    23e8:	4643      	mov	r3, r8
    23ea:	6023      	str	r3, [r4, #0]
		vTaskSuspend( NULL );
    23ec:	2000      	movs	r0, #0
    23ee:	f001 ffb3 	bl	4358 <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
    23f2:	f001 fce9 	bl	3dc8 <xTaskGetTickCount>

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
    23f6:	4643      	mov	r3, r8

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
    23f8:	4681      	mov	r9, r0

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
    23fa:	6023      	str	r3, [r4, #0]
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
    23fc:	6830      	ldr	r0, [r6, #0]
    23fe:	a901      	add	r1, sp, #4
    2400:	22af      	movs	r2, #175	; 0xaf
    2402:	2300      	movs	r3, #0
    2404:	f001 f92c 	bl	3660 <xQueueGenericReceive>
    2408:	2800      	cmp	r0, #0
    240a:	d001      	beq.n	2410 <vSecondaryBlockTimeTestTask+0x80>
		{
			xErrorOccurred = pdTRUE;
    240c:	2201      	movs	r2, #1
    240e:	602a      	str	r2, [r5, #0]
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    2410:	f001 fcda 	bl	3dc8 <xTaskGetTickCount>
    2414:	464b      	mov	r3, r9
    2416:	1ac0      	subs	r0, r0, r3

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
    2418:	28ae      	cmp	r0, #174	; 0xae
    241a:	d901      	bls.n	2420 <vSecondaryBlockTimeTestTask+0x90>
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
    241c:	28be      	cmp	r0, #190	; 0xbe
    241e:	d901      	bls.n	2424 <vSecondaryBlockTimeTestTask+0x94>
		{
			xErrorOccurred = pdTRUE;
    2420:	2001      	movs	r0, #1
    2422:	6028      	str	r0, [r5, #0]
		}

		xRunIndicator = bktRUN_INDICATOR;
    2424:	4643      	mov	r3, r8
    2426:	6023      	str	r3, [r4, #0]

		xSecondaryCycles++;
    2428:	6839      	ldr	r1, [r7, #0]
    242a:	3101      	adds	r1, #1
    242c:	6039      	str	r1, [r7, #0]
	}
    242e:	e7bd      	b.n	23ac <vSecondaryBlockTimeTestTask+0x1c>
    2430:	400009e0 	.word	0x400009e0
    2434:	400009e8 	.word	0x400009e8
    2438:	400009ec 	.word	0x400009ec
    243c:	400009f4 	.word	0x400009f4

00002440 <vPrimaryBlockTimeTestTask>:
	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed char * )"BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
}
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
    2440:	b5f0      	push	{r4, r5, r6, r7, lr}
    2442:	465f      	mov	r7, fp
    2444:	4656      	mov	r6, sl
    2446:	464d      	mov	r5, r9
    2448:	4644      	mov	r4, r8
    244a:	b4f0      	push	{r4, r5, r6, r7}
        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    244c:	220a      	movs	r2, #10

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
			{
				xErrorOccurred = pdTRUE;
    244e:	2301      	movs	r3, #1
    2450:	4e8e      	ldr	r6, [pc, #568]	; (268c <vPrimaryBlockTimeTestTask+0x24c>)
    2452:	4d8f      	ldr	r5, [pc, #572]	; (2690 <vPrimaryBlockTimeTestTask+0x250>)
    2454:	4c8f      	ldr	r4, [pc, #572]	; (2694 <vPrimaryBlockTimeTestTask+0x254>)
    2456:	4f90      	ldr	r7, [pc, #576]	; (2698 <vPrimaryBlockTimeTestTask+0x258>)
	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed char * )"BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
}
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
    2458:	b083      	sub	sp, #12
        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    245a:	4693      	mov	fp, r2

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
			{
				xErrorOccurred = pdTRUE;
    245c:	4698      	mov	r8, r3
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    245e:	2000      	movs	r0, #0
    2460:	9001      	str	r0, [sp, #4]
    2462:	1c03      	adds	r3, r0, #0
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    2464:	465a      	mov	r2, fp
    2466:	409a      	lsls	r2, r3
    2468:	4691      	mov	r9, r2

			xTimeWhenBlocking = xTaskGetTickCount();
    246a:	f001 fcad 	bl	3dc8 <xTaskGetTickCount>

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
    246e:	4669      	mov	r1, sp
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;

			xTimeWhenBlocking = xTaskGetTickCount();
    2470:	4682      	mov	sl, r0

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
    2472:	464a      	mov	r2, r9
    2474:	6830      	ldr	r0, [r6, #0]
    2476:	2300      	movs	r3, #0
    2478:	f001 f8f2 	bl	3660 <xQueueGenericReceive>
    247c:	2800      	cmp	r0, #0
    247e:	d001      	beq.n	2484 <vPrimaryBlockTimeTestTask+0x44>
			{
				xErrorOccurred = pdTRUE;
    2480:	4643      	mov	r3, r8
    2482:	602b      	str	r3, [r5, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    2484:	f001 fca0 	bl	3dc8 <xTaskGetTickCount>
    2488:	4652      	mov	r2, sl
    248a:	1a80      	subs	r0, r0, r2

			if( xBlockedTime < xTimeToBlock )
    248c:	4581      	cmp	r9, r0
    248e:	d901      	bls.n	2494 <vPrimaryBlockTimeTestTask+0x54>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
    2490:	4643      	mov	r3, r8
    2492:	602b      	str	r3, [r5, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    2494:	210f      	movs	r1, #15
    2496:	1c0b      	adds	r3, r1, #0
    2498:	444b      	add	r3, r9
    249a:	4298      	cmp	r0, r3
    249c:	d901      	bls.n	24a2 <vPrimaryBlockTimeTestTask+0x62>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
    249e:	4643      	mov	r3, r8
    24a0:	602b      	str	r3, [r5, #0]
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    24a2:	9b01      	ldr	r3, [sp, #4]
    24a4:	3301      	adds	r3, #1
    24a6:	9301      	str	r3, [sp, #4]
    24a8:	2b04      	cmp	r3, #4
    24aa:	dddb      	ble.n	2464 <vPrimaryBlockTimeTestTask+0x24>
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    24ac:	2000      	movs	r0, #0
    24ae:	9001      	str	r0, [sp, #4]
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    24b0:	2200      	movs	r2, #0
    24b2:	6830      	ldr	r0, [r6, #0]
    24b4:	a901      	add	r1, sp, #4
    24b6:	1c13      	adds	r3, r2, #0
    24b8:	f001 f802 	bl	34c0 <xQueueGenericSend>
    24bc:	2801      	cmp	r0, #1
    24be:	d001      	beq.n	24c4 <vPrimaryBlockTimeTestTask+0x84>
			{
				xErrorOccurred = pdTRUE;
    24c0:	4643      	mov	r3, r8
    24c2:	602b      	str	r3, [r5, #0]
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    24c4:	9a01      	ldr	r2, [sp, #4]
    24c6:	3201      	adds	r2, #1
    24c8:	9201      	str	r2, [sp, #4]
    24ca:	2a04      	cmp	r2, #4
    24cc:	ddf0      	ble.n	24b0 <vPrimaryBlockTimeTestTask+0x70>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    24ce:	2100      	movs	r1, #0
    24d0:	9101      	str	r1, [sp, #4]
    24d2:	1c0b      	adds	r3, r1, #0
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    24d4:	465a      	mov	r2, fp
    24d6:	409a      	lsls	r2, r3
    24d8:	4691      	mov	r9, r2

			xTimeWhenBlocking = xTaskGetTickCount();
    24da:	f001 fc75 	bl	3dc8 <xTaskGetTickCount>

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
    24de:	a901      	add	r1, sp, #4
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;

			xTimeWhenBlocking = xTaskGetTickCount();
    24e0:	4682      	mov	sl, r0

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
    24e2:	464a      	mov	r2, r9
    24e4:	6830      	ldr	r0, [r6, #0]
    24e6:	2300      	movs	r3, #0
    24e8:	f000 ffea 	bl	34c0 <xQueueGenericSend>
    24ec:	2800      	cmp	r0, #0
    24ee:	d001      	beq.n	24f4 <vPrimaryBlockTimeTestTask+0xb4>
			{
				xErrorOccurred = pdTRUE;
    24f0:	4643      	mov	r3, r8
    24f2:	602b      	str	r3, [r5, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    24f4:	f001 fc68 	bl	3dc8 <xTaskGetTickCount>
    24f8:	4652      	mov	r2, sl
    24fa:	1a80      	subs	r0, r0, r2

			if( xBlockedTime < xTimeToBlock )
    24fc:	4581      	cmp	r9, r0
    24fe:	d901      	bls.n	2504 <vPrimaryBlockTimeTestTask+0xc4>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
    2500:	4643      	mov	r3, r8
    2502:	602b      	str	r3, [r5, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    2504:	210f      	movs	r1, #15
    2506:	1c0b      	adds	r3, r1, #0
    2508:	444b      	add	r3, r9
    250a:	4298      	cmp	r0, r3
    250c:	d901      	bls.n	2512 <vPrimaryBlockTimeTestTask+0xd2>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
    250e:	4643      	mov	r3, r8
    2510:	602b      	str	r3, [r5, #0]
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2512:	9b01      	ldr	r3, [sp, #4]
    2514:	3301      	adds	r3, #1
    2516:	9301      	str	r3, [sp, #4]
    2518:	2b04      	cmp	r3, #4
    251a:	dddb      	ble.n	24d4 <vPrimaryBlockTimeTestTask+0x94>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
    251c:	2200      	movs	r2, #0
		vTaskResume( xSecondary );
    251e:	6838      	ldr	r0, [r7, #0]
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
    2520:	6022      	str	r2, [r4, #0]
		vTaskResume( xSecondary );
    2522:	f001 fb99 	bl	3c58 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    2526:	6820      	ldr	r0, [r4, #0]
    2528:	2855      	cmp	r0, #85	; 0x55
    252a:	d005      	beq.n	2538 <vPrimaryBlockTimeTestTask+0xf8>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
    252c:	2014      	movs	r0, #20
    252e:	f001 fe3b 	bl	41a8 <vTaskDelay>
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    2532:	6821      	ldr	r1, [r4, #0]
    2534:	2955      	cmp	r1, #85	; 0x55
    2536:	d1f9      	bne.n	252c <vPrimaryBlockTimeTestTask+0xec>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
    2538:	2014      	movs	r0, #20
    253a:	f001 fe35 	bl	41a8 <vTaskDelay>
		xRunIndicator = 0;
    253e:	2300      	movs	r3, #0
    2540:	6023      	str	r3, [r4, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2542:	9301      	str	r3, [sp, #4]
    2544:	e00f      	b.n	2566 <vPrimaryBlockTimeTestTask+0x126>
				xErrorOccurred = pdTRUE;
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    2546:	2105      	movs	r1, #5
    2548:	6838      	ldr	r0, [r7, #0]
    254a:	f001 fb23 	bl	3b94 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    254e:	6821      	ldr	r1, [r4, #0]
    2550:	2955      	cmp	r1, #85	; 0x55
    2552:	d028      	beq.n	25a6 <vPrimaryBlockTimeTestTask+0x166>
				queue function. */
				xErrorOccurred = pdTRUE;
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
    2554:	6838      	ldr	r0, [r7, #0]
    2556:	2102      	movs	r1, #2
    2558:	f001 fb1c 	bl	3b94 <vTaskPrioritySet>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    255c:	9801      	ldr	r0, [sp, #4]
    255e:	3001      	adds	r0, #1
    2560:	9001      	str	r0, [sp, #4]
    2562:	2804      	cmp	r0, #4
    2564:	dc25      	bgt.n	25b2 <vPrimaryBlockTimeTestTask+0x172>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    2566:	2200      	movs	r2, #0
    2568:	6830      	ldr	r0, [r6, #0]
    256a:	4669      	mov	r1, sp
    256c:	1c13      	adds	r3, r2, #0
    256e:	f001 f877 	bl	3660 <xQueueGenericReceive>
    2572:	2801      	cmp	r0, #1
    2574:	d001      	beq.n	257a <vPrimaryBlockTimeTestTask+0x13a>
			{
				xErrorOccurred = pdTRUE;
    2576:	4642      	mov	r2, r8
    2578:	602a      	str	r2, [r5, #0]
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    257a:	2200      	movs	r2, #0
    257c:	6830      	ldr	r0, [r6, #0]
    257e:	a901      	add	r1, sp, #4
    2580:	1c13      	adds	r3, r2, #0
    2582:	f000 ff9d 	bl	34c0 <xQueueGenericSend>
    2586:	2801      	cmp	r0, #1
    2588:	d001      	beq.n	258e <vPrimaryBlockTimeTestTask+0x14e>
			{
				xErrorOccurred = pdTRUE;
    258a:	4643      	mov	r3, r8
    258c:	602b      	str	r3, [r5, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
    258e:	6820      	ldr	r0, [r4, #0]
    2590:	2855      	cmp	r0, #85	; 0x55
    2592:	d1d8      	bne.n	2546 <vPrimaryBlockTimeTestTask+0x106>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    2594:	4642      	mov	r2, r8
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    2596:	2105      	movs	r1, #5
			}

			if( xRunIndicator == bktRUN_INDICATOR )
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    2598:	602a      	str	r2, [r5, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    259a:	6838      	ldr	r0, [r7, #0]
    259c:	f001 fafa 	bl	3b94 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    25a0:	6821      	ldr	r1, [r4, #0]
    25a2:	2955      	cmp	r1, #85	; 0x55
    25a4:	d1d6      	bne.n	2554 <vPrimaryBlockTimeTestTask+0x114>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
    25a6:	4643      	mov	r3, r8
    25a8:	602b      	str	r3, [r5, #0]
    25aa:	e7d3      	b.n	2554 <vPrimaryBlockTimeTestTask+0x114>

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
		{
			vTaskDelay( bktSHORT_WAIT );
    25ac:	2014      	movs	r0, #20
    25ae:	f001 fdfb 	bl	41a8 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
    25b2:	6822      	ldr	r2, [r4, #0]
    25b4:	2a55      	cmp	r2, #85	; 0x55
    25b6:	d1f9      	bne.n	25ac <vPrimaryBlockTimeTestTask+0x16c>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
    25b8:	2014      	movs	r0, #20
    25ba:	f001 fdf5 	bl	41a8 <vTaskDelay>
		xRunIndicator = 0;
    25be:	2100      	movs	r1, #0
    25c0:	6021      	str	r1, [r4, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    25c2:	9101      	str	r1, [sp, #4]
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    25c4:	2200      	movs	r2, #0
    25c6:	6830      	ldr	r0, [r6, #0]
    25c8:	4669      	mov	r1, sp
    25ca:	1c13      	adds	r3, r2, #0
    25cc:	f001 f848 	bl	3660 <xQueueGenericReceive>
    25d0:	2801      	cmp	r0, #1
    25d2:	d001      	beq.n	25d8 <vPrimaryBlockTimeTestTask+0x198>
			{
				xErrorOccurred = pdTRUE;
    25d4:	4643      	mov	r3, r8
    25d6:	602b      	str	r3, [r5, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    25d8:	9801      	ldr	r0, [sp, #4]
    25da:	3001      	adds	r0, #1
    25dc:	9001      	str	r0, [sp, #4]
    25de:	2804      	cmp	r0, #4
    25e0:	ddf0      	ble.n	25c4 <vPrimaryBlockTimeTestTask+0x184>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
    25e2:	6838      	ldr	r0, [r7, #0]
    25e4:	f001 fb38 	bl	3c58 <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    25e8:	6822      	ldr	r2, [r4, #0]
    25ea:	2a55      	cmp	r2, #85	; 0x55
    25ec:	d005      	beq.n	25fa <vPrimaryBlockTimeTestTask+0x1ba>
		{
			vTaskDelay( bktSHORT_WAIT );
    25ee:	2014      	movs	r0, #20
    25f0:	f001 fdda 	bl	41a8 <vTaskDelay>
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    25f4:	6821      	ldr	r1, [r4, #0]
    25f6:	2955      	cmp	r1, #85	; 0x55
    25f8:	d1f9      	bne.n	25ee <vPrimaryBlockTimeTestTask+0x1ae>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
    25fa:	2014      	movs	r0, #20
    25fc:	f001 fdd4 	bl	41a8 <vTaskDelay>
		xRunIndicator = 0;
    2600:	2300      	movs	r3, #0
    2602:	6023      	str	r3, [r4, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2604:	9301      	str	r3, [sp, #4]
    2606:	e00f      	b.n	2628 <vPrimaryBlockTimeTestTask+0x1e8>
				xErrorOccurred = pdTRUE;
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    2608:	2105      	movs	r1, #5
    260a:	6838      	ldr	r0, [r7, #0]
    260c:	f001 fac2 	bl	3b94 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    2610:	6821      	ldr	r1, [r4, #0]
    2612:	2955      	cmp	r1, #85	; 0x55
    2614:	d028      	beq.n	2668 <vPrimaryBlockTimeTestTask+0x228>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
    2616:	6838      	ldr	r0, [r7, #0]
    2618:	2102      	movs	r1, #2
    261a:	f001 fabb 	bl	3b94 <vTaskPrioritySet>
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    261e:	9801      	ldr	r0, [sp, #4]
    2620:	3001      	adds	r0, #1
    2622:	9001      	str	r0, [sp, #4]
    2624:	2804      	cmp	r0, #4
    2626:	dc25      	bgt.n	2674 <vPrimaryBlockTimeTestTask+0x234>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    2628:	2200      	movs	r2, #0
    262a:	6830      	ldr	r0, [r6, #0]
    262c:	a901      	add	r1, sp, #4
    262e:	1c13      	adds	r3, r2, #0
    2630:	f000 ff46 	bl	34c0 <xQueueGenericSend>
    2634:	2801      	cmp	r0, #1
    2636:	d001      	beq.n	263c <vPrimaryBlockTimeTestTask+0x1fc>
			{
				xErrorOccurred = pdTRUE;
    2638:	4643      	mov	r3, r8
    263a:	602b      	str	r3, [r5, #0]
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    263c:	2200      	movs	r2, #0
    263e:	6830      	ldr	r0, [r6, #0]
    2640:	4669      	mov	r1, sp
    2642:	1c13      	adds	r3, r2, #0
    2644:	f001 f80c 	bl	3660 <xQueueGenericReceive>
    2648:	2801      	cmp	r0, #1
    264a:	d001      	beq.n	2650 <vPrimaryBlockTimeTestTask+0x210>
			{
				xErrorOccurred = pdTRUE;
    264c:	4642      	mov	r2, r8
    264e:	602a      	str	r2, [r5, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
    2650:	6820      	ldr	r0, [r4, #0]
    2652:	2855      	cmp	r0, #85	; 0x55
    2654:	d1d8      	bne.n	2608 <vPrimaryBlockTimeTestTask+0x1c8>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    2656:	4643      	mov	r3, r8
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    2658:	2105      	movs	r1, #5
			}

			if( xRunIndicator == bktRUN_INDICATOR )
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    265a:	602b      	str	r3, [r5, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    265c:	6838      	ldr	r0, [r7, #0]
    265e:	f001 fa99 	bl	3b94 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    2662:	6821      	ldr	r1, [r4, #0]
    2664:	2955      	cmp	r1, #85	; 0x55
    2666:	d1d6      	bne.n	2616 <vPrimaryBlockTimeTestTask+0x1d6>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
    2668:	4642      	mov	r2, r8
    266a:	602a      	str	r2, [r5, #0]
    266c:	e7d3      	b.n	2616 <vPrimaryBlockTimeTestTask+0x1d6>

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
		{
			vTaskDelay( bktSHORT_WAIT );
    266e:	2014      	movs	r0, #20
    2670:	f001 fd9a 	bl	41a8 <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
    2674:	6823      	ldr	r3, [r4, #0]
    2676:	2b55      	cmp	r3, #85	; 0x55
    2678:	d1f9      	bne.n	266e <vPrimaryBlockTimeTestTask+0x22e>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
    267a:	2014      	movs	r0, #20
    267c:	f001 fd94 	bl	41a8 <vTaskDelay>

		xPrimaryCycles++;
    2680:	4906      	ldr	r1, [pc, #24]	; (269c <vPrimaryBlockTimeTestTask+0x25c>)
    2682:	680a      	ldr	r2, [r1, #0]
    2684:	3201      	adds	r2, #1
    2686:	600a      	str	r2, [r1, #0]
	}
    2688:	e6e9      	b.n	245e <vPrimaryBlockTimeTestTask+0x1e>
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	400009e8 	.word	0x400009e8
    2690:	400009ec 	.word	0x400009ec
    2694:	400009e0 	.word	0x400009e0
    2698:	400009e4 	.word	0x400009e4
    269c:	400009dc 	.word	0x400009dc

000026a0 <vCreateBlockTimeTasks>:
static void vSecondaryBlockTimeTestTask( void *pvParameters );

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
    26a0:	b510      	push	{r4, lr}
    26a2:	b084      	sub	sp, #16
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( portBASE_TYPE ) );
    26a4:	2104      	movs	r1, #4
    26a6:	2005      	movs	r0, #5
    26a8:	f000 fece 	bl	3448 <xQueueCreate>
    26ac:	4a0e      	ldr	r2, [pc, #56]	; (26e8 <vCreateBlockTimeTasks+0x48>)
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, ( signed char * ) "Block_Time_Queue" );

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, ( signed char * )"BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
    26ae:	2400      	movs	r4, #0
    26b0:	2103      	movs	r1, #3
/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( portBASE_TYPE ) );
    26b2:	6010      	str	r0, [r2, #0]
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, ( signed char * ) "Block_Time_Queue" );

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, ( signed char * )"BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
    26b4:	1c23      	adds	r3, r4, #0
    26b6:	9100      	str	r1, [sp, #0]
    26b8:	2268      	movs	r2, #104	; 0x68
    26ba:	490c      	ldr	r1, [pc, #48]	; (26ec <vCreateBlockTimeTasks+0x4c>)
    26bc:	480c      	ldr	r0, [pc, #48]	; (26f0 <vCreateBlockTimeTasks+0x50>)
    26be:	9401      	str	r4, [sp, #4]
    26c0:	9402      	str	r4, [sp, #8]
    26c2:	9403      	str	r4, [sp, #12]
    26c4:	f001 f926 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed char * )"BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
    26c8:	4b0a      	ldr	r3, [pc, #40]	; (26f4 <vCreateBlockTimeTasks+0x54>)
    26ca:	2002      	movs	r0, #2
    26cc:	9000      	str	r0, [sp, #0]
    26ce:	9301      	str	r3, [sp, #4]
    26d0:	4909      	ldr	r1, [pc, #36]	; (26f8 <vCreateBlockTimeTasks+0x58>)
    26d2:	2268      	movs	r2, #104	; 0x68
    26d4:	1c23      	adds	r3, r4, #0
    26d6:	4809      	ldr	r0, [pc, #36]	; (26fc <vCreateBlockTimeTasks+0x5c>)
    26d8:	9402      	str	r4, [sp, #8]
    26da:	9403      	str	r4, [sp, #12]
    26dc:	f001 f91a 	bl	3914 <xTaskGenericCreate>
}
    26e0:	b004      	add	sp, #16
    26e2:	bc10      	pop	{r4}
    26e4:	bc01      	pop	{r0}
    26e6:	4700      	bx	r0
    26e8:	400009e8 	.word	0x400009e8
    26ec:	0000ed1c 	.word	0x0000ed1c
    26f0:	00002441 	.word	0x00002441
    26f4:	400009e4 	.word	0x400009e4
    26f8:	0000ed24 	.word	0x0000ed24
    26fc:	00002391 	.word	0x00002391

00002700 <xAreBlockTimeTestTasksStillRunning>:
	}
}
/*-----------------------------------------------------------*/

portBASE_TYPE xAreBlockTimeTestTasksStillRunning( void )
{
    2700:	b5f0      	push	{r4, r5, r6, r7, lr}
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    2702:	4a0f      	ldr	r2, [pc, #60]	; (2740 <xAreBlockTimeTestTasksStillRunning+0x40>)
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2704:	4c0f      	ldr	r4, [pc, #60]	; (2744 <xAreBlockTimeTestTasksStillRunning+0x44>)
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    2706:	6813      	ldr	r3, [r2, #0]
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2708:	490f      	ldr	r1, [pc, #60]	; (2748 <xAreBlockTimeTestTasksStillRunning+0x48>)
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    270a:	469c      	mov	ip, r3
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    270c:	6826      	ldr	r6, [r4, #0]
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    270e:	4b0f      	ldr	r3, [pc, #60]	; (274c <xAreBlockTimeTestTasksStillRunning+0x4c>)
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2710:	680d      	ldr	r5, [r1, #0]
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    2712:	681f      	ldr	r7, [r3, #0]
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
	{
		xReturn = pdFAIL;
    2714:	2000      	movs	r0, #0
	if( xPrimaryCycles == xLastPrimaryCycleCount )
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2716:	42ae      	cmp	r6, r5
    2718:	d003      	beq.n	2722 <xAreBlockTimeTestTasksStillRunning+0x22>
/*-----------------------------------------------------------*/

portBASE_TYPE xAreBlockTimeTestTasksStillRunning( void )
{
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;
    271a:	4665      	mov	r5, ip
    271c:	1be8      	subs	r0, r5, r7
    271e:	1e47      	subs	r7, r0, #1
    2720:	41b8      	sbcs	r0, r7
	if( xSecondaryCycles == xLastSecondaryCycleCount )
	{
		xReturn = pdFAIL;
	}

	if( xErrorOccurred == pdTRUE )
    2722:	4e0b      	ldr	r6, [pc, #44]	; (2750 <xAreBlockTimeTestTasksStillRunning+0x50>)
    2724:	6835      	ldr	r5, [r6, #0]
	{
		xReturn = pdFAIL;
    2726:	3d01      	subs	r5, #1
    2728:	1e6e      	subs	r6, r5, #1
    272a:	41b5      	sbcs	r5, r6
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
    272c:	6824      	ldr	r4, [r4, #0]
	xLastPrimaryCycleCount = xPrimaryCycles;
    272e:	6812      	ldr	r2, [r2, #0]
		xReturn = pdFAIL;
	}

	if( xErrorOccurred == pdTRUE )
	{
		xReturn = pdFAIL;
    2730:	426f      	negs	r7, r5
    2732:	4038      	ands	r0, r7
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
    2734:	600c      	str	r4, [r1, #0]
	xLastPrimaryCycleCount = xPrimaryCycles;
    2736:	601a      	str	r2, [r3, #0]

	return xReturn;
}
    2738:	bcf0      	pop	{r4, r5, r6, r7}
    273a:	bc02      	pop	{r1}
    273c:	4708      	bx	r1
    273e:	46c0      	nop			; (mov r8, r8)
    2740:	400009dc 	.word	0x400009dc
    2744:	400009f4 	.word	0x400009f4
    2748:	400009d8 	.word	0x400009d8
    274c:	400009f0 	.word	0x400009f0
    2750:	400009ec 	.word	0x400009ec

00002754 <vCompeteingIntMathTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    2754:	b5f0      	push	{r4, r5, r6, r7, lr}
		lValue /= intgCONST4;

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    2756:	4f10      	ldr	r7, [pc, #64]	; (2798 <vCompeteingIntMathTask+0x44>)
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    2758:	b083      	sub	sp, #12
    275a:	1c06      	adds	r6, r0, #0
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
    275c:	2400      	movs	r4, #0
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    275e:	257b      	movs	r5, #123	; 0x7b
    2760:	9501      	str	r5, [sp, #4]
		lValue += intgCONST2;
    2762:	9801      	ldr	r0, [sp, #4]
    2764:	490d      	ldr	r1, [pc, #52]	; (279c <vCompeteingIntMathTask+0x48>)
    2766:	1843      	adds	r3, r0, r1
    2768:	9301      	str	r3, [sp, #4]
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
    276a:	9901      	ldr	r1, [sp, #4]
    276c:	008a      	lsls	r2, r1, #2
    276e:	1a88      	subs	r0, r1, r2
    2770:	9001      	str	r0, [sp, #4]
		lValue /= intgCONST4;
    2772:	9801      	ldr	r0, [sp, #4]
    2774:	2107      	movs	r1, #7
    2776:	f00b fcb5 	bl	e0e4 <____aeabi_idiv_from_thumb>
    277a:	9001      	str	r0, [sp, #4]

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    277c:	9b01      	ldr	r3, [sp, #4]
    277e:	42bb      	cmp	r3, r7
    2780:	d001      	beq.n	2786 <vCompeteingIntMathTask+0x32>
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    2782:	2401      	movs	r4, #1
    2784:	e7ec      	b.n	2760 <vCompeteingIntMathTask+0xc>
    2786:	2c00      	cmp	r4, #0
    2788:	d1fb      	bne.n	2782 <vCompeteingIntMathTask+0x2e>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
    278a:	f00b fc81 	bl	e090 <__vPortEnterCritical_from_thumb>
				*pxTaskHasExecuted = pdTRUE;
    278e:	2201      	movs	r2, #1
    2790:	6032      	str	r2, [r6, #0]
			portEXIT_CRITICAL();
    2792:	f00b fd29 	bl	e1e8 <__vPortExitCritical_from_thumb>
    2796:	e7e3      	b.n	2760 <vCompeteingIntMathTask+0xc>
    2798:	fffe771b 	.word	0xfffe771b
    279c:	00039447 	.word	0x00039447

000027a0 <vStartIntegerMathTasks>:
static volatile signed portBASE_TYPE xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( signed portBASE_TYPE ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( unsigned portBASE_TYPE uxPriority )
{
    27a0:	b500      	push	{lr}
    27a2:	b085      	sub	sp, #20
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		xTaskCreate( vCompeteingIntMathTask, ( signed char * ) "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( xTaskHandle * ) NULL );
    27a4:	2300      	movs	r3, #0
    27a6:	9000      	str	r0, [sp, #0]
    27a8:	9301      	str	r3, [sp, #4]
    27aa:	9302      	str	r3, [sp, #8]
    27ac:	9303      	str	r3, [sp, #12]
    27ae:	4804      	ldr	r0, [pc, #16]	; (27c0 <vStartIntegerMathTasks+0x20>)
    27b0:	4904      	ldr	r1, [pc, #16]	; (27c4 <vStartIntegerMathTasks+0x24>)
    27b2:	2268      	movs	r2, #104	; 0x68
    27b4:	4b04      	ldr	r3, [pc, #16]	; (27c8 <vStartIntegerMathTasks+0x28>)
    27b6:	f001 f8ad 	bl	3914 <xTaskGenericCreate>
	}
}
    27ba:	b005      	add	sp, #20
    27bc:	bc01      	pop	{r0}
    27be:	4700      	bx	r0
    27c0:	00002755 	.word	0x00002755
    27c4:	0000ed2c 	.word	0x0000ed2c
    27c8:	400009f8 	.word	0x400009f8

000027cc <xAreIntegerMathsTaskStillRunning>:

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
    27cc:	4b03      	ldr	r3, [pc, #12]	; (27dc <xAreIntegerMathsTaskStillRunning+0x10>)
    27ce:	6818      	ldr	r0, [r3, #0]
			xReturn = pdFALSE;
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
    27d0:	2200      	movs	r2, #0
    27d2:	601a      	str	r2, [r3, #0]
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreIntegerMathsTaskStillRunning( void )
{
portBASE_TYPE xReturn = pdTRUE;
    27d4:	1e43      	subs	r3, r0, #1
    27d6:	4198      	sbcs	r0, r3
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
}
    27d8:	4770      	bx	lr
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	400009f8 	.word	0x400009f8

000027e0 <prvMediumPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
    27e0:	b510      	push	{r4, lr}
    27e2:	4c04      	ldr	r4, [pc, #16]	; (27f4 <prvMediumPriorityMutexTask+0x14>)

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
    27e4:	2000      	movs	r0, #0
    27e6:	f001 fdb7 	bl	4358 <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
    27ea:	6823      	ldr	r3, [r4, #0]
    27ec:	3301      	adds	r3, #1
    27ee:	6023      	str	r3, [r4, #0]
    27f0:	e7f8      	b.n	27e4 <prvMediumPriorityMutexTask+0x4>
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	40000a0c 	.word	0x40000a0c

000027f8 <prvHighPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
    27f8:	b570      	push	{r4, r5, r6, lr}
    27fa:	4e0d      	ldr	r6, [pc, #52]	; (2830 <prvHighPriorityMutexTask+0x38>)
    27fc:	1c04      	adds	r4, r0, #0
		/* When this task unsuspends all it does is attempt to obtain
		the mutex.  It should find the mutex is not available so a
		block time is specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
		{
			xErrorDetected = pdTRUE;
    27fe:	2501      	movs	r5, #1

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
    2800:	2000      	movs	r0, #0
    2802:	f001 fda9 	bl	4358 <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain
		the mutex.  It should find the mutex is not available so a
		block time is specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
    2806:	2100      	movs	r1, #0
    2808:	2201      	movs	r2, #1
    280a:	1c20      	adds	r0, r4, #0
    280c:	4252      	negs	r2, r2
    280e:	1c0b      	adds	r3, r1, #0
    2810:	f000 ff26 	bl	3660 <xQueueGenericReceive>
    2814:	2801      	cmp	r0, #1
    2816:	d000      	beq.n	281a <prvHighPriorityMutexTask+0x22>
		{
			xErrorDetected = pdTRUE;
    2818:	6035      	str	r5, [r6, #0]
		}

		/* When we eventually obtain the mutex we just give it back then
		return to suspend ready for the next test. */
		if( xSemaphoreGive( xMutex ) != pdPASS )
    281a:	2100      	movs	r1, #0
    281c:	1c20      	adds	r0, r4, #0
    281e:	1c0a      	adds	r2, r1, #0
    2820:	1c0b      	adds	r3, r1, #0
    2822:	f000 fe4d 	bl	34c0 <xQueueGenericSend>
    2826:	2801      	cmp	r0, #1
    2828:	d0ea      	beq.n	2800 <prvHighPriorityMutexTask+0x8>
		{
			xErrorDetected = pdTRUE;
    282a:	6035      	str	r5, [r6, #0]
    282c:	e7e8      	b.n	2800 <prvHighPriorityMutexTask+0x8>
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	40000a14 	.word	0x40000a14

00002834 <prvLowPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
    2834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2836:	465f      	mov	r7, fp
    2838:	4656      	mov	r6, sl
    283a:	464d      	mov	r5, r9
    283c:	4644      	mov	r4, r8
    283e:	b4f0      	push	{r4, r5, r6, r7}
    2840:	4a29      	ldr	r2, [pc, #164]	; (28e8 <prvLowPriorityMutexTask+0xb4>)
    2842:	4b2a      	ldr	r3, [pc, #168]	; (28ec <prvLowPriorityMutexTask+0xb8>)
    2844:	4690      	mov	r8, r2
    2846:	4d2a      	ldr	r5, [pc, #168]	; (28f0 <prvLowPriorityMutexTask+0xbc>)
	#endif

	for( ;; )
	{
		/* Take the mutex.  It should be available now. */
		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
    2848:	2200      	movs	r2, #0
    284a:	4e2a      	ldr	r6, [pc, #168]	; (28f4 <prvLowPriorityMutexTask+0xc0>)
    284c:	4f2a      	ldr	r7, [pc, #168]	; (28f8 <prvLowPriorityMutexTask+0xc4>)
	}
}
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
    284e:	4682      	mov	sl, r0
    2850:	4699      	mov	r9, r3
	#endif

	for( ;; )
	{
		/* Take the mutex.  It should be available now. */
		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
    2852:	4693      	mov	fp, r2
		{
			xErrorDetected = pdTRUE;
    2854:	2401      	movs	r4, #1
	#endif

	for( ;; )
	{
		/* Take the mutex.  It should be available now. */
		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
    2856:	2100      	movs	r1, #0
    2858:	4650      	mov	r0, sl
    285a:	1c0a      	adds	r2, r1, #0
    285c:	1c0b      	adds	r3, r1, #0
    285e:	f000 feff 	bl	3660 <xQueueGenericReceive>
    2862:	2801      	cmp	r0, #1
    2864:	d000      	beq.n	2868 <prvLowPriorityMutexTask+0x34>
		{
			xErrorDetected = pdTRUE;
    2866:	602c      	str	r4, [r5, #0]
		}

		/* Set our guarded variable to a known start value. */
		ulGuardedVariable = 0;
    2868:	465b      	mov	r3, fp
    286a:	6033      	str	r3, [r6, #0]

		/* Our priority should be as per that assigned when the task was
		created. */
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
    286c:	2000      	movs	r0, #0
    286e:	f001 f97f 	bl	3b70 <uxTaskPriorityGet>
    2872:	2800      	cmp	r0, #0
    2874:	d000      	beq.n	2878 <prvLowPriorityMutexTask+0x44>
		{
			xErrorDetected = pdTRUE;
    2876:	602c      	str	r4, [r5, #0]
		}

		/* Now unsuspend the high priority task.  This will attempt to take the
		mutex, and block when it finds it cannot obtain it. */
		vTaskResume( xHighPriorityMutexTask );
    2878:	6838      	ldr	r0, [r7, #0]
    287a:	f001 f9ed 	bl	3c58 <vTaskResume>

		/* We should now have inherited the prioritoy of the high priority task,
		as by now it will have attempted to get the mutex. */
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
    287e:	2000      	movs	r0, #0
    2880:	f001 f976 	bl	3b70 <uxTaskPriorityGet>
    2884:	2803      	cmp	r0, #3
    2886:	d000      	beq.n	288a <prvLowPriorityMutexTask+0x56>
		{
			xErrorDetected = pdTRUE;
    2888:	602c      	str	r4, [r5, #0]
		}

		/* We can attempt to set our priority to the test priority - between the
		idle priority and the medium/high test priorities, but our actual
		prioroity should remain at the high priority. */
		vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
    288a:	2000      	movs	r0, #0
    288c:	2101      	movs	r1, #1
    288e:	f001 f981 	bl	3b94 <vTaskPrioritySet>
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
    2892:	2000      	movs	r0, #0
    2894:	f001 f96c 	bl	3b70 <uxTaskPriorityGet>
    2898:	2803      	cmp	r0, #3
    289a:	d000      	beq.n	289e <prvLowPriorityMutexTask+0x6a>
		{
			xErrorDetected = pdTRUE;
    289c:	602c      	str	r4, [r5, #0]
		}

		/* Now unsuspend the medium priority task.  This should not run as our
		inherited priority is above that of the medium priority task. */
		vTaskResume( xMediumPriorityMutexTask );
    289e:	4642      	mov	r2, r8
    28a0:	6810      	ldr	r0, [r2, #0]
    28a2:	f001 f9d9 	bl	3c58 <vTaskResume>

		/* If the did run then it will have incremented our guarded variable. */
		if( ulGuardedVariable != 0 )
    28a6:	6830      	ldr	r0, [r6, #0]
    28a8:	2800      	cmp	r0, #0
    28aa:	d000      	beq.n	28ae <prvLowPriorityMutexTask+0x7a>
		{
			xErrorDetected = pdTRUE;
    28ac:	602c      	str	r4, [r5, #0]
		/* When we give back the semaphore our priority should be disinherited
		back to the priority to which we attempted to set ourselves.  This means
		that when the high priority task next blocks, the medium priority task
		should execute and increment the guarded variable.   When we next run
		both the high and medium priority tasks will have been suspended again. */
		if( xSemaphoreGive( xMutex ) != pdPASS )
    28ae:	2100      	movs	r1, #0
    28b0:	4650      	mov	r0, sl
    28b2:	1c0a      	adds	r2, r1, #0
    28b4:	1c0b      	adds	r3, r1, #0
    28b6:	f000 fe03 	bl	34c0 <xQueueGenericSend>
    28ba:	2801      	cmp	r0, #1
    28bc:	d000      	beq.n	28c0 <prvLowPriorityMutexTask+0x8c>
		{
			xErrorDetected = pdTRUE;
    28be:	602c      	str	r4, [r5, #0]
		}

		/* Check that the guarded variable did indeed increment... */
		if( ulGuardedVariable != 1 )
    28c0:	6831      	ldr	r1, [r6, #0]
    28c2:	2901      	cmp	r1, #1
    28c4:	d000      	beq.n	28c8 <prvLowPriorityMutexTask+0x94>
		{
			xErrorDetected = pdTRUE;
    28c6:	602c      	str	r4, [r5, #0]
		}

		/* ... and that our priority has been disinherited to
		genqMUTEX_TEST_PRIORITY. */
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
    28c8:	2000      	movs	r0, #0
    28ca:	f001 f951 	bl	3b70 <uxTaskPriorityGet>
    28ce:	2801      	cmp	r0, #1
    28d0:	d000      	beq.n	28d4 <prvLowPriorityMutexTask+0xa0>
		{
			xErrorDetected = pdTRUE;
    28d2:	602c      	str	r4, [r5, #0]
		}

		/* Set our priority back to our original priority ready for the next
		loop around this test. */
		vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
    28d4:	2000      	movs	r0, #0
    28d6:	1c01      	adds	r1, r0, #0
    28d8:	f001 f95c 	bl	3b94 <vTaskPrioritySet>

		/* Just to show we are still running. */
		ulLoopCounter2++;
    28dc:	464a      	mov	r2, r9
    28de:	6813      	ldr	r3, [r2, #0]
    28e0:	3301      	adds	r3, #1
    28e2:	6013      	str	r3, [r2, #0]

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif		
	}
    28e4:	e7b7      	b.n	2856 <prvLowPriorityMutexTask+0x22>
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	40000a10 	.word	0x40000a10
    28ec:	400009fc 	.word	0x400009fc
    28f0:	40000a14 	.word	0x40000a14
    28f4:	40000a0c 	.word	0x40000a0c
    28f8:	40000a00 	.word	0x40000a00

000028fc <prvSendFrontAndBackTest>:
	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
}
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
    28fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    28fe:	464f      	mov	r7, r9
    2900:	4646      	mov	r6, r8
    2902:	b4c0      	push	{r6, r7}
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    2904:	2300      	movs	r3, #0
    2906:	4698      	mov	r8, r3
    2908:	4f87      	ldr	r7, [pc, #540]	; (2b28 <prvSendFrontAndBackTest+0x22c>)
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    290a:	3302      	adds	r3, #2
    290c:	4e87      	ldr	r6, [pc, #540]	; (2b2c <prvSendFrontAndBackTest+0x230>)
	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
}
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
    290e:	b083      	sub	sp, #12
    2910:	1c04      	adds	r4, r0, #0
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    2912:	2501      	movs	r5, #1
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    2914:	4699      	mov	r9, r3
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    2916:	1c20      	adds	r0, r4, #0
    2918:	1c39      	adds	r1, r7, #0
    291a:	2200      	movs	r2, #0
    291c:	2301      	movs	r3, #1
    291e:	f000 fdcf 	bl	34c0 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    2922:	1c20      	adds	r0, r4, #0
    2924:	f000 ff80 	bl	3828 <uxQueueMessagesWaiting>
    2928:	2801      	cmp	r0, #1
    292a:	d000      	beq.n	292e <prvSendFrontAndBackTest+0x32>
		{
			xErrorDetected = pdTRUE;
    292c:	6035      	str	r5, [r6, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
    292e:	2200      	movs	r2, #0
    2930:	1c20      	adds	r0, r4, #0
    2932:	a901      	add	r1, sp, #4
    2934:	1c13      	adds	r3, r2, #0
    2936:	f000 fe93 	bl	3660 <xQueueGenericReceive>
    293a:	2801      	cmp	r0, #1
    293c:	d000      	beq.n	2940 <prvSendFrontAndBackTest+0x44>
		{
			xErrorDetected = pdTRUE;
    293e:	6035      	str	r5, [r6, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
    2940:	683a      	ldr	r2, [r7, #0]
    2942:	9b01      	ldr	r3, [sp, #4]
    2944:	429a      	cmp	r2, r3
    2946:	d000      	beq.n	294a <prvSendFrontAndBackTest+0x4e>
		{
			xErrorDetected = pdTRUE;
    2948:	6035      	str	r5, [r6, #0]
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    294a:	1c20      	adds	r0, r4, #0
    294c:	f000 ff6c 	bl	3828 <uxQueueMessagesWaiting>
    2950:	2800      	cmp	r0, #0
    2952:	d000      	beq.n	2956 <prvSendFrontAndBackTest+0x5a>
		{
			xErrorDetected = pdTRUE;
    2954:	6035      	str	r5, [r6, #0]
		}

		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    2956:	2200      	movs	r2, #0
    2958:	1c20      	adds	r0, r4, #0
    295a:	1c39      	adds	r1, r7, #0
    295c:	1c13      	adds	r3, r2, #0
    295e:	f000 fdaf 	bl	34c0 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    2962:	1c20      	adds	r0, r4, #0
    2964:	f000 ff60 	bl	3828 <uxQueueMessagesWaiting>
    2968:	2801      	cmp	r0, #1
    296a:	d000      	beq.n	296e <prvSendFrontAndBackTest+0x72>
		{
			xErrorDetected = pdTRUE;
    296c:	6035      	str	r5, [r6, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
    296e:	2200      	movs	r2, #0
    2970:	1c20      	adds	r0, r4, #0
    2972:	a901      	add	r1, sp, #4
    2974:	1c13      	adds	r3, r2, #0
    2976:	f000 fe73 	bl	3660 <xQueueGenericReceive>
    297a:	2801      	cmp	r0, #1
    297c:	d000      	beq.n	2980 <prvSendFrontAndBackTest+0x84>
		{
			xErrorDetected = pdTRUE;
    297e:	6035      	str	r5, [r6, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    2980:	1c20      	adds	r0, r4, #0
    2982:	f000 ff51 	bl	3828 <uxQueueMessagesWaiting>
    2986:	2800      	cmp	r0, #0
    2988:	d000      	beq.n	298c <prvSendFrontAndBackTest+0x90>
		{
			xErrorDetected = pdTRUE;
    298a:	6035      	str	r5, [r6, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
    298c:	6838      	ldr	r0, [r7, #0]
    298e:	9b01      	ldr	r3, [sp, #4]
    2990:	4298      	cmp	r0, r3
    2992:	d000      	beq.n	2996 <prvSendFrontAndBackTest+0x9a>
		{
			xErrorDetected = pdTRUE;
    2994:	6035      	str	r5, [r6, #0]
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    2996:	464b      	mov	r3, r9
    2998:	9301      	str	r3, [sp, #4]
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    299a:	2200      	movs	r2, #0
    299c:	a901      	add	r1, sp, #4
    299e:	1c20      	adds	r0, r4, #0
    29a0:	1c13      	adds	r3, r2, #0
    29a2:	f000 fd8d 	bl	34c0 <xQueueGenericSend>
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    29a6:	9901      	ldr	r1, [sp, #4]
    29a8:	3101      	adds	r1, #1
    29aa:	9101      	str	r1, [sp, #4]
    29ac:	2904      	cmp	r1, #4
    29ae:	d9f4      	bls.n	299a <prvSendFrontAndBackTest+0x9e>
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
    29b0:	1c20      	adds	r0, r4, #0
    29b2:	f000 ff39 	bl	3828 <uxQueueMessagesWaiting>
    29b6:	2803      	cmp	r0, #3
    29b8:	d000      	beq.n	29bc <prvSendFrontAndBackTest+0xc0>
		{
			xErrorDetected = pdTRUE;
    29ba:	6035      	str	r5, [r6, #0]
		}
		ulData = 1;
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    29bc:	a901      	add	r1, sp, #4
    29be:	2200      	movs	r2, #0
    29c0:	1c2b      	adds	r3, r5, #0
    29c2:	1c20      	adds	r0, r4, #0
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
		{
			xErrorDetected = pdTRUE;
		}
		ulData = 1;
    29c4:	9501      	str	r5, [sp, #4]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    29c6:	f000 fd7b 	bl	34c0 <xQueueGenericSend>
		ulData = 0;
    29ca:	4643      	mov	r3, r8
    29cc:	9301      	str	r3, [sp, #4]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    29ce:	1c20      	adds	r0, r4, #0
    29d0:	a901      	add	r1, sp, #4
    29d2:	4642      	mov	r2, r8
    29d4:	1c2b      	adds	r3, r5, #0
    29d6:	f000 fd73 	bl	34c0 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
    29da:	1c20      	adds	r0, r4, #0
    29dc:	f000 ff24 	bl	3828 <uxQueueMessagesWaiting>
    29e0:	2805      	cmp	r0, #5
    29e2:	d000      	beq.n	29e6 <prvSendFrontAndBackTest+0xea>
		{
			xErrorDetected = pdTRUE;
    29e4:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    29e6:	1c20      	adds	r0, r4, #0
    29e8:	a901      	add	r1, sp, #4
    29ea:	2200      	movs	r2, #0
    29ec:	2301      	movs	r3, #1
    29ee:	f000 fd67 	bl	34c0 <xQueueGenericSend>
    29f2:	2800      	cmp	r0, #0
    29f4:	d000      	beq.n	29f8 <prvSendFrontAndBackTest+0xfc>
		{
			xErrorDetected = pdTRUE;
    29f6:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    29f8:	2200      	movs	r2, #0
    29fa:	1c20      	adds	r0, r4, #0
    29fc:	a901      	add	r1, sp, #4
    29fe:	1c13      	adds	r3, r2, #0
    2a00:	f000 fd5e 	bl	34c0 <xQueueGenericSend>
    2a04:	2800      	cmp	r0, #0
    2a06:	d100      	bne.n	2a0a <prvSendFrontAndBackTest+0x10e>
    2a08:	e08c      	b.n	2b24 <prvSendFrontAndBackTest+0x228>
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    2a0a:	4643      	mov	r3, r8
			xErrorDetected = pdTRUE;
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
		{
			xErrorDetected = pdTRUE;
    2a0c:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    2a0e:	9301      	str	r3, [sp, #4]
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2a10:	1c20      	adds	r0, r4, #0
    2a12:	4669      	mov	r1, sp
    2a14:	2200      	movs	r2, #0
    2a16:	2301      	movs	r3, #1
    2a18:	f000 fe22 	bl	3660 <xQueueGenericReceive>
    2a1c:	2801      	cmp	r0, #1
    2a1e:	d000      	beq.n	2a22 <prvSendFrontAndBackTest+0x126>
			{
				xErrorDetected = pdTRUE;
    2a20:	6035      	str	r5, [r6, #0]
			}

			if( ulData != ulData2 )
    2a22:	9b00      	ldr	r3, [sp, #0]
    2a24:	9a01      	ldr	r2, [sp, #4]
    2a26:	429a      	cmp	r2, r3
    2a28:	d000      	beq.n	2a2c <prvSendFrontAndBackTest+0x130>
			{
				xErrorDetected = pdTRUE;
    2a2a:	6035      	str	r5, [r6, #0]
			}
			

			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
    2a2c:	43d8      	mvns	r0, r3
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2a2e:	2200      	movs	r2, #0
			}
			

			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
    2a30:	9000      	str	r0, [sp, #0]
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2a32:	4669      	mov	r1, sp
    2a34:	1c20      	adds	r0, r4, #0
    2a36:	1c13      	adds	r3, r2, #0
    2a38:	f000 fe12 	bl	3660 <xQueueGenericReceive>
    2a3c:	2801      	cmp	r0, #1
    2a3e:	d000      	beq.n	2a42 <prvSendFrontAndBackTest+0x146>
			{
				xErrorDetected = pdTRUE;
    2a40:	6035      	str	r5, [r6, #0]
			}

			if( ulData != ulData2 )
    2a42:	9b01      	ldr	r3, [sp, #4]
    2a44:	9a00      	ldr	r2, [sp, #0]
    2a46:	4293      	cmp	r3, r2
    2a48:	d000      	beq.n	2a4c <prvSendFrontAndBackTest+0x150>
			{
				xErrorDetected = pdTRUE;
    2a4a:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    2a4c:	3301      	adds	r3, #1
    2a4e:	9301      	str	r3, [sp, #4]
    2a50:	2b04      	cmp	r3, #4
    2a52:	d9dd      	bls.n	2a10 <prvSendFrontAndBackTest+0x114>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    2a54:	1c20      	adds	r0, r4, #0
    2a56:	f000 fee7 	bl	3828 <uxQueueMessagesWaiting>
    2a5a:	2800      	cmp	r0, #0
    2a5c:	d000      	beq.n	2a60 <prvSendFrontAndBackTest+0x164>
		{
			xErrorDetected = pdTRUE;
    2a5e:	6035      	str	r5, [r6, #0]
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
    2a60:	210a      	movs	r1, #10
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    2a62:	2200      	movs	r2, #0
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
    2a64:	9101      	str	r1, [sp, #4]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    2a66:	1c20      	adds	r0, r4, #0
    2a68:	a901      	add	r1, sp, #4
    2a6a:	1c13      	adds	r3, r2, #0
    2a6c:	f000 fd28 	bl	34c0 <xQueueGenericSend>
    2a70:	2801      	cmp	r0, #1
    2a72:	d000      	beq.n	2a76 <prvSendFrontAndBackTest+0x17a>
		{
			xErrorDetected = pdTRUE;
    2a74:	6035      	str	r5, [r6, #0]
		}
		ulData = 11;
    2a76:	230b      	movs	r3, #11
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    2a78:	2200      	movs	r2, #0
		ulData = 10;
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
		{
			xErrorDetected = pdTRUE;
		}
		ulData = 11;
    2a7a:	9301      	str	r3, [sp, #4]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    2a7c:	1c20      	adds	r0, r4, #0
    2a7e:	a901      	add	r1, sp, #4
    2a80:	1c13      	adds	r3, r2, #0
    2a82:	f000 fd1d 	bl	34c0 <xQueueGenericSend>
    2a86:	2801      	cmp	r0, #1
    2a88:	d000      	beq.n	2a8c <prvSendFrontAndBackTest+0x190>
		{
			xErrorDetected = pdTRUE;
    2a8a:	6035      	str	r5, [r6, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
    2a8c:	1c20      	adds	r0, r4, #0
    2a8e:	f000 fecb 	bl	3828 <uxQueueMessagesWaiting>
    2a92:	2802      	cmp	r0, #2
    2a94:	d000      	beq.n	2a98 <prvSendFrontAndBackTest+0x19c>
		{
			xErrorDetected = pdTRUE;
    2a96:	6035      	str	r5, [r6, #0]
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
    2a98:	2009      	movs	r0, #9
    2a9a:	9001      	str	r0, [sp, #4]
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
    2a9c:	1c20      	adds	r0, r4, #0
    2a9e:	a901      	add	r1, sp, #4
    2aa0:	2200      	movs	r2, #0
    2aa2:	2301      	movs	r3, #1
    2aa4:	f000 fd0c 	bl	34c0 <xQueueGenericSend>
    2aa8:	2801      	cmp	r0, #1
    2aaa:	d000      	beq.n	2aae <prvSendFrontAndBackTest+0x1b2>
			{
				xErrorDetected = pdTRUE;
    2aac:	6035      	str	r5, [r6, #0]
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
    2aae:	9a01      	ldr	r2, [sp, #4]
    2ab0:	3a01      	subs	r2, #1
    2ab2:	9201      	str	r2, [sp, #4]
    2ab4:	2a06      	cmp	r2, #6
    2ab6:	d8f1      	bhi.n	2a9c <prvSendFrontAndBackTest+0x1a0>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
    2ab8:	1c20      	adds	r0, r4, #0
    2aba:	f000 feb5 	bl	3828 <uxQueueMessagesWaiting>
    2abe:	2805      	cmp	r0, #5
    2ac0:	d000      	beq.n	2ac4 <prvSendFrontAndBackTest+0x1c8>
		{
			xErrorDetected = pdTRUE;
    2ac2:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    2ac4:	1c20      	adds	r0, r4, #0
    2ac6:	a901      	add	r1, sp, #4
    2ac8:	2200      	movs	r2, #0
    2aca:	2301      	movs	r3, #1
    2acc:	f000 fcf8 	bl	34c0 <xQueueGenericSend>
    2ad0:	2800      	cmp	r0, #0
    2ad2:	d000      	beq.n	2ad6 <prvSendFrontAndBackTest+0x1da>
		{
			xErrorDetected = pdTRUE;
    2ad4:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    2ad6:	2200      	movs	r2, #0
    2ad8:	1c20      	adds	r0, r4, #0
    2ada:	a901      	add	r1, sp, #4
    2adc:	1c13      	adds	r3, r2, #0
    2ade:	f000 fcef 	bl	34c0 <xQueueGenericSend>
    2ae2:	2800      	cmp	r0, #0
    2ae4:	d000      	beq.n	2ae8 <prvSendFrontAndBackTest+0x1ec>
		{
			xErrorDetected = pdTRUE;
    2ae6:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
    2ae8:	2107      	movs	r1, #7
    2aea:	9101      	str	r1, [sp, #4]
		{
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2aec:	2200      	movs	r2, #0
    2aee:	1c20      	adds	r0, r4, #0
    2af0:	4669      	mov	r1, sp
    2af2:	1c13      	adds	r3, r2, #0
    2af4:	f000 fdb4 	bl	3660 <xQueueGenericReceive>
    2af8:	2801      	cmp	r0, #1
    2afa:	d000      	beq.n	2afe <prvSendFrontAndBackTest+0x202>
			{
				xErrorDetected = pdTRUE;
    2afc:	6035      	str	r5, [r6, #0]
			}

			if( ulData != ulData2 )
    2afe:	9b01      	ldr	r3, [sp, #4]
    2b00:	9a00      	ldr	r2, [sp, #0]
    2b02:	4293      	cmp	r3, r2
    2b04:	d000      	beq.n	2b08 <prvSendFrontAndBackTest+0x20c>
			{
				xErrorDetected = pdTRUE;
    2b06:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
    2b08:	3301      	adds	r3, #1
    2b0a:	9301      	str	r3, [sp, #4]
    2b0c:	2b0b      	cmp	r3, #11
    2b0e:	d9ed      	bls.n	2aec <prvSendFrontAndBackTest+0x1f0>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    2b10:	1c20      	adds	r0, r4, #0
    2b12:	f000 fe89 	bl	3828 <uxQueueMessagesWaiting>
    2b16:	2800      	cmp	r0, #0
    2b18:	d000      	beq.n	2b1c <prvSendFrontAndBackTest+0x220>
		{
			xErrorDetected = pdTRUE;
    2b1a:	6035      	str	r5, [r6, #0]
		}

		ulLoopCounter++;
    2b1c:	683b      	ldr	r3, [r7, #0]
    2b1e:	3301      	adds	r3, #1
    2b20:	603b      	str	r3, [r7, #0]
	}
    2b22:	e6f8      	b.n	2916 <prvSendFrontAndBackTest+0x1a>
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    2b24:	9001      	str	r0, [sp, #4]
    2b26:	e773      	b.n	2a10 <prvSendFrontAndBackTest+0x114>
    2b28:	40000a18 	.word	0x40000a18
    2b2c:	40000a14 	.word	0x40000a14

00002b30 <vStartGenericQueueTasks>:
static xTaskHandle xHighPriorityMutexTask, xMediumPriorityMutexTask;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( unsigned portBASE_TYPE uxPriority )
{
    2b30:	b530      	push	{r4, r5, lr}
    2b32:	b085      	sub	sp, #20
    2b34:	1c05      	adds	r5, r0, #0
xQueueHandle xQueue;
xSemaphoreHandle xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
    2b36:	2104      	movs	r1, #4
    2b38:	2005      	movs	r0, #5
    2b3a:	f000 fc85 	bl	3448 <xQueueCreate>
	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "Gen_Queue_Test" );

	/* Create the demo task and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is
	declared on the stack here. */
	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * )"GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
    2b3e:	2400      	movs	r4, #0
xQueueHandle xQueue;
xSemaphoreHandle xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
    2b40:	1c03      	adds	r3, r0, #0
	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "Gen_Queue_Test" );

	/* Create the demo task and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is
	declared on the stack here. */
	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * )"GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
    2b42:	4919      	ldr	r1, [pc, #100]	; (2ba8 <vStartGenericQueueTasks+0x78>)
    2b44:	2268      	movs	r2, #104	; 0x68
    2b46:	4819      	ldr	r0, [pc, #100]	; (2bac <vStartGenericQueueTasks+0x7c>)
    2b48:	9500      	str	r5, [sp, #0]
    2b4a:	9401      	str	r4, [sp, #4]
    2b4c:	9402      	str	r4, [sp, #8]
    2b4e:	9403      	str	r4, [sp, #12]
    2b50:	f000 fee0 	bl	3914 <xTaskGenericCreate>

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
    2b54:	f000 fd3c 	bl	35d0 <xQueueCreateMutex>
    2b58:	1c05      	adds	r5, r0, #0
	vQueueAddToRegistry( ( xQueueHandle ) xMutex, ( signed portCHAR * ) "Gen_Queue_Mutex" );

	/* Create the mutex demo tasks and pass it the mutex just created.  We are
	passing the mutex handle by value so it does not matter that it is declared
	on the stack here. */
	xTaskCreate( prvLowPriorityMutexTask, ( signed portCHAR * )"MuLow", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
    2b5a:	1c2b      	adds	r3, r5, #0
    2b5c:	4914      	ldr	r1, [pc, #80]	; (2bb0 <vStartGenericQueueTasks+0x80>)
    2b5e:	2268      	movs	r2, #104	; 0x68
    2b60:	4814      	ldr	r0, [pc, #80]	; (2bb4 <vStartGenericQueueTasks+0x84>)
    2b62:	9400      	str	r4, [sp, #0]
    2b64:	9401      	str	r4, [sp, #4]
    2b66:	9402      	str	r4, [sp, #8]
    2b68:	9403      	str	r4, [sp, #12]
    2b6a:	f000 fed3 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( prvMediumPriorityMutexTask, ( signed portCHAR * )"MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
    2b6e:	4912      	ldr	r1, [pc, #72]	; (2bb8 <vStartGenericQueueTasks+0x88>)
    2b70:	2202      	movs	r2, #2
    2b72:	9200      	str	r2, [sp, #0]
    2b74:	9101      	str	r1, [sp, #4]
    2b76:	1c23      	adds	r3, r4, #0
    2b78:	4910      	ldr	r1, [pc, #64]	; (2bbc <vStartGenericQueueTasks+0x8c>)
    2b7a:	2268      	movs	r2, #104	; 0x68
    2b7c:	4810      	ldr	r0, [pc, #64]	; (2bc0 <vStartGenericQueueTasks+0x90>)
    2b7e:	9402      	str	r4, [sp, #8]
    2b80:	9403      	str	r4, [sp, #12]
    2b82:	f000 fec7 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
    2b86:	4b0f      	ldr	r3, [pc, #60]	; (2bc4 <vStartGenericQueueTasks+0x94>)
    2b88:	2003      	movs	r0, #3
    2b8a:	9000      	str	r0, [sp, #0]
    2b8c:	9301      	str	r3, [sp, #4]
    2b8e:	490e      	ldr	r1, [pc, #56]	; (2bc8 <vStartGenericQueueTasks+0x98>)
    2b90:	1c2b      	adds	r3, r5, #0
    2b92:	2268      	movs	r2, #104	; 0x68
    2b94:	480d      	ldr	r0, [pc, #52]	; (2bcc <vStartGenericQueueTasks+0x9c>)
    2b96:	9402      	str	r4, [sp, #8]
    2b98:	9403      	str	r4, [sp, #12]
    2b9a:	f000 febb 	bl	3914 <xTaskGenericCreate>
}
    2b9e:	b005      	add	sp, #20
    2ba0:	bc30      	pop	{r4, r5}
    2ba2:	bc01      	pop	{r0}
    2ba4:	4700      	bx	r0
    2ba6:	46c0      	nop			; (mov r8, r8)
    2ba8:	0000ed34 	.word	0x0000ed34
    2bac:	000028fd 	.word	0x000028fd
    2bb0:	0000ed3c 	.word	0x0000ed3c
    2bb4:	00002835 	.word	0x00002835
    2bb8:	40000a10 	.word	0x40000a10
    2bbc:	0000ed44 	.word	0x0000ed44
    2bc0:	000027e1 	.word	0x000027e1
    2bc4:	40000a00 	.word	0x40000a00
    2bc8:	0000ed4c 	.word	0x0000ed4c
    2bcc:	000027f9 	.word	0x000027f9

00002bd0 <xAreGenericQueueTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreGenericQueueTasksStillRunning( void )
{
    2bd0:	b570      	push	{r4, r5, r6, lr}
static unsigned portLONG ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loopcounters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
    2bd2:	4c0f      	ldr	r4, [pc, #60]	; (2c10 <xAreGenericQueueTasksStillRunning+0x40>)
    2bd4:	490f      	ldr	r1, [pc, #60]	; (2c14 <xAreGenericQueueTasksStillRunning+0x44>)
    2bd6:	6823      	ldr	r3, [r4, #0]
    2bd8:	680a      	ldr	r2, [r1, #0]
    2bda:	429a      	cmp	r2, r3
    2bdc:	d014      	beq.n	2c08 <xAreGenericQueueTasksStillRunning+0x38>
    2bde:	480e      	ldr	r0, [pc, #56]	; (2c18 <xAreGenericQueueTasksStillRunning+0x48>)
	{
		xErrorDetected = pdTRUE;
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
    2be0:	4a0e      	ldr	r2, [pc, #56]	; (2c1c <xAreGenericQueueTasksStillRunning+0x4c>)
    2be2:	4b0f      	ldr	r3, [pc, #60]	; (2c20 <xAreGenericQueueTasksStillRunning+0x50>)
    2be4:	6815      	ldr	r5, [r2, #0]
    2be6:	681e      	ldr	r6, [r3, #0]
    2be8:	42ae      	cmp	r6, r5
    2bea:	d009      	beq.n	2c00 <xAreGenericQueueTasksStillRunning+0x30>
    2bec:	6800      	ldr	r0, [r0, #0]
    2bee:	4245      	negs	r5, r0
    2bf0:	4168      	adcs	r0, r5
	{
		xErrorDetected = pdTRUE;
	}

	ulLastLoopCounter = ulLoopCounter;
    2bf2:	6824      	ldr	r4, [r4, #0]
    2bf4:	600c      	str	r4, [r1, #0]
	ulLastLoopCounter2 = ulLoopCounter2;	
    2bf6:	6811      	ldr	r1, [r2, #0]
    2bf8:	6019      	str	r1, [r3, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return !xErrorDetected;
}
    2bfa:	bc70      	pop	{r4, r5, r6}
    2bfc:	bc02      	pop	{r1}
    2bfe:	4708      	bx	r1
		xErrorDetected = pdTRUE;
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
	{
		xErrorDetected = pdTRUE;
    2c00:	2501      	movs	r5, #1
    2c02:	6005      	str	r5, [r0, #0]
    2c04:	2000      	movs	r0, #0
    2c06:	e7f4      	b.n	2bf2 <xAreGenericQueueTasksStillRunning+0x22>

	/* If the demo task is still running then we expect the loopcounters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
	{
		xErrorDetected = pdTRUE;
    2c08:	4803      	ldr	r0, [pc, #12]	; (2c18 <xAreGenericQueueTasksStillRunning+0x48>)
    2c0a:	2501      	movs	r5, #1
    2c0c:	6005      	str	r5, [r0, #0]
    2c0e:	e7e7      	b.n	2be0 <xAreGenericQueueTasksStillRunning+0x10>
    2c10:	40000a18 	.word	0x40000a18
    2c14:	40000a08 	.word	0x40000a08
    2c18:	40000a14 	.word	0x40000a14
    2c1c:	400009fc 	.word	0x400009fc
    2c20:	40000a04 	.word	0x40000a04

00002c24 <prvHighestPriorityPeekTask>:
	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
}
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
    2c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c26:	4d29      	ldr	r5, [pc, #164]	; (2ccc <prvHighestPriorityPeekTask+0xa8>)
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
    2c28:	4f29      	ldr	r7, [pc, #164]	; (2cd0 <prvHighestPriorityPeekTask+0xac>)
	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
}
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
    2c2a:	b083      	sub	sp, #12
    2c2c:	1c06      	adds	r6, r0, #0

	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the high priority task to execute. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    2c2e:	2401      	movs	r4, #1
    2c30:	2201      	movs	r2, #1
    2c32:	1c30      	adds	r0, r6, #0
    2c34:	a901      	add	r1, sp, #4
    2c36:	4252      	negs	r2, r2
    2c38:	2301      	movs	r3, #1
    2c3a:	f000 fd11 	bl	3660 <xQueueGenericReceive>
    2c3e:	2801      	cmp	r0, #1
    2c40:	d000      	beq.n	2c44 <prvHighestPriorityPeekTask+0x20>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    2c42:	602c      	str	r4, [r5, #0]
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
    2c44:	9b01      	ldr	r3, [sp, #4]
    2c46:	42bb      	cmp	r3, r7
    2c48:	d000      	beq.n	2c4c <prvHighestPriorityPeekTask+0x28>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    2c4a:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    2c4c:	1c30      	adds	r0, r6, #0
    2c4e:	f000 fdeb 	bl	3828 <uxQueueMessagesWaiting>
    2c52:	2801      	cmp	r0, #1
    2c54:	d000      	beq.n	2c58 <prvHighestPriorityPeekTask+0x34>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    2c56:	602c      	str	r4, [r5, #0]
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
    2c58:	2300      	movs	r3, #0
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2c5a:	1c30      	adds	r0, r6, #0
    2c5c:	a901      	add	r1, sp, #4
    2c5e:	1c1a      	adds	r2, r3, #0
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
    2c60:	9301      	str	r3, [sp, #4]
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2c62:	f000 fcfd 	bl	3660 <xQueueGenericReceive>
    2c66:	2801      	cmp	r0, #1
    2c68:	d000      	beq.n	2c6c <prvHighestPriorityPeekTask+0x48>
		{
			/* We expected to receive the value. */
			xErrorDetected = pdTRUE;
    2c6a:	602c      	str	r4, [r5, #0]
		}

		if( ulValue != 0x11223344 )
    2c6c:	9801      	ldr	r0, [sp, #4]
    2c6e:	42b8      	cmp	r0, r7
    2c70:	d000      	beq.n	2c74 <prvHighestPriorityPeekTask+0x50>
		{
			/* We did not receive the expected value - which should have been
			the same value as was peeked. */
			xErrorDetected = pdTRUE;
    2c72:	602c      	str	r4, [r5, #0]
		}

		/* Now we will block again as the queue is once more empty.  The low 
		priority task can then execute again. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    2c74:	2201      	movs	r2, #1
    2c76:	1c30      	adds	r0, r6, #0
    2c78:	a901      	add	r1, sp, #4
    2c7a:	4252      	negs	r2, r2
    2c7c:	2301      	movs	r3, #1
    2c7e:	f000 fcef 	bl	3660 <xQueueGenericReceive>
    2c82:	2801      	cmp	r0, #1
    2c84:	d000      	beq.n	2c88 <prvHighestPriorityPeekTask+0x64>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    2c86:	602c      	str	r4, [r5, #0]
		}

		/* When we get here the low priority task should have again written to the
		queue. */
		if( ulValue != 0x01234567 )
    2c88:	9901      	ldr	r1, [sp, #4]
    2c8a:	4b12      	ldr	r3, [pc, #72]	; (2cd4 <prvHighestPriorityPeekTask+0xb0>)
    2c8c:	4299      	cmp	r1, r3
    2c8e:	d000      	beq.n	2c92 <prvHighestPriorityPeekTask+0x6e>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    2c90:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    2c92:	1c30      	adds	r0, r6, #0
    2c94:	f000 fdc8 	bl	3828 <uxQueueMessagesWaiting>
    2c98:	2801      	cmp	r0, #1
    2c9a:	d000      	beq.n	2c9e <prvHighestPriorityPeekTask+0x7a>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    2c9c:	602c      	str	r4, [r5, #0]

		/* We only peeked the data, so suspending ourselves now should enable
		the high priority task to also peek the data.  The high priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
    2c9e:	2000      	movs	r0, #0
    2ca0:	f001 fb5a 	bl	4358 <vTaskSuspend>


		/* This time we are going to do the same as the above test, but the
		high priority task is going to receive the data, rather than peek it.
		This means that the medium priority task should never peek the value. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    2ca4:	2201      	movs	r2, #1
    2ca6:	1c30      	adds	r0, r6, #0
    2ca8:	a901      	add	r1, sp, #4
    2caa:	4252      	negs	r2, r2
    2cac:	2301      	movs	r3, #1
    2cae:	f000 fcd7 	bl	3660 <xQueueGenericReceive>
    2cb2:	2801      	cmp	r0, #1
    2cb4:	d000      	beq.n	2cb8 <prvHighestPriorityPeekTask+0x94>
		{
			xErrorDetected = pdTRUE;
    2cb6:	602c      	str	r4, [r5, #0]
		}

		if( ulValue != 0xaabbaabb )
    2cb8:	9801      	ldr	r0, [sp, #4]
    2cba:	4b07      	ldr	r3, [pc, #28]	; (2cd8 <prvHighestPriorityPeekTask+0xb4>)
    2cbc:	4298      	cmp	r0, r3
    2cbe:	d000      	beq.n	2cc2 <prvHighestPriorityPeekTask+0x9e>
		{
			xErrorDetected = pdTRUE;
    2cc0:	602c      	str	r4, [r5, #0]
		}

		vTaskSuspend( NULL );		
    2cc2:	2000      	movs	r0, #0
    2cc4:	f001 fb48 	bl	4358 <vTaskSuspend>
	}
    2cc8:	e7b2      	b.n	2c30 <prvHighestPriorityPeekTask+0xc>
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	40000a28 	.word	0x40000a28
    2cd0:	11223344 	.word	0x11223344
    2cd4:	01234567 	.word	0x01234567
    2cd8:	aabbaabb 	.word	0xaabbaabb

00002cdc <prvHighPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
    2cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cde:	4d17      	ldr	r5, [pc, #92]	; (2d3c <prvHighPriorityPeekTask+0x60>)
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    2ce0:	4f17      	ldr	r7, [pc, #92]	; (2d40 <prvHighPriorityPeekTask+0x64>)
	}
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
    2ce2:	b083      	sub	sp, #12
    2ce4:	1c06      	adds	r6, r0, #0
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the medium priority task to execute.  Both the high
		and highest priority tasks will then be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    2ce6:	2401      	movs	r4, #1
    2ce8:	2201      	movs	r2, #1
    2cea:	1c30      	adds	r0, r6, #0
    2cec:	a901      	add	r1, sp, #4
    2cee:	4252      	negs	r2, r2
    2cf0:	2301      	movs	r3, #1
    2cf2:	f000 fcb5 	bl	3660 <xQueueGenericReceive>
    2cf6:	2801      	cmp	r0, #1
    2cf8:	d000      	beq.n	2cfc <prvHighPriorityPeekTask+0x20>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    2cfa:	602c      	str	r4, [r5, #0]
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    2cfc:	9b01      	ldr	r3, [sp, #4]
    2cfe:	42bb      	cmp	r3, r7
    2d00:	d000      	beq.n	2d04 <prvHighPriorityPeekTask+0x28>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    2d02:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    2d04:	1c30      	adds	r0, r6, #0
    2d06:	f000 fd8f 	bl	3828 <uxQueueMessagesWaiting>
    2d0a:	2801      	cmp	r0, #1
    2d0c:	d000      	beq.n	2d10 <prvHighPriorityPeekTask+0x34>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    2d0e:	602c      	str	r4, [r5, #0]

		/* We only peeked the data, so suspending ourselves now should enable
		the medium priority task to also peek the data.  The medium priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
    2d10:	2000      	movs	r0, #0
    2d12:	f001 fb21 	bl	4358 <vTaskSuspend>


		/* This time we are going actually receive the value, so the medium
		priority task will never peek the data - we removed it from the queue. */
		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    2d16:	2201      	movs	r2, #1
    2d18:	1c30      	adds	r0, r6, #0
    2d1a:	a901      	add	r1, sp, #4
    2d1c:	4252      	negs	r2, r2
    2d1e:	2300      	movs	r3, #0
    2d20:	f000 fc9e 	bl	3660 <xQueueGenericReceive>
    2d24:	2801      	cmp	r0, #1
    2d26:	d000      	beq.n	2d2a <prvHighPriorityPeekTask+0x4e>
		{
			xErrorDetected = pdTRUE;
    2d28:	602c      	str	r4, [r5, #0]
		}

		if( ulValue != 0xaabbaabb )
    2d2a:	9801      	ldr	r0, [sp, #4]
    2d2c:	4b05      	ldr	r3, [pc, #20]	; (2d44 <prvHighPriorityPeekTask+0x68>)
    2d2e:	4298      	cmp	r0, r3
    2d30:	d000      	beq.n	2d34 <prvHighPriorityPeekTask+0x58>
		{
			xErrorDetected = pdTRUE;
    2d32:	602c      	str	r4, [r5, #0]
		}

		vTaskSuspend( NULL );				
    2d34:	2000      	movs	r0, #0
    2d36:	f001 fb0f 	bl	4358 <vTaskSuspend>
	}
    2d3a:	e7d5      	b.n	2ce8 <prvHighPriorityPeekTask+0xc>
    2d3c:	40000a28 	.word	0x40000a28
    2d40:	01234567 	.word	0x01234567
    2d44:	aabbaabb 	.word	0xaabbaabb

00002d48 <prvMediumPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
    2d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d4a:	4647      	mov	r7, r8
    2d4c:	b480      	push	{r7}
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    2d4e:	4b11      	ldr	r3, [pc, #68]	; (2d94 <prvMediumPriorityPeekTask+0x4c>)
    2d50:	4d11      	ldr	r5, [pc, #68]	; (2d98 <prvMediumPriorityPeekTask+0x50>)
    2d52:	4e12      	ldr	r6, [pc, #72]	; (2d9c <prvMediumPriorityPeekTask+0x54>)
	}
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
    2d54:	b082      	sub	sp, #8
    2d56:	1c07      	adds	r7, r0, #0
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    2d58:	2401      	movs	r4, #1
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    2d5a:	4698      	mov	r8, r3
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    2d5c:	2201      	movs	r2, #1
    2d5e:	1c38      	adds	r0, r7, #0
    2d60:	a901      	add	r1, sp, #4
    2d62:	4252      	negs	r2, r2
    2d64:	2301      	movs	r3, #1
    2d66:	f000 fc7b 	bl	3660 <xQueueGenericReceive>
    2d6a:	2801      	cmp	r0, #1
    2d6c:	d000      	beq.n	2d70 <prvMediumPriorityPeekTask+0x28>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    2d6e:	602c      	str	r4, [r5, #0]
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    2d70:	9801      	ldr	r0, [sp, #4]
    2d72:	4540      	cmp	r0, r8
    2d74:	d000      	beq.n	2d78 <prvMediumPriorityPeekTask+0x30>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    2d76:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    2d78:	1c38      	adds	r0, r7, #0
    2d7a:	f000 fd55 	bl	3828 <uxQueueMessagesWaiting>
    2d7e:	2801      	cmp	r0, #1
    2d80:	d000      	beq.n	2d84 <prvMediumPriorityPeekTask+0x3c>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    2d82:	602c      	str	r4, [r5, #0]
		}

		/* Just so we know the test is still running. */
		ulLoopCounter++;
    2d84:	6831      	ldr	r1, [r6, #0]
    2d86:	3101      	adds	r1, #1
    2d88:	6031      	str	r1, [r6, #0]

		/* Now we can suspend ourselves so the low priority task can execute
		again. */
		vTaskSuspend( NULL );
    2d8a:	2000      	movs	r0, #0
    2d8c:	f001 fae4 	bl	4358 <vTaskSuspend>
	}
    2d90:	e7e4      	b.n	2d5c <prvMediumPriorityPeekTask+0x14>
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	01234567 	.word	0x01234567
    2d98:	40000a28 	.word	0x40000a28
    2d9c:	40000a2c 	.word	0x40000a2c

00002da0 <prvLowPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
    2da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2da2:	465f      	mov	r7, fp
    2da4:	4656      	mov	r6, sl
    2da6:	464d      	mov	r5, r9
    2da8:	4644      	mov	r4, r8
    2daa:	b4f0      	push	{r4, r5, r6, r7}
    2dac:	4b31      	ldr	r3, [pc, #196]	; (2e74 <prvLowPriorityPeekTask+0xd4>)
    2dae:	4698      	mov	r8, r3

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest 
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
    2db0:	4b31      	ldr	r3, [pc, #196]	; (2e78 <prvLowPriorityPeekTask+0xd8>)
    2db2:	469b      	mov	fp, r3
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2db4:	2300      	movs	r3, #0
    2db6:	469a      	mov	sl, r3
    2db8:	4c30      	ldr	r4, [pc, #192]	; (2e7c <prvLowPriorityPeekTask+0xdc>)
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2dba:	3301      	adds	r3, #1
    2dbc:	4e30      	ldr	r6, [pc, #192]	; (2e80 <prvLowPriorityPeekTask+0xe0>)
    2dbe:	4d31      	ldr	r5, [pc, #196]	; (2e84 <prvLowPriorityPeekTask+0xe4>)
	}
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
    2dc0:	b083      	sub	sp, #12
    2dc2:	1c07      	adds	r7, r0, #0
		ulValue = 0x11223344;
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2dc4:	4699      	mov	r9, r3

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest 
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
    2dc6:	465b      	mov	r3, fp
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2dc8:	2200      	movs	r2, #0

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest 
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
    2dca:	9301      	str	r3, [sp, #4]
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2dcc:	1c38      	adds	r0, r7, #0
    2dce:	a901      	add	r1, sp, #4
    2dd0:	1c13      	adds	r3, r2, #0
    2dd2:	f000 fb75 	bl	34c0 <xQueueGenericSend>
    2dd6:	2801      	cmp	r0, #1
    2dd8:	d001      	beq.n	2dde <prvLowPriorityPeekTask+0x3e>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2dda:	464b      	mov	r3, r9
    2ddc:	6023      	str	r3, [r4, #0]
		}

		/* By the time we get here the data should have been removed from
		the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    2dde:	1c38      	adds	r0, r7, #0
    2de0:	f000 fd22 	bl	3828 <uxQueueMessagesWaiting>
    2de4:	2800      	cmp	r0, #0
    2de6:	d001      	beq.n	2dec <prvLowPriorityPeekTask+0x4c>
		{
			xErrorDetected = pdTRUE;
    2de8:	464b      	mov	r3, r9
    2dea:	6023      	str	r3, [r4, #0]
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
    2dec:	4826      	ldr	r0, [pc, #152]	; (2e88 <prvLowPriorityPeekTask+0xe8>)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2dee:	2200      	movs	r2, #0
			xErrorDetected = pdTRUE;
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
    2df0:	9001      	str	r0, [sp, #4]
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2df2:	a901      	add	r1, sp, #4
    2df4:	1c38      	adds	r0, r7, #0
    2df6:	1c13      	adds	r3, r2, #0
    2df8:	f000 fb62 	bl	34c0 <xQueueGenericSend>
    2dfc:	2801      	cmp	r0, #1
    2dfe:	d001      	beq.n	2e04 <prvLowPriorityPeekTask+0x64>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2e00:	464b      	mov	r3, r9
    2e02:	6023      	str	r3, [r4, #0]
		}

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
    2e04:	4653      	mov	r3, sl
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2e06:	1c38      	adds	r0, r7, #0
    2e08:	a901      	add	r1, sp, #4
    2e0a:	4652      	mov	r2, sl
			xErrorDetected = pdTRUE;
		}

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
    2e0c:	9301      	str	r3, [sp, #4]
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2e0e:	f000 fc27 	bl	3660 <xQueueGenericReceive>
    2e12:	2801      	cmp	r0, #1
    2e14:	d001      	beq.n	2e1a <prvLowPriorityPeekTask+0x7a>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
    2e16:	464b      	mov	r3, r9
    2e18:	6023      	str	r3, [r4, #0]
			/* We did not receive the expected value. */
		}
		
		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
    2e1a:	200a      	movs	r0, #10
    2e1c:	f001 f9c4 	bl	41a8 <vTaskDelay>
		/* Unsuspend the other tasks so we can repeat the test - this time
		however not all the other tasks will peek the data as the high
		priority task is actually going to remove it from the queue.  Send
		to front is used just to be different.  As the queue is empty it
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
    2e20:	4643      	mov	r3, r8
    2e22:	6818      	ldr	r0, [r3, #0]
    2e24:	f000 ff18 	bl	3c58 <vTaskResume>
		vTaskResume( xHighPriorityTask );
    2e28:	6830      	ldr	r0, [r6, #0]
    2e2a:	f000 ff15 	bl	3c58 <vTaskResume>
		vTaskResume( xHighestPriorityTask );
    2e2e:	6828      	ldr	r0, [r5, #0]
    2e30:	f000 ff12 	bl	3c58 <vTaskResume>

		ulValue = 0xaabbaabb;
    2e34:	4915      	ldr	r1, [pc, #84]	; (2e8c <prvLowPriorityPeekTask+0xec>)
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2e36:	1c38      	adds	r0, r7, #0
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
		vTaskResume( xHighPriorityTask );
		vTaskResume( xHighestPriorityTask );

		ulValue = 0xaabbaabb;
    2e38:	9101      	str	r1, [sp, #4]
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2e3a:	2200      	movs	r2, #0
    2e3c:	a901      	add	r1, sp, #4
    2e3e:	2301      	movs	r3, #1
    2e40:	f000 fb3e 	bl	34c0 <xQueueGenericSend>
    2e44:	2801      	cmp	r0, #1
    2e46:	d001      	beq.n	2e4c <prvLowPriorityPeekTask+0xac>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2e48:	464b      	mov	r3, r9
    2e4a:	6023      	str	r3, [r4, #0]
		}

		/* This time we should find that the queue is empty.  The high priority
		task actually removed the data rather than just peeking it. */
		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
    2e4c:	1c38      	adds	r0, r7, #0
    2e4e:	a901      	add	r1, sp, #4
    2e50:	2200      	movs	r2, #0
    2e52:	2301      	movs	r3, #1
    2e54:	f000 fc04 	bl	3660 <xQueueGenericReceive>
    2e58:	2800      	cmp	r0, #0
    2e5a:	d001      	beq.n	2e60 <prvLowPriorityPeekTask+0xc0>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
    2e5c:	464b      	mov	r3, r9
    2e5e:	6023      	str	r3, [r4, #0]
		}

		/* Unsuspend the highest and high priority tasks so we can go back
		and repeat the whole thing.  The medium priority task should not be
		suspended as it was not able to peek the data in this last case. */
		vTaskResume( xHighPriorityTask );
    2e60:	6830      	ldr	r0, [r6, #0]
    2e62:	f000 fef9 	bl	3c58 <vTaskResume>
		vTaskResume( xHighestPriorityTask );		
    2e66:	6828      	ldr	r0, [r5, #0]
    2e68:	f000 fef6 	bl	3c58 <vTaskResume>

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
    2e6c:	200a      	movs	r0, #10
    2e6e:	f001 f99b 	bl	41a8 <vTaskDelay>
	}
    2e72:	e7a8      	b.n	2dc6 <prvLowPriorityPeekTask+0x26>
    2e74:	40000a30 	.word	0x40000a30
    2e78:	11223344 	.word	0x11223344
    2e7c:	40000a28 	.word	0x40000a28
    2e80:	40000a24 	.word	0x40000a24
    2e84:	40000a20 	.word	0x40000a20
    2e88:	01234567 	.word	0x01234567
    2e8c:	aabbaabb 	.word	0xaabbaabb

00002e90 <vStartQueuePeekTasks>:
/* Handles to the test tasks. */
xTaskHandle xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
/*-----------------------------------------------------------*/

void vStartQueuePeekTasks( void )
{
    2e90:	b530      	push	{r4, r5, lr}
    2e92:	b085      	sub	sp, #20
xQueueHandle xQueue;

	/* Create the queue that we are going to use for the test/demo. */
	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( unsigned portLONG ) );
    2e94:	2104      	movs	r1, #4
    2e96:	2005      	movs	r0, #5
    2e98:	f000 fad6 	bl	3448 <xQueueCreate>
    2e9c:	1c05      	adds	r5, r0, #0
	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "QPeek_Test_Queue" );

	/* Create the demo tasks and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is declared
	on the stack here. */
	xTaskCreate( prvLowPriorityPeekTask, ( signed portCHAR * )"PeekL", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekLOW_PRIORITY, NULL );
    2e9e:	2400      	movs	r4, #0
    2ea0:	1c2b      	adds	r3, r5, #0
    2ea2:	4918      	ldr	r1, [pc, #96]	; (2f04 <vStartQueuePeekTasks+0x74>)
    2ea4:	2268      	movs	r2, #104	; 0x68
    2ea6:	4818      	ldr	r0, [pc, #96]	; (2f08 <vStartQueuePeekTasks+0x78>)
    2ea8:	9400      	str	r4, [sp, #0]
    2eaa:	9401      	str	r4, [sp, #4]
    2eac:	9402      	str	r4, [sp, #8]
    2eae:	9403      	str	r4, [sp, #12]
    2eb0:	f000 fd30 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( prvMediumPriorityPeekTask, ( signed portCHAR * )"PeekM", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekMEDIUM_PRIORITY, &xMediumPriorityTask );
    2eb4:	4b15      	ldr	r3, [pc, #84]	; (2f0c <vStartQueuePeekTasks+0x7c>)
    2eb6:	2001      	movs	r0, #1
    2eb8:	9000      	str	r0, [sp, #0]
    2eba:	9301      	str	r3, [sp, #4]
    2ebc:	4914      	ldr	r1, [pc, #80]	; (2f10 <vStartQueuePeekTasks+0x80>)
    2ebe:	1c2b      	adds	r3, r5, #0
    2ec0:	2268      	movs	r2, #104	; 0x68
    2ec2:	4814      	ldr	r0, [pc, #80]	; (2f14 <vStartQueuePeekTasks+0x84>)
    2ec4:	9402      	str	r4, [sp, #8]
    2ec6:	9403      	str	r4, [sp, #12]
    2ec8:	f000 fd24 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( prvHighPriorityPeekTask, ( signed portCHAR * )"PeekH1", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGH_PRIORITY, &xHighPriorityTask );
    2ecc:	4912      	ldr	r1, [pc, #72]	; (2f18 <vStartQueuePeekTasks+0x88>)
    2ece:	2202      	movs	r2, #2
    2ed0:	1c2b      	adds	r3, r5, #0
    2ed2:	9200      	str	r2, [sp, #0]
    2ed4:	9101      	str	r1, [sp, #4]
    2ed6:	2268      	movs	r2, #104	; 0x68
    2ed8:	4910      	ldr	r1, [pc, #64]	; (2f1c <vStartQueuePeekTasks+0x8c>)
    2eda:	4811      	ldr	r0, [pc, #68]	; (2f20 <vStartQueuePeekTasks+0x90>)
    2edc:	9402      	str	r4, [sp, #8]
    2ede:	9403      	str	r4, [sp, #12]
    2ee0:	f000 fd18 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
    2ee4:	4b0f      	ldr	r3, [pc, #60]	; (2f24 <vStartQueuePeekTasks+0x94>)
    2ee6:	2003      	movs	r0, #3
    2ee8:	9000      	str	r0, [sp, #0]
    2eea:	9301      	str	r3, [sp, #4]
    2eec:	490e      	ldr	r1, [pc, #56]	; (2f28 <vStartQueuePeekTasks+0x98>)
    2eee:	1c2b      	adds	r3, r5, #0
    2ef0:	2268      	movs	r2, #104	; 0x68
    2ef2:	480e      	ldr	r0, [pc, #56]	; (2f2c <vStartQueuePeekTasks+0x9c>)
    2ef4:	9402      	str	r4, [sp, #8]
    2ef6:	9403      	str	r4, [sp, #12]
    2ef8:	f000 fd0c 	bl	3914 <xTaskGenericCreate>
}
    2efc:	b005      	add	sp, #20
    2efe:	bc30      	pop	{r4, r5}
    2f00:	bc01      	pop	{r0}
    2f02:	4700      	bx	r0
    2f04:	0000ed54 	.word	0x0000ed54
    2f08:	00002da1 	.word	0x00002da1
    2f0c:	40000a30 	.word	0x40000a30
    2f10:	0000ed5c 	.word	0x0000ed5c
    2f14:	00002d49 	.word	0x00002d49
    2f18:	40000a24 	.word	0x40000a24
    2f1c:	0000ed64 	.word	0x0000ed64
    2f20:	00002cdd 	.word	0x00002cdd
    2f24:	40000a20 	.word	0x40000a20
    2f28:	0000ed6c 	.word	0x0000ed6c
    2f2c:	00002c25 	.word	0x00002c25

00002f30 <xAreQueuePeekTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreQueuePeekTasksStillRunning( void )
{
    2f30:	b500      	push	{lr}
static unsigned portLONG ulLastLoopCounter = 0;

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
    2f32:	4a09      	ldr	r2, [pc, #36]	; (2f58 <xAreQueuePeekTasksStillRunning+0x28>)
    2f34:	4b09      	ldr	r3, [pc, #36]	; (2f5c <xAreQueuePeekTasksStillRunning+0x2c>)
    2f36:	6811      	ldr	r1, [r2, #0]
    2f38:	6818      	ldr	r0, [r3, #0]
    2f3a:	4288      	cmp	r0, r1
    2f3c:	d007      	beq.n	2f4e <xAreQueuePeekTasksStillRunning+0x1e>
    2f3e:	4908      	ldr	r1, [pc, #32]	; (2f60 <xAreQueuePeekTasksStillRunning+0x30>)
	{
		xErrorDetected = pdTRUE;
	}

	ulLastLoopCounter = ulLoopCounter;
    2f40:	6812      	ldr	r2, [r2, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return !xErrorDetected;
    2f42:	6808      	ldr	r0, [r1, #0]
	if( ulLastLoopCounter == ulLoopCounter )
	{
		xErrorDetected = pdTRUE;
	}

	ulLastLoopCounter = ulLoopCounter;
    2f44:	601a      	str	r2, [r3, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return !xErrorDetected;
    2f46:	4243      	negs	r3, r0
    2f48:	4158      	adcs	r0, r3
}
    2f4a:	bc02      	pop	{r1}
    2f4c:	4708      	bx	r1

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
	{
		xErrorDetected = pdTRUE;
    2f4e:	4904      	ldr	r1, [pc, #16]	; (2f60 <xAreQueuePeekTasksStillRunning+0x30>)
    2f50:	2001      	movs	r0, #1
    2f52:	6008      	str	r0, [r1, #0]
    2f54:	e7f4      	b.n	2f40 <xAreQueuePeekTasksStillRunning+0x10>
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	40000a2c 	.word	0x40000a2c
    2f5c:	40000a1c 	.word	0x40000a1c
    2f60:	40000a28 	.word	0x40000a28

00002f64 <vQueueReceiveWhenSuspendedTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
    2f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f66:	464f      	mov	r7, r9
    2f68:	4646      	mov	r6, r8
    2f6a:	b4c0      	push	{r6, r7}
    2f6c:	4a13      	ldr	r2, [pc, #76]	; (2fbc <vQueueReceiveWhenSuspendedTask+0x58>)
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
				}
				if( xTaskResumeAll() )
				{
					xSuspendedQueueReceiveError = pdTRUE;
    2f6e:	2301      	movs	r3, #1
    2f70:	4e13      	ldr	r6, [pc, #76]	; (2fc0 <vQueueReceiveWhenSuspendedTask+0x5c>)
    2f72:	4d14      	ldr	r5, [pc, #80]	; (2fc4 <vQueueReceiveWhenSuspendedTask+0x60>)
    2f74:	4f14      	ldr	r7, [pc, #80]	; (2fc8 <vQueueReceiveWhenSuspendedTask+0x64>)
    2f76:	4691      	mov	r9, r2
    2f78:	4698      	mov	r8, r3
			/* Suspending the scheduler here is fairly pointless and 
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
    2f7a:	f000 ff1d 	bl	3db8 <vTaskSuspendAll>
			{
				vTaskSuspendAll();
    2f7e:	f000 ff1b 	bl	3db8 <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
    2f82:	2200      	movs	r2, #0
    2f84:	6830      	ldr	r0, [r6, #0]
    2f86:	1c29      	adds	r1, r5, #0
    2f88:	1c13      	adds	r3, r2, #0
    2f8a:	f000 fb69 	bl	3660 <xQueueGenericReceive>
    2f8e:	1c04      	adds	r4, r0, #0
				}
				if( xTaskResumeAll() )
    2f90:	f000 ffd0 	bl	3f34 <xTaskResumeAll>
    2f94:	2800      	cmp	r0, #0
    2f96:	d001      	beq.n	2f9c <vQueueReceiveWhenSuspendedTask+0x38>
				{
					xSuspendedQueueReceiveError = pdTRUE;
    2f98:	4642      	mov	r2, r8
    2f9a:	603a      	str	r2, [r7, #0]
				}
			}
			xTaskResumeAll();
    2f9c:	f000 ffca 	bl	3f34 <xTaskResumeAll>
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
    2fa0:	2c00      	cmp	r4, #0
    2fa2:	d0ea      	beq.n	2f7a <vQueueReceiveWhenSuspendedTask+0x16>

		if( ulReceivedValue != ulExpectedValue )
    2fa4:	464a      	mov	r2, r9
    2fa6:	6813      	ldr	r3, [r2, #0]
    2fa8:	6828      	ldr	r0, [r5, #0]
    2faa:	4298      	cmp	r0, r3
    2fac:	d001      	beq.n	2fb2 <vQueueReceiveWhenSuspendedTask+0x4e>
		{
			xSuspendedQueueReceiveError = pdTRUE;
    2fae:	4642      	mov	r2, r8
    2fb0:	603a      	str	r2, [r7, #0]
		}

		++ulExpectedValue;
    2fb2:	3301      	adds	r3, #1
    2fb4:	464a      	mov	r2, r9
    2fb6:	6013      	str	r3, [r2, #0]
    2fb8:	e7df      	b.n	2f7a <vQueueReceiveWhenSuspendedTask+0x16>
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	40000a54 	.word	0x40000a54
    2fc0:	40000a34 	.word	0x40000a34
    2fc4:	40000a58 	.word	0x40000a58
    2fc8:	40000a48 	.word	0x40000a48

00002fcc <vQueueSendWhenSuspendedTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
    2fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fce:	4d0c      	ldr	r5, [pc, #48]	; (3000 <vQueueSendWhenSuspendedTask+0x34>)
    2fd0:	4c0c      	ldr	r4, [pc, #48]	; (3004 <vQueueSendWhenSuspendedTask+0x38>)
    2fd2:	4e0d      	ldr	r6, [pc, #52]	; (3008 <vQueueSendWhenSuspendedTask+0x3c>)
		vTaskSuspendAll();
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
			{
				xSuspendedQueueSendError = pdTRUE;
    2fd4:	2701      	movs	r7, #1
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
    2fd6:	f000 feef 	bl	3db8 <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
    2fda:	2200      	movs	r2, #0
    2fdc:	6828      	ldr	r0, [r5, #0]
    2fde:	1c21      	adds	r1, r4, #0
    2fe0:	1c13      	adds	r3, r2, #0
    2fe2:	f000 fa6d 	bl	34c0 <xQueueGenericSend>
    2fe6:	2801      	cmp	r0, #1
    2fe8:	d000      	beq.n	2fec <vQueueSendWhenSuspendedTask+0x20>
			{
				xSuspendedQueueSendError = pdTRUE;
    2fea:	6037      	str	r7, [r6, #0]
			}
		}
		xTaskResumeAll();
    2fec:	f000 ffa2 	bl	3f34 <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
    2ff0:	2080      	movs	r0, #128	; 0x80
    2ff2:	f001 f8d9 	bl	41a8 <vTaskDelay>

		++ulValueToSend;
    2ff6:	6823      	ldr	r3, [r4, #0]
    2ff8:	3301      	adds	r3, #1
    2ffa:	6023      	str	r3, [r4, #0]
	}
    2ffc:	e7eb      	b.n	2fd6 <vQueueSendWhenSuspendedTask+0xa>
    2ffe:	46c0      	nop			; (mov r8, r8)
    3000:	40000a34 	.word	0x40000a34
    3004:	40000a4c 	.word	0x40000a4c
    3008:	40000a40 	.word	0x40000a40

0000300c <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself. 
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
    300c:	b510      	push	{r4, lr}
    300e:	1c04      	adds	r4, r0, #0
	the task. */
	pulCounter = ( unsigned long * ) pvParameters;

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
    3010:	2000      	movs	r0, #0
    3012:	f001 f9a1 	bl	4358 <vTaskSuspend>
    3016:	6823      	ldr	r3, [r4, #0]
    3018:	2201      	movs	r2, #1
    301a:	401a      	ands	r2, r3

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
    301c:	3301      	adds	r3, #1
		
		if( *pulCounter >= priMAX_COUNT )
    301e:	2bfe      	cmp	r3, #254	; 0xfe
    3020:	d807      	bhi.n	3032 <vLimitedIncrementTask+0x26>
    3022:	2a00      	cmp	r2, #0
    3024:	d002      	beq.n	302c <vLimitedIncrementTask+0x20>
	vTaskSuspend( NULL );

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
    3026:	3301      	adds	r3, #1
		
		if( *pulCounter >= priMAX_COUNT )
    3028:	2bfe      	cmp	r3, #254	; 0xfe
    302a:	d802      	bhi.n	3032 <vLimitedIncrementTask+0x26>
	vTaskSuspend( NULL );

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
    302c:	3302      	adds	r3, #2
		
		if( *pulCounter >= priMAX_COUNT )
    302e:	2bfe      	cmp	r3, #254	; 0xfe
    3030:	d9fc      	bls.n	302c <vLimitedIncrementTask+0x20>
    3032:	6023      	str	r3, [r4, #0]
		{
			vTaskSuspend( NULL );
    3034:	2000      	movs	r0, #0
    3036:	f001 f98f 	bl	4358 <vTaskSuspend>
    303a:	e7ec      	b.n	3016 <vLimitedIncrementTask+0xa>

0000303c <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
    303c:	b5f0      	push	{r4, r5, r6, r7, lr}
    303e:	4657      	mov	r7, sl
    3040:	464e      	mov	r6, r9
    3042:	4645      	mov	r5, r8
    3044:	b4e0      	push	{r5, r6, r7}
    3046:	4b48      	ldr	r3, [pc, #288]	; (3168 <vCounterControlTask+0x12c>)
unsigned long ulLastCounter;
short sLoops;
short sError = pdFALSE;
    3048:	2200      	movs	r2, #0
    304a:	4690      	mov	r8, r2
    304c:	4c47      	ldr	r4, [pc, #284]	; (316c <vCounterControlTask+0x130>)
    304e:	4d48      	ldr	r5, [pc, #288]	; (3170 <vCounterControlTask+0x134>)
    3050:	4e48      	ldr	r6, [pc, #288]	; (3174 <vCounterControlTask+0x138>)
    3052:	469a      	mov	sl, r3
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( unsigned long ) 0;
    3054:	4691      	mov	r9, r2
    3056:	e055      	b.n	3104 <vCounterControlTask+0xc8>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    3058:	f000 ff6c 	bl	3f34 <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    305c:	6828      	ldr	r0, [r5, #0]
    305e:	f001 f97b 	bl	4358 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    3062:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    3064:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    3066:	f000 fdf7 	bl	3c58 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    306a:	2080      	movs	r0, #128	; 0x80
    306c:	f001 f89c 	bl	41a8 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    3070:	f000 fea2 	bl	3db8 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    3074:	6823      	ldr	r3, [r4, #0]
    3076:	429f      	cmp	r7, r3
    3078:	d06c      	beq.n	3154 <vCounterControlTask+0x118>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    307a:	f000 ff5b 	bl	3f34 <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    307e:	6828      	ldr	r0, [r5, #0]
    3080:	f001 f96a 	bl	4358 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    3084:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    3086:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    3088:	f000 fde6 	bl	3c58 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    308c:	2080      	movs	r0, #128	; 0x80
    308e:	f001 f88b 	bl	41a8 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    3092:	f000 fe91 	bl	3db8 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    3096:	6823      	ldr	r3, [r4, #0]
    3098:	429f      	cmp	r7, r3
    309a:	d058      	beq.n	314e <vCounterControlTask+0x112>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    309c:	f000 ff4a 	bl	3f34 <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    30a0:	6828      	ldr	r0, [r5, #0]
    30a2:	f001 f959 	bl	4358 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    30a6:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    30a8:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    30aa:	f000 fdd5 	bl	3c58 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    30ae:	2080      	movs	r0, #128	; 0x80
    30b0:	f001 f87a 	bl	41a8 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    30b4:	f000 fe80 	bl	3db8 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    30b8:	6823      	ldr	r3, [r4, #0]
    30ba:	429f      	cmp	r7, r3
    30bc:	d04d      	beq.n	315a <vCounterControlTask+0x11e>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    30be:	f000 ff39 	bl	3f34 <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    30c2:	6828      	ldr	r0, [r5, #0]
    30c4:	f001 f948 	bl	4358 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    30c8:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    30ca:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    30cc:	f000 fdc4 	bl	3c58 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    30d0:	2080      	movs	r0, #128	; 0x80
    30d2:	f001 f869 	bl	41a8 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    30d6:	f000 fe6f 	bl	3db8 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    30da:	6823      	ldr	r3, [r4, #0]
    30dc:	429f      	cmp	r7, r3
    30de:	d033      	beq.n	3148 <vCounterControlTask+0x10c>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    30e0:	f000 ff28 	bl	3f34 <xTaskResumeAll>


		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared variable. */
		vTaskSuspend( xContinousIncrementHandle );
    30e4:	6828      	ldr	r0, [r5, #0]
    30e6:	f001 f937 	bl	4358 <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( unsigned long ) 0;
    30ea:	464a      	mov	r2, r9
    30ec:	6022      	str	r2, [r4, #0]

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
    30ee:	6830      	ldr	r0, [r6, #0]
    30f0:	f000 fdb2 	bl	3c58 <vTaskResume>

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
    30f4:	6823      	ldr	r3, [r4, #0]
    30f6:	2bff      	cmp	r3, #255	; 0xff
    30f8:	d018      	beq.n	312c <vCounterControlTask+0xf0>
		{
			sError = pdTRUE;
    30fa:	2301      	movs	r3, #1
    30fc:	4698      	mov	r8, r3
				usCheckVariable++;
			portEXIT_CRITICAL();
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinousIncrementHandle );
    30fe:	6828      	ldr	r0, [r5, #0]
    3100:	f000 fdaa 	bl	3c58 <vTaskResume>
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( unsigned long ) 0;
    3104:	464a      	mov	r2, r9
    3106:	6022      	str	r2, [r4, #0]
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    3108:	6828      	ldr	r0, [r5, #0]
    310a:	f001 f925 	bl	4358 <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    310e:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    3110:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    3112:	f000 fda1 	bl	3c58 <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    3116:	2080      	movs	r0, #128	; 0x80
    3118:	f001 f846 	bl	41a8 <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    311c:	f000 fe4c 	bl	3db8 <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    3120:	6823      	ldr	r3, [r4, #0]
    3122:	429f      	cmp	r7, r3
    3124:	d198      	bne.n	3058 <vCounterControlTask+0x1c>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
    3126:	2301      	movs	r3, #1
    3128:	4698      	mov	r8, r3
    312a:	e795      	b.n	3058 <vCounterControlTask+0x1c>
		if( ulCounter != priMAX_COUNT )
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    312c:	3bff      	subs	r3, #255	; 0xff
    312e:	4598      	cmp	r8, r3
    3130:	d116      	bne.n	3160 <vCounterControlTask+0x124>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
    3132:	f00a ffad 	bl	e090 <__vPortEnterCritical_from_thumb>
				usCheckVariable++;
    3136:	4652      	mov	r2, sl
    3138:	8817      	ldrh	r7, [r2, #0]
    313a:	3701      	adds	r7, #1
    313c:	0439      	lsls	r1, r7, #16
    313e:	0c08      	lsrs	r0, r1, #16
    3140:	8010      	strh	r0, [r2, #0]
			portEXIT_CRITICAL();
    3142:	f00b f851 	bl	e1e8 <__vPortExitCritical_from_thumb>
    3146:	e7da      	b.n	30fe <vCounterControlTask+0xc2>
			{
				if( ulLastCounter == ulCounter )
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
    3148:	2301      	movs	r3, #1
    314a:	4698      	mov	r8, r3
    314c:	e7c8      	b.n	30e0 <vCounterControlTask+0xa4>
    314e:	2301      	movs	r3, #1
    3150:	4698      	mov	r8, r3
    3152:	e7a3      	b.n	309c <vCounterControlTask+0x60>
    3154:	2201      	movs	r2, #1
    3156:	4690      	mov	r8, r2
    3158:	e78f      	b.n	307a <vCounterControlTask+0x3e>
    315a:	2201      	movs	r2, #1
    315c:	4690      	mov	r8, r2
    315e:	e7ae      	b.n	30be <vCounterControlTask+0x82>
		if( ulCounter != priMAX_COUNT )
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    3160:	2201      	movs	r2, #1
    3162:	4690      	mov	r8, r2
    3164:	e7cb      	b.n	30fe <vCounterControlTask+0xc2>
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	40000a38 	.word	0x40000a38
    316c:	40000a44 	.word	0x40000a44
    3170:	40000a50 	.word	0x40000a50
    3174:	40000a3c 	.word	0x40000a3c

00003178 <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
    3178:	b570      	push	{r4, r5, r6, lr}
    317a:	1c04      	adds	r4, r0, #0
	the task. */
	pulCounter = ( unsigned long * ) pvParameters;

	/* Query our priority so we can raise it when exclusive access to the 
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
    317c:	2000      	movs	r0, #0
    317e:	f000 fcf7 	bl	3b70 <uxTaskPriorityGet>
    3182:	1c05      	adds	r5, r0, #0
    3184:	1c46      	adds	r6, r0, #1

	for( ;; )
	{
		/* Raise our priority above the controller task to ensure a context
		switch does not occur while we are accessing this variable. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
    3186:	1c31      	adds	r1, r6, #0
    3188:	2000      	movs	r0, #0
    318a:	f000 fd03 	bl	3b94 <vTaskPrioritySet>
			( *pulCounter )++;		
    318e:	6823      	ldr	r3, [r4, #0]
    3190:	3301      	adds	r3, #1
    3192:	6023      	str	r3, [r4, #0]
		vTaskPrioritySet( NULL, uxOurPriority );
    3194:	2000      	movs	r0, #0
    3196:	1c29      	adds	r1, r5, #0
    3198:	f000 fcfc 	bl	3b94 <vTaskPrioritySet>
    319c:	e7f3      	b.n	3186 <vContinuousIncrementTask+0xe>
    319e:	46c0      	nop			; (mov r8, r8)

000031a0 <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
    31a0:	b530      	push	{r4, r5, lr}
    31a2:	b085      	sub	sp, #20
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
    31a4:	2104      	movs	r1, #4
    31a6:	2001      	movs	r0, #1
    31a8:	f000 f94e 	bl	3448 <xQueueCreate>
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinousIncrementHandle );
    31ac:	4d1e      	ldr	r5, [pc, #120]	; (3228 <vStartDynamicPriorityTasks+0x88>)
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
    31ae:	4a1f      	ldr	r2, [pc, #124]	; (322c <vStartDynamicPriorityTasks+0x8c>)
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinousIncrementHandle );
    31b0:	491f      	ldr	r1, [pc, #124]	; (3230 <vStartDynamicPriorityTasks+0x90>)
    31b2:	2400      	movs	r4, #0
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
    31b4:	6010      	str	r0, [r2, #0]
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinousIncrementHandle );
    31b6:	1c2b      	adds	r3, r5, #0
    31b8:	9101      	str	r1, [sp, #4]
    31ba:	2268      	movs	r2, #104	; 0x68
    31bc:	491d      	ldr	r1, [pc, #116]	; (3234 <vStartDynamicPriorityTasks+0x94>)
    31be:	481e      	ldr	r0, [pc, #120]	; (3238 <vStartDynamicPriorityTasks+0x98>)
    31c0:	9400      	str	r4, [sp, #0]
    31c2:	9402      	str	r4, [sp, #8]
    31c4:	9403      	str	r4, [sp, #12]
    31c6:	f000 fba5 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( vLimitedIncrementTask, ( signed char * ) "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
    31ca:	4b1c      	ldr	r3, [pc, #112]	; (323c <vStartDynamicPriorityTasks+0x9c>)
    31cc:	2001      	movs	r0, #1
    31ce:	9000      	str	r0, [sp, #0]
    31d0:	9301      	str	r3, [sp, #4]
    31d2:	491b      	ldr	r1, [pc, #108]	; (3240 <vStartDynamicPriorityTasks+0xa0>)
    31d4:	1c2b      	adds	r3, r5, #0
    31d6:	2268      	movs	r2, #104	; 0x68
    31d8:	481a      	ldr	r0, [pc, #104]	; (3244 <vStartDynamicPriorityTasks+0xa4>)
    31da:	9402      	str	r4, [sp, #8]
    31dc:	9403      	str	r4, [sp, #12]
    31de:	f000 fb99 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( vCounterControlTask, ( signed char * ) "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    31e2:	1c23      	adds	r3, r4, #0
    31e4:	4918      	ldr	r1, [pc, #96]	; (3248 <vStartDynamicPriorityTasks+0xa8>)
    31e6:	2268      	movs	r2, #104	; 0x68
    31e8:	4818      	ldr	r0, [pc, #96]	; (324c <vStartDynamicPriorityTasks+0xac>)
    31ea:	9400      	str	r4, [sp, #0]
    31ec:	9401      	str	r4, [sp, #4]
    31ee:	9402      	str	r4, [sp, #8]
    31f0:	9403      	str	r4, [sp, #12]
    31f2:	f000 fb8f 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( vQueueSendWhenSuspendedTask, ( signed char * ) "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    31f6:	1c23      	adds	r3, r4, #0
    31f8:	4915      	ldr	r1, [pc, #84]	; (3250 <vStartDynamicPriorityTasks+0xb0>)
    31fa:	2268      	movs	r2, #104	; 0x68
    31fc:	4815      	ldr	r0, [pc, #84]	; (3254 <vStartDynamicPriorityTasks+0xb4>)
    31fe:	9400      	str	r4, [sp, #0]
    3200:	9401      	str	r4, [sp, #4]
    3202:	9402      	str	r4, [sp, #8]
    3204:	9403      	str	r4, [sp, #12]
    3206:	f000 fb85 	bl	3914 <xTaskGenericCreate>
	xTaskCreate( vQueueReceiveWhenSuspendedTask, ( signed char * ) "SUSP_RX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    320a:	4913      	ldr	r1, [pc, #76]	; (3258 <vStartDynamicPriorityTasks+0xb8>)
    320c:	2268      	movs	r2, #104	; 0x68
    320e:	1c23      	adds	r3, r4, #0
    3210:	4812      	ldr	r0, [pc, #72]	; (325c <vStartDynamicPriorityTasks+0xbc>)
    3212:	9400      	str	r4, [sp, #0]
    3214:	9401      	str	r4, [sp, #4]
    3216:	9402      	str	r4, [sp, #8]
    3218:	9403      	str	r4, [sp, #12]
    321a:	f000 fb7b 	bl	3914 <xTaskGenericCreate>
}
    321e:	b005      	add	sp, #20
    3220:	bc30      	pop	{r4, r5}
    3222:	bc01      	pop	{r0}
    3224:	4700      	bx	r0
    3226:	46c0      	nop			; (mov r8, r8)
    3228:	40000a44 	.word	0x40000a44
    322c:	40000a34 	.word	0x40000a34
    3230:	40000a50 	.word	0x40000a50
    3234:	0000ed74 	.word	0x0000ed74
    3238:	00003179 	.word	0x00003179
    323c:	40000a3c 	.word	0x40000a3c
    3240:	0000ed7c 	.word	0x0000ed7c
    3244:	0000300d 	.word	0x0000300d
    3248:	0000ed84 	.word	0x0000ed84
    324c:	0000303d 	.word	0x0000303d
    3250:	0000ed8c 	.word	0x0000ed8c
    3254:	00002fcd 	.word	0x00002fcd
    3258:	0000ed94 	.word	0x0000ed94
    325c:	00002f65 	.word	0x00002f65

00003260 <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )
{
    3260:	b530      	push	{r4, r5, lr}
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    3262:	4a0c      	ldr	r2, [pc, #48]	; (3294 <xAreDynamicPriorityTasksStillRunning+0x34>)
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
    3264:	490c      	ldr	r1, [pc, #48]	; (3298 <xAreDynamicPriorityTasksStillRunning+0x38>)
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    3266:	8813      	ldrh	r3, [r2, #0]
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
    3268:	6808      	ldr	r0, [r1, #0]
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    326a:	1c1d      	adds	r5, r3, #0
    326c:	4b0b      	ldr	r3, [pc, #44]	; (329c <xAreDynamicPriorityTasksStillRunning+0x3c>)
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
	{
		xReturn = pdFALSE;
    326e:	2100      	movs	r1, #0
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    3270:	881c      	ldrh	r4, [r3, #0]
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
    3272:	2801      	cmp	r0, #1
    3274:	d002      	beq.n	327c <xAreDynamicPriorityTasksStillRunning+0x1c>
portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )
{
/* Keep a history of the check variables so we know if it has been incremented 
since the last call. */
static unsigned short usLastTaskCheck = ( unsigned short ) 0;
portBASE_TYPE xReturn = pdTRUE;
    3276:	1b29      	subs	r1, r5, r4
    3278:	1e4c      	subs	r4, r1, #1
    327a:	41a1      	sbcs	r1, r4
	if( xSuspendedQueueSendError == pdTRUE )
	{
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
    327c:	4c08      	ldr	r4, [pc, #32]	; (32a0 <xAreDynamicPriorityTasksStillRunning+0x40>)
    327e:	6825      	ldr	r5, [r4, #0]
	{
		xReturn = pdFALSE;
    3280:	3d01      	subs	r5, #1
    3282:	1e6c      	subs	r4, r5, #1
    3284:	41a5      	sbcs	r5, r4
	}

	usLastTaskCheck = usCheckVariable;
    3286:	8812      	ldrh	r2, [r2, #0]
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
	{
		xReturn = pdFALSE;
    3288:	4268      	negs	r0, r5
    328a:	4008      	ands	r0, r1
	}

	usLastTaskCheck = usCheckVariable;
    328c:	801a      	strh	r2, [r3, #0]
	return xReturn;
}
    328e:	bc30      	pop	{r4, r5}
    3290:	bc02      	pop	{r1}
    3292:	4708      	bx	r1
    3294:	40000a38 	.word	0x40000a38
    3298:	40000a40 	.word	0x40000a40
    329c:	40000a3a 	.word	0x40000a3a
    32a0:	40000a48 	.word	0x40000a48

000032a4 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    32a4:	1c01      	adds	r1, r0, #0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    32a6:	2301      	movs	r3, #1
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    32a8:	3108      	adds	r1, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    32aa:	425a      	negs	r2, r3
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );

	pxList->uxNumberOfItems = 0;
    32ac:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    32ae:	6082      	str	r2, [r0, #8]
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    32b0:	6041      	str	r1, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    32b2:	60c1      	str	r1, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    32b4:	6101      	str	r1, [r0, #16]

	pxList->uxNumberOfItems = 0;
    32b6:	6003      	str	r3, [r0, #0]
}
    32b8:	4770      	bx	lr
    32ba:	46c0      	nop			; (mov r8, r8)

000032bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    32bc:	2300      	movs	r3, #0
    32be:	6103      	str	r3, [r0, #16]
}
    32c0:	4770      	bx	lr
    32c2:	46c0      	nop			; (mov r8, r8)

000032c4 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    32c4:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
    32c6:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    32c8:	608b      	str	r3, [r1, #8]
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;

	pxNewListItem->pxNext = pxIndex->pxNext;
    32ca:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    32cc:	685a      	ldr	r2, [r3, #4]
    32ce:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    32d0:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    32d2:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    32d4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    32d6:	6803      	ldr	r3, [r0, #0]
    32d8:	3301      	adds	r3, #1
    32da:	6003      	str	r3, [r0, #0]
}
    32dc:	4770      	bx	lr
    32de:	46c0      	nop			; (mov r8, r8)

000032e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    32e0:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    32e2:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as 
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    32e4:	1c63      	adds	r3, r4, #1
    32e6:	d016      	beq.n	3316 <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips. 
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    32e8:	1c03      	adds	r3, r0, #0
    32ea:	3308      	adds	r3, #8
    32ec:	685a      	ldr	r2, [r3, #4]
    32ee:	6812      	ldr	r2, [r2, #0]
    32f0:	4294      	cmp	r4, r2
    32f2:	d304      	bcc.n	32fe <vListInsert+0x1e>
    32f4:	685b      	ldr	r3, [r3, #4]
    32f6:	685a      	ldr	r2, [r3, #4]
    32f8:	6812      	ldr	r2, [r2, #0]
    32fa:	4294      	cmp	r4, r2
    32fc:	d2fa      	bcs.n	32f4 <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    32fe:	685c      	ldr	r4, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    3300:	6108      	str	r0, [r1, #16]
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    3302:	60a1      	str	r1, [r4, #8]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    3304:	604c      	str	r4, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
    3306:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    3308:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
    330a:	6803      	ldr	r3, [r0, #0]
    330c:	3301      	adds	r3, #1
    330e:	6003      	str	r3, [r0, #0]
}
    3310:	bc10      	pop	{r4}
    3312:	bc01      	pop	{r0}
    3314:	4700      	bx	r0
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    3316:	6903      	ldr	r3, [r0, #16]
    3318:	e7f1      	b.n	32fe <vListInsert+0x1e>
    331a:	46c0      	nop			; (mov r8, r8)

0000331c <vListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    331c:	b500      	push	{lr}
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    331e:	6843      	ldr	r3, [r0, #4]
    3320:	6882      	ldr	r2, [r0, #8]
    3322:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3324:	6882      	ldr	r2, [r0, #8]
    3326:	6053      	str	r3, [r2, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    3328:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    332a:	6859      	ldr	r1, [r3, #4]
    332c:	4281      	cmp	r1, r0
    332e:	d006      	beq.n	333e <vListRemove+0x22>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}

	pxItemToRemove->pvContainer = NULL;
    3330:	2100      	movs	r1, #0
    3332:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
    3334:	6818      	ldr	r0, [r3, #0]
    3336:	3801      	subs	r0, #1
    3338:	6018      	str	r0, [r3, #0]
}
    333a:	bc01      	pop	{r0}
    333c:	4700      	bx	r0
	pxList = ( xList * ) pxItemToRemove->pvContainer;

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    333e:	605a      	str	r2, [r3, #4]
    3340:	e7f6      	b.n	3330 <vListRemove+0x14>
    3342:	46c0      	nop			; (mov r8, r8)

00003344 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3344:	b538      	push	{r3, r4, r5, lr}
    3346:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3348:	f00a fea2 	bl	e090 <__vPortEnterCritical_from_thumb>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    334c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    334e:	2b00      	cmp	r3, #0
    3350:	dd19      	ble.n	3386 <prvUnlockQueue+0x42>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    3352:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3354:	1c25      	adds	r5, r4, #0
    3356:	3524      	adds	r5, #36	; 0x24
    3358:	2800      	cmp	r0, #0
    335a:	d108      	bne.n	336e <prvUnlockQueue+0x2a>
    335c:	e013      	b.n	3386 <prvUnlockQueue+0x42>
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
				}

				--( pxQueue->xTxLock );
    335e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3360:	3a01      	subs	r2, #1
    3362:	64a2      	str	r2, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3364:	2a00      	cmp	r2, #0
    3366:	dd0e      	ble.n	3386 <prvUnlockQueue+0x42>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    3368:	6a61      	ldr	r1, [r4, #36]	; 0x24
    336a:	2900      	cmp	r1, #0
    336c:	d00b      	beq.n	3386 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    336e:	1c28      	adds	r0, r5, #0
    3370:	f001 f862 	bl	4438 <xTaskRemoveFromEventList>
    3374:	2800      	cmp	r0, #0
    3376:	d0f2      	beq.n	335e <prvUnlockQueue+0x1a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3378:	f001 f8da 	bl	4530 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    337c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    337e:	3a01      	subs	r2, #1
    3380:	64a2      	str	r2, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3382:	2a00      	cmp	r2, #0
    3384:	dcf0      	bgt.n	3368 <prvUnlockQueue+0x24>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3386:	2001      	movs	r0, #1
    3388:	4243      	negs	r3, r0
    338a:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    338c:	f00a ff2c 	bl	e1e8 <__vPortExitCritical_from_thumb>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3390:	f00a fe7e 	bl	e090 <__vPortEnterCritical_from_thumb>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3394:	6c65      	ldr	r5, [r4, #68]	; 0x44
    3396:	2d00      	cmp	r5, #0
    3398:	dd19      	ble.n	33ce <prvUnlockQueue+0x8a>
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    339a:	6921      	ldr	r1, [r4, #16]
    339c:	1c25      	adds	r5, r4, #0
    339e:	3510      	adds	r5, #16
    33a0:	2900      	cmp	r1, #0
    33a2:	d108      	bne.n	33b6 <prvUnlockQueue+0x72>
    33a4:	e013      	b.n	33ce <prvUnlockQueue+0x8a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					vTaskMissedYield();
				}

				--( pxQueue->xRxLock );
    33a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    33a8:	3b01      	subs	r3, #1
    33aa:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    33ac:	2b00      	cmp	r3, #0
    33ae:	dd0e      	ble.n	33ce <prvUnlockQueue+0x8a>
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    33b0:	6922      	ldr	r2, [r4, #16]
    33b2:	2a00      	cmp	r2, #0
    33b4:	d00b      	beq.n	33ce <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    33b6:	1c28      	adds	r0, r5, #0
    33b8:	f001 f83e 	bl	4438 <xTaskRemoveFromEventList>
    33bc:	2800      	cmp	r0, #0
    33be:	d0f2      	beq.n	33a6 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    33c0:	f001 f8b6 	bl	4530 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    33c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    33c6:	3b01      	subs	r3, #1
    33c8:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    33ca:	2b00      	cmp	r3, #0
    33cc:	dcf0      	bgt.n	33b0 <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    33ce:	2001      	movs	r0, #1
    33d0:	4245      	negs	r5, r0
    33d2:	6465      	str	r5, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    33d4:	f00a ff08 	bl	e1e8 <__vPortExitCritical_from_thumb>
}
    33d8:	bc38      	pop	{r3, r4, r5}
    33da:	bc01      	pop	{r0}
    33dc:	4700      	bx	r0
    33de:	46c0      	nop			; (mov r8, r8)

000033e0 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    33e0:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    33e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    33e4:	1c04      	adds	r4, r0, #0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    33e6:	2b00      	cmp	r3, #0
    33e8:	d108      	bne.n	33fc <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    33ea:	6805      	ldr	r5, [r0, #0]
    33ec:	2d00      	cmp	r5, #0
    33ee:	d025      	beq.n	343c <prvCopyDataToQueue+0x5c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
    33f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    33f2:	3301      	adds	r3, #1
    33f4:	63a3      	str	r3, [r4, #56]	; 0x38
}
    33f6:	bc38      	pop	{r3, r4, r5}
    33f8:	bc01      	pop	{r0}
    33fa:	4700      	bx	r0
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    33fc:	2a00      	cmp	r2, #0
    33fe:	d10d      	bne.n	341c <prvCopyDataToQueue+0x3c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3400:	1c1a      	adds	r2, r3, #0
    3402:	6880      	ldr	r0, [r0, #8]
    3404:	f002 f93c 	bl	5680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3408:	68a1      	ldr	r1, [r4, #8]
    340a:	6c20      	ldr	r0, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    340c:	6862      	ldr	r2, [r4, #4]
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    340e:	180b      	adds	r3, r1, r0
    3410:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3412:	4293      	cmp	r3, r2
    3414:	d3ec      	bcc.n	33f0 <prvCopyDataToQueue+0x10>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3416:	6825      	ldr	r5, [r4, #0]
    3418:	60a5      	str	r5, [r4, #8]
    341a:	e7e9      	b.n	33f0 <prvCopyDataToQueue+0x10>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    341c:	1c1a      	adds	r2, r3, #0
    341e:	68c0      	ldr	r0, [r0, #12]
    3420:	f002 f92e 	bl	5680 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3424:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3426:	68e0      	ldr	r0, [r4, #12]
    3428:	4252      	negs	r2, r2
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    342a:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    342c:	1883      	adds	r3, r0, r2
    342e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3430:	428b      	cmp	r3, r1
    3432:	d2dd      	bcs.n	33f0 <prvCopyDataToQueue+0x10>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3434:	6861      	ldr	r1, [r4, #4]
    3436:	188d      	adds	r5, r1, r2
    3438:	60e5      	str	r5, [r4, #12]
    343a:	e7d9      	b.n	33f0 <prvCopyDataToQueue+0x10>
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    343c:	6840      	ldr	r0, [r0, #4]
    343e:	f001 f8b9 	bl	45b4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    3442:	6065      	str	r5, [r4, #4]
    3444:	e7d4      	b.n	33f0 <prvCopyDataToQueue+0x10>
    3446:	46c0      	nop			; (mov r8, r8)

00003448 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    3448:	b5f0      	push	{r4, r5, r6, r7, lr}
    344a:	4647      	mov	r7, r8
    344c:	b480      	push	{r7}
    344e:	1c04      	adds	r4, r0, #0
    3450:	1c0e      	adds	r6, r1, #0
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    3452:	1e05      	subs	r5, r0, #0
    3454:	d105      	bne.n	3462 <xQueueCreate+0x1a>
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
}
    3456:	1c28      	adds	r0, r5, #0
    3458:	bc04      	pop	{r2}
    345a:	4690      	mov	r8, r2
    345c:	bcf0      	pop	{r4, r5, r6, r7}
    345e:	bc02      	pop	{r1}
    3460:	4708      	bx	r1
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3462:	204c      	movs	r0, #76	; 0x4c
    3464:	f001 f954 	bl	4710 <pvPortMalloc>
		if( pxNewQueue != NULL )
    3468:	1e05      	subs	r5, r0, #0
    346a:	d0f4      	beq.n	3456 <xQueueCreate+0xe>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    346c:	1c23      	adds	r3, r4, #0
    346e:	4373      	muls	r3, r6
    3470:	4698      	mov	r8, r3
    3472:	2301      	movs	r3, #1
    3474:	1c18      	adds	r0, r3, #0
    3476:	4440      	add	r0, r8

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    3478:	f001 f94a 	bl	4710 <pvPortMalloc>
    347c:	1c07      	adds	r7, r0, #0
    347e:	6028      	str	r0, [r5, #0]
			if( pxNewQueue->pcHead != NULL )
    3480:	2800      	cmp	r0, #0
    3482:	d017      	beq.n	34b4 <xQueueCreate+0x6c>
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    3484:	1e62      	subs	r2, r4, #1
    3486:	4372      	muls	r2, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    3488:	4440      	add	r0, r8
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
    348a:	2101      	movs	r1, #1
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    348c:	6068      	str	r0, [r5, #4]
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
    348e:	4248      	negs	r0, r1
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
    3490:	2300      	movs	r3, #0
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    3492:	60af      	str	r7, [r5, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
    3494:	6468      	str	r0, [r5, #68]	; 0x44
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    3496:	18bf      	adds	r7, r7, r2
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
				pxNewQueue->xTxLock = queueUNLOCKED;
    3498:	64a8      	str	r0, [r5, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    349a:	1c28      	adds	r0, r5, #0
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
    349c:	63ab      	str	r3, [r5, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    349e:	60ef      	str	r7, [r5, #12]
				pxNewQueue->uxLength = uxQueueLength;
    34a0:	63ec      	str	r4, [r5, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    34a2:	642e      	str	r6, [r5, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
				pxNewQueue->xTxLock = queueUNLOCKED;

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    34a4:	3010      	adds	r0, #16
    34a6:	f7ff fefd 	bl	32a4 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    34aa:	1c28      	adds	r0, r5, #0
    34ac:	3024      	adds	r0, #36	; 0x24
    34ae:	f7ff fef9 	bl	32a4 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				return  pxNewQueue;
    34b2:	e7d0      	b.n	3456 <xQueueCreate+0xe>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    34b4:	1c28      	adds	r0, r5, #0
    34b6:	f001 f939 	bl	472c <vPortFree>
		}
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
    34ba:	1c3d      	adds	r5, r7, #0
    34bc:	e7cb      	b.n	3456 <xQueueCreate+0xe>
    34be:	46c0      	nop			; (mov r8, r8)

000034c0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    34c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34c2:	4657      	mov	r7, sl
    34c4:	464e      	mov	r6, r9
    34c6:	4645      	mov	r5, r8
    34c8:	b4e0      	push	{r5, r6, r7}
    34ca:	1c04      	adds	r4, r0, #0
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    34cc:	2010      	movs	r0, #16

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    34ce:	b084      	sub	sp, #16
    34d0:	469a      	mov	sl, r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    34d2:	1903      	adds	r3, r0, r4

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    34d4:	9201      	str	r2, [sp, #4]
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    34d6:	4698      	mov	r8, r3

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    34d8:	4689      	mov	r9, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    34da:	f00a fdd9 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    34de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    34e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    34e2:	2500      	movs	r5, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    34e4:	1c2f      	adds	r7, r5, #0
	{
		taskENTER_CRITICAL();
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    34e6:	429a      	cmp	r2, r3
    34e8:	d32c      	bcc.n	3544 <xQueueGenericSend+0x84>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    34ea:	9e01      	ldr	r6, [sp, #4]
    34ec:	2e00      	cmp	r6, #0
    34ee:	d062      	beq.n	35b6 <xQueueGenericSend+0xf6>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    34f0:	2d00      	cmp	r5, #0
    34f2:	d03a      	beq.n	356a <xQueueGenericSend+0xaa>
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    34f4:	f00a fe78 	bl	e1e8 <__vPortExitCritical_from_thumb>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    34f8:	f000 fc5e 	bl	3db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    34fc:	f00a fdc8 	bl	e090 <__vPortEnterCritical_from_thumb>
    3500:	6c65      	ldr	r5, [r4, #68]	; 0x44
    3502:	1c6b      	adds	r3, r5, #1
    3504:	d035      	beq.n	3572 <xQueueGenericSend+0xb2>
    3506:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    3508:	1c73      	adds	r3, r6, #1
    350a:	d036      	beq.n	357a <xQueueGenericSend+0xba>
    350c:	f00a fe6c 	bl	e1e8 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3510:	a802      	add	r0, sp, #8
    3512:	a901      	add	r1, sp, #4
    3514:	f000 ffd8 	bl	44c8 <xTaskCheckForTimeOut>
    3518:	2800      	cmp	r0, #0
    351a:	d137      	bne.n	358c <xQueueGenericSend+0xcc>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    351c:	f00a fdb8 	bl	e090 <__vPortEnterCritical_from_thumb>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3520:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    3522:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3524:	f00a fe60 	bl	e1e8 <__vPortExitCritical_from_thumb>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
    3528:	42ae      	cmp	r6, r5
    352a:	d036      	beq.n	359a <xQueueGenericSend+0xda>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    352c:	1c20      	adds	r0, r4, #0
    352e:	f7ff ff09 	bl	3344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3532:	f000 fcff 	bl	3f34 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3536:	2501      	movs	r5, #1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3538:	f00a fdaa 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    353c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    353e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3540:	429a      	cmp	r2, r3
    3542:	d2d2      	bcs.n	34ea <xQueueGenericSend+0x2a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3544:	4649      	mov	r1, r9
    3546:	1c20      	adds	r0, r4, #0
    3548:	4652      	mov	r2, sl
    354a:	f7ff ff49 	bl	33e0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    354e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3550:	2900      	cmp	r1, #0
    3552:	d134      	bne.n	35be <xQueueGenericSend+0xfe>
						takes care of that. */
						portYIELD_WITHIN_API();
					}
				}

				taskEXIT_CRITICAL();
    3554:	f00a fe48 	bl	e1e8 <__vPortExitCritical_from_thumb>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3558:	2001      	movs	r0, #1
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    355a:	b004      	add	sp, #16
    355c:	bc1c      	pop	{r2, r3, r4}
    355e:	4690      	mov	r8, r2
    3560:	4699      	mov	r9, r3
    3562:	46a2      	mov	sl, r4
    3564:	bcf0      	pop	{r4, r5, r6, r7}
    3566:	bc02      	pop	{r1}
    3568:	4708      	bx	r1
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    356a:	a802      	add	r0, sp, #8
    356c:	f000 ffa0 	bl	44b0 <vTaskSetTimeOutState>
    3570:	e7c0      	b.n	34f4 <xQueueGenericSend+0x34>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    3572:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    3574:	6467      	str	r7, [r4, #68]	; 0x44
    3576:	1c73      	adds	r3, r6, #1
    3578:	d1c8      	bne.n	350c <xQueueGenericSend+0x4c>
    357a:	64a7      	str	r7, [r4, #72]	; 0x48
    357c:	f00a fe34 	bl	e1e8 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3580:	a802      	add	r0, sp, #8
    3582:	a901      	add	r1, sp, #4
    3584:	f000 ffa0 	bl	44c8 <xTaskCheckForTimeOut>
    3588:	2800      	cmp	r0, #0
    358a:	d0c7      	beq.n	351c <xQueueGenericSend+0x5c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    358c:	1c20      	adds	r0, r4, #0
    358e:	f7ff fed9 	bl	3344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3592:	f000 fccf 	bl	3f34 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3596:	2000      	movs	r0, #0
    3598:	e7df      	b.n	355a <xQueueGenericSend+0x9a>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    359a:	4640      	mov	r0, r8
    359c:	9901      	ldr	r1, [sp, #4]
    359e:	f000 ff15 	bl	43cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    35a2:	1c20      	adds	r0, r4, #0
    35a4:	f7ff fece 	bl	3344 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
    35a8:	f000 fcc4 	bl	3f34 <xTaskResumeAll>
    35ac:	2800      	cmp	r0, #0
    35ae:	d1c2      	bne.n	3536 <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
    35b0:	df00      	svc	0
			( void ) xTaskResumeAll();

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    35b2:	2501      	movs	r5, #1
    35b4:	e7c0      	b.n	3538 <xQueueGenericSend+0x78>
			{
				if( xTicksToWait == ( portTickType ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    35b6:	f00a fe17 	bl	e1e8 <__vPortExitCritical_from_thumb>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    35ba:	1c30      	adds	r0, r6, #0
    35bc:	e7cd      	b.n	355a <xQueueGenericSend+0x9a>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    35be:	1c20      	adds	r0, r4, #0
    35c0:	3024      	adds	r0, #36	; 0x24
    35c2:	f000 ff39 	bl	4438 <xTaskRemoveFromEventList>
    35c6:	2801      	cmp	r0, #1
    35c8:	d1c4      	bne.n	3554 <xQueueGenericSend+0x94>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    35ca:	df00      	svc	0
    35cc:	e7c2      	b.n	3554 <xQueueGenericSend+0x94>
    35ce:	46c0      	nop			; (mov r8, r8)

000035d0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
    35d0:	b538      	push	{r3, r4, r5, lr}
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    35d2:	204c      	movs	r0, #76	; 0x4c
    35d4:	f001 f89c 	bl	4710 <pvPortMalloc>
		if( pxNewQueue != NULL )
    35d8:	1e04      	subs	r4, r0, #0
    35da:	d018      	beq.n	360e <xQueueCreateMutex+0x3e>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
			pxNewQueue->uxLength = 1;
    35dc:	2101      	movs	r1, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    35de:	2500      	movs	r5, #0
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
			pxNewQueue->uxLength = 1;
			pxNewQueue->uxItemSize = 0;
			pxNewQueue->xRxLock = queueUNLOCKED;
    35e0:	424b      	negs	r3, r1

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
			pxNewQueue->uxLength = 1;
    35e2:	63e1      	str	r1, [r4, #60]	; 0x3c
			pxNewQueue->uxItemSize = 0;
			pxNewQueue->xRxLock = queueUNLOCKED;
    35e4:	6463      	str	r3, [r4, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    35e6:	64a3      	str	r3, [r4, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    35e8:	3010      	adds	r0, #16
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    35ea:	6065      	str	r5, [r4, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    35ec:	6025      	str	r5, [r4, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    35ee:	60a5      	str	r5, [r4, #8]
			pxNewQueue->pcReadFrom = NULL;
    35f0:	60e5      	str	r5, [r4, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
    35f2:	63a5      	str	r5, [r4, #56]	; 0x38
			pxNewQueue->uxLength = 1;
			pxNewQueue->uxItemSize = 0;
    35f4:	6425      	str	r5, [r4, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    35f6:	f7ff fe55 	bl	32a4 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    35fa:	1c20      	adds	r0, r4, #0
    35fc:	3024      	adds	r0, #36	; 0x24
    35fe:	f7ff fe51 	bl	32a4 <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, 0, queueSEND_TO_BACK );
    3602:	1c20      	adds	r0, r4, #0
    3604:	1c29      	adds	r1, r5, #0
    3606:	1c2a      	adds	r2, r5, #0
    3608:	1c2b      	adds	r3, r5, #0
    360a:	f7ff ff59 	bl	34c0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
    360e:	1c20      	adds	r0, r4, #0
    3610:	bc38      	pop	{r3, r4, r5}
    3612:	bc02      	pop	{r1}
    3614:	4708      	bx	r1
    3616:	46c0      	nop			; (mov r8, r8)

00003618 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    3618:	b570      	push	{r4, r5, r6, lr}
    361a:	1c04      	adds	r4, r0, #0
    361c:	1c16      	adds	r6, r2, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    361e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    3620:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3622:	2500      	movs	r5, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3624:	4290      	cmp	r0, r2
    3626:	d303      	bcc.n	3630 <xQueueGenericSendFromISR+0x18>
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3628:	1c28      	adds	r0, r5, #0
    362a:	bc70      	pop	{r4, r5, r6}
    362c:	bc02      	pop	{r1}
    362e:	4708      	bx	r1
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3630:	1c1a      	adds	r2, r3, #0
    3632:	1c20      	adds	r0, r4, #0
    3634:	f7ff fed4 	bl	33e0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    3638:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    363a:	1c5a      	adds	r2, r3, #1
    363c:	d003      	beq.n	3646 <xQueueGenericSendFromISR+0x2e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    363e:	3301      	adds	r3, #1
    3640:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    3642:	2501      	movs	r5, #1
    3644:	e7f0      	b.n	3628 <xQueueGenericSendFromISR+0x10>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    3646:	6a63      	ldr	r3, [r4, #36]	; 0x24
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    3648:	3501      	adds	r5, #1

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    364a:	2b00      	cmp	r3, #0
    364c:	d0ec      	beq.n	3628 <xQueueGenericSendFromISR+0x10>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    364e:	1c20      	adds	r0, r4, #0
    3650:	3024      	adds	r0, #36	; 0x24
    3652:	f000 fef1 	bl	4438 <xTaskRemoveFromEventList>
    3656:	2800      	cmp	r0, #0
    3658:	d0e6      	beq.n	3628 <xQueueGenericSendFromISR+0x10>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    365a:	6035      	str	r5, [r6, #0]
    365c:	e7e4      	b.n	3628 <xQueueGenericSendFromISR+0x10>
    365e:	46c0      	nop			; (mov r8, r8)

00003660 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3660:	b5f0      	push	{r4, r5, r6, r7, lr}
    3662:	4657      	mov	r7, sl
    3664:	464e      	mov	r6, r9
    3666:	4645      	mov	r5, r8
    3668:	b4e0      	push	{r5, r6, r7}
    366a:	b084      	sub	sp, #16
    366c:	1c04      	adds	r4, r0, #0
    366e:	4699      	mov	r9, r3
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3670:	1c07      	adds	r7, r0, #0
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3672:	468a      	mov	sl, r1
    3674:	9201      	str	r2, [sp, #4]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3676:	f00a fd0b 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    367a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    367c:	2500      	movs	r5, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    367e:	46a8      	mov	r8, r5
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3680:	3724      	adds	r7, #36	; 0x24
	{
		taskENTER_CRITICAL();
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3682:	2b00      	cmp	r3, #0
    3684:	d134      	bne.n	36f0 <xQueueGenericReceive+0x90>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3686:	9e01      	ldr	r6, [sp, #4]
    3688:	2e00      	cmp	r6, #0
    368a:	d07b      	beq.n	3784 <xQueueGenericReceive+0x124>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    368c:	2d00      	cmp	r5, #0
    368e:	d050      	beq.n	3732 <xQueueGenericReceive+0xd2>
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    3690:	f00a fdaa 	bl	e1e8 <__vPortExitCritical_from_thumb>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3694:	f000 fb90 	bl	3db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3698:	f00a fcfa 	bl	e090 <__vPortEnterCritical_from_thumb>
    369c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    369e:	3301      	adds	r3, #1
    36a0:	d052      	beq.n	3748 <xQueueGenericReceive+0xe8>
    36a2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    36a4:	1c43      	adds	r3, r0, #1
    36a6:	d054      	beq.n	3752 <xQueueGenericReceive+0xf2>
    36a8:	f00a fd9e 	bl	e1e8 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    36ac:	a802      	add	r0, sp, #8
    36ae:	a901      	add	r1, sp, #4
    36b0:	f000 ff0a 	bl	44c8 <xTaskCheckForTimeOut>
    36b4:	2800      	cmp	r0, #0
    36b6:	d156      	bne.n	3766 <xQueueGenericReceive+0x106>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    36b8:	f00a fcea 	bl	e090 <__vPortEnterCritical_from_thumb>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    36bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    36be:	f00a fd93 	bl	e1e8 <__vPortExitCritical_from_thumb>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
    36c2:	2d00      	cmp	r5, #0
    36c4:	d139      	bne.n	373a <xQueueGenericReceive+0xda>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    36c6:	6821      	ldr	r1, [r4, #0]
    36c8:	2900      	cmp	r1, #0
    36ca:	d053      	beq.n	3774 <xQueueGenericReceive+0x114>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    36cc:	1c38      	adds	r0, r7, #0
    36ce:	9901      	ldr	r1, [sp, #4]
    36d0:	f000 fe7c 	bl	43cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    36d4:	1c20      	adds	r0, r4, #0
    36d6:	f7ff fe35 	bl	3344 <prvUnlockQueue>
				if( !xTaskResumeAll() )
    36da:	f000 fc2b 	bl	3f34 <xTaskResumeAll>
    36de:	2800      	cmp	r0, #0
    36e0:	d100      	bne.n	36e4 <xQueueGenericReceive+0x84>
				{
					portYIELD_WITHIN_API();
    36e2:	df00      	svc	0
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    36e4:	2501      	movs	r5, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    36e6:	f00a fcd3 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    36ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    36ec:	2b00      	cmp	r3, #0
    36ee:	d0ca      	beq.n	3686 <xQueueGenericReceive+0x26>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    36f0:	6823      	ldr	r3, [r4, #0]
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    36f2:	68e5      	ldr	r5, [r4, #12]
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    36f4:	2b00      	cmp	r3, #0
    36f6:	d008      	beq.n	370a <xQueueGenericReceive+0xaa>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    36f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    36fa:	6860      	ldr	r0, [r4, #4]

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    36fc:	18a9      	adds	r1, r5, r2
    36fe:	60e1      	str	r1, [r4, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3700:	4281      	cmp	r1, r0
    3702:	d252      	bcs.n	37aa <xQueueGenericReceive+0x14a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3704:	4650      	mov	r0, sl
    3706:	f001 ffbb 	bl	5680 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    370a:	2100      	movs	r1, #0
    370c:	4589      	cmp	r9, r1
    370e:	d144      	bne.n	379a <xQueueGenericReceive+0x13a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3710:	6ba5      	ldr	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3712:	6822      	ldr	r2, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3714:	3d01      	subs	r5, #1
    3716:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3718:	2a00      	cmp	r2, #0
    371a:	d051      	beq.n	37c0 <xQueueGenericReceive+0x160>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    371c:	6926      	ldr	r6, [r4, #16]
    371e:	2e00      	cmp	r6, #0
    3720:	d03f      	beq.n	37a2 <xQueueGenericReceive+0x142>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3722:	1c20      	adds	r0, r4, #0
    3724:	3010      	adds	r0, #16
    3726:	f000 fe87 	bl	4438 <xTaskRemoveFromEventList>
    372a:	2801      	cmp	r0, #1
    372c:	d139      	bne.n	37a2 <xQueueGenericReceive+0x142>
						{
							portYIELD_WITHIN_API();
    372e:	df00      	svc	0
    3730:	e037      	b.n	37a2 <xQueueGenericReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3732:	a802      	add	r0, sp, #8
    3734:	f000 febc 	bl	44b0 <vTaskSetTimeOutState>
    3738:	e7aa      	b.n	3690 <xQueueGenericReceive+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    373a:	1c20      	adds	r0, r4, #0
    373c:	f7ff fe02 	bl	3344 <prvUnlockQueue>
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3740:	2501      	movs	r5, #1
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
    3742:	f000 fbf7 	bl	3f34 <xTaskResumeAll>
    3746:	e7ce      	b.n	36e6 <xQueueGenericReceive+0x86>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    3748:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    374a:	4643      	mov	r3, r8
    374c:	6463      	str	r3, [r4, #68]	; 0x44
    374e:	1c43      	adds	r3, r0, #1
    3750:	d1aa      	bne.n	36a8 <xQueueGenericReceive+0x48>
    3752:	4643      	mov	r3, r8
    3754:	64a3      	str	r3, [r4, #72]	; 0x48
    3756:	f00a fd47 	bl	e1e8 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    375a:	a802      	add	r0, sp, #8
    375c:	a901      	add	r1, sp, #4
    375e:	f000 feb3 	bl	44c8 <xTaskCheckForTimeOut>
    3762:	2800      	cmp	r0, #0
    3764:	d0a8      	beq.n	36b8 <xQueueGenericReceive+0x58>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3766:	1c20      	adds	r0, r4, #0
    3768:	f7ff fdec 	bl	3344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    376c:	f000 fbe2 	bl	3f34 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3770:	2000      	movs	r0, #0
    3772:	e00a      	b.n	378a <xQueueGenericReceive+0x12a>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						portENTER_CRITICAL();
    3774:	f00a fc8c 	bl	e090 <__vPortEnterCritical_from_thumb>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3778:	6860      	ldr	r0, [r4, #4]
    377a:	f000 fee5 	bl	4548 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    377e:	f00a fd33 	bl	e1e8 <__vPortExitCritical_from_thumb>
    3782:	e7a3      	b.n	36cc <xQueueGenericReceive+0x6c>
			{
				if( xTicksToWait == ( portTickType ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3784:	f00a fd30 	bl	e1e8 <__vPortExitCritical_from_thumb>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3788:	1c30      	adds	r0, r6, #0
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    378a:	b004      	add	sp, #16
    378c:	bc1c      	pop	{r2, r3, r4}
    378e:	4690      	mov	r8, r2
    3790:	4699      	mov	r9, r3
    3792:	46a2      	mov	sl, r4
    3794:	bcf0      	pop	{r4, r5, r6, r7}
    3796:	bc02      	pop	{r1}
    3798:	4708      	bx	r1
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    379a:	6a67      	ldr	r7, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    379c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    379e:	2f00      	cmp	r7, #0
    37a0:	d106      	bne.n	37b0 <xQueueGenericReceive+0x150>
						}
					}

				}

				taskEXIT_CRITICAL();
    37a2:	f00a fd21 	bl	e1e8 <__vPortExitCritical_from_thumb>
				return pdPASS;
    37a6:	2001      	movs	r0, #1
    37a8:	e7ef      	b.n	378a <xQueueGenericReceive+0x12a>
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    37aa:	60e3      	str	r3, [r4, #12]
    37ac:	1c19      	adds	r1, r3, #0
    37ae:	e7a9      	b.n	3704 <xQueueGenericReceive+0xa4>
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    37b0:	1c20      	adds	r0, r4, #0
    37b2:	3024      	adds	r0, #36	; 0x24
    37b4:	f000 fe40 	bl	4438 <xTaskRemoveFromEventList>
    37b8:	2800      	cmp	r0, #0
    37ba:	d0f2      	beq.n	37a2 <xQueueGenericReceive+0x142>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    37bc:	df00      	svc	0
    37be:	e7f0      	b.n	37a2 <xQueueGenericReceive+0x142>
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    37c0:	f000 febc 	bl	453c <xTaskGetCurrentTaskHandle>
    37c4:	6060      	str	r0, [r4, #4]
    37c6:	e7a9      	b.n	371c <xQueueGenericReceive+0xbc>

000037c8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    37c8:	b570      	push	{r4, r5, r6, lr}
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    37ca:	6b85      	ldr	r5, [r0, #56]	; 0x38
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    37cc:	1c04      	adds	r4, r0, #0
    37ce:	1c16      	adds	r6, r2, #0
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    37d0:	2d00      	cmp	r5, #0
    37d2:	d016      	beq.n	3802 <xQueueReceiveFromISR+0x3a>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    37d4:	6800      	ldr	r0, [r0, #0]
    37d6:	2800      	cmp	r0, #0
    37d8:	d00a      	beq.n	37f0 <xQueueReceiveFromISR+0x28>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    37da:	68e3      	ldr	r3, [r4, #12]
    37dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    37de:	6865      	ldr	r5, [r4, #4]

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    37e0:	189b      	adds	r3, r3, r2
    37e2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    37e4:	42ab      	cmp	r3, r5
    37e6:	d210      	bcs.n	380a <xQueueReceiveFromISR+0x42>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    37e8:	1c08      	adds	r0, r1, #0
    37ea:	1c19      	adds	r1, r3, #0
    37ec:	f001 ff48 	bl	5680 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    37f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    37f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    37f4:	3801      	subs	r0, #1
    37f6:	63a0      	str	r0, [r4, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    37f8:	1c5a      	adds	r2, r3, #1
    37fa:	d009      	beq.n	3810 <xQueueReceiveFromISR+0x48>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    37fc:	3301      	adds	r3, #1
    37fe:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
    3800:	2501      	movs	r5, #1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3802:	1c28      	adds	r0, r5, #0
    3804:	bc70      	pop	{r4, r5, r6}
    3806:	bc02      	pop	{r1}
    3808:	4708      	bx	r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    380a:	60e0      	str	r0, [r4, #12]
    380c:	1c03      	adds	r3, r0, #0
    380e:	e7eb      	b.n	37e8 <xQueueReceiveFromISR+0x20>
			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    3810:	6921      	ldr	r1, [r4, #16]
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    3812:	2501      	movs	r5, #1
			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    3814:	2900      	cmp	r1, #0
    3816:	d0f4      	beq.n	3802 <xQueueReceiveFromISR+0x3a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3818:	1c20      	adds	r0, r4, #0
    381a:	3010      	adds	r0, #16
    381c:	f000 fe0c 	bl	4438 <xTaskRemoveFromEventList>
    3820:	2800      	cmp	r0, #0
    3822:	d0ee      	beq.n	3802 <xQueueReceiveFromISR+0x3a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3824:	6035      	str	r5, [r6, #0]
    3826:	e7ec      	b.n	3802 <xQueueReceiveFromISR+0x3a>

00003828 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3828:	b510      	push	{r4, lr}
    382a:	1c04      	adds	r4, r0, #0
unsigned portBASE_TYPE uxReturn;

	taskENTER_CRITICAL();
    382c:	f00a fc30 	bl	e090 <__vPortEnterCritical_from_thumb>
		uxReturn = pxQueue->uxMessagesWaiting;
    3830:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    3832:	f00a fcd9 	bl	e1e8 <__vPortExitCritical_from_thumb>

	return uxReturn;
}
    3836:	1c20      	adds	r0, r4, #0
    3838:	bc10      	pop	{r4}
    383a:	bc02      	pop	{r1}
    383c:	4708      	bx	r1
    383e:	46c0      	nop			; (mov r8, r8)

00003840 <uxQueueMessagesWaitingFromISR>:

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
unsigned portBASE_TYPE uxReturn;

	uxReturn = pxQueue->uxMessagesWaiting;
    3840:	6b80      	ldr	r0, [r0, #56]	; 0x38

	return uxReturn;
}
    3842:	4770      	bx	lr

00003844 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3844:	b510      	push	{r4, lr}
    3846:	1c04      	adds	r4, r0, #0
	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3848:	6800      	ldr	r0, [r0, #0]
    384a:	f000 ff6f 	bl	472c <vPortFree>
	vPortFree( pxQueue );
    384e:	1c20      	adds	r0, r4, #0
    3850:	f000 ff6c 	bl	472c <vPortFree>
}
    3854:	bc10      	pop	{r4}
    3856:	bc01      	pop	{r0}
    3858:	4700      	bx	r0
    385a:	46c0      	nop			; (mov r8, r8)

0000385c <xQueueIsQueueEmptyFromISR>:

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    385c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    385e:	4243      	negs	r3, r0
    3860:	4158      	adcs	r0, r3

	return xReturn;
}
    3862:	4770      	bx	lr

00003864 <xQueueIsQueueFullFromISR>:

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3864:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    3866:	6b82      	ldr	r2, [r0, #56]	; 0x38
    3868:	1ad0      	subs	r0, r2, r3
    386a:	4243      	negs	r3, r0
    386c:	4158      	adcs	r0, r3

	return xReturn;
}
    386e:	4770      	bx	lr

00003870 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    3870:	b5f0      	push	{r4, r5, r6, r7, lr}
    3872:	465f      	mov	r7, fp
    3874:	4656      	mov	r6, sl
    3876:	464d      	mov	r5, r9
    3878:	4644      	mov	r4, r8
    387a:	b4f0      	push	{r4, r5, r6, r7}
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    387c:	684b      	ldr	r3, [r1, #4]
    387e:	1c0f      	adds	r7, r1, #0
    3880:	685b      	ldr	r3, [r3, #4]
    3882:	3708      	adds	r7, #8
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    3884:	b085      	sub	sp, #20
    3886:	4681      	mov	r9, r0
    3888:	1c0d      	adds	r5, r1, #0
    388a:	4690      	mov	r8, r2
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    388c:	604b      	str	r3, [r1, #4]
    388e:	42bb      	cmp	r3, r7
    3890:	d039      	beq.n	3906 <prvListTaskWithinSingleList+0x96>
    3892:	68da      	ldr	r2, [r3, #12]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    3894:	685b      	ldr	r3, [r3, #4]
	{
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    3896:	4692      	mov	sl, r2
    3898:	4a1c      	ldr	r2, [pc, #112]	; (390c <prvListTaskWithinSingleList+0x9c>)
    389a:	4e1d      	ldr	r6, [pc, #116]	; (3910 <prvListTaskWithinSingleList+0xa0>)
    389c:	4693      	mov	fp, r2
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    389e:	606b      	str	r3, [r5, #4]
    38a0:	42bb      	cmp	r3, r7
    38a2:	d024      	beq.n	38ee <prvListTaskWithinSingleList+0x7e>
    38a4:	68dc      	ldr	r4, [r3, #12]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
    38a6:	6b23      	ldr	r3, [r4, #48]	; 0x30

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    38a8:	7818      	ldrb	r0, [r3, #0]
    38aa:	2100      	movs	r1, #0
    38ac:	28a5      	cmp	r0, #165	; 0xa5
    38ae:	d107      	bne.n	38c0 <prvListTaskWithinSingleList+0x50>
		{
			pucStackByte -= portSTACK_GROWTH;
    38b0:	3301      	adds	r3, #1
			usCount++;
    38b2:	3101      	adds	r1, #1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    38b4:	7818      	ldrb	r0, [r3, #0]
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    38b6:	040a      	lsls	r2, r1, #16
    38b8:	0c11      	lsrs	r1, r2, #16

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    38ba:	28a5      	cmp	r0, #165	; 0xa5
    38bc:	d0f8      	beq.n	38b0 <prvListTaskWithinSingleList+0x40>
    38be:	0c91      	lsrs	r1, r2, #18
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
			}
			#endif			
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
    38c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    38c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    38c4:	1c22      	adds	r2, r4, #0
    38c6:	9000      	str	r0, [sp, #0]
    38c8:	9101      	str	r1, [sp, #4]
    38ca:	9302      	str	r3, [sp, #8]
    38cc:	4659      	mov	r1, fp
    38ce:	3234      	adds	r2, #52	; 0x34
    38d0:	1c30      	adds	r0, r6, #0
    38d2:	4643      	mov	r3, r8
    38d4:	f002 f832 	bl	593c <sprintf>
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
    38d8:	4648      	mov	r0, r9
    38da:	1c31      	adds	r1, r6, #0
    38dc:	f002 f8a6 	bl	5a2c <strcat>

		} while( pxNextTCB != pxFirstTCB );
    38e0:	4554      	cmp	r4, sl
    38e2:	d007      	beq.n	38f4 <prvListTaskWithinSingleList+0x84>
    38e4:	686b      	ldr	r3, [r5, #4]

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    38e6:	685b      	ldr	r3, [r3, #4]
    38e8:	606b      	str	r3, [r5, #4]
    38ea:	42bb      	cmp	r3, r7
    38ec:	d1da      	bne.n	38a4 <prvListTaskWithinSingleList+0x34>
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	606b      	str	r3, [r5, #4]
    38f2:	e7d7      	b.n	38a4 <prvListTaskWithinSingleList+0x34>
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );

		} while( pxNextTCB != pxFirstTCB );
	}
    38f4:	b005      	add	sp, #20
    38f6:	bc3c      	pop	{r2, r3, r4, r5}
    38f8:	4690      	mov	r8, r2
    38fa:	4699      	mov	r9, r3
    38fc:	46a2      	mov	sl, r4
    38fe:	46ab      	mov	fp, r5
    3900:	bcf0      	pop	{r4, r5, r6, r7}
    3902:	bc01      	pop	{r0}
    3904:	4700      	bx	r0
	{
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    3906:	685b      	ldr	r3, [r3, #4]
    3908:	e7c3      	b.n	3892 <prvListTaskWithinSingleList+0x22>
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	0000ed9c 	.word	0x0000ed9c
    3910:	40000b00 	.word	0x40000b00

00003914 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3916:	465f      	mov	r7, fp
    3918:	4656      	mov	r6, sl
    391a:	464d      	mov	r5, r9
    391c:	4644      	mov	r4, r8
    391e:	b4f0      	push	{r4, r5, r6, r7}
    3920:	1c16      	adds	r6, r2, #0
    3922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3924:	4683      	mov	fp, r0
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    3926:	2048      	movs	r0, #72	; 0x48
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3928:	4688      	mov	r8, r1
    392a:	469a      	mov	sl, r3
    392c:	4691      	mov	r9, r2
    392e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    3930:	f000 feee 	bl	4710 <pvPortMalloc>

	if( pxNewTCB != NULL )
    3934:	1e04      	subs	r4, r0, #0
    3936:	d100      	bne.n	393a <xTaskGenericCreate+0x26>
    3938:	e07b      	b.n	3a32 <xTaskGenericCreate+0x11e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    393a:	2d00      	cmp	r5, #0
    393c:	d100      	bne.n	3940 <xTaskGenericCreate+0x2c>
    393e:	e083      	b.n	3a48 <xTaskGenericCreate+0x134>
    3940:	6325      	str	r5, [r4, #48]	; 0x30
    3942:	00b7      	lsls	r7, r6, #2
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
    3944:	1c3a      	adds	r2, r7, #0
    3946:	1c28      	adds	r0, r5, #0
    3948:	21a5      	movs	r1, #165	; 0xa5
    394a:	f001 ff17 	bl	577c <memset>
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    394e:	1c20      	adds	r0, r4, #0
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    3950:	6b27      	ldr	r7, [r4, #48]	; 0x30
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    3952:	4641      	mov	r1, r8
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    3954:	3e01      	subs	r6, #1
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    3956:	3034      	adds	r0, #52	; 0x34
    3958:	220a      	movs	r2, #10
    395a:	f002 f89b 	bl	5a94 <strncpy>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    395e:	00b6      	lsls	r6, r6, #2
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    3960:	2100      	movs	r1, #0
    3962:	233d      	movs	r3, #61	; 0x3d
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
    3964:	2507      	movs	r5, #7
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    3966:	19be      	adds	r6, r7, r6
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    3968:	54e1      	strb	r1, [r4, r3]
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
    396a:	43ae      	bics	r6, r5
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    396c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    396e:	2d03      	cmp	r5, #3
    3970:	d854      	bhi.n	3a1c <xTaskGenericCreate+0x108>
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3972:	1d27      	adds	r7, r4, #4
    3974:	1c38      	adds	r0, r7, #0
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - 1;
	}

	pxTCB->uxPriority = uxPriority;
    3976:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    3978:	6465      	str	r5, [r4, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    397a:	f7ff fc9f 	bl	32bc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    397e:	1c20      	adds	r0, r4, #0
    3980:	3018      	adds	r0, #24
    3982:	f7ff fc9b 	bl	32bc <vListInitialiseItem>
	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    3986:	2104      	movs	r1, #4
    3988:	1b48      	subs	r0, r1, r5
    398a:	61a0      	str	r0, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    398c:	4652      	mov	r2, sl
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    398e:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3990:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3992:	1c30      	adds	r0, r6, #0
    3994:	4659      	mov	r1, fp
    3996:	f000 fe33 	bl	4600 <pxPortInitialiseStack>
		}
		#endif

		if( ( void * ) pxCreatedTask != NULL )
    399a:	2200      	movs	r2, #0
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    399c:	6020      	str	r0, [r4, #0]
		}
		#endif

		if( ( void * ) pxCreatedTask != NULL )
    399e:	4591      	cmp	r9, r2
    39a0:	d001      	beq.n	39a6 <xTaskGenericCreate+0x92>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    39a2:	464a      	mov	r2, r9
    39a4:	6014      	str	r4, [r2, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		portENTER_CRITICAL();
    39a6:	f00a fb73 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			uxCurrentNumberOfTasks++;
    39aa:	4b45      	ldr	r3, [pc, #276]	; (3ac0 <xTaskGenericCreate+0x1ac>)
    39ac:	681d      	ldr	r5, [r3, #0]
    39ae:	3501      	adds	r5, #1
    39b0:	601d      	str	r5, [r3, #0]
			if( pxCurrentTCB == NULL )
    39b2:	4d44      	ldr	r5, [pc, #272]	; (3ac4 <xTaskGenericCreate+0x1b0>)
    39b4:	682e      	ldr	r6, [r5, #0]
    39b6:	2e00      	cmp	r6, #0
    39b8:	d03e      	beq.n	3a38 <xTaskGenericCreate+0x124>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    39ba:	4e43      	ldr	r6, [pc, #268]	; (3ac8 <xTaskGenericCreate+0x1b4>)
    39bc:	6833      	ldr	r3, [r6, #0]
    39be:	2b00      	cmp	r3, #0
    39c0:	d02e      	beq.n	3a20 <xTaskGenericCreate+0x10c>
    39c2:	4b42      	ldr	r3, [pc, #264]	; (3acc <xTaskGenericCreate+0x1b8>)
    39c4:	4698      	mov	r8, r3
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    39c6:	4a42      	ldr	r2, [pc, #264]	; (3ad0 <xTaskGenericCreate+0x1bc>)
    39c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    39ca:	6811      	ldr	r1, [r2, #0]
    39cc:	428b      	cmp	r3, r1
    39ce:	d900      	bls.n	39d2 <xTaskGenericCreate+0xbe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    39d0:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    39d2:	4a40      	ldr	r2, [pc, #256]	; (3ad4 <xTaskGenericCreate+0x1c0>)
    39d4:	6810      	ldr	r0, [r2, #0]
    39d6:	6420      	str	r0, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
    39d8:	3001      	adds	r0, #1
    39da:	6010      	str	r0, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    39dc:	4a3e      	ldr	r2, [pc, #248]	; (3ad8 <xTaskGenericCreate+0x1c4>)
    39de:	6811      	ldr	r1, [r2, #0]
    39e0:	428b      	cmp	r3, r1
    39e2:	d900      	bls.n	39e6 <xTaskGenericCreate+0xd2>
    39e4:	6013      	str	r3, [r2, #0]
    39e6:	0099      	lsls	r1, r3, #2
    39e8:	18cb      	adds	r3, r1, r3
    39ea:	0098      	lsls	r0, r3, #2
    39ec:	4440      	add	r0, r8
    39ee:	1c39      	adds	r1, r7, #0
    39f0:	f7ff fc68 	bl	32c4 <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		portEXIT_CRITICAL();
    39f4:	f00a fbf8 	bl	e1e8 <__vPortExitCritical_from_thumb>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    39f8:	6834      	ldr	r4, [r6, #0]
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
    39fa:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    39fc:	2c00      	cmp	r4, #0
    39fe:	d005      	beq.n	3a0c <xTaskGenericCreate+0xf8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3a00:	682d      	ldr	r5, [r5, #0]
    3a02:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    3a04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    3a06:	429f      	cmp	r7, r3
    3a08:	d900      	bls.n	3a0c <xTaskGenericCreate+0xf8>
			{
				portYIELD_WITHIN_API();
    3a0a:	df00      	svc	0
			}
		}
	}

	return xReturn;
}
    3a0c:	bc3c      	pop	{r2, r3, r4, r5}
    3a0e:	4690      	mov	r8, r2
    3a10:	4699      	mov	r9, r3
    3a12:	46a2      	mov	sl, r4
    3a14:	46ab      	mov	fp, r5
    3a16:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a18:	bc02      	pop	{r1}
    3a1a:	4708      	bx	r1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    3a1c:	2503      	movs	r5, #3
    3a1e:	e7a8      	b.n	3972 <xTaskGenericCreate+0x5e>
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3a20:	6829      	ldr	r1, [r5, #0]
    3a22:	980a      	ldr	r0, [sp, #40]	; 0x28
    3a24:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    3a26:	4298      	cmp	r0, r3
    3a28:	d3cb      	bcc.n	39c2 <xTaskGenericCreate+0xae>
    3a2a:	4a28      	ldr	r2, [pc, #160]	; (3acc <xTaskGenericCreate+0x1b8>)
					{
						pxCurrentTCB = pxNewTCB;
    3a2c:	602c      	str	r4, [r5, #0]
    3a2e:	4690      	mov	r8, r2
    3a30:	e7c9      	b.n	39c6 <xTaskGenericCreate+0xb2>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3a32:	2601      	movs	r6, #1
    3a34:	4270      	negs	r0, r6
    3a36:	e7e9      	b.n	3a0c <xTaskGenericCreate+0xf8>
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    3a38:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3a3a:	681b      	ldr	r3, [r3, #0]
    3a3c:	2b01      	cmp	r3, #1
    3a3e:	d012      	beq.n	3a66 <xTaskGenericCreate+0x152>
    3a40:	4b22      	ldr	r3, [pc, #136]	; (3acc <xTaskGenericCreate+0x1b8>)
    3a42:	4e21      	ldr	r6, [pc, #132]	; (3ac8 <xTaskGenericCreate+0x1b4>)
    3a44:	4698      	mov	r8, r3
    3a46:	e7be      	b.n	39c6 <xTaskGenericCreate+0xb2>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    3a48:	00b7      	lsls	r7, r6, #2
    3a4a:	1c38      	adds	r0, r7, #0
    3a4c:	f000 fe60 	bl	4710 <pvPortMalloc>
    3a50:	1c05      	adds	r5, r0, #0
    3a52:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    3a54:	2800      	cmp	r0, #0
    3a56:	d000      	beq.n	3a5a <xTaskGenericCreate+0x146>
    3a58:	e774      	b.n	3944 <xTaskGenericCreate+0x30>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    3a5a:	1c20      	adds	r0, r4, #0
    3a5c:	f000 fe66 	bl	472c <vPortFree>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3a60:	2001      	movs	r0, #1
    3a62:	4240      	negs	r0, r0
    3a64:	e7d2      	b.n	3a0c <xTaskGenericCreate+0xf8>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    3a66:	4a19      	ldr	r2, [pc, #100]	; (3acc <xTaskGenericCreate+0x1b8>)
    3a68:	1c10      	adds	r0, r2, #0
    3a6a:	4690      	mov	r8, r2
    3a6c:	f7ff fc1a 	bl	32a4 <vListInitialise>
    3a70:	2114      	movs	r1, #20
    3a72:	1c08      	adds	r0, r1, #0
    3a74:	4440      	add	r0, r8
    3a76:	f7ff fc15 	bl	32a4 <vListInitialise>
    3a7a:	2028      	movs	r0, #40	; 0x28
    3a7c:	4440      	add	r0, r8
    3a7e:	f7ff fc11 	bl	32a4 <vListInitialise>
    3a82:	233c      	movs	r3, #60	; 0x3c
    3a84:	1c18      	adds	r0, r3, #0
    3a86:	4440      	add	r0, r8
    3a88:	f7ff fc0c 	bl	32a4 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    3a8c:	4e13      	ldr	r6, [pc, #76]	; (3adc <xTaskGenericCreate+0x1c8>)
    3a8e:	1c30      	adds	r0, r6, #0
    3a90:	f7ff fc08 	bl	32a4 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    3a94:	4a12      	ldr	r2, [pc, #72]	; (3ae0 <xTaskGenericCreate+0x1cc>)
    3a96:	1c10      	adds	r0, r2, #0
    3a98:	4691      	mov	r9, r2
    3a9a:	f7ff fc03 	bl	32a4 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    3a9e:	4811      	ldr	r0, [pc, #68]	; (3ae4 <xTaskGenericCreate+0x1d0>)
    3aa0:	f7ff fc00 	bl	32a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    3aa4:	4810      	ldr	r0, [pc, #64]	; (3ae8 <xTaskGenericCreate+0x1d4>)
    3aa6:	f7ff fbfd 	bl	32a4 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    3aaa:	4810      	ldr	r0, [pc, #64]	; (3aec <xTaskGenericCreate+0x1d8>)
    3aac:	f7ff fbfa 	bl	32a4 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3ab0:	490f      	ldr	r1, [pc, #60]	; (3af0 <xTaskGenericCreate+0x1dc>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3ab2:	4810      	ldr	r0, [pc, #64]	; (3af4 <xTaskGenericCreate+0x1e0>)
    3ab4:	464a      	mov	r2, r9
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3ab6:	600e      	str	r6, [r1, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3ab8:	6002      	str	r2, [r0, #0]
    3aba:	4e03      	ldr	r6, [pc, #12]	; (3ac8 <xTaskGenericCreate+0x1b4>)
    3abc:	e783      	b.n	39c6 <xTaskGenericCreate+0xb2>
    3abe:	46c0      	nop			; (mov r8, r8)
    3ac0:	40000b48 	.word	0x40000b48
    3ac4:	40000afc 	.word	0x40000afc
    3ac8:	40000aec 	.word	0x40000aec
    3acc:	40000a68 	.word	0x40000a68
    3ad0:	40000b88 	.word	0x40000b88
    3ad4:	40000af4 	.word	0x40000af4
    3ad8:	40000a5c 	.word	0x40000a5c
    3adc:	40000b4c 	.word	0x40000b4c
    3ae0:	40000b60 	.word	0x40000b60
    3ae4:	40000ad8 	.word	0x40000ad8
    3ae8:	40000abc 	.word	0x40000abc
    3aec:	40000b34 	.word	0x40000b34
    3af0:	40000ad4 	.word	0x40000ad4
    3af4:	40000ab8 	.word	0x40000ab8

00003af8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3af8:	b570      	push	{r4, r5, r6, lr}
    3afa:	1c04      	adds	r4, r0, #0
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    3afc:	f00a fac8 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3b00:	4b16      	ldr	r3, [pc, #88]	; (3b5c <vTaskDelete+0x64>)
    3b02:	681a      	ldr	r2, [r3, #0]
    3b04:	4294      	cmp	r4, r2
    3b06:	d025      	beq.n	3b54 <vTaskDelete+0x5c>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3b08:	1e25      	subs	r5, r4, #0
    3b0a:	d023      	beq.n	3b54 <vTaskDelete+0x5c>

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3b0c:	1d2e      	adds	r6, r5, #4
    3b0e:	1c30      	adds	r0, r6, #0
    3b10:	f7ff fc04 	bl	331c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    3b14:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3b16:	2b00      	cmp	r3, #0
    3b18:	d003      	beq.n	3b22 <vTaskDelete+0x2a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3b1a:	1c28      	adds	r0, r5, #0
    3b1c:	3018      	adds	r0, #24
    3b1e:	f7ff fbfd 	bl	331c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3b22:	1c31      	adds	r1, r6, #0
    3b24:	480e      	ldr	r0, [pc, #56]	; (3b60 <vTaskDelete+0x68>)
    3b26:	f7ff fbcd 	bl	32c4 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3b2a:	4b0e      	ldr	r3, [pc, #56]	; (3b64 <vTaskDelete+0x6c>)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3b2c:	4e0e      	ldr	r6, [pc, #56]	; (3b68 <vTaskDelete+0x70>)
			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3b2e:	681a      	ldr	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3b30:	6835      	ldr	r5, [r6, #0]
			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3b32:	3201      	adds	r2, #1

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3b34:	3501      	adds	r5, #1
			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3b36:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3b38:	6035      	str	r5, [r6, #0]

			traceTASK_DELETE( pxTCB );
		}
		portEXIT_CRITICAL();
    3b3a:	f00a fb55 	bl	e1e8 <__vPortExitCritical_from_thumb>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3b3e:	490b      	ldr	r1, [pc, #44]	; (3b6c <vTaskDelete+0x74>)
    3b40:	6808      	ldr	r0, [r1, #0]
    3b42:	2800      	cmp	r0, #0
    3b44:	d001      	beq.n	3b4a <vTaskDelete+0x52>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3b46:	2c00      	cmp	r4, #0
    3b48:	d002      	beq.n	3b50 <vTaskDelete+0x58>
			{
				portYIELD_WITHIN_API();
			}
		}
	}
    3b4a:	bc70      	pop	{r4, r5, r6}
    3b4c:	bc01      	pop	{r0}
    3b4e:	4700      	bx	r0
		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
		{
			if( ( void * ) pxTaskToDelete == NULL )
			{
				portYIELD_WITHIN_API();
    3b50:	df00      	svc	0
    3b52:	e7fa      	b.n	3b4a <vTaskDelete+0x52>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3b54:	681d      	ldr	r5, [r3, #0]
    3b56:	2400      	movs	r4, #0
    3b58:	e7d8      	b.n	3b0c <vTaskDelete+0x14>
    3b5a:	46c0      	nop			; (mov r8, r8)
    3b5c:	40000afc 	.word	0x40000afc
    3b60:	40000abc 	.word	0x40000abc
    3b64:	40000a60 	.word	0x40000a60
    3b68:	40000af4 	.word	0x40000af4
    3b6c:	40000aec 	.word	0x40000aec

00003b70 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    3b70:	b510      	push	{r4, lr}
    3b72:	1c04      	adds	r4, r0, #0
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		portENTER_CRITICAL();
    3b74:	f00a fa8c 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3b78:	2c00      	cmp	r4, #0
    3b7a:	d006      	beq.n	3b8a <uxTaskPriorityGet+0x1a>
			uxReturn = pxTCB->uxPriority;
    3b7c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		}
		portEXIT_CRITICAL();
    3b7e:	f00a fb33 	bl	e1e8 <__vPortExitCritical_from_thumb>

		return uxReturn;
	}
    3b82:	1c20      	adds	r0, r4, #0
    3b84:	bc10      	pop	{r4}
    3b86:	bc02      	pop	{r1}
    3b88:	4708      	bx	r1

		portENTER_CRITICAL();
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3b8a:	4b01      	ldr	r3, [pc, #4]	; (3b90 <uxTaskPriorityGet+0x20>)
    3b8c:	681c      	ldr	r4, [r3, #0]
    3b8e:	e7f5      	b.n	3b7c <uxTaskPriorityGet+0xc>
    3b90:	40000afc 	.word	0x40000afc

00003b94 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    3b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b96:	1c06      	adds	r6, r0, #0
    3b98:	1c0d      	adds	r5, r1, #0
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3b9a:	2903      	cmp	r1, #3
    3b9c:	d900      	bls.n	3ba0 <vTaskPrioritySet+0xc>
    3b9e:	2503      	movs	r5, #3
		if( uxNewPriority >= configMAX_PRIORITIES )
		{
			uxNewPriority = configMAX_PRIORITIES - 1;
		}

		portENTER_CRITICAL();
    3ba0:	f00a fa76 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			if( pxTask == pxCurrentTCB )
    3ba4:	4b1f      	ldr	r3, [pc, #124]	; (3c24 <vTaskPrioritySet+0x90>)
    3ba6:	681a      	ldr	r2, [r3, #0]
    3ba8:	4296      	cmp	r6, r2
    3baa:	d025      	beq.n	3bf8 <vTaskPrioritySet+0x64>
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3bac:	1e34      	subs	r4, r6, #0
    3bae:	d023      	beq.n	3bf8 <vTaskPrioritySet+0x64>

			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3bb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3bb2:	42ab      	cmp	r3, r5
    3bb4:	d014      	beq.n	3be0 <vTaskPrioritySet+0x4c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3bb6:	d318      	bcc.n	3bea <vTaskPrioritySet+0x56>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3bb8:	4272      	negs	r2, r6
    3bba:	4156      	adcs	r6, r2

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3bbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3bbe:	4293      	cmp	r3, r2
    3bc0:	d018      	beq.n	3bf4 <vTaskPrioritySet+0x60>
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3bc2:	2004      	movs	r0, #4

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3bc4:	009a      	lsls	r2, r3, #2
					{
						pxTCB->uxPriority = uxNewPriority;
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3bc6:	6465      	str	r5, [r4, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3bc8:	1b45      	subs	r5, r0, r5

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3bca:	18d7      	adds	r7, r2, r3
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3bcc:	61a5      	str	r5, [r4, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3bce:	4d16      	ldr	r5, [pc, #88]	; (3c28 <vTaskPrioritySet+0x94>)
    3bd0:	00b9      	lsls	r1, r7, #2
    3bd2:	6960      	ldr	r0, [r4, #20]
    3bd4:	186b      	adds	r3, r5, r1
    3bd6:	4298      	cmp	r0, r3
    3bd8:	d011      	beq.n	3bfe <vTaskPrioritySet+0x6a>
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
				}

				if( xYieldRequired == pdTRUE )
    3bda:	2e01      	cmp	r6, #1
    3bdc:	d100      	bne.n	3be0 <vTaskPrioritySet+0x4c>
				{
					portYIELD_WITHIN_API();
    3bde:	df00      	svc	0
				}
			}
		}
		portEXIT_CRITICAL();
    3be0:	f00a fb02 	bl	e1e8 <__vPortExitCritical_from_thumb>
	}
    3be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3be6:	bc01      	pop	{r0}
    3be8:	4700      	bx	r0
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3bea:	1e72      	subs	r2, r6, #1
    3bec:	4196      	sbcs	r6, r2

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3bee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3bf0:	4293      	cmp	r3, r2
    3bf2:	d1e6      	bne.n	3bc2 <vTaskPrioritySet+0x2e>
					{
						pxTCB->uxPriority = uxNewPriority;
    3bf4:	62e5      	str	r5, [r4, #44]	; 0x2c
    3bf6:	e7e4      	b.n	3bc2 <vTaskPrioritySet+0x2e>
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3bf8:	681c      	ldr	r4, [r3, #0]
    3bfa:	2600      	movs	r6, #0
    3bfc:	e7d8      	b.n	3bb0 <vTaskPrioritySet+0x1c>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3bfe:	1d27      	adds	r7, r4, #4
    3c00:	1c38      	adds	r0, r7, #0
    3c02:	f7ff fb8b 	bl	331c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3c06:	4a09      	ldr	r2, [pc, #36]	; (3c2c <vTaskPrioritySet+0x98>)
    3c08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3c0a:	6811      	ldr	r1, [r2, #0]
    3c0c:	428b      	cmp	r3, r1
    3c0e:	d900      	bls.n	3c12 <vTaskPrioritySet+0x7e>
    3c10:	6013      	str	r3, [r2, #0]
    3c12:	009a      	lsls	r2, r3, #2
    3c14:	18d3      	adds	r3, r2, r3
    3c16:	009c      	lsls	r4, r3, #2
    3c18:	1928      	adds	r0, r5, r4
    3c1a:	1c39      	adds	r1, r7, #0
    3c1c:	f7ff fb52 	bl	32c4 <vListInsertEnd>
    3c20:	e7db      	b.n	3bda <vTaskPrioritySet+0x46>
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	40000afc 	.word	0x40000afc
    3c28:	40000a68 	.word	0x40000a68
    3c2c:	40000a5c 	.word	0x40000a5c

00003c30 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3c30:	b500      	push	{lr}
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3c32:	6941      	ldr	r1, [r0, #20]
    3c34:	4a06      	ldr	r2, [pc, #24]	; (3c50 <xTaskIsTaskSuspended+0x20>)
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3c36:	1c03      	adds	r3, r0, #0
	portBASE_TYPE xReturn = pdFALSE;
    3c38:	2000      	movs	r0, #0
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3c3a:	4291      	cmp	r1, r2
    3c3c:	d001      	beq.n	3c42 <xTaskIsTaskSuspended+0x12>
				}
			}
		}

		return xReturn;
	}
    3c3e:	bc02      	pop	{r1}
    3c40:	4708      	bx	r1
		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c44:	4a03      	ldr	r2, [pc, #12]	; (3c54 <xTaskIsTaskSuspended+0x24>)
    3c46:	4293      	cmp	r3, r2
    3c48:	d0f9      	beq.n	3c3e <xTaskIsTaskSuspended+0xe>

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
    3c4a:	4258      	negs	r0, r3
    3c4c:	4158      	adcs	r0, r3
    3c4e:	e7f6      	b.n	3c3e <xTaskIsTaskSuspended+0xe>
    3c50:	40000b34 	.word	0x40000b34
    3c54:	40000ad8 	.word	0x40000ad8

00003c58 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    3c58:	b570      	push	{r4, r5, r6, lr}
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3c5a:	1e04      	subs	r4, r0, #0
    3c5c:	d00b      	beq.n	3c76 <vTaskResume+0x1e>
    3c5e:	4d17      	ldr	r5, [pc, #92]	; (3cbc <vTaskResume+0x64>)
    3c60:	682b      	ldr	r3, [r5, #0]
    3c62:	429c      	cmp	r4, r3
    3c64:	d007      	beq.n	3c76 <vTaskResume+0x1e>
		{
			portENTER_CRITICAL();
    3c66:	f00a fa13 	bl	e090 <__vPortEnterCritical_from_thumb>
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3c6a:	6962      	ldr	r2, [r4, #20]
    3c6c:	4b14      	ldr	r3, [pc, #80]	; (3cc0 <vTaskResume+0x68>)
    3c6e:	429a      	cmp	r2, r3
    3c70:	d004      	beq.n	3c7c <vTaskResume+0x24>
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
					}
				}
			}
			portEXIT_CRITICAL();
    3c72:	f00a fab9 	bl	e1e8 <__vPortExitCritical_from_thumb>
		}
	}
    3c76:	bc70      	pop	{r4, r5, r6}
    3c78:	bc01      	pop	{r0}
    3c7a:	4700      	bx	r0
		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3c7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3c7e:	4a11      	ldr	r2, [pc, #68]	; (3cc4 <vTaskResume+0x6c>)
    3c80:	4293      	cmp	r3, r2
    3c82:	d0f6      	beq.n	3c72 <vTaskResume+0x1a>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3c84:	2b00      	cmp	r3, #0
    3c86:	d1f4      	bne.n	3c72 <vTaskResume+0x1a>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3c88:	1d26      	adds	r6, r4, #4
    3c8a:	1c30      	adds	r0, r6, #0
    3c8c:	f7ff fb46 	bl	331c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3c90:	4a0d      	ldr	r2, [pc, #52]	; (3cc8 <vTaskResume+0x70>)
    3c92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3c94:	6811      	ldr	r1, [r2, #0]
    3c96:	428b      	cmp	r3, r1
    3c98:	d900      	bls.n	3c9c <vTaskResume+0x44>
    3c9a:	6013      	str	r3, [r2, #0]
    3c9c:	0099      	lsls	r1, r3, #2
    3c9e:	18cb      	adds	r3, r1, r3
    3ca0:	4a0a      	ldr	r2, [pc, #40]	; (3ccc <vTaskResume+0x74>)
    3ca2:	0098      	lsls	r0, r3, #2
    3ca4:	1810      	adds	r0, r2, r0
    3ca6:	1c31      	adds	r1, r6, #0
    3ca8:	f7ff fb0c 	bl	32c4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3cac:	6829      	ldr	r1, [r5, #0]
    3cae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3cb0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    3cb2:	4298      	cmp	r0, r3
    3cb4:	d3dd      	bcc.n	3c72 <vTaskResume+0x1a>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    3cb6:	df00      	svc	0
    3cb8:	e7db      	b.n	3c72 <vTaskResume+0x1a>
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	40000afc 	.word	0x40000afc
    3cc0:	40000b34 	.word	0x40000b34
    3cc4:	40000ad8 	.word	0x40000ad8
    3cc8:	40000a5c 	.word	0x40000a5c
    3ccc:	40000a68 	.word	0x40000a68

00003cd0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3cd0:	b570      	push	{r4, r5, r6, lr}
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3cd2:	6942      	ldr	r2, [r0, #20]
    3cd4:	4b18      	ldr	r3, [pc, #96]	; (3d38 <xTaskResumeFromISR+0x68>)
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3cd6:	1c04      	adds	r4, r0, #0
	portBASE_TYPE xYieldRequired = pdFALSE;
    3cd8:	2500      	movs	r5, #0
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3cda:	429a      	cmp	r2, r3
    3cdc:	d003      	beq.n	3ce6 <xTaskResumeFromISR+0x16>
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
			}
		}

		return xYieldRequired;
	}
    3cde:	1c28      	adds	r0, r5, #0
    3ce0:	bc70      	pop	{r4, r5, r6}
    3ce2:	bc02      	pop	{r1}
    3ce4:	4708      	bx	r1
		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3ce6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    3ce8:	4814      	ldr	r0, [pc, #80]	; (3d3c <xTaskResumeFromISR+0x6c>)
    3cea:	4283      	cmp	r3, r0
    3cec:	d0f7      	beq.n	3cde <xTaskResumeFromISR+0xe>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3cee:	42ab      	cmp	r3, r5
    3cf0:	d1f5      	bne.n	3cde <xTaskResumeFromISR+0xe>

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3cf2:	4b13      	ldr	r3, [pc, #76]	; (3d40 <xTaskResumeFromISR+0x70>)
    3cf4:	681e      	ldr	r6, [r3, #0]
    3cf6:	2e00      	cmp	r6, #0
    3cf8:	d118      	bne.n	3d2c <xTaskResumeFromISR+0x5c>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    3cfa:	4b12      	ldr	r3, [pc, #72]	; (3d44 <xTaskResumeFromISR+0x74>)
    3cfc:	681a      	ldr	r2, [r3, #0]
    3cfe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3d00:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
    3d02:	42b0      	cmp	r0, r6
    3d04:	416d      	adcs	r5, r5
				vListRemove(  &( pxTCB->xGenericListItem ) );
    3d06:	1d26      	adds	r6, r4, #4
    3d08:	1c30      	adds	r0, r6, #0
    3d0a:	f7ff fb07 	bl	331c <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    3d0e:	4a0e      	ldr	r2, [pc, #56]	; (3d48 <xTaskResumeFromISR+0x78>)
    3d10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3d12:	6811      	ldr	r1, [r2, #0]
    3d14:	428b      	cmp	r3, r1
    3d16:	d900      	bls.n	3d1a <xTaskResumeFromISR+0x4a>
    3d18:	6013      	str	r3, [r2, #0]
    3d1a:	009a      	lsls	r2, r3, #2
    3d1c:	18d0      	adds	r0, r2, r3
    3d1e:	4c0b      	ldr	r4, [pc, #44]	; (3d4c <xTaskResumeFromISR+0x7c>)
    3d20:	0081      	lsls	r1, r0, #2
    3d22:	1860      	adds	r0, r4, r1
    3d24:	1c31      	adds	r1, r6, #0
    3d26:	f7ff facd 	bl	32c4 <vListInsertEnd>
    3d2a:	e7d8      	b.n	3cde <xTaskResumeFromISR+0xe>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3d2c:	1c21      	adds	r1, r4, #0
    3d2e:	3118      	adds	r1, #24
    3d30:	f7ff fac8 	bl	32c4 <vListInsertEnd>
    3d34:	e7d3      	b.n	3cde <xTaskResumeFromISR+0xe>
    3d36:	46c0      	nop			; (mov r8, r8)
    3d38:	40000b34 	.word	0x40000b34
    3d3c:	40000ad8 	.word	0x40000ad8
    3d40:	40000b74 	.word	0x40000b74
    3d44:	40000afc 	.word	0x40000afc
    3d48:	40000a5c 	.word	0x40000a5c
    3d4c:	40000a68 	.word	0x40000a68

00003d50 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3d50:	b530      	push	{r4, r5, lr}
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    3d52:	2400      	movs	r4, #0
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3d54:	b085      	sub	sp, #20
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    3d56:	480d      	ldr	r0, [pc, #52]	; (3d8c <vTaskStartScheduler+0x3c>)
    3d58:	490d      	ldr	r1, [pc, #52]	; (3d90 <vTaskStartScheduler+0x40>)
    3d5a:	2268      	movs	r2, #104	; 0x68
    3d5c:	1c23      	adds	r3, r4, #0
    3d5e:	9400      	str	r4, [sp, #0]
    3d60:	9401      	str	r4, [sp, #4]
    3d62:	9402      	str	r4, [sp, #8]
    3d64:	9403      	str	r4, [sp, #12]
    3d66:	f7ff fdd5 	bl	3914 <xTaskGenericCreate>
    3d6a:	1c05      	adds	r5, r0, #0

	if( xReturn == pdPASS )
    3d6c:	2801      	cmp	r0, #1
    3d6e:	d003      	beq.n	3d78 <vTaskStartScheduler+0x28>
		else
		{
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}
}
    3d70:	b005      	add	sp, #20
    3d72:	bc30      	pop	{r4, r5}
    3d74:	bc01      	pop	{r0}
    3d76:	4700      	bx	r0
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3d78:	f00a f9fc 	bl	e174 <__vPortDisableInterruptsFromThumb_from_thumb>

		xSchedulerRunning = pdTRUE;
		xTickCount = ( portTickType ) 0;
    3d7c:	4b05      	ldr	r3, [pc, #20]	; (3d94 <vTaskStartScheduler+0x44>)

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();

		xSchedulerRunning = pdTRUE;
    3d7e:	4806      	ldr	r0, [pc, #24]	; (3d98 <vTaskStartScheduler+0x48>)
    3d80:	6005      	str	r5, [r0, #0]
		xTickCount = ( portTickType ) 0;
    3d82:	601c      	str	r4, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
    3d84:	f000 fc8e 	bl	46a4 <xPortStartScheduler>
    3d88:	e7f2      	b.n	3d70 <vTaskStartScheduler+0x20>
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	00004121 	.word	0x00004121
    3d90:	0000edb0 	.word	0x0000edb0
    3d94:	40000a64 	.word	0x40000a64
    3d98:	40000aec 	.word	0x40000aec

00003d9c <vTaskEndScheduler>:
	}
}
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3d9c:	b508      	push	{r3, lr}
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3d9e:	f00a f9e9 	bl	e174 <__vPortDisableInterruptsFromThumb_from_thumb>
	xSchedulerRunning = pdFALSE;
    3da2:	4b04      	ldr	r3, [pc, #16]	; (3db4 <vTaskEndScheduler+0x18>)
    3da4:	2200      	movs	r2, #0
    3da6:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3da8:	f000 fcb0 	bl	470c <vPortEndScheduler>
}
    3dac:	bc08      	pop	{r3}
    3dae:	bc01      	pop	{r0}
    3db0:	4700      	bx	r0
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	40000aec 	.word	0x40000aec

00003db8 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3db8:	4b02      	ldr	r3, [pc, #8]	; (3dc4 <vTaskSuspendAll+0xc>)
    3dba:	681a      	ldr	r2, [r3, #0]
    3dbc:	3201      	adds	r2, #1
    3dbe:	601a      	str	r2, [r3, #0]
}
    3dc0:	4770      	bx	lr
    3dc2:	46c0      	nop			; (mov r8, r8)
    3dc4:	40000b74 	.word	0x40000b74

00003dc8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3dc8:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portENTER_CRITICAL();
    3dca:	f00a f961 	bl	e090 <__vPortEnterCritical_from_thumb>
	{
		xTicks = xTickCount;
    3dce:	4b04      	ldr	r3, [pc, #16]	; (3de0 <xTaskGetTickCount+0x18>)
    3dd0:	681c      	ldr	r4, [r3, #0]
	}
	portEXIT_CRITICAL();
    3dd2:	f00a fa09 	bl	e1e8 <__vPortExitCritical_from_thumb>

	return xTicks;
}
    3dd6:	1c20      	adds	r0, r4, #0
    3dd8:	bc10      	pop	{r4}
    3dda:	bc02      	pop	{r1}
    3ddc:	4708      	bx	r1
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	40000a64 	.word	0x40000a64

00003de4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
	return xTickCount;
    3de4:	4b01      	ldr	r3, [pc, #4]	; (3dec <xTaskGetTickCountFromISR+0x8>)
    3de6:	6818      	ldr	r0, [r3, #0]
}
    3de8:	4770      	bx	lr
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	40000a64 	.word	0x40000a64

00003df0 <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3df0:	4b01      	ldr	r3, [pc, #4]	; (3df8 <uxTaskGetNumberOfTasks+0x8>)
    3df2:	6818      	ldr	r0, [r3, #0]
}
    3df4:	4770      	bx	lr
    3df6:	46c0      	nop			; (mov r8, r8)
    3df8:	40000b48 	.word	0x40000b48

00003dfc <vTaskStartTrace>:
/*----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
	{
    3dfc:	b538      	push	{r3, r4, r5, lr}
    3dfe:	1c04      	adds	r4, r0, #0
    3e00:	1c0d      	adds	r5, r1, #0
		portENTER_CRITICAL();
    3e02:	f00a f945 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			pcTraceBuffer = ( signed char * )pcBuffer;
    3e06:	4a08      	ldr	r2, [pc, #32]	; (3e28 <vTaskStartTrace+0x2c>)
			pcTraceBufferStart = pcBuffer;
    3e08:	4908      	ldr	r1, [pc, #32]	; (3e2c <vTaskStartTrace+0x30>)
			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
    3e0a:	3d08      	subs	r5, #8
    3e0c:	4808      	ldr	r0, [pc, #32]	; (3e30 <vTaskStartTrace+0x34>)
			xTracing = pdTRUE;
    3e0e:	4b09      	ldr	r3, [pc, #36]	; (3e34 <vTaskStartTrace+0x38>)

	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
	{
		portENTER_CRITICAL();
		{
			pcTraceBuffer = ( signed char * )pcBuffer;
    3e10:	6014      	str	r4, [r2, #0]
			pcTraceBufferStart = pcBuffer;
    3e12:	600c      	str	r4, [r1, #0]
			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
			xTracing = pdTRUE;
    3e14:	2201      	movs	r2, #1
	{
		portENTER_CRITICAL();
		{
			pcTraceBuffer = ( signed char * )pcBuffer;
			pcTraceBufferStart = pcBuffer;
			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
    3e16:	1964      	adds	r4, r4, r5
    3e18:	6004      	str	r4, [r0, #0]
			xTracing = pdTRUE;
    3e1a:	601a      	str	r2, [r3, #0]
		}
		portEXIT_CRITICAL();
    3e1c:	f00a f9e4 	bl	e1e8 <__vPortExitCritical_from_thumb>
	}
    3e20:	bc38      	pop	{r3, r4, r5}
    3e22:	bc01      	pop	{r0}
    3e24:	4700      	bx	r0
    3e26:	46c0      	nop			; (mov r8, r8)
    3e28:	40000af8 	.word	0x40000af8
    3e2c:	40000b7c 	.word	0x40000b7c
    3e30:	40000b80 	.word	0x40000b80
    3e34:	40000ad0 	.word	0x40000ad0

00003e38 <ulTaskEndTrace>:
/*----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned long ulTaskEndTrace( void )
	{
    3e38:	b508      	push	{r3, lr}
	unsigned long ulBufferLength;

		portENTER_CRITICAL();
    3e3a:	f00a f929 	bl	e090 <__vPortEnterCritical_from_thumb>
			xTracing = pdFALSE;
    3e3e:	4b06      	ldr	r3, [pc, #24]	; (3e58 <ulTaskEndTrace+0x20>)
    3e40:	2000      	movs	r0, #0
    3e42:	6018      	str	r0, [r3, #0]
		portEXIT_CRITICAL();
    3e44:	f00a f9d0 	bl	e1e8 <__vPortExitCritical_from_thumb>

		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
    3e48:	4a04      	ldr	r2, [pc, #16]	; (3e5c <ulTaskEndTrace+0x24>)
    3e4a:	4905      	ldr	r1, [pc, #20]	; (3e60 <ulTaskEndTrace+0x28>)
    3e4c:	6810      	ldr	r0, [r2, #0]
    3e4e:	680b      	ldr	r3, [r1, #0]
    3e50:	1ac0      	subs	r0, r0, r3

		return ulBufferLength;
	}
    3e52:	bc08      	pop	{r3}
    3e54:	bc02      	pop	{r1}
    3e56:	4708      	bx	r1
    3e58:	40000ad0 	.word	0x40000ad0
    3e5c:	40000af8 	.word	0x40000af8
    3e60:	40000b7c 	.word	0x40000b7c

00003e64 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
    3e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e66:	464f      	mov	r7, r9
    3e68:	4646      	mov	r6, r8
    3e6a:	b4c0      	push	{r6, r7}
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3e6c:	4829      	ldr	r0, [pc, #164]	; (3f14 <vTaskIncrementTick+0xb0>)
    3e6e:	6803      	ldr	r3, [r0, #0]
    3e70:	2b00      	cmp	r3, #0
    3e72:	d148      	bne.n	3f06 <vTaskIncrementTick+0xa2>
	{
		++xTickCount;
    3e74:	4a28      	ldr	r2, [pc, #160]	; (3f18 <vTaskIncrementTick+0xb4>)
    3e76:	6814      	ldr	r4, [r2, #0]
    3e78:	3401      	adds	r4, #1
    3e7a:	6014      	str	r4, [r2, #0]
		if( xTickCount == ( portTickType ) 0 )
    3e7c:	6811      	ldr	r1, [r2, #0]
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
	{
		++xTickCount;
    3e7e:	4690      	mov	r8, r2
		if( xTickCount == ( portTickType ) 0 )
    3e80:	2900      	cmp	r1, #0
    3e82:	d035      	beq.n	3ef0 <vTaskIncrementTick+0x8c>
    3e84:	4d25      	ldr	r5, [pc, #148]	; (3f1c <vTaskIncrementTick+0xb8>)
			pxOverflowDelayedTaskList = pxTemp;
			xNumOfOverflows++;
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3e86:	4b26      	ldr	r3, [pc, #152]	; (3f20 <vTaskIncrementTick+0xbc>)
    3e88:	4e26      	ldr	r6, [pc, #152]	; (3f24 <vTaskIncrementTick+0xc0>)
    3e8a:	4699      	mov	r9, r3
    3e8c:	e020      	b.n	3ed0 <vTaskIncrementTick+0x6c>
    3e8e:	682c      	ldr	r4, [r5, #0]
    3e90:	68e2      	ldr	r2, [r4, #12]
    3e92:	68d4      	ldr	r4, [r2, #12]
    3e94:	2c00      	cmp	r4, #0
    3e96:	d01f      	beq.n	3ed8 <vTaskIncrementTick+0x74>
    3e98:	4642      	mov	r2, r8
    3e9a:	6813      	ldr	r3, [r2, #0]
    3e9c:	6862      	ldr	r2, [r4, #4]
    3e9e:	429a      	cmp	r2, r3
    3ea0:	d81a      	bhi.n	3ed8 <vTaskIncrementTick+0x74>
    3ea2:	1d27      	adds	r7, r4, #4
    3ea4:	1c38      	adds	r0, r7, #0
    3ea6:	f7ff fa39 	bl	331c <vListRemove>
    3eaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3eac:	2800      	cmp	r0, #0
    3eae:	d003      	beq.n	3eb8 <vTaskIncrementTick+0x54>
    3eb0:	1c20      	adds	r0, r4, #0
    3eb2:	3018      	adds	r0, #24
    3eb4:	f7ff fa32 	bl	331c <vListRemove>
    3eb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3eba:	6832      	ldr	r2, [r6, #0]
    3ebc:	4293      	cmp	r3, r2
    3ebe:	d900      	bls.n	3ec2 <vTaskIncrementTick+0x5e>
    3ec0:	6033      	str	r3, [r6, #0]
    3ec2:	0099      	lsls	r1, r3, #2
    3ec4:	18cc      	adds	r4, r1, r3
    3ec6:	00a0      	lsls	r0, r4, #2
    3ec8:	4448      	add	r0, r9
    3eca:	1c39      	adds	r1, r7, #0
    3ecc:	f7ff f9fa 	bl	32c4 <vListInsertEnd>
    3ed0:	6828      	ldr	r0, [r5, #0]
    3ed2:	6807      	ldr	r7, [r0, #0]
    3ed4:	2f00      	cmp	r7, #0
    3ed6:	d1da      	bne.n	3e8e <vTaskIncrementTick+0x2a>
    3ed8:	4c13      	ldr	r4, [pc, #76]	; (3f28 <vTaskIncrementTick+0xc4>)
	{
		extern void vApplicationTickHook( void );

		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == 0 )
    3eda:	6826      	ldr	r6, [r4, #0]
    3edc:	2e00      	cmp	r6, #0
    3ede:	d101      	bne.n	3ee4 <vTaskIncrementTick+0x80>
		{
			vApplicationTickHook();
    3ee0:	f00a f93e 	bl	e160 <__vApplicationTickHook_from_thumb>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3ee4:	bc0c      	pop	{r2, r3}
    3ee6:	4690      	mov	r8, r2
    3ee8:	4699      	mov	r9, r3
    3eea:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3eec:	bc01      	pop	{r0}
    3eee:	4700      	bx	r0
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
    3ef0:	4d0a      	ldr	r5, [pc, #40]	; (3f1c <vTaskIncrementTick+0xb8>)
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3ef2:	4b0e      	ldr	r3, [pc, #56]	; (3f2c <vTaskIncrementTick+0xc8>)
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
    3ef4:	6828      	ldr	r0, [r5, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3ef6:	6819      	ldr	r1, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
			xNumOfOverflows++;
    3ef8:	4f0d      	ldr	r7, [pc, #52]	; (3f30 <vTaskIncrementTick+0xcc>)

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3efa:	6029      	str	r1, [r5, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3efc:	6018      	str	r0, [r3, #0]
			xNumOfOverflows++;
    3efe:	683e      	ldr	r6, [r7, #0]
    3f00:	3601      	adds	r6, #1
    3f02:	603e      	str	r6, [r7, #0]
    3f04:	e7bf      	b.n	3e86 <vTaskIncrementTick+0x22>
		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
	}
	else
	{
		++uxMissedTicks;
    3f06:	4c08      	ldr	r4, [pc, #32]	; (3f28 <vTaskIncrementTick+0xc4>)
    3f08:	6825      	ldr	r5, [r4, #0]
    3f0a:	3501      	adds	r5, #1
    3f0c:	6025      	str	r5, [r4, #0]
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			extern void vApplicationTickHook( void );

			vApplicationTickHook();
    3f0e:	f00a f927 	bl	e160 <__vApplicationTickHook_from_thumb>
    3f12:	e7e2      	b.n	3eda <vTaskIncrementTick+0x76>
    3f14:	40000b74 	.word	0x40000b74
    3f18:	40000a64 	.word	0x40000a64
    3f1c:	40000ad4 	.word	0x40000ad4
    3f20:	40000a68 	.word	0x40000a68
    3f24:	40000a5c 	.word	0x40000a5c
    3f28:	40000b78 	.word	0x40000b78
    3f2c:	40000ab8 	.word	0x40000ab8
    3f30:	40000b84 	.word	0x40000b84

00003f34 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f36:	4657      	mov	r7, sl
    3f38:	464e      	mov	r6, r9
    3f3a:	4645      	mov	r5, r8
    3f3c:	b4e0      	push	{r5, r6, r7}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
    3f3e:	f00a f8a7 	bl	e090 <__vPortEnterCritical_from_thumb>
	{
		--uxSchedulerSuspended;
    3f42:	4b2d      	ldr	r3, [pc, #180]	; (3ff8 <xTaskResumeAll+0xc4>)
    3f44:	681a      	ldr	r2, [r3, #0]
    3f46:	3a01      	subs	r2, #1
    3f48:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3f4a:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3f4c:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3f4e:	42a3      	cmp	r3, r4
    3f50:	d119      	bne.n	3f86 <xTaskResumeAll+0x52>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
    3f52:	482a      	ldr	r0, [pc, #168]	; (3ffc <xTaskResumeAll+0xc8>)
    3f54:	6804      	ldr	r4, [r0, #0]
    3f56:	2c00      	cmp	r4, #0
    3f58:	d015      	beq.n	3f86 <xTaskResumeAll+0x52>
    3f5a:	469a      	mov	sl, r3
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3f5c:	4a28      	ldr	r2, [pc, #160]	; (4000 <xTaskResumeAll+0xcc>)

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3f5e:	4b29      	ldr	r3, [pc, #164]	; (4004 <xTaskResumeAll+0xd0>)
    3f60:	4d29      	ldr	r5, [pc, #164]	; (4008 <xTaskResumeAll+0xd4>)
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3f62:	4e2a      	ldr	r6, [pc, #168]	; (400c <xTaskResumeAll+0xd8>)
    3f64:	4691      	mov	r9, r2

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3f66:	4698      	mov	r8, r3
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
    3f68:	682c      	ldr	r4, [r5, #0]
    3f6a:	2c00      	cmp	r4, #0
    3f6c:	d123      	bne.n	3fb6 <xTaskResumeAll+0x82>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    3f6e:	4c28      	ldr	r4, [pc, #160]	; (4010 <xTaskResumeAll+0xdc>)
    3f70:	6823      	ldr	r3, [r4, #0]
    3f72:	2b00      	cmp	r3, #0
    3f74:	d116      	bne.n	3fa4 <xTaskResumeAll+0x70>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3f76:	2201      	movs	r2, #1
    3f78:	4592      	cmp	sl, r2
    3f7a:	d016      	beq.n	3faa <xTaskResumeAll+0x76>
    3f7c:	4a25      	ldr	r2, [pc, #148]	; (4014 <xTaskResumeAll+0xe0>)
    3f7e:	6810      	ldr	r0, [r2, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3f80:	1c1c      	adds	r4, r3, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3f82:	2801      	cmp	r0, #1
    3f84:	d012      	beq.n	3fac <xTaskResumeAll+0x78>
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	portEXIT_CRITICAL();
    3f86:	f00a f92f 	bl	e1e8 <__vPortExitCritical_from_thumb>

	return xAlreadyYielded;
}
    3f8a:	1c20      	adds	r0, r4, #0
    3f8c:	bc1c      	pop	{r2, r3, r4}
    3f8e:	4690      	mov	r8, r2
    3f90:	4699      	mov	r9, r3
    3f92:	46a2      	mov	sl, r4
    3f94:	bcf0      	pop	{r4, r5, r6, r7}
    3f96:	bc02      	pop	{r1}
    3f98:	4708      	bx	r1
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
    3f9a:	f7ff ff63 	bl	3e64 <vTaskIncrementTick>
						--uxMissedTicks;
    3f9e:	6825      	ldr	r5, [r4, #0]
    3fa0:	3d01      	subs	r5, #1
    3fa2:	6025      	str	r5, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    3fa4:	6826      	ldr	r6, [r4, #0]
    3fa6:	2e00      	cmp	r6, #0
    3fa8:	d1f7      	bne.n	3f9a <xTaskResumeAll+0x66>
    3faa:	4a1a      	ldr	r2, [pc, #104]	; (4014 <xTaskResumeAll+0xe0>)
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    3fac:	2100      	movs	r1, #0
    3fae:	6011      	str	r1, [r2, #0]
					portYIELD_WITHIN_API();
    3fb0:	df00      	svc	0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    3fb2:	2401      	movs	r4, #1
    3fb4:	e7e7      	b.n	3f86 <xTaskResumeAll+0x52>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
    3fb6:	68ef      	ldr	r7, [r5, #12]
    3fb8:	68fc      	ldr	r4, [r7, #12]
    3fba:	2c00      	cmp	r4, #0
    3fbc:	d0d7      	beq.n	3f6e <xTaskResumeAll+0x3a>
				{
					vListRemove( &( pxTCB->xEventListItem ) );
    3fbe:	1c20      	adds	r0, r4, #0
    3fc0:	3018      	adds	r0, #24
					vListRemove( &( pxTCB->xGenericListItem ) );
    3fc2:	1d27      	adds	r7, r4, #4

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
    3fc4:	f7ff f9aa 	bl	331c <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3fc8:	1c38      	adds	r0, r7, #0
    3fca:	f7ff f9a7 	bl	331c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3fce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3fd0:	6832      	ldr	r2, [r6, #0]
    3fd2:	4293      	cmp	r3, r2
    3fd4:	d900      	bls.n	3fd8 <xTaskResumeAll+0xa4>
    3fd6:	6033      	str	r3, [r6, #0]
    3fd8:	0099      	lsls	r1, r3, #2
    3fda:	18c8      	adds	r0, r1, r3
    3fdc:	0080      	lsls	r0, r0, #2
    3fde:	1c39      	adds	r1, r7, #0
    3fe0:	4448      	add	r0, r9
    3fe2:	f7ff f96f 	bl	32c4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3fe6:	4642      	mov	r2, r8
    3fe8:	6817      	ldr	r7, [r2, #0]
    3fea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    3fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fee:	4299      	cmp	r1, r3
    3ff0:	d3ba      	bcc.n	3f68 <xTaskResumeAll+0x34>
					{
						xYieldRequired = pdTRUE;
    3ff2:	2301      	movs	r3, #1
    3ff4:	469a      	mov	sl, r3
    3ff6:	e7b7      	b.n	3f68 <xTaskResumeAll+0x34>
    3ff8:	40000b74 	.word	0x40000b74
    3ffc:	40000b48 	.word	0x40000b48
    4000:	40000a68 	.word	0x40000a68
    4004:	40000afc 	.word	0x40000afc
    4008:	40000ad8 	.word	0x40000ad8
    400c:	40000a5c 	.word	0x40000a5c
    4010:	40000b78 	.word	0x40000b78
    4014:	40000af0 	.word	0x40000af0

00004018 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    4018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    401a:	4f39      	ldr	r7, [pc, #228]	; (4100 <vTaskList+0xe8>)
    401c:	683e      	ldr	r6, [r7, #0]
		vTaskSuspendAll();
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
    401e:	2400      	movs	r4, #0

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4020:	3601      	adds	r6, #1
    4022:	603e      	str	r6, [r7, #0]
		vTaskSuspendAll();
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
    4024:	7004      	strb	r4, [r0, #0]
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    4026:	1c05      	adds	r5, r0, #0
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    4028:	f001 fd2c 	bl	5a84 <strlen>
    402c:	4935      	ldr	r1, [pc, #212]	; (4104 <vTaskList+0xec>)
    402e:	2203      	movs	r2, #3
    4030:	1828      	adds	r0, r5, r0
    4032:	f001 fb25 	bl	5680 <memcpy>

			uxQueue = uxTopUsedPriority + 1;
    4036:	4a34      	ldr	r2, [pc, #208]	; (4108 <vTaskList+0xf0>)
    4038:	6814      	ldr	r4, [r2, #0]

			do
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    403a:	00a0      	lsls	r0, r4, #2
    403c:	4e33      	ldr	r6, [pc, #204]	; (410c <vTaskList+0xf4>)
    403e:	1901      	adds	r1, r0, r4
    4040:	0089      	lsls	r1, r1, #2
    4042:	5873      	ldr	r3, [r6, r1]
    4044:	2701      	movs	r7, #1
    4046:	4027      	ands	r7, r4
    4048:	2b00      	cmp	r3, #0
    404a:	d146      	bne.n	40da <vTaskList+0xc2>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    404c:	2c00      	cmp	r4, #0
    404e:	d024      	beq.n	409a <vTaskList+0x82>
    4050:	2f00      	cmp	r7, #0
    4052:	d008      	beq.n	4066 <vTaskList+0x4e>

			uxQueue = uxTopUsedPriority + 1;

			do
			{
				uxQueue--;
    4054:	3c01      	subs	r4, #1

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    4056:	00a7      	lsls	r7, r4, #2
    4058:	1939      	adds	r1, r7, r4
    405a:	0089      	lsls	r1, r1, #2
    405c:	5872      	ldr	r2, [r6, r1]
    405e:	2a00      	cmp	r2, #0
    4060:	d114      	bne.n	408c <vTaskList+0x74>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    4062:	2c00      	cmp	r4, #0
    4064:	d019      	beq.n	409a <vTaskList+0x82>

			uxQueue = uxTopUsedPriority + 1;

			do
			{
				uxQueue--;
    4066:	3c01      	subs	r4, #1

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    4068:	00a0      	lsls	r0, r4, #2
    406a:	1901      	adds	r1, r0, r4
    406c:	0089      	lsls	r1, r1, #2
    406e:	5873      	ldr	r3, [r6, r1]
    4070:	2b00      	cmp	r3, #0
    4072:	d0ef      	beq.n	4054 <vTaskList+0x3c>

			uxQueue = uxTopUsedPriority + 1;

			do
			{
				uxQueue--;
    4074:	3c01      	subs	r4, #1

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    4076:	1871      	adds	r1, r6, r1
    4078:	2252      	movs	r2, #82	; 0x52
    407a:	1c28      	adds	r0, r5, #0

			do
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    407c:	00a7      	lsls	r7, r4, #2
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    407e:	f7ff fbf7 	bl	3870 <prvListTaskWithinSingleList>

			do
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    4082:	1939      	adds	r1, r7, r4
    4084:	0089      	lsls	r1, r1, #2
    4086:	5872      	ldr	r2, [r6, r1]
    4088:	2a00      	cmp	r2, #0
    408a:	d0ea      	beq.n	4062 <vTaskList+0x4a>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    408c:	1871      	adds	r1, r6, r1
    408e:	1c28      	adds	r0, r5, #0
    4090:	2252      	movs	r2, #82	; 0x52
    4092:	f7ff fbed 	bl	3870 <prvListTaskWithinSingleList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    4096:	2c00      	cmp	r4, #0
    4098:	d1e5      	bne.n	4066 <vTaskList+0x4e>

			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
    409a:	4b1d      	ldr	r3, [pc, #116]	; (4110 <vTaskList+0xf8>)
    409c:	681c      	ldr	r4, [r3, #0]
    409e:	6822      	ldr	r2, [r4, #0]
    40a0:	2a00      	cmp	r2, #0
    40a2:	d126      	bne.n	40f2 <vTaskList+0xda>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
			}

			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
    40a4:	4b1b      	ldr	r3, [pc, #108]	; (4114 <vTaskList+0xfc>)
    40a6:	681f      	ldr	r7, [r3, #0]
    40a8:	683e      	ldr	r6, [r7, #0]
    40aa:	2e00      	cmp	r6, #0
    40ac:	d11b      	bne.n	40e6 <vTaskList+0xce>
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
    40ae:	491a      	ldr	r1, [pc, #104]	; (4118 <vTaskList+0x100>)
    40b0:	680b      	ldr	r3, [r1, #0]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d10c      	bne.n	40d0 <vTaskList+0xb8>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
    40b6:	4919      	ldr	r1, [pc, #100]	; (411c <vTaskList+0x104>)
    40b8:	6808      	ldr	r0, [r1, #0]
    40ba:	2800      	cmp	r0, #0
    40bc:	d003      	beq.n	40c6 <vTaskList+0xae>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, tskSUSPENDED_CHAR );
    40be:	1c28      	adds	r0, r5, #0
    40c0:	2253      	movs	r2, #83	; 0x53
    40c2:	f7ff fbd5 	bl	3870 <prvListTaskWithinSingleList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    40c6:	f7ff ff35 	bl	3f34 <xTaskResumeAll>
	}
    40ca:	bcf8      	pop	{r3, r4, r5, r6, r7}
    40cc:	bc01      	pop	{r0}
    40ce:	4700      	bx	r0

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, tskDELETED_CHAR );
    40d0:	1c28      	adds	r0, r5, #0
    40d2:	2244      	movs	r2, #68	; 0x44
    40d4:	f7ff fbcc 	bl	3870 <prvListTaskWithinSingleList>
    40d8:	e7ed      	b.n	40b6 <vTaskList+0x9e>
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    40da:	1871      	adds	r1, r6, r1
    40dc:	1c28      	adds	r0, r5, #0
    40de:	2252      	movs	r2, #82	; 0x52
    40e0:	f7ff fbc6 	bl	3870 <prvListTaskWithinSingleList>
    40e4:	e7b2      	b.n	404c <vTaskList+0x34>
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
			}

			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
    40e6:	6819      	ldr	r1, [r3, #0]
    40e8:	1c28      	adds	r0, r5, #0
    40ea:	2242      	movs	r2, #66	; 0x42
    40ec:	f7ff fbc0 	bl	3870 <prvListTaskWithinSingleList>
    40f0:	e7dd      	b.n	40ae <vTaskList+0x96>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );

			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
    40f2:	6819      	ldr	r1, [r3, #0]
    40f4:	1c28      	adds	r0, r5, #0
    40f6:	2242      	movs	r2, #66	; 0x42
    40f8:	f7ff fbba 	bl	3870 <prvListTaskWithinSingleList>
    40fc:	e7d2      	b.n	40a4 <vTaskList+0x8c>
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	40000b74 	.word	0x40000b74
    4104:	0000edb8 	.word	0x0000edb8
    4108:	40000b88 	.word	0x40000b88
    410c:	40000a68 	.word	0x40000a68
    4110:	40000ad4 	.word	0x40000ad4
    4114:	40000ab8 	.word	0x40000ab8
    4118:	40000abc 	.word	0x40000abc
    411c:	40000b34 	.word	0x40000b34

00004120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4122:	464f      	mov	r7, r9
    4124:	4646      	mov	r6, r8
    4126:	b4c0      	push	{r6, r7}
    4128:	4a1a      	ldr	r2, [pc, #104]	; (4194 <prvIdleTask+0x74>)
    412a:	4b1b      	ldr	r3, [pc, #108]	; (4198 <prvIdleTask+0x78>)
    412c:	4c1b      	ldr	r4, [pc, #108]	; (419c <prvIdleTask+0x7c>)
    412e:	4f1c      	ldr	r7, [pc, #112]	; (41a0 <prvIdleTask+0x80>)
    4130:	4d1c      	ldr	r5, [pc, #112]	; (41a4 <prvIdleTask+0x84>)
    4132:	4690      	mov	r8, r2
    4134:	4699      	mov	r9, r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    4136:	6820      	ldr	r0, [r4, #0]
    4138:	2800      	cmp	r0, #0
    413a:	d106      	bne.n	414a <prvIdleTask+0x2a>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    413c:	682e      	ldr	r6, [r5, #0]
    413e:	2e01      	cmp	r6, #1
    4140:	d9f9      	bls.n	4136 <prvIdleTask+0x16>
			{
				taskYIELD();
    4142:	df00      	svc	0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    4144:	6820      	ldr	r0, [r4, #0]
    4146:	2800      	cmp	r0, #0
    4148:	d0f8      	beq.n	413c <prvIdleTask+0x1c>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    414a:	6839      	ldr	r1, [r7, #0]
    414c:	3101      	adds	r1, #1
    414e:	6039      	str	r1, [r7, #0]
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4150:	4642      	mov	r2, r8
    4152:	6816      	ldr	r6, [r2, #0]
			xTaskResumeAll();
    4154:	f7ff feee 	bl	3f34 <xTaskResumeAll>

			if( !xListIsEmpty )
    4158:	2e00      	cmp	r6, #0
    415a:	d0ef      	beq.n	413c <prvIdleTask+0x1c>
			{
				tskTCB *pxTCB;

				portENTER_CRITICAL();
    415c:	f009 ff98 	bl	e090 <__vPortEnterCritical_from_thumb>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4160:	4643      	mov	r3, r8
    4162:	681e      	ldr	r6, [r3, #0]
    4164:	2e00      	cmp	r6, #0
    4166:	d001      	beq.n	416c <prvIdleTask+0x4c>
    4168:	68db      	ldr	r3, [r3, #12]
    416a:	68de      	ldr	r6, [r3, #12]
					vListRemove( &( pxTCB->xGenericListItem ) );
    416c:	1d30      	adds	r0, r6, #4
    416e:	f7ff f8d5 	bl	331c <vListRemove>
					--uxCurrentNumberOfTasks;
    4172:	464a      	mov	r2, r9
    4174:	6811      	ldr	r1, [r2, #0]
    4176:	3901      	subs	r1, #1
    4178:	6011      	str	r1, [r2, #0]
					--uxTasksDeleted;
    417a:	6820      	ldr	r0, [r4, #0]
    417c:	3801      	subs	r0, #1
    417e:	6020      	str	r0, [r4, #0]
				}
				portEXIT_CRITICAL();
    4180:	f00a f832 	bl	e1e8 <__vPortExitCritical_from_thumb>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    4184:	6b30      	ldr	r0, [r6, #48]	; 0x30
    4186:	f000 fad1 	bl	472c <vPortFree>
		vPortFree( pxTCB );
    418a:	1c30      	adds	r0, r6, #0
    418c:	f000 face 	bl	472c <vPortFree>
    4190:	e7d4      	b.n	413c <prvIdleTask+0x1c>
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	40000abc 	.word	0x40000abc
    4198:	40000b48 	.word	0x40000b48
    419c:	40000a60 	.word	0x40000a60
    41a0:	40000b74 	.word	0x40000b74
    41a4:	40000a68 	.word	0x40000a68

000041a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    41a8:	b570      	push	{r4, r5, r6, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
    41aa:	2800      	cmp	r0, #0
    41ac:	d103      	bne.n	41b6 <vTaskDelay+0xe>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
		{
			portYIELD_WITHIN_API();
    41ae:	df00      	svc	0
		}
	}
    41b0:	bc70      	pop	{r4, r5, r6}
    41b2:	bc01      	pop	{r0}
    41b4:	4700      	bx	r0

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    41b6:	4c11      	ldr	r4, [pc, #68]	; (41fc <vTaskDelay+0x54>)
    41b8:	6822      	ldr	r2, [r4, #0]
    41ba:	3201      	adds	r2, #1
    41bc:	6022      	str	r2, [r4, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    41be:	4e10      	ldr	r6, [pc, #64]	; (4200 <vTaskDelay+0x58>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    41c0:	4c10      	ldr	r4, [pc, #64]	; (4204 <vTaskDelay+0x5c>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    41c2:	6831      	ldr	r1, [r6, #0]
    41c4:	1845      	adds	r5, r0, r1

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    41c6:	6820      	ldr	r0, [r4, #0]
    41c8:	3004      	adds	r0, #4
    41ca:	f7ff f8a7 	bl	331c <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    41ce:	6820      	ldr	r0, [r4, #0]

				if( xTimeToWake < xTickCount )
    41d0:	6833      	ldr	r3, [r6, #0]
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    41d2:	6045      	str	r5, [r0, #4]

				if( xTimeToWake < xTickCount )
    41d4:	429d      	cmp	r5, r3
    41d6:	d30a      	bcc.n	41ee <vTaskDelay+0x46>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    41d8:	4d0b      	ldr	r5, [pc, #44]	; (4208 <vTaskDelay+0x60>)
    41da:	6828      	ldr	r0, [r5, #0]
    41dc:	6821      	ldr	r1, [r4, #0]
    41de:	3104      	adds	r1, #4
    41e0:	f7ff f87e 	bl	32e0 <vListInsert>
				}
			}
			xAlreadyYielded = xTaskResumeAll();
    41e4:	f7ff fea6 	bl	3f34 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    41e8:	2800      	cmp	r0, #0
    41ea:	d1e1      	bne.n	41b0 <vTaskDelay+0x8>
    41ec:	e7df      	b.n	41ae <vTaskDelay+0x6>

				if( xTimeToWake < xTickCount )
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    41ee:	4b07      	ldr	r3, [pc, #28]	; (420c <vTaskDelay+0x64>)
    41f0:	6818      	ldr	r0, [r3, #0]
    41f2:	6821      	ldr	r1, [r4, #0]
    41f4:	3104      	adds	r1, #4
    41f6:	f7ff f873 	bl	32e0 <vListInsert>
    41fa:	e7f3      	b.n	41e4 <vTaskDelay+0x3c>
    41fc:	40000b74 	.word	0x40000b74
    4200:	40000a64 	.word	0x40000a64
    4204:	40000afc 	.word	0x40000afc
    4208:	40000ad4 	.word	0x40000ad4
    420c:	40000ab8 	.word	0x40000ab8

00004210 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4210:	b570      	push	{r4, r5, r6, lr}

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4212:	4b1a      	ldr	r3, [pc, #104]	; (427c <vTaskDelayUntil+0x6c>)
    4214:	681c      	ldr	r4, [r3, #0]
    4216:	3401      	adds	r4, #1
    4218:	601c      	str	r4, [r3, #0]
		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xTickCount < *pxPreviousWakeTime )
    421a:	4d19      	ldr	r5, [pc, #100]	; (4280 <vTaskDelayUntil+0x70>)
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    421c:	6803      	ldr	r3, [r0, #0]

			if( xTickCount < *pxPreviousWakeTime )
    421e:	682a      	ldr	r2, [r5, #0]
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4220:	18cc      	adds	r4, r1, r3

			if( xTickCount < *pxPreviousWakeTime )
    4222:	4293      	cmp	r3, r2
    4224:	d91d      	bls.n	4262 <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    4226:	42a3      	cmp	r3, r4
    4228:	d925      	bls.n	4276 <vTaskDelayUntil+0x66>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    422a:	682b      	ldr	r3, [r5, #0]
    422c:	429c      	cmp	r4, r3
    422e:	d922      	bls.n	4276 <vTaskDelayUntil+0x66>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4230:	4e14      	ldr	r6, [pc, #80]	; (4284 <vTaskDelayUntil+0x74>)
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4232:	6004      	str	r4, [r0, #0]
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4234:	6830      	ldr	r0, [r6, #0]
    4236:	3004      	adds	r0, #4
    4238:	f7ff f870 	bl	331c <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    423c:	6832      	ldr	r2, [r6, #0]

				if( xTimeToWake < xTickCount )
    423e:	682b      	ldr	r3, [r5, #0]
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    4240:	6054      	str	r4, [r2, #4]

				if( xTimeToWake < xTickCount )
    4242:	429c      	cmp	r4, r3
    4244:	d310      	bcc.n	4268 <vTaskDelayUntil+0x58>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4246:	4910      	ldr	r1, [pc, #64]	; (4288 <vTaskDelayUntil+0x78>)
    4248:	6808      	ldr	r0, [r1, #0]
    424a:	6831      	ldr	r1, [r6, #0]
    424c:	3104      	adds	r1, #4
    424e:	f7ff f847 	bl	32e0 <vListInsert>
				}
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4252:	f7ff fe6f 	bl	3f34 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    4256:	2800      	cmp	r0, #0
    4258:	d100      	bne.n	425c <vTaskDelayUntil+0x4c>
		{
			portYIELD_WITHIN_API();
    425a:	df00      	svc	0
		}
	}
    425c:	bc70      	pop	{r4, r5, r6}
    425e:	bc01      	pop	{r0}
    4260:	4700      	bx	r0
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4262:	42a3      	cmp	r3, r4
    4264:	d8e4      	bhi.n	4230 <vTaskDelayUntil+0x20>
    4266:	e7e0      	b.n	422a <vTaskDelayUntil+0x1a>

				if( xTimeToWake < xTickCount )
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4268:	4808      	ldr	r0, [pc, #32]	; (428c <vTaskDelayUntil+0x7c>)
    426a:	6800      	ldr	r0, [r0, #0]
    426c:	6831      	ldr	r1, [r6, #0]
    426e:	3104      	adds	r1, #4
    4270:	f7ff f836 	bl	32e0 <vListInsert>
    4274:	e7ed      	b.n	4252 <vTaskDelayUntil+0x42>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    4276:	6004      	str	r4, [r0, #0]
    4278:	e7eb      	b.n	4252 <vTaskDelayUntil+0x42>
    427a:	46c0      	nop			; (mov r8, r8)
    427c:	40000b74 	.word	0x40000b74
    4280:	40000a64 	.word	0x40000a64
    4284:	40000afc 	.word	0x40000afc
    4288:	40000ad4 	.word	0x40000ad4
    428c:	40000ab8 	.word	0x40000ab8

00004290 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4290:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4292:	4827      	ldr	r0, [pc, #156]	; (4330 <vTaskSwitchContext+0xa0>)
    4294:	6803      	ldr	r3, [r0, #0]
    4296:	2b00      	cmp	r3, #0
    4298:	d132      	bne.n	4300 <vTaskSwitchContext+0x70>

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    429a:	4b26      	ldr	r3, [pc, #152]	; (4334 <vTaskSwitchContext+0xa4>)
    429c:	4826      	ldr	r0, [pc, #152]	; (4338 <vTaskSwitchContext+0xa8>)
    429e:	681a      	ldr	r2, [r3, #0]
    42a0:	e003      	b.n	42aa <vTaskSwitchContext+0x1a>
	{
		--uxTopReadyPriority;
    42a2:	681c      	ldr	r4, [r3, #0]
    42a4:	3c01      	subs	r4, #1
    42a6:	601c      	str	r4, [r3, #0]

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    42a8:	681a      	ldr	r2, [r3, #0]
    42aa:	0094      	lsls	r4, r2, #2
    42ac:	18a1      	adds	r1, r4, r2
    42ae:	008a      	lsls	r2, r1, #2
    42b0:	5885      	ldr	r5, [r0, r2]
    42b2:	2d00      	cmp	r5, #0
    42b4:	d0f5      	beq.n	42a2 <vTaskSwitchContext+0x12>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    42b6:	681c      	ldr	r4, [r3, #0]
    42b8:	00a1      	lsls	r1, r4, #2
    42ba:	190a      	adds	r2, r1, r4
    42bc:	0095      	lsls	r5, r2, #2
    42be:	1942      	adds	r2, r0, r5
    42c0:	6853      	ldr	r3, [r2, #4]
    42c2:	3508      	adds	r5, #8
    42c4:	685b      	ldr	r3, [r3, #4]
    42c6:	1940      	adds	r0, r0, r5
    42c8:	6053      	str	r3, [r2, #4]
    42ca:	4283      	cmp	r3, r0
    42cc:	d02c      	beq.n	4328 <vTaskSwitchContext+0x98>

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    42ce:	4a1b      	ldr	r2, [pc, #108]	; (433c <vTaskSwitchContext+0xac>)
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    42d0:	68dd      	ldr	r5, [r3, #12]

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    42d2:	6810      	ldr	r0, [r2, #0]
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    42d4:	4b1a      	ldr	r3, [pc, #104]	; (4340 <vTaskSwitchContext+0xb0>)
    42d6:	601d      	str	r5, [r3, #0]

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    42d8:	2800      	cmp	r0, #0
    42da:	d00e      	beq.n	42fa <vTaskSwitchContext+0x6a>
    42dc:	681d      	ldr	r5, [r3, #0]
    42de:	4819      	ldr	r0, [pc, #100]	; (4344 <vTaskSwitchContext+0xb4>)
    42e0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
    42e2:	6801      	ldr	r1, [r0, #0]
    42e4:	428c      	cmp	r4, r1
    42e6:	d008      	beq.n	42fa <vTaskSwitchContext+0x6a>
    42e8:	4917      	ldr	r1, [pc, #92]	; (4348 <vTaskSwitchContext+0xb8>)
    42ea:	4d18      	ldr	r5, [pc, #96]	; (434c <vTaskSwitchContext+0xbc>)
    42ec:	680c      	ldr	r4, [r1, #0]
    42ee:	682d      	ldr	r5, [r5, #0]
    42f0:	3408      	adds	r4, #8
    42f2:	42a5      	cmp	r5, r4
    42f4:	d808      	bhi.n	4308 <vTaskSwitchContext+0x78>
    42f6:	2100      	movs	r1, #0
    42f8:	6011      	str	r1, [r2, #0]
}
    42fa:	bc30      	pop	{r4, r5}
    42fc:	bc01      	pop	{r0}
    42fe:	4700      	bx	r0
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4300:	4913      	ldr	r1, [pc, #76]	; (4350 <vTaskSwitchContext+0xc0>)
    4302:	2201      	movs	r2, #1
    4304:	600a      	str	r2, [r1, #0]
		return;
    4306:	e7f8      	b.n	42fa <vTaskSwitchContext+0x6a>
	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    4308:	681c      	ldr	r4, [r3, #0]
    430a:	4a12      	ldr	r2, [pc, #72]	; (4354 <vTaskSwitchContext+0xc4>)
    430c:	6c24      	ldr	r4, [r4, #64]	; 0x40
    430e:	680b      	ldr	r3, [r1, #0]
    4310:	6004      	str	r4, [r0, #0]
    4312:	6815      	ldr	r5, [r2, #0]
    4314:	6808      	ldr	r0, [r1, #0]
    4316:	3004      	adds	r0, #4
    4318:	601d      	str	r5, [r3, #0]
    431a:	6008      	str	r0, [r1, #0]
    431c:	680a      	ldr	r2, [r1, #0]
    431e:	680b      	ldr	r3, [r1, #0]
    4320:	3304      	adds	r3, #4
    4322:	6014      	str	r4, [r2, #0]
    4324:	600b      	str	r3, [r1, #0]
    4326:	e7e8      	b.n	42fa <vTaskSwitchContext+0x6a>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    4328:	685b      	ldr	r3, [r3, #4]
    432a:	6053      	str	r3, [r2, #4]
    432c:	e7cf      	b.n	42ce <vTaskSwitchContext+0x3e>
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	40000b74 	.word	0x40000b74
    4334:	40000a5c 	.word	0x40000a5c
    4338:	40000a68 	.word	0x40000a68
    433c:	40000ad0 	.word	0x40000ad0
    4340:	40000afc 	.word	0x40000afc
    4344:	400008c4 	.word	0x400008c4
    4348:	40000af8 	.word	0x40000af8
    434c:	40000b80 	.word	0x40000b80
    4350:	40000af0 	.word	0x40000af0
    4354:	40000a64 	.word	0x40000a64

00004358 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    4358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    435a:	1c04      	adds	r4, r0, #0
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    435c:	f009 fe98 	bl	e090 <__vPortEnterCritical_from_thumb>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    4360:	4e16      	ldr	r6, [pc, #88]	; (43bc <vTaskSuspend+0x64>)
    4362:	6833      	ldr	r3, [r6, #0]
    4364:	429c      	cmp	r4, r3
    4366:	d024      	beq.n	43b2 <vTaskSuspend+0x5a>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4368:	1e25      	subs	r5, r4, #0
    436a:	d022      	beq.n	43b2 <vTaskSuspend+0x5a>

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    436c:	1d2f      	adds	r7, r5, #4
    436e:	1c38      	adds	r0, r7, #0
    4370:	f7fe ffd4 	bl	331c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    4374:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4376:	2800      	cmp	r0, #0
    4378:	d003      	beq.n	4382 <vTaskSuspend+0x2a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    437a:	1c28      	adds	r0, r5, #0
    437c:	3018      	adds	r0, #24
    437e:	f7fe ffcd 	bl	331c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4382:	480f      	ldr	r0, [pc, #60]	; (43c0 <vTaskSuspend+0x68>)
    4384:	1c39      	adds	r1, r7, #0
    4386:	f7fe ff9d 	bl	32c4 <vListInsertEnd>
		}
		portEXIT_CRITICAL();
    438a:	f009 ff2d 	bl	e1e8 <__vPortExitCritical_from_thumb>

		if( ( void * ) pxTaskToSuspend == NULL )
    438e:	2c00      	cmp	r4, #0
    4390:	d002      	beq.n	4398 <vTaskSuspend+0x40>
				{
					vTaskSwitchContext();
				}
			}
		}
	}
    4392:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4394:	bc01      	pop	{r0}
    4396:	4700      	bx	r0
		}
		portEXIT_CRITICAL();

		if( ( void * ) pxTaskToSuspend == NULL )
		{
			if( xSchedulerRunning != pdFALSE )
    4398:	4a0a      	ldr	r2, [pc, #40]	; (43c4 <vTaskSuspend+0x6c>)
    439a:	6811      	ldr	r1, [r2, #0]
    439c:	2900      	cmp	r1, #0
    439e:	d106      	bne.n	43ae <vTaskSuspend+0x56>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( uxCurrentNumberOfTasks == 1 )
    43a0:	4f09      	ldr	r7, [pc, #36]	; (43c8 <vTaskSuspend+0x70>)
    43a2:	683d      	ldr	r5, [r7, #0]
    43a4:	2d01      	cmp	r5, #1
    43a6:	d007      	beq.n	43b8 <vTaskSuspend+0x60>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
    43a8:	f7ff ff72 	bl	4290 <vTaskSwitchContext>
    43ac:	e7f1      	b.n	4392 <vTaskSuspend+0x3a>
		if( ( void * ) pxTaskToSuspend == NULL )
		{
			if( xSchedulerRunning != pdFALSE )
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    43ae:	df00      	svc	0
    43b0:	e7ef      	b.n	4392 <vTaskSuspend+0x3a>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    43b2:	6835      	ldr	r5, [r6, #0]
    43b4:	2400      	movs	r4, #0
    43b6:	e7d9      	b.n	436c <vTaskSuspend+0x14>
				{
					/* No other tasks are defined, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    43b8:	6034      	str	r4, [r6, #0]
    43ba:	e7ea      	b.n	4392 <vTaskSuspend+0x3a>
    43bc:	40000afc 	.word	0x40000afc
    43c0:	40000b34 	.word	0x40000b34
    43c4:	40000aec 	.word	0x40000aec
    43c8:	40000b48 	.word	0x40000b48

000043cc <vTaskPlaceOnEventList>:
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    43cc:	b538      	push	{r3, r4, r5, lr}
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    43ce:	4c15      	ldr	r4, [pc, #84]	; (4424 <vTaskPlaceOnEventList+0x58>)
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    43d0:	1c0d      	adds	r5, r1, #0
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    43d2:	6821      	ldr	r1, [r4, #0]
    43d4:	3118      	adds	r1, #24
    43d6:	f7fe ff83 	bl	32e0 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    43da:	6820      	ldr	r0, [r4, #0]
    43dc:	3004      	adds	r0, #4
    43de:	f7fe ff9d 	bl	331c <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    43e2:	1c6b      	adds	r3, r5, #1
    43e4:	d017      	beq.n	4416 <vTaskPlaceOnEventList+0x4a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    43e6:	4810      	ldr	r0, [pc, #64]	; (4428 <vTaskPlaceOnEventList+0x5c>)
    43e8:	6801      	ldr	r1, [r0, #0]

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    43ea:	6822      	ldr	r2, [r4, #0]

			if( xTimeToWake < xTickCount )
    43ec:	6803      	ldr	r3, [r0, #0]
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    43ee:	186d      	adds	r5, r5, r1

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    43f0:	6055      	str	r5, [r2, #4]

			if( xTimeToWake < xTickCount )
    43f2:	429d      	cmp	r5, r3
    43f4:	d308      	bcc.n	4408 <vTaskPlaceOnEventList+0x3c>
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
			}
			else
			{
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    43f6:	4d0d      	ldr	r5, [pc, #52]	; (442c <vTaskPlaceOnEventList+0x60>)
    43f8:	6828      	ldr	r0, [r5, #0]
    43fa:	6821      	ldr	r1, [r4, #0]
    43fc:	3104      	adds	r1, #4
    43fe:	f7fe ff6f 	bl	32e0 <vListInsert>
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
			}
	}
	#endif
}
    4402:	bc38      	pop	{r3, r4, r5}
    4404:	bc01      	pop	{r0}
    4406:	4700      	bx	r0
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

			if( xTimeToWake < xTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow list. */
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4408:	4b09      	ldr	r3, [pc, #36]	; (4430 <vTaskPlaceOnEventList+0x64>)
    440a:	6818      	ldr	r0, [r3, #0]
    440c:	6821      	ldr	r1, [r4, #0]
    440e:	3104      	adds	r1, #4
    4410:	f7fe ff66 	bl	32e0 <vListInsert>
    4414:	e7f5      	b.n	4402 <vTaskPlaceOnEventList+0x36>
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4416:	6821      	ldr	r1, [r4, #0]
    4418:	4806      	ldr	r0, [pc, #24]	; (4434 <vTaskPlaceOnEventList+0x68>)
    441a:	3104      	adds	r1, #4
    441c:	f7fe ff52 	bl	32c4 <vListInsertEnd>
    4420:	e7ef      	b.n	4402 <vTaskPlaceOnEventList+0x36>
    4422:	46c0      	nop			; (mov r8, r8)
    4424:	40000afc 	.word	0x40000afc
    4428:	40000a64 	.word	0x40000a64
    442c:	40000ad4 	.word	0x40000ad4
    4430:	40000ab8 	.word	0x40000ab8
    4434:	40000b34 	.word	0x40000b34

00004438 <xTaskRemoveFromEventList>:
	#endif
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    4438:	b538      	push	{r3, r4, r5, lr}
	it to the ready list.

	If an event is for a queue that is locked then this function will never
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    443a:	6804      	ldr	r4, [r0, #0]
    443c:	2c00      	cmp	r4, #0
    443e:	d001      	beq.n	4444 <xTaskRemoveFromEventList+0xc>
    4440:	68c3      	ldr	r3, [r0, #12]
    4442:	68dc      	ldr	r4, [r3, #12]
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4444:	1c25      	adds	r5, r4, #0
    4446:	3518      	adds	r5, #24
    4448:	1c28      	adds	r0, r5, #0
    444a:	f7fe ff67 	bl	331c <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    444e:	4913      	ldr	r1, [pc, #76]	; (449c <xTaskRemoveFromEventList+0x64>)
    4450:	6808      	ldr	r0, [r1, #0]
    4452:	2800      	cmp	r0, #0
    4454:	d11a      	bne.n	448c <xTaskRemoveFromEventList+0x54>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4456:	1d25      	adds	r5, r4, #4
    4458:	1c28      	adds	r0, r5, #0
    445a:	f7fe ff5f 	bl	331c <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    445e:	4a10      	ldr	r2, [pc, #64]	; (44a0 <xTaskRemoveFromEventList+0x68>)
    4460:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4462:	6811      	ldr	r1, [r2, #0]
    4464:	428b      	cmp	r3, r1
    4466:	d816      	bhi.n	4496 <xTaskRemoveFromEventList+0x5e>
    4468:	0099      	lsls	r1, r3, #2
    446a:	18c8      	adds	r0, r1, r3
    446c:	4a0d      	ldr	r2, [pc, #52]	; (44a4 <xTaskRemoveFromEventList+0x6c>)
    446e:	0083      	lsls	r3, r0, #2
    4470:	18d0      	adds	r0, r2, r3
    4472:	1c29      	adds	r1, r5, #0
    4474:	f7fe ff26 	bl	32c4 <vListInsertEnd>
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4478:	4b0b      	ldr	r3, [pc, #44]	; (44a8 <xTaskRemoveFromEventList+0x70>)
    447a:	681a      	ldr	r2, [r3, #0]
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    447c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    447e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    4480:	2000      	movs	r0, #0
    4482:	42ac      	cmp	r4, r5
    4484:	4140      	adcs	r0, r0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    4486:	bc38      	pop	{r3, r4, r5}
    4488:	bc02      	pop	{r1}
    448a:	4708      	bx	r1
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    448c:	4807      	ldr	r0, [pc, #28]	; (44ac <xTaskRemoveFromEventList+0x74>)
    448e:	1c29      	adds	r1, r5, #0
    4490:	f7fe ff18 	bl	32c4 <vListInsertEnd>
    4494:	e7f0      	b.n	4478 <xTaskRemoveFromEventList+0x40>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    4496:	6013      	str	r3, [r2, #0]
    4498:	e7e6      	b.n	4468 <xTaskRemoveFromEventList+0x30>
    449a:	46c0      	nop			; (mov r8, r8)
    449c:	40000b74 	.word	0x40000b74
    44a0:	40000a5c 	.word	0x40000a5c
    44a4:	40000a68 	.word	0x40000a68
    44a8:	40000afc 	.word	0x40000afc
    44ac:	40000ad8 	.word	0x40000ad8

000044b0 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    44b0:	4b03      	ldr	r3, [pc, #12]	; (44c0 <vTaskSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
    44b2:	4904      	ldr	r1, [pc, #16]	; (44c4 <vTaskSetTimeOutState+0x14>)
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    44b4:	681a      	ldr	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    44b6:	680b      	ldr	r3, [r1, #0]
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    44b8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    44ba:	6043      	str	r3, [r0, #4]
}
    44bc:	4770      	bx	lr
    44be:	46c0      	nop			; (mov r8, r8)
    44c0:	40000b84 	.word	0x40000b84
    44c4:	40000a64 	.word	0x40000a64

000044c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    44c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44ca:	1c0e      	adds	r6, r1, #0
    44cc:	1c05      	adds	r5, r0, #0
portBASE_TYPE xReturn;

	portENTER_CRITICAL();
    44ce:	f009 fddf 	bl	e090 <__vPortEnterCritical_from_thumb>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    44d2:	6833      	ldr	r3, [r6, #0]
			{
				xReturn = pdFALSE;
    44d4:	2400      	movs	r4, #0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    44d6:	1c5a      	adds	r2, r3, #1
    44d8:	d018      	beq.n	450c <xTaskCheckForTimeOut+0x44>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    44da:	4813      	ldr	r0, [pc, #76]	; (4528 <xTaskCheckForTimeOut+0x60>)
    44dc:	6829      	ldr	r1, [r5, #0]
    44de:	6802      	ldr	r2, [r0, #0]
    44e0:	4291      	cmp	r1, r2
    44e2:	d019      	beq.n	4518 <xTaskCheckForTimeOut+0x50>
    44e4:	4a11      	ldr	r2, [pc, #68]	; (452c <xTaskCheckForTimeOut+0x64>)
    44e6:	6869      	ldr	r1, [r5, #4]
    44e8:	6817      	ldr	r7, [r2, #0]
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    44ea:	2401      	movs	r4, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    44ec:	42b9      	cmp	r1, r7
    44ee:	d90d      	bls.n	450c <xTaskCheckForTimeOut+0x44>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    44f0:	6814      	ldr	r4, [r2, #0]
    44f2:	1a67      	subs	r7, r4, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    44f4:	2401      	movs	r4, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    44f6:	42bb      	cmp	r3, r7
    44f8:	d908      	bls.n	450c <xTaskCheckForTimeOut+0x44>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    44fa:	6814      	ldr	r4, [r2, #0]
    44fc:	1b1f      	subs	r7, r3, r4
    44fe:	1879      	adds	r1, r7, r1
    4500:	6031      	str	r1, [r6, #0]
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4502:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4504:	6813      	ldr	r3, [r2, #0]
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4506:	6028      	str	r0, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4508:	606b      	str	r3, [r5, #4]
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
    450a:	2400      	movs	r4, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	portEXIT_CRITICAL();
    450c:	f009 fe6c 	bl	e1e8 <__vPortExitCritical_from_thumb>

	return xReturn;
}
    4510:	1c20      	adds	r0, r4, #0
    4512:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4514:	bc02      	pop	{r1}
    4516:	4708      	bx	r1
    4518:	4a04      	ldr	r2, [pc, #16]	; (452c <xTaskCheckForTimeOut+0x64>)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    451a:	6869      	ldr	r1, [r5, #4]
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    451c:	6814      	ldr	r4, [r2, #0]
    451e:	1a67      	subs	r7, r4, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    4520:	2401      	movs	r4, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4522:	42bb      	cmp	r3, r7
    4524:	d8e9      	bhi.n	44fa <xTaskCheckForTimeOut+0x32>
    4526:	e7f1      	b.n	450c <xTaskCheckForTimeOut+0x44>
    4528:	40000b84 	.word	0x40000b84
    452c:	40000a64 	.word	0x40000a64

00004530 <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    4530:	4b01      	ldr	r3, [pc, #4]	; (4538 <vTaskMissedYield+0x8>)
    4532:	2201      	movs	r2, #1
    4534:	601a      	str	r2, [r3, #0]
}
    4536:	4770      	bx	lr
    4538:	40000af0 	.word	0x40000af0

0000453c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    453c:	4b01      	ldr	r3, [pc, #4]	; (4544 <xTaskGetCurrentTaskHandle+0x8>)
    453e:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    4540:	4770      	bx	lr
    4542:	46c0      	nop			; (mov r8, r8)
    4544:	40000afc 	.word	0x40000afc

00004548 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    4548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    454a:	4d17      	ldr	r5, [pc, #92]	; (45a8 <vTaskPriorityInherit+0x60>)
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    454c:	1c04      	adds	r4, r0, #0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    454e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4550:	6828      	ldr	r0, [r5, #0]
    4552:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4554:	4293      	cmp	r3, r2
    4556:	d20f      	bcs.n	4578 <vTaskPriorityInherit+0x30>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4558:	6829      	ldr	r1, [r5, #0]
    455a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    455c:	2104      	movs	r1, #4
    455e:	1a8e      	subs	r6, r1, r2

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4560:	009f      	lsls	r7, r3, #2
    4562:	18f8      	adds	r0, r7, r3
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4564:	61a6      	str	r6, [r4, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
    4566:	4e11      	ldr	r6, [pc, #68]	; (45ac <vTaskPriorityInherit+0x64>)
    4568:	0082      	lsls	r2, r0, #2
    456a:	6967      	ldr	r7, [r4, #20]
    456c:	18b3      	adds	r3, r6, r2
    456e:	429f      	cmp	r7, r3
    4570:	d005      	beq.n	457e <vTaskPriorityInherit+0x36>
				prvAddTaskToReadyQueue( pxTCB );
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4572:	682e      	ldr	r6, [r5, #0]
    4574:	6af7      	ldr	r7, [r6, #44]	; 0x2c
    4576:	62e7      	str	r7, [r4, #44]	; 0x2c
			}
		}
	}
    4578:	bcf8      	pop	{r3, r4, r5, r6, r7}
    457a:	bc01      	pop	{r0}
    457c:	4700      	bx	r0

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    457e:	1867      	adds	r7, r4, r1
    4580:	1c38      	adds	r0, r7, #0
    4582:	f7fe fecb 	bl	331c <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4586:	682d      	ldr	r5, [r5, #0]
				prvAddTaskToReadyQueue( pxTCB );
    4588:	4a09      	ldr	r2, [pc, #36]	; (45b0 <vTaskPriorityInherit+0x68>)
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    458a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    458c:	6811      	ldr	r1, [r2, #0]
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    458e:	62e3      	str	r3, [r4, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4590:	428b      	cmp	r3, r1
    4592:	d900      	bls.n	4596 <vTaskPriorityInherit+0x4e>
    4594:	6013      	str	r3, [r2, #0]
    4596:	0098      	lsls	r0, r3, #2
    4598:	18c3      	adds	r3, r0, r3
    459a:	009c      	lsls	r4, r3, #2
    459c:	1930      	adds	r0, r6, r4
    459e:	1c39      	adds	r1, r7, #0
    45a0:	f7fe fe90 	bl	32c4 <vListInsertEnd>
    45a4:	e7e8      	b.n	4578 <vTaskPriorityInherit+0x30>
    45a6:	46c0      	nop			; (mov r8, r8)
    45a8:	40000afc 	.word	0x40000afc
    45ac:	40000a68 	.word	0x40000a68
    45b0:	40000a5c 	.word	0x40000a5c

000045b4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    45b4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    45b6:	1e04      	subs	r4, r0, #0
    45b8:	d018      	beq.n	45ec <vTaskPriorityDisinherit+0x38>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    45ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    45bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    45be:	429a      	cmp	r2, r3
    45c0:	d014      	beq.n	45ec <vTaskPriorityDisinherit+0x38>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    45c2:	1d25      	adds	r5, r4, #4
    45c4:	1c28      	adds	r0, r5, #0
    45c6:	f7fe fea9 	bl	331c <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    45ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    45cc:	2204      	movs	r2, #4
    45ce:	1ad0      	subs	r0, r2, r3
				prvAddTaskToReadyQueue( pxTCB );
    45d0:	4a09      	ldr	r2, [pc, #36]	; (45f8 <vTaskPriorityDisinherit+0x44>)
    45d2:	6811      	ldr	r1, [r2, #0]
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    45d4:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    45d6:	61a0      	str	r0, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
    45d8:	428b      	cmp	r3, r1
    45da:	d80a      	bhi.n	45f2 <vTaskPriorityDisinherit+0x3e>
    45dc:	0098      	lsls	r0, r3, #2
    45de:	18c1      	adds	r1, r0, r3
    45e0:	4c06      	ldr	r4, [pc, #24]	; (45fc <vTaskPriorityDisinherit+0x48>)
    45e2:	008b      	lsls	r3, r1, #2
    45e4:	18e0      	adds	r0, r4, r3
    45e6:	1c29      	adds	r1, r5, #0
    45e8:	f7fe fe6c 	bl	32c4 <vListInsertEnd>
			}
		}
	}
    45ec:	bc38      	pop	{r3, r4, r5}
    45ee:	bc01      	pop	{r0}
    45f0:	4700      	bx	r0

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
				prvAddTaskToReadyQueue( pxTCB );
    45f2:	6013      	str	r3, [r2, #0]
    45f4:	e7f2      	b.n	45dc <vTaskPriorityDisinherit+0x28>
    45f6:	46c0      	nop			; (mov r8, r8)
    45f8:	40000a5c 	.word	0x40000a5c
    45fc:	40000a68 	.word	0x40000a68

00004600 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4600:	b510      	push	{r4, lr}
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
    4602:	1d0b      	adds	r3, r1, #4
    4604:	6003      	str	r3, [r0, #0]
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
    4606:	2400      	movs	r4, #0

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
	pxTopOfStack--;
    4608:	1f03      	subs	r3, r0, #4

	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
    460a:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
    460c:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
    460e:	4c19      	ldr	r4, [pc, #100]	; (4674 <pxPortInitialiseStack+0x74>)
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
    4610:	6018      	str	r0, [r3, #0]
	pxTopOfStack--;
    4612:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
    4614:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
    4616:	4c18      	ldr	r4, [pc, #96]	; (4678 <pxPortInitialiseStack+0x78>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
	pxTopOfStack--;	
    4618:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
    461a:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
    461c:	4c17      	ldr	r4, [pc, #92]	; (467c <pxPortInitialiseStack+0x7c>)
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
	pxTopOfStack--;	
    461e:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
    4620:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
    4622:	4c17      	ldr	r4, [pc, #92]	; (4680 <pxPortInitialiseStack+0x80>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
	pxTopOfStack--;	
    4624:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
    4626:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
    4628:	4c16      	ldr	r4, [pc, #88]	; (4684 <pxPortInitialiseStack+0x84>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
	pxTopOfStack--;	
    462a:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
    462c:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
    462e:	4c16      	ldr	r4, [pc, #88]	; (4688 <pxPortInitialiseStack+0x88>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
	pxTopOfStack--;	
    4630:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
    4632:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
    4634:	4c15      	ldr	r4, [pc, #84]	; (468c <pxPortInitialiseStack+0x8c>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
	pxTopOfStack--;	
    4636:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
    4638:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
    463a:	4c15      	ldr	r4, [pc, #84]	; (4690 <pxPortInitialiseStack+0x90>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
	pxTopOfStack--;	
    463c:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
    463e:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
    4640:	4c14      	ldr	r4, [pc, #80]	; (4694 <pxPortInitialiseStack+0x94>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
	pxTopOfStack--;	
    4642:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
    4644:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
    4646:	4c14      	ldr	r4, [pc, #80]	; (4698 <pxPortInitialiseStack+0x98>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
	pxTopOfStack--;	
    4648:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
    464a:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
    464c:	4c13      	ldr	r4, [pc, #76]	; (469c <pxPortInitialiseStack+0x9c>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
	pxTopOfStack--;	
    464e:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
    4650:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
    4652:	4c13      	ldr	r4, [pc, #76]	; (46a0 <pxPortInitialiseStack+0xa0>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
	pxTopOfStack--;	
    4654:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
    4656:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
    4658:	3b04      	subs	r3, #4

	/* When the task starts is will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
    465a:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    465c:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
    465e:	231f      	movs	r3, #31

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
    4660:	07ca      	lsls	r2, r1, #31
    4662:	d500      	bpl.n	4666 <pxPortInitialiseStack+0x66>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
    4664:	3320      	adds	r3, #32

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
    4666:	6003      	str	r3, [r0, #0]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
    4668:	2100      	movs	r1, #0
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
	}

	pxTopOfStack--;
    466a:	3804      	subs	r0, #4

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
    466c:	6001      	str	r1, [r0, #0]

	return pxTopOfStack;
}
    466e:	bc10      	pop	{r4}
    4670:	bc02      	pop	{r1}
    4672:	4708      	bx	r1
    4674:	12121212 	.word	0x12121212
    4678:	11111111 	.word	0x11111111
    467c:	10101010 	.word	0x10101010
    4680:	09090909 	.word	0x09090909
    4684:	08080808 	.word	0x08080808
    4688:	07070707 	.word	0x07070707
    468c:	06060606 	.word	0x06060606
    4690:	05050505 	.word	0x05050505
    4694:	04040404 	.word	0x04040404
    4698:	03030303 	.word	0x03030303
    469c:	02020202 	.word	0x02020202
    46a0:	01010101 	.word	0x01010101

000046a4 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    46a4:	b510      	push	{r4, lr}
 */
static void prvSetupTimerInterrupt( void )
{
unsigned portLONG ulCompareMatch;

	PCLKSEL0 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
    46a6:	4b12      	ldr	r3, [pc, #72]	; (46f0 <xPortStartScheduler+0x4c>)
    46a8:	6818      	ldr	r0, [r3, #0]
    46aa:	210c      	movs	r1, #12
    46ac:	4388      	bics	r0, r1
    46ae:	3908      	subs	r1, #8
    46b0:	4308      	orrs	r0, r1
    46b2:	6018      	str	r0, [r3, #0]
	T0TCR  = 2;         /* Stop and reset the timer */
    46b4:	4b0f      	ldr	r3, [pc, #60]	; (46f4 <xPortStartScheduler+0x50>)
    46b6:	2402      	movs	r4, #2
	T0CTCR = 0;         /* Timer mode               */
    46b8:	480f      	ldr	r0, [pc, #60]	; (46f8 <xPortStartScheduler+0x54>)
static void prvSetupTimerInterrupt( void )
{
unsigned portLONG ulCompareMatch;

	PCLKSEL0 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
	T0TCR  = 2;         /* Stop and reset the timer */
    46ba:	601c      	str	r4, [r3, #0]
	#if portPRESCALE_VALUE != 0
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif
	T0MR1 = ulCompareMatch;
    46bc:	4a0f      	ldr	r2, [pc, #60]	; (46fc <xPortStartScheduler+0x58>)
{
unsigned portLONG ulCompareMatch;

	PCLKSEL0 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
	T0TCR  = 2;         /* Stop and reset the timer */
	T0CTCR = 0;         /* Timer mode               */
    46be:	2400      	movs	r4, #0
    46c0:	6004      	str	r4, [r0, #0]
	
	/* A 1ms tick does not require the use of the timer prescale.  This is
	defaulted to zero but can be used if necessary. */
	T0PR = portPRESCALE_VALUE;
    46c2:	3864      	subs	r0, #100	; 0x64
    46c4:	6004      	str	r4, [r0, #0]
	}
	#endif
	T0MR1 = ulCompareMatch;

	/* Generate tick with timer 0 compare match. */
	T0MCR  = (3 << 3);  /* Reset timer on match and generate interrupt */
    46c6:	2118      	movs	r1, #24
	#if portPRESCALE_VALUE != 0
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif
	T0MR1 = ulCompareMatch;
    46c8:	6102      	str	r2, [r0, #16]

	/* Generate tick with timer 0 compare match. */
	T0MCR  = (3 << 3);  /* Reset timer on match and generate interrupt */
    46ca:	3008      	adds	r0, #8

	/* Setup the VIC for the timer. */
	VICIntEnable = 0x00000010;
    46cc:	4a0c      	ldr	r2, [pc, #48]	; (4700 <xPortStartScheduler+0x5c>)
	}
	#endif
	T0MR1 = ulCompareMatch;

	/* Generate tick with timer 0 compare match. */
	T0MCR  = (3 << 3);  /* Reset timer on match and generate interrupt */
    46ce:	6001      	str	r1, [r0, #0]

	/* Setup the VIC for the timer. */
	VICIntEnable = 0x00000010;
    46d0:	3908      	subs	r1, #8
    46d2:	6011      	str	r1, [r2, #0]
	/* The ISR installed depends on whether the preemptive or cooperative
	scheduler is being used. */
	#if configUSE_PREEMPTION == 1
	{
		extern void ( vPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vPreemptiveTick;
    46d4:	480b      	ldr	r0, [pc, #44]	; (4704 <xPortStartScheduler+0x60>)
    46d6:	3201      	adds	r2, #1
		extern void ( vNonPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vNonPreemptiveTick;
	}
	#endif

	VICVectCntl4 = 1;
    46d8:	490b      	ldr	r1, [pc, #44]	; (4708 <xPortStartScheduler+0x64>)
	/* The ISR installed depends on whether the preemptive or cooperative
	scheduler is being used. */
	#if configUSE_PREEMPTION == 1
	{
		extern void ( vPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vPreemptiveTick;
    46da:	32ff      	adds	r2, #255	; 0xff
    46dc:	6010      	str	r0, [r2, #0]
		extern void ( vNonPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vNonPreemptiveTick;
	}
	#endif

	VICVectCntl4 = 1;
    46de:	2201      	movs	r2, #1
    46e0:	600a      	str	r2, [r1, #0]

	/* Start the timer - interrupts are disabled when this function is called
	so it is okay to do this here. */
	T0TCR = portENABLE_TIMER;
    46e2:	601a      	str	r2, [r3, #0]
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	vPortISRStartFirstTask();	
    46e4:	f009 fd28 	bl	e138 <__vPortISRStartFirstTask_from_thumb>

	/* Should not get here! */
	return 0;
}
    46e8:	1c20      	adds	r0, r4, #0
    46ea:	bc10      	pop	{r4}
    46ec:	bc02      	pop	{r1}
    46ee:	4708      	bx	r1
    46f0:	e01fc1a8 	.word	0xe01fc1a8
    46f4:	e0004004 	.word	0xe0004004
    46f8:	e0004070 	.word	0xe0004070
    46fc:	00011940 	.word	0x00011940
    4700:	fffff010 	.word	0xfffff010
    4704:	00000144 	.word	0x00000144
    4708:	fffff210 	.word	0xfffff210

0000470c <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
    470c:	4770      	bx	lr
    470e:	46c0      	nop			; (mov r8, r8)

00004710 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4710:	b510      	push	{r4, lr}
    4712:	1c04      	adds	r4, r0, #0
void *pvReturn;

	vTaskSuspendAll();
    4714:	f7ff fb50 	bl	3db8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    4718:	1c20      	adds	r0, r4, #0
    471a:	f000 fd13 	bl	5144 <malloc>
    471e:	1c04      	adds	r4, r0, #0
	}
	xTaskResumeAll();
    4720:	f7ff fc08 	bl	3f34 <xTaskResumeAll>
		}
	}
	#endif
	
	return pvReturn;
}
    4724:	1c20      	adds	r0, r4, #0
    4726:	bc10      	pop	{r4}
    4728:	bc02      	pop	{r1}
    472a:	4708      	bx	r1

0000472c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    472c:	b510      	push	{r4, lr}
	if( pv )
    472e:	1e04      	subs	r4, r0, #0
    4730:	d006      	beq.n	4740 <vPortFree+0x14>
	{
		vTaskSuspendAll();
    4732:	f7ff fb41 	bl	3db8 <vTaskSuspendAll>
		{
			free( pv );
    4736:	1c20      	adds	r0, r4, #0
    4738:	f000 fd10 	bl	515c <free>
		}
		xTaskResumeAll();
    473c:	f7ff fbfa 	bl	3f34 <xTaskResumeAll>
	}
}
    4740:	bc10      	pop	{r4}
    4742:	bc01      	pop	{r0}
    4744:	4700      	bx	r0
    4746:	46c0      	nop			; (mov r8, r8)

00004748 <_startup>:
_mainCRTStartup:

	/* Setup a stack for each mode - note that this only sets up a usable stack
	for system/user, SWI and IRQ modes.   Also each mode is setup with
	interrupts initially disabled. */
    ldr   r0, .LC6
    4748:	e59f00b8 	ldr	r0, [pc, #184]	; 4808 <endless_loop+0x18>
    msr   CPSR_c, #MODE_UND|I_BIT|F_BIT /* Undefined Instruction Mode */
    474c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
    mov   sp, r0
    4750:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #UND_STACK_SIZE
    4754:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_ABT|I_BIT|F_BIT /* Abort Mode */
    4758:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
    mov   sp, r0
    475c:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #ABT_STACK_SIZE
    4760:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_FIQ|I_BIT|F_BIT /* FIQ Mode */
    4764:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
    mov   sp, r0
    4768:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #FIQ_STACK_SIZE
    476c:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_IRQ|I_BIT|F_BIT /* IRQ Mode */
    4770:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
    mov   sp, r0
    4774:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #IRQ_STACK_SIZE
    4778:	e2400c01 	sub	r0, r0, #256	; 0x100
    msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT /* Supervisor Mode */
    477c:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
    mov   sp, r0
    4780:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #SVC_STACK_SIZE
    4784:	e2400c01 	sub	r0, r0, #256	; 0x100
    msr   CPSR_c, #MODE_SYS|I_BIT|F_BIT /* System Mode */
    4788:	e321f0df 	msr	CPSR_c, #223	; 0xdf
    mov   sp, r0
    478c:	e1a0d000 	mov	sp, r0

	/* We want to start in supervisor mode.  Operation will switch to system
	mode when the first task starts. */
	msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT
    4790:	e321f0d3 	msr	CPSR_c, #211	; 0xd3

	/* Clear BSS. */

	mov     a2, #0			/* Fill value */
    4794:	e3a01000 	mov	r1, #0
	mov		fp, a2			/* Null frame pointer */
    4798:	e1a0b001 	mov	fp, r1
	mov		r7, a2			/* Null frame pointer for Thumb */
    479c:	e1a07001 	mov	r7, r1

	ldr		r1, .LC1		/* Start of memory block */
    47a0:	e59f104c 	ldr	r1, [pc, #76]	; 47f4 <endless_loop+0x4>
	ldr		r3, .LC2		/* End of memory block */
    47a4:	e59f304c 	ldr	r3, [pc, #76]	; 47f8 <endless_loop+0x8>
	subs	r3, r3, r1      /* Length of block */
    47a8:	e0533001 	subs	r3, r3, r1
	beq		.end_clear_loop
    47ac:	0a000003 	beq	47c0 <.end_clear_loop>
	mov		r2, #0
    47b0:	e3a02000 	mov	r2, #0

000047b4 <.clear_loop>:

.clear_loop:
	strb	r2, [r1], #1
    47b4:	e4c12001 	strb	r2, [r1], #1
	subs	r3, r3, #1
    47b8:	e2533001 	subs	r3, r3, #1
	bgt		.clear_loop
    47bc:	cafffffc 	bgt	47b4 <.clear_loop>

000047c0 <.end_clear_loop>:

.end_clear_loop:

	/* Initialise data. */

	ldr		r1, .LC3		/* Start of memory block */
    47c0:	e59f1034 	ldr	r1, [pc, #52]	; 47fc <endless_loop+0xc>
	ldr		r2, .LC4		/* End of memory block */
    47c4:	e59f2034 	ldr	r2, [pc, #52]	; 4800 <endless_loop+0x10>
	ldr		r3, .LC5
    47c8:	e59f3034 	ldr	r3, [pc, #52]	; 4804 <endless_loop+0x14>
	subs	r3, r3, r1		/* Length of block */
    47cc:	e0533001 	subs	r3, r3, r1
	beq		.end_set_loop
    47d0:	0a000003 	beq	47e4 <.end_set_loop>

000047d4 <.set_loop>:

.set_loop:
	ldrb	r4, [r2], #1
    47d4:	e4d24001 	ldrb	r4, [r2], #1
	strb	r4, [r1], #1
    47d8:	e4c14001 	strb	r4, [r1], #1
	subs	r3, r3, #1
    47dc:	e2533001 	subs	r3, r3, #1
	bgt		.set_loop
    47e0:	cafffffb 	bgt	47d4 <.set_loop>

000047e4 <.end_set_loop>:

.end_set_loop:

	mov		r0, #0          /* no arguments  */
    47e4:	e3a00000 	mov	r0, #0
	mov		r1, #0          /* no argv either */
    47e8:	e3a01000 	mov	r1, #0

	bl		main
    47ec:	ebfff223 	bl	1080 <main>

000047f0 <endless_loop>:

endless_loop:
	b               endless_loop
    47f0:	eafffffe 	b	47f0 <endless_loop>
    47f4:	400008c8 	.word	0x400008c8
    47f8:	40000b90 	.word	0x40000b90
    47fc:	40000000 	.word	0x40000000
    4800:	0000ee24 	.word	0x0000ee24
    4804:	400008c8 	.word	0x400008c8
    4808:	4000ffdc 	.word	0x4000ffdc

0000480c <__aeabi_uidiv>:
    480c:	e2512001 	subs	r2, r1, #1
    4810:	012fff1e 	bxeq	lr
    4814:	3a000036 	bcc	48f4 <__aeabi_uidiv+0xe8>
    4818:	e1500001 	cmp	r0, r1
    481c:	9a000022 	bls	48ac <__aeabi_uidiv+0xa0>
    4820:	e1110002 	tst	r1, r2
    4824:	0a000023 	beq	48b8 <__aeabi_uidiv+0xac>
    4828:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    482c:	01a01181 	lsleq	r1, r1, #3
    4830:	03a03008 	moveq	r3, #8
    4834:	13a03001 	movne	r3, #1
    4838:	e3510201 	cmp	r1, #268435456	; 0x10000000
    483c:	31510000 	cmpcc	r1, r0
    4840:	31a01201 	lslcc	r1, r1, #4
    4844:	31a03203 	lslcc	r3, r3, #4
    4848:	3afffffa 	bcc	4838 <__aeabi_uidiv+0x2c>
    484c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    4850:	31510000 	cmpcc	r1, r0
    4854:	31a01081 	lslcc	r1, r1, #1
    4858:	31a03083 	lslcc	r3, r3, #1
    485c:	3afffffa 	bcc	484c <__aeabi_uidiv+0x40>
    4860:	e3a02000 	mov	r2, #0
    4864:	e1500001 	cmp	r0, r1
    4868:	20400001 	subcs	r0, r0, r1
    486c:	21822003 	orrcs	r2, r2, r3
    4870:	e15000a1 	cmp	r0, r1, lsr #1
    4874:	204000a1 	subcs	r0, r0, r1, lsr #1
    4878:	218220a3 	orrcs	r2, r2, r3, lsr #1
    487c:	e1500121 	cmp	r0, r1, lsr #2
    4880:	20400121 	subcs	r0, r0, r1, lsr #2
    4884:	21822123 	orrcs	r2, r2, r3, lsr #2
    4888:	e15001a1 	cmp	r0, r1, lsr #3
    488c:	204001a1 	subcs	r0, r0, r1, lsr #3
    4890:	218221a3 	orrcs	r2, r2, r3, lsr #3
    4894:	e3500000 	cmp	r0, #0
    4898:	11b03223 	lsrsne	r3, r3, #4
    489c:	11a01221 	lsrne	r1, r1, #4
    48a0:	1affffef 	bne	4864 <__aeabi_uidiv+0x58>
    48a4:	e1a00002 	mov	r0, r2
    48a8:	e12fff1e 	bx	lr
    48ac:	03a00001 	moveq	r0, #1
    48b0:	13a00000 	movne	r0, #0
    48b4:	e12fff1e 	bx	lr
    48b8:	e3510801 	cmp	r1, #65536	; 0x10000
    48bc:	21a01821 	lsrcs	r1, r1, #16
    48c0:	23a02010 	movcs	r2, #16
    48c4:	33a02000 	movcc	r2, #0
    48c8:	e3510c01 	cmp	r1, #256	; 0x100
    48cc:	21a01421 	lsrcs	r1, r1, #8
    48d0:	22822008 	addcs	r2, r2, #8
    48d4:	e3510010 	cmp	r1, #16
    48d8:	21a01221 	lsrcs	r1, r1, #4
    48dc:	22822004 	addcs	r2, r2, #4
    48e0:	e3510004 	cmp	r1, #4
    48e4:	82822003 	addhi	r2, r2, #3
    48e8:	908220a1 	addls	r2, r2, r1, lsr #1
    48ec:	e1a00230 	lsr	r0, r0, r2
    48f0:	e12fff1e 	bx	lr
    48f4:	e12fff1f 	bx	pc
    48f8:	e1a00000 	nop			; (mov r0, r0)
    48fc:	e3500000 	cmp	r0, #0
    4900:	13e00000 	mvnne	r0, #0
    4904:	ea0025f0 	b	e0cc <____aeabi_idiv0_from_arm>

00004908 <__aeabi_uidivmod>:
    4908:	e3510000 	cmp	r1, #0
    490c:	0afffff8 	beq	48f4 <__aeabi_uidiv+0xe8>
    4910:	e92d4003 	push	{r0, r1, lr}
    4914:	ebffffbc 	bl	480c <__aeabi_uidiv>
    4918:	e8bd4006 	pop	{r1, r2, lr}
    491c:	e0030092 	mul	r3, r2, r0
    4920:	e0411003 	sub	r1, r1, r3
    4924:	e12fff1e 	bx	lr

00004928 <__aeabi_idiv>:
    4928:	e3510000 	cmp	r1, #0
    492c:	0a000043 	beq	4a40 <.divsi3_skip_div0_test+0x110>

00004930 <.divsi3_skip_div0_test>:
    4930:	e020c001 	eor	ip, r0, r1
    4934:	42611000 	rsbmi	r1, r1, #0
    4938:	e2512001 	subs	r2, r1, #1
    493c:	0a000027 	beq	49e0 <.divsi3_skip_div0_test+0xb0>
    4940:	e1b03000 	movs	r3, r0
    4944:	42603000 	rsbmi	r3, r0, #0
    4948:	e1530001 	cmp	r3, r1
    494c:	9a000026 	bls	49ec <.divsi3_skip_div0_test+0xbc>
    4950:	e1110002 	tst	r1, r2
    4954:	0a000028 	beq	49fc <.divsi3_skip_div0_test+0xcc>
    4958:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    495c:	01a01181 	lsleq	r1, r1, #3
    4960:	03a02008 	moveq	r2, #8
    4964:	13a02001 	movne	r2, #1
    4968:	e3510201 	cmp	r1, #268435456	; 0x10000000
    496c:	31510003 	cmpcc	r1, r3
    4970:	31a01201 	lslcc	r1, r1, #4
    4974:	31a02202 	lslcc	r2, r2, #4
    4978:	3afffffa 	bcc	4968 <.divsi3_skip_div0_test+0x38>
    497c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    4980:	31510003 	cmpcc	r1, r3
    4984:	31a01081 	lslcc	r1, r1, #1
    4988:	31a02082 	lslcc	r2, r2, #1
    498c:	3afffffa 	bcc	497c <.divsi3_skip_div0_test+0x4c>
    4990:	e3a00000 	mov	r0, #0
    4994:	e1530001 	cmp	r3, r1
    4998:	20433001 	subcs	r3, r3, r1
    499c:	21800002 	orrcs	r0, r0, r2
    49a0:	e15300a1 	cmp	r3, r1, lsr #1
    49a4:	204330a1 	subcs	r3, r3, r1, lsr #1
    49a8:	218000a2 	orrcs	r0, r0, r2, lsr #1
    49ac:	e1530121 	cmp	r3, r1, lsr #2
    49b0:	20433121 	subcs	r3, r3, r1, lsr #2
    49b4:	21800122 	orrcs	r0, r0, r2, lsr #2
    49b8:	e15301a1 	cmp	r3, r1, lsr #3
    49bc:	204331a1 	subcs	r3, r3, r1, lsr #3
    49c0:	218001a2 	orrcs	r0, r0, r2, lsr #3
    49c4:	e3530000 	cmp	r3, #0
    49c8:	11b02222 	lsrsne	r2, r2, #4
    49cc:	11a01221 	lsrne	r1, r1, #4
    49d0:	1affffef 	bne	4994 <.divsi3_skip_div0_test+0x64>
    49d4:	e35c0000 	cmp	ip, #0
    49d8:	42600000 	rsbmi	r0, r0, #0
    49dc:	e12fff1e 	bx	lr
    49e0:	e13c0000 	teq	ip, r0
    49e4:	42600000 	rsbmi	r0, r0, #0
    49e8:	e12fff1e 	bx	lr
    49ec:	33a00000 	movcc	r0, #0
    49f0:	01a00fcc 	asreq	r0, ip, #31
    49f4:	03800001 	orreq	r0, r0, #1
    49f8:	e12fff1e 	bx	lr
    49fc:	e3510801 	cmp	r1, #65536	; 0x10000
    4a00:	21a01821 	lsrcs	r1, r1, #16
    4a04:	23a02010 	movcs	r2, #16
    4a08:	33a02000 	movcc	r2, #0
    4a0c:	e3510c01 	cmp	r1, #256	; 0x100
    4a10:	21a01421 	lsrcs	r1, r1, #8
    4a14:	22822008 	addcs	r2, r2, #8
    4a18:	e3510010 	cmp	r1, #16
    4a1c:	21a01221 	lsrcs	r1, r1, #4
    4a20:	22822004 	addcs	r2, r2, #4
    4a24:	e3510004 	cmp	r1, #4
    4a28:	82822003 	addhi	r2, r2, #3
    4a2c:	908220a1 	addls	r2, r2, r1, lsr #1
    4a30:	e35c0000 	cmp	ip, #0
    4a34:	e1a00233 	lsr	r0, r3, r2
    4a38:	42600000 	rsbmi	r0, r0, #0
    4a3c:	e12fff1e 	bx	lr
    4a40:	e12fff1f 	bx	pc
    4a44:	e1a00000 	nop			; (mov r0, r0)
    4a48:	e3500000 	cmp	r0, #0
    4a4c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    4a50:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    4a54:	ea00259c 	b	e0cc <____aeabi_idiv0_from_arm>

00004a58 <__aeabi_idivmod>:
    4a58:	e3510000 	cmp	r1, #0
    4a5c:	0afffff7 	beq	4a40 <.divsi3_skip_div0_test+0x110>
    4a60:	e92d4003 	push	{r0, r1, lr}
    4a64:	ebffffb1 	bl	4930 <.divsi3_skip_div0_test>
    4a68:	e8bd4006 	pop	{r1, r2, lr}
    4a6c:	e0030092 	mul	r3, r2, r0
    4a70:	e0411003 	sub	r1, r1, r3
    4a74:	e12fff1e 	bx	lr

00004a78 <__aeabi_idiv0>:
    4a78:	4770      	bx	lr
    4a7a:	46c0      	nop			; (mov r8, r8)

00004a7c <_fflush_r>:
    4a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a7e:	1c06      	adds	r6, r0, #0
    4a80:	1c0c      	adds	r4, r1, #0
    4a82:	2800      	cmp	r0, #0
    4a84:	d003      	beq.n	4a8e <_fflush_r+0x12>
    4a86:	6b83      	ldr	r3, [r0, #56]	; 0x38
    4a88:	2b00      	cmp	r3, #0
    4a8a:	d100      	bne.n	4a8e <_fflush_r+0x12>
    4a8c:	e06a      	b.n	4b64 <_fflush_r+0xe8>
    4a8e:	89a0      	ldrh	r0, [r4, #12]
    4a90:	2800      	cmp	r0, #0
    4a92:	d041      	beq.n	4b18 <_fflush_r+0x9c>
    4a94:	0403      	lsls	r3, r0, #16
    4a96:	141b      	asrs	r3, r3, #16
    4a98:	2208      	movs	r2, #8
    4a9a:	401a      	ands	r2, r3
    4a9c:	d13f      	bne.n	4b1e <_fflush_r+0xa2>
    4a9e:	2380      	movs	r3, #128	; 0x80
    4aa0:	011b      	lsls	r3, r3, #4
    4aa2:	6861      	ldr	r1, [r4, #4]
    4aa4:	4303      	orrs	r3, r0
    4aa6:	81a3      	strh	r3, [r4, #12]
    4aa8:	2900      	cmp	r1, #0
    4aaa:	dc00      	bgt.n	4aae <_fflush_r+0x32>
    4aac:	e06c      	b.n	4b88 <_fflush_r+0x10c>
    4aae:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    4ab0:	1e38      	subs	r0, r7, #0
    4ab2:	d031      	beq.n	4b18 <_fflush_r+0x9c>
    4ab4:	2200      	movs	r2, #0
    4ab6:	6835      	ldr	r5, [r6, #0]
    4ab8:	6032      	str	r2, [r6, #0]
    4aba:	3280      	adds	r2, #128	; 0x80
    4abc:	0152      	lsls	r2, r2, #5
    4abe:	401a      	ands	r2, r3
    4ac0:	d055      	beq.n	4b6e <_fflush_r+0xf2>
    4ac2:	6d22      	ldr	r2, [r4, #80]	; 0x50
    4ac4:	0759      	lsls	r1, r3, #29
    4ac6:	d506      	bpl.n	4ad6 <_fflush_r+0x5a>
    4ac8:	6863      	ldr	r3, [r4, #4]
    4aca:	1ad2      	subs	r2, r2, r3
    4acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4ace:	2b00      	cmp	r3, #0
    4ad0:	d001      	beq.n	4ad6 <_fflush_r+0x5a>
    4ad2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4ad4:	1ad2      	subs	r2, r2, r3
    4ad6:	69e1      	ldr	r1, [r4, #28]
    4ad8:	1c30      	adds	r0, r6, #0
    4ada:	2300      	movs	r3, #0
    4adc:	f000 f892 	bl	4c04 <fflush+0x2c>
    4ae0:	1c42      	adds	r2, r0, #1
    4ae2:	d057      	beq.n	4b94 <_fflush_r+0x118>
    4ae4:	89a2      	ldrh	r2, [r4, #12]
    4ae6:	4b3b      	ldr	r3, [pc, #236]	; (4bd4 <_fflush_r+0x158>)
    4ae8:	4013      	ands	r3, r2
    4aea:	2200      	movs	r2, #0
    4aec:	6062      	str	r2, [r4, #4]
    4aee:	6922      	ldr	r2, [r4, #16]
    4af0:	81a3      	strh	r3, [r4, #12]
    4af2:	6022      	str	r2, [r4, #0]
    4af4:	04d9      	lsls	r1, r3, #19
    4af6:	d502      	bpl.n	4afe <_fflush_r+0x82>
    4af8:	1c42      	adds	r2, r0, #1
    4afa:	d057      	beq.n	4bac <_fflush_r+0x130>
    4afc:	6520      	str	r0, [r4, #80]	; 0x50
    4afe:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4b00:	6035      	str	r5, [r6, #0]
    4b02:	1e08      	subs	r0, r1, #0
    4b04:	d008      	beq.n	4b18 <_fflush_r+0x9c>
    4b06:	1c23      	adds	r3, r4, #0
    4b08:	3340      	adds	r3, #64	; 0x40
    4b0a:	4299      	cmp	r1, r3
    4b0c:	d002      	beq.n	4b14 <_fflush_r+0x98>
    4b0e:	1c30      	adds	r0, r6, #0
    4b10:	f000 f9e6 	bl	4ee0 <_free_r>
    4b14:	2000      	movs	r0, #0
    4b16:	6320      	str	r0, [r4, #48]	; 0x30
    4b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b1a:	bc02      	pop	{r1}
    4b1c:	4708      	bx	r1
    4b1e:	6927      	ldr	r7, [r4, #16]
    4b20:	1e38      	subs	r0, r7, #0
    4b22:	d0f9      	beq.n	4b18 <_fflush_r+0x9c>
    4b24:	6825      	ldr	r5, [r4, #0]
    4b26:	2200      	movs	r2, #0
    4b28:	1bed      	subs	r5, r5, r7
    4b2a:	6027      	str	r7, [r4, #0]
    4b2c:	0799      	lsls	r1, r3, #30
    4b2e:	d01c      	beq.n	4b6a <_fflush_r+0xee>
    4b30:	2000      	movs	r0, #0
    4b32:	60a2      	str	r2, [r4, #8]
    4b34:	4285      	cmp	r5, r0
    4b36:	dc04      	bgt.n	4b42 <_fflush_r+0xc6>
    4b38:	e7ee      	b.n	4b18 <_fflush_r+0x9c>
    4b3a:	1a2d      	subs	r5, r5, r0
    4b3c:	2d00      	cmp	r5, #0
    4b3e:	dd21      	ble.n	4b84 <_fflush_r+0x108>
    4b40:	183f      	adds	r7, r7, r0
    4b42:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4b44:	69e1      	ldr	r1, [r4, #28]
    4b46:	4694      	mov	ip, r2
    4b48:	1c30      	adds	r0, r6, #0
    4b4a:	1c3a      	adds	r2, r7, #0
    4b4c:	1c2b      	adds	r3, r5, #0
    4b4e:	f000 f85a 	bl	4c06 <fflush+0x2e>
    4b52:	2800      	cmp	r0, #0
    4b54:	dcf1      	bgt.n	4b3a <_fflush_r+0xbe>
    4b56:	89a3      	ldrh	r3, [r4, #12]
    4b58:	2240      	movs	r2, #64	; 0x40
    4b5a:	4313      	orrs	r3, r2
    4b5c:	2001      	movs	r0, #1
    4b5e:	81a3      	strh	r3, [r4, #12]
    4b60:	4240      	negs	r0, r0
    4b62:	e7d9      	b.n	4b18 <_fflush_r+0x9c>
    4b64:	f000 f87e 	bl	4c64 <__sinit>
    4b68:	e791      	b.n	4a8e <_fflush_r+0x12>
    4b6a:	6962      	ldr	r2, [r4, #20]
    4b6c:	e7e0      	b.n	4b30 <_fflush_r+0xb4>
    4b6e:	69e1      	ldr	r1, [r4, #28]
    4b70:	1c30      	adds	r0, r6, #0
    4b72:	2301      	movs	r3, #1
    4b74:	f000 f846 	bl	4c04 <fflush+0x2c>
    4b78:	1c02      	adds	r2, r0, #0
    4b7a:	1c41      	adds	r1, r0, #1
    4b7c:	d01a      	beq.n	4bb4 <_fflush_r+0x138>
    4b7e:	89a3      	ldrh	r3, [r4, #12]
    4b80:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    4b82:	e79f      	b.n	4ac4 <_fflush_r+0x48>
    4b84:	2000      	movs	r0, #0
    4b86:	e7c7      	b.n	4b18 <_fflush_r+0x9c>
    4b88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    4b8a:	1c10      	adds	r0, r2, #0
    4b8c:	2900      	cmp	r1, #0
    4b8e:	dd00      	ble.n	4b92 <_fflush_r+0x116>
    4b90:	e78d      	b.n	4aae <_fflush_r+0x32>
    4b92:	e7c1      	b.n	4b18 <_fflush_r+0x9c>
    4b94:	6833      	ldr	r3, [r6, #0]
    4b96:	2b00      	cmp	r3, #0
    4b98:	d0a4      	beq.n	4ae4 <_fflush_r+0x68>
    4b9a:	2b1d      	cmp	r3, #29
    4b9c:	d0a2      	beq.n	4ae4 <_fflush_r+0x68>
    4b9e:	2b16      	cmp	r3, #22
    4ba0:	d0a0      	beq.n	4ae4 <_fflush_r+0x68>
    4ba2:	89a3      	ldrh	r3, [r4, #12]
    4ba4:	2240      	movs	r2, #64	; 0x40
    4ba6:	4313      	orrs	r3, r2
    4ba8:	81a3      	strh	r3, [r4, #12]
    4baa:	e7b5      	b.n	4b18 <_fflush_r+0x9c>
    4bac:	6833      	ldr	r3, [r6, #0]
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d1a5      	bne.n	4afe <_fflush_r+0x82>
    4bb2:	e7a3      	b.n	4afc <_fflush_r+0x80>
    4bb4:	6833      	ldr	r3, [r6, #0]
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d0e1      	beq.n	4b7e <_fflush_r+0x102>
    4bba:	2b16      	cmp	r3, #22
    4bbc:	d001      	beq.n	4bc2 <_fflush_r+0x146>
    4bbe:	2b1d      	cmp	r3, #29
    4bc0:	d102      	bne.n	4bc8 <_fflush_r+0x14c>
    4bc2:	6035      	str	r5, [r6, #0]
    4bc4:	2000      	movs	r0, #0
    4bc6:	e7a7      	b.n	4b18 <_fflush_r+0x9c>
    4bc8:	89a3      	ldrh	r3, [r4, #12]
    4bca:	2140      	movs	r1, #64	; 0x40
    4bcc:	430b      	orrs	r3, r1
    4bce:	81a3      	strh	r3, [r4, #12]
    4bd0:	e7a2      	b.n	4b18 <_fflush_r+0x9c>
    4bd2:	46c0      	nop			; (mov r8, r8)
    4bd4:	fffff7ff 	.word	0xfffff7ff

00004bd8 <fflush>:
    4bd8:	b508      	push	{r3, lr}
    4bda:	1e01      	subs	r1, r0, #0
    4bdc:	d006      	beq.n	4bec <fflush+0x14>
    4bde:	4b06      	ldr	r3, [pc, #24]	; (4bf8 <fflush+0x20>)
    4be0:	6818      	ldr	r0, [r3, #0]
    4be2:	f7ff ff4b 	bl	4a7c <_fflush_r>
    4be6:	bc08      	pop	{r3}
    4be8:	bc02      	pop	{r1}
    4bea:	4708      	bx	r1
    4bec:	4b03      	ldr	r3, [pc, #12]	; (4bfc <fflush+0x24>)
    4bee:	4904      	ldr	r1, [pc, #16]	; (4c00 <fflush+0x28>)
    4bf0:	6818      	ldr	r0, [r3, #0]
    4bf2:	f000 fa75 	bl	50e0 <_fwalk_reent>
    4bf6:	e7f6      	b.n	4be6 <fflush+0xe>
    4bf8:	40000000 	.word	0x40000000
    4bfc:	0000e238 	.word	0x0000e238
    4c00:	00004a7d 	.word	0x00004a7d
    4c04:	4738      	bx	r7
    4c06:	4760      	bx	ip

00004c08 <__fp_lock>:
    4c08:	2000      	movs	r0, #0
    4c0a:	4770      	bx	lr

00004c0c <__fp_unlock>:
    4c0c:	2000      	movs	r0, #0
    4c0e:	4770      	bx	lr

00004c10 <_cleanup_r>:
    4c10:	b508      	push	{r3, lr}
    4c12:	4903      	ldr	r1, [pc, #12]	; (4c20 <_cleanup_r+0x10>)
    4c14:	f000 fa38 	bl	5088 <_fwalk>
    4c18:	bc08      	pop	{r3}
    4c1a:	bc01      	pop	{r0}
    4c1c:	4700      	bx	r0
    4c1e:	46c0      	nop			; (mov r8, r8)
    4c20:	00009b0d 	.word	0x00009b0d

00004c24 <__sfmoreglue>:
    4c24:	b570      	push	{r4, r5, r6, lr}
    4c26:	2568      	movs	r5, #104	; 0x68
    4c28:	434d      	muls	r5, r1
    4c2a:	1c0e      	adds	r6, r1, #0
    4c2c:	1c29      	adds	r1, r5, #0
    4c2e:	310c      	adds	r1, #12
    4c30:	f000 faa0 	bl	5174 <_malloc_r>
    4c34:	1e04      	subs	r4, r0, #0
    4c36:	d007      	beq.n	4c48 <__sfmoreglue+0x24>
    4c38:	300c      	adds	r0, #12
    4c3a:	2100      	movs	r1, #0
    4c3c:	6021      	str	r1, [r4, #0]
    4c3e:	6066      	str	r6, [r4, #4]
    4c40:	60a0      	str	r0, [r4, #8]
    4c42:	1c2a      	adds	r2, r5, #0
    4c44:	f000 fd9a 	bl	577c <memset>
    4c48:	1c20      	adds	r0, r4, #0
    4c4a:	bc70      	pop	{r4, r5, r6}
    4c4c:	bc02      	pop	{r1}
    4c4e:	4708      	bx	r1

00004c50 <_cleanup>:
    4c50:	b508      	push	{r3, lr}
    4c52:	4b03      	ldr	r3, [pc, #12]	; (4c60 <_cleanup+0x10>)
    4c54:	6818      	ldr	r0, [r3, #0]
    4c56:	f7ff ffdb 	bl	4c10 <_cleanup_r>
    4c5a:	bc08      	pop	{r3}
    4c5c:	bc01      	pop	{r0}
    4c5e:	4700      	bx	r0
    4c60:	0000e238 	.word	0x0000e238

00004c64 <__sinit>:
    4c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c66:	465f      	mov	r7, fp
    4c68:	4656      	mov	r6, sl
    4c6a:	464d      	mov	r5, r9
    4c6c:	4644      	mov	r4, r8
    4c6e:	b4f0      	push	{r4, r5, r6, r7}
    4c70:	6b84      	ldr	r4, [r0, #56]	; 0x38
    4c72:	1c06      	adds	r6, r0, #0
    4c74:	2c00      	cmp	r4, #0
    4c76:	d162      	bne.n	4d3e <__sinit+0xda>
    4c78:	4b35      	ldr	r3, [pc, #212]	; (4d50 <__sinit+0xec>)
    4c7a:	63c3      	str	r3, [r0, #60]	; 0x3c
    4c7c:	2301      	movs	r3, #1
    4c7e:	6383      	str	r3, [r0, #56]	; 0x38
    4c80:	469b      	mov	fp, r3
    4c82:	33b7      	adds	r3, #183	; 0xb7
    4c84:	009b      	lsls	r3, r3, #2
    4c86:	50c4      	str	r4, [r0, r3]
    4c88:	23b9      	movs	r3, #185	; 0xb9
    4c8a:	2203      	movs	r2, #3
    4c8c:	009b      	lsls	r3, r3, #2
    4c8e:	50c2      	str	r2, [r0, r3]
    4c90:	23bb      	movs	r3, #187	; 0xbb
    4c92:	009b      	lsls	r3, r3, #2
    4c94:	6845      	ldr	r5, [r0, #4]
    4c96:	18c2      	adds	r2, r0, r3
    4c98:	23ba      	movs	r3, #186	; 0xba
    4c9a:	009b      	lsls	r3, r3, #2
    4c9c:	50c2      	str	r2, [r0, r3]
    4c9e:	2304      	movs	r3, #4
    4ca0:	1c28      	adds	r0, r5, #0
    4ca2:	81ab      	strh	r3, [r5, #12]
    4ca4:	602c      	str	r4, [r5, #0]
    4ca6:	606c      	str	r4, [r5, #4]
    4ca8:	60ac      	str	r4, [r5, #8]
    4caa:	666c      	str	r4, [r5, #100]	; 0x64
    4cac:	81ec      	strh	r4, [r5, #14]
    4cae:	612c      	str	r4, [r5, #16]
    4cb0:	616c      	str	r4, [r5, #20]
    4cb2:	61ac      	str	r4, [r5, #24]
    4cb4:	1c21      	adds	r1, r4, #0
    4cb6:	2208      	movs	r2, #8
    4cb8:	305c      	adds	r0, #92	; 0x5c
    4cba:	f000 fd5f 	bl	577c <memset>
    4cbe:	4b25      	ldr	r3, [pc, #148]	; (4d54 <__sinit+0xf0>)
    4cc0:	4698      	mov	r8, r3
    4cc2:	626b      	str	r3, [r5, #36]	; 0x24
    4cc4:	4b24      	ldr	r3, [pc, #144]	; (4d58 <__sinit+0xf4>)
    4cc6:	4f25      	ldr	r7, [pc, #148]	; (4d5c <__sinit+0xf8>)
    4cc8:	4699      	mov	r9, r3
    4cca:	62ab      	str	r3, [r5, #40]	; 0x28
    4ccc:	4b24      	ldr	r3, [pc, #144]	; (4d60 <__sinit+0xfc>)
    4cce:	61ed      	str	r5, [r5, #28]
    4cd0:	62eb      	str	r3, [r5, #44]	; 0x2c
    4cd2:	622f      	str	r7, [r5, #32]
    4cd4:	68b5      	ldr	r5, [r6, #8]
    4cd6:	469a      	mov	sl, r3
    4cd8:	2309      	movs	r3, #9
    4cda:	81ab      	strh	r3, [r5, #12]
    4cdc:	1c28      	adds	r0, r5, #0
    4cde:	465b      	mov	r3, fp
    4ce0:	81eb      	strh	r3, [r5, #14]
    4ce2:	602c      	str	r4, [r5, #0]
    4ce4:	606c      	str	r4, [r5, #4]
    4ce6:	60ac      	str	r4, [r5, #8]
    4ce8:	666c      	str	r4, [r5, #100]	; 0x64
    4cea:	612c      	str	r4, [r5, #16]
    4cec:	616c      	str	r4, [r5, #20]
    4cee:	61ac      	str	r4, [r5, #24]
    4cf0:	1c21      	adds	r1, r4, #0
    4cf2:	2208      	movs	r2, #8
    4cf4:	305c      	adds	r0, #92	; 0x5c
    4cf6:	f000 fd41 	bl	577c <memset>
    4cfa:	4643      	mov	r3, r8
    4cfc:	626b      	str	r3, [r5, #36]	; 0x24
    4cfe:	464b      	mov	r3, r9
    4d00:	62ab      	str	r3, [r5, #40]	; 0x28
    4d02:	4653      	mov	r3, sl
    4d04:	62eb      	str	r3, [r5, #44]	; 0x2c
    4d06:	61ed      	str	r5, [r5, #28]
    4d08:	622f      	str	r7, [r5, #32]
    4d0a:	68f5      	ldr	r5, [r6, #12]
    4d0c:	2312      	movs	r3, #18
    4d0e:	81ab      	strh	r3, [r5, #12]
    4d10:	1c28      	adds	r0, r5, #0
    4d12:	3b10      	subs	r3, #16
    4d14:	81eb      	strh	r3, [r5, #14]
    4d16:	602c      	str	r4, [r5, #0]
    4d18:	606c      	str	r4, [r5, #4]
    4d1a:	60ac      	str	r4, [r5, #8]
    4d1c:	666c      	str	r4, [r5, #100]	; 0x64
    4d1e:	612c      	str	r4, [r5, #16]
    4d20:	616c      	str	r4, [r5, #20]
    4d22:	61ac      	str	r4, [r5, #24]
    4d24:	305c      	adds	r0, #92	; 0x5c
    4d26:	1c21      	adds	r1, r4, #0
    4d28:	2208      	movs	r2, #8
    4d2a:	f000 fd27 	bl	577c <memset>
    4d2e:	4643      	mov	r3, r8
    4d30:	626b      	str	r3, [r5, #36]	; 0x24
    4d32:	464b      	mov	r3, r9
    4d34:	62ab      	str	r3, [r5, #40]	; 0x28
    4d36:	4653      	mov	r3, sl
    4d38:	61ed      	str	r5, [r5, #28]
    4d3a:	622f      	str	r7, [r5, #32]
    4d3c:	62eb      	str	r3, [r5, #44]	; 0x2c
    4d3e:	bc3c      	pop	{r2, r3, r4, r5}
    4d40:	4690      	mov	r8, r2
    4d42:	4699      	mov	r9, r3
    4d44:	46a2      	mov	sl, r4
    4d46:	46ab      	mov	fp, r5
    4d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4d4a:	bc01      	pop	{r0}
    4d4c:	4700      	bx	r0
    4d4e:	46c0      	nop			; (mov r8, r8)
    4d50:	00004c11 	.word	0x00004c11
    4d54:	000059b1 	.word	0x000059b1
    4d58:	000059ed 	.word	0x000059ed
    4d5c:	00005981 	.word	0x00005981
    4d60:	00005a1d 	.word	0x00005a1d

00004d64 <__sfp>:
    4d64:	b570      	push	{r4, r5, r6, lr}
    4d66:	4b22      	ldr	r3, [pc, #136]	; (4df0 <__sfp+0x8c>)
    4d68:	681d      	ldr	r5, [r3, #0]
    4d6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
    4d6c:	1c06      	adds	r6, r0, #0
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d02e      	beq.n	4dd0 <__sfp+0x6c>
    4d72:	21b8      	movs	r1, #184	; 0xb8
    4d74:	0089      	lsls	r1, r1, #2
    4d76:	186d      	adds	r5, r5, r1
    4d78:	686b      	ldr	r3, [r5, #4]
    4d7a:	68ac      	ldr	r4, [r5, #8]
    4d7c:	3b01      	subs	r3, #1
    4d7e:	d503      	bpl.n	4d88 <__sfp+0x24>
    4d80:	e021      	b.n	4dc6 <__sfp+0x62>
    4d82:	3b01      	subs	r3, #1
    4d84:	d41f      	bmi.n	4dc6 <__sfp+0x62>
    4d86:	3468      	adds	r4, #104	; 0x68
    4d88:	210c      	movs	r1, #12
    4d8a:	5e62      	ldrsh	r2, [r4, r1]
    4d8c:	2a00      	cmp	r2, #0
    4d8e:	d1f8      	bne.n	4d82 <__sfp+0x1e>
    4d90:	2301      	movs	r3, #1
    4d92:	425b      	negs	r3, r3
    4d94:	2500      	movs	r5, #0
    4d96:	81e3      	strh	r3, [r4, #14]
    4d98:	1c20      	adds	r0, r4, #0
    4d9a:	2301      	movs	r3, #1
    4d9c:	81a3      	strh	r3, [r4, #12]
    4d9e:	6665      	str	r5, [r4, #100]	; 0x64
    4da0:	6025      	str	r5, [r4, #0]
    4da2:	60a5      	str	r5, [r4, #8]
    4da4:	6065      	str	r5, [r4, #4]
    4da6:	6125      	str	r5, [r4, #16]
    4da8:	6165      	str	r5, [r4, #20]
    4daa:	61a5      	str	r5, [r4, #24]
    4dac:	305c      	adds	r0, #92	; 0x5c
    4dae:	1c29      	adds	r1, r5, #0
    4db0:	2208      	movs	r2, #8
    4db2:	f000 fce3 	bl	577c <memset>
    4db6:	6325      	str	r5, [r4, #48]	; 0x30
    4db8:	6365      	str	r5, [r4, #52]	; 0x34
    4dba:	6465      	str	r5, [r4, #68]	; 0x44
    4dbc:	64a5      	str	r5, [r4, #72]	; 0x48
    4dbe:	1c20      	adds	r0, r4, #0
    4dc0:	bc70      	pop	{r4, r5, r6}
    4dc2:	bc02      	pop	{r1}
    4dc4:	4708      	bx	r1
    4dc6:	6828      	ldr	r0, [r5, #0]
    4dc8:	2800      	cmp	r0, #0
    4dca:	d005      	beq.n	4dd8 <__sfp+0x74>
    4dcc:	1c05      	adds	r5, r0, #0
    4dce:	e7d3      	b.n	4d78 <__sfp+0x14>
    4dd0:	1c28      	adds	r0, r5, #0
    4dd2:	f7ff ff47 	bl	4c64 <__sinit>
    4dd6:	e7cc      	b.n	4d72 <__sfp+0xe>
    4dd8:	1c30      	adds	r0, r6, #0
    4dda:	2104      	movs	r1, #4
    4ddc:	f7ff ff22 	bl	4c24 <__sfmoreglue>
    4de0:	6028      	str	r0, [r5, #0]
    4de2:	2800      	cmp	r0, #0
    4de4:	d1f2      	bne.n	4dcc <__sfp+0x68>
    4de6:	230c      	movs	r3, #12
    4de8:	6033      	str	r3, [r6, #0]
    4dea:	1c04      	adds	r4, r0, #0
    4dec:	e7e7      	b.n	4dbe <__sfp+0x5a>
    4dee:	46c0      	nop			; (mov r8, r8)
    4df0:	0000e238 	.word	0x0000e238

00004df4 <__sfp_lock_acquire>:
    4df4:	4770      	bx	lr
    4df6:	46c0      	nop			; (mov r8, r8)

00004df8 <__sfp_lock_release>:
    4df8:	4770      	bx	lr
    4dfa:	46c0      	nop			; (mov r8, r8)

00004dfc <__sinit_lock_acquire>:
    4dfc:	4770      	bx	lr
    4dfe:	46c0      	nop			; (mov r8, r8)

00004e00 <__sinit_lock_release>:
    4e00:	4770      	bx	lr
    4e02:	46c0      	nop			; (mov r8, r8)

00004e04 <__fp_lock_all>:
    4e04:	b508      	push	{r3, lr}
    4e06:	4b04      	ldr	r3, [pc, #16]	; (4e18 <__fp_lock_all+0x14>)
    4e08:	4904      	ldr	r1, [pc, #16]	; (4e1c <__fp_lock_all+0x18>)
    4e0a:	6818      	ldr	r0, [r3, #0]
    4e0c:	f000 f93c 	bl	5088 <_fwalk>
    4e10:	bc08      	pop	{r3}
    4e12:	bc01      	pop	{r0}
    4e14:	4700      	bx	r0
    4e16:	46c0      	nop			; (mov r8, r8)
    4e18:	40000000 	.word	0x40000000
    4e1c:	00004c09 	.word	0x00004c09

00004e20 <__fp_unlock_all>:
    4e20:	b508      	push	{r3, lr}
    4e22:	4b04      	ldr	r3, [pc, #16]	; (4e34 <__fp_unlock_all+0x14>)
    4e24:	4904      	ldr	r1, [pc, #16]	; (4e38 <__fp_unlock_all+0x18>)
    4e26:	6818      	ldr	r0, [r3, #0]
    4e28:	f000 f92e 	bl	5088 <_fwalk>
    4e2c:	bc08      	pop	{r3}
    4e2e:	bc01      	pop	{r0}
    4e30:	4700      	bx	r0
    4e32:	46c0      	nop			; (mov r8, r8)
    4e34:	40000000 	.word	0x40000000
    4e38:	00004c0d 	.word	0x00004c0d

00004e3c <_malloc_trim_r>:
    4e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e3e:	1c0f      	adds	r7, r1, #0
    4e40:	1c04      	adds	r4, r0, #0
    4e42:	f000 fce1 	bl	5808 <__malloc_lock>
    4e46:	4d21      	ldr	r5, [pc, #132]	; (4ecc <_malloc_trim_r+0x90>)
    4e48:	68ab      	ldr	r3, [r5, #8]
    4e4a:	685e      	ldr	r6, [r3, #4]
    4e4c:	4a20      	ldr	r2, [pc, #128]	; (4ed0 <_malloc_trim_r+0x94>)
    4e4e:	2303      	movs	r3, #3
    4e50:	439e      	bics	r6, r3
    4e52:	18b3      	adds	r3, r6, r2
    4e54:	1bdf      	subs	r7, r3, r7
    4e56:	0b3f      	lsrs	r7, r7, #12
    4e58:	3f01      	subs	r7, #1
    4e5a:	4b1e      	ldr	r3, [pc, #120]	; (4ed4 <_malloc_trim_r+0x98>)
    4e5c:	033f      	lsls	r7, r7, #12
    4e5e:	429f      	cmp	r7, r3
    4e60:	dd07      	ble.n	4e72 <_malloc_trim_r+0x36>
    4e62:	1c20      	adds	r0, r4, #0
    4e64:	2100      	movs	r1, #0
    4e66:	f7fd f8e3 	bl	2030 <_sbrk_r>
    4e6a:	68ab      	ldr	r3, [r5, #8]
    4e6c:	199b      	adds	r3, r3, r6
    4e6e:	4298      	cmp	r0, r3
    4e70:	d006      	beq.n	4e80 <_malloc_trim_r+0x44>
    4e72:	1c20      	adds	r0, r4, #0
    4e74:	f000 fcca 	bl	580c <__malloc_unlock>
    4e78:	2000      	movs	r0, #0
    4e7a:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e7c:	bc02      	pop	{r1}
    4e7e:	4708      	bx	r1
    4e80:	4279      	negs	r1, r7
    4e82:	1c20      	adds	r0, r4, #0
    4e84:	f7fd f8d4 	bl	2030 <_sbrk_r>
    4e88:	3001      	adds	r0, #1
    4e8a:	d00d      	beq.n	4ea8 <_malloc_trim_r+0x6c>
    4e8c:	68ab      	ldr	r3, [r5, #8]
    4e8e:	1bf6      	subs	r6, r6, r7
    4e90:	2501      	movs	r5, #1
    4e92:	432e      	orrs	r6, r5
    4e94:	605e      	str	r6, [r3, #4]
    4e96:	4b10      	ldr	r3, [pc, #64]	; (4ed8 <_malloc_trim_r+0x9c>)
    4e98:	681a      	ldr	r2, [r3, #0]
    4e9a:	1bd7      	subs	r7, r2, r7
    4e9c:	1c20      	adds	r0, r4, #0
    4e9e:	601f      	str	r7, [r3, #0]
    4ea0:	f000 fcb4 	bl	580c <__malloc_unlock>
    4ea4:	1c28      	adds	r0, r5, #0
    4ea6:	e7e8      	b.n	4e7a <_malloc_trim_r+0x3e>
    4ea8:	1c20      	adds	r0, r4, #0
    4eaa:	2100      	movs	r1, #0
    4eac:	f7fd f8c0 	bl	2030 <_sbrk_r>
    4eb0:	68ab      	ldr	r3, [r5, #8]
    4eb2:	1ac2      	subs	r2, r0, r3
    4eb4:	2a0f      	cmp	r2, #15
    4eb6:	dddc      	ble.n	4e72 <_malloc_trim_r+0x36>
    4eb8:	4908      	ldr	r1, [pc, #32]	; (4edc <_malloc_trim_r+0xa0>)
    4eba:	6809      	ldr	r1, [r1, #0]
    4ebc:	1a40      	subs	r0, r0, r1
    4ebe:	4906      	ldr	r1, [pc, #24]	; (4ed8 <_malloc_trim_r+0x9c>)
    4ec0:	6008      	str	r0, [r1, #0]
    4ec2:	2101      	movs	r1, #1
    4ec4:	430a      	orrs	r2, r1
    4ec6:	605a      	str	r2, [r3, #4]
    4ec8:	e7d3      	b.n	4e72 <_malloc_trim_r+0x36>
    4eca:	46c0      	nop			; (mov r8, r8)
    4ecc:	40000430 	.word	0x40000430
    4ed0:	00000fef 	.word	0x00000fef
    4ed4:	00000fff 	.word	0x00000fff
    4ed8:	400008cc 	.word	0x400008cc
    4edc:	40000838 	.word	0x40000838

00004ee0 <_free_r>:
    4ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ee2:	4657      	mov	r7, sl
    4ee4:	464e      	mov	r6, r9
    4ee6:	4645      	mov	r5, r8
    4ee8:	b4e0      	push	{r5, r6, r7}
    4eea:	1c05      	adds	r5, r0, #0
    4eec:	1e0c      	subs	r4, r1, #0
    4eee:	d05d      	beq.n	4fac <_free_r+0xcc>
    4ef0:	3c08      	subs	r4, #8
    4ef2:	f000 fc89 	bl	5808 <__malloc_lock>
    4ef6:	6860      	ldr	r0, [r4, #4]
    4ef8:	2101      	movs	r1, #1
    4efa:	1c03      	adds	r3, r0, #0
    4efc:	438b      	bics	r3, r1
    4efe:	18e2      	adds	r2, r4, r3
    4f00:	6857      	ldr	r7, [r2, #4]
    4f02:	2603      	movs	r6, #3
    4f04:	43b7      	bics	r7, r6
    4f06:	4e5b      	ldr	r6, [pc, #364]	; (5074 <_free_r+0x194>)
    4f08:	4680      	mov	r8, r0
    4f0a:	68b0      	ldr	r0, [r6, #8]
    4f0c:	4684      	mov	ip, r0
    4f0e:	4594      	cmp	ip, r2
    4f10:	d06e      	beq.n	4ff0 <_free_r+0x110>
    4f12:	2000      	movs	r0, #0
    4f14:	4684      	mov	ip, r0
    4f16:	4640      	mov	r0, r8
    4f18:	6057      	str	r7, [r2, #4]
    4f1a:	4008      	ands	r0, r1
    4f1c:	4680      	mov	r8, r0
    4f1e:	d10e      	bne.n	4f3e <_free_r+0x5e>
    4f20:	6820      	ldr	r0, [r4, #0]
    4f22:	1a24      	subs	r4, r4, r0
    4f24:	181b      	adds	r3, r3, r0
    4f26:	68a0      	ldr	r0, [r4, #8]
    4f28:	4682      	mov	sl, r0
    4f2a:	2008      	movs	r0, #8
    4f2c:	1980      	adds	r0, r0, r6
    4f2e:	468c      	mov	ip, r1
    4f30:	4582      	cmp	sl, r0
    4f32:	d004      	beq.n	4f3e <_free_r+0x5e>
    4f34:	68e1      	ldr	r1, [r4, #12]
    4f36:	4650      	mov	r0, sl
    4f38:	60c1      	str	r1, [r0, #12]
    4f3a:	6088      	str	r0, [r1, #8]
    4f3c:	46c4      	mov	ip, r8
    4f3e:	19d1      	adds	r1, r2, r7
    4f40:	6848      	ldr	r0, [r1, #4]
    4f42:	2101      	movs	r1, #1
    4f44:	4208      	tst	r0, r1
    4f46:	d107      	bne.n	4f58 <_free_r+0x78>
    4f48:	2000      	movs	r0, #0
    4f4a:	19db      	adds	r3, r3, r7
    4f4c:	4584      	cmp	ip, r0
    4f4e:	d034      	beq.n	4fba <_free_r+0xda>
    4f50:	6890      	ldr	r0, [r2, #8]
    4f52:	68d2      	ldr	r2, [r2, #12]
    4f54:	60c2      	str	r2, [r0, #12]
    4f56:	6090      	str	r0, [r2, #8]
    4f58:	2201      	movs	r2, #1
    4f5a:	1c11      	adds	r1, r2, #0
    4f5c:	4319      	orrs	r1, r3
    4f5e:	6061      	str	r1, [r4, #4]
    4f60:	2100      	movs	r1, #0
    4f62:	50e3      	str	r3, [r4, r3]
    4f64:	458c      	cmp	ip, r1
    4f66:	d11e      	bne.n	4fa6 <_free_r+0xc6>
    4f68:	4943      	ldr	r1, [pc, #268]	; (5078 <_free_r+0x198>)
    4f6a:	428b      	cmp	r3, r1
    4f6c:	d932      	bls.n	4fd4 <_free_r+0xf4>
    4f6e:	0a5a      	lsrs	r2, r3, #9
    4f70:	2a04      	cmp	r2, #4
    4f72:	d856      	bhi.n	5022 <_free_r+0x142>
    4f74:	0999      	lsrs	r1, r3, #6
    4f76:	3138      	adds	r1, #56	; 0x38
    4f78:	00c8      	lsls	r0, r1, #3
    4f7a:	1830      	adds	r0, r6, r0
    4f7c:	6882      	ldr	r2, [r0, #8]
    4f7e:	4282      	cmp	r2, r0
    4f80:	d055      	beq.n	502e <_free_r+0x14e>
    4f82:	6851      	ldr	r1, [r2, #4]
    4f84:	2603      	movs	r6, #3
    4f86:	43b1      	bics	r1, r6
    4f88:	428b      	cmp	r3, r1
    4f8a:	d304      	bcc.n	4f96 <_free_r+0xb6>
    4f8c:	e006      	b.n	4f9c <_free_r+0xbc>
    4f8e:	6851      	ldr	r1, [r2, #4]
    4f90:	43b1      	bics	r1, r6
    4f92:	428b      	cmp	r3, r1
    4f94:	d202      	bcs.n	4f9c <_free_r+0xbc>
    4f96:	6892      	ldr	r2, [r2, #8]
    4f98:	4290      	cmp	r0, r2
    4f9a:	d1f8      	bne.n	4f8e <_free_r+0xae>
    4f9c:	68d3      	ldr	r3, [r2, #12]
    4f9e:	60e3      	str	r3, [r4, #12]
    4fa0:	60a2      	str	r2, [r4, #8]
    4fa2:	60d4      	str	r4, [r2, #12]
    4fa4:	609c      	str	r4, [r3, #8]
    4fa6:	1c28      	adds	r0, r5, #0
    4fa8:	f000 fc30 	bl	580c <__malloc_unlock>
    4fac:	bc1c      	pop	{r2, r3, r4}
    4fae:	4690      	mov	r8, r2
    4fb0:	4699      	mov	r9, r3
    4fb2:	46a2      	mov	sl, r4
    4fb4:	bcf0      	pop	{r4, r5, r6, r7}
    4fb6:	bc01      	pop	{r0}
    4fb8:	4700      	bx	r0
    4fba:	1c37      	adds	r7, r6, #0
    4fbc:	6890      	ldr	r0, [r2, #8]
    4fbe:	3708      	adds	r7, #8
    4fc0:	42b8      	cmp	r0, r7
    4fc2:	d1c6      	bne.n	4f52 <_free_r+0x72>
    4fc4:	4319      	orrs	r1, r3
    4fc6:	60c4      	str	r4, [r0, #12]
    4fc8:	6084      	str	r4, [r0, #8]
    4fca:	60e0      	str	r0, [r4, #12]
    4fcc:	60a0      	str	r0, [r4, #8]
    4fce:	6061      	str	r1, [r4, #4]
    4fd0:	50e3      	str	r3, [r4, r3]
    4fd2:	e7e8      	b.n	4fa6 <_free_r+0xc6>
    4fd4:	08db      	lsrs	r3, r3, #3
    4fd6:	1099      	asrs	r1, r3, #2
    4fd8:	408a      	lsls	r2, r1
    4fda:	6871      	ldr	r1, [r6, #4]
    4fdc:	00db      	lsls	r3, r3, #3
    4fde:	430a      	orrs	r2, r1
    4fe0:	6072      	str	r2, [r6, #4]
    4fe2:	18f6      	adds	r6, r6, r3
    4fe4:	68b3      	ldr	r3, [r6, #8]
    4fe6:	60e6      	str	r6, [r4, #12]
    4fe8:	60a3      	str	r3, [r4, #8]
    4fea:	60dc      	str	r4, [r3, #12]
    4fec:	60b4      	str	r4, [r6, #8]
    4fee:	e7da      	b.n	4fa6 <_free_r+0xc6>
    4ff0:	4642      	mov	r2, r8
    4ff2:	18fb      	adds	r3, r7, r3
    4ff4:	420a      	tst	r2, r1
    4ff6:	d106      	bne.n	5006 <_free_r+0x126>
    4ff8:	6822      	ldr	r2, [r4, #0]
    4ffa:	1aa4      	subs	r4, r4, r2
    4ffc:	68a1      	ldr	r1, [r4, #8]
    4ffe:	189b      	adds	r3, r3, r2
    5000:	68e2      	ldr	r2, [r4, #12]
    5002:	60ca      	str	r2, [r1, #12]
    5004:	6091      	str	r1, [r2, #8]
    5006:	2201      	movs	r2, #1
    5008:	431a      	orrs	r2, r3
    500a:	6062      	str	r2, [r4, #4]
    500c:	4a1b      	ldr	r2, [pc, #108]	; (507c <_free_r+0x19c>)
    500e:	6812      	ldr	r2, [r2, #0]
    5010:	60b4      	str	r4, [r6, #8]
    5012:	4293      	cmp	r3, r2
    5014:	d3c7      	bcc.n	4fa6 <_free_r+0xc6>
    5016:	4b1a      	ldr	r3, [pc, #104]	; (5080 <_free_r+0x1a0>)
    5018:	1c28      	adds	r0, r5, #0
    501a:	6819      	ldr	r1, [r3, #0]
    501c:	f7ff ff0e 	bl	4e3c <_malloc_trim_r>
    5020:	e7c1      	b.n	4fa6 <_free_r+0xc6>
    5022:	2a14      	cmp	r2, #20
    5024:	d80c      	bhi.n	5040 <_free_r+0x160>
    5026:	1c11      	adds	r1, r2, #0
    5028:	315b      	adds	r1, #91	; 0x5b
    502a:	00c8      	lsls	r0, r1, #3
    502c:	e7a5      	b.n	4f7a <_free_r+0x9a>
    502e:	1089      	asrs	r1, r1, #2
    5030:	2301      	movs	r3, #1
    5032:	408b      	lsls	r3, r1
    5034:	1c19      	adds	r1, r3, #0
    5036:	6873      	ldr	r3, [r6, #4]
    5038:	4319      	orrs	r1, r3
    503a:	6071      	str	r1, [r6, #4]
    503c:	1c13      	adds	r3, r2, #0
    503e:	e7ae      	b.n	4f9e <_free_r+0xbe>
    5040:	2a54      	cmp	r2, #84	; 0x54
    5042:	d803      	bhi.n	504c <_free_r+0x16c>
    5044:	0b19      	lsrs	r1, r3, #12
    5046:	316e      	adds	r1, #110	; 0x6e
    5048:	00c8      	lsls	r0, r1, #3
    504a:	e796      	b.n	4f7a <_free_r+0x9a>
    504c:	21aa      	movs	r1, #170	; 0xaa
    504e:	0049      	lsls	r1, r1, #1
    5050:	428a      	cmp	r2, r1
    5052:	d803      	bhi.n	505c <_free_r+0x17c>
    5054:	0bd9      	lsrs	r1, r3, #15
    5056:	3177      	adds	r1, #119	; 0x77
    5058:	00c8      	lsls	r0, r1, #3
    505a:	e78e      	b.n	4f7a <_free_r+0x9a>
    505c:	4909      	ldr	r1, [pc, #36]	; (5084 <_free_r+0x1a4>)
    505e:	428a      	cmp	r2, r1
    5060:	d803      	bhi.n	506a <_free_r+0x18a>
    5062:	0c99      	lsrs	r1, r3, #18
    5064:	317c      	adds	r1, #124	; 0x7c
    5066:	00c8      	lsls	r0, r1, #3
    5068:	e787      	b.n	4f7a <_free_r+0x9a>
    506a:	20fc      	movs	r0, #252	; 0xfc
    506c:	0080      	lsls	r0, r0, #2
    506e:	217e      	movs	r1, #126	; 0x7e
    5070:	e783      	b.n	4f7a <_free_r+0x9a>
    5072:	46c0      	nop			; (mov r8, r8)
    5074:	40000430 	.word	0x40000430
    5078:	000001ff 	.word	0x000001ff
    507c:	4000083c 	.word	0x4000083c
    5080:	400008c8 	.word	0x400008c8
    5084:	00000554 	.word	0x00000554

00005088 <_fwalk>:
    5088:	b5f0      	push	{r4, r5, r6, r7, lr}
    508a:	4647      	mov	r7, r8
    508c:	b480      	push	{r7}
    508e:	1c06      	adds	r6, r0, #0
    5090:	4688      	mov	r8, r1
    5092:	f7ff feaf 	bl	4df4 <__sfp_lock_acquire>
    5096:	22b8      	movs	r2, #184	; 0xb8
    5098:	0092      	lsls	r2, r2, #2
    509a:	18b6      	adds	r6, r6, r2
    509c:	1e37      	subs	r7, r6, #0
    509e:	d017      	beq.n	50d0 <_fwalk+0x48>
    50a0:	2700      	movs	r7, #0
    50a2:	6875      	ldr	r5, [r6, #4]
    50a4:	68b4      	ldr	r4, [r6, #8]
    50a6:	3d01      	subs	r5, #1
    50a8:	d501      	bpl.n	50ae <_fwalk+0x26>
    50aa:	e00e      	b.n	50ca <_fwalk+0x42>
    50ac:	3468      	adds	r4, #104	; 0x68
    50ae:	220c      	movs	r2, #12
    50b0:	5ea3      	ldrsh	r3, [r4, r2]
    50b2:	2b00      	cmp	r3, #0
    50b4:	d007      	beq.n	50c6 <_fwalk+0x3e>
    50b6:	220e      	movs	r2, #14
    50b8:	5ea3      	ldrsh	r3, [r4, r2]
    50ba:	3301      	adds	r3, #1
    50bc:	d003      	beq.n	50c6 <_fwalk+0x3e>
    50be:	1c20      	adds	r0, r4, #0
    50c0:	f000 f83e 	bl	5140 <_fwalk_reent+0x60>
    50c4:	4307      	orrs	r7, r0
    50c6:	3d01      	subs	r5, #1
    50c8:	d5f0      	bpl.n	50ac <_fwalk+0x24>
    50ca:	6836      	ldr	r6, [r6, #0]
    50cc:	2e00      	cmp	r6, #0
    50ce:	d1e8      	bne.n	50a2 <_fwalk+0x1a>
    50d0:	f7ff fe92 	bl	4df8 <__sfp_lock_release>
    50d4:	1c38      	adds	r0, r7, #0
    50d6:	bc04      	pop	{r2}
    50d8:	4690      	mov	r8, r2
    50da:	bcf0      	pop	{r4, r5, r6, r7}
    50dc:	bc02      	pop	{r1}
    50de:	4708      	bx	r1

000050e0 <_fwalk_reent>:
    50e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50e2:	464f      	mov	r7, r9
    50e4:	4646      	mov	r6, r8
    50e6:	b4c0      	push	{r6, r7}
    50e8:	4680      	mov	r8, r0
    50ea:	4689      	mov	r9, r1
    50ec:	f7ff fe82 	bl	4df4 <__sfp_lock_acquire>
    50f0:	22b8      	movs	r2, #184	; 0xb8
    50f2:	0092      	lsls	r2, r2, #2
    50f4:	1c16      	adds	r6, r2, #0
    50f6:	4446      	add	r6, r8
    50f8:	1e37      	subs	r7, r6, #0
    50fa:	d018      	beq.n	512e <_fwalk_reent+0x4e>
    50fc:	2700      	movs	r7, #0
    50fe:	6875      	ldr	r5, [r6, #4]
    5100:	68b4      	ldr	r4, [r6, #8]
    5102:	3d01      	subs	r5, #1
    5104:	d501      	bpl.n	510a <_fwalk_reent+0x2a>
    5106:	e00f      	b.n	5128 <_fwalk_reent+0x48>
    5108:	3468      	adds	r4, #104	; 0x68
    510a:	220c      	movs	r2, #12
    510c:	5ea3      	ldrsh	r3, [r4, r2]
    510e:	2b00      	cmp	r3, #0
    5110:	d008      	beq.n	5124 <_fwalk_reent+0x44>
    5112:	220e      	movs	r2, #14
    5114:	5ea3      	ldrsh	r3, [r4, r2]
    5116:	3301      	adds	r3, #1
    5118:	d004      	beq.n	5124 <_fwalk_reent+0x44>
    511a:	4640      	mov	r0, r8
    511c:	1c21      	adds	r1, r4, #0
    511e:	f000 f810 	bl	5142 <_fwalk_reent+0x62>
    5122:	4307      	orrs	r7, r0
    5124:	3d01      	subs	r5, #1
    5126:	d5ef      	bpl.n	5108 <_fwalk_reent+0x28>
    5128:	6836      	ldr	r6, [r6, #0]
    512a:	2e00      	cmp	r6, #0
    512c:	d1e7      	bne.n	50fe <_fwalk_reent+0x1e>
    512e:	f7ff fe63 	bl	4df8 <__sfp_lock_release>
    5132:	1c38      	adds	r0, r7, #0
    5134:	bc0c      	pop	{r2, r3}
    5136:	4690      	mov	r8, r2
    5138:	4699      	mov	r9, r3
    513a:	bcf8      	pop	{r3, r4, r5, r6, r7}
    513c:	bc02      	pop	{r1}
    513e:	4708      	bx	r1
    5140:	4740      	bx	r8
    5142:	4748      	bx	r9

00005144 <malloc>:
    5144:	b508      	push	{r3, lr}
    5146:	4b04      	ldr	r3, [pc, #16]	; (5158 <malloc+0x14>)
    5148:	1c01      	adds	r1, r0, #0
    514a:	6818      	ldr	r0, [r3, #0]
    514c:	f000 f812 	bl	5174 <_malloc_r>
    5150:	bc08      	pop	{r3}
    5152:	bc02      	pop	{r1}
    5154:	4708      	bx	r1
    5156:	46c0      	nop			; (mov r8, r8)
    5158:	40000000 	.word	0x40000000

0000515c <free>:
    515c:	b508      	push	{r3, lr}
    515e:	4b04      	ldr	r3, [pc, #16]	; (5170 <free+0x14>)
    5160:	1c01      	adds	r1, r0, #0
    5162:	6818      	ldr	r0, [r3, #0]
    5164:	f7ff febc 	bl	4ee0 <_free_r>
    5168:	bc08      	pop	{r3}
    516a:	bc01      	pop	{r0}
    516c:	4700      	bx	r0
    516e:	46c0      	nop			; (mov r8, r8)
    5170:	40000000 	.word	0x40000000

00005174 <_malloc_r>:
    5174:	b5f0      	push	{r4, r5, r6, r7, lr}
    5176:	465f      	mov	r7, fp
    5178:	4656      	mov	r6, sl
    517a:	464d      	mov	r5, r9
    517c:	4644      	mov	r4, r8
    517e:	b4f0      	push	{r4, r5, r6, r7}
    5180:	1c0d      	adds	r5, r1, #0
    5182:	350b      	adds	r5, #11
    5184:	b083      	sub	sp, #12
    5186:	1c07      	adds	r7, r0, #0
    5188:	2d16      	cmp	r5, #22
    518a:	d92e      	bls.n	51ea <_malloc_r+0x76>
    518c:	2307      	movs	r3, #7
    518e:	439d      	bics	r5, r3
    5190:	0feb      	lsrs	r3, r5, #31
    5192:	428d      	cmp	r5, r1
    5194:	d32d      	bcc.n	51f2 <_malloc_r+0x7e>
    5196:	2b00      	cmp	r3, #0
    5198:	d12b      	bne.n	51f2 <_malloc_r+0x7e>
    519a:	1c38      	adds	r0, r7, #0
    519c:	f000 fb34 	bl	5808 <__malloc_lock>
    51a0:	4b8c      	ldr	r3, [pc, #560]	; (53d4 <_malloc_r+0x260>)
    51a2:	429d      	cmp	r5, r3
    51a4:	d829      	bhi.n	51fa <_malloc_r+0x86>
    51a6:	08ea      	lsrs	r2, r5, #3
    51a8:	4e8b      	ldr	r6, [pc, #556]	; (53d8 <_malloc_r+0x264>)
    51aa:	00d3      	lsls	r3, r2, #3
    51ac:	18f3      	adds	r3, r6, r3
    51ae:	68dc      	ldr	r4, [r3, #12]
    51b0:	429c      	cmp	r4, r3
    51b2:	d100      	bne.n	51b6 <_malloc_r+0x42>
    51b4:	e1b8      	b.n	5528 <_malloc_r+0x3b4>
    51b6:	6863      	ldr	r3, [r4, #4]
    51b8:	2203      	movs	r2, #3
    51ba:	68a1      	ldr	r1, [r4, #8]
    51bc:	4393      	bics	r3, r2
    51be:	68e2      	ldr	r2, [r4, #12]
    51c0:	18e3      	adds	r3, r4, r3
    51c2:	60ca      	str	r2, [r1, #12]
    51c4:	6091      	str	r1, [r2, #8]
    51c6:	685a      	ldr	r2, [r3, #4]
    51c8:	2101      	movs	r1, #1
    51ca:	430a      	orrs	r2, r1
    51cc:	1c38      	adds	r0, r7, #0
    51ce:	605a      	str	r2, [r3, #4]
    51d0:	f000 fb1c 	bl	580c <__malloc_unlock>
    51d4:	1c20      	adds	r0, r4, #0
    51d6:	3008      	adds	r0, #8
    51d8:	b003      	add	sp, #12
    51da:	bc3c      	pop	{r2, r3, r4, r5}
    51dc:	4690      	mov	r8, r2
    51de:	4699      	mov	r9, r3
    51e0:	46a2      	mov	sl, r4
    51e2:	46ab      	mov	fp, r5
    51e4:	bcf0      	pop	{r4, r5, r6, r7}
    51e6:	bc02      	pop	{r1}
    51e8:	4708      	bx	r1
    51ea:	2510      	movs	r5, #16
    51ec:	2300      	movs	r3, #0
    51ee:	428d      	cmp	r5, r1
    51f0:	d2d1      	bcs.n	5196 <_malloc_r+0x22>
    51f2:	230c      	movs	r3, #12
    51f4:	603b      	str	r3, [r7, #0]
    51f6:	2000      	movs	r0, #0
    51f8:	e7ee      	b.n	51d8 <_malloc_r+0x64>
    51fa:	0a6b      	lsrs	r3, r5, #9
    51fc:	2b00      	cmp	r3, #0
    51fe:	d02b      	beq.n	5258 <_malloc_r+0xe4>
    5200:	2b04      	cmp	r3, #4
    5202:	d900      	bls.n	5206 <_malloc_r+0x92>
    5204:	e179      	b.n	54fa <_malloc_r+0x386>
    5206:	09ab      	lsrs	r3, r5, #6
    5208:	3338      	adds	r3, #56	; 0x38
    520a:	4699      	mov	r9, r3
    520c:	00d9      	lsls	r1, r3, #3
    520e:	4e72      	ldr	r6, [pc, #456]	; (53d8 <_malloc_r+0x264>)
    5210:	1871      	adds	r1, r6, r1
    5212:	68cc      	ldr	r4, [r1, #12]
    5214:	42a1      	cmp	r1, r4
    5216:	d026      	beq.n	5266 <_malloc_r+0xf2>
    5218:	6862      	ldr	r2, [r4, #4]
    521a:	2003      	movs	r0, #3
    521c:	4382      	bics	r2, r0
    521e:	1b53      	subs	r3, r2, r5
    5220:	2b0f      	cmp	r3, #15
    5222:	dd08      	ble.n	5236 <_malloc_r+0xc2>
    5224:	e01c      	b.n	5260 <_malloc_r+0xec>
    5226:	68e4      	ldr	r4, [r4, #12]
    5228:	42a1      	cmp	r1, r4
    522a:	d01c      	beq.n	5266 <_malloc_r+0xf2>
    522c:	6862      	ldr	r2, [r4, #4]
    522e:	4382      	bics	r2, r0
    5230:	1b53      	subs	r3, r2, r5
    5232:	2b0f      	cmp	r3, #15
    5234:	dc14      	bgt.n	5260 <_malloc_r+0xec>
    5236:	2b00      	cmp	r3, #0
    5238:	dbf5      	blt.n	5226 <_malloc_r+0xb2>
    523a:	68e3      	ldr	r3, [r4, #12]
    523c:	68a1      	ldr	r1, [r4, #8]
    523e:	60cb      	str	r3, [r1, #12]
    5240:	6099      	str	r1, [r3, #8]
    5242:	18a2      	adds	r2, r4, r2
    5244:	6853      	ldr	r3, [r2, #4]
    5246:	2101      	movs	r1, #1
    5248:	430b      	orrs	r3, r1
    524a:	1c38      	adds	r0, r7, #0
    524c:	6053      	str	r3, [r2, #4]
    524e:	f000 fadd 	bl	580c <__malloc_unlock>
    5252:	1c20      	adds	r0, r4, #0
    5254:	3008      	adds	r0, #8
    5256:	e7bf      	b.n	51d8 <_malloc_r+0x64>
    5258:	08e8      	lsrs	r0, r5, #3
    525a:	4681      	mov	r9, r0
    525c:	00c1      	lsls	r1, r0, #3
    525e:	e7d6      	b.n	520e <_malloc_r+0x9a>
    5260:	2301      	movs	r3, #1
    5262:	425b      	negs	r3, r3
    5264:	4499      	add	r9, r3
    5266:	2401      	movs	r4, #1
    5268:	44a1      	add	r9, r4
    526a:	1c31      	adds	r1, r6, #0
    526c:	3108      	adds	r1, #8
    526e:	688c      	ldr	r4, [r1, #8]
    5270:	42a1      	cmp	r1, r4
    5272:	d100      	bne.n	5276 <_malloc_r+0x102>
    5274:	e085      	b.n	5382 <_malloc_r+0x20e>
    5276:	6862      	ldr	r2, [r4, #4]
    5278:	2303      	movs	r3, #3
    527a:	439a      	bics	r2, r3
    527c:	1b53      	subs	r3, r2, r5
    527e:	4693      	mov	fp, r2
    5280:	2b0f      	cmp	r3, #15
    5282:	dd00      	ble.n	5286 <_malloc_r+0x112>
    5284:	e142      	b.n	550c <_malloc_r+0x398>
    5286:	60c9      	str	r1, [r1, #12]
    5288:	6089      	str	r1, [r1, #8]
    528a:	2b00      	cmp	r3, #0
    528c:	db00      	blt.n	5290 <_malloc_r+0x11c>
    528e:	e09d      	b.n	53cc <_malloc_r+0x258>
    5290:	4b52      	ldr	r3, [pc, #328]	; (53dc <_malloc_r+0x268>)
    5292:	459b      	cmp	fp, r3
    5294:	d851      	bhi.n	533a <_malloc_r+0x1c6>
    5296:	08d2      	lsrs	r2, r2, #3
    5298:	1093      	asrs	r3, r2, #2
    529a:	2001      	movs	r0, #1
    529c:	4098      	lsls	r0, r3
    529e:	00d2      	lsls	r2, r2, #3
    52a0:	6873      	ldr	r3, [r6, #4]
    52a2:	18b2      	adds	r2, r6, r2
    52a4:	4303      	orrs	r3, r0
    52a6:	6890      	ldr	r0, [r2, #8]
    52a8:	60e2      	str	r2, [r4, #12]
    52aa:	60a0      	str	r0, [r4, #8]
    52ac:	60c4      	str	r4, [r0, #12]
    52ae:	6094      	str	r4, [r2, #8]
    52b0:	464c      	mov	r4, r9
    52b2:	10a2      	asrs	r2, r4, #2
    52b4:	2001      	movs	r0, #1
    52b6:	4090      	lsls	r0, r2
    52b8:	6073      	str	r3, [r6, #4]
    52ba:	4298      	cmp	r0, r3
    52bc:	d868      	bhi.n	5390 <_malloc_r+0x21c>
    52be:	4218      	tst	r0, r3
    52c0:	d10c      	bne.n	52dc <_malloc_r+0x168>
    52c2:	2203      	movs	r2, #3
    52c4:	4394      	bics	r4, r2
    52c6:	1c22      	adds	r2, r4, #0
    52c8:	3204      	adds	r2, #4
    52ca:	0040      	lsls	r0, r0, #1
    52cc:	4691      	mov	r9, r2
    52ce:	4218      	tst	r0, r3
    52d0:	d104      	bne.n	52dc <_malloc_r+0x168>
    52d2:	2204      	movs	r2, #4
    52d4:	0040      	lsls	r0, r0, #1
    52d6:	4491      	add	r9, r2
    52d8:	4203      	tst	r3, r0
    52da:	d0fa      	beq.n	52d2 <_malloc_r+0x15e>
    52dc:	2303      	movs	r3, #3
    52de:	4698      	mov	r8, r3
    52e0:	464c      	mov	r4, r9
    52e2:	00e3      	lsls	r3, r4, #3
    52e4:	199b      	adds	r3, r3, r6
    52e6:	469b      	mov	fp, r3
    52e8:	469c      	mov	ip, r3
    52ea:	46ca      	mov	sl, r9
    52ec:	4662      	mov	r2, ip
    52ee:	68d4      	ldr	r4, [r2, #12]
    52f0:	45a4      	cmp	ip, r4
    52f2:	d107      	bne.n	5304 <_malloc_r+0x190>
    52f4:	e10f      	b.n	5516 <_malloc_r+0x3a2>
    52f6:	2b00      	cmp	r3, #0
    52f8:	db00      	blt.n	52fc <_malloc_r+0x188>
    52fa:	e11e      	b.n	553a <_malloc_r+0x3c6>
    52fc:	68e4      	ldr	r4, [r4, #12]
    52fe:	45a4      	cmp	ip, r4
    5300:	d100      	bne.n	5304 <_malloc_r+0x190>
    5302:	e108      	b.n	5516 <_malloc_r+0x3a2>
    5304:	6862      	ldr	r2, [r4, #4]
    5306:	4643      	mov	r3, r8
    5308:	439a      	bics	r2, r3
    530a:	1b53      	subs	r3, r2, r5
    530c:	2b0f      	cmp	r3, #15
    530e:	ddf2      	ble.n	52f6 <_malloc_r+0x182>
    5310:	2001      	movs	r0, #1
    5312:	1962      	adds	r2, r4, r5
    5314:	4305      	orrs	r5, r0
    5316:	68a6      	ldr	r6, [r4, #8]
    5318:	6065      	str	r5, [r4, #4]
    531a:	68e5      	ldr	r5, [r4, #12]
    531c:	60f5      	str	r5, [r6, #12]
    531e:	60ae      	str	r6, [r5, #8]
    5320:	4318      	orrs	r0, r3
    5322:	60ca      	str	r2, [r1, #12]
    5324:	608a      	str	r2, [r1, #8]
    5326:	6050      	str	r0, [r2, #4]
    5328:	60d1      	str	r1, [r2, #12]
    532a:	6091      	str	r1, [r2, #8]
    532c:	1c38      	adds	r0, r7, #0
    532e:	50d3      	str	r3, [r2, r3]
    5330:	f000 fa6c 	bl	580c <__malloc_unlock>
    5334:	1c20      	adds	r0, r4, #0
    5336:	3008      	adds	r0, #8
    5338:	e74e      	b.n	51d8 <_malloc_r+0x64>
    533a:	0a53      	lsrs	r3, r2, #9
    533c:	2b04      	cmp	r3, #4
    533e:	d900      	bls.n	5342 <_malloc_r+0x1ce>
    5340:	e10e      	b.n	5560 <_malloc_r+0x3ec>
    5342:	0990      	lsrs	r0, r2, #6
    5344:	3038      	adds	r0, #56	; 0x38
    5346:	4680      	mov	r8, r0
    5348:	4640      	mov	r0, r8
    534a:	00c3      	lsls	r3, r0, #3
    534c:	199b      	adds	r3, r3, r6
    534e:	469c      	mov	ip, r3
    5350:	689b      	ldr	r3, [r3, #8]
    5352:	4563      	cmp	r3, ip
    5354:	d100      	bne.n	5358 <_malloc_r+0x1e4>
    5356:	e117      	b.n	5588 <_malloc_r+0x414>
    5358:	685a      	ldr	r2, [r3, #4]
    535a:	2003      	movs	r0, #3
    535c:	4382      	bics	r2, r0
    535e:	4680      	mov	r8, r0
    5360:	4593      	cmp	fp, r2
    5362:	d306      	bcc.n	5372 <_malloc_r+0x1fe>
    5364:	e008      	b.n	5378 <_malloc_r+0x204>
    5366:	6858      	ldr	r0, [r3, #4]
    5368:	1c02      	adds	r2, r0, #0
    536a:	4640      	mov	r0, r8
    536c:	4382      	bics	r2, r0
    536e:	4593      	cmp	fp, r2
    5370:	d202      	bcs.n	5378 <_malloc_r+0x204>
    5372:	689b      	ldr	r3, [r3, #8]
    5374:	459c      	cmp	ip, r3
    5376:	d1f6      	bne.n	5366 <_malloc_r+0x1f2>
    5378:	68da      	ldr	r2, [r3, #12]
    537a:	60e2      	str	r2, [r4, #12]
    537c:	60a3      	str	r3, [r4, #8]
    537e:	60dc      	str	r4, [r3, #12]
    5380:	6094      	str	r4, [r2, #8]
    5382:	464c      	mov	r4, r9
    5384:	10a2      	asrs	r2, r4, #2
    5386:	2001      	movs	r0, #1
    5388:	6873      	ldr	r3, [r6, #4]
    538a:	4090      	lsls	r0, r2
    538c:	4298      	cmp	r0, r3
    538e:	d996      	bls.n	52be <_malloc_r+0x14a>
    5390:	68b4      	ldr	r4, [r6, #8]
    5392:	6863      	ldr	r3, [r4, #4]
    5394:	2203      	movs	r2, #3
    5396:	4393      	bics	r3, r2
    5398:	469a      	mov	sl, r3
    539a:	1b5b      	subs	r3, r3, r5
    539c:	0fd8      	lsrs	r0, r3, #31
    539e:	3a03      	subs	r2, #3
    53a0:	210f      	movs	r1, #15
    53a2:	4299      	cmp	r1, r3
    53a4:	4142      	adcs	r2, r0
    53a6:	0612      	lsls	r2, r2, #24
    53a8:	2a00      	cmp	r2, #0
    53aa:	d119      	bne.n	53e0 <_malloc_r+0x26c>
    53ac:	45aa      	cmp	sl, r5
    53ae:	d317      	bcc.n	53e0 <_malloc_r+0x26c>
    53b0:	2201      	movs	r2, #1
    53b2:	1c11      	adds	r1, r2, #0
    53b4:	4329      	orrs	r1, r5
    53b6:	4313      	orrs	r3, r2
    53b8:	1965      	adds	r5, r4, r5
    53ba:	6061      	str	r1, [r4, #4]
    53bc:	1c38      	adds	r0, r7, #0
    53be:	60b5      	str	r5, [r6, #8]
    53c0:	606b      	str	r3, [r5, #4]
    53c2:	f000 fa23 	bl	580c <__malloc_unlock>
    53c6:	1c20      	adds	r0, r4, #0
    53c8:	3008      	adds	r0, #8
    53ca:	e705      	b.n	51d8 <_malloc_r+0x64>
    53cc:	1c22      	adds	r2, r4, #0
    53ce:	445a      	add	r2, fp
    53d0:	e738      	b.n	5244 <_malloc_r+0xd0>
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	000001f7 	.word	0x000001f7
    53d8:	40000430 	.word	0x40000430
    53dc:	000001ff 	.word	0x000001ff
    53e0:	48a3      	ldr	r0, [pc, #652]	; (5670 <_malloc_r+0x4fc>)
    53e2:	6803      	ldr	r3, [r0, #0]
    53e4:	49a3      	ldr	r1, [pc, #652]	; (5674 <_malloc_r+0x500>)
    53e6:	3310      	adds	r3, #16
    53e8:	195b      	adds	r3, r3, r5
    53ea:	469b      	mov	fp, r3
    53ec:	688b      	ldr	r3, [r1, #8]
    53ee:	4680      	mov	r8, r0
    53f0:	4689      	mov	r9, r1
    53f2:	3301      	adds	r3, #1
    53f4:	d005      	beq.n	5402 <_malloc_r+0x28e>
    53f6:	4aa0      	ldr	r2, [pc, #640]	; (5678 <_malloc_r+0x504>)
    53f8:	1c13      	adds	r3, r2, #0
    53fa:	445b      	add	r3, fp
    53fc:	0b1b      	lsrs	r3, r3, #12
    53fe:	031b      	lsls	r3, r3, #12
    5400:	469b      	mov	fp, r3
    5402:	1c38      	adds	r0, r7, #0
    5404:	4659      	mov	r1, fp
    5406:	f7fc fe13 	bl	2030 <_sbrk_r>
    540a:	9001      	str	r0, [sp, #4]
    540c:	1c43      	adds	r3, r0, #1
    540e:	d05c      	beq.n	54ca <_malloc_r+0x356>
    5410:	1c22      	adds	r2, r4, #0
    5412:	4452      	add	r2, sl
    5414:	4282      	cmp	r2, r0
    5416:	d900      	bls.n	541a <_malloc_r+0x2a6>
    5418:	e0a7      	b.n	556a <_malloc_r+0x3f6>
    541a:	4641      	mov	r1, r8
    541c:	684b      	ldr	r3, [r1, #4]
    541e:	445b      	add	r3, fp
    5420:	604b      	str	r3, [r1, #4]
    5422:	4282      	cmp	r2, r0
    5424:	d100      	bne.n	5428 <_malloc_r+0x2b4>
    5426:	e0f4      	b.n	5612 <_malloc_r+0x49e>
    5428:	4649      	mov	r1, r9
    542a:	6889      	ldr	r1, [r1, #8]
    542c:	3101      	adds	r1, #1
    542e:	d100      	bne.n	5432 <_malloc_r+0x2be>
    5430:	e0fa      	b.n	5628 <_malloc_r+0x4b4>
    5432:	18c3      	adds	r3, r0, r3
    5434:	1a9a      	subs	r2, r3, r2
    5436:	4643      	mov	r3, r8
    5438:	605a      	str	r2, [r3, #4]
    543a:	2307      	movs	r3, #7
    543c:	4003      	ands	r3, r0
    543e:	d100      	bne.n	5442 <_malloc_r+0x2ce>
    5440:	e09f      	b.n	5582 <_malloc_r+0x40e>
    5442:	2208      	movs	r2, #8
    5444:	1ad2      	subs	r2, r2, r3
    5446:	1880      	adds	r0, r0, r2
    5448:	9001      	str	r0, [sp, #4]
    544a:	2080      	movs	r0, #128	; 0x80
    544c:	0140      	lsls	r0, r0, #5
    544e:	1812      	adds	r2, r2, r0
    5450:	9901      	ldr	r1, [sp, #4]
    5452:	1c0b      	adds	r3, r1, #0
    5454:	445b      	add	r3, fp
    5456:	051b      	lsls	r3, r3, #20
    5458:	0d1b      	lsrs	r3, r3, #20
    545a:	1ad3      	subs	r3, r2, r3
    545c:	1c38      	adds	r0, r7, #0
    545e:	1c19      	adds	r1, r3, #0
    5460:	4699      	mov	r9, r3
    5462:	f7fc fde5 	bl	2030 <_sbrk_r>
    5466:	1c42      	adds	r2, r0, #1
    5468:	d100      	bne.n	546c <_malloc_r+0x2f8>
    546a:	e0e8      	b.n	563e <_malloc_r+0x4ca>
    546c:	9b01      	ldr	r3, [sp, #4]
    546e:	1ac0      	subs	r0, r0, r3
    5470:	4448      	add	r0, r9
    5472:	2301      	movs	r3, #1
    5474:	4318      	orrs	r0, r3
    5476:	4642      	mov	r2, r8
    5478:	6853      	ldr	r3, [r2, #4]
    547a:	9901      	ldr	r1, [sp, #4]
    547c:	444b      	add	r3, r9
    547e:	6053      	str	r3, [r2, #4]
    5480:	60b1      	str	r1, [r6, #8]
    5482:	6048      	str	r0, [r1, #4]
    5484:	42b4      	cmp	r4, r6
    5486:	d015      	beq.n	54b4 <_malloc_r+0x340>
    5488:	220f      	movs	r2, #15
    548a:	4592      	cmp	sl, r2
    548c:	d800      	bhi.n	5490 <_malloc_r+0x31c>
    548e:	e094      	b.n	55ba <_malloc_r+0x446>
    5490:	200c      	movs	r0, #12
    5492:	4240      	negs	r0, r0
    5494:	1c02      	adds	r2, r0, #0
    5496:	2107      	movs	r1, #7
    5498:	6860      	ldr	r0, [r4, #4]
    549a:	4452      	add	r2, sl
    549c:	438a      	bics	r2, r1
    549e:	3906      	subs	r1, #6
    54a0:	4001      	ands	r1, r0
    54a2:	4311      	orrs	r1, r2
    54a4:	6061      	str	r1, [r4, #4]
    54a6:	2005      	movs	r0, #5
    54a8:	18a1      	adds	r1, r4, r2
    54aa:	6048      	str	r0, [r1, #4]
    54ac:	6088      	str	r0, [r1, #8]
    54ae:	2a0f      	cmp	r2, #15
    54b0:	d900      	bls.n	54b4 <_malloc_r+0x340>
    54b2:	e0bc      	b.n	562e <_malloc_r+0x4ba>
    54b4:	4644      	mov	r4, r8
    54b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    54b8:	4293      	cmp	r3, r2
    54ba:	d900      	bls.n	54be <_malloc_r+0x34a>
    54bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    54be:	4640      	mov	r0, r8
    54c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
    54c2:	4293      	cmp	r3, r2
    54c4:	d901      	bls.n	54ca <_malloc_r+0x356>
    54c6:	4641      	mov	r1, r8
    54c8:	630b      	str	r3, [r1, #48]	; 0x30
    54ca:	68b4      	ldr	r4, [r6, #8]
    54cc:	6862      	ldr	r2, [r4, #4]
    54ce:	2303      	movs	r3, #3
    54d0:	439a      	bics	r2, r3
    54d2:	4692      	mov	sl, r2
    54d4:	4652      	mov	r2, sl
    54d6:	1b53      	subs	r3, r2, r5
    54d8:	2100      	movs	r1, #0
    54da:	0fd8      	lsrs	r0, r3, #31
    54dc:	220f      	movs	r2, #15
    54de:	4688      	mov	r8, r1
    54e0:	429a      	cmp	r2, r3
    54e2:	4141      	adcs	r1, r0
    54e4:	0609      	lsls	r1, r1, #24
    54e6:	4541      	cmp	r1, r8
    54e8:	d102      	bne.n	54f0 <_malloc_r+0x37c>
    54ea:	45aa      	cmp	sl, r5
    54ec:	d300      	bcc.n	54f0 <_malloc_r+0x37c>
    54ee:	e75f      	b.n	53b0 <_malloc_r+0x23c>
    54f0:	1c38      	adds	r0, r7, #0
    54f2:	f000 f98b 	bl	580c <__malloc_unlock>
    54f6:	2000      	movs	r0, #0
    54f8:	e66e      	b.n	51d8 <_malloc_r+0x64>
    54fa:	2b14      	cmp	r3, #20
    54fc:	d92c      	bls.n	5558 <_malloc_r+0x3e4>
    54fe:	2b54      	cmp	r3, #84	; 0x54
    5500:	d836      	bhi.n	5570 <_malloc_r+0x3fc>
    5502:	0b2b      	lsrs	r3, r5, #12
    5504:	336e      	adds	r3, #110	; 0x6e
    5506:	4699      	mov	r9, r3
    5508:	00d9      	lsls	r1, r3, #3
    550a:	e680      	b.n	520e <_malloc_r+0x9a>
    550c:	2001      	movs	r0, #1
    550e:	1962      	adds	r2, r4, r5
    5510:	4305      	orrs	r5, r0
    5512:	6065      	str	r5, [r4, #4]
    5514:	e704      	b.n	5320 <_malloc_r+0x1ac>
    5516:	2401      	movs	r4, #1
    5518:	44a2      	add	sl, r4
    551a:	4652      	mov	r2, sl
    551c:	4643      	mov	r3, r8
    551e:	421a      	tst	r2, r3
    5520:	d051      	beq.n	55c6 <_malloc_r+0x452>
    5522:	2408      	movs	r4, #8
    5524:	44a4      	add	ip, r4
    5526:	e6e1      	b.n	52ec <_malloc_r+0x178>
    5528:	1c23      	adds	r3, r4, #0
    552a:	6964      	ldr	r4, [r4, #20]
    552c:	3202      	adds	r2, #2
    552e:	3308      	adds	r3, #8
    5530:	4691      	mov	r9, r2
    5532:	42a3      	cmp	r3, r4
    5534:	d100      	bne.n	5538 <_malloc_r+0x3c4>
    5536:	e698      	b.n	526a <_malloc_r+0xf6>
    5538:	e63d      	b.n	51b6 <_malloc_r+0x42>
    553a:	18a2      	adds	r2, r4, r2
    553c:	6853      	ldr	r3, [r2, #4]
    553e:	2101      	movs	r1, #1
    5540:	430b      	orrs	r3, r1
    5542:	6053      	str	r3, [r2, #4]
    5544:	68e3      	ldr	r3, [r4, #12]
    5546:	68a2      	ldr	r2, [r4, #8]
    5548:	1c38      	adds	r0, r7, #0
    554a:	60d3      	str	r3, [r2, #12]
    554c:	609a      	str	r2, [r3, #8]
    554e:	f000 f95d 	bl	580c <__malloc_unlock>
    5552:	1c20      	adds	r0, r4, #0
    5554:	3008      	adds	r0, #8
    5556:	e63f      	b.n	51d8 <_malloc_r+0x64>
    5558:	335b      	adds	r3, #91	; 0x5b
    555a:	4699      	mov	r9, r3
    555c:	00d9      	lsls	r1, r3, #3
    555e:	e656      	b.n	520e <_malloc_r+0x9a>
    5560:	2b14      	cmp	r3, #20
    5562:	d823      	bhi.n	55ac <_malloc_r+0x438>
    5564:	335b      	adds	r3, #91	; 0x5b
    5566:	4698      	mov	r8, r3
    5568:	e6ee      	b.n	5348 <_malloc_r+0x1d4>
    556a:	42b4      	cmp	r4, r6
    556c:	d1ad      	bne.n	54ca <_malloc_r+0x356>
    556e:	e754      	b.n	541a <_malloc_r+0x2a6>
    5570:	22aa      	movs	r2, #170	; 0xaa
    5572:	0052      	lsls	r2, r2, #1
    5574:	4293      	cmp	r3, r2
    5576:	d811      	bhi.n	559c <_malloc_r+0x428>
    5578:	0beb      	lsrs	r3, r5, #15
    557a:	3377      	adds	r3, #119	; 0x77
    557c:	4699      	mov	r9, r3
    557e:	00d9      	lsls	r1, r3, #3
    5580:	e645      	b.n	520e <_malloc_r+0x9a>
    5582:	2280      	movs	r2, #128	; 0x80
    5584:	0152      	lsls	r2, r2, #5
    5586:	e763      	b.n	5450 <_malloc_r+0x2dc>
    5588:	4642      	mov	r2, r8
    558a:	1090      	asrs	r0, r2, #2
    558c:	2201      	movs	r2, #1
    558e:	4082      	lsls	r2, r0
    5590:	1c10      	adds	r0, r2, #0
    5592:	6872      	ldr	r2, [r6, #4]
    5594:	4302      	orrs	r2, r0
    5596:	6072      	str	r2, [r6, #4]
    5598:	1c1a      	adds	r2, r3, #0
    559a:	e6ee      	b.n	537a <_malloc_r+0x206>
    559c:	4a37      	ldr	r2, [pc, #220]	; (567c <_malloc_r+0x508>)
    559e:	4293      	cmp	r3, r2
    55a0:	d829      	bhi.n	55f6 <_malloc_r+0x482>
    55a2:	0cab      	lsrs	r3, r5, #18
    55a4:	337c      	adds	r3, #124	; 0x7c
    55a6:	4699      	mov	r9, r3
    55a8:	00d9      	lsls	r1, r3, #3
    55aa:	e630      	b.n	520e <_malloc_r+0x9a>
    55ac:	2b54      	cmp	r3, #84	; 0x54
    55ae:	d827      	bhi.n	5600 <_malloc_r+0x48c>
    55b0:	465b      	mov	r3, fp
    55b2:	0b18      	lsrs	r0, r3, #12
    55b4:	306e      	adds	r0, #110	; 0x6e
    55b6:	4680      	mov	r8, r0
    55b8:	e6c6      	b.n	5348 <_malloc_r+0x1d4>
    55ba:	2301      	movs	r3, #1
    55bc:	604b      	str	r3, [r1, #4]
    55be:	3b01      	subs	r3, #1
    55c0:	1c0c      	adds	r4, r1, #0
    55c2:	469a      	mov	sl, r3
    55c4:	e786      	b.n	54d4 <_malloc_r+0x360>
    55c6:	465b      	mov	r3, fp
    55c8:	464c      	mov	r4, r9
    55ca:	e000      	b.n	55ce <_malloc_r+0x45a>
    55cc:	3c01      	subs	r4, #1
    55ce:	4642      	mov	r2, r8
    55d0:	4214      	tst	r4, r2
    55d2:	d044      	beq.n	565e <_malloc_r+0x4ea>
    55d4:	1c1a      	adds	r2, r3, #0
    55d6:	681b      	ldr	r3, [r3, #0]
    55d8:	3a08      	subs	r2, #8
    55da:	4293      	cmp	r3, r2
    55dc:	d0f6      	beq.n	55cc <_malloc_r+0x458>
    55de:	6873      	ldr	r3, [r6, #4]
    55e0:	0040      	lsls	r0, r0, #1
    55e2:	4298      	cmp	r0, r3
    55e4:	d900      	bls.n	55e8 <_malloc_r+0x474>
    55e6:	e6d3      	b.n	5390 <_malloc_r+0x21c>
    55e8:	2800      	cmp	r0, #0
    55ea:	d100      	bne.n	55ee <_malloc_r+0x47a>
    55ec:	e6d0      	b.n	5390 <_malloc_r+0x21c>
    55ee:	4203      	tst	r3, r0
    55f0:	d039      	beq.n	5666 <_malloc_r+0x4f2>
    55f2:	46d1      	mov	r9, sl
    55f4:	e674      	b.n	52e0 <_malloc_r+0x16c>
    55f6:	21fc      	movs	r1, #252	; 0xfc
    55f8:	227e      	movs	r2, #126	; 0x7e
    55fa:	0089      	lsls	r1, r1, #2
    55fc:	4691      	mov	r9, r2
    55fe:	e606      	b.n	520e <_malloc_r+0x9a>
    5600:	20aa      	movs	r0, #170	; 0xaa
    5602:	0040      	lsls	r0, r0, #1
    5604:	4283      	cmp	r3, r0
    5606:	d81e      	bhi.n	5646 <_malloc_r+0x4d2>
    5608:	465a      	mov	r2, fp
    560a:	0bd0      	lsrs	r0, r2, #15
    560c:	3077      	adds	r0, #119	; 0x77
    560e:	4680      	mov	r8, r0
    5610:	e69a      	b.n	5348 <_malloc_r+0x1d4>
    5612:	0511      	lsls	r1, r2, #20
    5614:	2900      	cmp	r1, #0
    5616:	d000      	beq.n	561a <_malloc_r+0x4a6>
    5618:	e706      	b.n	5428 <_malloc_r+0x2b4>
    561a:	4659      	mov	r1, fp
    561c:	68b2      	ldr	r2, [r6, #8]
    561e:	4451      	add	r1, sl
    5620:	2001      	movs	r0, #1
    5622:	4301      	orrs	r1, r0
    5624:	6051      	str	r1, [r2, #4]
    5626:	e745      	b.n	54b4 <_malloc_r+0x340>
    5628:	464a      	mov	r2, r9
    562a:	6090      	str	r0, [r2, #8]
    562c:	e705      	b.n	543a <_malloc_r+0x2c6>
    562e:	1c21      	adds	r1, r4, #0
    5630:	3108      	adds	r1, #8
    5632:	1c38      	adds	r0, r7, #0
    5634:	f7ff fc54 	bl	4ee0 <_free_r>
    5638:	4641      	mov	r1, r8
    563a:	684b      	ldr	r3, [r1, #4]
    563c:	e73a      	b.n	54b4 <_malloc_r+0x340>
    563e:	2100      	movs	r1, #0
    5640:	2001      	movs	r0, #1
    5642:	4689      	mov	r9, r1
    5644:	e717      	b.n	5476 <_malloc_r+0x302>
    5646:	4a0d      	ldr	r2, [pc, #52]	; (567c <_malloc_r+0x508>)
    5648:	207e      	movs	r0, #126	; 0x7e
    564a:	4694      	mov	ip, r2
    564c:	4680      	mov	r8, r0
    564e:	4563      	cmp	r3, ip
    5650:	d900      	bls.n	5654 <_malloc_r+0x4e0>
    5652:	e679      	b.n	5348 <_malloc_r+0x1d4>
    5654:	465b      	mov	r3, fp
    5656:	0c98      	lsrs	r0, r3, #18
    5658:	307c      	adds	r0, #124	; 0x7c
    565a:	4680      	mov	r8, r0
    565c:	e674      	b.n	5348 <_malloc_r+0x1d4>
    565e:	6873      	ldr	r3, [r6, #4]
    5660:	4383      	bics	r3, r0
    5662:	6073      	str	r3, [r6, #4]
    5664:	e7bb      	b.n	55de <_malloc_r+0x46a>
    5666:	2404      	movs	r4, #4
    5668:	44a2      	add	sl, r4
    566a:	0040      	lsls	r0, r0, #1
    566c:	e7bf      	b.n	55ee <_malloc_r+0x47a>
    566e:	46c0      	nop			; (mov r8, r8)
    5670:	400008c8 	.word	0x400008c8
    5674:	40000830 	.word	0x40000830
    5678:	00000fff 	.word	0x00000fff
    567c:	00000554 	.word	0x00000554

00005680 <memcpy>:
    5680:	b5f0      	push	{r4, r5, r6, r7, lr}
    5682:	464f      	mov	r7, r9
    5684:	4646      	mov	r6, r8
    5686:	b4c0      	push	{r6, r7}
    5688:	2a03      	cmp	r2, #3
    568a:	d80d      	bhi.n	56a8 <memcpy+0x28>
    568c:	2a00      	cmp	r2, #0
    568e:	d005      	beq.n	569c <memcpy+0x1c>
    5690:	2300      	movs	r3, #0
    5692:	5ccc      	ldrb	r4, [r1, r3]
    5694:	54c4      	strb	r4, [r0, r3]
    5696:	3301      	adds	r3, #1
    5698:	4293      	cmp	r3, r2
    569a:	d1fa      	bne.n	5692 <memcpy+0x12>
    569c:	bc0c      	pop	{r2, r3}
    569e:	4690      	mov	r8, r2
    56a0:	4699      	mov	r9, r3
    56a2:	bcf0      	pop	{r4, r5, r6, r7}
    56a4:	bc02      	pop	{r1}
    56a6:	4708      	bx	r1
    56a8:	1882      	adds	r2, r0, r2
    56aa:	1c03      	adds	r3, r0, #0
    56ac:	2503      	movs	r5, #3
    56ae:	e003      	b.n	56b8 <memcpy+0x38>
    56b0:	780c      	ldrb	r4, [r1, #0]
    56b2:	3101      	adds	r1, #1
    56b4:	701c      	strb	r4, [r3, #0]
    56b6:	3301      	adds	r3, #1
    56b8:	2403      	movs	r4, #3
    56ba:	422b      	tst	r3, r5
    56bc:	d1f8      	bne.n	56b0 <memcpy+0x30>
    56be:	400c      	ands	r4, r1
    56c0:	d041      	beq.n	5746 <memcpy+0xc6>
    56c2:	00e7      	lsls	r7, r4, #3
    56c4:	46bc      	mov	ip, r7
    56c6:	2704      	movs	r7, #4
    56c8:	4266      	negs	r6, r4
    56ca:	1b3c      	subs	r4, r7, r4
    56cc:	00e4      	lsls	r4, r4, #3
    56ce:	598d      	ldr	r5, [r1, r6]
    56d0:	46a1      	mov	r9, r4
    56d2:	e00b      	b.n	56ec <memcpy+0x6c>
    56d4:	3104      	adds	r1, #4
    56d6:	598f      	ldr	r7, [r1, r6]
    56d8:	4664      	mov	r4, ip
    56da:	40e5      	lsrs	r5, r4
    56dc:	46a8      	mov	r8, r5
    56de:	464c      	mov	r4, r9
    56e0:	1c3d      	adds	r5, r7, #0
    56e2:	40a5      	lsls	r5, r4
    56e4:	4644      	mov	r4, r8
    56e6:	4325      	orrs	r5, r4
    56e8:	c320      	stmia	r3!, {r5}
    56ea:	1c3d      	adds	r5, r7, #0
    56ec:	1ad7      	subs	r7, r2, r3
    56ee:	2f03      	cmp	r7, #3
    56f0:	dcf0      	bgt.n	56d4 <memcpy+0x54>
    56f2:	e003      	b.n	56fc <memcpy+0x7c>
    56f4:	780c      	ldrb	r4, [r1, #0]
    56f6:	3101      	adds	r1, #1
    56f8:	701c      	strb	r4, [r3, #0]
    56fa:	3301      	adds	r3, #1
    56fc:	4293      	cmp	r3, r2
    56fe:	d3f9      	bcc.n	56f4 <memcpy+0x74>
    5700:	e7cc      	b.n	569c <memcpy+0x1c>
    5702:	680c      	ldr	r4, [r1, #0]
    5704:	601c      	str	r4, [r3, #0]
    5706:	684c      	ldr	r4, [r1, #4]
    5708:	605c      	str	r4, [r3, #4]
    570a:	688c      	ldr	r4, [r1, #8]
    570c:	609c      	str	r4, [r3, #8]
    570e:	68cc      	ldr	r4, [r1, #12]
    5710:	60dc      	str	r4, [r3, #12]
    5712:	690c      	ldr	r4, [r1, #16]
    5714:	611c      	str	r4, [r3, #16]
    5716:	694c      	ldr	r4, [r1, #20]
    5718:	615c      	str	r4, [r3, #20]
    571a:	698c      	ldr	r4, [r1, #24]
    571c:	619c      	str	r4, [r3, #24]
    571e:	69cc      	ldr	r4, [r1, #28]
    5720:	61dc      	str	r4, [r3, #28]
    5722:	6a0c      	ldr	r4, [r1, #32]
    5724:	621c      	str	r4, [r3, #32]
    5726:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    5728:	625c      	str	r4, [r3, #36]	; 0x24
    572a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    572c:	629c      	str	r4, [r3, #40]	; 0x28
    572e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    5730:	62dc      	str	r4, [r3, #44]	; 0x2c
    5732:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    5734:	631c      	str	r4, [r3, #48]	; 0x30
    5736:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    5738:	635c      	str	r4, [r3, #52]	; 0x34
    573a:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    573c:	639c      	str	r4, [r3, #56]	; 0x38
    573e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    5740:	3140      	adds	r1, #64	; 0x40
    5742:	63dc      	str	r4, [r3, #60]	; 0x3c
    5744:	3340      	adds	r3, #64	; 0x40
    5746:	1ad4      	subs	r4, r2, r3
    5748:	2c3f      	cmp	r4, #63	; 0x3f
    574a:	dcda      	bgt.n	5702 <memcpy+0x82>
    574c:	e00a      	b.n	5764 <memcpy+0xe4>
    574e:	680c      	ldr	r4, [r1, #0]
    5750:	601c      	str	r4, [r3, #0]
    5752:	684c      	ldr	r4, [r1, #4]
    5754:	605c      	str	r4, [r3, #4]
    5756:	688c      	ldr	r4, [r1, #8]
    5758:	609c      	str	r4, [r3, #8]
    575a:	68cc      	ldr	r4, [r1, #12]
    575c:	60dc      	str	r4, [r3, #12]
    575e:	3310      	adds	r3, #16
    5760:	3110      	adds	r1, #16
    5762:	1ad4      	subs	r4, r2, r3
    5764:	2c0f      	cmp	r4, #15
    5766:	dcf2      	bgt.n	574e <memcpy+0xce>
    5768:	1c0d      	adds	r5, r1, #0
    576a:	e003      	b.n	5774 <memcpy+0xf4>
    576c:	6809      	ldr	r1, [r1, #0]
    576e:	c302      	stmia	r3!, {r1}
    5770:	3504      	adds	r5, #4
    5772:	1ad4      	subs	r4, r2, r3
    5774:	1c29      	adds	r1, r5, #0
    5776:	2c03      	cmp	r4, #3
    5778:	dcf8      	bgt.n	576c <memcpy+0xec>
    577a:	e7bf      	b.n	56fc <memcpy+0x7c>

0000577c <memset>:
    577c:	b530      	push	{r4, r5, lr}
    577e:	0609      	lsls	r1, r1, #24
    5780:	0e09      	lsrs	r1, r1, #24
    5782:	2a03      	cmp	r2, #3
    5784:	d80a      	bhi.n	579c <memset+0x20>
    5786:	2a00      	cmp	r2, #0
    5788:	d005      	beq.n	5796 <memset+0x1a>
    578a:	1c03      	adds	r3, r0, #0
    578c:	1812      	adds	r2, r2, r0
    578e:	7019      	strb	r1, [r3, #0]
    5790:	3301      	adds	r3, #1
    5792:	4293      	cmp	r3, r2
    5794:	d1fb      	bne.n	578e <memset+0x12>
    5796:	bc30      	pop	{r4, r5}
    5798:	bc02      	pop	{r1}
    579a:	4708      	bx	r1
    579c:	1882      	adds	r2, r0, r2
    579e:	1c03      	adds	r3, r0, #0
    57a0:	2403      	movs	r4, #3
    57a2:	e001      	b.n	57a8 <memset+0x2c>
    57a4:	7019      	strb	r1, [r3, #0]
    57a6:	3301      	adds	r3, #1
    57a8:	4223      	tst	r3, r4
    57aa:	d1fb      	bne.n	57a4 <memset+0x28>
    57ac:	020c      	lsls	r4, r1, #8
    57ae:	1864      	adds	r4, r4, r1
    57b0:	0425      	lsls	r5, r4, #16
    57b2:	1964      	adds	r4, r4, r5
    57b4:	e010      	b.n	57d8 <memset+0x5c>
    57b6:	601c      	str	r4, [r3, #0]
    57b8:	605c      	str	r4, [r3, #4]
    57ba:	609c      	str	r4, [r3, #8]
    57bc:	60dc      	str	r4, [r3, #12]
    57be:	611c      	str	r4, [r3, #16]
    57c0:	615c      	str	r4, [r3, #20]
    57c2:	619c      	str	r4, [r3, #24]
    57c4:	61dc      	str	r4, [r3, #28]
    57c6:	621c      	str	r4, [r3, #32]
    57c8:	625c      	str	r4, [r3, #36]	; 0x24
    57ca:	629c      	str	r4, [r3, #40]	; 0x28
    57cc:	62dc      	str	r4, [r3, #44]	; 0x2c
    57ce:	631c      	str	r4, [r3, #48]	; 0x30
    57d0:	635c      	str	r4, [r3, #52]	; 0x34
    57d2:	639c      	str	r4, [r3, #56]	; 0x38
    57d4:	63dc      	str	r4, [r3, #60]	; 0x3c
    57d6:	3340      	adds	r3, #64	; 0x40
    57d8:	1ad5      	subs	r5, r2, r3
    57da:	2d3f      	cmp	r5, #63	; 0x3f
    57dc:	dceb      	bgt.n	57b6 <memset+0x3a>
    57de:	e005      	b.n	57ec <memset+0x70>
    57e0:	601c      	str	r4, [r3, #0]
    57e2:	605c      	str	r4, [r3, #4]
    57e4:	609c      	str	r4, [r3, #8]
    57e6:	60dc      	str	r4, [r3, #12]
    57e8:	3310      	adds	r3, #16
    57ea:	1ad5      	subs	r5, r2, r3
    57ec:	2d0f      	cmp	r5, #15
    57ee:	dcf7      	bgt.n	57e0 <memset+0x64>
    57f0:	e001      	b.n	57f6 <memset+0x7a>
    57f2:	c310      	stmia	r3!, {r4}
    57f4:	1ad5      	subs	r5, r2, r3
    57f6:	2d03      	cmp	r5, #3
    57f8:	dcfb      	bgt.n	57f2 <memset+0x76>
    57fa:	e001      	b.n	5800 <memset+0x84>
    57fc:	7019      	strb	r1, [r3, #0]
    57fe:	3301      	adds	r3, #1
    5800:	4293      	cmp	r3, r2
    5802:	d3fb      	bcc.n	57fc <memset+0x80>
    5804:	e7c7      	b.n	5796 <memset+0x1a>
    5806:	46c0      	nop			; (mov r8, r8)

00005808 <__malloc_lock>:
    5808:	4770      	bx	lr
    580a:	46c0      	nop			; (mov r8, r8)

0000580c <__malloc_unlock>:
    580c:	4770      	bx	lr
    580e:	46c0      	nop			; (mov r8, r8)

00005810 <_printf_r>:
    5810:	b40e      	push	{r1, r2, r3}
    5812:	b500      	push	{lr}
    5814:	b082      	sub	sp, #8
    5816:	ab03      	add	r3, sp, #12
    5818:	cb04      	ldmia	r3!, {r2}
    581a:	6881      	ldr	r1, [r0, #8]
    581c:	9301      	str	r3, [sp, #4]
    581e:	f001 fc1b 	bl	7058 <_vfprintf_r>
    5822:	b002      	add	sp, #8
    5824:	bc08      	pop	{r3}
    5826:	b003      	add	sp, #12
    5828:	4718      	bx	r3
    582a:	46c0      	nop			; (mov r8, r8)

0000582c <printf>:
    582c:	b40f      	push	{r0, r1, r2, r3}
    582e:	b500      	push	{lr}
    5830:	4906      	ldr	r1, [pc, #24]	; (584c <printf+0x20>)
    5832:	b083      	sub	sp, #12
    5834:	ab04      	add	r3, sp, #16
    5836:	6808      	ldr	r0, [r1, #0]
    5838:	cb04      	ldmia	r3!, {r2}
    583a:	6881      	ldr	r1, [r0, #8]
    583c:	9301      	str	r3, [sp, #4]
    583e:	f001 fc0b 	bl	7058 <_vfprintf_r>
    5842:	b003      	add	sp, #12
    5844:	bc08      	pop	{r3}
    5846:	b004      	add	sp, #16
    5848:	4718      	bx	r3
    584a:	46c0      	nop			; (mov r8, r8)
    584c:	40000000 	.word	0x40000000

00005850 <_putchar_r>:
    5850:	b508      	push	{r3, lr}
    5852:	6882      	ldr	r2, [r0, #8]
    5854:	f005 f944 	bl	aae0 <_putc_r>
    5858:	bc08      	pop	{r3}
    585a:	bc02      	pop	{r1}
    585c:	4708      	bx	r1
    585e:	46c0      	nop			; (mov r8, r8)

00005860 <putchar>:
    5860:	b508      	push	{r3, lr}
    5862:	4b04      	ldr	r3, [pc, #16]	; (5874 <putchar+0x14>)
    5864:	1c01      	adds	r1, r0, #0
    5866:	6818      	ldr	r0, [r3, #0]
    5868:	6882      	ldr	r2, [r0, #8]
    586a:	f005 f939 	bl	aae0 <_putc_r>
    586e:	bc08      	pop	{r3}
    5870:	bc02      	pop	{r1}
    5872:	4708      	bx	r1
    5874:	40000000 	.word	0x40000000

00005878 <_puts_r>:
    5878:	b530      	push	{r4, r5, lr}
    587a:	b089      	sub	sp, #36	; 0x24
    587c:	1c04      	adds	r4, r0, #0
    587e:	1c08      	adds	r0, r1, #0
    5880:	1c0d      	adds	r5, r1, #0
    5882:	f000 f8ff 	bl	5a84 <strlen>
    5886:	ab01      	add	r3, sp, #4
    5888:	9305      	str	r3, [sp, #20]
    588a:	2302      	movs	r3, #2
    588c:	4a12      	ldr	r2, [pc, #72]	; (58d8 <_puts_r+0x60>)
    588e:	9306      	str	r3, [sp, #24]
    5890:	4b12      	ldr	r3, [pc, #72]	; (58dc <_puts_r+0x64>)
    5892:	9203      	str	r2, [sp, #12]
    5894:	681b      	ldr	r3, [r3, #0]
    5896:	2201      	movs	r2, #1
    5898:	9002      	str	r0, [sp, #8]
    589a:	1880      	adds	r0, r0, r2
    589c:	9501      	str	r5, [sp, #4]
    589e:	9204      	str	r2, [sp, #16]
    58a0:	9007      	str	r0, [sp, #28]
    58a2:	689b      	ldr	r3, [r3, #8]
    58a4:	2180      	movs	r1, #128	; 0x80
    58a6:	899a      	ldrh	r2, [r3, #12]
    58a8:	0189      	lsls	r1, r1, #6
    58aa:	420a      	tst	r2, r1
    58ac:	d105      	bne.n	58ba <_puts_r+0x42>
    58ae:	430a      	orrs	r2, r1
    58b0:	819a      	strh	r2, [r3, #12]
    58b2:	6e59      	ldr	r1, [r3, #100]	; 0x64
    58b4:	4a0a      	ldr	r2, [pc, #40]	; (58e0 <_puts_r+0x68>)
    58b6:	400a      	ands	r2, r1
    58b8:	665a      	str	r2, [r3, #100]	; 0x64
    58ba:	aa05      	add	r2, sp, #20
    58bc:	68a1      	ldr	r1, [r4, #8]
    58be:	1c20      	adds	r0, r4, #0
    58c0:	f004 f932 	bl	9b28 <__sfvwrite_r>
    58c4:	1e43      	subs	r3, r0, #1
    58c6:	4198      	sbcs	r0, r3
    58c8:	b009      	add	sp, #36	; 0x24
    58ca:	230a      	movs	r3, #10
    58cc:	4240      	negs	r0, r0
    58ce:	4318      	orrs	r0, r3
    58d0:	bc30      	pop	{r4, r5}
    58d2:	bc02      	pop	{r1}
    58d4:	4708      	bx	r1
    58d6:	46c0      	nop			; (mov r8, r8)
    58d8:	0000edac 	.word	0x0000edac
    58dc:	40000000 	.word	0x40000000
    58e0:	ffffdfff 	.word	0xffffdfff

000058e4 <puts>:
    58e4:	b508      	push	{r3, lr}
    58e6:	4b04      	ldr	r3, [pc, #16]	; (58f8 <puts+0x14>)
    58e8:	1c01      	adds	r1, r0, #0
    58ea:	6818      	ldr	r0, [r3, #0]
    58ec:	f7ff ffc4 	bl	5878 <_puts_r>
    58f0:	bc08      	pop	{r3}
    58f2:	bc02      	pop	{r1}
    58f4:	4708      	bx	r1
    58f6:	46c0      	nop			; (mov r8, r8)
    58f8:	40000000 	.word	0x40000000

000058fc <_sprintf_r>:
    58fc:	b40c      	push	{r2, r3}
    58fe:	b530      	push	{r4, r5, lr}
    5900:	b09d      	sub	sp, #116	; 0x74
    5902:	1c0c      	adds	r4, r1, #0
    5904:	a901      	add	r1, sp, #4
    5906:	9401      	str	r4, [sp, #4]
    5908:	610c      	str	r4, [r1, #16]
    590a:	4c0b      	ldr	r4, [pc, #44]	; (5938 <_sprintf_r+0x3c>)
    590c:	ab20      	add	r3, sp, #128	; 0x80
    590e:	608c      	str	r4, [r1, #8]
    5910:	614c      	str	r4, [r1, #20]
    5912:	2582      	movs	r5, #130	; 0x82
    5914:	2401      	movs	r4, #1
    5916:	cb04      	ldmia	r3!, {r2}
    5918:	00ad      	lsls	r5, r5, #2
    591a:	4264      	negs	r4, r4
    591c:	818d      	strh	r5, [r1, #12]
    591e:	81cc      	strh	r4, [r1, #14]
    5920:	931b      	str	r3, [sp, #108]	; 0x6c
    5922:	f000 f8ed 	bl	5b00 <_svfprintf_r>
    5926:	9b01      	ldr	r3, [sp, #4]
    5928:	2200      	movs	r2, #0
    592a:	b01d      	add	sp, #116	; 0x74
    592c:	701a      	strb	r2, [r3, #0]
    592e:	bc30      	pop	{r4, r5}
    5930:	bc08      	pop	{r3}
    5932:	b002      	add	sp, #8
    5934:	4718      	bx	r3
    5936:	46c0      	nop			; (mov r8, r8)
    5938:	7fffffff 	.word	0x7fffffff

0000593c <sprintf>:
    593c:	b40e      	push	{r1, r2, r3}
    593e:	b510      	push	{r4, lr}
    5940:	b09d      	sub	sp, #116	; 0x74
    5942:	a901      	add	r1, sp, #4
    5944:	9001      	str	r0, [sp, #4]
    5946:	6108      	str	r0, [r1, #16]
    5948:	480b      	ldr	r0, [pc, #44]	; (5978 <sprintf+0x3c>)
    594a:	6088      	str	r0, [r1, #8]
    594c:	6148      	str	r0, [r1, #20]
    594e:	2001      	movs	r0, #1
    5950:	4240      	negs	r0, r0
    5952:	ab1f      	add	r3, sp, #124	; 0x7c
    5954:	81c8      	strh	r0, [r1, #14]
    5956:	2482      	movs	r4, #130	; 0x82
    5958:	4808      	ldr	r0, [pc, #32]	; (597c <sprintf+0x40>)
    595a:	cb04      	ldmia	r3!, {r2}
    595c:	00a4      	lsls	r4, r4, #2
    595e:	818c      	strh	r4, [r1, #12]
    5960:	6800      	ldr	r0, [r0, #0]
    5962:	931b      	str	r3, [sp, #108]	; 0x6c
    5964:	f000 f8cc 	bl	5b00 <_svfprintf_r>
    5968:	9b01      	ldr	r3, [sp, #4]
    596a:	2200      	movs	r2, #0
    596c:	b01d      	add	sp, #116	; 0x74
    596e:	701a      	strb	r2, [r3, #0]
    5970:	bc10      	pop	{r4}
    5972:	bc08      	pop	{r3}
    5974:	b003      	add	sp, #12
    5976:	4718      	bx	r3
    5978:	7fffffff 	.word	0x7fffffff
    597c:	40000000 	.word	0x40000000

00005980 <__sread>:
    5980:	b538      	push	{r3, r4, r5, lr}
    5982:	1c0c      	adds	r4, r1, #0
    5984:	250e      	movs	r5, #14
    5986:	5f49      	ldrsh	r1, [r1, r5]
    5988:	f7fc fad6 	bl	1f38 <_read_r>
    598c:	2800      	cmp	r0, #0
    598e:	db05      	blt.n	599c <__sread+0x1c>
    5990:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5992:	181b      	adds	r3, r3, r0
    5994:	6523      	str	r3, [r4, #80]	; 0x50
    5996:	bc38      	pop	{r3, r4, r5}
    5998:	bc02      	pop	{r1}
    599a:	4708      	bx	r1
    599c:	89a2      	ldrh	r2, [r4, #12]
    599e:	4b02      	ldr	r3, [pc, #8]	; (59a8 <__sread+0x28>)
    59a0:	4013      	ands	r3, r2
    59a2:	81a3      	strh	r3, [r4, #12]
    59a4:	e7f7      	b.n	5996 <__sread+0x16>
    59a6:	46c0      	nop			; (mov r8, r8)
    59a8:	ffffefff 	.word	0xffffefff

000059ac <__seofread>:
    59ac:	2000      	movs	r0, #0
    59ae:	4770      	bx	lr

000059b0 <__swrite>:
    59b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59b2:	1c1f      	adds	r7, r3, #0
    59b4:	898b      	ldrh	r3, [r1, #12]
    59b6:	1c05      	adds	r5, r0, #0
    59b8:	1c0c      	adds	r4, r1, #0
    59ba:	1c16      	adds	r6, r2, #0
    59bc:	05da      	lsls	r2, r3, #23
    59be:	d506      	bpl.n	59ce <__swrite+0x1e>
    59c0:	230e      	movs	r3, #14
    59c2:	5ec9      	ldrsh	r1, [r1, r3]
    59c4:	2200      	movs	r2, #0
    59c6:	2302      	movs	r3, #2
    59c8:	f7fc fb22 	bl	2010 <_lseek_r>
    59cc:	89a3      	ldrh	r3, [r4, #12]
    59ce:	4a06      	ldr	r2, [pc, #24]	; (59e8 <__swrite+0x38>)
    59d0:	4013      	ands	r3, r2
    59d2:	81a3      	strh	r3, [r4, #12]
    59d4:	220e      	movs	r2, #14
    59d6:	5ea1      	ldrsh	r1, [r4, r2]
    59d8:	1c28      	adds	r0, r5, #0
    59da:	1c32      	adds	r2, r6, #0
    59dc:	1c3b      	adds	r3, r7, #0
    59de:	f7fc facf 	bl	1f80 <_write_r>
    59e2:	bcf8      	pop	{r3, r4, r5, r6, r7}
    59e4:	bc02      	pop	{r1}
    59e6:	4708      	bx	r1
    59e8:	ffffefff 	.word	0xffffefff

000059ec <__sseek>:
    59ec:	b538      	push	{r3, r4, r5, lr}
    59ee:	1c0c      	adds	r4, r1, #0
    59f0:	250e      	movs	r5, #14
    59f2:	5f49      	ldrsh	r1, [r1, r5]
    59f4:	f7fc fb0c 	bl	2010 <_lseek_r>
    59f8:	1c43      	adds	r3, r0, #1
    59fa:	d008      	beq.n	5a0e <__sseek+0x22>
    59fc:	89a2      	ldrh	r2, [r4, #12]
    59fe:	2380      	movs	r3, #128	; 0x80
    5a00:	015b      	lsls	r3, r3, #5
    5a02:	4313      	orrs	r3, r2
    5a04:	81a3      	strh	r3, [r4, #12]
    5a06:	6520      	str	r0, [r4, #80]	; 0x50
    5a08:	bc38      	pop	{r3, r4, r5}
    5a0a:	bc02      	pop	{r1}
    5a0c:	4708      	bx	r1
    5a0e:	89a2      	ldrh	r2, [r4, #12]
    5a10:	4b01      	ldr	r3, [pc, #4]	; (5a18 <__sseek+0x2c>)
    5a12:	4013      	ands	r3, r2
    5a14:	81a3      	strh	r3, [r4, #12]
    5a16:	e7f7      	b.n	5a08 <__sseek+0x1c>
    5a18:	ffffefff 	.word	0xffffefff

00005a1c <__sclose>:
    5a1c:	b508      	push	{r3, lr}
    5a1e:	230e      	movs	r3, #14
    5a20:	5ec9      	ldrsh	r1, [r1, r3]
    5a22:	f7fc faf3 	bl	200c <_close_r>
    5a26:	bc08      	pop	{r3}
    5a28:	bc02      	pop	{r1}
    5a2a:	4708      	bx	r1

00005a2c <strcat>:
    5a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a2e:	1c04      	adds	r4, r0, #0
    5a30:	07a3      	lsls	r3, r4, #30
    5a32:	d112      	bne.n	5a5a <strcat+0x2e>
    5a34:	6823      	ldr	r3, [r4, #0]
    5a36:	4d0d      	ldr	r5, [pc, #52]	; (5a6c <strcat+0x40>)
    5a38:	4e0d      	ldr	r6, [pc, #52]	; (5a70 <strcat+0x44>)
    5a3a:	195a      	adds	r2, r3, r5
    5a3c:	439a      	bics	r2, r3
    5a3e:	4232      	tst	r2, r6
    5a40:	d10b      	bne.n	5a5a <strcat+0x2e>
    5a42:	1d23      	adds	r3, r4, #4
    5a44:	1c18      	adds	r0, r3, #0
    5a46:	4f09      	ldr	r7, [pc, #36]	; (5a6c <strcat+0x40>)
    5a48:	cb04      	ldmia	r3!, {r2}
    5a4a:	19d5      	adds	r5, r2, r7
    5a4c:	4395      	bics	r5, r2
    5a4e:	4235      	tst	r5, r6
    5a50:	d0f8      	beq.n	5a44 <strcat+0x18>
    5a52:	7803      	ldrb	r3, [r0, #0]
    5a54:	2b00      	cmp	r3, #0
    5a56:	d003      	beq.n	5a60 <strcat+0x34>
    5a58:	3001      	adds	r0, #1
    5a5a:	7803      	ldrb	r3, [r0, #0]
    5a5c:	2b00      	cmp	r3, #0
    5a5e:	d1fb      	bne.n	5a58 <strcat+0x2c>
    5a60:	f000 f808 	bl	5a74 <strcpy>
    5a64:	1c20      	adds	r0, r4, #0
    5a66:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5a68:	bc02      	pop	{r1}
    5a6a:	4708      	bx	r1
    5a6c:	fefefeff 	.word	0xfefefeff
    5a70:	80808080 	.word	0x80808080

00005a74 <strcpy>:
    5a74:	1c03      	adds	r3, r0, #0
    5a76:	780a      	ldrb	r2, [r1, #0]
    5a78:	3101      	adds	r1, #1
    5a7a:	701a      	strb	r2, [r3, #0]
    5a7c:	3301      	adds	r3, #1
    5a7e:	2a00      	cmp	r2, #0
    5a80:	d1f9      	bne.n	5a76 <strcpy+0x2>
    5a82:	4770      	bx	lr

00005a84 <strlen>:
    5a84:	2300      	movs	r3, #0
    5a86:	5cc2      	ldrb	r2, [r0, r3]
    5a88:	3301      	adds	r3, #1
    5a8a:	2a00      	cmp	r2, #0
    5a8c:	d1fb      	bne.n	5a86 <strlen+0x2>
    5a8e:	1e58      	subs	r0, r3, #1
    5a90:	4770      	bx	lr
    5a92:	46c0      	nop			; (mov r8, r8)

00005a94 <strncpy>:
    5a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a96:	1c0e      	adds	r6, r1, #0
    5a98:	4306      	orrs	r6, r0
    5a9a:	2503      	movs	r5, #3
    5a9c:	1c0c      	adds	r4, r1, #0
    5a9e:	1c03      	adds	r3, r0, #0
    5aa0:	422e      	tst	r6, r5
    5aa2:	d101      	bne.n	5aa8 <strncpy+0x14>
    5aa4:	4295      	cmp	r5, r2
    5aa6:	d317      	bcc.n	5ad8 <strncpy+0x44>
    5aa8:	1c03      	adds	r3, r0, #0
    5aaa:	2a00      	cmp	r2, #0
    5aac:	d103      	bne.n	5ab6 <strncpy+0x22>
    5aae:	e010      	b.n	5ad2 <strncpy+0x3e>
    5ab0:	3101      	adds	r1, #1
    5ab2:	2a00      	cmp	r2, #0
    5ab4:	d00d      	beq.n	5ad2 <strncpy+0x3e>
    5ab6:	780c      	ldrb	r4, [r1, #0]
    5ab8:	3a01      	subs	r2, #1
    5aba:	701c      	strb	r4, [r3, #0]
    5abc:	3301      	adds	r3, #1
    5abe:	2c00      	cmp	r4, #0
    5ac0:	d1f6      	bne.n	5ab0 <strncpy+0x1c>
    5ac2:	2100      	movs	r1, #0
    5ac4:	428a      	cmp	r2, r1
    5ac6:	d004      	beq.n	5ad2 <strncpy+0x3e>
    5ac8:	3a01      	subs	r2, #1
    5aca:	7019      	strb	r1, [r3, #0]
    5acc:	3301      	adds	r3, #1
    5ace:	2a00      	cmp	r2, #0
    5ad0:	d1fa      	bne.n	5ac8 <strncpy+0x34>
    5ad2:	bcf0      	pop	{r4, r5, r6, r7}
    5ad4:	bc02      	pop	{r1}
    5ad6:	4708      	bx	r1
    5ad8:	4907      	ldr	r1, [pc, #28]	; (5af8 <strncpy+0x64>)
    5ada:	468c      	mov	ip, r1
    5adc:	4f07      	ldr	r7, [pc, #28]	; (5afc <strncpy+0x68>)
    5ade:	1c21      	adds	r1, r4, #0
    5ae0:	cc20      	ldmia	r4!, {r5}
    5ae2:	19ee      	adds	r6, r5, r7
    5ae4:	43ae      	bics	r6, r5
    5ae6:	4667      	mov	r7, ip
    5ae8:	423e      	tst	r6, r7
    5aea:	d1de      	bne.n	5aaa <strncpy+0x16>
    5aec:	3a04      	subs	r2, #4
    5aee:	c320      	stmia	r3!, {r5}
    5af0:	1c21      	adds	r1, r4, #0
    5af2:	2a03      	cmp	r2, #3
    5af4:	d8f2      	bhi.n	5adc <strncpy+0x48>
    5af6:	e7d8      	b.n	5aaa <strncpy+0x16>
    5af8:	80808080 	.word	0x80808080
    5afc:	fefefeff 	.word	0xfefefeff

00005b00 <_svfprintf_r>:
    5b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b02:	465f      	mov	r7, fp
    5b04:	4656      	mov	r6, sl
    5b06:	464d      	mov	r5, r9
    5b08:	4644      	mov	r4, r8
    5b0a:	b4f0      	push	{r4, r5, r6, r7}
    5b0c:	b0c5      	sub	sp, #276	; 0x114
    5b0e:	930f      	str	r3, [sp, #60]	; 0x3c
    5b10:	9108      	str	r1, [sp, #32]
    5b12:	1c15      	adds	r5, r2, #0
    5b14:	9009      	str	r0, [sp, #36]	; 0x24
    5b16:	f004 f9e1 	bl	9edc <_localeconv_r>
    5b1a:	6800      	ldr	r0, [r0, #0]
    5b1c:	9019      	str	r0, [sp, #100]	; 0x64
    5b1e:	f7ff ffb1 	bl	5a84 <strlen>
    5b22:	901c      	str	r0, [sp, #112]	; 0x70
    5b24:	9808      	ldr	r0, [sp, #32]
    5b26:	8983      	ldrh	r3, [r0, #12]
    5b28:	0619      	lsls	r1, r3, #24
    5b2a:	d504      	bpl.n	5b36 <_svfprintf_r+0x36>
    5b2c:	6903      	ldr	r3, [r0, #16]
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d101      	bne.n	5b36 <_svfprintf_r+0x36>
    5b32:	f001 f903 	bl	6d3c <_svfprintf_r+0x123c>
    5b36:	2300      	movs	r3, #0
    5b38:	ac39      	add	r4, sp, #228	; 0xe4
    5b3a:	af1f      	add	r7, sp, #124	; 0x7c
    5b3c:	9739      	str	r7, [sp, #228]	; 0xe4
    5b3e:	60a3      	str	r3, [r4, #8]
    5b40:	6063      	str	r3, [r4, #4]
    5b42:	930d      	str	r3, [sp, #52]	; 0x34
    5b44:	931a      	str	r3, [sp, #104]	; 0x68
    5b46:	931b      	str	r3, [sp, #108]	; 0x6c
    5b48:	9317      	str	r3, [sp, #92]	; 0x5c
    5b4a:	931d      	str	r3, [sp, #116]	; 0x74
    5b4c:	930e      	str	r3, [sp, #56]	; 0x38
    5b4e:	46ab      	mov	fp, r5
    5b50:	1c3d      	adds	r5, r7, #0
    5b52:	4658      	mov	r0, fp
    5b54:	7803      	ldrb	r3, [r0, #0]
    5b56:	2b00      	cmp	r3, #0
    5b58:	d100      	bne.n	5b5c <_svfprintf_r+0x5c>
    5b5a:	e167      	b.n	5e2c <_svfprintf_r+0x32c>
    5b5c:	2b25      	cmp	r3, #37	; 0x25
    5b5e:	d100      	bne.n	5b62 <_svfprintf_r+0x62>
    5b60:	e164      	b.n	5e2c <_svfprintf_r+0x32c>
    5b62:	465e      	mov	r6, fp
    5b64:	e001      	b.n	5b6a <_svfprintf_r+0x6a>
    5b66:	2b00      	cmp	r3, #0
    5b68:	d003      	beq.n	5b72 <_svfprintf_r+0x72>
    5b6a:	3601      	adds	r6, #1
    5b6c:	7833      	ldrb	r3, [r6, #0]
    5b6e:	2b25      	cmp	r3, #37	; 0x25
    5b70:	d1f9      	bne.n	5b66 <_svfprintf_r+0x66>
    5b72:	4659      	mov	r1, fp
    5b74:	1a77      	subs	r7, r6, r1
    5b76:	2f00      	cmp	r7, #0
    5b78:	d00f      	beq.n	5b9a <_svfprintf_r+0x9a>
    5b7a:	68a3      	ldr	r3, [r4, #8]
    5b7c:	19db      	adds	r3, r3, r7
    5b7e:	6029      	str	r1, [r5, #0]
    5b80:	606f      	str	r7, [r5, #4]
    5b82:	60a3      	str	r3, [r4, #8]
    5b84:	6863      	ldr	r3, [r4, #4]
    5b86:	3301      	adds	r3, #1
    5b88:	6063      	str	r3, [r4, #4]
    5b8a:	3508      	adds	r5, #8
    5b8c:	2b07      	cmp	r3, #7
    5b8e:	dd00      	ble.n	5b92 <_svfprintf_r+0x92>
    5b90:	e15c      	b.n	5e4c <_svfprintf_r+0x34c>
    5b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5b94:	19d2      	adds	r2, r2, r7
    5b96:	920e      	str	r2, [sp, #56]	; 0x38
    5b98:	7833      	ldrb	r3, [r6, #0]
    5b9a:	2b00      	cmp	r3, #0
    5b9c:	d100      	bne.n	5ba0 <_svfprintf_r+0xa0>
    5b9e:	e15e      	b.n	5e5e <_svfprintf_r+0x35e>
    5ba0:	4fbb      	ldr	r7, [pc, #748]	; (5e90 <_svfprintf_r+0x390>)
    5ba2:	2000      	movs	r0, #0
    5ba4:	446f      	add	r7, sp
    5ba6:	7038      	strb	r0, [r7, #0]
    5ba8:	1c73      	adds	r3, r6, #1
    5baa:	469b      	mov	fp, r3
    5bac:	2100      	movs	r1, #0
    5bae:	7873      	ldrb	r3, [r6, #1]
    5bb0:	2601      	movs	r6, #1
    5bb2:	46b9      	mov	r9, r7
    5bb4:	4276      	negs	r6, r6
    5bb6:	910b      	str	r1, [sp, #44]	; 0x2c
    5bb8:	9107      	str	r1, [sp, #28]
    5bba:	2740      	movs	r7, #64	; 0x40
    5bbc:	3180      	adds	r1, #128	; 0x80
    5bbe:	4ab5      	ldr	r2, [pc, #724]	; (5e94 <_svfprintf_r+0x394>)
    5bc0:	468a      	mov	sl, r1
    5bc2:	2020      	movs	r0, #32
    5bc4:	4659      	mov	r1, fp
    5bc6:	46bc      	mov	ip, r7
    5bc8:	46b3      	mov	fp, r6
    5bca:	3101      	adds	r1, #1
    5bcc:	1c1e      	adds	r6, r3, #0
    5bce:	3e20      	subs	r6, #32
    5bd0:	2e58      	cmp	r6, #88	; 0x58
    5bd2:	d800      	bhi.n	5bd6 <_svfprintf_r+0xd6>
    5bd4:	e12d      	b.n	5e32 <_svfprintf_r+0x332>
    5bd6:	468b      	mov	fp, r1
    5bd8:	9316      	str	r3, [sp, #88]	; 0x58
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d100      	bne.n	5be0 <_svfprintf_r+0xe0>
    5bde:	e13e      	b.n	5e5e <_svfprintf_r+0x35e>
    5be0:	af16      	add	r7, sp, #88	; 0x58
    5be2:	783f      	ldrb	r7, [r7, #0]
    5be4:	ab2f      	add	r3, sp, #188	; 0xbc
    5be6:	2200      	movs	r2, #0
    5be8:	2601      	movs	r6, #1
    5bea:	2100      	movs	r1, #0
    5bec:	4648      	mov	r0, r9
    5bee:	701f      	strb	r7, [r3, #0]
    5bf0:	7001      	strb	r1, [r0, #0]
    5bf2:	960a      	str	r6, [sp, #40]	; 0x28
    5bf4:	960c      	str	r6, [sp, #48]	; 0x30
    5bf6:	9214      	str	r2, [sp, #80]	; 0x50
    5bf8:	9218      	str	r2, [sp, #96]	; 0x60
    5bfa:	9313      	str	r3, [sp, #76]	; 0x4c
    5bfc:	9807      	ldr	r0, [sp, #28]
    5bfe:	2302      	movs	r3, #2
    5c00:	4018      	ands	r0, r3
    5c02:	4682      	mov	sl, r0
    5c04:	d002      	beq.n	5c0c <_svfprintf_r+0x10c>
    5c06:	990a      	ldr	r1, [sp, #40]	; 0x28
    5c08:	18c9      	adds	r1, r1, r3
    5c0a:	910a      	str	r1, [sp, #40]	; 0x28
    5c0c:	9e07      	ldr	r6, [sp, #28]
    5c0e:	2384      	movs	r3, #132	; 0x84
    5c10:	401e      	ands	r6, r3
    5c12:	9615      	str	r6, [sp, #84]	; 0x54
    5c14:	d13c      	bne.n	5c90 <_svfprintf_r+0x190>
    5c16:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5c18:	980a      	ldr	r0, [sp, #40]	; 0x28
    5c1a:	1a3e      	subs	r6, r7, r0
    5c1c:	2e00      	cmp	r6, #0
    5c1e:	dd37      	ble.n	5c90 <_svfprintf_r+0x190>
    5c20:	2e10      	cmp	r6, #16
    5c22:	dc01      	bgt.n	5c28 <_svfprintf_r+0x128>
    5c24:	f001 f906 	bl	6e34 <_svfprintf_r+0x1334>
    5c28:	499b      	ldr	r1, [pc, #620]	; (5e98 <_svfprintf_r+0x398>)
    5c2a:	1c2a      	adds	r2, r5, #0
    5c2c:	2710      	movs	r7, #16
    5c2e:	1c0d      	adds	r5, r1, #0
    5c30:	e005      	b.n	5c3e <_svfprintf_r+0x13e>
    5c32:	3208      	adds	r2, #8
    5c34:	1c13      	adds	r3, r2, #0
    5c36:	3e10      	subs	r6, #16
    5c38:	3308      	adds	r3, #8
    5c3a:	2e10      	cmp	r6, #16
    5c3c:	dd16      	ble.n	5c6c <_svfprintf_r+0x16c>
    5c3e:	68a3      	ldr	r3, [r4, #8]
    5c40:	3310      	adds	r3, #16
    5c42:	6015      	str	r5, [r2, #0]
    5c44:	6057      	str	r7, [r2, #4]
    5c46:	60a3      	str	r3, [r4, #8]
    5c48:	6863      	ldr	r3, [r4, #4]
    5c4a:	3301      	adds	r3, #1
    5c4c:	6063      	str	r3, [r4, #4]
    5c4e:	2b07      	cmp	r3, #7
    5c50:	ddef      	ble.n	5c32 <_svfprintf_r+0x132>
    5c52:	9809      	ldr	r0, [sp, #36]	; 0x24
    5c54:	9908      	ldr	r1, [sp, #32]
    5c56:	1c22      	adds	r2, r4, #0
    5c58:	f005 fa14 	bl	b084 <__ssprint_r>
    5c5c:	2800      	cmp	r0, #0
    5c5e:	d000      	beq.n	5c62 <_svfprintf_r+0x162>
    5c60:	e105      	b.n	5e6e <_svfprintf_r+0x36e>
    5c62:	3e10      	subs	r6, #16
    5c64:	ab21      	add	r3, sp, #132	; 0x84
    5c66:	aa1f      	add	r2, sp, #124	; 0x7c
    5c68:	2e10      	cmp	r6, #16
    5c6a:	dce8      	bgt.n	5c3e <_svfprintf_r+0x13e>
    5c6c:	46a8      	mov	r8, r5
    5c6e:	1c15      	adds	r5, r2, #0
    5c70:	68a2      	ldr	r2, [r4, #8]
    5c72:	4647      	mov	r7, r8
    5c74:	18b2      	adds	r2, r6, r2
    5c76:	602f      	str	r7, [r5, #0]
    5c78:	606e      	str	r6, [r5, #4]
    5c7a:	60a2      	str	r2, [r4, #8]
    5c7c:	6862      	ldr	r2, [r4, #4]
    5c7e:	3201      	adds	r2, #1
    5c80:	6062      	str	r2, [r4, #4]
    5c82:	2a07      	cmp	r2, #7
    5c84:	dd01      	ble.n	5c8a <_svfprintf_r+0x18a>
    5c86:	f000 fd19 	bl	66bc <_svfprintf_r+0xbbc>
    5c8a:	4648      	mov	r0, r9
    5c8c:	7802      	ldrb	r2, [r0, #0]
    5c8e:	1c1d      	adds	r5, r3, #0
    5c90:	2a00      	cmp	r2, #0
    5c92:	d00e      	beq.n	5cb2 <_svfprintf_r+0x1b2>
    5c94:	2301      	movs	r3, #1
    5c96:	606b      	str	r3, [r5, #4]
    5c98:	68a3      	ldr	r3, [r4, #8]
    5c9a:	464a      	mov	r2, r9
    5c9c:	3301      	adds	r3, #1
    5c9e:	602a      	str	r2, [r5, #0]
    5ca0:	60a3      	str	r3, [r4, #8]
    5ca2:	6863      	ldr	r3, [r4, #4]
    5ca4:	3301      	adds	r3, #1
    5ca6:	6063      	str	r3, [r4, #4]
    5ca8:	3508      	adds	r5, #8
    5caa:	2b07      	cmp	r3, #7
    5cac:	dd01      	ble.n	5cb2 <_svfprintf_r+0x1b2>
    5cae:	f000 fc44 	bl	653a <_svfprintf_r+0xa3a>
    5cb2:	2300      	movs	r3, #0
    5cb4:	459a      	cmp	sl, r3
    5cb6:	d00e      	beq.n	5cd6 <_svfprintf_r+0x1d6>
    5cb8:	ab43      	add	r3, sp, #268	; 0x10c
    5cba:	602b      	str	r3, [r5, #0]
    5cbc:	2302      	movs	r3, #2
    5cbe:	606b      	str	r3, [r5, #4]
    5cc0:	68a3      	ldr	r3, [r4, #8]
    5cc2:	3302      	adds	r3, #2
    5cc4:	60a3      	str	r3, [r4, #8]
    5cc6:	6863      	ldr	r3, [r4, #4]
    5cc8:	3301      	adds	r3, #1
    5cca:	6063      	str	r3, [r4, #4]
    5ccc:	3508      	adds	r5, #8
    5cce:	2b07      	cmp	r3, #7
    5cd0:	dd01      	ble.n	5cd6 <_svfprintf_r+0x1d6>
    5cd2:	f000 fc3d 	bl	6550 <_svfprintf_r+0xa50>
    5cd6:	9e15      	ldr	r6, [sp, #84]	; 0x54
    5cd8:	2e80      	cmp	r6, #128	; 0x80
    5cda:	d100      	bne.n	5cde <_svfprintf_r+0x1de>
    5cdc:	e371      	b.n	63c2 <_svfprintf_r+0x8c2>
    5cde:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5ce2:	1ad6      	subs	r6, r2, r3
    5ce4:	2e00      	cmp	r6, #0
    5ce6:	dc00      	bgt.n	5cea <_svfprintf_r+0x1ea>
    5ce8:	e3ba      	b.n	6460 <_svfprintf_r+0x960>
    5cea:	2e10      	cmp	r6, #16
    5cec:	dc01      	bgt.n	5cf2 <_svfprintf_r+0x1f2>
    5cee:	f000 feb7 	bl	6a60 <_svfprintf_r+0xf60>
    5cf2:	4f69      	ldr	r7, [pc, #420]	; (5e98 <_svfprintf_r+0x398>)
    5cf4:	2010      	movs	r0, #16
    5cf6:	46b8      	mov	r8, r7
    5cf8:	4681      	mov	r9, r0
    5cfa:	1c2b      	adds	r3, r5, #0
    5cfc:	44c1      	add	r9, r8
    5cfe:	4682      	mov	sl, r0
    5d00:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5d02:	9d08      	ldr	r5, [sp, #32]
    5d04:	e005      	b.n	5d12 <_svfprintf_r+0x212>
    5d06:	3308      	adds	r3, #8
    5d08:	1c1a      	adds	r2, r3, #0
    5d0a:	3e10      	subs	r6, #16
    5d0c:	3208      	adds	r2, #8
    5d0e:	2e10      	cmp	r6, #16
    5d10:	dd18      	ble.n	5d44 <_svfprintf_r+0x244>
    5d12:	464a      	mov	r2, r9
    5d14:	601a      	str	r2, [r3, #0]
    5d16:	68a2      	ldr	r2, [r4, #8]
    5d18:	4650      	mov	r0, sl
    5d1a:	3210      	adds	r2, #16
    5d1c:	6058      	str	r0, [r3, #4]
    5d1e:	60a2      	str	r2, [r4, #8]
    5d20:	6862      	ldr	r2, [r4, #4]
    5d22:	3201      	adds	r2, #1
    5d24:	6062      	str	r2, [r4, #4]
    5d26:	2a07      	cmp	r2, #7
    5d28:	dded      	ble.n	5d06 <_svfprintf_r+0x206>
    5d2a:	1c38      	adds	r0, r7, #0
    5d2c:	1c29      	adds	r1, r5, #0
    5d2e:	1c22      	adds	r2, r4, #0
    5d30:	f005 f9a8 	bl	b084 <__ssprint_r>
    5d34:	2800      	cmp	r0, #0
    5d36:	d000      	beq.n	5d3a <_svfprintf_r+0x23a>
    5d38:	e099      	b.n	5e6e <_svfprintf_r+0x36e>
    5d3a:	3e10      	subs	r6, #16
    5d3c:	aa21      	add	r2, sp, #132	; 0x84
    5d3e:	ab1f      	add	r3, sp, #124	; 0x7c
    5d40:	2e10      	cmp	r6, #16
    5d42:	dce6      	bgt.n	5d12 <_svfprintf_r+0x212>
    5d44:	1c1d      	adds	r5, r3, #0
    5d46:	1c17      	adds	r7, r2, #0
    5d48:	2110      	movs	r1, #16
    5d4a:	1c0b      	adds	r3, r1, #0
    5d4c:	4443      	add	r3, r8
    5d4e:	602b      	str	r3, [r5, #0]
    5d50:	68a3      	ldr	r3, [r4, #8]
    5d52:	606e      	str	r6, [r5, #4]
    5d54:	18f6      	adds	r6, r6, r3
    5d56:	6863      	ldr	r3, [r4, #4]
    5d58:	3301      	adds	r3, #1
    5d5a:	60a6      	str	r6, [r4, #8]
    5d5c:	6063      	str	r3, [r4, #4]
    5d5e:	2b07      	cmp	r3, #7
    5d60:	dd00      	ble.n	5d64 <_svfprintf_r+0x264>
    5d62:	e3df      	b.n	6524 <_svfprintf_r+0xa24>
    5d64:	9a07      	ldr	r2, [sp, #28]
    5d66:	05d2      	lsls	r2, r2, #23
    5d68:	d500      	bpl.n	5d6c <_svfprintf_r+0x26c>
    5d6a:	e2bb      	b.n	62e4 <_svfprintf_r+0x7e4>
    5d6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    5d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5d70:	603b      	str	r3, [r7, #0]
    5d72:	68a3      	ldr	r3, [r4, #8]
    5d74:	195b      	adds	r3, r3, r5
    5d76:	607d      	str	r5, [r7, #4]
    5d78:	60a3      	str	r3, [r4, #8]
    5d7a:	6863      	ldr	r3, [r4, #4]
    5d7c:	3301      	adds	r3, #1
    5d7e:	6063      	str	r3, [r4, #4]
    5d80:	2b07      	cmp	r3, #7
    5d82:	dd00      	ble.n	5d86 <_svfprintf_r+0x286>
    5d84:	e3b8      	b.n	64f8 <_svfprintf_r+0x9f8>
    5d86:	1c3b      	adds	r3, r7, #0
    5d88:	3308      	adds	r3, #8
    5d8a:	9f07      	ldr	r7, [sp, #28]
    5d8c:	077f      	lsls	r7, r7, #29
    5d8e:	d539      	bpl.n	5e04 <_svfprintf_r+0x304>
    5d90:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5d92:	990a      	ldr	r1, [sp, #40]	; 0x28
    5d94:	1a45      	subs	r5, r0, r1
    5d96:	2d00      	cmp	r5, #0
    5d98:	dd34      	ble.n	5e04 <_svfprintf_r+0x304>
    5d9a:	2d10      	cmp	r5, #16
    5d9c:	dc01      	bgt.n	5da2 <_svfprintf_r+0x2a2>
    5d9e:	f001 f86e 	bl	6e7e <_svfprintf_r+0x137e>
    5da2:	4e3d      	ldr	r6, [pc, #244]	; (5e98 <_svfprintf_r+0x398>)
    5da4:	46b0      	mov	r8, r6
    5da6:	4647      	mov	r7, r8
    5da8:	2610      	movs	r6, #16
    5daa:	e002      	b.n	5db2 <_svfprintf_r+0x2b2>
    5dac:	3d10      	subs	r5, #16
    5dae:	2d10      	cmp	r5, #16
    5db0:	dd15      	ble.n	5dde <_svfprintf_r+0x2de>
    5db2:	68a2      	ldr	r2, [r4, #8]
    5db4:	3210      	adds	r2, #16
    5db6:	601f      	str	r7, [r3, #0]
    5db8:	605e      	str	r6, [r3, #4]
    5dba:	60a2      	str	r2, [r4, #8]
    5dbc:	6862      	ldr	r2, [r4, #4]
    5dbe:	3201      	adds	r2, #1
    5dc0:	6062      	str	r2, [r4, #4]
    5dc2:	3308      	adds	r3, #8
    5dc4:	2a07      	cmp	r2, #7
    5dc6:	ddf1      	ble.n	5dac <_svfprintf_r+0x2ac>
    5dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
    5dca:	9908      	ldr	r1, [sp, #32]
    5dcc:	1c22      	adds	r2, r4, #0
    5dce:	f005 f959 	bl	b084 <__ssprint_r>
    5dd2:	2800      	cmp	r0, #0
    5dd4:	d14b      	bne.n	5e6e <_svfprintf_r+0x36e>
    5dd6:	3d10      	subs	r5, #16
    5dd8:	ab1f      	add	r3, sp, #124	; 0x7c
    5dda:	2d10      	cmp	r5, #16
    5ddc:	dce9      	bgt.n	5db2 <_svfprintf_r+0x2b2>
    5dde:	46b8      	mov	r8, r7
    5de0:	4647      	mov	r7, r8
    5de2:	605d      	str	r5, [r3, #4]
    5de4:	601f      	str	r7, [r3, #0]
    5de6:	68a3      	ldr	r3, [r4, #8]
    5de8:	18ed      	adds	r5, r5, r3
    5dea:	6863      	ldr	r3, [r4, #4]
    5dec:	3301      	adds	r3, #1
    5dee:	60a5      	str	r5, [r4, #8]
    5df0:	6063      	str	r3, [r4, #4]
    5df2:	2b07      	cmp	r3, #7
    5df4:	dd07      	ble.n	5e06 <_svfprintf_r+0x306>
    5df6:	9809      	ldr	r0, [sp, #36]	; 0x24
    5df8:	9908      	ldr	r1, [sp, #32]
    5dfa:	1c22      	adds	r2, r4, #0
    5dfc:	f005 f942 	bl	b084 <__ssprint_r>
    5e00:	2800      	cmp	r0, #0
    5e02:	d134      	bne.n	5e6e <_svfprintf_r+0x36e>
    5e04:	68a5      	ldr	r5, [r4, #8]
    5e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5e08:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5e0a:	4283      	cmp	r3, r0
    5e0c:	da00      	bge.n	5e10 <_svfprintf_r+0x310>
    5e0e:	1c03      	adds	r3, r0, #0
    5e10:	990e      	ldr	r1, [sp, #56]	; 0x38
    5e12:	18c9      	adds	r1, r1, r3
    5e14:	910e      	str	r1, [sp, #56]	; 0x38
    5e16:	2d00      	cmp	r5, #0
    5e18:	d000      	beq.n	5e1c <_svfprintf_r+0x31c>
    5e1a:	e377      	b.n	650c <_svfprintf_r+0xa0c>
    5e1c:	2200      	movs	r2, #0
    5e1e:	6062      	str	r2, [r4, #4]
    5e20:	4658      	mov	r0, fp
    5e22:	7803      	ldrb	r3, [r0, #0]
    5e24:	ad1f      	add	r5, sp, #124	; 0x7c
    5e26:	2b00      	cmp	r3, #0
    5e28:	d000      	beq.n	5e2c <_svfprintf_r+0x32c>
    5e2a:	e697      	b.n	5b5c <_svfprintf_r+0x5c>
    5e2c:	465e      	mov	r6, fp
    5e2e:	7833      	ldrb	r3, [r6, #0]
    5e30:	e6b3      	b.n	5b9a <_svfprintf_r+0x9a>
    5e32:	00b6      	lsls	r6, r6, #2
    5e34:	5996      	ldr	r6, [r2, r6]
    5e36:	46b7      	mov	pc, r6
    5e38:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5e3a:	427f      	negs	r7, r7
    5e3c:	970b      	str	r7, [sp, #44]	; 0x2c
    5e3e:	960f      	str	r6, [sp, #60]	; 0x3c
    5e40:	9e07      	ldr	r6, [sp, #28]
    5e42:	2304      	movs	r3, #4
    5e44:	431e      	orrs	r6, r3
    5e46:	9607      	str	r6, [sp, #28]
    5e48:	780b      	ldrb	r3, [r1, #0]
    5e4a:	e6be      	b.n	5bca <_svfprintf_r+0xca>
    5e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
    5e4e:	9908      	ldr	r1, [sp, #32]
    5e50:	1c22      	adds	r2, r4, #0
    5e52:	f005 f917 	bl	b084 <__ssprint_r>
    5e56:	2800      	cmp	r0, #0
    5e58:	d109      	bne.n	5e6e <_svfprintf_r+0x36e>
    5e5a:	ad1f      	add	r5, sp, #124	; 0x7c
    5e5c:	e699      	b.n	5b92 <_svfprintf_r+0x92>
    5e5e:	68a3      	ldr	r3, [r4, #8]
    5e60:	2b00      	cmp	r3, #0
    5e62:	d004      	beq.n	5e6e <_svfprintf_r+0x36e>
    5e64:	9809      	ldr	r0, [sp, #36]	; 0x24
    5e66:	9908      	ldr	r1, [sp, #32]
    5e68:	1c22      	adds	r2, r4, #0
    5e6a:	f005 f90b 	bl	b084 <__ssprint_r>
    5e6e:	9d08      	ldr	r5, [sp, #32]
    5e70:	89ab      	ldrh	r3, [r5, #12]
    5e72:	065e      	lsls	r6, r3, #25
    5e74:	d502      	bpl.n	5e7c <_svfprintf_r+0x37c>
    5e76:	2301      	movs	r3, #1
    5e78:	425b      	negs	r3, r3
    5e7a:	930e      	str	r3, [sp, #56]	; 0x38
    5e7c:	980e      	ldr	r0, [sp, #56]	; 0x38
    5e7e:	b045      	add	sp, #276	; 0x114
    5e80:	bc3c      	pop	{r2, r3, r4, r5}
    5e82:	4690      	mov	r8, r2
    5e84:	4699      	mov	r9, r3
    5e86:	46a2      	mov	sl, r4
    5e88:	46ab      	mov	fp, r5
    5e8a:	bcf0      	pop	{r4, r5, r6, r7}
    5e8c:	bc02      	pop	{r1}
    5e8e:	4708      	bx	r1
    5e90:	0000010f 	.word	0x0000010f
    5e94:	0000e23c 	.word	0x0000e23c
    5e98:	0000e3a0 	.word	0x0000e3a0
    5e9c:	9a07      	ldr	r2, [sp, #28]
    5e9e:	9316      	str	r3, [sp, #88]	; 0x58
    5ea0:	2310      	movs	r3, #16
    5ea2:	431a      	orrs	r2, r3
    5ea4:	9207      	str	r2, [sp, #28]
    5ea6:	465e      	mov	r6, fp
    5ea8:	468b      	mov	fp, r1
    5eaa:	9b07      	ldr	r3, [sp, #28]
    5eac:	069b      	lsls	r3, r3, #26
    5eae:	d401      	bmi.n	5eb4 <_svfprintf_r+0x3b4>
    5eb0:	f000 fc76 	bl	67a0 <_svfprintf_r+0xca0>
    5eb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5eb6:	2307      	movs	r3, #7
    5eb8:	3207      	adds	r2, #7
    5eba:	439a      	bics	r2, r3
    5ebc:	6810      	ldr	r0, [r2, #0]
    5ebe:	6851      	ldr	r1, [r2, #4]
    5ec0:	2708      	movs	r7, #8
    5ec2:	18bf      	adds	r7, r7, r2
    5ec4:	9010      	str	r0, [sp, #64]	; 0x40
    5ec6:	9111      	str	r1, [sp, #68]	; 0x44
    5ec8:	970f      	str	r7, [sp, #60]	; 0x3c
    5eca:	9a11      	ldr	r2, [sp, #68]	; 0x44
    5ecc:	2a00      	cmp	r2, #0
    5ece:	da01      	bge.n	5ed4 <_svfprintf_r+0x3d4>
    5ed0:	f000 fcc0 	bl	6854 <_svfprintf_r+0xd54>
    5ed4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5ed6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5ed8:	431a      	orrs	r2, r3
    5eda:	1e53      	subs	r3, r2, #1
    5edc:	419a      	sbcs	r2, r3
    5ede:	2301      	movs	r3, #1
    5ee0:	2e00      	cmp	r6, #0
    5ee2:	db03      	blt.n	5eec <_svfprintf_r+0x3ec>
    5ee4:	9f07      	ldr	r7, [sp, #28]
    5ee6:	2180      	movs	r1, #128	; 0x80
    5ee8:	438f      	bics	r7, r1
    5eea:	9707      	str	r7, [sp, #28]
    5eec:	2e00      	cmp	r6, #0
    5eee:	d102      	bne.n	5ef6 <_svfprintf_r+0x3f6>
    5ef0:	2a00      	cmp	r2, #0
    5ef2:	d100      	bne.n	5ef6 <_svfprintf_r+0x3f6>
    5ef4:	e255      	b.n	63a2 <_svfprintf_r+0x8a2>
    5ef6:	2b01      	cmp	r3, #1
    5ef8:	d100      	bne.n	5efc <_svfprintf_r+0x3fc>
    5efa:	e3af      	b.n	665c <_svfprintf_r+0xb5c>
    5efc:	2b02      	cmp	r3, #2
    5efe:	d100      	bne.n	5f02 <_svfprintf_r+0x402>
    5f00:	e38e      	b.n	6620 <_svfprintf_r+0xb20>
    5f02:	4659      	mov	r1, fp
    5f04:	2007      	movs	r0, #7
    5f06:	9413      	str	r4, [sp, #76]	; 0x4c
    5f08:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5f0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5f0c:	910a      	str	r1, [sp, #40]	; 0x28
    5f0e:	4684      	mov	ip, r0
    5f10:	1c21      	adds	r1, r4, #0
    5f12:	46a8      	mov	r8, r5
    5f14:	08d7      	lsrs	r7, r2, #3
    5f16:	0758      	lsls	r0, r3, #29
    5f18:	46ba      	mov	sl, r7
    5f1a:	4665      	mov	r5, ip
    5f1c:	4015      	ands	r5, r2
    5f1e:	1c07      	adds	r7, r0, #0
    5f20:	4650      	mov	r0, sl
    5f22:	4307      	orrs	r7, r0
    5f24:	3901      	subs	r1, #1
    5f26:	3530      	adds	r5, #48	; 0x30
    5f28:	08d8      	lsrs	r0, r3, #3
    5f2a:	700d      	strb	r5, [r1, #0]
    5f2c:	1c3a      	adds	r2, r7, #0
    5f2e:	1c03      	adds	r3, r0, #0
    5f30:	4307      	orrs	r7, r0
    5f32:	d1ef      	bne.n	5f14 <_svfprintf_r+0x414>
    5f34:	980a      	ldr	r0, [sp, #40]	; 0x28
    5f36:	9113      	str	r1, [sp, #76]	; 0x4c
    5f38:	9907      	ldr	r1, [sp, #28]
    5f3a:	1c2f      	adds	r7, r5, #0
    5f3c:	4683      	mov	fp, r0
    5f3e:	9210      	str	r2, [sp, #64]	; 0x40
    5f40:	9311      	str	r3, [sp, #68]	; 0x44
    5f42:	4645      	mov	r5, r8
    5f44:	07c9      	lsls	r1, r1, #31
    5f46:	d501      	bpl.n	5f4c <_svfprintf_r+0x44c>
    5f48:	f000 fc78 	bl	683c <_svfprintf_r+0xd3c>
    5f4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5f4e:	1aa2      	subs	r2, r4, r2
    5f50:	920c      	str	r2, [sp, #48]	; 0x30
    5f52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5f54:	920a      	str	r2, [sp, #40]	; 0x28
    5f56:	42b2      	cmp	r2, r6
    5f58:	da00      	bge.n	5f5c <_svfprintf_r+0x45c>
    5f5a:	960a      	str	r6, [sp, #40]	; 0x28
    5f5c:	464b      	mov	r3, r9
    5f5e:	9614      	str	r6, [sp, #80]	; 0x50
    5f60:	2600      	movs	r6, #0
    5f62:	781a      	ldrb	r2, [r3, #0]
    5f64:	9618      	str	r6, [sp, #96]	; 0x60
    5f66:	2a00      	cmp	r2, #0
    5f68:	d100      	bne.n	5f6c <_svfprintf_r+0x46c>
    5f6a:	e647      	b.n	5bfc <_svfprintf_r+0xfc>
    5f6c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    5f6e:	3701      	adds	r7, #1
    5f70:	970a      	str	r7, [sp, #40]	; 0x28
    5f72:	e643      	b.n	5bfc <_svfprintf_r+0xfc>
    5f74:	9807      	ldr	r0, [sp, #28]
    5f76:	465e      	mov	r6, fp
    5f78:	9316      	str	r3, [sp, #88]	; 0x58
    5f7a:	468b      	mov	fp, r1
    5f7c:	4698      	mov	r8, r3
    5f7e:	0700      	lsls	r0, r0, #28
    5f80:	d401      	bmi.n	5f86 <_svfprintf_r+0x486>
    5f82:	f000 fcc3 	bl	690c <_svfprintf_r+0xe0c>
    5f86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5f88:	2307      	movs	r3, #7
    5f8a:	3207      	adds	r2, #7
    5f8c:	439a      	bics	r2, r3
    5f8e:	6813      	ldr	r3, [r2, #0]
    5f90:	2108      	movs	r1, #8
    5f92:	1889      	adds	r1, r1, r2
    5f94:	910f      	str	r1, [sp, #60]	; 0x3c
    5f96:	931a      	str	r3, [sp, #104]	; 0x68
    5f98:	6852      	ldr	r2, [r2, #4]
    5f9a:	921b      	str	r2, [sp, #108]	; 0x6c
    5f9c:	981a      	ldr	r0, [sp, #104]	; 0x68
    5f9e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5fa0:	f005 f818 	bl	afd4 <__fpclassifyd>
    5fa4:	2801      	cmp	r0, #1
    5fa6:	d001      	beq.n	5fac <_svfprintf_r+0x4ac>
    5fa8:	f000 fc68 	bl	687c <_svfprintf_r+0xd7c>
    5fac:	981a      	ldr	r0, [sp, #104]	; 0x68
    5fae:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5fb0:	4bc8      	ldr	r3, [pc, #800]	; (62d4 <_svfprintf_r+0x7d4>)
    5fb2:	4ac7      	ldr	r2, [pc, #796]	; (62d0 <_svfprintf_r+0x7d0>)
    5fb4:	f008 f900 	bl	e1b8 <____aeabi_dcmplt_from_thumb>
    5fb8:	2800      	cmp	r0, #0
    5fba:	d001      	beq.n	5fc0 <_svfprintf_r+0x4c0>
    5fbc:	f000 ff23 	bl	6e06 <_svfprintf_r+0x1306>
    5fc0:	4649      	mov	r1, r9
    5fc2:	780a      	ldrb	r2, [r1, #0]
    5fc4:	9e16      	ldr	r6, [sp, #88]	; 0x58
    5fc6:	2e47      	cmp	r6, #71	; 0x47
    5fc8:	dd01      	ble.n	5fce <_svfprintf_r+0x4ce>
    5fca:	f000 fdd4 	bl	6b76 <_svfprintf_r+0x1076>
    5fce:	4fc2      	ldr	r7, [pc, #776]	; (62d8 <_svfprintf_r+0x7d8>)
    5fd0:	9713      	str	r7, [sp, #76]	; 0x4c
    5fd2:	9907      	ldr	r1, [sp, #28]
    5fd4:	2380      	movs	r3, #128	; 0x80
    5fd6:	4399      	bics	r1, r3
    5fd8:	2600      	movs	r6, #0
    5fda:	3b7d      	subs	r3, #125	; 0x7d
    5fdc:	9107      	str	r1, [sp, #28]
    5fde:	930a      	str	r3, [sp, #40]	; 0x28
    5fe0:	930c      	str	r3, [sp, #48]	; 0x30
    5fe2:	9614      	str	r6, [sp, #80]	; 0x50
    5fe4:	9618      	str	r6, [sp, #96]	; 0x60
    5fe6:	e7be      	b.n	5f66 <_svfprintf_r+0x466>
    5fe8:	9f07      	ldr	r7, [sp, #28]
    5fea:	2308      	movs	r3, #8
    5fec:	431f      	orrs	r7, r3
    5fee:	9707      	str	r7, [sp, #28]
    5ff0:	780b      	ldrb	r3, [r1, #0]
    5ff2:	e5ea      	b.n	5bca <_svfprintf_r+0xca>
    5ff4:	9a07      	ldr	r2, [sp, #28]
    5ff6:	9316      	str	r3, [sp, #88]	; 0x58
    5ff8:	2310      	movs	r3, #16
    5ffa:	431a      	orrs	r2, r3
    5ffc:	9207      	str	r2, [sp, #28]
    5ffe:	465e      	mov	r6, fp
    6000:	468b      	mov	fp, r1
    6002:	9b07      	ldr	r3, [sp, #28]
    6004:	2120      	movs	r1, #32
    6006:	4019      	ands	r1, r3
    6008:	d100      	bne.n	600c <_svfprintf_r+0x50c>
    600a:	e3b5      	b.n	6778 <_svfprintf_r+0xc78>
    600c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    600e:	2307      	movs	r3, #7
    6010:	3207      	adds	r2, #7
    6012:	439a      	bics	r2, r3
    6014:	6810      	ldr	r0, [r2, #0]
    6016:	6851      	ldr	r1, [r2, #4]
    6018:	2708      	movs	r7, #8
    601a:	18bf      	adds	r7, r7, r2
    601c:	9010      	str	r0, [sp, #64]	; 0x40
    601e:	9111      	str	r1, [sp, #68]	; 0x44
    6020:	1c02      	adds	r2, r0, #0
    6022:	430a      	orrs	r2, r1
    6024:	970f      	str	r7, [sp, #60]	; 0x3c
    6026:	1e53      	subs	r3, r2, #1
    6028:	419a      	sbcs	r2, r3
    602a:	2300      	movs	r3, #0
    602c:	2000      	movs	r0, #0
    602e:	464f      	mov	r7, r9
    6030:	7038      	strb	r0, [r7, #0]
    6032:	e755      	b.n	5ee0 <_svfprintf_r+0x3e0>
    6034:	9807      	ldr	r0, [sp, #28]
    6036:	9316      	str	r3, [sp, #88]	; 0x58
    6038:	2310      	movs	r3, #16
    603a:	4318      	orrs	r0, r3
    603c:	9007      	str	r0, [sp, #28]
    603e:	465e      	mov	r6, fp
    6040:	468b      	mov	fp, r1
    6042:	9907      	ldr	r1, [sp, #28]
    6044:	2220      	movs	r2, #32
    6046:	400a      	ands	r2, r1
    6048:	d100      	bne.n	604c <_svfprintf_r+0x54c>
    604a:	e382      	b.n	6752 <_svfprintf_r+0xc52>
    604c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    604e:	2307      	movs	r3, #7
    6050:	3207      	adds	r2, #7
    6052:	439a      	bics	r2, r3
    6054:	6810      	ldr	r0, [r2, #0]
    6056:	6851      	ldr	r1, [r2, #4]
    6058:	3301      	adds	r3, #1
    605a:	189b      	adds	r3, r3, r2
    605c:	1c02      	adds	r2, r0, #0
    605e:	430a      	orrs	r2, r1
    6060:	930f      	str	r3, [sp, #60]	; 0x3c
    6062:	9010      	str	r0, [sp, #64]	; 0x40
    6064:	9111      	str	r1, [sp, #68]	; 0x44
    6066:	1e53      	subs	r3, r2, #1
    6068:	419a      	sbcs	r2, r3
    606a:	2301      	movs	r3, #1
    606c:	e7de      	b.n	602c <_svfprintf_r+0x52c>
    606e:	465e      	mov	r6, fp
    6070:	489a      	ldr	r0, [pc, #616]	; (62dc <_svfprintf_r+0x7dc>)
    6072:	468b      	mov	fp, r1
    6074:	9907      	ldr	r1, [sp, #28]
    6076:	2220      	movs	r2, #32
    6078:	9316      	str	r3, [sp, #88]	; 0x58
    607a:	9017      	str	r0, [sp, #92]	; 0x5c
    607c:	400a      	ands	r2, r1
    607e:	d100      	bne.n	6082 <_svfprintf_r+0x582>
    6080:	e0f3      	b.n	626a <_svfprintf_r+0x76a>
    6082:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6084:	2307      	movs	r3, #7
    6086:	3207      	adds	r2, #7
    6088:	439a      	bics	r2, r3
    608a:	6810      	ldr	r0, [r2, #0]
    608c:	6851      	ldr	r1, [r2, #4]
    608e:	3301      	adds	r3, #1
    6090:	189b      	adds	r3, r3, r2
    6092:	9010      	str	r0, [sp, #64]	; 0x40
    6094:	9111      	str	r1, [sp, #68]	; 0x44
    6096:	930f      	str	r3, [sp, #60]	; 0x3c
    6098:	9a10      	ldr	r2, [sp, #64]	; 0x40
    609a:	9f11      	ldr	r7, [sp, #68]	; 0x44
    609c:	433a      	orrs	r2, r7
    609e:	1e53      	subs	r3, r2, #1
    60a0:	419a      	sbcs	r2, r3
    60a2:	2a00      	cmp	r2, #0
    60a4:	d100      	bne.n	60a8 <_svfprintf_r+0x5a8>
    60a6:	e365      	b.n	6774 <_svfprintf_r+0xc74>
    60a8:	9807      	ldr	r0, [sp, #28]
    60aa:	2301      	movs	r3, #1
    60ac:	4218      	tst	r0, r3
    60ae:	d100      	bne.n	60b2 <_svfprintf_r+0x5b2>
    60b0:	e360      	b.n	6774 <_svfprintf_r+0xc74>
    60b2:	aa43      	add	r2, sp, #268	; 0x10c
    60b4:	2130      	movs	r1, #48	; 0x30
    60b6:	7011      	strb	r1, [r2, #0]
    60b8:	a916      	add	r1, sp, #88	; 0x58
    60ba:	7809      	ldrb	r1, [r1, #0]
    60bc:	7051      	strb	r1, [r2, #1]
    60be:	2102      	movs	r1, #2
    60c0:	4308      	orrs	r0, r1
    60c2:	1c1a      	adds	r2, r3, #0
    60c4:	9007      	str	r0, [sp, #28]
    60c6:	1c0b      	adds	r3, r1, #0
    60c8:	e7b0      	b.n	602c <_svfprintf_r+0x52c>
    60ca:	780b      	ldrb	r3, [r1, #0]
    60cc:	3101      	adds	r1, #1
    60ce:	2b2a      	cmp	r3, #42	; 0x2a
    60d0:	d101      	bne.n	60d6 <_svfprintf_r+0x5d6>
    60d2:	f000 ff9d 	bl	7010 <_svfprintf_r+0x1510>
    60d6:	2630      	movs	r6, #48	; 0x30
    60d8:	4276      	negs	r6, r6
    60da:	18f6      	adds	r6, r6, r3
    60dc:	2700      	movs	r7, #0
    60de:	960a      	str	r6, [sp, #40]	; 0x28
    60e0:	46bb      	mov	fp, r7
    60e2:	2e09      	cmp	r6, #9
    60e4:	d900      	bls.n	60e8 <_svfprintf_r+0x5e8>
    60e6:	e571      	b.n	5bcc <_svfprintf_r+0xcc>
    60e8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    60ea:	46a8      	mov	r8, r5
    60ec:	1c3b      	adds	r3, r7, #0
    60ee:	009d      	lsls	r5, r3, #2
    60f0:	18eb      	adds	r3, r5, r3
    60f2:	780d      	ldrb	r5, [r1, #0]
    60f4:	005b      	lsls	r3, r3, #1
    60f6:	199b      	adds	r3, r3, r6
    60f8:	1c2e      	adds	r6, r5, #0
    60fa:	3e30      	subs	r6, #48	; 0x30
    60fc:	3101      	adds	r1, #1
    60fe:	2e09      	cmp	r6, #9
    6100:	d9f5      	bls.n	60ee <_svfprintf_r+0x5ee>
    6102:	469b      	mov	fp, r3
    6104:	465e      	mov	r6, fp
    6106:	1c2b      	adds	r3, r5, #0
    6108:	4645      	mov	r5, r8
    610a:	2e00      	cmp	r6, #0
    610c:	46b3      	mov	fp, r6
    610e:	db00      	blt.n	6112 <_svfprintf_r+0x612>
    6110:	e55c      	b.n	5bcc <_svfprintf_r+0xcc>
    6112:	2601      	movs	r6, #1
    6114:	4276      	negs	r6, r6
    6116:	46b3      	mov	fp, r6
    6118:	e558      	b.n	5bcc <_svfprintf_r+0xcc>
    611a:	9e07      	ldr	r6, [sp, #28]
    611c:	4667      	mov	r7, ip
    611e:	433e      	orrs	r6, r7
    6120:	9607      	str	r6, [sp, #28]
    6122:	780b      	ldrb	r3, [r1, #0]
    6124:	e551      	b.n	5bca <_svfprintf_r+0xca>
    6126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6128:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    612a:	681b      	ldr	r3, [r3, #0]
    612c:	3604      	adds	r6, #4
    612e:	930b      	str	r3, [sp, #44]	; 0x2c
    6130:	2b00      	cmp	r3, #0
    6132:	da00      	bge.n	6136 <_svfprintf_r+0x636>
    6134:	e680      	b.n	5e38 <_svfprintf_r+0x338>
    6136:	780b      	ldrb	r3, [r1, #0]
    6138:	960f      	str	r6, [sp, #60]	; 0x3c
    613a:	e546      	b.n	5bca <_svfprintf_r+0xca>
    613c:	232b      	movs	r3, #43	; 0x2b
    613e:	464f      	mov	r7, r9
    6140:	703b      	strb	r3, [r7, #0]
    6142:	780b      	ldrb	r3, [r1, #0]
    6144:	e541      	b.n	5bca <_svfprintf_r+0xca>
    6146:	9f07      	ldr	r7, [sp, #28]
    6148:	4653      	mov	r3, sl
    614a:	431f      	orrs	r7, r3
    614c:	9707      	str	r7, [sp, #28]
    614e:	780b      	ldrb	r3, [r1, #0]
    6150:	e53b      	b.n	5bca <_svfprintf_r+0xca>
    6152:	3b30      	subs	r3, #48	; 0x30
    6154:	2600      	movs	r6, #0
    6156:	930a      	str	r3, [sp, #40]	; 0x28
    6158:	960b      	str	r6, [sp, #44]	; 0x2c
    615a:	1c33      	adds	r3, r6, #0
    615c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    615e:	46a8      	mov	r8, r5
    6160:	009d      	lsls	r5, r3, #2
    6162:	18eb      	adds	r3, r5, r3
    6164:	780d      	ldrb	r5, [r1, #0]
    6166:	005b      	lsls	r3, r3, #1
    6168:	18f3      	adds	r3, r6, r3
    616a:	1c2e      	adds	r6, r5, #0
    616c:	3e30      	subs	r6, #48	; 0x30
    616e:	3101      	adds	r1, #1
    6170:	2e09      	cmp	r6, #9
    6172:	d9f5      	bls.n	6160 <_svfprintf_r+0x660>
    6174:	930b      	str	r3, [sp, #44]	; 0x2c
    6176:	1c2b      	adds	r3, r5, #0
    6178:	4645      	mov	r5, r8
    617a:	e527      	b.n	5bcc <_svfprintf_r+0xcc>
    617c:	464e      	mov	r6, r9
    617e:	7833      	ldrb	r3, [r6, #0]
    6180:	2b00      	cmp	r3, #0
    6182:	d000      	beq.n	6186 <_svfprintf_r+0x686>
    6184:	e377      	b.n	6876 <_svfprintf_r+0xd76>
    6186:	7030      	strb	r0, [r6, #0]
    6188:	780b      	ldrb	r3, [r1, #0]
    618a:	e51e      	b.n	5bca <_svfprintf_r+0xca>
    618c:	9f07      	ldr	r7, [sp, #28]
    618e:	2301      	movs	r3, #1
    6190:	431f      	orrs	r7, r3
    6192:	9707      	str	r7, [sp, #28]
    6194:	780b      	ldrb	r3, [r1, #0]
    6196:	e518      	b.n	5bca <_svfprintf_r+0xca>
    6198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    619a:	1c16      	adds	r6, r2, #0
    619c:	6812      	ldr	r2, [r2, #0]
    619e:	9316      	str	r3, [sp, #88]	; 0x58
    61a0:	ab2f      	add	r3, sp, #188	; 0xbc
    61a2:	468b      	mov	fp, r1
    61a4:	3604      	adds	r6, #4
    61a6:	2101      	movs	r1, #1
    61a8:	701a      	strb	r2, [r3, #0]
    61aa:	2000      	movs	r0, #0
    61ac:	2200      	movs	r2, #0
    61ae:	464f      	mov	r7, r9
    61b0:	960f      	str	r6, [sp, #60]	; 0x3c
    61b2:	7038      	strb	r0, [r7, #0]
    61b4:	910a      	str	r1, [sp, #40]	; 0x28
    61b6:	910c      	str	r1, [sp, #48]	; 0x30
    61b8:	9214      	str	r2, [sp, #80]	; 0x50
    61ba:	9218      	str	r2, [sp, #96]	; 0x60
    61bc:	9313      	str	r3, [sp, #76]	; 0x4c
    61be:	e51d      	b.n	5bfc <_svfprintf_r+0xfc>
    61c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    61c2:	1c1f      	adds	r7, r3, #0
    61c4:	681b      	ldr	r3, [r3, #0]
    61c6:	465e      	mov	r6, fp
    61c8:	468b      	mov	fp, r1
    61ca:	9907      	ldr	r1, [sp, #28]
    61cc:	9310      	str	r3, [sp, #64]	; 0x40
    61ce:	2302      	movs	r3, #2
    61d0:	2000      	movs	r0, #0
    61d2:	4319      	orrs	r1, r3
    61d4:	aa43      	add	r2, sp, #268	; 0x10c
    61d6:	3704      	adds	r7, #4
    61d8:	9011      	str	r0, [sp, #68]	; 0x44
    61da:	9107      	str	r1, [sp, #28]
    61dc:	3078      	adds	r0, #120	; 0x78
    61de:	2130      	movs	r1, #48	; 0x30
    61e0:	7011      	strb	r1, [r2, #0]
    61e2:	970f      	str	r7, [sp, #60]	; 0x3c
    61e4:	7050      	strb	r0, [r2, #1]
    61e6:	4f3e      	ldr	r7, [pc, #248]	; (62e0 <_svfprintf_r+0x7e0>)
    61e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    61ea:	9717      	str	r7, [sp, #92]	; 0x5c
    61ec:	1e51      	subs	r1, r2, #1
    61ee:	418a      	sbcs	r2, r1
    61f0:	9016      	str	r0, [sp, #88]	; 0x58
    61f2:	e71b      	b.n	602c <_svfprintf_r+0x52c>
    61f4:	9b07      	ldr	r3, [sp, #28]
    61f6:	4303      	orrs	r3, r0
    61f8:	9307      	str	r3, [sp, #28]
    61fa:	780b      	ldrb	r3, [r1, #0]
    61fc:	e4e5      	b.n	5bca <_svfprintf_r+0xca>
    61fe:	465e      	mov	r6, fp
    6200:	4648      	mov	r0, r9
    6202:	468b      	mov	fp, r1
    6204:	2100      	movs	r1, #0
    6206:	7001      	strb	r1, [r0, #0]
    6208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    620a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    620c:	6812      	ldr	r2, [r2, #0]
    620e:	9316      	str	r3, [sp, #88]	; 0x58
    6210:	3704      	adds	r7, #4
    6212:	9213      	str	r2, [sp, #76]	; 0x4c
    6214:	2a00      	cmp	r2, #0
    6216:	d101      	bne.n	621c <_svfprintf_r+0x71c>
    6218:	f000 fe40 	bl	6e9c <_svfprintf_r+0x139c>
    621c:	2e00      	cmp	r6, #0
    621e:	da01      	bge.n	6224 <_svfprintf_r+0x724>
    6220:	f000 fdf8 	bl	6e14 <_svfprintf_r+0x1314>
    6224:	9813      	ldr	r0, [sp, #76]	; 0x4c
    6226:	2100      	movs	r1, #0
    6228:	1c32      	adds	r2, r6, #0
    622a:	f003 fee3 	bl	9ff4 <memchr>
    622e:	2800      	cmp	r0, #0
    6230:	d101      	bne.n	6236 <_svfprintf_r+0x736>
    6232:	f000 fe88 	bl	6f46 <_svfprintf_r+0x1446>
    6236:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6238:	1a80      	subs	r0, r0, r2
    623a:	900c      	str	r0, [sp, #48]	; 0x30
    623c:	42b0      	cmp	r0, r6
    623e:	dc01      	bgt.n	6244 <_svfprintf_r+0x744>
    6240:	f000 fc7a 	bl	6b38 <_svfprintf_r+0x1038>
    6244:	960a      	str	r6, [sp, #40]	; 0x28
    6246:	464b      	mov	r3, r9
    6248:	960c      	str	r6, [sp, #48]	; 0x30
    624a:	2600      	movs	r6, #0
    624c:	781a      	ldrb	r2, [r3, #0]
    624e:	970f      	str	r7, [sp, #60]	; 0x3c
    6250:	9614      	str	r6, [sp, #80]	; 0x50
    6252:	9618      	str	r6, [sp, #96]	; 0x60
    6254:	e687      	b.n	5f66 <_svfprintf_r+0x466>
    6256:	465e      	mov	r6, fp
    6258:	4f21      	ldr	r7, [pc, #132]	; (62e0 <_svfprintf_r+0x7e0>)
    625a:	468b      	mov	fp, r1
    625c:	9907      	ldr	r1, [sp, #28]
    625e:	2220      	movs	r2, #32
    6260:	9316      	str	r3, [sp, #88]	; 0x58
    6262:	9717      	str	r7, [sp, #92]	; 0x5c
    6264:	400a      	ands	r2, r1
    6266:	d000      	beq.n	626a <_svfprintf_r+0x76a>
    6268:	e70b      	b.n	6082 <_svfprintf_r+0x582>
    626a:	9907      	ldr	r1, [sp, #28]
    626c:	2310      	movs	r3, #16
    626e:	4019      	ands	r1, r3
    6270:	d100      	bne.n	6274 <_svfprintf_r+0x774>
    6272:	e364      	b.n	693e <_svfprintf_r+0xe3e>
    6274:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6276:	6809      	ldr	r1, [r1, #0]
    6278:	9211      	str	r2, [sp, #68]	; 0x44
    627a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    627c:	3204      	adds	r2, #4
    627e:	9110      	str	r1, [sp, #64]	; 0x40
    6280:	920f      	str	r2, [sp, #60]	; 0x3c
    6282:	e709      	b.n	6098 <_svfprintf_r+0x598>
    6284:	780b      	ldrb	r3, [r1, #0]
    6286:	2b6c      	cmp	r3, #108	; 0x6c
    6288:	d101      	bne.n	628e <_svfprintf_r+0x78e>
    628a:	f000 fc4a 	bl	6b22 <_svfprintf_r+0x1022>
    628e:	9e07      	ldr	r6, [sp, #28]
    6290:	2710      	movs	r7, #16
    6292:	433e      	orrs	r6, r7
    6294:	9607      	str	r6, [sp, #28]
    6296:	e498      	b.n	5bca <_svfprintf_r+0xca>
    6298:	468b      	mov	fp, r1
    629a:	9907      	ldr	r1, [sp, #28]
    629c:	0689      	lsls	r1, r1, #26
    629e:	d400      	bmi.n	62a2 <_svfprintf_r+0x7a2>
    62a0:	e341      	b.n	6926 <_svfprintf_r+0xe26>
    62a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    62a4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    62a6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    62a8:	6813      	ldr	r3, [r2, #0]
    62aa:	3704      	adds	r7, #4
    62ac:	17f2      	asrs	r2, r6, #31
    62ae:	601e      	str	r6, [r3, #0]
    62b0:	605a      	str	r2, [r3, #4]
    62b2:	970f      	str	r7, [sp, #60]	; 0x3c
    62b4:	e44d      	b.n	5b52 <_svfprintf_r+0x52>
    62b6:	465e      	mov	r6, fp
    62b8:	9316      	str	r3, [sp, #88]	; 0x58
    62ba:	468b      	mov	fp, r1
    62bc:	e5f5      	b.n	5eaa <_svfprintf_r+0x3aa>
    62be:	465e      	mov	r6, fp
    62c0:	9316      	str	r3, [sp, #88]	; 0x58
    62c2:	468b      	mov	fp, r1
    62c4:	e6bd      	b.n	6042 <_svfprintf_r+0x542>
    62c6:	465e      	mov	r6, fp
    62c8:	9316      	str	r3, [sp, #88]	; 0x58
    62ca:	468b      	mov	fp, r1
    62cc:	e699      	b.n	6002 <_svfprintf_r+0x502>
    62ce:	46c0      	nop			; (mov r8, r8)
	...
    62d8:	0000edc0 	.word	0x0000edc0
    62dc:	0000edd0 	.word	0x0000edd0
    62e0:	0000ede4 	.word	0x0000ede4
    62e4:	9e16      	ldr	r6, [sp, #88]	; 0x58
    62e6:	2e65      	cmp	r6, #101	; 0x65
    62e8:	dc00      	bgt.n	62ec <_svfprintf_r+0x7ec>
    62ea:	e0bb      	b.n	6464 <_svfprintf_r+0x964>
    62ec:	981a      	ldr	r0, [sp, #104]	; 0x68
    62ee:	991b      	ldr	r1, [sp, #108]	; 0x6c
    62f0:	4bc8      	ldr	r3, [pc, #800]	; (6614 <_svfprintf_r+0xb14>)
    62f2:	4ac7      	ldr	r2, [pc, #796]	; (6610 <_svfprintf_r+0xb10>)
    62f4:	f007 ff64 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    62f8:	2800      	cmp	r0, #0
    62fa:	d100      	bne.n	62fe <_svfprintf_r+0x7fe>
    62fc:	e133      	b.n	6566 <_svfprintf_r+0xa66>
    62fe:	4bc6      	ldr	r3, [pc, #792]	; (6618 <_svfprintf_r+0xb18>)
    6300:	603b      	str	r3, [r7, #0]
    6302:	2301      	movs	r3, #1
    6304:	607b      	str	r3, [r7, #4]
    6306:	68a3      	ldr	r3, [r4, #8]
    6308:	3301      	adds	r3, #1
    630a:	60a3      	str	r3, [r4, #8]
    630c:	6863      	ldr	r3, [r4, #4]
    630e:	3301      	adds	r3, #1
    6310:	6063      	str	r3, [r4, #4]
    6312:	2b07      	cmp	r3, #7
    6314:	dd00      	ble.n	6318 <_svfprintf_r+0x818>
    6316:	e3a9      	b.n	6a6c <_svfprintf_r+0xf6c>
    6318:	1c3b      	adds	r3, r7, #0
    631a:	3308      	adds	r3, #8
    631c:	9a42      	ldr	r2, [sp, #264]	; 0x108
    631e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6320:	42ba      	cmp	r2, r7
    6322:	db03      	blt.n	632c <_svfprintf_r+0x82c>
    6324:	9807      	ldr	r0, [sp, #28]
    6326:	07c0      	lsls	r0, r0, #31
    6328:	d400      	bmi.n	632c <_svfprintf_r+0x82c>
    632a:	e52e      	b.n	5d8a <_svfprintf_r+0x28a>
    632c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    632e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    6330:	605a      	str	r2, [r3, #4]
    6332:	68a2      	ldr	r2, [r4, #8]
    6334:	9919      	ldr	r1, [sp, #100]	; 0x64
    6336:	1952      	adds	r2, r2, r5
    6338:	6019      	str	r1, [r3, #0]
    633a:	60a2      	str	r2, [r4, #8]
    633c:	6862      	ldr	r2, [r4, #4]
    633e:	3201      	adds	r2, #1
    6340:	6062      	str	r2, [r4, #4]
    6342:	2a07      	cmp	r2, #7
    6344:	dd01      	ble.n	634a <_svfprintf_r+0x84a>
    6346:	f000 fc1a 	bl	6b7e <_svfprintf_r+0x107e>
    634a:	1c1a      	adds	r2, r3, #0
    634c:	3208      	adds	r2, #8
    634e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    6350:	3d01      	subs	r5, #1
    6352:	2d00      	cmp	r5, #0
    6354:	dc00      	bgt.n	6358 <_svfprintf_r+0x858>
    6356:	e379      	b.n	6a4c <_svfprintf_r+0xf4c>
    6358:	2d10      	cmp	r5, #16
    635a:	dc00      	bgt.n	635e <_svfprintf_r+0x85e>
    635c:	e2a9      	b.n	68b2 <_svfprintf_r+0xdb2>
    635e:	4eaf      	ldr	r6, [pc, #700]	; (661c <_svfprintf_r+0xb1c>)
    6360:	2710      	movs	r7, #16
    6362:	46b0      	mov	r8, r6
    6364:	1c3e      	adds	r6, r7, #0
    6366:	4446      	add	r6, r8
    6368:	e006      	b.n	6378 <_svfprintf_r+0x878>
    636a:	3208      	adds	r2, #8
    636c:	1c13      	adds	r3, r2, #0
    636e:	3308      	adds	r3, #8
    6370:	3d10      	subs	r5, #16
    6372:	2d10      	cmp	r5, #16
    6374:	dc00      	bgt.n	6378 <_svfprintf_r+0x878>
    6376:	e2a0      	b.n	68ba <_svfprintf_r+0xdba>
    6378:	68a3      	ldr	r3, [r4, #8]
    637a:	3310      	adds	r3, #16
    637c:	6016      	str	r6, [r2, #0]
    637e:	6057      	str	r7, [r2, #4]
    6380:	60a3      	str	r3, [r4, #8]
    6382:	6863      	ldr	r3, [r4, #4]
    6384:	3301      	adds	r3, #1
    6386:	6063      	str	r3, [r4, #4]
    6388:	2b07      	cmp	r3, #7
    638a:	ddee      	ble.n	636a <_svfprintf_r+0x86a>
    638c:	9809      	ldr	r0, [sp, #36]	; 0x24
    638e:	9908      	ldr	r1, [sp, #32]
    6390:	1c22      	adds	r2, r4, #0
    6392:	f004 fe77 	bl	b084 <__ssprint_r>
    6396:	2800      	cmp	r0, #0
    6398:	d000      	beq.n	639c <_svfprintf_r+0x89c>
    639a:	e568      	b.n	5e6e <_svfprintf_r+0x36e>
    639c:	ab21      	add	r3, sp, #132	; 0x84
    639e:	aa1f      	add	r2, sp, #124	; 0x7c
    63a0:	e7e6      	b.n	6370 <_svfprintf_r+0x870>
    63a2:	2b00      	cmp	r3, #0
    63a4:	d000      	beq.n	63a8 <_svfprintf_r+0x8a8>
    63a6:	e0ba      	b.n	651e <_svfprintf_r+0xa1e>
    63a8:	9807      	ldr	r0, [sp, #28]
    63aa:	07c0      	lsls	r0, r0, #31
    63ac:	d400      	bmi.n	63b0 <_svfprintf_r+0x8b0>
    63ae:	e12c      	b.n	660a <_svfprintf_r+0xb0a>
    63b0:	2127      	movs	r1, #39	; 0x27
    63b2:	ab2f      	add	r3, sp, #188	; 0xbc
    63b4:	2230      	movs	r2, #48	; 0x30
    63b6:	545a      	strb	r2, [r3, r1]
    63b8:	185b      	adds	r3, r3, r1
    63ba:	1ae1      	subs	r1, r4, r3
    63bc:	910c      	str	r1, [sp, #48]	; 0x30
    63be:	9313      	str	r3, [sp, #76]	; 0x4c
    63c0:	e5c7      	b.n	5f52 <_svfprintf_r+0x452>
    63c2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    63c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    63c6:	1a3e      	subs	r6, r7, r0
    63c8:	2e00      	cmp	r6, #0
    63ca:	dc00      	bgt.n	63ce <_svfprintf_r+0x8ce>
    63cc:	e487      	b.n	5cde <_svfprintf_r+0x1de>
    63ce:	2e10      	cmp	r6, #16
    63d0:	dc01      	bgt.n	63d6 <_svfprintf_r+0x8d6>
    63d2:	f000 fd9b 	bl	6f0c <_svfprintf_r+0x140c>
    63d6:	4a91      	ldr	r2, [pc, #580]	; (661c <_svfprintf_r+0xb1c>)
    63d8:	1c2b      	adds	r3, r5, #0
    63da:	2510      	movs	r5, #16
    63dc:	1c2f      	adds	r7, r5, #0
    63de:	4690      	mov	r8, r2
    63e0:	46a9      	mov	r9, r5
    63e2:	4447      	add	r7, r8
    63e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    63e6:	e005      	b.n	63f4 <_svfprintf_r+0x8f4>
    63e8:	3308      	adds	r3, #8
    63ea:	1c1a      	adds	r2, r3, #0
    63ec:	3e10      	subs	r6, #16
    63ee:	3208      	adds	r2, #8
    63f0:	2e10      	cmp	r6, #16
    63f2:	dd17      	ble.n	6424 <_svfprintf_r+0x924>
    63f4:	68a2      	ldr	r2, [r4, #8]
    63f6:	4648      	mov	r0, r9
    63f8:	3210      	adds	r2, #16
    63fa:	601f      	str	r7, [r3, #0]
    63fc:	6058      	str	r0, [r3, #4]
    63fe:	60a2      	str	r2, [r4, #8]
    6400:	6862      	ldr	r2, [r4, #4]
    6402:	3201      	adds	r2, #1
    6404:	6062      	str	r2, [r4, #4]
    6406:	2a07      	cmp	r2, #7
    6408:	ddee      	ble.n	63e8 <_svfprintf_r+0x8e8>
    640a:	1c28      	adds	r0, r5, #0
    640c:	9908      	ldr	r1, [sp, #32]
    640e:	1c22      	adds	r2, r4, #0
    6410:	f004 fe38 	bl	b084 <__ssprint_r>
    6414:	2800      	cmp	r0, #0
    6416:	d000      	beq.n	641a <_svfprintf_r+0x91a>
    6418:	e529      	b.n	5e6e <_svfprintf_r+0x36e>
    641a:	3e10      	subs	r6, #16
    641c:	aa21      	add	r2, sp, #132	; 0x84
    641e:	ab1f      	add	r3, sp, #124	; 0x7c
    6420:	2e10      	cmp	r6, #16
    6422:	dce7      	bgt.n	63f4 <_svfprintf_r+0x8f4>
    6424:	1c15      	adds	r5, r2, #0
    6426:	2110      	movs	r1, #16
    6428:	1c0a      	adds	r2, r1, #0
    642a:	4442      	add	r2, r8
    642c:	605e      	str	r6, [r3, #4]
    642e:	601a      	str	r2, [r3, #0]
    6430:	68a3      	ldr	r3, [r4, #8]
    6432:	18f6      	adds	r6, r6, r3
    6434:	6863      	ldr	r3, [r4, #4]
    6436:	3301      	adds	r3, #1
    6438:	60a6      	str	r6, [r4, #8]
    643a:	6063      	str	r3, [r4, #4]
    643c:	2b07      	cmp	r3, #7
    643e:	dc00      	bgt.n	6442 <_svfprintf_r+0x942>
    6440:	e44d      	b.n	5cde <_svfprintf_r+0x1de>
    6442:	9809      	ldr	r0, [sp, #36]	; 0x24
    6444:	9908      	ldr	r1, [sp, #32]
    6446:	1c22      	adds	r2, r4, #0
    6448:	f004 fe1c 	bl	b084 <__ssprint_r>
    644c:	2800      	cmp	r0, #0
    644e:	d000      	beq.n	6452 <_svfprintf_r+0x952>
    6450:	e50d      	b.n	5e6e <_svfprintf_r+0x36e>
    6452:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6456:	1ad6      	subs	r6, r2, r3
    6458:	ad1f      	add	r5, sp, #124	; 0x7c
    645a:	2e00      	cmp	r6, #0
    645c:	dd00      	ble.n	6460 <_svfprintf_r+0x960>
    645e:	e444      	b.n	5cea <_svfprintf_r+0x1ea>
    6460:	1c2f      	adds	r7, r5, #0
    6462:	e47f      	b.n	5d64 <_svfprintf_r+0x264>
    6464:	980d      	ldr	r0, [sp, #52]	; 0x34
    6466:	2801      	cmp	r0, #1
    6468:	dc00      	bgt.n	646c <_svfprintf_r+0x96c>
    646a:	e1b1      	b.n	67d0 <_svfprintf_r+0xcd0>
    646c:	2301      	movs	r3, #1
    646e:	607b      	str	r3, [r7, #4]
    6470:	68a3      	ldr	r3, [r4, #8]
    6472:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6474:	3301      	adds	r3, #1
    6476:	603a      	str	r2, [r7, #0]
    6478:	60a3      	str	r3, [r4, #8]
    647a:	6863      	ldr	r3, [r4, #4]
    647c:	3301      	adds	r3, #1
    647e:	6063      	str	r3, [r4, #4]
    6480:	2b07      	cmp	r3, #7
    6482:	dd00      	ble.n	6486 <_svfprintf_r+0x986>
    6484:	e1ce      	b.n	6824 <_svfprintf_r+0xd24>
    6486:	3708      	adds	r7, #8
    6488:	1c3d      	adds	r5, r7, #0
    648a:	3508      	adds	r5, #8
    648c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    648e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    6490:	603b      	str	r3, [r7, #0]
    6492:	68a3      	ldr	r3, [r4, #8]
    6494:	199b      	adds	r3, r3, r6
    6496:	607e      	str	r6, [r7, #4]
    6498:	60a3      	str	r3, [r4, #8]
    649a:	6863      	ldr	r3, [r4, #4]
    649c:	3301      	adds	r3, #1
    649e:	6063      	str	r3, [r4, #4]
    64a0:	2b07      	cmp	r3, #7
    64a2:	dd00      	ble.n	64a6 <_svfprintf_r+0x9a6>
    64a4:	e1b2      	b.n	680c <_svfprintf_r+0xd0c>
    64a6:	1c2f      	adds	r7, r5, #0
    64a8:	3708      	adds	r7, #8
    64aa:	981a      	ldr	r0, [sp, #104]	; 0x68
    64ac:	991b      	ldr	r1, [sp, #108]	; 0x6c
    64ae:	4b59      	ldr	r3, [pc, #356]	; (6614 <_svfprintf_r+0xb14>)
    64b0:	4a57      	ldr	r2, [pc, #348]	; (6610 <_svfprintf_r+0xb10>)
    64b2:	f007 fe85 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    64b6:	2800      	cmp	r0, #0
    64b8:	d000      	beq.n	64bc <_svfprintf_r+0x9bc>
    64ba:	e10d      	b.n	66d8 <_svfprintf_r+0xbd8>
    64bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    64be:	3301      	adds	r3, #1
    64c0:	602b      	str	r3, [r5, #0]
    64c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    64c4:	68a2      	ldr	r2, [r4, #8]
    64c6:	3b01      	subs	r3, #1
    64c8:	606b      	str	r3, [r5, #4]
    64ca:	189b      	adds	r3, r3, r2
    64cc:	60a3      	str	r3, [r4, #8]
    64ce:	6863      	ldr	r3, [r4, #4]
    64d0:	3301      	adds	r3, #1
    64d2:	6063      	str	r3, [r4, #4]
    64d4:	2b07      	cmp	r3, #7
    64d6:	dd00      	ble.n	64da <_svfprintf_r+0x9da>
    64d8:	e18c      	b.n	67f4 <_svfprintf_r+0xcf4>
    64da:	1c3b      	adds	r3, r7, #0
    64dc:	3308      	adds	r3, #8
    64de:	aa3e      	add	r2, sp, #248	; 0xf8
    64e0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    64e2:	603a      	str	r2, [r7, #0]
    64e4:	68a2      	ldr	r2, [r4, #8]
    64e6:	607e      	str	r6, [r7, #4]
    64e8:	1992      	adds	r2, r2, r6
    64ea:	60a2      	str	r2, [r4, #8]
    64ec:	6862      	ldr	r2, [r4, #4]
    64ee:	3201      	adds	r2, #1
    64f0:	6062      	str	r2, [r4, #4]
    64f2:	2a07      	cmp	r2, #7
    64f4:	dc00      	bgt.n	64f8 <_svfprintf_r+0x9f8>
    64f6:	e448      	b.n	5d8a <_svfprintf_r+0x28a>
    64f8:	9809      	ldr	r0, [sp, #36]	; 0x24
    64fa:	9908      	ldr	r1, [sp, #32]
    64fc:	1c22      	adds	r2, r4, #0
    64fe:	f004 fdc1 	bl	b084 <__ssprint_r>
    6502:	2800      	cmp	r0, #0
    6504:	d000      	beq.n	6508 <_svfprintf_r+0xa08>
    6506:	e4b2      	b.n	5e6e <_svfprintf_r+0x36e>
    6508:	ab1f      	add	r3, sp, #124	; 0x7c
    650a:	e43e      	b.n	5d8a <_svfprintf_r+0x28a>
    650c:	9809      	ldr	r0, [sp, #36]	; 0x24
    650e:	9908      	ldr	r1, [sp, #32]
    6510:	1c22      	adds	r2, r4, #0
    6512:	f004 fdb7 	bl	b084 <__ssprint_r>
    6516:	2800      	cmp	r0, #0
    6518:	d100      	bne.n	651c <_svfprintf_r+0xa1c>
    651a:	e47f      	b.n	5e1c <_svfprintf_r+0x31c>
    651c:	e4a7      	b.n	5e6e <_svfprintf_r+0x36e>
    651e:	920c      	str	r2, [sp, #48]	; 0x30
    6520:	9413      	str	r4, [sp, #76]	; 0x4c
    6522:	e516      	b.n	5f52 <_svfprintf_r+0x452>
    6524:	9809      	ldr	r0, [sp, #36]	; 0x24
    6526:	9908      	ldr	r1, [sp, #32]
    6528:	1c22      	adds	r2, r4, #0
    652a:	f004 fdab 	bl	b084 <__ssprint_r>
    652e:	2800      	cmp	r0, #0
    6530:	d000      	beq.n	6534 <_svfprintf_r+0xa34>
    6532:	e49c      	b.n	5e6e <_svfprintf_r+0x36e>
    6534:	af1f      	add	r7, sp, #124	; 0x7c
    6536:	f7ff fc15 	bl	5d64 <_svfprintf_r+0x264>
    653a:	9809      	ldr	r0, [sp, #36]	; 0x24
    653c:	9908      	ldr	r1, [sp, #32]
    653e:	1c22      	adds	r2, r4, #0
    6540:	f004 fda0 	bl	b084 <__ssprint_r>
    6544:	2800      	cmp	r0, #0
    6546:	d000      	beq.n	654a <_svfprintf_r+0xa4a>
    6548:	e491      	b.n	5e6e <_svfprintf_r+0x36e>
    654a:	ad1f      	add	r5, sp, #124	; 0x7c
    654c:	f7ff fbb1 	bl	5cb2 <_svfprintf_r+0x1b2>
    6550:	9809      	ldr	r0, [sp, #36]	; 0x24
    6552:	9908      	ldr	r1, [sp, #32]
    6554:	1c22      	adds	r2, r4, #0
    6556:	f004 fd95 	bl	b084 <__ssprint_r>
    655a:	2800      	cmp	r0, #0
    655c:	d000      	beq.n	6560 <_svfprintf_r+0xa60>
    655e:	e486      	b.n	5e6e <_svfprintf_r+0x36e>
    6560:	ad1f      	add	r5, sp, #124	; 0x7c
    6562:	f7ff fbb8 	bl	5cd6 <_svfprintf_r+0x1d6>
    6566:	9d42      	ldr	r5, [sp, #264]	; 0x108
    6568:	2d00      	cmp	r5, #0
    656a:	dc00      	bgt.n	656e <_svfprintf_r+0xa6e>
    656c:	e289      	b.n	6a82 <_svfprintf_r+0xf82>
    656e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6570:	468a      	mov	sl, r1
    6572:	990d      	ldr	r1, [sp, #52]	; 0x34
    6574:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6576:	448a      	add	sl, r1
    6578:	4652      	mov	r2, sl
    657a:	9e18      	ldr	r6, [sp, #96]	; 0x60
    657c:	1ad5      	subs	r5, r2, r3
    657e:	42b5      	cmp	r5, r6
    6580:	dd00      	ble.n	6584 <_svfprintf_r+0xa84>
    6582:	1c35      	adds	r5, r6, #0
    6584:	2d00      	cmp	r5, #0
    6586:	dd0d      	ble.n	65a4 <_svfprintf_r+0xaa4>
    6588:	68a3      	ldr	r3, [r4, #8]
    658a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    658c:	18eb      	adds	r3, r5, r3
    658e:	6038      	str	r0, [r7, #0]
    6590:	607d      	str	r5, [r7, #4]
    6592:	60a3      	str	r3, [r4, #8]
    6594:	6863      	ldr	r3, [r4, #4]
    6596:	3301      	adds	r3, #1
    6598:	6063      	str	r3, [r4, #4]
    659a:	3708      	adds	r7, #8
    659c:	2b07      	cmp	r3, #7
    659e:	dd01      	ble.n	65a4 <_svfprintf_r+0xaa4>
    65a0:	f000 fc4e 	bl	6e40 <_svfprintf_r+0x1340>
    65a4:	43eb      	mvns	r3, r5
    65a6:	17db      	asrs	r3, r3, #31
    65a8:	9918      	ldr	r1, [sp, #96]	; 0x60
    65aa:	401d      	ands	r5, r3
    65ac:	1b4d      	subs	r5, r1, r5
    65ae:	2d00      	cmp	r5, #0
    65b0:	dc01      	bgt.n	65b6 <_svfprintf_r+0xab6>
    65b2:	f000 fc2d 	bl	6e10 <_svfprintf_r+0x1310>
    65b6:	2d10      	cmp	r5, #16
    65b8:	dc01      	bgt.n	65be <_svfprintf_r+0xabe>
    65ba:	f000 fcfd 	bl	6fb8 <_svfprintf_r+0x14b8>
    65be:	4a17      	ldr	r2, [pc, #92]	; (661c <_svfprintf_r+0xb1c>)
    65c0:	2310      	movs	r3, #16
    65c2:	1c1e      	adds	r6, r3, #0
    65c4:	4690      	mov	r8, r2
    65c6:	4699      	mov	r9, r3
    65c8:	4446      	add	r6, r8
    65ca:	1c3b      	adds	r3, r7, #0
    65cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    65ce:	e006      	b.n	65de <_svfprintf_r+0xade>
    65d0:	3308      	adds	r3, #8
    65d2:	1c1a      	adds	r2, r3, #0
    65d4:	3208      	adds	r2, #8
    65d6:	3d10      	subs	r5, #16
    65d8:	2d10      	cmp	r5, #16
    65da:	dc00      	bgt.n	65de <_svfprintf_r+0xade>
    65dc:	e1bd      	b.n	695a <_svfprintf_r+0xe5a>
    65de:	68a2      	ldr	r2, [r4, #8]
    65e0:	4648      	mov	r0, r9
    65e2:	3210      	adds	r2, #16
    65e4:	601e      	str	r6, [r3, #0]
    65e6:	6058      	str	r0, [r3, #4]
    65e8:	60a2      	str	r2, [r4, #8]
    65ea:	6862      	ldr	r2, [r4, #4]
    65ec:	3201      	adds	r2, #1
    65ee:	6062      	str	r2, [r4, #4]
    65f0:	2a07      	cmp	r2, #7
    65f2:	dded      	ble.n	65d0 <_svfprintf_r+0xad0>
    65f4:	1c38      	adds	r0, r7, #0
    65f6:	9908      	ldr	r1, [sp, #32]
    65f8:	1c22      	adds	r2, r4, #0
    65fa:	f004 fd43 	bl	b084 <__ssprint_r>
    65fe:	2800      	cmp	r0, #0
    6600:	d000      	beq.n	6604 <_svfprintf_r+0xb04>
    6602:	e434      	b.n	5e6e <_svfprintf_r+0x36e>
    6604:	aa21      	add	r2, sp, #132	; 0x84
    6606:	ab1f      	add	r3, sp, #124	; 0x7c
    6608:	e7e5      	b.n	65d6 <_svfprintf_r+0xad6>
    660a:	930c      	str	r3, [sp, #48]	; 0x30
    660c:	9413      	str	r4, [sp, #76]	; 0x4c
    660e:	e4a0      	b.n	5f52 <_svfprintf_r+0x452>
	...
    6618:	0000ee00 	.word	0x0000ee00
    661c:	0000e3a0 	.word	0x0000e3a0
    6620:	9413      	str	r4, [sp, #76]	; 0x4c
    6622:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6624:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6626:	270f      	movs	r7, #15
    6628:	1c21      	adds	r1, r4, #0
    662a:	46ac      	mov	ip, r5
    662c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    662e:	1c10      	adds	r0, r2, #0
    6630:	4038      	ands	r0, r7
    6632:	5c28      	ldrb	r0, [r5, r0]
    6634:	3901      	subs	r1, #1
    6636:	0915      	lsrs	r5, r2, #4
    6638:	46a8      	mov	r8, r5
    663a:	7008      	strb	r0, [r1, #0]
    663c:	0718      	lsls	r0, r3, #28
    663e:	1c05      	adds	r5, r0, #0
    6640:	4640      	mov	r0, r8
    6642:	4305      	orrs	r5, r0
    6644:	0918      	lsrs	r0, r3, #4
    6646:	1c2a      	adds	r2, r5, #0
    6648:	1c03      	adds	r3, r0, #0
    664a:	4305      	orrs	r5, r0
    664c:	d1ee      	bne.n	662c <_svfprintf_r+0xb2c>
    664e:	1a67      	subs	r7, r4, r1
    6650:	9113      	str	r1, [sp, #76]	; 0x4c
    6652:	4665      	mov	r5, ip
    6654:	9210      	str	r2, [sp, #64]	; 0x40
    6656:	9311      	str	r3, [sp, #68]	; 0x44
    6658:	970c      	str	r7, [sp, #48]	; 0x30
    665a:	e47a      	b.n	5f52 <_svfprintf_r+0x452>
    665c:	9911      	ldr	r1, [sp, #68]	; 0x44
    665e:	2900      	cmp	r1, #0
    6660:	d102      	bne.n	6668 <_svfprintf_r+0xb68>
    6662:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6664:	2a09      	cmp	r2, #9
    6666:	d920      	bls.n	66aa <_svfprintf_r+0xbaa>
    6668:	46aa      	mov	sl, r5
    666a:	46b0      	mov	r8, r6
    666c:	9413      	str	r4, [sp, #76]	; 0x4c
    666e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    6670:	9e11      	ldr	r6, [sp, #68]	; 0x44
    6672:	1c27      	adds	r7, r4, #0
    6674:	1c28      	adds	r0, r5, #0
    6676:	1c31      	adds	r1, r6, #0
    6678:	220a      	movs	r2, #10
    667a:	2300      	movs	r3, #0
    667c:	f007 fd6c 	bl	e158 <____aeabi_uldivmod_from_thumb>
    6680:	3f01      	subs	r7, #1
    6682:	3230      	adds	r2, #48	; 0x30
    6684:	703a      	strb	r2, [r7, #0]
    6686:	1c28      	adds	r0, r5, #0
    6688:	1c31      	adds	r1, r6, #0
    668a:	220a      	movs	r2, #10
    668c:	2300      	movs	r3, #0
    668e:	f007 fd63 	bl	e158 <____aeabi_uldivmod_from_thumb>
    6692:	1c05      	adds	r5, r0, #0
    6694:	1c0e      	adds	r6, r1, #0
    6696:	4308      	orrs	r0, r1
    6698:	d1ec      	bne.n	6674 <_svfprintf_r+0xb74>
    669a:	1be1      	subs	r1, r4, r7
    669c:	9510      	str	r5, [sp, #64]	; 0x40
    669e:	9611      	str	r6, [sp, #68]	; 0x44
    66a0:	9713      	str	r7, [sp, #76]	; 0x4c
    66a2:	4655      	mov	r5, sl
    66a4:	4646      	mov	r6, r8
    66a6:	910c      	str	r1, [sp, #48]	; 0x30
    66a8:	e453      	b.n	5f52 <_svfprintf_r+0x452>
    66aa:	ab2f      	add	r3, sp, #188	; 0xbc
    66ac:	3230      	adds	r2, #48	; 0x30
    66ae:	3127      	adds	r1, #39	; 0x27
    66b0:	545a      	strb	r2, [r3, r1]
    66b2:	3327      	adds	r3, #39	; 0x27
    66b4:	1ae7      	subs	r7, r4, r3
    66b6:	970c      	str	r7, [sp, #48]	; 0x30
    66b8:	9313      	str	r3, [sp, #76]	; 0x4c
    66ba:	e44a      	b.n	5f52 <_svfprintf_r+0x452>
    66bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    66be:	9908      	ldr	r1, [sp, #32]
    66c0:	1c22      	adds	r2, r4, #0
    66c2:	f004 fcdf 	bl	b084 <__ssprint_r>
    66c6:	2800      	cmp	r0, #0
    66c8:	d001      	beq.n	66ce <_svfprintf_r+0xbce>
    66ca:	f7ff fbd0 	bl	5e6e <_svfprintf_r+0x36e>
    66ce:	4649      	mov	r1, r9
    66d0:	780a      	ldrb	r2, [r1, #0]
    66d2:	ad1f      	add	r5, sp, #124	; 0x7c
    66d4:	f7ff fadc 	bl	5c90 <_svfprintf_r+0x190>
    66d8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    66da:	3e01      	subs	r6, #1
    66dc:	2e00      	cmp	r6, #0
    66de:	dc00      	bgt.n	66e2 <_svfprintf_r+0xbe2>
    66e0:	e226      	b.n	6b30 <_svfprintf_r+0x1030>
    66e2:	2e10      	cmp	r6, #16
    66e4:	dc01      	bgt.n	66ea <_svfprintf_r+0xbea>
    66e6:	f000 fc63 	bl	6fb0 <_svfprintf_r+0x14b0>
    66ea:	49d6      	ldr	r1, [pc, #856]	; (6a44 <_svfprintf_r+0xf44>)
    66ec:	2210      	movs	r2, #16
    66ee:	4688      	mov	r8, r1
    66f0:	4691      	mov	r9, r2
    66f2:	1c2b      	adds	r3, r5, #0
    66f4:	44c1      	add	r9, r8
    66f6:	4692      	mov	sl, r2
    66f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    66fa:	9d08      	ldr	r5, [sp, #32]
    66fc:	e005      	b.n	670a <_svfprintf_r+0xc0a>
    66fe:	3308      	adds	r3, #8
    6700:	1c1a      	adds	r2, r3, #0
    6702:	3e10      	subs	r6, #16
    6704:	3208      	adds	r2, #8
    6706:	2e10      	cmp	r6, #16
    6708:	dd19      	ble.n	673e <_svfprintf_r+0xc3e>
    670a:	68a2      	ldr	r2, [r4, #8]
    670c:	4648      	mov	r0, r9
    670e:	3210      	adds	r2, #16
    6710:	4651      	mov	r1, sl
    6712:	6018      	str	r0, [r3, #0]
    6714:	6059      	str	r1, [r3, #4]
    6716:	60a2      	str	r2, [r4, #8]
    6718:	6862      	ldr	r2, [r4, #4]
    671a:	3201      	adds	r2, #1
    671c:	6062      	str	r2, [r4, #4]
    671e:	2a07      	cmp	r2, #7
    6720:	dded      	ble.n	66fe <_svfprintf_r+0xbfe>
    6722:	1c38      	adds	r0, r7, #0
    6724:	1c29      	adds	r1, r5, #0
    6726:	1c22      	adds	r2, r4, #0
    6728:	f004 fcac 	bl	b084 <__ssprint_r>
    672c:	2800      	cmp	r0, #0
    672e:	d001      	beq.n	6734 <_svfprintf_r+0xc34>
    6730:	f7ff fb9d 	bl	5e6e <_svfprintf_r+0x36e>
    6734:	3e10      	subs	r6, #16
    6736:	aa21      	add	r2, sp, #132	; 0x84
    6738:	ab1f      	add	r3, sp, #124	; 0x7c
    673a:	2e10      	cmp	r6, #16
    673c:	dce5      	bgt.n	670a <_svfprintf_r+0xc0a>
    673e:	1c1d      	adds	r5, r3, #0
    6740:	1c17      	adds	r7, r2, #0
    6742:	2210      	movs	r2, #16
    6744:	1c13      	adds	r3, r2, #0
    6746:	4443      	add	r3, r8
    6748:	602b      	str	r3, [r5, #0]
    674a:	68a3      	ldr	r3, [r4, #8]
    674c:	606e      	str	r6, [r5, #4]
    674e:	18f3      	adds	r3, r6, r3
    6750:	e6bc      	b.n	64cc <_svfprintf_r+0x9cc>
    6752:	9907      	ldr	r1, [sp, #28]
    6754:	2310      	movs	r3, #16
    6756:	4019      	ands	r1, r3
    6758:	d100      	bne.n	675c <_svfprintf_r+0xc5c>
    675a:	e0b6      	b.n	68ca <_svfprintf_r+0xdca>
    675c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    675e:	6809      	ldr	r1, [r1, #0]
    6760:	9110      	str	r1, [sp, #64]	; 0x40
    6762:	9211      	str	r2, [sp, #68]	; 0x44
    6764:	1c0a      	adds	r2, r1, #0
    6766:	1e53      	subs	r3, r2, #1
    6768:	419a      	sbcs	r2, r3
    676a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    676c:	3304      	adds	r3, #4
    676e:	930f      	str	r3, [sp, #60]	; 0x3c
    6770:	2301      	movs	r3, #1
    6772:	e45b      	b.n	602c <_svfprintf_r+0x52c>
    6774:	2302      	movs	r3, #2
    6776:	e459      	b.n	602c <_svfprintf_r+0x52c>
    6778:	9807      	ldr	r0, [sp, #28]
    677a:	2310      	movs	r3, #16
    677c:	4018      	ands	r0, r3
    677e:	d11c      	bne.n	67ba <_svfprintf_r+0xcba>
    6780:	9907      	ldr	r1, [sp, #28]
    6782:	2340      	movs	r3, #64	; 0x40
    6784:	4019      	ands	r1, r3
    6786:	d018      	beq.n	67ba <_svfprintf_r+0xcba>
    6788:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    678a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    678c:	883f      	ldrh	r7, [r7, #0]
    678e:	3104      	adds	r1, #4
    6790:	1c3a      	adds	r2, r7, #0
    6792:	1e53      	subs	r3, r2, #1
    6794:	419a      	sbcs	r2, r3
    6796:	9710      	str	r7, [sp, #64]	; 0x40
    6798:	9011      	str	r0, [sp, #68]	; 0x44
    679a:	910f      	str	r1, [sp, #60]	; 0x3c
    679c:	1c03      	adds	r3, r0, #0
    679e:	e445      	b.n	602c <_svfprintf_r+0x52c>
    67a0:	9907      	ldr	r1, [sp, #28]
    67a2:	06c9      	lsls	r1, r1, #27
    67a4:	d400      	bmi.n	67a8 <_svfprintf_r+0xca8>
    67a6:	e0a2      	b.n	68ee <_svfprintf_r+0xdee>
    67a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    67aa:	6813      	ldr	r3, [r2, #0]
    67ac:	3204      	adds	r2, #4
    67ae:	9310      	str	r3, [sp, #64]	; 0x40
    67b0:	17db      	asrs	r3, r3, #31
    67b2:	9311      	str	r3, [sp, #68]	; 0x44
    67b4:	920f      	str	r2, [sp, #60]	; 0x3c
    67b6:	f7ff fb88 	bl	5eca <_svfprintf_r+0x3ca>
    67ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    67bc:	6812      	ldr	r2, [r2, #0]
    67be:	9210      	str	r2, [sp, #64]	; 0x40
    67c0:	1e53      	subs	r3, r2, #1
    67c2:	419a      	sbcs	r2, r3
    67c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    67c6:	3304      	adds	r3, #4
    67c8:	930f      	str	r3, [sp, #60]	; 0x3c
    67ca:	9111      	str	r1, [sp, #68]	; 0x44
    67cc:	1c0b      	adds	r3, r1, #0
    67ce:	e42d      	b.n	602c <_svfprintf_r+0x52c>
    67d0:	9907      	ldr	r1, [sp, #28]
    67d2:	2301      	movs	r3, #1
    67d4:	4219      	tst	r1, r3
    67d6:	d000      	beq.n	67da <_svfprintf_r+0xcda>
    67d8:	e648      	b.n	646c <_svfprintf_r+0x96c>
    67da:	607b      	str	r3, [r7, #4]
    67dc:	68a3      	ldr	r3, [r4, #8]
    67de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    67e0:	3301      	adds	r3, #1
    67e2:	603d      	str	r5, [r7, #0]
    67e4:	60a3      	str	r3, [r4, #8]
    67e6:	6863      	ldr	r3, [r4, #4]
    67e8:	3301      	adds	r3, #1
    67ea:	6063      	str	r3, [r4, #4]
    67ec:	2b07      	cmp	r3, #7
    67ee:	dc01      	bgt.n	67f4 <_svfprintf_r+0xcf4>
    67f0:	3708      	adds	r7, #8
    67f2:	e672      	b.n	64da <_svfprintf_r+0x9da>
    67f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    67f6:	9908      	ldr	r1, [sp, #32]
    67f8:	1c22      	adds	r2, r4, #0
    67fa:	f004 fc43 	bl	b084 <__ssprint_r>
    67fe:	2800      	cmp	r0, #0
    6800:	d001      	beq.n	6806 <_svfprintf_r+0xd06>
    6802:	f7ff fb34 	bl	5e6e <_svfprintf_r+0x36e>
    6806:	ab21      	add	r3, sp, #132	; 0x84
    6808:	af1f      	add	r7, sp, #124	; 0x7c
    680a:	e668      	b.n	64de <_svfprintf_r+0x9de>
    680c:	9809      	ldr	r0, [sp, #36]	; 0x24
    680e:	9908      	ldr	r1, [sp, #32]
    6810:	1c22      	adds	r2, r4, #0
    6812:	f004 fc37 	bl	b084 <__ssprint_r>
    6816:	2800      	cmp	r0, #0
    6818:	d001      	beq.n	681e <_svfprintf_r+0xd1e>
    681a:	f7ff fb28 	bl	5e6e <_svfprintf_r+0x36e>
    681e:	af21      	add	r7, sp, #132	; 0x84
    6820:	ad1f      	add	r5, sp, #124	; 0x7c
    6822:	e642      	b.n	64aa <_svfprintf_r+0x9aa>
    6824:	9809      	ldr	r0, [sp, #36]	; 0x24
    6826:	9908      	ldr	r1, [sp, #32]
    6828:	1c22      	adds	r2, r4, #0
    682a:	f004 fc2b 	bl	b084 <__ssprint_r>
    682e:	2800      	cmp	r0, #0
    6830:	d001      	beq.n	6836 <_svfprintf_r+0xd36>
    6832:	f7ff fb1c 	bl	5e6e <_svfprintf_r+0x36e>
    6836:	ad21      	add	r5, sp, #132	; 0x84
    6838:	af1f      	add	r7, sp, #124	; 0x7c
    683a:	e627      	b.n	648c <_svfprintf_r+0x98c>
    683c:	2f30      	cmp	r7, #48	; 0x30
    683e:	d100      	bne.n	6842 <_svfprintf_r+0xd42>
    6840:	e30a      	b.n	6e58 <_svfprintf_r+0x1358>
    6842:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    6844:	3f01      	subs	r7, #1
    6846:	2330      	movs	r3, #48	; 0x30
    6848:	1be0      	subs	r0, r4, r7
    684a:	9713      	str	r7, [sp, #76]	; 0x4c
    684c:	703b      	strb	r3, [r7, #0]
    684e:	900c      	str	r0, [sp, #48]	; 0x30
    6850:	f7ff fb7f 	bl	5f52 <_svfprintf_r+0x452>
    6854:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6856:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6858:	2100      	movs	r1, #0
    685a:	4250      	negs	r0, r2
    685c:	4199      	sbcs	r1, r3
    685e:	1c02      	adds	r2, r0, #0
    6860:	232d      	movs	r3, #45	; 0x2d
    6862:	464f      	mov	r7, r9
    6864:	430a      	orrs	r2, r1
    6866:	703b      	strb	r3, [r7, #0]
    6868:	9010      	str	r0, [sp, #64]	; 0x40
    686a:	9111      	str	r1, [sp, #68]	; 0x44
    686c:	1e53      	subs	r3, r2, #1
    686e:	419a      	sbcs	r2, r3
    6870:	2301      	movs	r3, #1
    6872:	f7ff fb35 	bl	5ee0 <_svfprintf_r+0x3e0>
    6876:	780b      	ldrb	r3, [r1, #0]
    6878:	f7ff f9a7 	bl	5bca <_svfprintf_r+0xca>
    687c:	981a      	ldr	r0, [sp, #104]	; 0x68
    687e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    6880:	f004 fba8 	bl	afd4 <__fpclassifyd>
    6884:	2800      	cmp	r0, #0
    6886:	d000      	beq.n	688a <_svfprintf_r+0xd8a>
    6888:	e185      	b.n	6b96 <_svfprintf_r+0x1096>
    688a:	9f16      	ldr	r7, [sp, #88]	; 0x58
    688c:	2f47      	cmp	r7, #71	; 0x47
    688e:	dc00      	bgt.n	6892 <_svfprintf_r+0xd92>
    6890:	e26b      	b.n	6d6a <_svfprintf_r+0x126a>
    6892:	496d      	ldr	r1, [pc, #436]	; (6a48 <_svfprintf_r+0xf48>)
    6894:	9113      	str	r1, [sp, #76]	; 0x4c
    6896:	9a07      	ldr	r2, [sp, #28]
    6898:	2380      	movs	r3, #128	; 0x80
    689a:	439a      	bics	r2, r3
    689c:	2603      	movs	r6, #3
    689e:	2700      	movs	r7, #0
    68a0:	464b      	mov	r3, r9
    68a2:	9207      	str	r2, [sp, #28]
    68a4:	960a      	str	r6, [sp, #40]	; 0x28
    68a6:	781a      	ldrb	r2, [r3, #0]
    68a8:	960c      	str	r6, [sp, #48]	; 0x30
    68aa:	9714      	str	r7, [sp, #80]	; 0x50
    68ac:	9718      	str	r7, [sp, #96]	; 0x60
    68ae:	f7ff fb5a 	bl	5f66 <_svfprintf_r+0x466>
    68b2:	4864      	ldr	r0, [pc, #400]	; (6a44 <_svfprintf_r+0xf44>)
    68b4:	1c13      	adds	r3, r2, #0
    68b6:	3308      	adds	r3, #8
    68b8:	4680      	mov	r8, r0
    68ba:	2610      	movs	r6, #16
    68bc:	1c31      	adds	r1, r6, #0
    68be:	6055      	str	r5, [r2, #4]
    68c0:	4441      	add	r1, r8
    68c2:	6011      	str	r1, [r2, #0]
    68c4:	68a2      	ldr	r2, [r4, #8]
    68c6:	18aa      	adds	r2, r5, r2
    68c8:	e60f      	b.n	64ea <_svfprintf_r+0x9ea>
    68ca:	9f07      	ldr	r7, [sp, #28]
    68cc:	2340      	movs	r3, #64	; 0x40
    68ce:	403b      	ands	r3, r7
    68d0:	d100      	bne.n	68d4 <_svfprintf_r+0xdd4>
    68d2:	e221      	b.n	6d18 <_svfprintf_r+0x1218>
    68d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    68d6:	8800      	ldrh	r0, [r0, #0]
    68d8:	9111      	str	r1, [sp, #68]	; 0x44
    68da:	990f      	ldr	r1, [sp, #60]	; 0x3c
    68dc:	1c02      	adds	r2, r0, #0
    68de:	3104      	adds	r1, #4
    68e0:	1e53      	subs	r3, r2, #1
    68e2:	419a      	sbcs	r2, r3
    68e4:	9010      	str	r0, [sp, #64]	; 0x40
    68e6:	910f      	str	r1, [sp, #60]	; 0x3c
    68e8:	2301      	movs	r3, #1
    68ea:	f7ff fb9f 	bl	602c <_svfprintf_r+0x52c>
    68ee:	9b07      	ldr	r3, [sp, #28]
    68f0:	065b      	lsls	r3, r3, #25
    68f2:	d400      	bmi.n	68f6 <_svfprintf_r+0xdf6>
    68f4:	e136      	b.n	6b64 <_svfprintf_r+0x1064>
    68f6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    68f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    68fa:	2300      	movs	r3, #0
    68fc:	5efb      	ldrsh	r3, [r7, r3]
    68fe:	3004      	adds	r0, #4
    6900:	9310      	str	r3, [sp, #64]	; 0x40
    6902:	17db      	asrs	r3, r3, #31
    6904:	9311      	str	r3, [sp, #68]	; 0x44
    6906:	900f      	str	r0, [sp, #60]	; 0x3c
    6908:	f7ff fadf 	bl	5eca <_svfprintf_r+0x3ca>
    690c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    690e:	2307      	movs	r3, #7
    6910:	3207      	adds	r2, #7
    6912:	439a      	bics	r2, r3
    6914:	6810      	ldr	r0, [r2, #0]
    6916:	2708      	movs	r7, #8
    6918:	18bf      	adds	r7, r7, r2
    691a:	970f      	str	r7, [sp, #60]	; 0x3c
    691c:	901a      	str	r0, [sp, #104]	; 0x68
    691e:	6852      	ldr	r2, [r2, #4]
    6920:	921b      	str	r2, [sp, #108]	; 0x6c
    6922:	f7ff fb3b 	bl	5f9c <_svfprintf_r+0x49c>
    6926:	9807      	ldr	r0, [sp, #28]
    6928:	06c0      	lsls	r0, r0, #27
    692a:	d400      	bmi.n	692e <_svfprintf_r+0xe2e>
    692c:	e1f9      	b.n	6d22 <_svfprintf_r+0x1222>
    692e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6932:	680b      	ldr	r3, [r1, #0]
    6934:	3104      	adds	r1, #4
    6936:	601a      	str	r2, [r3, #0]
    6938:	910f      	str	r1, [sp, #60]	; 0x3c
    693a:	f7ff f90a 	bl	5b52 <_svfprintf_r+0x52>
    693e:	9f07      	ldr	r7, [sp, #28]
    6940:	2340      	movs	r3, #64	; 0x40
    6942:	403b      	ands	r3, r7
    6944:	d100      	bne.n	6948 <_svfprintf_r+0xe48>
    6946:	e104      	b.n	6b52 <_svfprintf_r+0x1052>
    6948:	980f      	ldr	r0, [sp, #60]	; 0x3c
    694a:	8800      	ldrh	r0, [r0, #0]
    694c:	9111      	str	r1, [sp, #68]	; 0x44
    694e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6950:	3104      	adds	r1, #4
    6952:	9010      	str	r0, [sp, #64]	; 0x40
    6954:	910f      	str	r1, [sp, #60]	; 0x3c
    6956:	f7ff fb9f 	bl	6098 <_svfprintf_r+0x598>
    695a:	1c1f      	adds	r7, r3, #0
    695c:	2110      	movs	r1, #16
    695e:	1c0b      	adds	r3, r1, #0
    6960:	4443      	add	r3, r8
    6962:	603b      	str	r3, [r7, #0]
    6964:	68a3      	ldr	r3, [r4, #8]
    6966:	18eb      	adds	r3, r5, r3
    6968:	607d      	str	r5, [r7, #4]
    696a:	60a3      	str	r3, [r4, #8]
    696c:	6863      	ldr	r3, [r4, #4]
    696e:	3301      	adds	r3, #1
    6970:	6063      	str	r3, [r4, #4]
    6972:	2b07      	cmp	r3, #7
    6974:	dd00      	ble.n	6978 <_svfprintf_r+0xe78>
    6976:	e286      	b.n	6e86 <_svfprintf_r+0x1386>
    6978:	9d42      	ldr	r5, [sp, #264]	; 0x108
    697a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    697c:	429d      	cmp	r5, r3
    697e:	db47      	blt.n	6a10 <_svfprintf_r+0xf10>
    6980:	9e07      	ldr	r6, [sp, #28]
    6982:	07f6      	lsls	r6, r6, #31
    6984:	d444      	bmi.n	6a10 <_svfprintf_r+0xf10>
    6986:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6988:	1c0b      	adds	r3, r1, #0
    698a:	9918      	ldr	r1, [sp, #96]	; 0x60
    698c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    698e:	185b      	adds	r3, r3, r1
    6990:	4656      	mov	r6, sl
    6992:	1af0      	subs	r0, r6, r3
    6994:	1b79      	subs	r1, r7, r5
    6996:	1c0e      	adds	r6, r1, #0
    6998:	4281      	cmp	r1, r0
    699a:	dd00      	ble.n	699e <_svfprintf_r+0xe9e>
    699c:	1c06      	adds	r6, r0, #0
    699e:	2e00      	cmp	r6, #0
    69a0:	dd0b      	ble.n	69ba <_svfprintf_r+0xeba>
    69a2:	6013      	str	r3, [r2, #0]
    69a4:	68a3      	ldr	r3, [r4, #8]
    69a6:	18f3      	adds	r3, r6, r3
    69a8:	6056      	str	r6, [r2, #4]
    69aa:	60a3      	str	r3, [r4, #8]
    69ac:	6863      	ldr	r3, [r4, #4]
    69ae:	3301      	adds	r3, #1
    69b0:	6063      	str	r3, [r4, #4]
    69b2:	3208      	adds	r2, #8
    69b4:	2b07      	cmp	r3, #7
    69b6:	dd00      	ble.n	69ba <_svfprintf_r+0xeba>
    69b8:	e253      	b.n	6e62 <_svfprintf_r+0x1362>
    69ba:	43f5      	mvns	r5, r6
    69bc:	17ed      	asrs	r5, r5, #31
    69be:	4035      	ands	r5, r6
    69c0:	1b4d      	subs	r5, r1, r5
    69c2:	2d00      	cmp	r5, #0
    69c4:	dd42      	ble.n	6a4c <_svfprintf_r+0xf4c>
    69c6:	2d10      	cmp	r5, #16
    69c8:	dd43      	ble.n	6a52 <_svfprintf_r+0xf52>
    69ca:	491e      	ldr	r1, [pc, #120]	; (6a44 <_svfprintf_r+0xf44>)
    69cc:	2310      	movs	r3, #16
    69ce:	4688      	mov	r8, r1
    69d0:	1c1e      	adds	r6, r3, #0
    69d2:	4446      	add	r6, r8
    69d4:	1c1f      	adds	r7, r3, #0
    69d6:	e005      	b.n	69e4 <_svfprintf_r+0xee4>
    69d8:	3208      	adds	r2, #8
    69da:	1c13      	adds	r3, r2, #0
    69dc:	3308      	adds	r3, #8
    69de:	3d10      	subs	r5, #16
    69e0:	2d10      	cmp	r5, #16
    69e2:	dd3a      	ble.n	6a5a <_svfprintf_r+0xf5a>
    69e4:	68a3      	ldr	r3, [r4, #8]
    69e6:	3310      	adds	r3, #16
    69e8:	6016      	str	r6, [r2, #0]
    69ea:	6057      	str	r7, [r2, #4]
    69ec:	60a3      	str	r3, [r4, #8]
    69ee:	6863      	ldr	r3, [r4, #4]
    69f0:	3301      	adds	r3, #1
    69f2:	6063      	str	r3, [r4, #4]
    69f4:	2b07      	cmp	r3, #7
    69f6:	ddef      	ble.n	69d8 <_svfprintf_r+0xed8>
    69f8:	9809      	ldr	r0, [sp, #36]	; 0x24
    69fa:	9908      	ldr	r1, [sp, #32]
    69fc:	1c22      	adds	r2, r4, #0
    69fe:	f004 fb41 	bl	b084 <__ssprint_r>
    6a02:	2800      	cmp	r0, #0
    6a04:	d001      	beq.n	6a0a <_svfprintf_r+0xf0a>
    6a06:	f7ff fa32 	bl	5e6e <_svfprintf_r+0x36e>
    6a0a:	ab21      	add	r3, sp, #132	; 0x84
    6a0c:	aa1f      	add	r2, sp, #124	; 0x7c
    6a0e:	e7e6      	b.n	69de <_svfprintf_r+0xede>
    6a10:	981c      	ldr	r0, [sp, #112]	; 0x70
    6a12:	68a3      	ldr	r3, [r4, #8]
    6a14:	9f19      	ldr	r7, [sp, #100]	; 0x64
    6a16:	181b      	adds	r3, r3, r0
    6a18:	6017      	str	r7, [r2, #0]
    6a1a:	6050      	str	r0, [r2, #4]
    6a1c:	60a3      	str	r3, [r4, #8]
    6a1e:	6863      	ldr	r3, [r4, #4]
    6a20:	3301      	adds	r3, #1
    6a22:	6063      	str	r3, [r4, #4]
    6a24:	3208      	adds	r2, #8
    6a26:	2b07      	cmp	r3, #7
    6a28:	ddad      	ble.n	6986 <_svfprintf_r+0xe86>
    6a2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    6a2c:	9908      	ldr	r1, [sp, #32]
    6a2e:	1c22      	adds	r2, r4, #0
    6a30:	f004 fb28 	bl	b084 <__ssprint_r>
    6a34:	2800      	cmp	r0, #0
    6a36:	d001      	beq.n	6a3c <_svfprintf_r+0xf3c>
    6a38:	f7ff fa19 	bl	5e6e <_svfprintf_r+0x36e>
    6a3c:	9d42      	ldr	r5, [sp, #264]	; 0x108
    6a3e:	aa1f      	add	r2, sp, #124	; 0x7c
    6a40:	e7a1      	b.n	6986 <_svfprintf_r+0xe86>
    6a42:	46c0      	nop			; (mov r8, r8)
    6a44:	0000e3a0 	.word	0x0000e3a0
    6a48:	0000edcc 	.word	0x0000edcc
    6a4c:	1c13      	adds	r3, r2, #0
    6a4e:	f7ff f99c 	bl	5d8a <_svfprintf_r+0x28a>
    6a52:	4ed3      	ldr	r6, [pc, #844]	; (6da0 <_svfprintf_r+0x12a0>)
    6a54:	1c13      	adds	r3, r2, #0
    6a56:	3308      	adds	r3, #8
    6a58:	46b0      	mov	r8, r6
    6a5a:	2710      	movs	r7, #16
    6a5c:	1c39      	adds	r1, r7, #0
    6a5e:	e72e      	b.n	68be <_svfprintf_r+0xdbe>
    6a60:	49cf      	ldr	r1, [pc, #828]	; (6da0 <_svfprintf_r+0x12a0>)
    6a62:	1c2f      	adds	r7, r5, #0
    6a64:	3708      	adds	r7, #8
    6a66:	4688      	mov	r8, r1
    6a68:	f7ff f96e 	bl	5d48 <_svfprintf_r+0x248>
    6a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
    6a6e:	9908      	ldr	r1, [sp, #32]
    6a70:	1c22      	adds	r2, r4, #0
    6a72:	f004 fb07 	bl	b084 <__ssprint_r>
    6a76:	2800      	cmp	r0, #0
    6a78:	d001      	beq.n	6a7e <_svfprintf_r+0xf7e>
    6a7a:	f7ff f9f8 	bl	5e6e <_svfprintf_r+0x36e>
    6a7e:	ab1f      	add	r3, sp, #124	; 0x7c
    6a80:	e44c      	b.n	631c <_svfprintf_r+0x81c>
    6a82:	4bc8      	ldr	r3, [pc, #800]	; (6da4 <_svfprintf_r+0x12a4>)
    6a84:	603b      	str	r3, [r7, #0]
    6a86:	2301      	movs	r3, #1
    6a88:	607b      	str	r3, [r7, #4]
    6a8a:	68a3      	ldr	r3, [r4, #8]
    6a8c:	3301      	adds	r3, #1
    6a8e:	60a3      	str	r3, [r4, #8]
    6a90:	6863      	ldr	r3, [r4, #4]
    6a92:	3301      	adds	r3, #1
    6a94:	6063      	str	r3, [r4, #4]
    6a96:	2b07      	cmp	r3, #7
    6a98:	dd00      	ble.n	6a9c <_svfprintf_r+0xf9c>
    6a9a:	e169      	b.n	6d70 <_svfprintf_r+0x1270>
    6a9c:	1c3b      	adds	r3, r7, #0
    6a9e:	3308      	adds	r3, #8
    6aa0:	2d00      	cmp	r5, #0
    6aa2:	d107      	bne.n	6ab4 <_svfprintf_r+0xfb4>
    6aa4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6aa6:	2f00      	cmp	r7, #0
    6aa8:	d104      	bne.n	6ab4 <_svfprintf_r+0xfb4>
    6aaa:	9807      	ldr	r0, [sp, #28]
    6aac:	07c0      	lsls	r0, r0, #31
    6aae:	d401      	bmi.n	6ab4 <_svfprintf_r+0xfb4>
    6ab0:	f7ff f96b 	bl	5d8a <_svfprintf_r+0x28a>
    6ab4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6ab6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    6ab8:	605a      	str	r2, [r3, #4]
    6aba:	68a2      	ldr	r2, [r4, #8]
    6abc:	9919      	ldr	r1, [sp, #100]	; 0x64
    6abe:	1992      	adds	r2, r2, r6
    6ac0:	6019      	str	r1, [r3, #0]
    6ac2:	60a2      	str	r2, [r4, #8]
    6ac4:	6862      	ldr	r2, [r4, #4]
    6ac6:	3201      	adds	r2, #1
    6ac8:	6062      	str	r2, [r4, #4]
    6aca:	3308      	adds	r3, #8
    6acc:	2a07      	cmp	r2, #7
    6ace:	dd00      	ble.n	6ad2 <_svfprintf_r+0xfd2>
    6ad0:	e242      	b.n	6f58 <_svfprintf_r+0x1458>
    6ad2:	426d      	negs	r5, r5
    6ad4:	2d00      	cmp	r5, #0
    6ad6:	dc00      	bgt.n	6ada <_svfprintf_r+0xfda>
    6ad8:	e184      	b.n	6de4 <_svfprintf_r+0x12e4>
    6ada:	2d10      	cmp	r5, #16
    6adc:	dc00      	bgt.n	6ae0 <_svfprintf_r+0xfe0>
    6ade:	e167      	b.n	6db0 <_svfprintf_r+0x12b0>
    6ae0:	48af      	ldr	r0, [pc, #700]	; (6da0 <_svfprintf_r+0x12a0>)
    6ae2:	2110      	movs	r1, #16
    6ae4:	4680      	mov	r8, r0
    6ae6:	1c0e      	adds	r6, r1, #0
    6ae8:	4446      	add	r6, r8
    6aea:	1c0f      	adds	r7, r1, #0
    6aec:	e003      	b.n	6af6 <_svfprintf_r+0xff6>
    6aee:	3d10      	subs	r5, #16
    6af0:	2d10      	cmp	r5, #16
    6af2:	dc00      	bgt.n	6af6 <_svfprintf_r+0xff6>
    6af4:	e15e      	b.n	6db4 <_svfprintf_r+0x12b4>
    6af6:	68a2      	ldr	r2, [r4, #8]
    6af8:	3210      	adds	r2, #16
    6afa:	601e      	str	r6, [r3, #0]
    6afc:	605f      	str	r7, [r3, #4]
    6afe:	60a2      	str	r2, [r4, #8]
    6b00:	6862      	ldr	r2, [r4, #4]
    6b02:	3201      	adds	r2, #1
    6b04:	6062      	str	r2, [r4, #4]
    6b06:	3308      	adds	r3, #8
    6b08:	2a07      	cmp	r2, #7
    6b0a:	ddf0      	ble.n	6aee <_svfprintf_r+0xfee>
    6b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b0e:	9908      	ldr	r1, [sp, #32]
    6b10:	1c22      	adds	r2, r4, #0
    6b12:	f004 fab7 	bl	b084 <__ssprint_r>
    6b16:	2800      	cmp	r0, #0
    6b18:	d001      	beq.n	6b1e <_svfprintf_r+0x101e>
    6b1a:	f7ff f9a8 	bl	5e6e <_svfprintf_r+0x36e>
    6b1e:	ab1f      	add	r3, sp, #124	; 0x7c
    6b20:	e7e5      	b.n	6aee <_svfprintf_r+0xfee>
    6b22:	9b07      	ldr	r3, [sp, #28]
    6b24:	4303      	orrs	r3, r0
    6b26:	9307      	str	r3, [sp, #28]
    6b28:	3101      	adds	r1, #1
    6b2a:	780b      	ldrb	r3, [r1, #0]
    6b2c:	f7ff f84d 	bl	5bca <_svfprintf_r+0xca>
    6b30:	1c2b      	adds	r3, r5, #0
    6b32:	3308      	adds	r3, #8
    6b34:	1c2f      	adds	r7, r5, #0
    6b36:	e4d2      	b.n	64de <_svfprintf_r+0x9de>
    6b38:	980c      	ldr	r0, [sp, #48]	; 0x30
    6b3a:	43c3      	mvns	r3, r0
    6b3c:	17db      	asrs	r3, r3, #31
    6b3e:	4018      	ands	r0, r3
    6b40:	4649      	mov	r1, r9
    6b42:	2300      	movs	r3, #0
    6b44:	900a      	str	r0, [sp, #40]	; 0x28
    6b46:	780a      	ldrb	r2, [r1, #0]
    6b48:	970f      	str	r7, [sp, #60]	; 0x3c
    6b4a:	9314      	str	r3, [sp, #80]	; 0x50
    6b4c:	9318      	str	r3, [sp, #96]	; 0x60
    6b4e:	f7ff fa0a 	bl	5f66 <_svfprintf_r+0x466>
    6b52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6b54:	6812      	ldr	r2, [r2, #0]
    6b56:	9311      	str	r3, [sp, #68]	; 0x44
    6b58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b5a:	3304      	adds	r3, #4
    6b5c:	9210      	str	r2, [sp, #64]	; 0x40
    6b5e:	930f      	str	r3, [sp, #60]	; 0x3c
    6b60:	f7ff fa9a 	bl	6098 <_svfprintf_r+0x598>
    6b64:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6b66:	680b      	ldr	r3, [r1, #0]
    6b68:	3104      	adds	r1, #4
    6b6a:	9310      	str	r3, [sp, #64]	; 0x40
    6b6c:	17db      	asrs	r3, r3, #31
    6b6e:	9311      	str	r3, [sp, #68]	; 0x44
    6b70:	910f      	str	r1, [sp, #60]	; 0x3c
    6b72:	f7ff f9aa 	bl	5eca <_svfprintf_r+0x3ca>
    6b76:	488c      	ldr	r0, [pc, #560]	; (6da8 <_svfprintf_r+0x12a8>)
    6b78:	9013      	str	r0, [sp, #76]	; 0x4c
    6b7a:	f7ff fa2a 	bl	5fd2 <_svfprintf_r+0x4d2>
    6b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
    6b80:	9908      	ldr	r1, [sp, #32]
    6b82:	1c22      	adds	r2, r4, #0
    6b84:	f004 fa7e 	bl	b084 <__ssprint_r>
    6b88:	2800      	cmp	r0, #0
    6b8a:	d001      	beq.n	6b90 <_svfprintf_r+0x1090>
    6b8c:	f7ff f96f 	bl	5e6e <_svfprintf_r+0x36e>
    6b90:	aa1f      	add	r2, sp, #124	; 0x7c
    6b92:	f7ff fbdc 	bl	634e <_svfprintf_r+0x84e>
    6b96:	1c70      	adds	r0, r6, #1
    6b98:	d100      	bne.n	6b9c <_svfprintf_r+0x109c>
    6b9a:	e0f5      	b.n	6d88 <_svfprintf_r+0x1288>
    6b9c:	9916      	ldr	r1, [sp, #88]	; 0x58
    6b9e:	3947      	subs	r1, #71	; 0x47
    6ba0:	910c      	str	r1, [sp, #48]	; 0x30
    6ba2:	2900      	cmp	r1, #0
    6ba4:	d002      	beq.n	6bac <_svfprintf_r+0x10ac>
    6ba6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6ba8:	2a67      	cmp	r2, #103	; 0x67
    6baa:	d102      	bne.n	6bb2 <_svfprintf_r+0x10b2>
    6bac:	2e00      	cmp	r6, #0
    6bae:	d100      	bne.n	6bb2 <_svfprintf_r+0x10b2>
    6bb0:	2601      	movs	r6, #1
    6bb2:	9f07      	ldr	r7, [sp, #28]
    6bb4:	2380      	movs	r3, #128	; 0x80
    6bb6:	005b      	lsls	r3, r3, #1
    6bb8:	431f      	orrs	r7, r3
    6bba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6bbc:	9707      	str	r7, [sp, #28]
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	da00      	bge.n	6bc4 <_svfprintf_r+0x10c4>
    6bc2:	e1d5      	b.n	6f70 <_svfprintf_r+0x1470>
    6bc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6bc6:	2700      	movs	r7, #0
    6bc8:	930a      	str	r3, [sp, #40]	; 0x28
    6bca:	9714      	str	r7, [sp, #80]	; 0x50
    6bcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6bce:	3b46      	subs	r3, #70	; 0x46
    6bd0:	4259      	negs	r1, r3
    6bd2:	4159      	adcs	r1, r3
    6bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6bd6:	3b66      	subs	r3, #102	; 0x66
    6bd8:	425a      	negs	r2, r3
    6bda:	4153      	adcs	r3, r2
    6bdc:	1c08      	adds	r0, r1, #0
    6bde:	4318      	orrs	r0, r3
    6be0:	900d      	str	r0, [sp, #52]	; 0x34
    6be2:	d000      	beq.n	6be6 <_svfprintf_r+0x10e6>
    6be4:	e16e      	b.n	6ec4 <_svfprintf_r+0x13c4>
    6be6:	9916      	ldr	r1, [sp, #88]	; 0x58
    6be8:	2945      	cmp	r1, #69	; 0x45
    6bea:	d002      	beq.n	6bf2 <_svfprintf_r+0x10f2>
    6bec:	2965      	cmp	r1, #101	; 0x65
    6bee:	d000      	beq.n	6bf2 <_svfprintf_r+0x10f2>
    6bf0:	e1c7      	b.n	6f82 <_svfprintf_r+0x1482>
    6bf2:	1c72      	adds	r2, r6, #1
    6bf4:	4692      	mov	sl, r2
    6bf6:	2302      	movs	r3, #2
    6bf8:	9300      	str	r3, [sp, #0]
    6bfa:	4653      	mov	r3, sl
    6bfc:	9301      	str	r3, [sp, #4]
    6bfe:	ab42      	add	r3, sp, #264	; 0x108
    6c00:	9302      	str	r3, [sp, #8]
    6c02:	ab41      	add	r3, sp, #260	; 0x104
    6c04:	9303      	str	r3, [sp, #12]
    6c06:	ab40      	add	r3, sp, #256	; 0x100
    6c08:	9304      	str	r3, [sp, #16]
    6c0a:	9809      	ldr	r0, [sp, #36]	; 0x24
    6c0c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    6c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6c10:	f001 ff9c 	bl	8b4c <_dtoa_r>
    6c14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6c16:	9013      	str	r0, [sp, #76]	; 0x4c
    6c18:	2f00      	cmp	r7, #0
    6c1a:	d002      	beq.n	6c22 <_svfprintf_r+0x1122>
    6c1c:	9816      	ldr	r0, [sp, #88]	; 0x58
    6c1e:	2867      	cmp	r0, #103	; 0x67
    6c20:	d103      	bne.n	6c2a <_svfprintf_r+0x112a>
    6c22:	9907      	ldr	r1, [sp, #28]
    6c24:	07c9      	lsls	r1, r1, #31
    6c26:	d400      	bmi.n	6c2a <_svfprintf_r+0x112a>
    6c28:	e1b5      	b.n	6f96 <_svfprintf_r+0x1496>
    6c2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6c2e:	1c17      	adds	r7, r2, #0
    6c30:	4457      	add	r7, sl
    6c32:	2b00      	cmp	r3, #0
    6c34:	d005      	beq.n	6c42 <_svfprintf_r+0x1142>
    6c36:	7813      	ldrb	r3, [r2, #0]
    6c38:	2b30      	cmp	r3, #48	; 0x30
    6c3a:	d100      	bne.n	6c3e <_svfprintf_r+0x113e>
    6c3c:	e1c1      	b.n	6fc2 <_svfprintf_r+0x14c2>
    6c3e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    6c40:	18bf      	adds	r7, r7, r2
    6c42:	981a      	ldr	r0, [sp, #104]	; 0x68
    6c44:	990a      	ldr	r1, [sp, #40]	; 0x28
    6c46:	4b55      	ldr	r3, [pc, #340]	; (6d9c <_svfprintf_r+0x129c>)
    6c48:	4a53      	ldr	r2, [pc, #332]	; (6d98 <_svfprintf_r+0x1298>)
    6c4a:	f007 fab9 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    6c4e:	2800      	cmp	r0, #0
    6c50:	d100      	bne.n	6c54 <_svfprintf_r+0x1154>
    6c52:	e161      	b.n	6f18 <_svfprintf_r+0x1418>
    6c54:	9740      	str	r7, [sp, #256]	; 0x100
    6c56:	1c3b      	adds	r3, r7, #0
    6c58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6c5a:	1a9b      	subs	r3, r3, r2
    6c5c:	930d      	str	r3, [sp, #52]	; 0x34
    6c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6c60:	2b00      	cmp	r3, #0
    6c62:	d003      	beq.n	6c6c <_svfprintf_r+0x116c>
    6c64:	9f16      	ldr	r7, [sp, #88]	; 0x58
    6c66:	2f67      	cmp	r7, #103	; 0x67
    6c68:	d000      	beq.n	6c6c <_svfprintf_r+0x116c>
    6c6a:	e12e      	b.n	6eca <_svfprintf_r+0x13ca>
    6c6c:	9a42      	ldr	r2, [sp, #264]	; 0x108
    6c6e:	920c      	str	r2, [sp, #48]	; 0x30
    6c70:	1cd0      	adds	r0, r2, #3
    6c72:	db02      	blt.n	6c7a <_svfprintf_r+0x117a>
    6c74:	4296      	cmp	r6, r2
    6c76:	db00      	blt.n	6c7a <_svfprintf_r+0x117a>
    6c78:	e15a      	b.n	6f30 <_svfprintf_r+0x1430>
    6c7a:	9916      	ldr	r1, [sp, #88]	; 0x58
    6c7c:	3902      	subs	r1, #2
    6c7e:	9116      	str	r1, [sp, #88]	; 0x58
    6c80:	af16      	add	r7, sp, #88	; 0x58
    6c82:	783f      	ldrb	r7, [r7, #0]
    6c84:	ab3e      	add	r3, sp, #248	; 0xf8
    6c86:	1e56      	subs	r6, r2, #1
    6c88:	9642      	str	r6, [sp, #264]	; 0x108
    6c8a:	469a      	mov	sl, r3
    6c8c:	701f      	strb	r7, [r3, #0]
    6c8e:	2e00      	cmp	r6, #0
    6c90:	da00      	bge.n	6c94 <_svfprintf_r+0x1194>
    6c92:	e1a4      	b.n	6fde <_svfprintf_r+0x14de>
    6c94:	232b      	movs	r3, #43	; 0x2b
    6c96:	4651      	mov	r1, sl
    6c98:	704b      	strb	r3, [r1, #1]
    6c9a:	2e09      	cmp	r6, #9
    6c9c:	dc00      	bgt.n	6ca0 <_svfprintf_r+0x11a0>
    6c9e:	e173      	b.n	6f88 <_svfprintf_r+0x1488>
    6ca0:	22f7      	movs	r2, #247	; 0xf7
    6ca2:	446a      	add	r2, sp
    6ca4:	4690      	mov	r8, r2
    6ca6:	1c17      	adds	r7, r2, #0
    6ca8:	1c30      	adds	r0, r6, #0
    6caa:	210a      	movs	r1, #10
    6cac:	f007 fa22 	bl	e0f4 <____aeabi_idivmod_from_thumb>
    6cb0:	3f01      	subs	r7, #1
    6cb2:	3130      	adds	r1, #48	; 0x30
    6cb4:	7039      	strb	r1, [r7, #0]
    6cb6:	1c30      	adds	r0, r6, #0
    6cb8:	210a      	movs	r1, #10
    6cba:	f007 fa13 	bl	e0e4 <____aeabi_idiv_from_thumb>
    6cbe:	1c06      	adds	r6, r0, #0
    6cc0:	2809      	cmp	r0, #9
    6cc2:	dcf1      	bgt.n	6ca8 <_svfprintf_r+0x11a8>
    6cc4:	1c02      	adds	r2, r0, #0
    6cc6:	1e7b      	subs	r3, r7, #1
    6cc8:	3230      	adds	r2, #48	; 0x30
    6cca:	4669      	mov	r1, sp
    6ccc:	701a      	strb	r2, [r3, #0]
    6cce:	31fa      	adds	r1, #250	; 0xfa
    6cd0:	4543      	cmp	r3, r8
    6cd2:	d205      	bcs.n	6ce0 <_svfprintf_r+0x11e0>
    6cd4:	781a      	ldrb	r2, [r3, #0]
    6cd6:	3301      	adds	r3, #1
    6cd8:	700a      	strb	r2, [r1, #0]
    6cda:	3101      	adds	r1, #1
    6cdc:	4543      	cmp	r3, r8
    6cde:	d3f9      	bcc.n	6cd4 <_svfprintf_r+0x11d4>
    6ce0:	4650      	mov	r0, sl
    6ce2:	1a08      	subs	r0, r1, r0
    6ce4:	990d      	ldr	r1, [sp, #52]	; 0x34
    6ce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6ce8:	901d      	str	r0, [sp, #116]	; 0x74
    6cea:	1840      	adds	r0, r0, r1
    6cec:	900c      	str	r0, [sp, #48]	; 0x30
    6cee:	2a01      	cmp	r2, #1
    6cf0:	dc00      	bgt.n	6cf4 <_svfprintf_r+0x11f4>
    6cf2:	e179      	b.n	6fe8 <_svfprintf_r+0x14e8>
    6cf4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6cf6:	2000      	movs	r0, #0
    6cf8:	3701      	adds	r7, #1
    6cfa:	970c      	str	r7, [sp, #48]	; 0x30
    6cfc:	9018      	str	r0, [sp, #96]	; 0x60
    6cfe:	9814      	ldr	r0, [sp, #80]	; 0x50
    6d00:	2800      	cmp	r0, #0
    6d02:	d000      	beq.n	6d06 <_svfprintf_r+0x1206>
    6d04:	e0f6      	b.n	6ef4 <_svfprintf_r+0x13f4>
    6d06:	990c      	ldr	r1, [sp, #48]	; 0x30
    6d08:	43cb      	mvns	r3, r1
    6d0a:	17db      	asrs	r3, r3, #31
    6d0c:	4019      	ands	r1, r3
    6d0e:	464b      	mov	r3, r9
    6d10:	910a      	str	r1, [sp, #40]	; 0x28
    6d12:	781a      	ldrb	r2, [r3, #0]
    6d14:	f7ff f927 	bl	5f66 <_svfprintf_r+0x466>
    6d18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6d1a:	6812      	ldr	r2, [r2, #0]
    6d1c:	9311      	str	r3, [sp, #68]	; 0x44
    6d1e:	9210      	str	r2, [sp, #64]	; 0x40
    6d20:	e521      	b.n	6766 <_svfprintf_r+0xc66>
    6d22:	9b07      	ldr	r3, [sp, #28]
    6d24:	065b      	lsls	r3, r3, #25
    6d26:	d518      	bpl.n	6d5a <_svfprintf_r+0x125a>
    6d28:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    6d2a:	466f      	mov	r7, sp
    6d2c:	2038      	movs	r0, #56	; 0x38
    6d2e:	6833      	ldr	r3, [r6, #0]
    6d30:	5bc7      	ldrh	r7, [r0, r7]
    6d32:	3604      	adds	r6, #4
    6d34:	801f      	strh	r7, [r3, #0]
    6d36:	960f      	str	r6, [sp, #60]	; 0x3c
    6d38:	f7fe ff0b 	bl	5b52 <_svfprintf_r+0x52>
    6d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
    6d3e:	2140      	movs	r1, #64	; 0x40
    6d40:	f7fe fa18 	bl	5174 <_malloc_r>
    6d44:	9a08      	ldr	r2, [sp, #32]
    6d46:	6010      	str	r0, [r2, #0]
    6d48:	6110      	str	r0, [r2, #16]
    6d4a:	2800      	cmp	r0, #0
    6d4c:	d100      	bne.n	6d50 <_svfprintf_r+0x1250>
    6d4e:	e170      	b.n	7032 <_svfprintf_r+0x1532>
    6d50:	9e08      	ldr	r6, [sp, #32]
    6d52:	2340      	movs	r3, #64	; 0x40
    6d54:	6173      	str	r3, [r6, #20]
    6d56:	f7fe feee 	bl	5b36 <_svfprintf_r+0x36>
    6d5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6d5c:	990e      	ldr	r1, [sp, #56]	; 0x38
    6d5e:	6803      	ldr	r3, [r0, #0]
    6d60:	3004      	adds	r0, #4
    6d62:	6019      	str	r1, [r3, #0]
    6d64:	900f      	str	r0, [sp, #60]	; 0x3c
    6d66:	f7fe fef4 	bl	5b52 <_svfprintf_r+0x52>
    6d6a:	4810      	ldr	r0, [pc, #64]	; (6dac <_svfprintf_r+0x12ac>)
    6d6c:	9013      	str	r0, [sp, #76]	; 0x4c
    6d6e:	e592      	b.n	6896 <_svfprintf_r+0xd96>
    6d70:	9809      	ldr	r0, [sp, #36]	; 0x24
    6d72:	9908      	ldr	r1, [sp, #32]
    6d74:	1c22      	adds	r2, r4, #0
    6d76:	f004 f985 	bl	b084 <__ssprint_r>
    6d7a:	2800      	cmp	r0, #0
    6d7c:	d001      	beq.n	6d82 <_svfprintf_r+0x1282>
    6d7e:	f7ff f876 	bl	5e6e <_svfprintf_r+0x36e>
    6d82:	9d42      	ldr	r5, [sp, #264]	; 0x108
    6d84:	ab1f      	add	r3, sp, #124	; 0x7c
    6d86:	e68b      	b.n	6aa0 <_svfprintf_r+0xfa0>
    6d88:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6d8a:	3b47      	subs	r3, #71	; 0x47
    6d8c:	2606      	movs	r6, #6
    6d8e:	930c      	str	r3, [sp, #48]	; 0x30
    6d90:	e70f      	b.n	6bb2 <_svfprintf_r+0x10b2>
    6d92:	46c0      	nop			; (mov r8, r8)
    6d94:	46c0      	nop			; (mov r8, r8)
    6d96:	46c0      	nop			; (mov r8, r8)
	...
    6da0:	0000e3a0 	.word	0x0000e3a0
    6da4:	0000ee00 	.word	0x0000ee00
    6da8:	0000edc4 	.word	0x0000edc4
    6dac:	0000edc8 	.word	0x0000edc8
    6db0:	4fa7      	ldr	r7, [pc, #668]	; (7050 <_svfprintf_r+0x1550>)
    6db2:	46b8      	mov	r8, r7
    6db4:	2610      	movs	r6, #16
    6db6:	1c32      	adds	r2, r6, #0
    6db8:	4442      	add	r2, r8
    6dba:	601a      	str	r2, [r3, #0]
    6dbc:	68a2      	ldr	r2, [r4, #8]
    6dbe:	18aa      	adds	r2, r5, r2
    6dc0:	605d      	str	r5, [r3, #4]
    6dc2:	60a2      	str	r2, [r4, #8]
    6dc4:	6862      	ldr	r2, [r4, #4]
    6dc6:	3201      	adds	r2, #1
    6dc8:	6062      	str	r2, [r4, #4]
    6dca:	3308      	adds	r3, #8
    6dcc:	2a07      	cmp	r2, #7
    6dce:	dd09      	ble.n	6de4 <_svfprintf_r+0x12e4>
    6dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
    6dd2:	9908      	ldr	r1, [sp, #32]
    6dd4:	1c22      	adds	r2, r4, #0
    6dd6:	f004 f955 	bl	b084 <__ssprint_r>
    6dda:	2800      	cmp	r0, #0
    6ddc:	d001      	beq.n	6de2 <_svfprintf_r+0x12e2>
    6dde:	f7ff f846 	bl	5e6e <_svfprintf_r+0x36e>
    6de2:	ab1f      	add	r3, sp, #124	; 0x7c
    6de4:	980d      	ldr	r0, [sp, #52]	; 0x34
    6de6:	68a2      	ldr	r2, [r4, #8]
    6de8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    6dea:	1812      	adds	r2, r2, r0
    6dec:	601f      	str	r7, [r3, #0]
    6dee:	6058      	str	r0, [r3, #4]
    6df0:	60a2      	str	r2, [r4, #8]
    6df2:	6862      	ldr	r2, [r4, #4]
    6df4:	3201      	adds	r2, #1
    6df6:	6062      	str	r2, [r4, #4]
    6df8:	3308      	adds	r3, #8
    6dfa:	2a07      	cmp	r2, #7
    6dfc:	dc01      	bgt.n	6e02 <_svfprintf_r+0x1302>
    6dfe:	f7fe ffc4 	bl	5d8a <_svfprintf_r+0x28a>
    6e02:	f7ff fb79 	bl	64f8 <_svfprintf_r+0x9f8>
    6e06:	222d      	movs	r2, #45	; 0x2d
    6e08:	464b      	mov	r3, r9
    6e0a:	701a      	strb	r2, [r3, #0]
    6e0c:	f7ff f8da 	bl	5fc4 <_svfprintf_r+0x4c4>
    6e10:	1c3a      	adds	r2, r7, #0
    6e12:	e5b1      	b.n	6978 <_svfprintf_r+0xe78>
    6e14:	9813      	ldr	r0, [sp, #76]	; 0x4c
    6e16:	f7fe fe35 	bl	5a84 <strlen>
    6e1a:	43c3      	mvns	r3, r0
    6e1c:	17db      	asrs	r3, r3, #31
    6e1e:	900c      	str	r0, [sp, #48]	; 0x30
    6e20:	464e      	mov	r6, r9
    6e22:	4018      	ands	r0, r3
    6e24:	970f      	str	r7, [sp, #60]	; 0x3c
    6e26:	2700      	movs	r7, #0
    6e28:	900a      	str	r0, [sp, #40]	; 0x28
    6e2a:	7832      	ldrb	r2, [r6, #0]
    6e2c:	9714      	str	r7, [sp, #80]	; 0x50
    6e2e:	9718      	str	r7, [sp, #96]	; 0x60
    6e30:	f7ff f899 	bl	5f66 <_svfprintf_r+0x466>
    6e34:	4a86      	ldr	r2, [pc, #536]	; (7050 <_svfprintf_r+0x1550>)
    6e36:	1c2b      	adds	r3, r5, #0
    6e38:	3308      	adds	r3, #8
    6e3a:	4690      	mov	r8, r2
    6e3c:	f7fe ff18 	bl	5c70 <_svfprintf_r+0x170>
    6e40:	9809      	ldr	r0, [sp, #36]	; 0x24
    6e42:	9908      	ldr	r1, [sp, #32]
    6e44:	1c22      	adds	r2, r4, #0
    6e46:	f004 f91d 	bl	b084 <__ssprint_r>
    6e4a:	2800      	cmp	r0, #0
    6e4c:	d001      	beq.n	6e52 <_svfprintf_r+0x1352>
    6e4e:	f7ff f80e 	bl	5e6e <_svfprintf_r+0x36e>
    6e52:	af1f      	add	r7, sp, #124	; 0x7c
    6e54:	f7ff fba6 	bl	65a4 <_svfprintf_r+0xaa4>
    6e58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6e5a:	1ae3      	subs	r3, r4, r3
    6e5c:	930c      	str	r3, [sp, #48]	; 0x30
    6e5e:	f7ff f878 	bl	5f52 <_svfprintf_r+0x452>
    6e62:	9809      	ldr	r0, [sp, #36]	; 0x24
    6e64:	9908      	ldr	r1, [sp, #32]
    6e66:	1c22      	adds	r2, r4, #0
    6e68:	f004 f90c 	bl	b084 <__ssprint_r>
    6e6c:	2800      	cmp	r0, #0
    6e6e:	d001      	beq.n	6e74 <_svfprintf_r+0x1374>
    6e70:	f7fe fffd 	bl	5e6e <_svfprintf_r+0x36e>
    6e74:	9942      	ldr	r1, [sp, #264]	; 0x108
    6e76:	980d      	ldr	r0, [sp, #52]	; 0x34
    6e78:	aa1f      	add	r2, sp, #124	; 0x7c
    6e7a:	1a41      	subs	r1, r0, r1
    6e7c:	e59d      	b.n	69ba <_svfprintf_r+0xeba>
    6e7e:	4a74      	ldr	r2, [pc, #464]	; (7050 <_svfprintf_r+0x1550>)
    6e80:	4690      	mov	r8, r2
    6e82:	f7fe ffad 	bl	5de0 <_svfprintf_r+0x2e0>
    6e86:	9809      	ldr	r0, [sp, #36]	; 0x24
    6e88:	9908      	ldr	r1, [sp, #32]
    6e8a:	1c22      	adds	r2, r4, #0
    6e8c:	f004 f8fa 	bl	b084 <__ssprint_r>
    6e90:	2800      	cmp	r0, #0
    6e92:	d001      	beq.n	6e98 <_svfprintf_r+0x1398>
    6e94:	f7fe ffeb 	bl	5e6e <_svfprintf_r+0x36e>
    6e98:	aa1f      	add	r2, sp, #124	; 0x7c
    6e9a:	e56d      	b.n	6978 <_svfprintf_r+0xe78>
    6e9c:	960c      	str	r6, [sp, #48]	; 0x30
    6e9e:	2e06      	cmp	r6, #6
    6ea0:	d90a      	bls.n	6eb8 <_svfprintf_r+0x13b8>
    6ea2:	2306      	movs	r3, #6
    6ea4:	930c      	str	r3, [sp, #48]	; 0x30
    6ea6:	930a      	str	r3, [sp, #40]	; 0x28
    6ea8:	970f      	str	r7, [sp, #60]	; 0x3c
    6eaa:	4f6a      	ldr	r7, [pc, #424]	; (7054 <_svfprintf_r+0x1554>)
    6eac:	2200      	movs	r2, #0
    6eae:	9214      	str	r2, [sp, #80]	; 0x50
    6eb0:	9218      	str	r2, [sp, #96]	; 0x60
    6eb2:	9713      	str	r7, [sp, #76]	; 0x4c
    6eb4:	f7fe fea2 	bl	5bfc <_svfprintf_r+0xfc>
    6eb8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    6eba:	43f3      	mvns	r3, r6
    6ebc:	17db      	asrs	r3, r3, #31
    6ebe:	401e      	ands	r6, r3
    6ec0:	960a      	str	r6, [sp, #40]	; 0x28
    6ec2:	e7f1      	b.n	6ea8 <_svfprintf_r+0x13a8>
    6ec4:	46b2      	mov	sl, r6
    6ec6:	2303      	movs	r3, #3
    6ec8:	e696      	b.n	6bf8 <_svfprintf_r+0x10f8>
    6eca:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6ecc:	2a66      	cmp	r2, #102	; 0x66
    6ece:	d000      	beq.n	6ed2 <_svfprintf_r+0x13d2>
    6ed0:	e091      	b.n	6ff6 <_svfprintf_r+0x14f6>
    6ed2:	9a42      	ldr	r2, [sp, #264]	; 0x108
    6ed4:	920c      	str	r2, [sp, #48]	; 0x30
    6ed6:	2a00      	cmp	r2, #0
    6ed8:	dc00      	bgt.n	6edc <_svfprintf_r+0x13dc>
    6eda:	e08e      	b.n	6ffa <_svfprintf_r+0x14fa>
    6edc:	2e00      	cmp	r6, #0
    6ede:	d102      	bne.n	6ee6 <_svfprintf_r+0x13e6>
    6ee0:	9907      	ldr	r1, [sp, #28]
    6ee2:	07c9      	lsls	r1, r1, #31
    6ee4:	d502      	bpl.n	6eec <_svfprintf_r+0x13ec>
    6ee6:	1c53      	adds	r3, r2, #1
    6ee8:	199b      	adds	r3, r3, r6
    6eea:	930c      	str	r3, [sp, #48]	; 0x30
    6eec:	4641      	mov	r1, r8
    6eee:	9218      	str	r2, [sp, #96]	; 0x60
    6ef0:	9116      	str	r1, [sp, #88]	; 0x58
    6ef2:	e704      	b.n	6cfe <_svfprintf_r+0x11fe>
    6ef4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6ef6:	43fb      	mvns	r3, r7
    6ef8:	17db      	asrs	r3, r3, #31
    6efa:	222d      	movs	r2, #45	; 0x2d
    6efc:	464e      	mov	r6, r9
    6efe:	401f      	ands	r7, r3
    6f00:	2000      	movs	r0, #0
    6f02:	7032      	strb	r2, [r6, #0]
    6f04:	970a      	str	r7, [sp, #40]	; 0x28
    6f06:	9014      	str	r0, [sp, #80]	; 0x50
    6f08:	f7ff f830 	bl	5f6c <_svfprintf_r+0x46c>
    6f0c:	4950      	ldr	r1, [pc, #320]	; (7050 <_svfprintf_r+0x1550>)
    6f0e:	1c2b      	adds	r3, r5, #0
    6f10:	4688      	mov	r8, r1
    6f12:	3508      	adds	r5, #8
    6f14:	f7ff fa87 	bl	6426 <_svfprintf_r+0x926>
    6f18:	9b40      	ldr	r3, [sp, #256]	; 0x100
    6f1a:	429f      	cmp	r7, r3
    6f1c:	d800      	bhi.n	6f20 <_svfprintf_r+0x1420>
    6f1e:	e69b      	b.n	6c58 <_svfprintf_r+0x1158>
    6f20:	2230      	movs	r2, #48	; 0x30
    6f22:	701a      	strb	r2, [r3, #0]
    6f24:	3301      	adds	r3, #1
    6f26:	9340      	str	r3, [sp, #256]	; 0x100
    6f28:	429f      	cmp	r7, r3
    6f2a:	d8fa      	bhi.n	6f22 <_svfprintf_r+0x1422>
    6f2c:	1c3b      	adds	r3, r7, #0
    6f2e:	e693      	b.n	6c58 <_svfprintf_r+0x1158>
    6f30:	980d      	ldr	r0, [sp, #52]	; 0x34
    6f32:	4282      	cmp	r2, r0
    6f34:	db31      	blt.n	6f9a <_svfprintf_r+0x149a>
    6f36:	9b07      	ldr	r3, [sp, #28]
    6f38:	2167      	movs	r1, #103	; 0x67
    6f3a:	4688      	mov	r8, r1
    6f3c:	07db      	lsls	r3, r3, #31
    6f3e:	d5d5      	bpl.n	6eec <_svfprintf_r+0x13ec>
    6f40:	1c56      	adds	r6, r2, #1
    6f42:	960c      	str	r6, [sp, #48]	; 0x30
    6f44:	e7d2      	b.n	6eec <_svfprintf_r+0x13ec>
    6f46:	4649      	mov	r1, r9
    6f48:	960a      	str	r6, [sp, #40]	; 0x28
    6f4a:	780a      	ldrb	r2, [r1, #0]
    6f4c:	970f      	str	r7, [sp, #60]	; 0x3c
    6f4e:	960c      	str	r6, [sp, #48]	; 0x30
    6f50:	9014      	str	r0, [sp, #80]	; 0x50
    6f52:	9018      	str	r0, [sp, #96]	; 0x60
    6f54:	f7ff f807 	bl	5f66 <_svfprintf_r+0x466>
    6f58:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f5a:	9908      	ldr	r1, [sp, #32]
    6f5c:	1c22      	adds	r2, r4, #0
    6f5e:	f004 f891 	bl	b084 <__ssprint_r>
    6f62:	2800      	cmp	r0, #0
    6f64:	d001      	beq.n	6f6a <_svfprintf_r+0x146a>
    6f66:	f7fe ff82 	bl	5e6e <_svfprintf_r+0x36e>
    6f6a:	9d42      	ldr	r5, [sp, #264]	; 0x108
    6f6c:	ab1f      	add	r3, sp, #124	; 0x7c
    6f6e:	e5b0      	b.n	6ad2 <_svfprintf_r+0xfd2>
    6f70:	981b      	ldr	r0, [sp, #108]	; 0x6c
    6f72:	1c01      	adds	r1, r0, #0
    6f74:	2080      	movs	r0, #128	; 0x80
    6f76:	0600      	lsls	r0, r0, #24
    6f78:	1809      	adds	r1, r1, r0
    6f7a:	222d      	movs	r2, #45	; 0x2d
    6f7c:	910a      	str	r1, [sp, #40]	; 0x28
    6f7e:	9214      	str	r2, [sp, #80]	; 0x50
    6f80:	e624      	b.n	6bcc <_svfprintf_r+0x10cc>
    6f82:	46b2      	mov	sl, r6
    6f84:	2302      	movs	r3, #2
    6f86:	e637      	b.n	6bf8 <_svfprintf_r+0x10f8>
    6f88:	2330      	movs	r3, #48	; 0x30
    6f8a:	4657      	mov	r7, sl
    6f8c:	18f6      	adds	r6, r6, r3
    6f8e:	70bb      	strb	r3, [r7, #2]
    6f90:	70fe      	strb	r6, [r7, #3]
    6f92:	a93f      	add	r1, sp, #252	; 0xfc
    6f94:	e6a4      	b.n	6ce0 <_svfprintf_r+0x11e0>
    6f96:	9b40      	ldr	r3, [sp, #256]	; 0x100
    6f98:	e65e      	b.n	6c58 <_svfprintf_r+0x1158>
    6f9a:	2301      	movs	r3, #1
    6f9c:	2a00      	cmp	r2, #0
    6f9e:	dc01      	bgt.n	6fa4 <_svfprintf_r+0x14a4>
    6fa0:	18db      	adds	r3, r3, r3
    6fa2:	1a9b      	subs	r3, r3, r2
    6fa4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6fa6:	2067      	movs	r0, #103	; 0x67
    6fa8:	18ff      	adds	r7, r7, r3
    6faa:	970c      	str	r7, [sp, #48]	; 0x30
    6fac:	4680      	mov	r8, r0
    6fae:	e79d      	b.n	6eec <_svfprintf_r+0x13ec>
    6fb0:	4827      	ldr	r0, [pc, #156]	; (7050 <_svfprintf_r+0x1550>)
    6fb2:	4680      	mov	r8, r0
    6fb4:	f7ff fbc5 	bl	6742 <_svfprintf_r+0xc42>
    6fb8:	4e25      	ldr	r6, [pc, #148]	; (7050 <_svfprintf_r+0x1550>)
    6fba:	1c3a      	adds	r2, r7, #0
    6fbc:	3208      	adds	r2, #8
    6fbe:	46b0      	mov	r8, r6
    6fc0:	e4cc      	b.n	695c <_svfprintf_r+0xe5c>
    6fc2:	981a      	ldr	r0, [sp, #104]	; 0x68
    6fc4:	990a      	ldr	r1, [sp, #40]	; 0x28
    6fc6:	4b21      	ldr	r3, [pc, #132]	; (704c <_svfprintf_r+0x154c>)
    6fc8:	4a1f      	ldr	r2, [pc, #124]	; (7048 <_svfprintf_r+0x1548>)
    6fca:	f007 f8f9 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    6fce:	2800      	cmp	r0, #0
    6fd0:	d000      	beq.n	6fd4 <_svfprintf_r+0x14d4>
    6fd2:	e634      	b.n	6c3e <_svfprintf_r+0x113e>
    6fd4:	2301      	movs	r3, #1
    6fd6:	4651      	mov	r1, sl
    6fd8:	1a5b      	subs	r3, r3, r1
    6fda:	9342      	str	r3, [sp, #264]	; 0x108
    6fdc:	e62f      	b.n	6c3e <_svfprintf_r+0x113e>
    6fde:	232d      	movs	r3, #45	; 0x2d
    6fe0:	4650      	mov	r0, sl
    6fe2:	4276      	negs	r6, r6
    6fe4:	7043      	strb	r3, [r0, #1]
    6fe6:	e658      	b.n	6c9a <_svfprintf_r+0x119a>
    6fe8:	9e07      	ldr	r6, [sp, #28]
    6fea:	2301      	movs	r3, #1
    6fec:	401e      	ands	r6, r3
    6fee:	9618      	str	r6, [sp, #96]	; 0x60
    6ff0:	d100      	bne.n	6ff4 <_svfprintf_r+0x14f4>
    6ff2:	e684      	b.n	6cfe <_svfprintf_r+0x11fe>
    6ff4:	e67e      	b.n	6cf4 <_svfprintf_r+0x11f4>
    6ff6:	9a42      	ldr	r2, [sp, #264]	; 0x108
    6ff8:	e642      	b.n	6c80 <_svfprintf_r+0x1180>
    6ffa:	2e00      	cmp	r6, #0
    6ffc:	d105      	bne.n	700a <_svfprintf_r+0x150a>
    6ffe:	9f07      	ldr	r7, [sp, #28]
    7000:	2301      	movs	r3, #1
    7002:	930c      	str	r3, [sp, #48]	; 0x30
    7004:	421f      	tst	r7, r3
    7006:	d100      	bne.n	700a <_svfprintf_r+0x150a>
    7008:	e770      	b.n	6eec <_svfprintf_r+0x13ec>
    700a:	3602      	adds	r6, #2
    700c:	960c      	str	r6, [sp, #48]	; 0x30
    700e:	e76d      	b.n	6eec <_svfprintf_r+0x13ec>
    7010:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7012:	681b      	ldr	r3, [r3, #0]
    7014:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    7016:	469b      	mov	fp, r3
    7018:	2700      	movs	r7, #0
    701a:	3604      	adds	r6, #4
    701c:	45bb      	cmp	fp, r7
    701e:	db01      	blt.n	7024 <_svfprintf_r+0x1524>
    7020:	f7ff f889 	bl	6136 <_svfprintf_r+0x636>
    7024:	780b      	ldrb	r3, [r1, #0]
    7026:	960f      	str	r6, [sp, #60]	; 0x3c
    7028:	2601      	movs	r6, #1
    702a:	4276      	negs	r6, r6
    702c:	46b3      	mov	fp, r6
    702e:	f7fe fdcc 	bl	5bca <_svfprintf_r+0xca>
    7032:	9d09      	ldr	r5, [sp, #36]	; 0x24
    7034:	230c      	movs	r3, #12
    7036:	602b      	str	r3, [r5, #0]
    7038:	3b0b      	subs	r3, #11
    703a:	425b      	negs	r3, r3
    703c:	930e      	str	r3, [sp, #56]	; 0x38
    703e:	f7fe ff1d 	bl	5e7c <_svfprintf_r+0x37c>
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	46c0      	nop			; (mov r8, r8)
    7046:	46c0      	nop			; (mov r8, r8)
	...
    7050:	0000e3a0 	.word	0x0000e3a0
    7054:	0000edf8 	.word	0x0000edf8

00007058 <_vfprintf_r>:
    7058:	b5f0      	push	{r4, r5, r6, r7, lr}
    705a:	465f      	mov	r7, fp
    705c:	4656      	mov	r6, sl
    705e:	464d      	mov	r5, r9
    7060:	4644      	mov	r4, r8
    7062:	b4f0      	push	{r4, r5, r6, r7}
    7064:	4cbc      	ldr	r4, [pc, #752]	; (7358 <_vfprintf_r+0x300>)
    7066:	44a5      	add	sp, r4
    7068:	468a      	mov	sl, r1
    706a:	1c15      	adds	r5, r2, #0
    706c:	930f      	str	r3, [sp, #60]	; 0x3c
    706e:	9009      	str	r0, [sp, #36]	; 0x24
    7070:	f002 ff34 	bl	9edc <_localeconv_r>
    7074:	6800      	ldr	r0, [r0, #0]
    7076:	9018      	str	r0, [sp, #96]	; 0x60
    7078:	f7fe fd04 	bl	5a84 <strlen>
    707c:	901c      	str	r0, [sp, #112]	; 0x70
    707e:	9809      	ldr	r0, [sp, #36]	; 0x24
    7080:	2800      	cmp	r0, #0
    7082:	d003      	beq.n	708c <_vfprintf_r+0x34>
    7084:	6b83      	ldr	r3, [r0, #56]	; 0x38
    7086:	2b00      	cmp	r3, #0
    7088:	d100      	bne.n	708c <_vfprintf_r+0x34>
    708a:	e22a      	b.n	74e2 <_vfprintf_r+0x48a>
    708c:	4651      	mov	r1, sl
    708e:	898a      	ldrh	r2, [r1, #12]
    7090:	2180      	movs	r1, #128	; 0x80
    7092:	0189      	lsls	r1, r1, #6
    7094:	1c13      	adds	r3, r2, #0
    7096:	420a      	tst	r2, r1
    7098:	d108      	bne.n	70ac <_vfprintf_r+0x54>
    709a:	430a      	orrs	r2, r1
    709c:	4653      	mov	r3, sl
    709e:	6e59      	ldr	r1, [r3, #100]	; 0x64
    70a0:	819a      	strh	r2, [r3, #12]
    70a2:	4bae      	ldr	r3, [pc, #696]	; (735c <_vfprintf_r+0x304>)
    70a4:	4656      	mov	r6, sl
    70a6:	400b      	ands	r3, r1
    70a8:	6673      	str	r3, [r6, #100]	; 0x64
    70aa:	1c13      	adds	r3, r2, #0
    70ac:	071f      	lsls	r7, r3, #28
    70ae:	d401      	bmi.n	70b4 <_vfprintf_r+0x5c>
    70b0:	f001 fab0 	bl	8614 <_vfprintf_r+0x15bc>
    70b4:	4650      	mov	r0, sl
    70b6:	6901      	ldr	r1, [r0, #16]
    70b8:	2900      	cmp	r1, #0
    70ba:	d101      	bne.n	70c0 <_vfprintf_r+0x68>
    70bc:	f001 faaa 	bl	8614 <_vfprintf_r+0x15bc>
    70c0:	211a      	movs	r1, #26
    70c2:	400b      	ands	r3, r1
    70c4:	2b0a      	cmp	r3, #10
    70c6:	d100      	bne.n	70ca <_vfprintf_r+0x72>
    70c8:	e1d1      	b.n	746e <_vfprintf_r+0x416>
    70ca:	4aa5      	ldr	r2, [pc, #660]	; (7360 <_vfprintf_r+0x308>)
    70cc:	4ca5      	ldr	r4, [pc, #660]	; (7364 <_vfprintf_r+0x30c>)
    70ce:	2300      	movs	r3, #0
    70d0:	446c      	add	r4, sp
    70d2:	446a      	add	r2, sp
    70d4:	6022      	str	r2, [r4, #0]
    70d6:	60a3      	str	r3, [r4, #8]
    70d8:	6063      	str	r3, [r4, #4]
    70da:	930e      	str	r3, [sp, #56]	; 0x38
    70dc:	931a      	str	r3, [sp, #104]	; 0x68
    70de:	931b      	str	r3, [sp, #108]	; 0x6c
    70e0:	9317      	str	r3, [sp, #92]	; 0x5c
    70e2:	931d      	str	r3, [sp, #116]	; 0x74
    70e4:	930d      	str	r3, [sp, #52]	; 0x34
    70e6:	9508      	str	r5, [sp, #32]
    70e8:	46d3      	mov	fp, sl
    70ea:	1c15      	adds	r5, r2, #0
    70ec:	9e08      	ldr	r6, [sp, #32]
    70ee:	7833      	ldrb	r3, [r6, #0]
    70f0:	2b00      	cmp	r3, #0
    70f2:	d100      	bne.n	70f6 <_vfprintf_r+0x9e>
    70f4:	e186      	b.n	7404 <_vfprintf_r+0x3ac>
    70f6:	2b25      	cmp	r3, #37	; 0x25
    70f8:	d102      	bne.n	7100 <_vfprintf_r+0xa8>
    70fa:	e183      	b.n	7404 <_vfprintf_r+0x3ac>
    70fc:	2b00      	cmp	r3, #0
    70fe:	d003      	beq.n	7108 <_vfprintf_r+0xb0>
    7100:	3601      	adds	r6, #1
    7102:	7833      	ldrb	r3, [r6, #0]
    7104:	2b25      	cmp	r3, #37	; 0x25
    7106:	d1f9      	bne.n	70fc <_vfprintf_r+0xa4>
    7108:	9808      	ldr	r0, [sp, #32]
    710a:	1a37      	subs	r7, r6, r0
    710c:	2f00      	cmp	r7, #0
    710e:	d00f      	beq.n	7130 <_vfprintf_r+0xd8>
    7110:	68a3      	ldr	r3, [r4, #8]
    7112:	19db      	adds	r3, r3, r7
    7114:	6028      	str	r0, [r5, #0]
    7116:	606f      	str	r7, [r5, #4]
    7118:	60a3      	str	r3, [r4, #8]
    711a:	6863      	ldr	r3, [r4, #4]
    711c:	3301      	adds	r3, #1
    711e:	6063      	str	r3, [r4, #4]
    7120:	3508      	adds	r5, #8
    7122:	2b07      	cmp	r3, #7
    7124:	dd00      	ble.n	7128 <_vfprintf_r+0xd0>
    7126:	e17e      	b.n	7426 <_vfprintf_r+0x3ce>
    7128:	990d      	ldr	r1, [sp, #52]	; 0x34
    712a:	19c9      	adds	r1, r1, r7
    712c:	910d      	str	r1, [sp, #52]	; 0x34
    712e:	7833      	ldrb	r3, [r6, #0]
    7130:	2b00      	cmp	r3, #0
    7132:	d101      	bne.n	7138 <_vfprintf_r+0xe0>
    7134:	f000 fbed 	bl	7912 <_vfprintf_r+0x8ba>
    7138:	4b8b      	ldr	r3, [pc, #556]	; (7368 <_vfprintf_r+0x310>)
    713a:	1c72      	adds	r2, r6, #1
    713c:	446b      	add	r3, sp
    713e:	2700      	movs	r7, #0
    7140:	9208      	str	r2, [sp, #32]
    7142:	701f      	strb	r7, [r3, #0]
    7144:	2000      	movs	r0, #0
    7146:	4699      	mov	r9, r3
    7148:	2108      	movs	r1, #8
    714a:	7873      	ldrb	r3, [r6, #1]
    714c:	2780      	movs	r7, #128	; 0x80
    714e:	2601      	movs	r6, #1
    7150:	4a86      	ldr	r2, [pc, #536]	; (736c <_vfprintf_r+0x314>)
    7152:	900b      	str	r0, [sp, #44]	; 0x2c
    7154:	9007      	str	r0, [sp, #28]
    7156:	4276      	negs	r6, r6
    7158:	3020      	adds	r0, #32
    715a:	4688      	mov	r8, r1
    715c:	46ba      	mov	sl, r7
    715e:	9f08      	ldr	r7, [sp, #32]
    7160:	3701      	adds	r7, #1
    7162:	9708      	str	r7, [sp, #32]
    7164:	1c19      	adds	r1, r3, #0
    7166:	3920      	subs	r1, #32
    7168:	2958      	cmp	r1, #88	; 0x58
    716a:	d800      	bhi.n	716e <_vfprintf_r+0x116>
    716c:	e14d      	b.n	740a <_vfprintf_r+0x3b2>
    716e:	9316      	str	r3, [sp, #88]	; 0x58
    7170:	2b00      	cmp	r3, #0
    7172:	d100      	bne.n	7176 <_vfprintf_r+0x11e>
    7174:	e3cd      	b.n	7912 <_vfprintf_r+0x8ba>
    7176:	4b7e      	ldr	r3, [pc, #504]	; (7370 <_vfprintf_r+0x318>)
    7178:	af16      	add	r7, sp, #88	; 0x58
    717a:	783f      	ldrb	r7, [r7, #0]
    717c:	446b      	add	r3, sp
    717e:	2100      	movs	r1, #0
    7180:	4648      	mov	r0, r9
    7182:	701f      	strb	r7, [r3, #0]
    7184:	7001      	strb	r1, [r0, #0]
    7186:	2200      	movs	r2, #0
    7188:	2601      	movs	r6, #1
    718a:	960a      	str	r6, [sp, #40]	; 0x28
    718c:	960c      	str	r6, [sp, #48]	; 0x30
    718e:	9214      	str	r2, [sp, #80]	; 0x50
    7190:	9219      	str	r2, [sp, #100]	; 0x64
    7192:	9313      	str	r3, [sp, #76]	; 0x4c
    7194:	9807      	ldr	r0, [sp, #28]
    7196:	2302      	movs	r3, #2
    7198:	4018      	ands	r0, r3
    719a:	4682      	mov	sl, r0
    719c:	d002      	beq.n	71a4 <_vfprintf_r+0x14c>
    719e:	990a      	ldr	r1, [sp, #40]	; 0x28
    71a0:	18c9      	adds	r1, r1, r3
    71a2:	910a      	str	r1, [sp, #40]	; 0x28
    71a4:	9e07      	ldr	r6, [sp, #28]
    71a6:	2384      	movs	r3, #132	; 0x84
    71a8:	401e      	ands	r6, r3
    71aa:	9615      	str	r6, [sp, #84]	; 0x54
    71ac:	d13e      	bne.n	722c <_vfprintf_r+0x1d4>
    71ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    71b0:	980a      	ldr	r0, [sp, #40]	; 0x28
    71b2:	1a3e      	subs	r6, r7, r0
    71b4:	2e00      	cmp	r6, #0
    71b6:	dd39      	ble.n	722c <_vfprintf_r+0x1d4>
    71b8:	2e10      	cmp	r6, #16
    71ba:	dc01      	bgt.n	71c0 <_vfprintf_r+0x168>
    71bc:	f001 f9d0 	bl	8560 <_vfprintf_r+0x1508>
    71c0:	496c      	ldr	r1, [pc, #432]	; (7374 <_vfprintf_r+0x31c>)
    71c2:	1c2a      	adds	r2, r5, #0
    71c4:	2710      	movs	r7, #16
    71c6:	1c0d      	adds	r5, r1, #0
    71c8:	e005      	b.n	71d6 <_vfprintf_r+0x17e>
    71ca:	3208      	adds	r2, #8
    71cc:	1c13      	adds	r3, r2, #0
    71ce:	3e10      	subs	r6, #16
    71d0:	3308      	adds	r3, #8
    71d2:	2e10      	cmp	r6, #16
    71d4:	dd18      	ble.n	7208 <_vfprintf_r+0x1b0>
    71d6:	68a3      	ldr	r3, [r4, #8]
    71d8:	3310      	adds	r3, #16
    71da:	6015      	str	r5, [r2, #0]
    71dc:	6057      	str	r7, [r2, #4]
    71de:	60a3      	str	r3, [r4, #8]
    71e0:	6863      	ldr	r3, [r4, #4]
    71e2:	3301      	adds	r3, #1
    71e4:	6063      	str	r3, [r4, #4]
    71e6:	2b07      	cmp	r3, #7
    71e8:	ddef      	ble.n	71ca <_vfprintf_r+0x172>
    71ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    71ec:	4659      	mov	r1, fp
    71ee:	1c22      	adds	r2, r4, #0
    71f0:	f004 fd72 	bl	bcd8 <__sprint_r>
    71f4:	2800      	cmp	r0, #0
    71f6:	d000      	beq.n	71fa <_vfprintf_r+0x1a2>
    71f8:	e126      	b.n	7448 <_vfprintf_r+0x3f0>
    71fa:	4b5f      	ldr	r3, [pc, #380]	; (7378 <_vfprintf_r+0x320>)
    71fc:	4a58      	ldr	r2, [pc, #352]	; (7360 <_vfprintf_r+0x308>)
    71fe:	3e10      	subs	r6, #16
    7200:	446b      	add	r3, sp
    7202:	446a      	add	r2, sp
    7204:	2e10      	cmp	r6, #16
    7206:	dce6      	bgt.n	71d6 <_vfprintf_r+0x17e>
    7208:	46a8      	mov	r8, r5
    720a:	1c15      	adds	r5, r2, #0
    720c:	68a2      	ldr	r2, [r4, #8]
    720e:	4647      	mov	r7, r8
    7210:	18b2      	adds	r2, r6, r2
    7212:	602f      	str	r7, [r5, #0]
    7214:	606e      	str	r6, [r5, #4]
    7216:	60a2      	str	r2, [r4, #8]
    7218:	6862      	ldr	r2, [r4, #4]
    721a:	3201      	adds	r2, #1
    721c:	6062      	str	r2, [r4, #4]
    721e:	2a07      	cmp	r2, #7
    7220:	dd01      	ble.n	7226 <_vfprintf_r+0x1ce>
    7222:	f000 fd90 	bl	7d46 <_vfprintf_r+0xcee>
    7226:	4648      	mov	r0, r9
    7228:	7802      	ldrb	r2, [r0, #0]
    722a:	1c1d      	adds	r5, r3, #0
    722c:	2a00      	cmp	r2, #0
    722e:	d00e      	beq.n	724e <_vfprintf_r+0x1f6>
    7230:	2301      	movs	r3, #1
    7232:	606b      	str	r3, [r5, #4]
    7234:	68a3      	ldr	r3, [r4, #8]
    7236:	464a      	mov	r2, r9
    7238:	3301      	adds	r3, #1
    723a:	602a      	str	r2, [r5, #0]
    723c:	60a3      	str	r3, [r4, #8]
    723e:	6863      	ldr	r3, [r4, #4]
    7240:	3301      	adds	r3, #1
    7242:	6063      	str	r3, [r4, #4]
    7244:	3508      	adds	r5, #8
    7246:	2b07      	cmp	r3, #7
    7248:	dd01      	ble.n	724e <_vfprintf_r+0x1f6>
    724a:	f000 fcc7 	bl	7bdc <_vfprintf_r+0xb84>
    724e:	2300      	movs	r3, #0
    7250:	459a      	cmp	sl, r3
    7252:	d00f      	beq.n	7274 <_vfprintf_r+0x21c>
    7254:	4b49      	ldr	r3, [pc, #292]	; (737c <_vfprintf_r+0x324>)
    7256:	446b      	add	r3, sp
    7258:	602b      	str	r3, [r5, #0]
    725a:	2302      	movs	r3, #2
    725c:	606b      	str	r3, [r5, #4]
    725e:	68a3      	ldr	r3, [r4, #8]
    7260:	3302      	adds	r3, #2
    7262:	60a3      	str	r3, [r4, #8]
    7264:	6863      	ldr	r3, [r4, #4]
    7266:	3301      	adds	r3, #1
    7268:	6063      	str	r3, [r4, #4]
    726a:	3508      	adds	r5, #8
    726c:	2b07      	cmp	r3, #7
    726e:	dd01      	ble.n	7274 <_vfprintf_r+0x21c>
    7270:	f000 fca8 	bl	7bc4 <_vfprintf_r+0xb6c>
    7274:	9e15      	ldr	r6, [sp, #84]	; 0x54
    7276:	2e80      	cmp	r6, #128	; 0x80
    7278:	d100      	bne.n	727c <_vfprintf_r+0x224>
    727a:	e3cf      	b.n	7a1c <_vfprintf_r+0x9c4>
    727c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    727e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7280:	1ad6      	subs	r6, r2, r3
    7282:	2e00      	cmp	r6, #0
    7284:	dc01      	bgt.n	728a <_vfprintf_r+0x232>
    7286:	f000 fc19 	bl	7abc <_vfprintf_r+0xa64>
    728a:	2e10      	cmp	r6, #16
    728c:	dc01      	bgt.n	7292 <_vfprintf_r+0x23a>
    728e:	f001 f80e 	bl	82ae <_vfprintf_r+0x1256>
    7292:	4f38      	ldr	r7, [pc, #224]	; (7374 <_vfprintf_r+0x31c>)
    7294:	2010      	movs	r0, #16
    7296:	46b8      	mov	r8, r7
    7298:	4681      	mov	r9, r0
    729a:	1c2b      	adds	r3, r5, #0
    729c:	44c1      	add	r9, r8
    729e:	4682      	mov	sl, r0
    72a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    72a2:	465f      	mov	r7, fp
    72a4:	e005      	b.n	72b2 <_vfprintf_r+0x25a>
    72a6:	3308      	adds	r3, #8
    72a8:	1c1a      	adds	r2, r3, #0
    72aa:	3e10      	subs	r6, #16
    72ac:	3208      	adds	r2, #8
    72ae:	2e10      	cmp	r6, #16
    72b0:	dd1b      	ble.n	72ea <_vfprintf_r+0x292>
    72b2:	464a      	mov	r2, r9
    72b4:	601a      	str	r2, [r3, #0]
    72b6:	68a2      	ldr	r2, [r4, #8]
    72b8:	4650      	mov	r0, sl
    72ba:	3210      	adds	r2, #16
    72bc:	6058      	str	r0, [r3, #4]
    72be:	60a2      	str	r2, [r4, #8]
    72c0:	6862      	ldr	r2, [r4, #4]
    72c2:	3201      	adds	r2, #1
    72c4:	6062      	str	r2, [r4, #4]
    72c6:	2a07      	cmp	r2, #7
    72c8:	dded      	ble.n	72a6 <_vfprintf_r+0x24e>
    72ca:	1c28      	adds	r0, r5, #0
    72cc:	1c39      	adds	r1, r7, #0
    72ce:	1c22      	adds	r2, r4, #0
    72d0:	f004 fd02 	bl	bcd8 <__sprint_r>
    72d4:	2800      	cmp	r0, #0
    72d6:	d001      	beq.n	72dc <_vfprintf_r+0x284>
    72d8:	f000 fc66 	bl	7ba8 <_vfprintf_r+0xb50>
    72dc:	4a26      	ldr	r2, [pc, #152]	; (7378 <_vfprintf_r+0x320>)
    72de:	4b20      	ldr	r3, [pc, #128]	; (7360 <_vfprintf_r+0x308>)
    72e0:	3e10      	subs	r6, #16
    72e2:	446a      	add	r2, sp
    72e4:	446b      	add	r3, sp
    72e6:	2e10      	cmp	r6, #16
    72e8:	dce3      	bgt.n	72b2 <_vfprintf_r+0x25a>
    72ea:	46bb      	mov	fp, r7
    72ec:	1c1d      	adds	r5, r3, #0
    72ee:	1c17      	adds	r7, r2, #0
    72f0:	2110      	movs	r1, #16
    72f2:	1c0b      	adds	r3, r1, #0
    72f4:	4443      	add	r3, r8
    72f6:	602b      	str	r3, [r5, #0]
    72f8:	68a3      	ldr	r3, [r4, #8]
    72fa:	606e      	str	r6, [r5, #4]
    72fc:	18f6      	adds	r6, r6, r3
    72fe:	6863      	ldr	r3, [r4, #4]
    7300:	3301      	adds	r3, #1
    7302:	60a6      	str	r6, [r4, #8]
    7304:	6063      	str	r3, [r4, #4]
    7306:	2b07      	cmp	r3, #7
    7308:	dd01      	ble.n	730e <_vfprintf_r+0x2b6>
    730a:	f000 fc4f 	bl	7bac <_vfprintf_r+0xb54>
    730e:	9a07      	ldr	r2, [sp, #28]
    7310:	05d2      	lsls	r2, r2, #23
    7312:	d500      	bpl.n	7316 <_vfprintf_r+0x2be>
    7314:	e308      	b.n	7928 <_vfprintf_r+0x8d0>
    7316:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7318:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    731a:	603b      	str	r3, [r7, #0]
    731c:	607d      	str	r5, [r7, #4]
    731e:	68a3      	ldr	r3, [r4, #8]
    7320:	195b      	adds	r3, r3, r5
    7322:	60a3      	str	r3, [r4, #8]
    7324:	6863      	ldr	r3, [r4, #4]
    7326:	3301      	adds	r3, #1
    7328:	6063      	str	r3, [r4, #4]
    732a:	3708      	adds	r7, #8
    732c:	2b07      	cmp	r3, #7
    732e:	dd01      	ble.n	7334 <_vfprintf_r+0x2dc>
    7330:	f000 fc17 	bl	7b62 <_vfprintf_r+0xb0a>
    7334:	9907      	ldr	r1, [sp, #28]
    7336:	0749      	lsls	r1, r1, #29
    7338:	d550      	bpl.n	73dc <_vfprintf_r+0x384>
    733a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    733c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    733e:	1ad5      	subs	r5, r2, r3
    7340:	2d00      	cmp	r5, #0
    7342:	dd4b      	ble.n	73dc <_vfprintf_r+0x384>
    7344:	2d10      	cmp	r5, #16
    7346:	dc01      	bgt.n	734c <_vfprintf_r+0x2f4>
    7348:	f001 f971 	bl	862e <_vfprintf_r+0x15d6>
    734c:	4809      	ldr	r0, [pc, #36]	; (7374 <_vfprintf_r+0x31c>)
    734e:	1c3b      	adds	r3, r7, #0
    7350:	2610      	movs	r6, #16
    7352:	1c07      	adds	r7, r0, #0
    7354:	e017      	b.n	7386 <_vfprintf_r+0x32e>
    7356:	46c0      	nop			; (mov r8, r8)
    7358:	fffffa8c 	.word	0xfffffa8c
    735c:	ffffdfff 	.word	0xffffdfff
    7360:	000004e4 	.word	0x000004e4
    7364:	0000054c 	.word	0x0000054c
    7368:	0000056f 	.word	0x0000056f
    736c:	0000e3c0 	.word	0x0000e3c0
    7370:	00000524 	.word	0x00000524
    7374:	0000e524 	.word	0x0000e524
    7378:	000004ec 	.word	0x000004ec
    737c:	0000056c 	.word	0x0000056c
    7380:	3d10      	subs	r5, #16
    7382:	2d10      	cmp	r5, #16
    7384:	dd16      	ble.n	73b4 <_vfprintf_r+0x35c>
    7386:	68a2      	ldr	r2, [r4, #8]
    7388:	3210      	adds	r2, #16
    738a:	601f      	str	r7, [r3, #0]
    738c:	605e      	str	r6, [r3, #4]
    738e:	60a2      	str	r2, [r4, #8]
    7390:	6862      	ldr	r2, [r4, #4]
    7392:	3201      	adds	r2, #1
    7394:	6062      	str	r2, [r4, #4]
    7396:	3308      	adds	r3, #8
    7398:	2a07      	cmp	r2, #7
    739a:	ddf1      	ble.n	7380 <_vfprintf_r+0x328>
    739c:	9809      	ldr	r0, [sp, #36]	; 0x24
    739e:	4659      	mov	r1, fp
    73a0:	1c22      	adds	r2, r4, #0
    73a2:	f004 fc99 	bl	bcd8 <__sprint_r>
    73a6:	2800      	cmp	r0, #0
    73a8:	d14e      	bne.n	7448 <_vfprintf_r+0x3f0>
    73aa:	4bcf      	ldr	r3, [pc, #828]	; (76e8 <_vfprintf_r+0x690>)
    73ac:	3d10      	subs	r5, #16
    73ae:	446b      	add	r3, sp
    73b0:	2d10      	cmp	r5, #16
    73b2:	dce8      	bgt.n	7386 <_vfprintf_r+0x32e>
    73b4:	46b8      	mov	r8, r7
    73b6:	1c1f      	adds	r7, r3, #0
    73b8:	68a3      	ldr	r3, [r4, #8]
    73ba:	607d      	str	r5, [r7, #4]
    73bc:	18ed      	adds	r5, r5, r3
    73be:	6863      	ldr	r3, [r4, #4]
    73c0:	4641      	mov	r1, r8
    73c2:	3301      	adds	r3, #1
    73c4:	6039      	str	r1, [r7, #0]
    73c6:	60a5      	str	r5, [r4, #8]
    73c8:	6063      	str	r3, [r4, #4]
    73ca:	2b07      	cmp	r3, #7
    73cc:	dd07      	ble.n	73de <_vfprintf_r+0x386>
    73ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    73d0:	4659      	mov	r1, fp
    73d2:	1c22      	adds	r2, r4, #0
    73d4:	f004 fc80 	bl	bcd8 <__sprint_r>
    73d8:	2800      	cmp	r0, #0
    73da:	d135      	bne.n	7448 <_vfprintf_r+0x3f0>
    73dc:	68a5      	ldr	r5, [r4, #8]
    73de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    73e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    73e2:	4293      	cmp	r3, r2
    73e4:	da00      	bge.n	73e8 <_vfprintf_r+0x390>
    73e6:	1c13      	adds	r3, r2, #0
    73e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    73ea:	18f6      	adds	r6, r6, r3
    73ec:	960d      	str	r6, [sp, #52]	; 0x34
    73ee:	2d00      	cmp	r5, #0
    73f0:	d123      	bne.n	743a <_vfprintf_r+0x3e2>
    73f2:	2700      	movs	r7, #0
    73f4:	6067      	str	r7, [r4, #4]
    73f6:	9e08      	ldr	r6, [sp, #32]
    73f8:	4dbb      	ldr	r5, [pc, #748]	; (76e8 <_vfprintf_r+0x690>)
    73fa:	7833      	ldrb	r3, [r6, #0]
    73fc:	446d      	add	r5, sp
    73fe:	2b00      	cmp	r3, #0
    7400:	d000      	beq.n	7404 <_vfprintf_r+0x3ac>
    7402:	e678      	b.n	70f6 <_vfprintf_r+0x9e>
    7404:	9e08      	ldr	r6, [sp, #32]
    7406:	7833      	ldrb	r3, [r6, #0]
    7408:	e692      	b.n	7130 <_vfprintf_r+0xd8>
    740a:	0089      	lsls	r1, r1, #2
    740c:	5851      	ldr	r1, [r2, r1]
    740e:	468f      	mov	pc, r1
    7410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7412:	425b      	negs	r3, r3
    7414:	930b      	str	r3, [sp, #44]	; 0x2c
    7416:	970f      	str	r7, [sp, #60]	; 0x3c
    7418:	9f07      	ldr	r7, [sp, #28]
    741a:	2304      	movs	r3, #4
    741c:	431f      	orrs	r7, r3
    741e:	9707      	str	r7, [sp, #28]
    7420:	9908      	ldr	r1, [sp, #32]
    7422:	780b      	ldrb	r3, [r1, #0]
    7424:	e69b      	b.n	715e <_vfprintf_r+0x106>
    7426:	9809      	ldr	r0, [sp, #36]	; 0x24
    7428:	4659      	mov	r1, fp
    742a:	1c22      	adds	r2, r4, #0
    742c:	f004 fc54 	bl	bcd8 <__sprint_r>
    7430:	2800      	cmp	r0, #0
    7432:	d109      	bne.n	7448 <_vfprintf_r+0x3f0>
    7434:	4dac      	ldr	r5, [pc, #688]	; (76e8 <_vfprintf_r+0x690>)
    7436:	446d      	add	r5, sp
    7438:	e676      	b.n	7128 <_vfprintf_r+0xd0>
    743a:	9809      	ldr	r0, [sp, #36]	; 0x24
    743c:	4659      	mov	r1, fp
    743e:	1c22      	adds	r2, r4, #0
    7440:	f004 fc4a 	bl	bcd8 <__sprint_r>
    7444:	2800      	cmp	r0, #0
    7446:	d0d4      	beq.n	73f2 <_vfprintf_r+0x39a>
    7448:	46da      	mov	sl, fp
    744a:	4650      	mov	r0, sl
    744c:	8983      	ldrh	r3, [r0, #12]
    744e:	0659      	lsls	r1, r3, #25
    7450:	d502      	bpl.n	7458 <_vfprintf_r+0x400>
    7452:	2301      	movs	r3, #1
    7454:	425b      	negs	r3, r3
    7456:	930d      	str	r3, [sp, #52]	; 0x34
    7458:	4ba4      	ldr	r3, [pc, #656]	; (76ec <_vfprintf_r+0x694>)
    745a:	980d      	ldr	r0, [sp, #52]	; 0x34
    745c:	449d      	add	sp, r3
    745e:	bc3c      	pop	{r2, r3, r4, r5}
    7460:	4690      	mov	r8, r2
    7462:	4699      	mov	r9, r3
    7464:	46a2      	mov	sl, r4
    7466:	46ab      	mov	fp, r5
    7468:	bcf0      	pop	{r4, r5, r6, r7}
    746a:	bc02      	pop	{r1}
    746c:	4708      	bx	r1
    746e:	4653      	mov	r3, sl
    7470:	89d9      	ldrh	r1, [r3, #14]
    7472:	040b      	lsls	r3, r1, #16
    7474:	141b      	asrs	r3, r3, #16
    7476:	2b00      	cmp	r3, #0
    7478:	da00      	bge.n	747c <_vfprintf_r+0x424>
    747a:	e626      	b.n	70ca <_vfprintf_r+0x72>
    747c:	4656      	mov	r6, sl
    747e:	2302      	movs	r3, #2
    7480:	4c9b      	ldr	r4, [pc, #620]	; (76f0 <_vfprintf_r+0x698>)
    7482:	439a      	bics	r2, r3
    7484:	6e73      	ldr	r3, [r6, #100]	; 0x64
    7486:	446c      	add	r4, sp
    7488:	6663      	str	r3, [r4, #100]	; 0x64
    748a:	69f3      	ldr	r3, [r6, #28]
    748c:	61e3      	str	r3, [r4, #28]
    748e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7490:	81a2      	strh	r2, [r4, #12]
    7492:	81e1      	strh	r1, [r4, #14]
    7494:	6263      	str	r3, [r4, #36]	; 0x24
    7496:	4c96      	ldr	r4, [pc, #600]	; (76f0 <_vfprintf_r+0x698>)
    7498:	2380      	movs	r3, #128	; 0x80
    749a:	446c      	add	r4, sp
    749c:	00db      	lsls	r3, r3, #3
    749e:	af1f      	add	r7, sp, #124	; 0x7c
    74a0:	60a3      	str	r3, [r4, #8]
    74a2:	6163      	str	r3, [r4, #20]
    74a4:	2300      	movs	r3, #0
    74a6:	61a3      	str	r3, [r4, #24]
    74a8:	6027      	str	r7, [r4, #0]
    74aa:	6127      	str	r7, [r4, #16]
    74ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    74ae:	1c21      	adds	r1, r4, #0
    74b0:	1c2a      	adds	r2, r5, #0
    74b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    74b4:	f7ff fdd0 	bl	7058 <_vfprintf_r>
    74b8:	900d      	str	r0, [sp, #52]	; 0x34
    74ba:	2800      	cmp	r0, #0
    74bc:	db07      	blt.n	74ce <_vfprintf_r+0x476>
    74be:	9809      	ldr	r0, [sp, #36]	; 0x24
    74c0:	1c21      	adds	r1, r4, #0
    74c2:	f7fd fadb 	bl	4a7c <_fflush_r>
    74c6:	2800      	cmp	r0, #0
    74c8:	d001      	beq.n	74ce <_vfprintf_r+0x476>
    74ca:	f001 f99c 	bl	8806 <_vfprintf_r+0x17ae>
    74ce:	89a2      	ldrh	r2, [r4, #12]
    74d0:	2340      	movs	r3, #64	; 0x40
    74d2:	421a      	tst	r2, r3
    74d4:	d0c0      	beq.n	7458 <_vfprintf_r+0x400>
    74d6:	4650      	mov	r0, sl
    74d8:	8982      	ldrh	r2, [r0, #12]
    74da:	4651      	mov	r1, sl
    74dc:	4313      	orrs	r3, r2
    74de:	818b      	strh	r3, [r1, #12]
    74e0:	e7ba      	b.n	7458 <_vfprintf_r+0x400>
    74e2:	f7fd fbbf 	bl	4c64 <__sinit>
    74e6:	e5d1      	b.n	708c <_vfprintf_r+0x34>
    74e8:	9f07      	ldr	r7, [sp, #28]
    74ea:	9316      	str	r3, [sp, #88]	; 0x58
    74ec:	2310      	movs	r3, #16
    74ee:	431f      	orrs	r7, r3
    74f0:	9707      	str	r7, [sp, #28]
    74f2:	9807      	ldr	r0, [sp, #28]
    74f4:	0680      	lsls	r0, r0, #26
    74f6:	d401      	bmi.n	74fc <_vfprintf_r+0x4a4>
    74f8:	f000 fc64 	bl	7dc4 <_vfprintf_r+0xd6c>
    74fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    74fe:	2307      	movs	r3, #7
    7500:	3207      	adds	r2, #7
    7502:	439a      	bics	r2, r3
    7504:	2108      	movs	r1, #8
    7506:	1889      	adds	r1, r1, r2
    7508:	910f      	str	r1, [sp, #60]	; 0x3c
    750a:	6810      	ldr	r0, [r2, #0]
    750c:	6851      	ldr	r1, [r2, #4]
    750e:	9010      	str	r0, [sp, #64]	; 0x40
    7510:	9111      	str	r1, [sp, #68]	; 0x44
    7512:	9a11      	ldr	r2, [sp, #68]	; 0x44
    7514:	2a00      	cmp	r2, #0
    7516:	da01      	bge.n	751c <_vfprintf_r+0x4c4>
    7518:	f000 fcc7 	bl	7eaa <_vfprintf_r+0xe52>
    751c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    751e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7520:	431a      	orrs	r2, r3
    7522:	1e53      	subs	r3, r2, #1
    7524:	419a      	sbcs	r2, r3
    7526:	2301      	movs	r3, #1
    7528:	2e00      	cmp	r6, #0
    752a:	db03      	blt.n	7534 <_vfprintf_r+0x4dc>
    752c:	9f07      	ldr	r7, [sp, #28]
    752e:	2180      	movs	r1, #128	; 0x80
    7530:	438f      	bics	r7, r1
    7532:	9707      	str	r7, [sp, #28]
    7534:	2e00      	cmp	r6, #0
    7536:	d102      	bne.n	753e <_vfprintf_r+0x4e6>
    7538:	2a00      	cmp	r2, #0
    753a:	d100      	bne.n	753e <_vfprintf_r+0x4e6>
    753c:	e25c      	b.n	79f8 <_vfprintf_r+0x9a0>
    753e:	2b01      	cmp	r3, #1
    7540:	d100      	bne.n	7544 <_vfprintf_r+0x4ec>
    7542:	e3ce      	b.n	7ce2 <_vfprintf_r+0xc8a>
    7544:	2b02      	cmp	r3, #2
    7546:	d100      	bne.n	754a <_vfprintf_r+0x4f2>
    7548:	e3ad      	b.n	7ca6 <_vfprintf_r+0xc4e>
    754a:	2007      	movs	r0, #7
    754c:	9413      	str	r4, [sp, #76]	; 0x4c
    754e:	950a      	str	r5, [sp, #40]	; 0x28
    7550:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7552:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7554:	4684      	mov	ip, r0
    7556:	1c21      	adds	r1, r4, #0
    7558:	08d7      	lsrs	r7, r2, #3
    755a:	075d      	lsls	r5, r3, #29
    755c:	46b8      	mov	r8, r7
    755e:	4660      	mov	r0, ip
    7560:	4010      	ands	r0, r2
    7562:	1c2f      	adds	r7, r5, #0
    7564:	4645      	mov	r5, r8
    7566:	432f      	orrs	r7, r5
    7568:	3901      	subs	r1, #1
    756a:	3030      	adds	r0, #48	; 0x30
    756c:	08dd      	lsrs	r5, r3, #3
    756e:	7008      	strb	r0, [r1, #0]
    7570:	1c3a      	adds	r2, r7, #0
    7572:	1c2b      	adds	r3, r5, #0
    7574:	432f      	orrs	r7, r5
    7576:	d1ef      	bne.n	7558 <_vfprintf_r+0x500>
    7578:	9113      	str	r1, [sp, #76]	; 0x4c
    757a:	9907      	ldr	r1, [sp, #28]
    757c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    757e:	9210      	str	r2, [sp, #64]	; 0x40
    7580:	9311      	str	r3, [sp, #68]	; 0x44
    7582:	07c9      	lsls	r1, r1, #31
    7584:	d501      	bpl.n	758a <_vfprintf_r+0x532>
    7586:	f000 fc84 	bl	7e92 <_vfprintf_r+0xe3a>
    758a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    758c:	1aa2      	subs	r2, r4, r2
    758e:	920c      	str	r2, [sp, #48]	; 0x30
    7590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7592:	920a      	str	r2, [sp, #40]	; 0x28
    7594:	42b2      	cmp	r2, r6
    7596:	da00      	bge.n	759a <_vfprintf_r+0x542>
    7598:	960a      	str	r6, [sp, #40]	; 0x28
    759a:	464b      	mov	r3, r9
    759c:	9614      	str	r6, [sp, #80]	; 0x50
    759e:	2600      	movs	r6, #0
    75a0:	781a      	ldrb	r2, [r3, #0]
    75a2:	9619      	str	r6, [sp, #100]	; 0x64
    75a4:	2a00      	cmp	r2, #0
    75a6:	d100      	bne.n	75aa <_vfprintf_r+0x552>
    75a8:	e5f4      	b.n	7194 <_vfprintf_r+0x13c>
    75aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    75ac:	3701      	adds	r7, #1
    75ae:	970a      	str	r7, [sp, #40]	; 0x28
    75b0:	e5f0      	b.n	7194 <_vfprintf_r+0x13c>
    75b2:	9807      	ldr	r0, [sp, #28]
    75b4:	9316      	str	r3, [sp, #88]	; 0x58
    75b6:	4698      	mov	r8, r3
    75b8:	0700      	lsls	r0, r0, #28
    75ba:	d401      	bmi.n	75c0 <_vfprintf_r+0x568>
    75bc:	f000 fd93 	bl	80e6 <_vfprintf_r+0x108e>
    75c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    75c2:	2307      	movs	r3, #7
    75c4:	3207      	adds	r2, #7
    75c6:	439a      	bics	r2, r3
    75c8:	6813      	ldr	r3, [r2, #0]
    75ca:	2108      	movs	r1, #8
    75cc:	1889      	adds	r1, r1, r2
    75ce:	910f      	str	r1, [sp, #60]	; 0x3c
    75d0:	931a      	str	r3, [sp, #104]	; 0x68
    75d2:	6852      	ldr	r2, [r2, #4]
    75d4:	921b      	str	r2, [sp, #108]	; 0x6c
    75d6:	981a      	ldr	r0, [sp, #104]	; 0x68
    75d8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    75da:	f003 fcfb 	bl	afd4 <__fpclassifyd>
    75de:	2801      	cmp	r0, #1
    75e0:	d001      	beq.n	75e6 <_vfprintf_r+0x58e>
    75e2:	f000 fc93 	bl	7f0c <_vfprintf_r+0xeb4>
    75e6:	981a      	ldr	r0, [sp, #104]	; 0x68
    75e8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    75ea:	4b3e      	ldr	r3, [pc, #248]	; (76e4 <_vfprintf_r+0x68c>)
    75ec:	4a3c      	ldr	r2, [pc, #240]	; (76e0 <_vfprintf_r+0x688>)
    75ee:	f006 fde3 	bl	e1b8 <____aeabi_dcmplt_from_thumb>
    75f2:	2800      	cmp	r0, #0
    75f4:	d001      	beq.n	75fa <_vfprintf_r+0x5a2>
    75f6:	f000 ff36 	bl	8466 <_vfprintf_r+0x140e>
    75fa:	4649      	mov	r1, r9
    75fc:	780a      	ldrb	r2, [r1, #0]
    75fe:	9e16      	ldr	r6, [sp, #88]	; 0x58
    7600:	2e47      	cmp	r6, #71	; 0x47
    7602:	dd01      	ble.n	7608 <_vfprintf_r+0x5b0>
    7604:	f000 ff69 	bl	84da <_vfprintf_r+0x1482>
    7608:	4f3a      	ldr	r7, [pc, #232]	; (76f4 <_vfprintf_r+0x69c>)
    760a:	9713      	str	r7, [sp, #76]	; 0x4c
    760c:	9907      	ldr	r1, [sp, #28]
    760e:	2380      	movs	r3, #128	; 0x80
    7610:	4399      	bics	r1, r3
    7612:	2600      	movs	r6, #0
    7614:	3b7d      	subs	r3, #125	; 0x7d
    7616:	9107      	str	r1, [sp, #28]
    7618:	930a      	str	r3, [sp, #40]	; 0x28
    761a:	930c      	str	r3, [sp, #48]	; 0x30
    761c:	9614      	str	r6, [sp, #80]	; 0x50
    761e:	9619      	str	r6, [sp, #100]	; 0x64
    7620:	e7c0      	b.n	75a4 <_vfprintf_r+0x54c>
    7622:	9907      	ldr	r1, [sp, #28]
    7624:	4643      	mov	r3, r8
    7626:	4319      	orrs	r1, r3
    7628:	9107      	str	r1, [sp, #28]
    762a:	9f08      	ldr	r7, [sp, #32]
    762c:	783b      	ldrb	r3, [r7, #0]
    762e:	e596      	b.n	715e <_vfprintf_r+0x106>
    7630:	4831      	ldr	r0, [pc, #196]	; (76f8 <_vfprintf_r+0x6a0>)
    7632:	9907      	ldr	r1, [sp, #28]
    7634:	2220      	movs	r2, #32
    7636:	9316      	str	r3, [sp, #88]	; 0x58
    7638:	9017      	str	r0, [sp, #92]	; 0x5c
    763a:	400a      	ands	r2, r1
    763c:	d100      	bne.n	7640 <_vfprintf_r+0x5e8>
    763e:	e132      	b.n	78a6 <_vfprintf_r+0x84e>
    7640:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7642:	2307      	movs	r3, #7
    7644:	3207      	adds	r2, #7
    7646:	439a      	bics	r2, r3
    7648:	6810      	ldr	r0, [r2, #0]
    764a:	6851      	ldr	r1, [r2, #4]
    764c:	3301      	adds	r3, #1
    764e:	189b      	adds	r3, r3, r2
    7650:	9010      	str	r0, [sp, #64]	; 0x40
    7652:	9111      	str	r1, [sp, #68]	; 0x44
    7654:	930f      	str	r3, [sp, #60]	; 0x3c
    7656:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7658:	9f11      	ldr	r7, [sp, #68]	; 0x44
    765a:	433a      	orrs	r2, r7
    765c:	1e53      	subs	r3, r2, #1
    765e:	419a      	sbcs	r2, r3
    7660:	2a00      	cmp	r2, #0
    7662:	d100      	bne.n	7666 <_vfprintf_r+0x60e>
    7664:	e3bb      	b.n	7dde <_vfprintf_r+0xd86>
    7666:	9807      	ldr	r0, [sp, #28]
    7668:	2101      	movs	r1, #1
    766a:	4208      	tst	r0, r1
    766c:	d100      	bne.n	7670 <_vfprintf_r+0x618>
    766e:	e3b6      	b.n	7dde <_vfprintf_r+0xd86>
    7670:	4b22      	ldr	r3, [pc, #136]	; (76fc <_vfprintf_r+0x6a4>)
    7672:	2230      	movs	r2, #48	; 0x30
    7674:	446b      	add	r3, sp
    7676:	701a      	strb	r2, [r3, #0]
    7678:	aa16      	add	r2, sp, #88	; 0x58
    767a:	7812      	ldrb	r2, [r2, #0]
    767c:	705a      	strb	r2, [r3, #1]
    767e:	2302      	movs	r3, #2
    7680:	4318      	orrs	r0, r3
    7682:	9007      	str	r0, [sp, #28]
    7684:	1c0a      	adds	r2, r1, #0
    7686:	2000      	movs	r0, #0
    7688:	464f      	mov	r7, r9
    768a:	7038      	strb	r0, [r7, #0]
    768c:	e74c      	b.n	7528 <_vfprintf_r+0x4d0>
    768e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7690:	9316      	str	r3, [sp, #88]	; 0x58
    7692:	4b1b      	ldr	r3, [pc, #108]	; (7700 <_vfprintf_r+0x6a8>)
    7694:	1c10      	adds	r0, r2, #0
    7696:	6812      	ldr	r2, [r2, #0]
    7698:	446b      	add	r3, sp
    769a:	3004      	adds	r0, #4
    769c:	701a      	strb	r2, [r3, #0]
    769e:	4649      	mov	r1, r9
    76a0:	2200      	movs	r2, #0
    76a2:	900f      	str	r0, [sp, #60]	; 0x3c
    76a4:	700a      	strb	r2, [r1, #0]
    76a6:	e56e      	b.n	7186 <_vfprintf_r+0x12e>
    76a8:	9a07      	ldr	r2, [sp, #28]
    76aa:	9316      	str	r3, [sp, #88]	; 0x58
    76ac:	2310      	movs	r3, #16
    76ae:	431a      	orrs	r2, r3
    76b0:	9207      	str	r2, [sp, #28]
    76b2:	9f07      	ldr	r7, [sp, #28]
    76b4:	2320      	movs	r3, #32
    76b6:	403b      	ands	r3, r7
    76b8:	d100      	bne.n	76bc <_vfprintf_r+0x664>
    76ba:	e3a3      	b.n	7e04 <_vfprintf_r+0xdac>
    76bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    76be:	2307      	movs	r3, #7
    76c0:	3207      	adds	r2, #7
    76c2:	439a      	bics	r2, r3
    76c4:	2008      	movs	r0, #8
    76c6:	1880      	adds	r0, r0, r2
    76c8:	900f      	str	r0, [sp, #60]	; 0x3c
    76ca:	6810      	ldr	r0, [r2, #0]
    76cc:	6851      	ldr	r1, [r2, #4]
    76ce:	1c02      	adds	r2, r0, #0
    76d0:	430a      	orrs	r2, r1
    76d2:	1e53      	subs	r3, r2, #1
    76d4:	419a      	sbcs	r2, r3
    76d6:	9010      	str	r0, [sp, #64]	; 0x40
    76d8:	9111      	str	r1, [sp, #68]	; 0x44
    76da:	2300      	movs	r3, #0
    76dc:	e7d3      	b.n	7686 <_vfprintf_r+0x62e>
    76de:	46c0      	nop			; (mov r8, r8)
	...
    76e8:	000004e4 	.word	0x000004e4
    76ec:	00000574 	.word	0x00000574
    76f0:	0000047c 	.word	0x0000047c
    76f4:	0000edc0 	.word	0x0000edc0
    76f8:	0000edd0 	.word	0x0000edd0
    76fc:	0000056c 	.word	0x0000056c
    7700:	00000524 	.word	0x00000524
    7704:	9807      	ldr	r0, [sp, #28]
    7706:	9316      	str	r3, [sp, #88]	; 0x58
    7708:	2310      	movs	r3, #16
    770a:	4318      	orrs	r0, r3
    770c:	9007      	str	r0, [sp, #28]
    770e:	9907      	ldr	r1, [sp, #28]
    7710:	2220      	movs	r2, #32
    7712:	400a      	ands	r2, r1
    7714:	d100      	bne.n	7718 <_vfprintf_r+0x6c0>
    7716:	e364      	b.n	7de2 <_vfprintf_r+0xd8a>
    7718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    771a:	2307      	movs	r3, #7
    771c:	3207      	adds	r2, #7
    771e:	439a      	bics	r2, r3
    7720:	6810      	ldr	r0, [r2, #0]
    7722:	6851      	ldr	r1, [r2, #4]
    7724:	3301      	adds	r3, #1
    7726:	189b      	adds	r3, r3, r2
    7728:	1c02      	adds	r2, r0, #0
    772a:	430a      	orrs	r2, r1
    772c:	930f      	str	r3, [sp, #60]	; 0x3c
    772e:	9010      	str	r0, [sp, #64]	; 0x40
    7730:	9111      	str	r1, [sp, #68]	; 0x44
    7732:	1e53      	subs	r3, r2, #1
    7734:	419a      	sbcs	r2, r3
    7736:	2301      	movs	r3, #1
    7738:	e7a5      	b.n	7686 <_vfprintf_r+0x62e>
    773a:	9e08      	ldr	r6, [sp, #32]
    773c:	7833      	ldrb	r3, [r6, #0]
    773e:	3601      	adds	r6, #1
    7740:	9608      	str	r6, [sp, #32]
    7742:	2b2a      	cmp	r3, #42	; 0x2a
    7744:	d101      	bne.n	774a <_vfprintf_r+0x6f2>
    7746:	f001 f84f 	bl	87e8 <_vfprintf_r+0x1790>
    774a:	1c19      	adds	r1, r3, #0
    774c:	3930      	subs	r1, #48	; 0x30
    774e:	2600      	movs	r6, #0
    7750:	2909      	cmp	r1, #9
    7752:	d900      	bls.n	7756 <_vfprintf_r+0x6fe>
    7754:	e506      	b.n	7164 <_vfprintf_r+0x10c>
    7756:	9b08      	ldr	r3, [sp, #32]
    7758:	46ac      	mov	ip, r5
    775a:	00b5      	lsls	r5, r6, #2
    775c:	19ae      	adds	r6, r5, r6
    775e:	781d      	ldrb	r5, [r3, #0]
    7760:	0076      	lsls	r6, r6, #1
    7762:	1876      	adds	r6, r6, r1
    7764:	1c29      	adds	r1, r5, #0
    7766:	3930      	subs	r1, #48	; 0x30
    7768:	3301      	adds	r3, #1
    776a:	2909      	cmp	r1, #9
    776c:	d9f5      	bls.n	775a <_vfprintf_r+0x702>
    776e:	9308      	str	r3, [sp, #32]
    7770:	1c2b      	adds	r3, r5, #0
    7772:	4665      	mov	r5, ip
    7774:	2e00      	cmp	r6, #0
    7776:	db00      	blt.n	777a <_vfprintf_r+0x722>
    7778:	e4f4      	b.n	7164 <_vfprintf_r+0x10c>
    777a:	2601      	movs	r6, #1
    777c:	4276      	negs	r6, r6
    777e:	e4f1      	b.n	7164 <_vfprintf_r+0x10c>
    7780:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7782:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7784:	6809      	ldr	r1, [r1, #0]
    7786:	3704      	adds	r7, #4
    7788:	910b      	str	r1, [sp, #44]	; 0x2c
    778a:	2900      	cmp	r1, #0
    778c:	da00      	bge.n	7790 <_vfprintf_r+0x738>
    778e:	e63f      	b.n	7410 <_vfprintf_r+0x3b8>
    7790:	9908      	ldr	r1, [sp, #32]
    7792:	780b      	ldrb	r3, [r1, #0]
    7794:	970f      	str	r7, [sp, #60]	; 0x3c
    7796:	e4e2      	b.n	715e <_vfprintf_r+0x106>
    7798:	232b      	movs	r3, #43	; 0x2b
    779a:	464f      	mov	r7, r9
    779c:	703b      	strb	r3, [r7, #0]
    779e:	9908      	ldr	r1, [sp, #32]
    77a0:	780b      	ldrb	r3, [r1, #0]
    77a2:	e4dc      	b.n	715e <_vfprintf_r+0x106>
    77a4:	9b07      	ldr	r3, [sp, #28]
    77a6:	4657      	mov	r7, sl
    77a8:	433b      	orrs	r3, r7
    77aa:	9307      	str	r3, [sp, #28]
    77ac:	9908      	ldr	r1, [sp, #32]
    77ae:	780b      	ldrb	r3, [r1, #0]
    77b0:	e4d5      	b.n	715e <_vfprintf_r+0x106>
    77b2:	2700      	movs	r7, #0
    77b4:	1c19      	adds	r1, r3, #0
    77b6:	950a      	str	r5, [sp, #40]	; 0x28
    77b8:	970b      	str	r7, [sp, #44]	; 0x2c
    77ba:	9d08      	ldr	r5, [sp, #32]
    77bc:	3930      	subs	r1, #48	; 0x30
    77be:	1c3b      	adds	r3, r7, #0
    77c0:	46b4      	mov	ip, r6
    77c2:	009e      	lsls	r6, r3, #2
    77c4:	18f3      	adds	r3, r6, r3
    77c6:	782e      	ldrb	r6, [r5, #0]
    77c8:	005b      	lsls	r3, r3, #1
    77ca:	18cb      	adds	r3, r1, r3
    77cc:	1c31      	adds	r1, r6, #0
    77ce:	3930      	subs	r1, #48	; 0x30
    77d0:	3501      	adds	r5, #1
    77d2:	2909      	cmp	r1, #9
    77d4:	d9f5      	bls.n	77c2 <_vfprintf_r+0x76a>
    77d6:	9508      	str	r5, [sp, #32]
    77d8:	930b      	str	r3, [sp, #44]	; 0x2c
    77da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    77dc:	1c33      	adds	r3, r6, #0
    77de:	4666      	mov	r6, ip
    77e0:	e4c0      	b.n	7164 <_vfprintf_r+0x10c>
    77e2:	4649      	mov	r1, r9
    77e4:	780b      	ldrb	r3, [r1, #0]
    77e6:	2b00      	cmp	r3, #0
    77e8:	d001      	beq.n	77ee <_vfprintf_r+0x796>
    77ea:	f000 fc6a 	bl	80c2 <_vfprintf_r+0x106a>
    77ee:	7008      	strb	r0, [r1, #0]
    77f0:	9f08      	ldr	r7, [sp, #32]
    77f2:	783b      	ldrb	r3, [r7, #0]
    77f4:	e4b3      	b.n	715e <_vfprintf_r+0x106>
    77f6:	9907      	ldr	r1, [sp, #28]
    77f8:	2301      	movs	r3, #1
    77fa:	4319      	orrs	r1, r3
    77fc:	9107      	str	r1, [sp, #28]
    77fe:	9f08      	ldr	r7, [sp, #32]
    7800:	783b      	ldrb	r3, [r7, #0]
    7802:	e4ac      	b.n	715e <_vfprintf_r+0x106>
    7804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7806:	1c1a      	adds	r2, r3, #0
    7808:	3204      	adds	r2, #4
    780a:	681b      	ldr	r3, [r3, #0]
    780c:	920f      	str	r2, [sp, #60]	; 0x3c
    780e:	4ade      	ldr	r2, [pc, #888]	; (7b88 <_vfprintf_r+0xb30>)
    7810:	2130      	movs	r1, #48	; 0x30
    7812:	446a      	add	r2, sp
    7814:	9310      	str	r3, [sp, #64]	; 0x40
    7816:	2078      	movs	r0, #120	; 0x78
    7818:	7011      	strb	r1, [r2, #0]
    781a:	7050      	strb	r0, [r2, #1]
    781c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    781e:	2300      	movs	r3, #0
    7820:	9f07      	ldr	r7, [sp, #28]
    7822:	9311      	str	r3, [sp, #68]	; 0x44
    7824:	1e51      	subs	r1, r2, #1
    7826:	418a      	sbcs	r2, r1
    7828:	3302      	adds	r3, #2
    782a:	49d8      	ldr	r1, [pc, #864]	; (7b8c <_vfprintf_r+0xb34>)
    782c:	431f      	orrs	r7, r3
    782e:	9707      	str	r7, [sp, #28]
    7830:	9117      	str	r1, [sp, #92]	; 0x5c
    7832:	9016      	str	r0, [sp, #88]	; 0x58
    7834:	e727      	b.n	7686 <_vfprintf_r+0x62e>
    7836:	9b07      	ldr	r3, [sp, #28]
    7838:	4303      	orrs	r3, r0
    783a:	9307      	str	r3, [sp, #28]
    783c:	9f08      	ldr	r7, [sp, #32]
    783e:	783b      	ldrb	r3, [r7, #0]
    7840:	e48d      	b.n	715e <_vfprintf_r+0x106>
    7842:	9316      	str	r3, [sp, #88]	; 0x58
    7844:	464a      	mov	r2, r9
    7846:	2300      	movs	r3, #0
    7848:	7013      	strb	r3, [r2, #0]
    784a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    784c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    784e:	6800      	ldr	r0, [r0, #0]
    7850:	3704      	adds	r7, #4
    7852:	9013      	str	r0, [sp, #76]	; 0x4c
    7854:	2800      	cmp	r0, #0
    7856:	d101      	bne.n	785c <_vfprintf_r+0x804>
    7858:	f000 fec8 	bl	85ec <_vfprintf_r+0x1594>
    785c:	2e00      	cmp	r6, #0
    785e:	da01      	bge.n	7864 <_vfprintf_r+0x80c>
    7860:	f000 fe6e 	bl	8540 <_vfprintf_r+0x14e8>
    7864:	9813      	ldr	r0, [sp, #76]	; 0x4c
    7866:	2100      	movs	r1, #0
    7868:	1c32      	adds	r2, r6, #0
    786a:	f002 fbc3 	bl	9ff4 <memchr>
    786e:	2800      	cmp	r0, #0
    7870:	d101      	bne.n	7876 <_vfprintf_r+0x81e>
    7872:	f000 ff3b 	bl	86ec <_vfprintf_r+0x1694>
    7876:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7878:	1a40      	subs	r0, r0, r1
    787a:	900c      	str	r0, [sp, #48]	; 0x30
    787c:	42b0      	cmp	r0, r6
    787e:	dc01      	bgt.n	7884 <_vfprintf_r+0x82c>
    7880:	f000 fda4 	bl	83cc <_vfprintf_r+0x1374>
    7884:	960a      	str	r6, [sp, #40]	; 0x28
    7886:	464b      	mov	r3, r9
    7888:	960c      	str	r6, [sp, #48]	; 0x30
    788a:	2600      	movs	r6, #0
    788c:	781a      	ldrb	r2, [r3, #0]
    788e:	970f      	str	r7, [sp, #60]	; 0x3c
    7890:	9614      	str	r6, [sp, #80]	; 0x50
    7892:	9619      	str	r6, [sp, #100]	; 0x64
    7894:	e686      	b.n	75a4 <_vfprintf_r+0x54c>
    7896:	4fbd      	ldr	r7, [pc, #756]	; (7b8c <_vfprintf_r+0xb34>)
    7898:	9907      	ldr	r1, [sp, #28]
    789a:	2220      	movs	r2, #32
    789c:	9316      	str	r3, [sp, #88]	; 0x58
    789e:	9717      	str	r7, [sp, #92]	; 0x5c
    78a0:	400a      	ands	r2, r1
    78a2:	d000      	beq.n	78a6 <_vfprintf_r+0x84e>
    78a4:	e6cc      	b.n	7640 <_vfprintf_r+0x5e8>
    78a6:	9907      	ldr	r1, [sp, #28]
    78a8:	2310      	movs	r3, #16
    78aa:	4019      	ands	r1, r3
    78ac:	d101      	bne.n	78b2 <_vfprintf_r+0x85a>
    78ae:	f000 fc0c 	bl	80ca <_vfprintf_r+0x1072>
    78b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    78b4:	6809      	ldr	r1, [r1, #0]
    78b6:	9211      	str	r2, [sp, #68]	; 0x44
    78b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    78ba:	3204      	adds	r2, #4
    78bc:	9110      	str	r1, [sp, #64]	; 0x40
    78be:	920f      	str	r2, [sp, #60]	; 0x3c
    78c0:	e6c9      	b.n	7656 <_vfprintf_r+0x5fe>
    78c2:	9908      	ldr	r1, [sp, #32]
    78c4:	780b      	ldrb	r3, [r1, #0]
    78c6:	2b6c      	cmp	r3, #108	; 0x6c
    78c8:	d101      	bne.n	78ce <_vfprintf_r+0x876>
    78ca:	f000 fd77 	bl	83bc <_vfprintf_r+0x1364>
    78ce:	9f07      	ldr	r7, [sp, #28]
    78d0:	2110      	movs	r1, #16
    78d2:	430f      	orrs	r7, r1
    78d4:	9707      	str	r7, [sp, #28]
    78d6:	e442      	b.n	715e <_vfprintf_r+0x106>
    78d8:	9907      	ldr	r1, [sp, #28]
    78da:	0689      	lsls	r1, r1, #26
    78dc:	d401      	bmi.n	78e2 <_vfprintf_r+0x88a>
    78de:	f000 fc0f 	bl	8100 <_vfprintf_r+0x10a8>
    78e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    78e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    78e6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    78e8:	6813      	ldr	r3, [r2, #0]
    78ea:	3704      	adds	r7, #4
    78ec:	17f2      	asrs	r2, r6, #31
    78ee:	601e      	str	r6, [r3, #0]
    78f0:	605a      	str	r2, [r3, #4]
    78f2:	970f      	str	r7, [sp, #60]	; 0x3c
    78f4:	f7ff fbfa 	bl	70ec <_vfprintf_r+0x94>
    78f8:	9907      	ldr	r1, [sp, #28]
    78fa:	2340      	movs	r3, #64	; 0x40
    78fc:	4319      	orrs	r1, r3
    78fe:	9107      	str	r1, [sp, #28]
    7900:	9f08      	ldr	r7, [sp, #32]
    7902:	783b      	ldrb	r3, [r7, #0]
    7904:	e42b      	b.n	715e <_vfprintf_r+0x106>
    7906:	9316      	str	r3, [sp, #88]	; 0x58
    7908:	e5f3      	b.n	74f2 <_vfprintf_r+0x49a>
    790a:	9316      	str	r3, [sp, #88]	; 0x58
    790c:	e6d1      	b.n	76b2 <_vfprintf_r+0x65a>
    790e:	9316      	str	r3, [sp, #88]	; 0x58
    7910:	e6fd      	b.n	770e <_vfprintf_r+0x6b6>
    7912:	68a3      	ldr	r3, [r4, #8]
    7914:	46da      	mov	sl, fp
    7916:	2b00      	cmp	r3, #0
    7918:	d100      	bne.n	791c <_vfprintf_r+0x8c4>
    791a:	e596      	b.n	744a <_vfprintf_r+0x3f2>
    791c:	9809      	ldr	r0, [sp, #36]	; 0x24
    791e:	4659      	mov	r1, fp
    7920:	1c22      	adds	r2, r4, #0
    7922:	f004 f9d9 	bl	bcd8 <__sprint_r>
    7926:	e590      	b.n	744a <_vfprintf_r+0x3f2>
    7928:	9e16      	ldr	r6, [sp, #88]	; 0x58
    792a:	2e65      	cmp	r6, #101	; 0x65
    792c:	dc00      	bgt.n	7930 <_vfprintf_r+0x8d8>
    792e:	e0c7      	b.n	7ac0 <_vfprintf_r+0xa68>
    7930:	981a      	ldr	r0, [sp, #104]	; 0x68
    7932:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7934:	4b93      	ldr	r3, [pc, #588]	; (7b84 <_vfprintf_r+0xb2c>)
    7936:	4a92      	ldr	r2, [pc, #584]	; (7b80 <_vfprintf_r+0xb28>)
    7938:	f006 fc42 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    793c:	2800      	cmp	r0, #0
    793e:	d100      	bne.n	7942 <_vfprintf_r+0x8ea>
    7940:	e158      	b.n	7bf4 <_vfprintf_r+0xb9c>
    7942:	4b93      	ldr	r3, [pc, #588]	; (7b90 <_vfprintf_r+0xb38>)
    7944:	603b      	str	r3, [r7, #0]
    7946:	2301      	movs	r3, #1
    7948:	607b      	str	r3, [r7, #4]
    794a:	68a3      	ldr	r3, [r4, #8]
    794c:	3301      	adds	r3, #1
    794e:	60a3      	str	r3, [r4, #8]
    7950:	6863      	ldr	r3, [r4, #4]
    7952:	3301      	adds	r3, #1
    7954:	6063      	str	r3, [r4, #4]
    7956:	3708      	adds	r7, #8
    7958:	2b07      	cmp	r3, #7
    795a:	dd01      	ble.n	7960 <_vfprintf_r+0x908>
    795c:	f000 fcad 	bl	82ba <_vfprintf_r+0x1262>
    7960:	20ad      	movs	r0, #173	; 0xad
    7962:	00c0      	lsls	r0, r0, #3
    7964:	4468      	add	r0, sp
    7966:	6803      	ldr	r3, [r0, #0]
    7968:	990e      	ldr	r1, [sp, #56]	; 0x38
    796a:	428b      	cmp	r3, r1
    796c:	db03      	blt.n	7976 <_vfprintf_r+0x91e>
    796e:	9a07      	ldr	r2, [sp, #28]
    7970:	07d2      	lsls	r2, r2, #31
    7972:	d400      	bmi.n	7976 <_vfprintf_r+0x91e>
    7974:	e4de      	b.n	7334 <_vfprintf_r+0x2dc>
    7976:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7978:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    797a:	603b      	str	r3, [r7, #0]
    797c:	68a3      	ldr	r3, [r4, #8]
    797e:	195b      	adds	r3, r3, r5
    7980:	607d      	str	r5, [r7, #4]
    7982:	60a3      	str	r3, [r4, #8]
    7984:	6863      	ldr	r3, [r4, #4]
    7986:	3301      	adds	r3, #1
    7988:	6063      	str	r3, [r4, #4]
    798a:	2b07      	cmp	r3, #7
    798c:	dd01      	ble.n	7992 <_vfprintf_r+0x93a>
    798e:	f000 fda8 	bl	84e2 <_vfprintf_r+0x148a>
    7992:	1c3b      	adds	r3, r7, #0
    7994:	3308      	adds	r3, #8
    7996:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7998:	3d01      	subs	r5, #1
    799a:	2d00      	cmp	r5, #0
    799c:	dc01      	bgt.n	79a2 <_vfprintf_r+0x94a>
    799e:	f000 fc7e 	bl	829e <_vfprintf_r+0x1246>
    79a2:	2d10      	cmp	r5, #16
    79a4:	dc01      	bgt.n	79aa <_vfprintf_r+0x952>
    79a6:	f000 ff05 	bl	87b4 <_vfprintf_r+0x175c>
    79aa:	4e7a      	ldr	r6, [pc, #488]	; (7b94 <_vfprintf_r+0xb3c>)
    79ac:	2710      	movs	r7, #16
    79ae:	46b0      	mov	r8, r6
    79b0:	1c3e      	adds	r6, r7, #0
    79b2:	46b9      	mov	r9, r7
    79b4:	4446      	add	r6, r8
    79b6:	465f      	mov	r7, fp
    79b8:	e006      	b.n	79c8 <_vfprintf_r+0x970>
    79ba:	3308      	adds	r3, #8
    79bc:	1c1a      	adds	r2, r3, #0
    79be:	3208      	adds	r2, #8
    79c0:	3d10      	subs	r5, #16
    79c2:	2d10      	cmp	r5, #16
    79c4:	dc00      	bgt.n	79c8 <_vfprintf_r+0x970>
    79c6:	e3e0      	b.n	818a <_vfprintf_r+0x1132>
    79c8:	68a2      	ldr	r2, [r4, #8]
    79ca:	4649      	mov	r1, r9
    79cc:	3210      	adds	r2, #16
    79ce:	601e      	str	r6, [r3, #0]
    79d0:	6059      	str	r1, [r3, #4]
    79d2:	60a2      	str	r2, [r4, #8]
    79d4:	6862      	ldr	r2, [r4, #4]
    79d6:	3201      	adds	r2, #1
    79d8:	6062      	str	r2, [r4, #4]
    79da:	2a07      	cmp	r2, #7
    79dc:	dded      	ble.n	79ba <_vfprintf_r+0x962>
    79de:	9809      	ldr	r0, [sp, #36]	; 0x24
    79e0:	1c39      	adds	r1, r7, #0
    79e2:	1c22      	adds	r2, r4, #0
    79e4:	f004 f978 	bl	bcd8 <__sprint_r>
    79e8:	2800      	cmp	r0, #0
    79ea:	d000      	beq.n	79ee <_vfprintf_r+0x996>
    79ec:	e0dc      	b.n	7ba8 <_vfprintf_r+0xb50>
    79ee:	4a6a      	ldr	r2, [pc, #424]	; (7b98 <_vfprintf_r+0xb40>)
    79f0:	4b6a      	ldr	r3, [pc, #424]	; (7b9c <_vfprintf_r+0xb44>)
    79f2:	446a      	add	r2, sp
    79f4:	446b      	add	r3, sp
    79f6:	e7e3      	b.n	79c0 <_vfprintf_r+0x968>
    79f8:	2b00      	cmp	r3, #0
    79fa:	d000      	beq.n	79fe <_vfprintf_r+0x9a6>
    79fc:	e0bd      	b.n	7b7a <_vfprintf_r+0xb22>
    79fe:	9807      	ldr	r0, [sp, #28]
    7a00:	07c0      	lsls	r0, r0, #31
    7a02:	d400      	bmi.n	7a06 <_vfprintf_r+0x9ae>
    7a04:	e14c      	b.n	7ca0 <_vfprintf_r+0xc48>
    7a06:	4b66      	ldr	r3, [pc, #408]	; (7ba0 <_vfprintf_r+0xb48>)
    7a08:	2127      	movs	r1, #39	; 0x27
    7a0a:	446b      	add	r3, sp
    7a0c:	2230      	movs	r2, #48	; 0x30
    7a0e:	545a      	strb	r2, [r3, r1]
    7a10:	4b64      	ldr	r3, [pc, #400]	; (7ba4 <_vfprintf_r+0xb4c>)
    7a12:	446b      	add	r3, sp
    7a14:	1ae1      	subs	r1, r4, r3
    7a16:	910c      	str	r1, [sp, #48]	; 0x30
    7a18:	9313      	str	r3, [sp, #76]	; 0x4c
    7a1a:	e5b9      	b.n	7590 <_vfprintf_r+0x538>
    7a1c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    7a1e:	980a      	ldr	r0, [sp, #40]	; 0x28
    7a20:	1a3e      	subs	r6, r7, r0
    7a22:	2e00      	cmp	r6, #0
    7a24:	dc00      	bgt.n	7a28 <_vfprintf_r+0x9d0>
    7a26:	e429      	b.n	727c <_vfprintf_r+0x224>
    7a28:	2e10      	cmp	r6, #16
    7a2a:	dc01      	bgt.n	7a30 <_vfprintf_r+0x9d8>
    7a2c:	f000 fe58 	bl	86e0 <_vfprintf_r+0x1688>
    7a30:	4a58      	ldr	r2, [pc, #352]	; (7b94 <_vfprintf_r+0xb3c>)
    7a32:	1c2b      	adds	r3, r5, #0
    7a34:	2510      	movs	r5, #16
    7a36:	1c2f      	adds	r7, r5, #0
    7a38:	4690      	mov	r8, r2
    7a3a:	46a9      	mov	r9, r5
    7a3c:	4447      	add	r7, r8
    7a3e:	465d      	mov	r5, fp
    7a40:	e005      	b.n	7a4e <_vfprintf_r+0x9f6>
    7a42:	3308      	adds	r3, #8
    7a44:	1c1a      	adds	r2, r3, #0
    7a46:	3e10      	subs	r6, #16
    7a48:	3208      	adds	r2, #8
    7a4a:	2e10      	cmp	r6, #16
    7a4c:	dd19      	ble.n	7a82 <_vfprintf_r+0xa2a>
    7a4e:	68a2      	ldr	r2, [r4, #8]
    7a50:	4648      	mov	r0, r9
    7a52:	3210      	adds	r2, #16
    7a54:	601f      	str	r7, [r3, #0]
    7a56:	6058      	str	r0, [r3, #4]
    7a58:	60a2      	str	r2, [r4, #8]
    7a5a:	6862      	ldr	r2, [r4, #4]
    7a5c:	3201      	adds	r2, #1
    7a5e:	6062      	str	r2, [r4, #4]
    7a60:	2a07      	cmp	r2, #7
    7a62:	ddee      	ble.n	7a42 <_vfprintf_r+0x9ea>
    7a64:	9809      	ldr	r0, [sp, #36]	; 0x24
    7a66:	1c29      	adds	r1, r5, #0
    7a68:	1c22      	adds	r2, r4, #0
    7a6a:	f004 f935 	bl	bcd8 <__sprint_r>
    7a6e:	2800      	cmp	r0, #0
    7a70:	d000      	beq.n	7a74 <_vfprintf_r+0xa1c>
    7a72:	e1d7      	b.n	7e24 <_vfprintf_r+0xdcc>
    7a74:	4a48      	ldr	r2, [pc, #288]	; (7b98 <_vfprintf_r+0xb40>)
    7a76:	4b49      	ldr	r3, [pc, #292]	; (7b9c <_vfprintf_r+0xb44>)
    7a78:	3e10      	subs	r6, #16
    7a7a:	446a      	add	r2, sp
    7a7c:	446b      	add	r3, sp
    7a7e:	2e10      	cmp	r6, #16
    7a80:	dce5      	bgt.n	7a4e <_vfprintf_r+0x9f6>
    7a82:	46ab      	mov	fp, r5
    7a84:	1c15      	adds	r5, r2, #0
    7a86:	2110      	movs	r1, #16
    7a88:	1c0a      	adds	r2, r1, #0
    7a8a:	4442      	add	r2, r8
    7a8c:	601a      	str	r2, [r3, #0]
    7a8e:	605e      	str	r6, [r3, #4]
    7a90:	68a3      	ldr	r3, [r4, #8]
    7a92:	18f3      	adds	r3, r6, r3
    7a94:	60a3      	str	r3, [r4, #8]
    7a96:	6863      	ldr	r3, [r4, #4]
    7a98:	3301      	adds	r3, #1
    7a9a:	6063      	str	r3, [r4, #4]
    7a9c:	2b07      	cmp	r3, #7
    7a9e:	dc01      	bgt.n	7aa4 <_vfprintf_r+0xa4c>
    7aa0:	f7ff fbec 	bl	727c <_vfprintf_r+0x224>
    7aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
    7aa6:	4659      	mov	r1, fp
    7aa8:	1c22      	adds	r2, r4, #0
    7aaa:	f004 f915 	bl	bcd8 <__sprint_r>
    7aae:	2800      	cmp	r0, #0
    7ab0:	d000      	beq.n	7ab4 <_vfprintf_r+0xa5c>
    7ab2:	e4c9      	b.n	7448 <_vfprintf_r+0x3f0>
    7ab4:	4d39      	ldr	r5, [pc, #228]	; (7b9c <_vfprintf_r+0xb44>)
    7ab6:	446d      	add	r5, sp
    7ab8:	f7ff fbe0 	bl	727c <_vfprintf_r+0x224>
    7abc:	1c2f      	adds	r7, r5, #0
    7abe:	e426      	b.n	730e <_vfprintf_r+0x2b6>
    7ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7ac2:	2a01      	cmp	r2, #1
    7ac4:	dc00      	bgt.n	7ac8 <_vfprintf_r+0xa70>
    7ac6:	e1b0      	b.n	7e2a <_vfprintf_r+0xdd2>
    7ac8:	2301      	movs	r3, #1
    7aca:	607b      	str	r3, [r7, #4]
    7acc:	68a3      	ldr	r3, [r4, #8]
    7ace:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    7ad0:	3301      	adds	r3, #1
    7ad2:	603e      	str	r6, [r7, #0]
    7ad4:	60a3      	str	r3, [r4, #8]
    7ad6:	6863      	ldr	r3, [r4, #4]
    7ad8:	3301      	adds	r3, #1
    7ada:	6063      	str	r3, [r4, #4]
    7adc:	2b07      	cmp	r3, #7
    7ade:	dd00      	ble.n	7ae2 <_vfprintf_r+0xa8a>
    7ae0:	e1c9      	b.n	7e76 <_vfprintf_r+0xe1e>
    7ae2:	3708      	adds	r7, #8
    7ae4:	1c3d      	adds	r5, r7, #0
    7ae6:	3508      	adds	r5, #8
    7ae8:	991c      	ldr	r1, [sp, #112]	; 0x70
    7aea:	68a3      	ldr	r3, [r4, #8]
    7aec:	9818      	ldr	r0, [sp, #96]	; 0x60
    7aee:	185b      	adds	r3, r3, r1
    7af0:	6038      	str	r0, [r7, #0]
    7af2:	6079      	str	r1, [r7, #4]
    7af4:	60a3      	str	r3, [r4, #8]
    7af6:	6863      	ldr	r3, [r4, #4]
    7af8:	3301      	adds	r3, #1
    7afa:	6063      	str	r3, [r4, #4]
    7afc:	2b07      	cmp	r3, #7
    7afe:	dd00      	ble.n	7b02 <_vfprintf_r+0xaaa>
    7b00:	e1aa      	b.n	7e58 <_vfprintf_r+0xe00>
    7b02:	2208      	movs	r2, #8
    7b04:	1952      	adds	r2, r2, r5
    7b06:	4691      	mov	r9, r2
    7b08:	981a      	ldr	r0, [sp, #104]	; 0x68
    7b0a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7b0c:	4b1d      	ldr	r3, [pc, #116]	; (7b84 <_vfprintf_r+0xb2c>)
    7b0e:	4a1c      	ldr	r2, [pc, #112]	; (7b80 <_vfprintf_r+0xb28>)
    7b10:	f006 fb56 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    7b14:	2800      	cmp	r0, #0
    7b16:	d000      	beq.n	7b1a <_vfprintf_r+0xac2>
    7b18:	e124      	b.n	7d64 <_vfprintf_r+0xd0c>
    7b1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7b1c:	3301      	adds	r3, #1
    7b1e:	602b      	str	r3, [r5, #0]
    7b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b22:	68a2      	ldr	r2, [r4, #8]
    7b24:	3b01      	subs	r3, #1
    7b26:	606b      	str	r3, [r5, #4]
    7b28:	189b      	adds	r3, r3, r2
    7b2a:	60a3      	str	r3, [r4, #8]
    7b2c:	6863      	ldr	r3, [r4, #4]
    7b2e:	3301      	adds	r3, #1
    7b30:	6063      	str	r3, [r4, #4]
    7b32:	2b07      	cmp	r3, #7
    7b34:	dd01      	ble.n	7b3a <_vfprintf_r+0xae2>
    7b36:	f000 fc31 	bl	839c <_vfprintf_r+0x1344>
    7b3a:	2508      	movs	r5, #8
    7b3c:	1c2f      	adds	r7, r5, #0
    7b3e:	444f      	add	r7, r9
    7b40:	23ab      	movs	r3, #171	; 0xab
    7b42:	00db      	lsls	r3, r3, #3
    7b44:	446b      	add	r3, sp
    7b46:	464e      	mov	r6, r9
    7b48:	981d      	ldr	r0, [sp, #116]	; 0x74
    7b4a:	6033      	str	r3, [r6, #0]
    7b4c:	68a3      	ldr	r3, [r4, #8]
    7b4e:	6070      	str	r0, [r6, #4]
    7b50:	181b      	adds	r3, r3, r0
    7b52:	60a3      	str	r3, [r4, #8]
    7b54:	6863      	ldr	r3, [r4, #4]
    7b56:	3301      	adds	r3, #1
    7b58:	6063      	str	r3, [r4, #4]
    7b5a:	2b07      	cmp	r3, #7
    7b5c:	dc01      	bgt.n	7b62 <_vfprintf_r+0xb0a>
    7b5e:	f7ff fbe9 	bl	7334 <_vfprintf_r+0x2dc>
    7b62:	9809      	ldr	r0, [sp, #36]	; 0x24
    7b64:	4659      	mov	r1, fp
    7b66:	1c22      	adds	r2, r4, #0
    7b68:	f004 f8b6 	bl	bcd8 <__sprint_r>
    7b6c:	2800      	cmp	r0, #0
    7b6e:	d000      	beq.n	7b72 <_vfprintf_r+0xb1a>
    7b70:	e46a      	b.n	7448 <_vfprintf_r+0x3f0>
    7b72:	4f0a      	ldr	r7, [pc, #40]	; (7b9c <_vfprintf_r+0xb44>)
    7b74:	446f      	add	r7, sp
    7b76:	f7ff fbdd 	bl	7334 <_vfprintf_r+0x2dc>
    7b7a:	920c      	str	r2, [sp, #48]	; 0x30
    7b7c:	9413      	str	r4, [sp, #76]	; 0x4c
    7b7e:	e507      	b.n	7590 <_vfprintf_r+0x538>
	...
    7b88:	0000056c 	.word	0x0000056c
    7b8c:	0000ede4 	.word	0x0000ede4
    7b90:	0000ee00 	.word	0x0000ee00
    7b94:	0000e524 	.word	0x0000e524
    7b98:	000004ec 	.word	0x000004ec
    7b9c:	000004e4 	.word	0x000004e4
    7ba0:	00000524 	.word	0x00000524
    7ba4:	0000054b 	.word	0x0000054b
    7ba8:	46ba      	mov	sl, r7
    7baa:	e44e      	b.n	744a <_vfprintf_r+0x3f2>
    7bac:	9809      	ldr	r0, [sp, #36]	; 0x24
    7bae:	4659      	mov	r1, fp
    7bb0:	1c22      	adds	r2, r4, #0
    7bb2:	f004 f891 	bl	bcd8 <__sprint_r>
    7bb6:	2800      	cmp	r0, #0
    7bb8:	d000      	beq.n	7bbc <_vfprintf_r+0xb64>
    7bba:	e445      	b.n	7448 <_vfprintf_r+0x3f0>
    7bbc:	4fce      	ldr	r7, [pc, #824]	; (7ef8 <_vfprintf_r+0xea0>)
    7bbe:	446f      	add	r7, sp
    7bc0:	f7ff fba5 	bl	730e <_vfprintf_r+0x2b6>
    7bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
    7bc6:	4659      	mov	r1, fp
    7bc8:	1c22      	adds	r2, r4, #0
    7bca:	f004 f885 	bl	bcd8 <__sprint_r>
    7bce:	2800      	cmp	r0, #0
    7bd0:	d000      	beq.n	7bd4 <_vfprintf_r+0xb7c>
    7bd2:	e439      	b.n	7448 <_vfprintf_r+0x3f0>
    7bd4:	4dc8      	ldr	r5, [pc, #800]	; (7ef8 <_vfprintf_r+0xea0>)
    7bd6:	446d      	add	r5, sp
    7bd8:	f7ff fb4c 	bl	7274 <_vfprintf_r+0x21c>
    7bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
    7bde:	4659      	mov	r1, fp
    7be0:	1c22      	adds	r2, r4, #0
    7be2:	f004 f879 	bl	bcd8 <__sprint_r>
    7be6:	2800      	cmp	r0, #0
    7be8:	d000      	beq.n	7bec <_vfprintf_r+0xb94>
    7bea:	e42d      	b.n	7448 <_vfprintf_r+0x3f0>
    7bec:	4dc2      	ldr	r5, [pc, #776]	; (7ef8 <_vfprintf_r+0xea0>)
    7bee:	446d      	add	r5, sp
    7bf0:	f7ff fb2d 	bl	724e <_vfprintf_r+0x1f6>
    7bf4:	20ad      	movs	r0, #173	; 0xad
    7bf6:	00c0      	lsls	r0, r0, #3
    7bf8:	4468      	add	r0, sp
    7bfa:	6805      	ldr	r5, [r0, #0]
    7bfc:	2d00      	cmp	r5, #0
    7bfe:	dc00      	bgt.n	7c02 <_vfprintf_r+0xbaa>
    7c00:	e37a      	b.n	82f8 <_vfprintf_r+0x12a0>
    7c02:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    7c04:	46b2      	mov	sl, r6
    7c06:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7c08:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7c0a:	44b2      	add	sl, r6
    7c0c:	4650      	mov	r0, sl
    7c0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
    7c10:	1a45      	subs	r5, r0, r1
    7c12:	4295      	cmp	r5, r2
    7c14:	dd00      	ble.n	7c18 <_vfprintf_r+0xbc0>
    7c16:	1c15      	adds	r5, r2, #0
    7c18:	2d00      	cmp	r5, #0
    7c1a:	dd0d      	ble.n	7c38 <_vfprintf_r+0xbe0>
    7c1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7c1e:	603b      	str	r3, [r7, #0]
    7c20:	68a3      	ldr	r3, [r4, #8]
    7c22:	18eb      	adds	r3, r5, r3
    7c24:	607d      	str	r5, [r7, #4]
    7c26:	60a3      	str	r3, [r4, #8]
    7c28:	6863      	ldr	r3, [r4, #4]
    7c2a:	3301      	adds	r3, #1
    7c2c:	6063      	str	r3, [r4, #4]
    7c2e:	3708      	adds	r7, #8
    7c30:	2b07      	cmp	r3, #7
    7c32:	dd01      	ble.n	7c38 <_vfprintf_r+0xbe0>
    7c34:	f000 fc9a 	bl	856c <_vfprintf_r+0x1514>
    7c38:	43eb      	mvns	r3, r5
    7c3a:	17db      	asrs	r3, r3, #31
    7c3c:	9e19      	ldr	r6, [sp, #100]	; 0x64
    7c3e:	401d      	ands	r5, r3
    7c40:	1b75      	subs	r5, r6, r5
    7c42:	2d00      	cmp	r5, #0
    7c44:	dc01      	bgt.n	7c4a <_vfprintf_r+0xbf2>
    7c46:	f000 fc59 	bl	84fc <_vfprintf_r+0x14a4>
    7c4a:	2d10      	cmp	r5, #16
    7c4c:	dc01      	bgt.n	7c52 <_vfprintf_r+0xbfa>
    7c4e:	f000 fdb6 	bl	87be <_vfprintf_r+0x1766>
    7c52:	48aa      	ldr	r0, [pc, #680]	; (7efc <_vfprintf_r+0xea4>)
    7c54:	2110      	movs	r1, #16
    7c56:	4680      	mov	r8, r0
    7c58:	1c0e      	adds	r6, r1, #0
    7c5a:	1c3a      	adds	r2, r7, #0
    7c5c:	4446      	add	r6, r8
    7c5e:	4689      	mov	r9, r1
    7c60:	465f      	mov	r7, fp
    7c62:	e006      	b.n	7c72 <_vfprintf_r+0xc1a>
    7c64:	3208      	adds	r2, #8
    7c66:	1c13      	adds	r3, r2, #0
    7c68:	3308      	adds	r3, #8
    7c6a:	3d10      	subs	r5, #16
    7c6c:	2d10      	cmp	r5, #16
    7c6e:	dc00      	bgt.n	7c72 <_vfprintf_r+0xc1a>
    7c70:	e295      	b.n	819e <_vfprintf_r+0x1146>
    7c72:	464b      	mov	r3, r9
    7c74:	6053      	str	r3, [r2, #4]
    7c76:	68a3      	ldr	r3, [r4, #8]
    7c78:	3310      	adds	r3, #16
    7c7a:	6016      	str	r6, [r2, #0]
    7c7c:	60a3      	str	r3, [r4, #8]
    7c7e:	6863      	ldr	r3, [r4, #4]
    7c80:	3301      	adds	r3, #1
    7c82:	6063      	str	r3, [r4, #4]
    7c84:	2b07      	cmp	r3, #7
    7c86:	dded      	ble.n	7c64 <_vfprintf_r+0xc0c>
    7c88:	9809      	ldr	r0, [sp, #36]	; 0x24
    7c8a:	1c39      	adds	r1, r7, #0
    7c8c:	1c22      	adds	r2, r4, #0
    7c8e:	f004 f823 	bl	bcd8 <__sprint_r>
    7c92:	2800      	cmp	r0, #0
    7c94:	d188      	bne.n	7ba8 <_vfprintf_r+0xb50>
    7c96:	4b9a      	ldr	r3, [pc, #616]	; (7f00 <_vfprintf_r+0xea8>)
    7c98:	4a97      	ldr	r2, [pc, #604]	; (7ef8 <_vfprintf_r+0xea0>)
    7c9a:	446b      	add	r3, sp
    7c9c:	446a      	add	r2, sp
    7c9e:	e7e4      	b.n	7c6a <_vfprintf_r+0xc12>
    7ca0:	930c      	str	r3, [sp, #48]	; 0x30
    7ca2:	9413      	str	r4, [sp, #76]	; 0x4c
    7ca4:	e474      	b.n	7590 <_vfprintf_r+0x538>
    7ca6:	9413      	str	r4, [sp, #76]	; 0x4c
    7ca8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7cac:	270f      	movs	r7, #15
    7cae:	1c21      	adds	r1, r4, #0
    7cb0:	46ac      	mov	ip, r5
    7cb2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    7cb4:	1c10      	adds	r0, r2, #0
    7cb6:	4038      	ands	r0, r7
    7cb8:	5c28      	ldrb	r0, [r5, r0]
    7cba:	3901      	subs	r1, #1
    7cbc:	0915      	lsrs	r5, r2, #4
    7cbe:	46a8      	mov	r8, r5
    7cc0:	7008      	strb	r0, [r1, #0]
    7cc2:	0718      	lsls	r0, r3, #28
    7cc4:	1c05      	adds	r5, r0, #0
    7cc6:	4640      	mov	r0, r8
    7cc8:	4305      	orrs	r5, r0
    7cca:	0918      	lsrs	r0, r3, #4
    7ccc:	1c2a      	adds	r2, r5, #0
    7cce:	1c03      	adds	r3, r0, #0
    7cd0:	4305      	orrs	r5, r0
    7cd2:	d1ee      	bne.n	7cb2 <_vfprintf_r+0xc5a>
    7cd4:	1a67      	subs	r7, r4, r1
    7cd6:	9113      	str	r1, [sp, #76]	; 0x4c
    7cd8:	4665      	mov	r5, ip
    7cda:	9210      	str	r2, [sp, #64]	; 0x40
    7cdc:	9311      	str	r3, [sp, #68]	; 0x44
    7cde:	970c      	str	r7, [sp, #48]	; 0x30
    7ce0:	e456      	b.n	7590 <_vfprintf_r+0x538>
    7ce2:	9911      	ldr	r1, [sp, #68]	; 0x44
    7ce4:	2900      	cmp	r1, #0
    7ce6:	d102      	bne.n	7cee <_vfprintf_r+0xc96>
    7ce8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7cea:	2a09      	cmp	r2, #9
    7cec:	d920      	bls.n	7d30 <_vfprintf_r+0xcd8>
    7cee:	46aa      	mov	sl, r5
    7cf0:	46b0      	mov	r8, r6
    7cf2:	9413      	str	r4, [sp, #76]	; 0x4c
    7cf4:	9d10      	ldr	r5, [sp, #64]	; 0x40
    7cf6:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7cf8:	1c27      	adds	r7, r4, #0
    7cfa:	1c28      	adds	r0, r5, #0
    7cfc:	1c31      	adds	r1, r6, #0
    7cfe:	220a      	movs	r2, #10
    7d00:	2300      	movs	r3, #0
    7d02:	f006 fa29 	bl	e158 <____aeabi_uldivmod_from_thumb>
    7d06:	3f01      	subs	r7, #1
    7d08:	3230      	adds	r2, #48	; 0x30
    7d0a:	703a      	strb	r2, [r7, #0]
    7d0c:	1c28      	adds	r0, r5, #0
    7d0e:	1c31      	adds	r1, r6, #0
    7d10:	220a      	movs	r2, #10
    7d12:	2300      	movs	r3, #0
    7d14:	f006 fa20 	bl	e158 <____aeabi_uldivmod_from_thumb>
    7d18:	1c05      	adds	r5, r0, #0
    7d1a:	1c0e      	adds	r6, r1, #0
    7d1c:	4308      	orrs	r0, r1
    7d1e:	d1ec      	bne.n	7cfa <_vfprintf_r+0xca2>
    7d20:	1be1      	subs	r1, r4, r7
    7d22:	9510      	str	r5, [sp, #64]	; 0x40
    7d24:	9611      	str	r6, [sp, #68]	; 0x44
    7d26:	9713      	str	r7, [sp, #76]	; 0x4c
    7d28:	4655      	mov	r5, sl
    7d2a:	4646      	mov	r6, r8
    7d2c:	910c      	str	r1, [sp, #48]	; 0x30
    7d2e:	e42f      	b.n	7590 <_vfprintf_r+0x538>
    7d30:	4b74      	ldr	r3, [pc, #464]	; (7f04 <_vfprintf_r+0xeac>)
    7d32:	3230      	adds	r2, #48	; 0x30
    7d34:	446b      	add	r3, sp
    7d36:	3127      	adds	r1, #39	; 0x27
    7d38:	545a      	strb	r2, [r3, r1]
    7d3a:	4b73      	ldr	r3, [pc, #460]	; (7f08 <_vfprintf_r+0xeb0>)
    7d3c:	446b      	add	r3, sp
    7d3e:	1ae7      	subs	r7, r4, r3
    7d40:	970c      	str	r7, [sp, #48]	; 0x30
    7d42:	9313      	str	r3, [sp, #76]	; 0x4c
    7d44:	e424      	b.n	7590 <_vfprintf_r+0x538>
    7d46:	9809      	ldr	r0, [sp, #36]	; 0x24
    7d48:	4659      	mov	r1, fp
    7d4a:	1c22      	adds	r2, r4, #0
    7d4c:	f003 ffc4 	bl	bcd8 <__sprint_r>
    7d50:	2800      	cmp	r0, #0
    7d52:	d001      	beq.n	7d58 <_vfprintf_r+0xd00>
    7d54:	f7ff fb78 	bl	7448 <_vfprintf_r+0x3f0>
    7d58:	4d67      	ldr	r5, [pc, #412]	; (7ef8 <_vfprintf_r+0xea0>)
    7d5a:	4649      	mov	r1, r9
    7d5c:	780a      	ldrb	r2, [r1, #0]
    7d5e:	446d      	add	r5, sp
    7d60:	f7ff fa64 	bl	722c <_vfprintf_r+0x1d4>
    7d64:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7d66:	3e01      	subs	r6, #1
    7d68:	2e00      	cmp	r6, #0
    7d6a:	dc00      	bgt.n	7d6e <_vfprintf_r+0xd16>
    7d6c:	e3b0      	b.n	84d0 <_vfprintf_r+0x1478>
    7d6e:	2e10      	cmp	r6, #16
    7d70:	dc01      	bgt.n	7d76 <_vfprintf_r+0xd1e>
    7d72:	f000 fd14 	bl	879e <_vfprintf_r+0x1746>
    7d76:	4861      	ldr	r0, [pc, #388]	; (7efc <_vfprintf_r+0xea4>)
    7d78:	2110      	movs	r1, #16
    7d7a:	4680      	mov	r8, r0
    7d7c:	1c0f      	adds	r7, r1, #0
    7d7e:	1c2b      	adds	r3, r5, #0
    7d80:	4447      	add	r7, r8
    7d82:	468a      	mov	sl, r1
    7d84:	465d      	mov	r5, fp
    7d86:	e006      	b.n	7d96 <_vfprintf_r+0xd3e>
    7d88:	3308      	adds	r3, #8
    7d8a:	1c1a      	adds	r2, r3, #0
    7d8c:	3208      	adds	r2, #8
    7d8e:	3e10      	subs	r6, #16
    7d90:	2e10      	cmp	r6, #16
    7d92:	dc00      	bgt.n	7d96 <_vfprintf_r+0xd3e>
    7d94:	e09a      	b.n	7ecc <_vfprintf_r+0xe74>
    7d96:	4652      	mov	r2, sl
    7d98:	605a      	str	r2, [r3, #4]
    7d9a:	68a2      	ldr	r2, [r4, #8]
    7d9c:	3210      	adds	r2, #16
    7d9e:	601f      	str	r7, [r3, #0]
    7da0:	60a2      	str	r2, [r4, #8]
    7da2:	6862      	ldr	r2, [r4, #4]
    7da4:	3201      	adds	r2, #1
    7da6:	6062      	str	r2, [r4, #4]
    7da8:	2a07      	cmp	r2, #7
    7daa:	dded      	ble.n	7d88 <_vfprintf_r+0xd30>
    7dac:	9809      	ldr	r0, [sp, #36]	; 0x24
    7dae:	1c29      	adds	r1, r5, #0
    7db0:	1c22      	adds	r2, r4, #0
    7db2:	f003 ff91 	bl	bcd8 <__sprint_r>
    7db6:	2800      	cmp	r0, #0
    7db8:	d134      	bne.n	7e24 <_vfprintf_r+0xdcc>
    7dba:	4a51      	ldr	r2, [pc, #324]	; (7f00 <_vfprintf_r+0xea8>)
    7dbc:	4b4e      	ldr	r3, [pc, #312]	; (7ef8 <_vfprintf_r+0xea0>)
    7dbe:	446a      	add	r2, sp
    7dc0:	446b      	add	r3, sp
    7dc2:	e7e4      	b.n	7d8e <_vfprintf_r+0xd36>
    7dc4:	9907      	ldr	r1, [sp, #28]
    7dc6:	06c9      	lsls	r1, r1, #27
    7dc8:	d400      	bmi.n	7dcc <_vfprintf_r+0xd74>
    7dca:	e1bd      	b.n	8148 <_vfprintf_r+0x10f0>
    7dcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7dce:	6813      	ldr	r3, [r2, #0]
    7dd0:	3204      	adds	r2, #4
    7dd2:	9310      	str	r3, [sp, #64]	; 0x40
    7dd4:	17db      	asrs	r3, r3, #31
    7dd6:	9311      	str	r3, [sp, #68]	; 0x44
    7dd8:	920f      	str	r2, [sp, #60]	; 0x3c
    7dda:	f7ff fb9a 	bl	7512 <_vfprintf_r+0x4ba>
    7dde:	2302      	movs	r3, #2
    7de0:	e451      	b.n	7686 <_vfprintf_r+0x62e>
    7de2:	9907      	ldr	r1, [sp, #28]
    7de4:	2310      	movs	r3, #16
    7de6:	4019      	ands	r1, r3
    7de8:	d100      	bne.n	7dec <_vfprintf_r+0xd94>
    7dea:	e19b      	b.n	8124 <_vfprintf_r+0x10cc>
    7dec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7dee:	6809      	ldr	r1, [r1, #0]
    7df0:	9110      	str	r1, [sp, #64]	; 0x40
    7df2:	9211      	str	r2, [sp, #68]	; 0x44
    7df4:	1c0a      	adds	r2, r1, #0
    7df6:	1e53      	subs	r3, r2, #1
    7df8:	419a      	sbcs	r2, r3
    7dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7dfc:	3304      	adds	r3, #4
    7dfe:	930f      	str	r3, [sp, #60]	; 0x3c
    7e00:	2301      	movs	r3, #1
    7e02:	e440      	b.n	7686 <_vfprintf_r+0x62e>
    7e04:	9907      	ldr	r1, [sp, #28]
    7e06:	2210      	movs	r2, #16
    7e08:	4011      	ands	r1, r2
    7e0a:	d100      	bne.n	7e0e <_vfprintf_r+0xdb6>
    7e0c:	e1ab      	b.n	8166 <_vfprintf_r+0x110e>
    7e0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7e10:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7e12:	6809      	ldr	r1, [r1, #0]
    7e14:	3704      	adds	r7, #4
    7e16:	1c0a      	adds	r2, r1, #0
    7e18:	9110      	str	r1, [sp, #64]	; 0x40
    7e1a:	9311      	str	r3, [sp, #68]	; 0x44
    7e1c:	1e51      	subs	r1, r2, #1
    7e1e:	418a      	sbcs	r2, r1
    7e20:	970f      	str	r7, [sp, #60]	; 0x3c
    7e22:	e430      	b.n	7686 <_vfprintf_r+0x62e>
    7e24:	46aa      	mov	sl, r5
    7e26:	f7ff fb10 	bl	744a <_vfprintf_r+0x3f2>
    7e2a:	9d07      	ldr	r5, [sp, #28]
    7e2c:	2301      	movs	r3, #1
    7e2e:	421d      	tst	r5, r3
    7e30:	d000      	beq.n	7e34 <_vfprintf_r+0xddc>
    7e32:	e649      	b.n	7ac8 <_vfprintf_r+0xa70>
    7e34:	607b      	str	r3, [r7, #4]
    7e36:	68a3      	ldr	r3, [r4, #8]
    7e38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7e3a:	3301      	adds	r3, #1
    7e3c:	603a      	str	r2, [r7, #0]
    7e3e:	60a3      	str	r3, [r4, #8]
    7e40:	6863      	ldr	r3, [r4, #4]
    7e42:	3301      	adds	r3, #1
    7e44:	6063      	str	r3, [r4, #4]
    7e46:	2b07      	cmp	r3, #7
    7e48:	dd00      	ble.n	7e4c <_vfprintf_r+0xdf4>
    7e4a:	e321      	b.n	8490 <_vfprintf_r+0x1438>
    7e4c:	3708      	adds	r7, #8
    7e4e:	2308      	movs	r3, #8
    7e50:	46b9      	mov	r9, r7
    7e52:	1c1f      	adds	r7, r3, #0
    7e54:	444f      	add	r7, r9
    7e56:	e673      	b.n	7b40 <_vfprintf_r+0xae8>
    7e58:	9809      	ldr	r0, [sp, #36]	; 0x24
    7e5a:	4659      	mov	r1, fp
    7e5c:	1c22      	adds	r2, r4, #0
    7e5e:	f003 ff3b 	bl	bcd8 <__sprint_r>
    7e62:	2800      	cmp	r0, #0
    7e64:	d001      	beq.n	7e6a <_vfprintf_r+0xe12>
    7e66:	f7ff faef 	bl	7448 <_vfprintf_r+0x3f0>
    7e6a:	4b25      	ldr	r3, [pc, #148]	; (7f00 <_vfprintf_r+0xea8>)
    7e6c:	4d22      	ldr	r5, [pc, #136]	; (7ef8 <_vfprintf_r+0xea0>)
    7e6e:	446b      	add	r3, sp
    7e70:	4699      	mov	r9, r3
    7e72:	446d      	add	r5, sp
    7e74:	e648      	b.n	7b08 <_vfprintf_r+0xab0>
    7e76:	9809      	ldr	r0, [sp, #36]	; 0x24
    7e78:	4659      	mov	r1, fp
    7e7a:	1c22      	adds	r2, r4, #0
    7e7c:	f003 ff2c 	bl	bcd8 <__sprint_r>
    7e80:	2800      	cmp	r0, #0
    7e82:	d001      	beq.n	7e88 <_vfprintf_r+0xe30>
    7e84:	f7ff fae0 	bl	7448 <_vfprintf_r+0x3f0>
    7e88:	4d1d      	ldr	r5, [pc, #116]	; (7f00 <_vfprintf_r+0xea8>)
    7e8a:	4f1b      	ldr	r7, [pc, #108]	; (7ef8 <_vfprintf_r+0xea0>)
    7e8c:	446d      	add	r5, sp
    7e8e:	446f      	add	r7, sp
    7e90:	e62a      	b.n	7ae8 <_vfprintf_r+0xa90>
    7e92:	2830      	cmp	r0, #48	; 0x30
    7e94:	d100      	bne.n	7e98 <_vfprintf_r+0xe40>
    7e96:	e386      	b.n	85a6 <_vfprintf_r+0x154e>
    7e98:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    7e9a:	3f01      	subs	r7, #1
    7e9c:	2330      	movs	r3, #48	; 0x30
    7e9e:	1be0      	subs	r0, r4, r7
    7ea0:	9713      	str	r7, [sp, #76]	; 0x4c
    7ea2:	703b      	strb	r3, [r7, #0]
    7ea4:	900c      	str	r0, [sp, #48]	; 0x30
    7ea6:	f7ff fb73 	bl	7590 <_vfprintf_r+0x538>
    7eaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7eac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7eae:	2100      	movs	r1, #0
    7eb0:	4250      	negs	r0, r2
    7eb2:	4199      	sbcs	r1, r3
    7eb4:	1c02      	adds	r2, r0, #0
    7eb6:	232d      	movs	r3, #45	; 0x2d
    7eb8:	464f      	mov	r7, r9
    7eba:	430a      	orrs	r2, r1
    7ebc:	703b      	strb	r3, [r7, #0]
    7ebe:	9010      	str	r0, [sp, #64]	; 0x40
    7ec0:	9111      	str	r1, [sp, #68]	; 0x44
    7ec2:	1e53      	subs	r3, r2, #1
    7ec4:	419a      	sbcs	r2, r3
    7ec6:	2301      	movs	r3, #1
    7ec8:	f7ff fb2e 	bl	7528 <_vfprintf_r+0x4d0>
    7ecc:	46ab      	mov	fp, r5
    7ece:	4691      	mov	r9, r2
    7ed0:	1c1d      	adds	r5, r3, #0
    7ed2:	2710      	movs	r7, #16
    7ed4:	1c3b      	adds	r3, r7, #0
    7ed6:	4443      	add	r3, r8
    7ed8:	602b      	str	r3, [r5, #0]
    7eda:	68a3      	ldr	r3, [r4, #8]
    7edc:	18f3      	adds	r3, r6, r3
    7ede:	606e      	str	r6, [r5, #4]
    7ee0:	60a3      	str	r3, [r4, #8]
    7ee2:	6863      	ldr	r3, [r4, #4]
    7ee4:	3301      	adds	r3, #1
    7ee6:	6063      	str	r3, [r4, #4]
    7ee8:	2b07      	cmp	r3, #7
    7eea:	dd00      	ble.n	7eee <_vfprintf_r+0xe96>
    7eec:	e34b      	b.n	8586 <_vfprintf_r+0x152e>
    7eee:	2008      	movs	r0, #8
    7ef0:	1c07      	adds	r7, r0, #0
    7ef2:	444f      	add	r7, r9
    7ef4:	e624      	b.n	7b40 <_vfprintf_r+0xae8>
    7ef6:	46c0      	nop			; (mov r8, r8)
    7ef8:	000004e4 	.word	0x000004e4
    7efc:	0000e524 	.word	0x0000e524
    7f00:	000004ec 	.word	0x000004ec
    7f04:	00000524 	.word	0x00000524
    7f08:	0000054b 	.word	0x0000054b
    7f0c:	981a      	ldr	r0, [sp, #104]	; 0x68
    7f0e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7f10:	f003 f860 	bl	afd4 <__fpclassifyd>
    7f14:	2800      	cmp	r0, #0
    7f16:	d100      	bne.n	7f1a <_vfprintf_r+0xec2>
    7f18:	e272      	b.n	8400 <_vfprintf_r+0x13a8>
    7f1a:	1c70      	adds	r0, r6, #1
    7f1c:	d101      	bne.n	7f22 <_vfprintf_r+0xeca>
    7f1e:	f000 fbfa 	bl	8716 <_vfprintf_r+0x16be>
    7f22:	9916      	ldr	r1, [sp, #88]	; 0x58
    7f24:	3947      	subs	r1, #71	; 0x47
    7f26:	910c      	str	r1, [sp, #48]	; 0x30
    7f28:	2900      	cmp	r1, #0
    7f2a:	d002      	beq.n	7f32 <_vfprintf_r+0xeda>
    7f2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    7f2e:	2a67      	cmp	r2, #103	; 0x67
    7f30:	d102      	bne.n	7f38 <_vfprintf_r+0xee0>
    7f32:	2e00      	cmp	r6, #0
    7f34:	d100      	bne.n	7f38 <_vfprintf_r+0xee0>
    7f36:	2601      	movs	r6, #1
    7f38:	9f07      	ldr	r7, [sp, #28]
    7f3a:	2380      	movs	r3, #128	; 0x80
    7f3c:	005b      	lsls	r3, r3, #1
    7f3e:	431f      	orrs	r7, r3
    7f40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7f42:	9707      	str	r7, [sp, #28]
    7f44:	2b00      	cmp	r3, #0
    7f46:	da00      	bge.n	7f4a <_vfprintf_r+0xef2>
    7f48:	e3f2      	b.n	8730 <_vfprintf_r+0x16d8>
    7f4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7f4c:	2700      	movs	r7, #0
    7f4e:	930a      	str	r3, [sp, #40]	; 0x28
    7f50:	9714      	str	r7, [sp, #80]	; 0x50
    7f52:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7f54:	3b46      	subs	r3, #70	; 0x46
    7f56:	4259      	negs	r1, r3
    7f58:	4159      	adcs	r1, r3
    7f5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7f5c:	3b66      	subs	r3, #102	; 0x66
    7f5e:	425a      	negs	r2, r3
    7f60:	4153      	adcs	r3, r2
    7f62:	1c08      	adds	r0, r1, #0
    7f64:	4318      	orrs	r0, r3
    7f66:	900e      	str	r0, [sp, #56]	; 0x38
    7f68:	d000      	beq.n	7f6c <_vfprintf_r+0xf14>
    7f6a:	e364      	b.n	8636 <_vfprintf_r+0x15de>
    7f6c:	9916      	ldr	r1, [sp, #88]	; 0x58
    7f6e:	2945      	cmp	r1, #69	; 0x45
    7f70:	d002      	beq.n	7f78 <_vfprintf_r+0xf20>
    7f72:	2965      	cmp	r1, #101	; 0x65
    7f74:	d000      	beq.n	7f78 <_vfprintf_r+0xf20>
    7f76:	e3e5      	b.n	8744 <_vfprintf_r+0x16ec>
    7f78:	1c72      	adds	r2, r6, #1
    7f7a:	4692      	mov	sl, r2
    7f7c:	2302      	movs	r3, #2
    7f7e:	9300      	str	r3, [sp, #0]
    7f80:	4653      	mov	r3, sl
    7f82:	9301      	str	r3, [sp, #4]
    7f84:	23ad      	movs	r3, #173	; 0xad
    7f86:	00db      	lsls	r3, r3, #3
    7f88:	446b      	add	r3, sp
    7f8a:	9302      	str	r3, [sp, #8]
    7f8c:	4bd4      	ldr	r3, [pc, #848]	; (82e0 <_vfprintf_r+0x1288>)
    7f8e:	446b      	add	r3, sp
    7f90:	9303      	str	r3, [sp, #12]
    7f92:	23ac      	movs	r3, #172	; 0xac
    7f94:	00db      	lsls	r3, r3, #3
    7f96:	446b      	add	r3, sp
    7f98:	9304      	str	r3, [sp, #16]
    7f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
    7f9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    7f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7fa0:	f000 fdd4 	bl	8b4c <_dtoa_r>
    7fa4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7fa6:	9013      	str	r0, [sp, #76]	; 0x4c
    7fa8:	2f00      	cmp	r7, #0
    7faa:	d002      	beq.n	7fb2 <_vfprintf_r+0xf5a>
    7fac:	9816      	ldr	r0, [sp, #88]	; 0x58
    7fae:	2867      	cmp	r0, #103	; 0x67
    7fb0:	d103      	bne.n	7fba <_vfprintf_r+0xf62>
    7fb2:	9907      	ldr	r1, [sp, #28]
    7fb4:	07c9      	lsls	r1, r1, #31
    7fb6:	d400      	bmi.n	7fba <_vfprintf_r+0xf62>
    7fb8:	e3d2      	b.n	8760 <_vfprintf_r+0x1708>
    7fba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7fbc:	980e      	ldr	r0, [sp, #56]	; 0x38
    7fbe:	1c1f      	adds	r7, r3, #0
    7fc0:	4457      	add	r7, sl
    7fc2:	2800      	cmp	r0, #0
    7fc4:	d008      	beq.n	7fd8 <_vfprintf_r+0xf80>
    7fc6:	781b      	ldrb	r3, [r3, #0]
    7fc8:	2b30      	cmp	r3, #48	; 0x30
    7fca:	d100      	bne.n	7fce <_vfprintf_r+0xf76>
    7fcc:	e3cd      	b.n	876a <_vfprintf_r+0x1712>
    7fce:	21ad      	movs	r1, #173	; 0xad
    7fd0:	00c9      	lsls	r1, r1, #3
    7fd2:	4469      	add	r1, sp
    7fd4:	680a      	ldr	r2, [r1, #0]
    7fd6:	18bf      	adds	r7, r7, r2
    7fd8:	981a      	ldr	r0, [sp, #104]	; 0x68
    7fda:	990a      	ldr	r1, [sp, #40]	; 0x28
    7fdc:	4bbf      	ldr	r3, [pc, #764]	; (82dc <_vfprintf_r+0x1284>)
    7fde:	4abe      	ldr	r2, [pc, #760]	; (82d8 <_vfprintf_r+0x1280>)
    7fe0:	f006 f8ee 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    7fe4:	2800      	cmp	r0, #0
    7fe6:	d100      	bne.n	7fea <_vfprintf_r+0xf92>
    7fe8:	e368      	b.n	86bc <_vfprintf_r+0x1664>
    7fea:	22ac      	movs	r2, #172	; 0xac
    7fec:	00d2      	lsls	r2, r2, #3
    7fee:	446a      	add	r2, sp
    7ff0:	6017      	str	r7, [r2, #0]
    7ff2:	1c3b      	adds	r3, r7, #0
    7ff4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7ff6:	1a9b      	subs	r3, r3, r2
    7ff8:	930e      	str	r3, [sp, #56]	; 0x38
    7ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7ffc:	2b00      	cmp	r3, #0
    7ffe:	d003      	beq.n	8008 <_vfprintf_r+0xfb0>
    8000:	9f16      	ldr	r7, [sp, #88]	; 0x58
    8002:	2f67      	cmp	r7, #103	; 0x67
    8004:	d000      	beq.n	8008 <_vfprintf_r+0xfb0>
    8006:	e341      	b.n	868c <_vfprintf_r+0x1634>
    8008:	20ad      	movs	r0, #173	; 0xad
    800a:	00c0      	lsls	r0, r0, #3
    800c:	4468      	add	r0, sp
    800e:	6802      	ldr	r2, [r0, #0]
    8010:	920c      	str	r2, [sp, #48]	; 0x30
    8012:	1cd1      	adds	r1, r2, #3
    8014:	db02      	blt.n	801c <_vfprintf_r+0xfc4>
    8016:	4296      	cmp	r6, r2
    8018:	db00      	blt.n	801c <_vfprintf_r+0xfc4>
    801a:	e371      	b.n	8700 <_vfprintf_r+0x16a8>
    801c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    801e:	3b02      	subs	r3, #2
    8020:	9316      	str	r3, [sp, #88]	; 0x58
    8022:	1e56      	subs	r6, r2, #1
    8024:	21ad      	movs	r1, #173	; 0xad
    8026:	22ab      	movs	r2, #171	; 0xab
    8028:	ab16      	add	r3, sp, #88	; 0x58
    802a:	00c9      	lsls	r1, r1, #3
    802c:	00d2      	lsls	r2, r2, #3
    802e:	781b      	ldrb	r3, [r3, #0]
    8030:	446a      	add	r2, sp
    8032:	4469      	add	r1, sp
    8034:	600e      	str	r6, [r1, #0]
    8036:	4692      	mov	sl, r2
    8038:	7013      	strb	r3, [r2, #0]
    803a:	2e00      	cmp	r6, #0
    803c:	da00      	bge.n	8040 <_vfprintf_r+0xfe8>
    803e:	e3a5      	b.n	878c <_vfprintf_r+0x1734>
    8040:	232b      	movs	r3, #43	; 0x2b
    8042:	7053      	strb	r3, [r2, #1]
    8044:	2e09      	cmp	r6, #9
    8046:	dc00      	bgt.n	804a <_vfprintf_r+0xff2>
    8048:	e36a      	b.n	8720 <_vfprintf_r+0x16c8>
    804a:	48a6      	ldr	r0, [pc, #664]	; (82e4 <_vfprintf_r+0x128c>)
    804c:	4468      	add	r0, sp
    804e:	4680      	mov	r8, r0
    8050:	1c07      	adds	r7, r0, #0
    8052:	1c30      	adds	r0, r6, #0
    8054:	210a      	movs	r1, #10
    8056:	f006 f84d 	bl	e0f4 <____aeabi_idivmod_from_thumb>
    805a:	3f01      	subs	r7, #1
    805c:	3130      	adds	r1, #48	; 0x30
    805e:	7039      	strb	r1, [r7, #0]
    8060:	1c30      	adds	r0, r6, #0
    8062:	210a      	movs	r1, #10
    8064:	f006 f83e 	bl	e0e4 <____aeabi_idiv_from_thumb>
    8068:	1c06      	adds	r6, r0, #0
    806a:	2809      	cmp	r0, #9
    806c:	dcf1      	bgt.n	8052 <_vfprintf_r+0xffa>
    806e:	1c02      	adds	r2, r0, #0
    8070:	499d      	ldr	r1, [pc, #628]	; (82e8 <_vfprintf_r+0x1290>)
    8072:	1e7b      	subs	r3, r7, #1
    8074:	3230      	adds	r2, #48	; 0x30
    8076:	701a      	strb	r2, [r3, #0]
    8078:	4469      	add	r1, sp
    807a:	4543      	cmp	r3, r8
    807c:	d205      	bcs.n	808a <_vfprintf_r+0x1032>
    807e:	781a      	ldrb	r2, [r3, #0]
    8080:	3301      	adds	r3, #1
    8082:	700a      	strb	r2, [r1, #0]
    8084:	3101      	adds	r1, #1
    8086:	4543      	cmp	r3, r8
    8088:	d3f9      	bcc.n	807e <_vfprintf_r+0x1026>
    808a:	4652      	mov	r2, sl
    808c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    808e:	1a8a      	subs	r2, r1, r2
    8090:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8092:	921d      	str	r2, [sp, #116]	; 0x74
    8094:	18d2      	adds	r2, r2, r3
    8096:	920c      	str	r2, [sp, #48]	; 0x30
    8098:	2e01      	cmp	r6, #1
    809a:	dc00      	bgt.n	809e <_vfprintf_r+0x1046>
    809c:	e383      	b.n	87a6 <_vfprintf_r+0x174e>
    809e:	980c      	ldr	r0, [sp, #48]	; 0x30
    80a0:	2100      	movs	r1, #0
    80a2:	3001      	adds	r0, #1
    80a4:	900c      	str	r0, [sp, #48]	; 0x30
    80a6:	9119      	str	r1, [sp, #100]	; 0x64
    80a8:	9814      	ldr	r0, [sp, #80]	; 0x50
    80aa:	2800      	cmp	r0, #0
    80ac:	d000      	beq.n	80b0 <_vfprintf_r+0x1058>
    80ae:	e2d0      	b.n	8652 <_vfprintf_r+0x15fa>
    80b0:	990c      	ldr	r1, [sp, #48]	; 0x30
    80b2:	43cb      	mvns	r3, r1
    80b4:	17db      	asrs	r3, r3, #31
    80b6:	4019      	ands	r1, r3
    80b8:	464b      	mov	r3, r9
    80ba:	910a      	str	r1, [sp, #40]	; 0x28
    80bc:	781a      	ldrb	r2, [r3, #0]
    80be:	f7ff fa71 	bl	75a4 <_vfprintf_r+0x54c>
    80c2:	9908      	ldr	r1, [sp, #32]
    80c4:	780b      	ldrb	r3, [r1, #0]
    80c6:	f7ff f84a 	bl	715e <_vfprintf_r+0x106>
    80ca:	9f07      	ldr	r7, [sp, #28]
    80cc:	2340      	movs	r3, #64	; 0x40
    80ce:	403b      	ands	r3, r7
    80d0:	d100      	bne.n	80d4 <_vfprintf_r+0x107c>
    80d2:	e1bf      	b.n	8454 <_vfprintf_r+0x13fc>
    80d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    80d6:	8800      	ldrh	r0, [r0, #0]
    80d8:	9111      	str	r1, [sp, #68]	; 0x44
    80da:	990f      	ldr	r1, [sp, #60]	; 0x3c
    80dc:	3104      	adds	r1, #4
    80de:	9010      	str	r0, [sp, #64]	; 0x40
    80e0:	910f      	str	r1, [sp, #60]	; 0x3c
    80e2:	f7ff fab8 	bl	7656 <_vfprintf_r+0x5fe>
    80e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    80e8:	2307      	movs	r3, #7
    80ea:	3207      	adds	r2, #7
    80ec:	439a      	bics	r2, r3
    80ee:	6810      	ldr	r0, [r2, #0]
    80f0:	2708      	movs	r7, #8
    80f2:	18bf      	adds	r7, r7, r2
    80f4:	970f      	str	r7, [sp, #60]	; 0x3c
    80f6:	901a      	str	r0, [sp, #104]	; 0x68
    80f8:	6852      	ldr	r2, [r2, #4]
    80fa:	921b      	str	r2, [sp, #108]	; 0x6c
    80fc:	f7ff fa6b 	bl	75d6 <_vfprintf_r+0x57e>
    8100:	9807      	ldr	r0, [sp, #28]
    8102:	06c0      	lsls	r0, r0, #27
    8104:	d500      	bpl.n	8108 <_vfprintf_r+0x10b0>
    8106:	e198      	b.n	843a <_vfprintf_r+0x13e2>
    8108:	9b07      	ldr	r3, [sp, #28]
    810a:	065b      	lsls	r3, r3, #25
    810c:	d400      	bmi.n	8110 <_vfprintf_r+0x10b8>
    810e:	e298      	b.n	8642 <_vfprintf_r+0x15ea>
    8110:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    8112:	466f      	mov	r7, sp
    8114:	2034      	movs	r0, #52	; 0x34
    8116:	6833      	ldr	r3, [r6, #0]
    8118:	5bc7      	ldrh	r7, [r0, r7]
    811a:	3604      	adds	r6, #4
    811c:	801f      	strh	r7, [r3, #0]
    811e:	960f      	str	r6, [sp, #60]	; 0x3c
    8120:	f7fe ffe4 	bl	70ec <_vfprintf_r+0x94>
    8124:	9f07      	ldr	r7, [sp, #28]
    8126:	2340      	movs	r3, #64	; 0x40
    8128:	403b      	ands	r3, r7
    812a:	d100      	bne.n	812e <_vfprintf_r+0x10d6>
    812c:	e18d      	b.n	844a <_vfprintf_r+0x13f2>
    812e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8130:	8800      	ldrh	r0, [r0, #0]
    8132:	9111      	str	r1, [sp, #68]	; 0x44
    8134:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8136:	1c02      	adds	r2, r0, #0
    8138:	3104      	adds	r1, #4
    813a:	1e53      	subs	r3, r2, #1
    813c:	419a      	sbcs	r2, r3
    813e:	9010      	str	r0, [sp, #64]	; 0x40
    8140:	910f      	str	r1, [sp, #60]	; 0x3c
    8142:	2301      	movs	r3, #1
    8144:	f7ff fa9f 	bl	7686 <_vfprintf_r+0x62e>
    8148:	9b07      	ldr	r3, [sp, #28]
    814a:	065b      	lsls	r3, r3, #25
    814c:	d400      	bmi.n	8150 <_vfprintf_r+0x10f8>
    814e:	e16b      	b.n	8428 <_vfprintf_r+0x13d0>
    8150:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    8152:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8154:	2300      	movs	r3, #0
    8156:	5efb      	ldrsh	r3, [r7, r3]
    8158:	3004      	adds	r0, #4
    815a:	9310      	str	r3, [sp, #64]	; 0x40
    815c:	17db      	asrs	r3, r3, #31
    815e:	9311      	str	r3, [sp, #68]	; 0x44
    8160:	900f      	str	r0, [sp, #60]	; 0x3c
    8162:	f7ff f9d6 	bl	7512 <_vfprintf_r+0x4ba>
    8166:	9807      	ldr	r0, [sp, #28]
    8168:	2340      	movs	r3, #64	; 0x40
    816a:	4018      	ands	r0, r3
    816c:	d100      	bne.n	8170 <_vfprintf_r+0x1118>
    816e:	e13a      	b.n	83e6 <_vfprintf_r+0x138e>
    8170:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8172:	8800      	ldrh	r0, [r0, #0]
    8174:	1c02      	adds	r2, r0, #0
    8176:	1e53      	subs	r3, r2, #1
    8178:	419a      	sbcs	r2, r3
    817a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    817c:	3304      	adds	r3, #4
    817e:	930f      	str	r3, [sp, #60]	; 0x3c
    8180:	9010      	str	r0, [sp, #64]	; 0x40
    8182:	9111      	str	r1, [sp, #68]	; 0x44
    8184:	1c0b      	adds	r3, r1, #0
    8186:	f7ff fa7e 	bl	7686 <_vfprintf_r+0x62e>
    818a:	46bb      	mov	fp, r7
    818c:	1c17      	adds	r7, r2, #0
    818e:	2610      	movs	r6, #16
    8190:	1c32      	adds	r2, r6, #0
    8192:	605d      	str	r5, [r3, #4]
    8194:	4442      	add	r2, r8
    8196:	601a      	str	r2, [r3, #0]
    8198:	68a3      	ldr	r3, [r4, #8]
    819a:	18eb      	adds	r3, r5, r3
    819c:	e4d9      	b.n	7b52 <_vfprintf_r+0xafa>
    819e:	46bb      	mov	fp, r7
    81a0:	1c17      	adds	r7, r2, #0
    81a2:	2610      	movs	r6, #16
    81a4:	1c32      	adds	r2, r6, #0
    81a6:	4442      	add	r2, r8
    81a8:	603a      	str	r2, [r7, #0]
    81aa:	68a2      	ldr	r2, [r4, #8]
    81ac:	18aa      	adds	r2, r5, r2
    81ae:	607d      	str	r5, [r7, #4]
    81b0:	60a2      	str	r2, [r4, #8]
    81b2:	6862      	ldr	r2, [r4, #4]
    81b4:	3201      	adds	r2, #1
    81b6:	6062      	str	r2, [r4, #4]
    81b8:	2a07      	cmp	r2, #7
    81ba:	dd00      	ble.n	81be <_vfprintf_r+0x1166>
    81bc:	e20a      	b.n	85d4 <_vfprintf_r+0x157c>
    81be:	27ad      	movs	r7, #173	; 0xad
    81c0:	00ff      	lsls	r7, r7, #3
    81c2:	446f      	add	r7, sp
    81c4:	683d      	ldr	r5, [r7, #0]
    81c6:	980e      	ldr	r0, [sp, #56]	; 0x38
    81c8:	4285      	cmp	r5, r0
    81ca:	db4b      	blt.n	8264 <_vfprintf_r+0x120c>
    81cc:	9907      	ldr	r1, [sp, #28]
    81ce:	07c9      	lsls	r1, r1, #31
    81d0:	d448      	bmi.n	8264 <_vfprintf_r+0x120c>
    81d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    81d4:	1c02      	adds	r2, r0, #0
    81d6:	9819      	ldr	r0, [sp, #100]	; 0x64
    81d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    81da:	4651      	mov	r1, sl
    81dc:	1812      	adds	r2, r2, r0
    81de:	1a88      	subs	r0, r1, r2
    81e0:	1b71      	subs	r1, r6, r5
    81e2:	1c0e      	adds	r6, r1, #0
    81e4:	4281      	cmp	r1, r0
    81e6:	dd00      	ble.n	81ea <_vfprintf_r+0x1192>
    81e8:	1c06      	adds	r6, r0, #0
    81ea:	2e00      	cmp	r6, #0
    81ec:	dd0b      	ble.n	8206 <_vfprintf_r+0x11ae>
    81ee:	601a      	str	r2, [r3, #0]
    81f0:	68a2      	ldr	r2, [r4, #8]
    81f2:	18b2      	adds	r2, r6, r2
    81f4:	605e      	str	r6, [r3, #4]
    81f6:	60a2      	str	r2, [r4, #8]
    81f8:	6862      	ldr	r2, [r4, #4]
    81fa:	3201      	adds	r2, #1
    81fc:	6062      	str	r2, [r4, #4]
    81fe:	3308      	adds	r3, #8
    8200:	2a07      	cmp	r2, #7
    8202:	dd00      	ble.n	8206 <_vfprintf_r+0x11ae>
    8204:	e1d4      	b.n	85b0 <_vfprintf_r+0x1558>
    8206:	43f5      	mvns	r5, r6
    8208:	17ed      	asrs	r5, r5, #31
    820a:	4035      	ands	r5, r6
    820c:	1b4d      	subs	r5, r1, r5
    820e:	2d00      	cmp	r5, #0
    8210:	dd45      	ble.n	829e <_vfprintf_r+0x1246>
    8212:	2d10      	cmp	r5, #16
    8214:	dc00      	bgt.n	8218 <_vfprintf_r+0x11c0>
    8216:	e2e2      	b.n	87de <_vfprintf_r+0x1786>
    8218:	4934      	ldr	r1, [pc, #208]	; (82ec <_vfprintf_r+0x1294>)
    821a:	2210      	movs	r2, #16
    821c:	4688      	mov	r8, r1
    821e:	1c16      	adds	r6, r2, #0
    8220:	4446      	add	r6, r8
    8222:	4691      	mov	r9, r2
    8224:	465f      	mov	r7, fp
    8226:	e005      	b.n	8234 <_vfprintf_r+0x11dc>
    8228:	3308      	adds	r3, #8
    822a:	1c1a      	adds	r2, r3, #0
    822c:	3208      	adds	r2, #8
    822e:	3d10      	subs	r5, #16
    8230:	2d10      	cmp	r5, #16
    8232:	dd37      	ble.n	82a4 <_vfprintf_r+0x124c>
    8234:	68a2      	ldr	r2, [r4, #8]
    8236:	4648      	mov	r0, r9
    8238:	3210      	adds	r2, #16
    823a:	601e      	str	r6, [r3, #0]
    823c:	6058      	str	r0, [r3, #4]
    823e:	60a2      	str	r2, [r4, #8]
    8240:	6862      	ldr	r2, [r4, #4]
    8242:	3201      	adds	r2, #1
    8244:	6062      	str	r2, [r4, #4]
    8246:	2a07      	cmp	r2, #7
    8248:	ddee      	ble.n	8228 <_vfprintf_r+0x11d0>
    824a:	9809      	ldr	r0, [sp, #36]	; 0x24
    824c:	1c39      	adds	r1, r7, #0
    824e:	1c22      	adds	r2, r4, #0
    8250:	f003 fd42 	bl	bcd8 <__sprint_r>
    8254:	2800      	cmp	r0, #0
    8256:	d000      	beq.n	825a <_vfprintf_r+0x1202>
    8258:	e4a6      	b.n	7ba8 <_vfprintf_r+0xb50>
    825a:	4a25      	ldr	r2, [pc, #148]	; (82f0 <_vfprintf_r+0x1298>)
    825c:	4b25      	ldr	r3, [pc, #148]	; (82f4 <_vfprintf_r+0x129c>)
    825e:	446a      	add	r2, sp
    8260:	446b      	add	r3, sp
    8262:	e7e4      	b.n	822e <_vfprintf_r+0x11d6>
    8264:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8266:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    8268:	601a      	str	r2, [r3, #0]
    826a:	68a2      	ldr	r2, [r4, #8]
    826c:	1992      	adds	r2, r2, r6
    826e:	605e      	str	r6, [r3, #4]
    8270:	60a2      	str	r2, [r4, #8]
    8272:	6862      	ldr	r2, [r4, #4]
    8274:	3201      	adds	r2, #1
    8276:	6062      	str	r2, [r4, #4]
    8278:	3308      	adds	r3, #8
    827a:	2a07      	cmp	r2, #7
    827c:	dda9      	ble.n	81d2 <_vfprintf_r+0x117a>
    827e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8280:	4659      	mov	r1, fp
    8282:	1c22      	adds	r2, r4, #0
    8284:	f003 fd28 	bl	bcd8 <__sprint_r>
    8288:	2800      	cmp	r0, #0
    828a:	d001      	beq.n	8290 <_vfprintf_r+0x1238>
    828c:	f7ff f8dc 	bl	7448 <_vfprintf_r+0x3f0>
    8290:	27ad      	movs	r7, #173	; 0xad
    8292:	00ff      	lsls	r7, r7, #3
    8294:	4b17      	ldr	r3, [pc, #92]	; (82f4 <_vfprintf_r+0x129c>)
    8296:	446f      	add	r7, sp
    8298:	683d      	ldr	r5, [r7, #0]
    829a:	446b      	add	r3, sp
    829c:	e799      	b.n	81d2 <_vfprintf_r+0x117a>
    829e:	1c1f      	adds	r7, r3, #0
    82a0:	f7ff f848 	bl	7334 <_vfprintf_r+0x2dc>
    82a4:	46bb      	mov	fp, r7
    82a6:	1c17      	adds	r7, r2, #0
    82a8:	2110      	movs	r1, #16
    82aa:	1c0a      	adds	r2, r1, #0
    82ac:	e771      	b.n	8192 <_vfprintf_r+0x113a>
    82ae:	490f      	ldr	r1, [pc, #60]	; (82ec <_vfprintf_r+0x1294>)
    82b0:	1c2f      	adds	r7, r5, #0
    82b2:	3708      	adds	r7, #8
    82b4:	4688      	mov	r8, r1
    82b6:	f7ff f81b 	bl	72f0 <_vfprintf_r+0x298>
    82ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    82bc:	4659      	mov	r1, fp
    82be:	1c22      	adds	r2, r4, #0
    82c0:	f003 fd0a 	bl	bcd8 <__sprint_r>
    82c4:	2800      	cmp	r0, #0
    82c6:	d001      	beq.n	82cc <_vfprintf_r+0x1274>
    82c8:	f7ff f8be 	bl	7448 <_vfprintf_r+0x3f0>
    82cc:	4f09      	ldr	r7, [pc, #36]	; (82f4 <_vfprintf_r+0x129c>)
    82ce:	446f      	add	r7, sp
    82d0:	f7ff fb46 	bl	7960 <_vfprintf_r+0x908>
    82d4:	46c0      	nop			; (mov r8, r8)
    82d6:	46c0      	nop			; (mov r8, r8)
	...
    82e0:	00000564 	.word	0x00000564
    82e4:	00000483 	.word	0x00000483
    82e8:	0000055a 	.word	0x0000055a
    82ec:	0000e524 	.word	0x0000e524
    82f0:	000004ec 	.word	0x000004ec
    82f4:	000004e4 	.word	0x000004e4
    82f8:	4bdc      	ldr	r3, [pc, #880]	; (866c <_vfprintf_r+0x1614>)
    82fa:	603b      	str	r3, [r7, #0]
    82fc:	2301      	movs	r3, #1
    82fe:	607b      	str	r3, [r7, #4]
    8300:	68a3      	ldr	r3, [r4, #8]
    8302:	3301      	adds	r3, #1
    8304:	60a3      	str	r3, [r4, #8]
    8306:	6863      	ldr	r3, [r4, #4]
    8308:	3301      	adds	r3, #1
    830a:	6063      	str	r3, [r4, #4]
    830c:	3708      	adds	r7, #8
    830e:	2b07      	cmp	r3, #7
    8310:	dd00      	ble.n	8314 <_vfprintf_r+0x12bc>
    8312:	e0ad      	b.n	8470 <_vfprintf_r+0x1418>
    8314:	2d00      	cmp	r5, #0
    8316:	d107      	bne.n	8328 <_vfprintf_r+0x12d0>
    8318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    831a:	2a00      	cmp	r2, #0
    831c:	d104      	bne.n	8328 <_vfprintf_r+0x12d0>
    831e:	9b07      	ldr	r3, [sp, #28]
    8320:	07db      	lsls	r3, r3, #31
    8322:	d401      	bmi.n	8328 <_vfprintf_r+0x12d0>
    8324:	f7ff f806 	bl	7334 <_vfprintf_r+0x2dc>
    8328:	981c      	ldr	r0, [sp, #112]	; 0x70
    832a:	68a3      	ldr	r3, [r4, #8]
    832c:	9e18      	ldr	r6, [sp, #96]	; 0x60
    832e:	181b      	adds	r3, r3, r0
    8330:	603e      	str	r6, [r7, #0]
    8332:	6078      	str	r0, [r7, #4]
    8334:	60a3      	str	r3, [r4, #8]
    8336:	6863      	ldr	r3, [r4, #4]
    8338:	3301      	adds	r3, #1
    833a:	6063      	str	r3, [r4, #4]
    833c:	3708      	adds	r7, #8
    833e:	2b07      	cmp	r3, #7
    8340:	dd00      	ble.n	8344 <_vfprintf_r+0x12ec>
    8342:	e0b5      	b.n	84b0 <_vfprintf_r+0x1458>
    8344:	426d      	negs	r5, r5
    8346:	2d00      	cmp	r5, #0
    8348:	dc00      	bgt.n	834c <_vfprintf_r+0x12f4>
    834a:	e0f4      	b.n	8536 <_vfprintf_r+0x14de>
    834c:	2d10      	cmp	r5, #16
    834e:	dc00      	bgt.n	8352 <_vfprintf_r+0x12fa>
    8350:	e25e      	b.n	8810 <_vfprintf_r+0x17b8>
    8352:	4bc7      	ldr	r3, [pc, #796]	; (8670 <_vfprintf_r+0x1618>)
    8354:	2010      	movs	r0, #16
    8356:	4698      	mov	r8, r3
    8358:	1c06      	adds	r6, r0, #0
    835a:	1c3b      	adds	r3, r7, #0
    835c:	4446      	add	r6, r8
    835e:	4681      	mov	r9, r0
    8360:	465f      	mov	r7, fp
    8362:	e003      	b.n	836c <_vfprintf_r+0x1314>
    8364:	3d10      	subs	r5, #16
    8366:	2d10      	cmp	r5, #16
    8368:	dc00      	bgt.n	836c <_vfprintf_r+0x1314>
    836a:	e0c9      	b.n	8500 <_vfprintf_r+0x14a8>
    836c:	68a2      	ldr	r2, [r4, #8]
    836e:	4649      	mov	r1, r9
    8370:	3210      	adds	r2, #16
    8372:	601e      	str	r6, [r3, #0]
    8374:	6059      	str	r1, [r3, #4]
    8376:	60a2      	str	r2, [r4, #8]
    8378:	6862      	ldr	r2, [r4, #4]
    837a:	3201      	adds	r2, #1
    837c:	6062      	str	r2, [r4, #4]
    837e:	3308      	adds	r3, #8
    8380:	2a07      	cmp	r2, #7
    8382:	ddef      	ble.n	8364 <_vfprintf_r+0x130c>
    8384:	9809      	ldr	r0, [sp, #36]	; 0x24
    8386:	1c39      	adds	r1, r7, #0
    8388:	1c22      	adds	r2, r4, #0
    838a:	f003 fca5 	bl	bcd8 <__sprint_r>
    838e:	2800      	cmp	r0, #0
    8390:	d001      	beq.n	8396 <_vfprintf_r+0x133e>
    8392:	f7ff fc09 	bl	7ba8 <_vfprintf_r+0xb50>
    8396:	4bb7      	ldr	r3, [pc, #732]	; (8674 <_vfprintf_r+0x161c>)
    8398:	446b      	add	r3, sp
    839a:	e7e3      	b.n	8364 <_vfprintf_r+0x130c>
    839c:	9809      	ldr	r0, [sp, #36]	; 0x24
    839e:	4659      	mov	r1, fp
    83a0:	1c22      	adds	r2, r4, #0
    83a2:	f003 fc99 	bl	bcd8 <__sprint_r>
    83a6:	2800      	cmp	r0, #0
    83a8:	d001      	beq.n	83ae <_vfprintf_r+0x1356>
    83aa:	f7ff f84d 	bl	7448 <_vfprintf_r+0x3f0>
    83ae:	4eb1      	ldr	r6, [pc, #708]	; (8674 <_vfprintf_r+0x161c>)
    83b0:	4fb1      	ldr	r7, [pc, #708]	; (8678 <_vfprintf_r+0x1620>)
    83b2:	446e      	add	r6, sp
    83b4:	446f      	add	r7, sp
    83b6:	46b1      	mov	r9, r6
    83b8:	f7ff fbc2 	bl	7b40 <_vfprintf_r+0xae8>
    83bc:	9b07      	ldr	r3, [sp, #28]
    83be:	3101      	adds	r1, #1
    83c0:	4303      	orrs	r3, r0
    83c2:	9108      	str	r1, [sp, #32]
    83c4:	9307      	str	r3, [sp, #28]
    83c6:	780b      	ldrb	r3, [r1, #0]
    83c8:	f7fe fec9 	bl	715e <_vfprintf_r+0x106>
    83cc:	980c      	ldr	r0, [sp, #48]	; 0x30
    83ce:	43c3      	mvns	r3, r0
    83d0:	17db      	asrs	r3, r3, #31
    83d2:	4018      	ands	r0, r3
    83d4:	4649      	mov	r1, r9
    83d6:	2300      	movs	r3, #0
    83d8:	900a      	str	r0, [sp, #40]	; 0x28
    83da:	780a      	ldrb	r2, [r1, #0]
    83dc:	970f      	str	r7, [sp, #60]	; 0x3c
    83de:	9314      	str	r3, [sp, #80]	; 0x50
    83e0:	9319      	str	r3, [sp, #100]	; 0x64
    83e2:	f7ff f8df 	bl	75a4 <_vfprintf_r+0x54c>
    83e6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    83e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    83ea:	683f      	ldr	r7, [r7, #0]
    83ec:	3104      	adds	r1, #4
    83ee:	1c3a      	adds	r2, r7, #0
    83f0:	1e53      	subs	r3, r2, #1
    83f2:	419a      	sbcs	r2, r3
    83f4:	9710      	str	r7, [sp, #64]	; 0x40
    83f6:	9011      	str	r0, [sp, #68]	; 0x44
    83f8:	910f      	str	r1, [sp, #60]	; 0x3c
    83fa:	1c03      	adds	r3, r0, #0
    83fc:	f7ff f943 	bl	7686 <_vfprintf_r+0x62e>
    8400:	9f16      	ldr	r7, [sp, #88]	; 0x58
    8402:	2f47      	cmp	r7, #71	; 0x47
    8404:	dd00      	ble.n	8408 <_vfprintf_r+0x13b0>
    8406:	e119      	b.n	863c <_vfprintf_r+0x15e4>
    8408:	489c      	ldr	r0, [pc, #624]	; (867c <_vfprintf_r+0x1624>)
    840a:	9013      	str	r0, [sp, #76]	; 0x4c
    840c:	9a07      	ldr	r2, [sp, #28]
    840e:	2380      	movs	r3, #128	; 0x80
    8410:	439a      	bics	r2, r3
    8412:	2603      	movs	r6, #3
    8414:	2700      	movs	r7, #0
    8416:	464b      	mov	r3, r9
    8418:	9207      	str	r2, [sp, #28]
    841a:	960a      	str	r6, [sp, #40]	; 0x28
    841c:	781a      	ldrb	r2, [r3, #0]
    841e:	960c      	str	r6, [sp, #48]	; 0x30
    8420:	9714      	str	r7, [sp, #80]	; 0x50
    8422:	9719      	str	r7, [sp, #100]	; 0x64
    8424:	f7ff f8be 	bl	75a4 <_vfprintf_r+0x54c>
    8428:	990f      	ldr	r1, [sp, #60]	; 0x3c
    842a:	680b      	ldr	r3, [r1, #0]
    842c:	3104      	adds	r1, #4
    842e:	9310      	str	r3, [sp, #64]	; 0x40
    8430:	17db      	asrs	r3, r3, #31
    8432:	9311      	str	r3, [sp, #68]	; 0x44
    8434:	910f      	str	r1, [sp, #60]	; 0x3c
    8436:	f7ff f86c 	bl	7512 <_vfprintf_r+0x4ba>
    843a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    843c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    843e:	680b      	ldr	r3, [r1, #0]
    8440:	3104      	adds	r1, #4
    8442:	601a      	str	r2, [r3, #0]
    8444:	910f      	str	r1, [sp, #60]	; 0x3c
    8446:	f7fe fe51 	bl	70ec <_vfprintf_r+0x94>
    844a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    844c:	6812      	ldr	r2, [r2, #0]
    844e:	9311      	str	r3, [sp, #68]	; 0x44
    8450:	9210      	str	r2, [sp, #64]	; 0x40
    8452:	e4d0      	b.n	7df6 <_vfprintf_r+0xd9e>
    8454:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8456:	6812      	ldr	r2, [r2, #0]
    8458:	9311      	str	r3, [sp, #68]	; 0x44
    845a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    845c:	3304      	adds	r3, #4
    845e:	9210      	str	r2, [sp, #64]	; 0x40
    8460:	930f      	str	r3, [sp, #60]	; 0x3c
    8462:	f7ff f8f8 	bl	7656 <_vfprintf_r+0x5fe>
    8466:	222d      	movs	r2, #45	; 0x2d
    8468:	464b      	mov	r3, r9
    846a:	701a      	strb	r2, [r3, #0]
    846c:	f7ff f8c7 	bl	75fe <_vfprintf_r+0x5a6>
    8470:	9809      	ldr	r0, [sp, #36]	; 0x24
    8472:	4659      	mov	r1, fp
    8474:	1c22      	adds	r2, r4, #0
    8476:	f003 fc2f 	bl	bcd8 <__sprint_r>
    847a:	2800      	cmp	r0, #0
    847c:	d001      	beq.n	8482 <_vfprintf_r+0x142a>
    847e:	f7fe ffe3 	bl	7448 <_vfprintf_r+0x3f0>
    8482:	21ad      	movs	r1, #173	; 0xad
    8484:	00c9      	lsls	r1, r1, #3
    8486:	4f7b      	ldr	r7, [pc, #492]	; (8674 <_vfprintf_r+0x161c>)
    8488:	4469      	add	r1, sp
    848a:	680d      	ldr	r5, [r1, #0]
    848c:	446f      	add	r7, sp
    848e:	e741      	b.n	8314 <_vfprintf_r+0x12bc>
    8490:	9809      	ldr	r0, [sp, #36]	; 0x24
    8492:	4659      	mov	r1, fp
    8494:	1c22      	adds	r2, r4, #0
    8496:	f003 fc1f 	bl	bcd8 <__sprint_r>
    849a:	2800      	cmp	r0, #0
    849c:	d001      	beq.n	84a2 <_vfprintf_r+0x144a>
    849e:	f7fe ffd3 	bl	7448 <_vfprintf_r+0x3f0>
    84a2:	4d74      	ldr	r5, [pc, #464]	; (8674 <_vfprintf_r+0x161c>)
    84a4:	4f74      	ldr	r7, [pc, #464]	; (8678 <_vfprintf_r+0x1620>)
    84a6:	446d      	add	r5, sp
    84a8:	446f      	add	r7, sp
    84aa:	46a9      	mov	r9, r5
    84ac:	f7ff fb48 	bl	7b40 <_vfprintf_r+0xae8>
    84b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    84b2:	4659      	mov	r1, fp
    84b4:	1c22      	adds	r2, r4, #0
    84b6:	f003 fc0f 	bl	bcd8 <__sprint_r>
    84ba:	2800      	cmp	r0, #0
    84bc:	d001      	beq.n	84c2 <_vfprintf_r+0x146a>
    84be:	f7fe ffc3 	bl	7448 <_vfprintf_r+0x3f0>
    84c2:	21ad      	movs	r1, #173	; 0xad
    84c4:	00c9      	lsls	r1, r1, #3
    84c6:	4f6b      	ldr	r7, [pc, #428]	; (8674 <_vfprintf_r+0x161c>)
    84c8:	4469      	add	r1, sp
    84ca:	680d      	ldr	r5, [r1, #0]
    84cc:	446f      	add	r7, sp
    84ce:	e739      	b.n	8344 <_vfprintf_r+0x12ec>
    84d0:	1c2f      	adds	r7, r5, #0
    84d2:	3708      	adds	r7, #8
    84d4:	46a9      	mov	r9, r5
    84d6:	f7ff fb33 	bl	7b40 <_vfprintf_r+0xae8>
    84da:	4869      	ldr	r0, [pc, #420]	; (8680 <_vfprintf_r+0x1628>)
    84dc:	9013      	str	r0, [sp, #76]	; 0x4c
    84de:	f7ff f895 	bl	760c <_vfprintf_r+0x5b4>
    84e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    84e4:	4659      	mov	r1, fp
    84e6:	1c22      	adds	r2, r4, #0
    84e8:	f003 fbf6 	bl	bcd8 <__sprint_r>
    84ec:	2800      	cmp	r0, #0
    84ee:	d001      	beq.n	84f4 <_vfprintf_r+0x149c>
    84f0:	f7fe ffaa 	bl	7448 <_vfprintf_r+0x3f0>
    84f4:	4b5f      	ldr	r3, [pc, #380]	; (8674 <_vfprintf_r+0x161c>)
    84f6:	446b      	add	r3, sp
    84f8:	f7ff fa4d 	bl	7996 <_vfprintf_r+0x93e>
    84fc:	1c3b      	adds	r3, r7, #0
    84fe:	e65e      	b.n	81be <_vfprintf_r+0x1166>
    8500:	46bb      	mov	fp, r7
    8502:	1c1f      	adds	r7, r3, #0
    8504:	2210      	movs	r2, #16
    8506:	1c13      	adds	r3, r2, #0
    8508:	4443      	add	r3, r8
    850a:	603b      	str	r3, [r7, #0]
    850c:	68a3      	ldr	r3, [r4, #8]
    850e:	18eb      	adds	r3, r5, r3
    8510:	607d      	str	r5, [r7, #4]
    8512:	60a3      	str	r3, [r4, #8]
    8514:	6863      	ldr	r3, [r4, #4]
    8516:	3301      	adds	r3, #1
    8518:	6063      	str	r3, [r4, #4]
    851a:	3708      	adds	r7, #8
    851c:	2b07      	cmp	r3, #7
    851e:	dd0a      	ble.n	8536 <_vfprintf_r+0x14de>
    8520:	9809      	ldr	r0, [sp, #36]	; 0x24
    8522:	4659      	mov	r1, fp
    8524:	1c22      	adds	r2, r4, #0
    8526:	f003 fbd7 	bl	bcd8 <__sprint_r>
    852a:	2800      	cmp	r0, #0
    852c:	d001      	beq.n	8532 <_vfprintf_r+0x14da>
    852e:	f7fe ff8b 	bl	7448 <_vfprintf_r+0x3f0>
    8532:	4f50      	ldr	r7, [pc, #320]	; (8674 <_vfprintf_r+0x161c>)
    8534:	446f      	add	r7, sp
    8536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8538:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    853a:	603b      	str	r3, [r7, #0]
    853c:	f7fe feee 	bl	731c <_vfprintf_r+0x2c4>
    8540:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8542:	f7fd fa9f 	bl	5a84 <strlen>
    8546:	43c3      	mvns	r3, r0
    8548:	17db      	asrs	r3, r3, #31
    854a:	900c      	str	r0, [sp, #48]	; 0x30
    854c:	464e      	mov	r6, r9
    854e:	4018      	ands	r0, r3
    8550:	970f      	str	r7, [sp, #60]	; 0x3c
    8552:	2700      	movs	r7, #0
    8554:	900a      	str	r0, [sp, #40]	; 0x28
    8556:	7832      	ldrb	r2, [r6, #0]
    8558:	9714      	str	r7, [sp, #80]	; 0x50
    855a:	9719      	str	r7, [sp, #100]	; 0x64
    855c:	f7ff f822 	bl	75a4 <_vfprintf_r+0x54c>
    8560:	4a43      	ldr	r2, [pc, #268]	; (8670 <_vfprintf_r+0x1618>)
    8562:	1c2b      	adds	r3, r5, #0
    8564:	3308      	adds	r3, #8
    8566:	4690      	mov	r8, r2
    8568:	f7fe fe50 	bl	720c <_vfprintf_r+0x1b4>
    856c:	9809      	ldr	r0, [sp, #36]	; 0x24
    856e:	4659      	mov	r1, fp
    8570:	1c22      	adds	r2, r4, #0
    8572:	f003 fbb1 	bl	bcd8 <__sprint_r>
    8576:	2800      	cmp	r0, #0
    8578:	d001      	beq.n	857e <_vfprintf_r+0x1526>
    857a:	f7fe ff65 	bl	7448 <_vfprintf_r+0x3f0>
    857e:	4f3d      	ldr	r7, [pc, #244]	; (8674 <_vfprintf_r+0x161c>)
    8580:	446f      	add	r7, sp
    8582:	f7ff fb59 	bl	7c38 <_vfprintf_r+0xbe0>
    8586:	9809      	ldr	r0, [sp, #36]	; 0x24
    8588:	4659      	mov	r1, fp
    858a:	1c22      	adds	r2, r4, #0
    858c:	f003 fba4 	bl	bcd8 <__sprint_r>
    8590:	2800      	cmp	r0, #0
    8592:	d001      	beq.n	8598 <_vfprintf_r+0x1540>
    8594:	f7fe ff58 	bl	7448 <_vfprintf_r+0x3f0>
    8598:	4936      	ldr	r1, [pc, #216]	; (8674 <_vfprintf_r+0x161c>)
    859a:	4f37      	ldr	r7, [pc, #220]	; (8678 <_vfprintf_r+0x1620>)
    859c:	4469      	add	r1, sp
    859e:	446f      	add	r7, sp
    85a0:	4689      	mov	r9, r1
    85a2:	f7ff facd 	bl	7b40 <_vfprintf_r+0xae8>
    85a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    85a8:	1ae3      	subs	r3, r4, r3
    85aa:	930c      	str	r3, [sp, #48]	; 0x30
    85ac:	f7fe fff0 	bl	7590 <_vfprintf_r+0x538>
    85b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    85b2:	4659      	mov	r1, fp
    85b4:	1c22      	adds	r2, r4, #0
    85b6:	f003 fb8f 	bl	bcd8 <__sprint_r>
    85ba:	2800      	cmp	r0, #0
    85bc:	d001      	beq.n	85c2 <_vfprintf_r+0x156a>
    85be:	f7fe ff43 	bl	7448 <_vfprintf_r+0x3f0>
    85c2:	27ad      	movs	r7, #173	; 0xad
    85c4:	00ff      	lsls	r7, r7, #3
    85c6:	446f      	add	r7, sp
    85c8:	6839      	ldr	r1, [r7, #0]
    85ca:	980e      	ldr	r0, [sp, #56]	; 0x38
    85cc:	4b29      	ldr	r3, [pc, #164]	; (8674 <_vfprintf_r+0x161c>)
    85ce:	1a41      	subs	r1, r0, r1
    85d0:	446b      	add	r3, sp
    85d2:	e618      	b.n	8206 <_vfprintf_r+0x11ae>
    85d4:	9809      	ldr	r0, [sp, #36]	; 0x24
    85d6:	4659      	mov	r1, fp
    85d8:	1c22      	adds	r2, r4, #0
    85da:	f003 fb7d 	bl	bcd8 <__sprint_r>
    85de:	2800      	cmp	r0, #0
    85e0:	d001      	beq.n	85e6 <_vfprintf_r+0x158e>
    85e2:	f7fe ff31 	bl	7448 <_vfprintf_r+0x3f0>
    85e6:	4b23      	ldr	r3, [pc, #140]	; (8674 <_vfprintf_r+0x161c>)
    85e8:	446b      	add	r3, sp
    85ea:	e5e8      	b.n	81be <_vfprintf_r+0x1166>
    85ec:	960c      	str	r6, [sp, #48]	; 0x30
    85ee:	2e06      	cmp	r6, #6
    85f0:	d90a      	bls.n	8608 <_vfprintf_r+0x15b0>
    85f2:	2106      	movs	r1, #6
    85f4:	910c      	str	r1, [sp, #48]	; 0x30
    85f6:	910a      	str	r1, [sp, #40]	; 0x28
    85f8:	4b22      	ldr	r3, [pc, #136]	; (8684 <_vfprintf_r+0x162c>)
    85fa:	2200      	movs	r2, #0
    85fc:	970f      	str	r7, [sp, #60]	; 0x3c
    85fe:	9214      	str	r2, [sp, #80]	; 0x50
    8600:	9219      	str	r2, [sp, #100]	; 0x64
    8602:	9313      	str	r3, [sp, #76]	; 0x4c
    8604:	f7fe fdc6 	bl	7194 <_vfprintf_r+0x13c>
    8608:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    860a:	43d3      	mvns	r3, r2
    860c:	17db      	asrs	r3, r3, #31
    860e:	401a      	ands	r2, r3
    8610:	920a      	str	r2, [sp, #40]	; 0x28
    8612:	e7f1      	b.n	85f8 <_vfprintf_r+0x15a0>
    8614:	9809      	ldr	r0, [sp, #36]	; 0x24
    8616:	4651      	mov	r1, sl
    8618:	f000 f986 	bl	8928 <__swsetup_r>
    861c:	2800      	cmp	r0, #0
    861e:	d001      	beq.n	8624 <_vfprintf_r+0x15cc>
    8620:	f7fe ff17 	bl	7452 <_vfprintf_r+0x3fa>
    8624:	4651      	mov	r1, sl
    8626:	898a      	ldrh	r2, [r1, #12]
    8628:	1c13      	adds	r3, r2, #0
    862a:	f7fe fd49 	bl	70c0 <_vfprintf_r+0x68>
    862e:	4e10      	ldr	r6, [pc, #64]	; (8670 <_vfprintf_r+0x1618>)
    8630:	46b0      	mov	r8, r6
    8632:	f7fe fec1 	bl	73b8 <_vfprintf_r+0x360>
    8636:	46b2      	mov	sl, r6
    8638:	2303      	movs	r3, #3
    863a:	e4a0      	b.n	7f7e <_vfprintf_r+0xf26>
    863c:	4912      	ldr	r1, [pc, #72]	; (8688 <_vfprintf_r+0x1630>)
    863e:	9113      	str	r1, [sp, #76]	; 0x4c
    8640:	e6e4      	b.n	840c <_vfprintf_r+0x13b4>
    8642:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8644:	990d      	ldr	r1, [sp, #52]	; 0x34
    8646:	6803      	ldr	r3, [r0, #0]
    8648:	3004      	adds	r0, #4
    864a:	6019      	str	r1, [r3, #0]
    864c:	900f      	str	r0, [sp, #60]	; 0x3c
    864e:	f7fe fd4d 	bl	70ec <_vfprintf_r+0x94>
    8652:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    8654:	43fb      	mvns	r3, r7
    8656:	17db      	asrs	r3, r3, #31
    8658:	222d      	movs	r2, #45	; 0x2d
    865a:	464e      	mov	r6, r9
    865c:	401f      	ands	r7, r3
    865e:	2000      	movs	r0, #0
    8660:	7032      	strb	r2, [r6, #0]
    8662:	970a      	str	r7, [sp, #40]	; 0x28
    8664:	9014      	str	r0, [sp, #80]	; 0x50
    8666:	f7fe ffa0 	bl	75aa <_vfprintf_r+0x552>
    866a:	46c0      	nop			; (mov r8, r8)
    866c:	0000ee00 	.word	0x0000ee00
    8670:	0000e524 	.word	0x0000e524
    8674:	000004e4 	.word	0x000004e4
    8678:	000004ec 	.word	0x000004ec
    867c:	0000edc8 	.word	0x0000edc8
    8680:	0000edc4 	.word	0x0000edc4
    8684:	0000edf8 	.word	0x0000edf8
    8688:	0000edcc 	.word	0x0000edcc
    868c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    868e:	2f66      	cmp	r7, #102	; 0x66
    8690:	d000      	beq.n	8694 <_vfprintf_r+0x163c>
    8692:	e07f      	b.n	8794 <_vfprintf_r+0x173c>
    8694:	23ad      	movs	r3, #173	; 0xad
    8696:	00db      	lsls	r3, r3, #3
    8698:	446b      	add	r3, sp
    869a:	681a      	ldr	r2, [r3, #0]
    869c:	920c      	str	r2, [sp, #48]	; 0x30
    869e:	2a00      	cmp	r2, #0
    86a0:	dc00      	bgt.n	86a4 <_vfprintf_r+0x164c>
    86a2:	e091      	b.n	87c8 <_vfprintf_r+0x1770>
    86a4:	2e00      	cmp	r6, #0
    86a6:	d102      	bne.n	86ae <_vfprintf_r+0x1656>
    86a8:	9f07      	ldr	r7, [sp, #28]
    86aa:	07ff      	lsls	r7, r7, #31
    86ac:	d502      	bpl.n	86b4 <_vfprintf_r+0x165c>
    86ae:	1c53      	adds	r3, r2, #1
    86b0:	199b      	adds	r3, r3, r6
    86b2:	930c      	str	r3, [sp, #48]	; 0x30
    86b4:	4646      	mov	r6, r8
    86b6:	9219      	str	r2, [sp, #100]	; 0x64
    86b8:	9616      	str	r6, [sp, #88]	; 0x58
    86ba:	e4f5      	b.n	80a8 <_vfprintf_r+0x1050>
    86bc:	20ac      	movs	r0, #172	; 0xac
    86be:	00c0      	lsls	r0, r0, #3
    86c0:	4468      	add	r0, sp
    86c2:	6803      	ldr	r3, [r0, #0]
    86c4:	429f      	cmp	r7, r3
    86c6:	d800      	bhi.n	86ca <_vfprintf_r+0x1672>
    86c8:	e494      	b.n	7ff4 <_vfprintf_r+0xf9c>
    86ca:	2230      	movs	r2, #48	; 0x30
    86cc:	21ac      	movs	r1, #172	; 0xac
    86ce:	00c9      	lsls	r1, r1, #3
    86d0:	701a      	strb	r2, [r3, #0]
    86d2:	4469      	add	r1, sp
    86d4:	3301      	adds	r3, #1
    86d6:	600b      	str	r3, [r1, #0]
    86d8:	429f      	cmp	r7, r3
    86da:	d8f7      	bhi.n	86cc <_vfprintf_r+0x1674>
    86dc:	1c3b      	adds	r3, r7, #0
    86de:	e489      	b.n	7ff4 <_vfprintf_r+0xf9c>
    86e0:	494f      	ldr	r1, [pc, #316]	; (8820 <_vfprintf_r+0x17c8>)
    86e2:	1c2b      	adds	r3, r5, #0
    86e4:	4688      	mov	r8, r1
    86e6:	3508      	adds	r5, #8
    86e8:	f7ff f9cd 	bl	7a86 <_vfprintf_r+0xa2e>
    86ec:	960a      	str	r6, [sp, #40]	; 0x28
    86ee:	970f      	str	r7, [sp, #60]	; 0x3c
    86f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    86f2:	464e      	mov	r6, r9
    86f4:	7832      	ldrb	r2, [r6, #0]
    86f6:	970c      	str	r7, [sp, #48]	; 0x30
    86f8:	9014      	str	r0, [sp, #80]	; 0x50
    86fa:	9019      	str	r0, [sp, #100]	; 0x64
    86fc:	f7fe ff52 	bl	75a4 <_vfprintf_r+0x54c>
    8700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8702:	429a      	cmp	r2, r3
    8704:	db21      	blt.n	874a <_vfprintf_r+0x16f2>
    8706:	9f07      	ldr	r7, [sp, #28]
    8708:	2667      	movs	r6, #103	; 0x67
    870a:	46b0      	mov	r8, r6
    870c:	07ff      	lsls	r7, r7, #31
    870e:	d5d1      	bpl.n	86b4 <_vfprintf_r+0x165c>
    8710:	1c50      	adds	r0, r2, #1
    8712:	900c      	str	r0, [sp, #48]	; 0x30
    8714:	e7ce      	b.n	86b4 <_vfprintf_r+0x165c>
    8716:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8718:	3b47      	subs	r3, #71	; 0x47
    871a:	2606      	movs	r6, #6
    871c:	930c      	str	r3, [sp, #48]	; 0x30
    871e:	e40b      	b.n	7f38 <_vfprintf_r+0xee0>
    8720:	2330      	movs	r3, #48	; 0x30
    8722:	4651      	mov	r1, sl
    8724:	18f6      	adds	r6, r6, r3
    8726:	708b      	strb	r3, [r1, #2]
    8728:	70ce      	strb	r6, [r1, #3]
    872a:	493e      	ldr	r1, [pc, #248]	; (8824 <_vfprintf_r+0x17cc>)
    872c:	4469      	add	r1, sp
    872e:	e4ac      	b.n	808a <_vfprintf_r+0x1032>
    8730:	981b      	ldr	r0, [sp, #108]	; 0x6c
    8732:	1c01      	adds	r1, r0, #0
    8734:	2080      	movs	r0, #128	; 0x80
    8736:	0600      	lsls	r0, r0, #24
    8738:	1809      	adds	r1, r1, r0
    873a:	222d      	movs	r2, #45	; 0x2d
    873c:	910a      	str	r1, [sp, #40]	; 0x28
    873e:	9214      	str	r2, [sp, #80]	; 0x50
    8740:	f7ff fc07 	bl	7f52 <_vfprintf_r+0xefa>
    8744:	46b2      	mov	sl, r6
    8746:	2302      	movs	r3, #2
    8748:	e419      	b.n	7f7e <_vfprintf_r+0xf26>
    874a:	2301      	movs	r3, #1
    874c:	2a00      	cmp	r2, #0
    874e:	dc01      	bgt.n	8754 <_vfprintf_r+0x16fc>
    8750:	18db      	adds	r3, r3, r3
    8752:	1a9b      	subs	r3, r3, r2
    8754:	990e      	ldr	r1, [sp, #56]	; 0x38
    8756:	18c9      	adds	r1, r1, r3
    8758:	2367      	movs	r3, #103	; 0x67
    875a:	910c      	str	r1, [sp, #48]	; 0x30
    875c:	4698      	mov	r8, r3
    875e:	e7a9      	b.n	86b4 <_vfprintf_r+0x165c>
    8760:	22ac      	movs	r2, #172	; 0xac
    8762:	00d2      	lsls	r2, r2, #3
    8764:	446a      	add	r2, sp
    8766:	6813      	ldr	r3, [r2, #0]
    8768:	e444      	b.n	7ff4 <_vfprintf_r+0xf9c>
    876a:	981a      	ldr	r0, [sp, #104]	; 0x68
    876c:	990a      	ldr	r1, [sp, #40]	; 0x28
    876e:	4b2b      	ldr	r3, [pc, #172]	; (881c <_vfprintf_r+0x17c4>)
    8770:	4a29      	ldr	r2, [pc, #164]	; (8818 <_vfprintf_r+0x17c0>)
    8772:	f005 fd25 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    8776:	2800      	cmp	r0, #0
    8778:	d000      	beq.n	877c <_vfprintf_r+0x1724>
    877a:	e428      	b.n	7fce <_vfprintf_r+0xf76>
    877c:	20ad      	movs	r0, #173	; 0xad
    877e:	2301      	movs	r3, #1
    8780:	4652      	mov	r2, sl
    8782:	00c0      	lsls	r0, r0, #3
    8784:	1a9b      	subs	r3, r3, r2
    8786:	4468      	add	r0, sp
    8788:	6003      	str	r3, [r0, #0]
    878a:	e420      	b.n	7fce <_vfprintf_r+0xf76>
    878c:	232d      	movs	r3, #45	; 0x2d
    878e:	4276      	negs	r6, r6
    8790:	7053      	strb	r3, [r2, #1]
    8792:	e457      	b.n	8044 <_vfprintf_r+0xfec>
    8794:	20ad      	movs	r0, #173	; 0xad
    8796:	00c0      	lsls	r0, r0, #3
    8798:	4468      	add	r0, sp
    879a:	6802      	ldr	r2, [r0, #0]
    879c:	e441      	b.n	8022 <_vfprintf_r+0xfca>
    879e:	4f20      	ldr	r7, [pc, #128]	; (8820 <_vfprintf_r+0x17c8>)
    87a0:	46b8      	mov	r8, r7
    87a2:	f7ff fb96 	bl	7ed2 <_vfprintf_r+0xe7a>
    87a6:	9f07      	ldr	r7, [sp, #28]
    87a8:	2301      	movs	r3, #1
    87aa:	401f      	ands	r7, r3
    87ac:	9719      	str	r7, [sp, #100]	; 0x64
    87ae:	d100      	bne.n	87b2 <_vfprintf_r+0x175a>
    87b0:	e47a      	b.n	80a8 <_vfprintf_r+0x1050>
    87b2:	e474      	b.n	809e <_vfprintf_r+0x1046>
    87b4:	481a      	ldr	r0, [pc, #104]	; (8820 <_vfprintf_r+0x17c8>)
    87b6:	1c1f      	adds	r7, r3, #0
    87b8:	3708      	adds	r7, #8
    87ba:	4680      	mov	r8, r0
    87bc:	e4e7      	b.n	818e <_vfprintf_r+0x1136>
    87be:	4a18      	ldr	r2, [pc, #96]	; (8820 <_vfprintf_r+0x17c8>)
    87c0:	1c3b      	adds	r3, r7, #0
    87c2:	3308      	adds	r3, #8
    87c4:	4690      	mov	r8, r2
    87c6:	e4ec      	b.n	81a2 <_vfprintf_r+0x114a>
    87c8:	2e00      	cmp	r6, #0
    87ca:	d105      	bne.n	87d8 <_vfprintf_r+0x1780>
    87cc:	9907      	ldr	r1, [sp, #28]
    87ce:	2001      	movs	r0, #1
    87d0:	900c      	str	r0, [sp, #48]	; 0x30
    87d2:	4201      	tst	r1, r0
    87d4:	d100      	bne.n	87d8 <_vfprintf_r+0x1780>
    87d6:	e76d      	b.n	86b4 <_vfprintf_r+0x165c>
    87d8:	3602      	adds	r6, #2
    87da:	960c      	str	r6, [sp, #48]	; 0x30
    87dc:	e76a      	b.n	86b4 <_vfprintf_r+0x165c>
    87de:	4e10      	ldr	r6, [pc, #64]	; (8820 <_vfprintf_r+0x17c8>)
    87e0:	1c1f      	adds	r7, r3, #0
    87e2:	3708      	adds	r7, #8
    87e4:	46b0      	mov	r8, r6
    87e6:	e55f      	b.n	82a8 <_vfprintf_r+0x1250>
    87e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    87ea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    87ec:	680e      	ldr	r6, [r1, #0]
    87ee:	3704      	adds	r7, #4
    87f0:	2e00      	cmp	r6, #0
    87f2:	db01      	blt.n	87f8 <_vfprintf_r+0x17a0>
    87f4:	f7fe ffcc 	bl	7790 <_vfprintf_r+0x738>
    87f8:	9e08      	ldr	r6, [sp, #32]
    87fa:	7833      	ldrb	r3, [r6, #0]
    87fc:	2601      	movs	r6, #1
    87fe:	970f      	str	r7, [sp, #60]	; 0x3c
    8800:	4276      	negs	r6, r6
    8802:	f7fe fcac 	bl	715e <_vfprintf_r+0x106>
    8806:	2301      	movs	r3, #1
    8808:	425b      	negs	r3, r3
    880a:	930d      	str	r3, [sp, #52]	; 0x34
    880c:	f7fe fe5f 	bl	74ce <_vfprintf_r+0x476>
    8810:	4a03      	ldr	r2, [pc, #12]	; (8820 <_vfprintf_r+0x17c8>)
    8812:	4690      	mov	r8, r2
    8814:	e676      	b.n	8504 <_vfprintf_r+0x14ac>
    8816:	46c0      	nop			; (mov r8, r8)
	...
    8820:	0000e524 	.word	0x0000e524
    8824:	0000055c 	.word	0x0000055c

00008828 <vfprintf>:
    8828:	b538      	push	{r3, r4, r5, lr}
    882a:	1c13      	adds	r3, r2, #0
    882c:	4a05      	ldr	r2, [pc, #20]	; (8844 <vfprintf+0x1c>)
    882e:	1c05      	adds	r5, r0, #0
    8830:	1c0c      	adds	r4, r1, #0
    8832:	6810      	ldr	r0, [r2, #0]
    8834:	1c29      	adds	r1, r5, #0
    8836:	1c22      	adds	r2, r4, #0
    8838:	f7fe fc0e 	bl	7058 <_vfprintf_r>
    883c:	bc38      	pop	{r3, r4, r5}
    883e:	bc02      	pop	{r1}
    8840:	4708      	bx	r1
    8842:	46c0      	nop			; (mov r8, r8)
    8844:	40000000 	.word	0x40000000

00008848 <__swbuf_r>:
    8848:	b570      	push	{r4, r5, r6, lr}
    884a:	1c06      	adds	r6, r0, #0
    884c:	1c0d      	adds	r5, r1, #0
    884e:	1c14      	adds	r4, r2, #0
    8850:	2800      	cmp	r0, #0
    8852:	d002      	beq.n	885a <__swbuf_r+0x12>
    8854:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8856:	2b00      	cmp	r3, #0
    8858:	d034      	beq.n	88c4 <__swbuf_r+0x7c>
    885a:	69a3      	ldr	r3, [r4, #24]
    885c:	89a2      	ldrh	r2, [r4, #12]
    885e:	60a3      	str	r3, [r4, #8]
    8860:	1c13      	adds	r3, r2, #0
    8862:	0711      	lsls	r1, r2, #28
    8864:	d524      	bpl.n	88b0 <__swbuf_r+0x68>
    8866:	6921      	ldr	r1, [r4, #16]
    8868:	2900      	cmp	r1, #0
    886a:	d021      	beq.n	88b0 <__swbuf_r+0x68>
    886c:	2080      	movs	r0, #128	; 0x80
    886e:	0180      	lsls	r0, r0, #6
    8870:	4203      	tst	r3, r0
    8872:	d016      	beq.n	88a2 <__swbuf_r+0x5a>
    8874:	6823      	ldr	r3, [r4, #0]
    8876:	1a5a      	subs	r2, r3, r1
    8878:	6961      	ldr	r1, [r4, #20]
    887a:	428a      	cmp	r2, r1
    887c:	da31      	bge.n	88e2 <__swbuf_r+0x9a>
    887e:	3201      	adds	r2, #1
    8880:	68a1      	ldr	r1, [r4, #8]
    8882:	062d      	lsls	r5, r5, #24
    8884:	0e2d      	lsrs	r5, r5, #24
    8886:	3901      	subs	r1, #1
    8888:	60a1      	str	r1, [r4, #8]
    888a:	701d      	strb	r5, [r3, #0]
    888c:	3301      	adds	r3, #1
    888e:	6023      	str	r3, [r4, #0]
    8890:	6963      	ldr	r3, [r4, #20]
    8892:	4293      	cmp	r3, r2
    8894:	d01c      	beq.n	88d0 <__swbuf_r+0x88>
    8896:	2d0a      	cmp	r5, #10
    8898:	d017      	beq.n	88ca <__swbuf_r+0x82>
    889a:	1c28      	adds	r0, r5, #0
    889c:	bc70      	pop	{r4, r5, r6}
    889e:	bc02      	pop	{r1}
    88a0:	4708      	bx	r1
    88a2:	4302      	orrs	r2, r0
    88a4:	81a2      	strh	r2, [r4, #12]
    88a6:	4b18      	ldr	r3, [pc, #96]	; (8908 <__swbuf_r+0xc0>)
    88a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    88aa:	4013      	ands	r3, r2
    88ac:	6663      	str	r3, [r4, #100]	; 0x64
    88ae:	e7e1      	b.n	8874 <__swbuf_r+0x2c>
    88b0:	1c30      	adds	r0, r6, #0
    88b2:	1c21      	adds	r1, r4, #0
    88b4:	f000 f838 	bl	8928 <__swsetup_r>
    88b8:	2800      	cmp	r0, #0
    88ba:	d11b      	bne.n	88f4 <__swbuf_r+0xac>
    88bc:	89a2      	ldrh	r2, [r4, #12]
    88be:	6921      	ldr	r1, [r4, #16]
    88c0:	1c13      	adds	r3, r2, #0
    88c2:	e7d3      	b.n	886c <__swbuf_r+0x24>
    88c4:	f7fc f9ce 	bl	4c64 <__sinit>
    88c8:	e7c7      	b.n	885a <__swbuf_r+0x12>
    88ca:	89a3      	ldrh	r3, [r4, #12]
    88cc:	07da      	lsls	r2, r3, #31
    88ce:	d5e4      	bpl.n	889a <__swbuf_r+0x52>
    88d0:	1c30      	adds	r0, r6, #0
    88d2:	1c21      	adds	r1, r4, #0
    88d4:	f7fc f8d2 	bl	4a7c <_fflush_r>
    88d8:	2800      	cmp	r0, #0
    88da:	d0de      	beq.n	889a <__swbuf_r+0x52>
    88dc:	2501      	movs	r5, #1
    88de:	426d      	negs	r5, r5
    88e0:	e7db      	b.n	889a <__swbuf_r+0x52>
    88e2:	1c30      	adds	r0, r6, #0
    88e4:	1c21      	adds	r1, r4, #0
    88e6:	f7fc f8c9 	bl	4a7c <_fflush_r>
    88ea:	2800      	cmp	r0, #0
    88ec:	d1f6      	bne.n	88dc <__swbuf_r+0x94>
    88ee:	6823      	ldr	r3, [r4, #0]
    88f0:	2201      	movs	r2, #1
    88f2:	e7c5      	b.n	8880 <__swbuf_r+0x38>
    88f4:	89a3      	ldrh	r3, [r4, #12]
    88f6:	2240      	movs	r2, #64	; 0x40
    88f8:	4313      	orrs	r3, r2
    88fa:	81a3      	strh	r3, [r4, #12]
    88fc:	2501      	movs	r5, #1
    88fe:	2309      	movs	r3, #9
    8900:	6033      	str	r3, [r6, #0]
    8902:	426d      	negs	r5, r5
    8904:	e7c9      	b.n	889a <__swbuf_r+0x52>
    8906:	46c0      	nop			; (mov r8, r8)
    8908:	ffffdfff 	.word	0xffffdfff

0000890c <__swbuf>:
    890c:	b508      	push	{r3, lr}
    890e:	1c0a      	adds	r2, r1, #0
    8910:	4904      	ldr	r1, [pc, #16]	; (8924 <__swbuf+0x18>)
    8912:	1c03      	adds	r3, r0, #0
    8914:	6808      	ldr	r0, [r1, #0]
    8916:	1c19      	adds	r1, r3, #0
    8918:	f7ff ff96 	bl	8848 <__swbuf_r>
    891c:	bc08      	pop	{r3}
    891e:	bc02      	pop	{r1}
    8920:	4708      	bx	r1
    8922:	46c0      	nop			; (mov r8, r8)
    8924:	40000000 	.word	0x40000000

00008928 <__swsetup_r>:
    8928:	b538      	push	{r3, r4, r5, lr}
    892a:	4b2e      	ldr	r3, [pc, #184]	; (89e4 <__swsetup_r+0xbc>)
    892c:	1c05      	adds	r5, r0, #0
    892e:	6818      	ldr	r0, [r3, #0]
    8930:	1c0c      	adds	r4, r1, #0
    8932:	2800      	cmp	r0, #0
    8934:	d002      	beq.n	893c <__swsetup_r+0x14>
    8936:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8938:	2b00      	cmp	r3, #0
    893a:	d020      	beq.n	897e <__swsetup_r+0x56>
    893c:	89a1      	ldrh	r1, [r4, #12]
    893e:	1c0a      	adds	r2, r1, #0
    8940:	1c0b      	adds	r3, r1, #0
    8942:	0708      	lsls	r0, r1, #28
    8944:	d52c      	bpl.n	89a0 <__swsetup_r+0x78>
    8946:	6922      	ldr	r2, [r4, #16]
    8948:	2a00      	cmp	r2, #0
    894a:	d01b      	beq.n	8984 <__swsetup_r+0x5c>
    894c:	2101      	movs	r1, #1
    894e:	4019      	ands	r1, r3
    8950:	d00a      	beq.n	8968 <__swsetup_r+0x40>
    8952:	2300      	movs	r3, #0
    8954:	60a3      	str	r3, [r4, #8]
    8956:	6963      	ldr	r3, [r4, #20]
    8958:	2000      	movs	r0, #0
    895a:	425b      	negs	r3, r3
    895c:	61a3      	str	r3, [r4, #24]
    895e:	4282      	cmp	r2, r0
    8960:	d009      	beq.n	8976 <__swsetup_r+0x4e>
    8962:	bc38      	pop	{r3, r4, r5}
    8964:	bc02      	pop	{r1}
    8966:	4708      	bx	r1
    8968:	0798      	lsls	r0, r3, #30
    896a:	d400      	bmi.n	896e <__swsetup_r+0x46>
    896c:	6961      	ldr	r1, [r4, #20]
    896e:	2000      	movs	r0, #0
    8970:	60a1      	str	r1, [r4, #8]
    8972:	4282      	cmp	r2, r0
    8974:	d1f5      	bne.n	8962 <__swsetup_r+0x3a>
    8976:	89a0      	ldrh	r0, [r4, #12]
    8978:	0600      	lsls	r0, r0, #24
    897a:	17c0      	asrs	r0, r0, #31
    897c:	e7f1      	b.n	8962 <__swsetup_r+0x3a>
    897e:	f7fc f971 	bl	4c64 <__sinit>
    8982:	e7db      	b.n	893c <__swsetup_r+0x14>
    8984:	20a0      	movs	r0, #160	; 0xa0
    8986:	0080      	lsls	r0, r0, #2
    8988:	2180      	movs	r1, #128	; 0x80
    898a:	4018      	ands	r0, r3
    898c:	0089      	lsls	r1, r1, #2
    898e:	4288      	cmp	r0, r1
    8990:	d0dc      	beq.n	894c <__swsetup_r+0x24>
    8992:	1c28      	adds	r0, r5, #0
    8994:	1c21      	adds	r1, r4, #0
    8996:	f001 fabb 	bl	9f10 <__smakebuf_r>
    899a:	89a3      	ldrh	r3, [r4, #12]
    899c:	6922      	ldr	r2, [r4, #16]
    899e:	e7d5      	b.n	894c <__swsetup_r+0x24>
    89a0:	06c8      	lsls	r0, r1, #27
    89a2:	d506      	bpl.n	89b2 <__swsetup_r+0x8a>
    89a4:	0748      	lsls	r0, r1, #29
    89a6:	d407      	bmi.n	89b8 <__swsetup_r+0x90>
    89a8:	6922      	ldr	r2, [r4, #16]
    89aa:	2308      	movs	r3, #8
    89ac:	430b      	orrs	r3, r1
    89ae:	81a3      	strh	r3, [r4, #12]
    89b0:	e7ca      	b.n	8948 <__swsetup_r+0x20>
    89b2:	2001      	movs	r0, #1
    89b4:	4240      	negs	r0, r0
    89b6:	e7d4      	b.n	8962 <__swsetup_r+0x3a>
    89b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    89ba:	2900      	cmp	r1, #0
    89bc:	d009      	beq.n	89d2 <__swsetup_r+0xaa>
    89be:	1c23      	adds	r3, r4, #0
    89c0:	3340      	adds	r3, #64	; 0x40
    89c2:	4299      	cmp	r1, r3
    89c4:	d003      	beq.n	89ce <__swsetup_r+0xa6>
    89c6:	1c28      	adds	r0, r5, #0
    89c8:	f7fc fa8a 	bl	4ee0 <_free_r>
    89cc:	89a2      	ldrh	r2, [r4, #12]
    89ce:	2300      	movs	r3, #0
    89d0:	6323      	str	r3, [r4, #48]	; 0x30
    89d2:	2324      	movs	r3, #36	; 0x24
    89d4:	1c11      	adds	r1, r2, #0
    89d6:	6922      	ldr	r2, [r4, #16]
    89d8:	4399      	bics	r1, r3
    89da:	3b24      	subs	r3, #36	; 0x24
    89dc:	6063      	str	r3, [r4, #4]
    89de:	6022      	str	r2, [r4, #0]
    89e0:	e7e3      	b.n	89aa <__swsetup_r+0x82>
    89e2:	46c0      	nop			; (mov r8, r8)
    89e4:	40000000 	.word	0x40000000

000089e8 <quorem>:
    89e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    89ea:	465f      	mov	r7, fp
    89ec:	4656      	mov	r6, sl
    89ee:	464d      	mov	r5, r9
    89f0:	4644      	mov	r4, r8
    89f2:	b4f0      	push	{r4, r5, r6, r7}
    89f4:	6902      	ldr	r2, [r0, #16]
    89f6:	690b      	ldr	r3, [r1, #16]
    89f8:	b083      	sub	sp, #12
    89fa:	1c06      	adds	r6, r0, #0
    89fc:	2000      	movs	r0, #0
    89fe:	9100      	str	r1, [sp, #0]
    8a00:	4681      	mov	r9, r0
    8a02:	4293      	cmp	r3, r2
    8a04:	dd00      	ble.n	8a08 <quorem+0x20>
    8a06:	e096      	b.n	8b36 <quorem+0x14e>
    8a08:	1e5d      	subs	r5, r3, #1
    8a0a:	3303      	adds	r3, #3
    8a0c:	009b      	lsls	r3, r3, #2
    8a0e:	18ca      	adds	r2, r1, r3
    8a10:	1c0c      	adds	r4, r1, #0
    8a12:	1d11      	adds	r1, r2, #4
    8a14:	4688      	mov	r8, r1
    8a16:	6851      	ldr	r1, [r2, #4]
    8a18:	18f3      	adds	r3, r6, r3
    8a1a:	2714      	movs	r7, #20
    8a1c:	19bf      	adds	r7, r7, r6
    8a1e:	3101      	adds	r1, #1
    8a20:	6858      	ldr	r0, [r3, #4]
    8a22:	9701      	str	r7, [sp, #4]
    8a24:	f005 fb7a 	bl	e11c <____aeabi_uidiv_from_thumb>
    8a28:	3414      	adds	r4, #20
    8a2a:	1c07      	adds	r7, r0, #0
    8a2c:	4548      	cmp	r0, r9
    8a2e:	d041      	beq.n	8ab4 <quorem+0xcc>
    8a30:	1c29      	adds	r1, r5, #0
    8a32:	9b01      	ldr	r3, [sp, #4]
    8a34:	464d      	mov	r5, r9
    8a36:	46b3      	mov	fp, r6
    8a38:	1c22      	adds	r2, r4, #0
    8a3a:	464e      	mov	r6, r9
    8a3c:	468a      	mov	sl, r1
    8a3e:	46a1      	mov	r9, r4
    8a40:	ca01      	ldmia	r2!, {r0}
    8a42:	0404      	lsls	r4, r0, #16
    8a44:	0c24      	lsrs	r4, r4, #16
    8a46:	437c      	muls	r4, r7
    8a48:	0c01      	lsrs	r1, r0, #16
    8a4a:	4379      	muls	r1, r7
    8a4c:	6818      	ldr	r0, [r3, #0]
    8a4e:	0400      	lsls	r0, r0, #16
    8a50:	1934      	adds	r4, r6, r4
    8a52:	0c00      	lsrs	r0, r0, #16
    8a54:	0c26      	lsrs	r6, r4, #16
    8a56:	4684      	mov	ip, r0
    8a58:	0424      	lsls	r4, r4, #16
    8a5a:	4465      	add	r5, ip
    8a5c:	0c24      	lsrs	r4, r4, #16
    8a5e:	1b2c      	subs	r4, r5, r4
    8a60:	1871      	adds	r1, r6, r1
    8a62:	681d      	ldr	r5, [r3, #0]
    8a64:	0c0e      	lsrs	r6, r1, #16
    8a66:	0409      	lsls	r1, r1, #16
    8a68:	0c28      	lsrs	r0, r5, #16
    8a6a:	0c09      	lsrs	r1, r1, #16
    8a6c:	1425      	asrs	r5, r4, #16
    8a6e:	1a40      	subs	r0, r0, r1
    8a70:	1940      	adds	r0, r0, r5
    8a72:	0424      	lsls	r4, r4, #16
    8a74:	1405      	asrs	r5, r0, #16
    8a76:	0c24      	lsrs	r4, r4, #16
    8a78:	0400      	lsls	r0, r0, #16
    8a7a:	4320      	orrs	r0, r4
    8a7c:	c301      	stmia	r3!, {r0}
    8a7e:	4590      	cmp	r8, r2
    8a80:	d2de      	bcs.n	8a40 <quorem+0x58>
    8a82:	4655      	mov	r5, sl
    8a84:	1d2b      	adds	r3, r5, #4
    8a86:	465e      	mov	r6, fp
    8a88:	009b      	lsls	r3, r3, #2
    8a8a:	18f3      	adds	r3, r6, r3
    8a8c:	685a      	ldr	r2, [r3, #4]
    8a8e:	464c      	mov	r4, r9
    8a90:	2a00      	cmp	r2, #0
    8a92:	d10f      	bne.n	8ab4 <quorem+0xcc>
    8a94:	9801      	ldr	r0, [sp, #4]
    8a96:	4298      	cmp	r0, r3
    8a98:	d20b      	bcs.n	8ab2 <quorem+0xca>
    8a9a:	681a      	ldr	r2, [r3, #0]
    8a9c:	2a00      	cmp	r2, #0
    8a9e:	d108      	bne.n	8ab2 <quorem+0xca>
    8aa0:	1c01      	adds	r1, r0, #0
    8aa2:	e002      	b.n	8aaa <quorem+0xc2>
    8aa4:	681a      	ldr	r2, [r3, #0]
    8aa6:	2a00      	cmp	r2, #0
    8aa8:	d103      	bne.n	8ab2 <quorem+0xca>
    8aaa:	3b04      	subs	r3, #4
    8aac:	3d01      	subs	r5, #1
    8aae:	4299      	cmp	r1, r3
    8ab0:	d3f8      	bcc.n	8aa4 <quorem+0xbc>
    8ab2:	6135      	str	r5, [r6, #16]
    8ab4:	1c30      	adds	r0, r6, #0
    8ab6:	9900      	ldr	r1, [sp, #0]
    8ab8:	f001 fde2 	bl	a680 <__mcmp>
    8abc:	2800      	cmp	r0, #0
    8abe:	db39      	blt.n	8b34 <quorem+0x14c>
    8ac0:	2100      	movs	r1, #0
    8ac2:	1c2a      	adds	r2, r5, #0
    8ac4:	3701      	adds	r7, #1
    8ac6:	1c0d      	adds	r5, r1, #0
    8ac8:	9b01      	ldr	r3, [sp, #4]
    8aca:	1c31      	adds	r1, r6, #0
    8acc:	46ba      	mov	sl, r7
    8ace:	4646      	mov	r6, r8
    8ad0:	4694      	mov	ip, r2
    8ad2:	4688      	mov	r8, r1
    8ad4:	6819      	ldr	r1, [r3, #0]
    8ad6:	cc01      	ldmia	r4!, {r0}
    8ad8:	040a      	lsls	r2, r1, #16
    8ada:	0c12      	lsrs	r2, r2, #16
    8adc:	4691      	mov	r9, r2
    8ade:	0402      	lsls	r2, r0, #16
    8ae0:	0c12      	lsrs	r2, r2, #16
    8ae2:	464f      	mov	r7, r9
    8ae4:	1aba      	subs	r2, r7, r2
    8ae6:	1952      	adds	r2, r2, r5
    8ae8:	0c09      	lsrs	r1, r1, #16
    8aea:	0c00      	lsrs	r0, r0, #16
    8aec:	1415      	asrs	r5, r2, #16
    8aee:	1a09      	subs	r1, r1, r0
    8af0:	1949      	adds	r1, r1, r5
    8af2:	0412      	lsls	r2, r2, #16
    8af4:	140d      	asrs	r5, r1, #16
    8af6:	0c12      	lsrs	r2, r2, #16
    8af8:	0409      	lsls	r1, r1, #16
    8afa:	4311      	orrs	r1, r2
    8afc:	c302      	stmia	r3!, {r1}
    8afe:	42a6      	cmp	r6, r4
    8b00:	d2e8      	bcs.n	8ad4 <quorem+0xec>
    8b02:	4665      	mov	r5, ip
    8b04:	1d2b      	adds	r3, r5, #4
    8b06:	4646      	mov	r6, r8
    8b08:	009b      	lsls	r3, r3, #2
    8b0a:	18f3      	adds	r3, r6, r3
    8b0c:	685a      	ldr	r2, [r3, #4]
    8b0e:	4657      	mov	r7, sl
    8b10:	2a00      	cmp	r2, #0
    8b12:	d10f      	bne.n	8b34 <quorem+0x14c>
    8b14:	9801      	ldr	r0, [sp, #4]
    8b16:	4298      	cmp	r0, r3
    8b18:	d20b      	bcs.n	8b32 <quorem+0x14a>
    8b1a:	681a      	ldr	r2, [r3, #0]
    8b1c:	2a00      	cmp	r2, #0
    8b1e:	d108      	bne.n	8b32 <quorem+0x14a>
    8b20:	1c01      	adds	r1, r0, #0
    8b22:	e002      	b.n	8b2a <quorem+0x142>
    8b24:	681a      	ldr	r2, [r3, #0]
    8b26:	2a00      	cmp	r2, #0
    8b28:	d103      	bne.n	8b32 <quorem+0x14a>
    8b2a:	3b04      	subs	r3, #4
    8b2c:	3d01      	subs	r5, #1
    8b2e:	4299      	cmp	r1, r3
    8b30:	d3f8      	bcc.n	8b24 <quorem+0x13c>
    8b32:	6135      	str	r5, [r6, #16]
    8b34:	46b9      	mov	r9, r7
    8b36:	b003      	add	sp, #12
    8b38:	4648      	mov	r0, r9
    8b3a:	bc3c      	pop	{r2, r3, r4, r5}
    8b3c:	4690      	mov	r8, r2
    8b3e:	4699      	mov	r9, r3
    8b40:	46a2      	mov	sl, r4
    8b42:	46ab      	mov	fp, r5
    8b44:	bcf0      	pop	{r4, r5, r6, r7}
    8b46:	bc02      	pop	{r1}
    8b48:	4708      	bx	r1
    8b4a:	46c0      	nop			; (mov r8, r8)

00008b4c <_dtoa_r>:
    8b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b4e:	465f      	mov	r7, fp
    8b50:	4656      	mov	r6, sl
    8b52:	464d      	mov	r5, r9
    8b54:	4644      	mov	r4, r8
    8b56:	b4f0      	push	{r4, r5, r6, r7}
    8b58:	1c04      	adds	r4, r0, #0
    8b5a:	b09d      	sub	sp, #116	; 0x74
    8b5c:	9829      	ldr	r0, [sp, #164]	; 0xa4
    8b5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    8b60:	4680      	mov	r8, r0
    8b62:	1c16      	adds	r6, r2, #0
    8b64:	1c1f      	adds	r7, r3, #0
    8b66:	2900      	cmp	r1, #0
    8b68:	d009      	beq.n	8b7e <_dtoa_r+0x32>
    8b6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8b6c:	2201      	movs	r2, #1
    8b6e:	409a      	lsls	r2, r3
    8b70:	604b      	str	r3, [r1, #4]
    8b72:	608a      	str	r2, [r1, #8]
    8b74:	1c20      	adds	r0, r4, #0
    8b76:	f001 fafd 	bl	a174 <_Bfree>
    8b7a:	2300      	movs	r3, #0
    8b7c:	6423      	str	r3, [r4, #64]	; 0x40
    8b7e:	1e3d      	subs	r5, r7, #0
    8b80:	db3e      	blt.n	8c00 <_dtoa_r+0xb4>
    8b82:	2300      	movs	r3, #0
    8b84:	4642      	mov	r2, r8
    8b86:	6013      	str	r3, [r2, #0]
    8b88:	4bbb      	ldr	r3, [pc, #748]	; (8e78 <_dtoa_r+0x32c>)
    8b8a:	1c2a      	adds	r2, r5, #0
    8b8c:	401a      	ands	r2, r3
    8b8e:	429a      	cmp	r2, r3
    8b90:	d024      	beq.n	8bdc <_dtoa_r+0x90>
    8b92:	2301      	movs	r3, #1
    8b94:	4698      	mov	r8, r3
    8b96:	1c39      	adds	r1, r7, #0
    8b98:	4bac      	ldr	r3, [pc, #688]	; (8e4c <_dtoa_r+0x300>)
    8b9a:	4aab      	ldr	r2, [pc, #684]	; (8e48 <_dtoa_r+0x2fc>)
    8b9c:	1c30      	adds	r0, r6, #0
    8b9e:	9602      	str	r6, [sp, #8]
    8ba0:	9703      	str	r7, [sp, #12]
    8ba2:	f005 fb0d 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    8ba6:	4243      	negs	r3, r0
    8ba8:	4158      	adcs	r0, r3
    8baa:	4240      	negs	r0, r0
    8bac:	4641      	mov	r1, r8
    8bae:	4001      	ands	r1, r0
    8bb0:	060b      	lsls	r3, r1, #24
    8bb2:	2b00      	cmp	r3, #0
    8bb4:	d12b      	bne.n	8c0e <_dtoa_r+0xc2>
    8bb6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    8bb8:	3301      	adds	r3, #1
    8bba:	6013      	str	r3, [r2, #0]
    8bbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    8bbe:	2b00      	cmp	r3, #0
    8bc0:	d100      	bne.n	8bc4 <_dtoa_r+0x78>
    8bc2:	e1f7      	b.n	8fb4 <_dtoa_r+0x468>
    8bc4:	48ad      	ldr	r0, [pc, #692]	; (8e7c <_dtoa_r+0x330>)
    8bc6:	6018      	str	r0, [r3, #0]
    8bc8:	3801      	subs	r0, #1
    8bca:	b01d      	add	sp, #116	; 0x74
    8bcc:	bc3c      	pop	{r2, r3, r4, r5}
    8bce:	4690      	mov	r8, r2
    8bd0:	4699      	mov	r9, r3
    8bd2:	46a2      	mov	sl, r4
    8bd4:	46ab      	mov	fp, r5
    8bd6:	bcf0      	pop	{r4, r5, r6, r7}
    8bd8:	bc02      	pop	{r1}
    8bda:	4708      	bx	r1
    8bdc:	4ba8      	ldr	r3, [pc, #672]	; (8e80 <_dtoa_r+0x334>)
    8bde:	9828      	ldr	r0, [sp, #160]	; 0xa0
    8be0:	6003      	str	r3, [r0, #0]
    8be2:	2e00      	cmp	r6, #0
    8be4:	d100      	bne.n	8be8 <_dtoa_r+0x9c>
    8be6:	e1bc      	b.n	8f62 <_dtoa_r+0x416>
    8be8:	48a6      	ldr	r0, [pc, #664]	; (8e84 <_dtoa_r+0x338>)
    8bea:	992a      	ldr	r1, [sp, #168]	; 0xa8
    8bec:	2900      	cmp	r1, #0
    8bee:	d0ec      	beq.n	8bca <_dtoa_r+0x7e>
    8bf0:	78c2      	ldrb	r2, [r0, #3]
    8bf2:	1cc3      	adds	r3, r0, #3
    8bf4:	2a00      	cmp	r2, #0
    8bf6:	d000      	beq.n	8bfa <_dtoa_r+0xae>
    8bf8:	3305      	adds	r3, #5
    8bfa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    8bfc:	6013      	str	r3, [r2, #0]
    8bfe:	e7e4      	b.n	8bca <_dtoa_r+0x7e>
    8c00:	2301      	movs	r3, #1
    8c02:	409d      	lsls	r5, r3
    8c04:	4641      	mov	r1, r8
    8c06:	40dd      	lsrs	r5, r3
    8c08:	600b      	str	r3, [r1, #0]
    8c0a:	1c2f      	adds	r7, r5, #0
    8c0c:	e7bc      	b.n	8b88 <_dtoa_r+0x3c>
    8c0e:	ab1a      	add	r3, sp, #104	; 0x68
    8c10:	9300      	str	r3, [sp, #0]
    8c12:	ab1b      	add	r3, sp, #108	; 0x6c
    8c14:	9301      	str	r3, [sp, #4]
    8c16:	1c20      	adds	r0, r4, #0
    8c18:	9a02      	ldr	r2, [sp, #8]
    8c1a:	9b03      	ldr	r3, [sp, #12]
    8c1c:	f001 fe46 	bl	a8ac <__d2b>
    8c20:	006b      	lsls	r3, r5, #1
    8c22:	0d5b      	lsrs	r3, r3, #21
    8c24:	9007      	str	r0, [sp, #28]
    8c26:	2b00      	cmp	r3, #0
    8c28:	d100      	bne.n	8c2c <_dtoa_r+0xe0>
    8c2a:	e1a0      	b.n	8f6e <_dtoa_r+0x422>
    8c2c:	9903      	ldr	r1, [sp, #12]
    8c2e:	030a      	lsls	r2, r1, #12
    8c30:	4995      	ldr	r1, [pc, #596]	; (8e88 <_dtoa_r+0x33c>)
    8c32:	0b12      	lsrs	r2, r2, #12
    8c34:	4311      	orrs	r1, r2
    8c36:	4a95      	ldr	r2, [pc, #596]	; (8e8c <_dtoa_r+0x340>)
    8c38:	2000      	movs	r0, #0
    8c3a:	189d      	adds	r5, r3, r2
    8c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8c3e:	9103      	str	r1, [sp, #12]
    8c40:	9016      	str	r0, [sp, #88]	; 0x58
    8c42:	4699      	mov	r9, r3
    8c44:	9802      	ldr	r0, [sp, #8]
    8c46:	9903      	ldr	r1, [sp, #12]
    8c48:	4a81      	ldr	r2, [pc, #516]	; (8e50 <_dtoa_r+0x304>)
    8c4a:	4b82      	ldr	r3, [pc, #520]	; (8e54 <_dtoa_r+0x308>)
    8c4c:	f005 fa56 	bl	e0fc <____aeabi_dsub_from_thumb>
    8c50:	4a81      	ldr	r2, [pc, #516]	; (8e58 <_dtoa_r+0x30c>)
    8c52:	4b82      	ldr	r3, [pc, #520]	; (8e5c <_dtoa_r+0x310>)
    8c54:	f005 fa14 	bl	e080 <____aeabi_dmul_from_thumb>
    8c58:	4a81      	ldr	r2, [pc, #516]	; (8e60 <_dtoa_r+0x314>)
    8c5a:	4b82      	ldr	r3, [pc, #520]	; (8e64 <_dtoa_r+0x318>)
    8c5c:	f005 fa68 	bl	e130 <____aeabi_dadd_from_thumb>
    8c60:	9004      	str	r0, [sp, #16]
    8c62:	9105      	str	r1, [sp, #20]
    8c64:	1c28      	adds	r0, r5, #0
    8c66:	f005 f9fb 	bl	e060 <____aeabi_i2d_from_thumb>
    8c6a:	4a7f      	ldr	r2, [pc, #508]	; (8e68 <_dtoa_r+0x31c>)
    8c6c:	4b7f      	ldr	r3, [pc, #508]	; (8e6c <_dtoa_r+0x320>)
    8c6e:	f005 fa07 	bl	e080 <____aeabi_dmul_from_thumb>
    8c72:	1c02      	adds	r2, r0, #0
    8c74:	1c0b      	adds	r3, r1, #0
    8c76:	9804      	ldr	r0, [sp, #16]
    8c78:	9905      	ldr	r1, [sp, #20]
    8c7a:	f005 fa59 	bl	e130 <____aeabi_dadd_from_thumb>
    8c7e:	9002      	str	r0, [sp, #8]
    8c80:	9103      	str	r1, [sp, #12]
    8c82:	f005 fa95 	bl	e1b0 <____aeabi_d2iz_from_thumb>
    8c86:	4b71      	ldr	r3, [pc, #452]	; (8e4c <_dtoa_r+0x300>)
    8c88:	4a6f      	ldr	r2, [pc, #444]	; (8e48 <_dtoa_r+0x2fc>)
    8c8a:	9004      	str	r0, [sp, #16]
    8c8c:	9802      	ldr	r0, [sp, #8]
    8c8e:	9903      	ldr	r1, [sp, #12]
    8c90:	f005 fa92 	bl	e1b8 <____aeabi_dcmplt_from_thumb>
    8c94:	2800      	cmp	r0, #0
    8c96:	d00b      	beq.n	8cb0 <_dtoa_r+0x164>
    8c98:	9804      	ldr	r0, [sp, #16]
    8c9a:	f005 f9e1 	bl	e060 <____aeabi_i2d_from_thumb>
    8c9e:	9a02      	ldr	r2, [sp, #8]
    8ca0:	9b03      	ldr	r3, [sp, #12]
    8ca2:	f005 fa8d 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    8ca6:	4243      	negs	r3, r0
    8ca8:	4143      	adcs	r3, r0
    8caa:	9804      	ldr	r0, [sp, #16]
    8cac:	1ac0      	subs	r0, r0, r3
    8cae:	9004      	str	r0, [sp, #16]
    8cb0:	9a04      	ldr	r2, [sp, #16]
    8cb2:	2101      	movs	r1, #1
    8cb4:	9111      	str	r1, [sp, #68]	; 0x44
    8cb6:	2a16      	cmp	r2, #22
    8cb8:	d810      	bhi.n	8cdc <_dtoa_r+0x190>
    8cba:	00d3      	lsls	r3, r2, #3
    8cbc:	4a74      	ldr	r2, [pc, #464]	; (8e90 <_dtoa_r+0x344>)
    8cbe:	18d3      	adds	r3, r2, r3
    8cc0:	6818      	ldr	r0, [r3, #0]
    8cc2:	6859      	ldr	r1, [r3, #4]
    8cc4:	1c32      	adds	r2, r6, #0
    8cc6:	1c3b      	adds	r3, r7, #0
    8cc8:	f005 fa62 	bl	e190 <____aeabi_dcmpgt_from_thumb>
    8ccc:	2800      	cmp	r0, #0
    8cce:	d100      	bne.n	8cd2 <_dtoa_r+0x186>
    8cd0:	e31f      	b.n	9312 <_dtoa_r+0x7c6>
    8cd2:	9b04      	ldr	r3, [sp, #16]
    8cd4:	2000      	movs	r0, #0
    8cd6:	3b01      	subs	r3, #1
    8cd8:	9304      	str	r3, [sp, #16]
    8cda:	9011      	str	r0, [sp, #68]	; 0x44
    8cdc:	2201      	movs	r2, #1
    8cde:	4252      	negs	r2, r2
    8ce0:	1c13      	adds	r3, r2, #0
    8ce2:	444b      	add	r3, r9
    8ce4:	1b5d      	subs	r5, r3, r5
    8ce6:	d500      	bpl.n	8cea <_dtoa_r+0x19e>
    8ce8:	e308      	b.n	92fc <_dtoa_r+0x7b0>
    8cea:	46aa      	mov	sl, r5
    8cec:	2500      	movs	r5, #0
    8cee:	950f      	str	r5, [sp, #60]	; 0x3c
    8cf0:	9804      	ldr	r0, [sp, #16]
    8cf2:	2800      	cmp	r0, #0
    8cf4:	da00      	bge.n	8cf8 <_dtoa_r+0x1ac>
    8cf6:	e2f8      	b.n	92ea <_dtoa_r+0x79e>
    8cf8:	2100      	movs	r1, #0
    8cfa:	9014      	str	r0, [sp, #80]	; 0x50
    8cfc:	9113      	str	r1, [sp, #76]	; 0x4c
    8cfe:	4482      	add	sl, r0
    8d00:	9926      	ldr	r1, [sp, #152]	; 0x98
    8d02:	2909      	cmp	r1, #9
    8d04:	d900      	bls.n	8d08 <_dtoa_r+0x1bc>
    8d06:	e157      	b.n	8fb8 <_dtoa_r+0x46c>
    8d08:	2501      	movs	r5, #1
    8d0a:	2905      	cmp	r1, #5
    8d0c:	dd02      	ble.n	8d14 <_dtoa_r+0x1c8>
    8d0e:	3904      	subs	r1, #4
    8d10:	9126      	str	r1, [sp, #152]	; 0x98
    8d12:	3d01      	subs	r5, #1
    8d14:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8d16:	2a03      	cmp	r2, #3
    8d18:	d101      	bne.n	8d1e <_dtoa_r+0x1d2>
    8d1a:	f000 fd03 	bl	9724 <_dtoa_r+0xbd8>
    8d1e:	dc00      	bgt.n	8d22 <_dtoa_r+0x1d6>
    8d20:	e306      	b.n	9330 <_dtoa_r+0x7e4>
    8d22:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8d24:	2b04      	cmp	r3, #4
    8d26:	d101      	bne.n	8d2c <_dtoa_r+0x1e0>
    8d28:	f000 fd0a 	bl	9740 <_dtoa_r+0xbf4>
    8d2c:	2b05      	cmp	r3, #5
    8d2e:	d000      	beq.n	8d32 <_dtoa_r+0x1e6>
    8d30:	e301      	b.n	9336 <_dtoa_r+0x7ea>
    8d32:	2001      	movs	r0, #1
    8d34:	9012      	str	r0, [sp, #72]	; 0x48
    8d36:	9a04      	ldr	r2, [sp, #16]
    8d38:	1c13      	adds	r3, r2, #0
    8d3a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    8d3c:	189b      	adds	r3, r3, r2
    8d3e:	1c18      	adds	r0, r3, #0
    8d40:	3001      	adds	r0, #1
    8d42:	9310      	str	r3, [sp, #64]	; 0x40
    8d44:	2800      	cmp	r0, #0
    8d46:	dc01      	bgt.n	8d4c <_dtoa_r+0x200>
    8d48:	f000 fd27 	bl	979a <_dtoa_r+0xc4e>
    8d4c:	900b      	str	r0, [sp, #44]	; 0x2c
    8d4e:	2100      	movs	r1, #0
    8d50:	6461      	str	r1, [r4, #68]	; 0x44
    8d52:	2304      	movs	r3, #4
    8d54:	2817      	cmp	r0, #23
    8d56:	d801      	bhi.n	8d5c <_dtoa_r+0x210>
    8d58:	f000 fe82 	bl	9a60 <_dtoa_r+0xf14>
    8d5c:	005b      	lsls	r3, r3, #1
    8d5e:	1c1a      	adds	r2, r3, #0
    8d60:	3214      	adds	r2, #20
    8d62:	3101      	adds	r1, #1
    8d64:	4282      	cmp	r2, r0
    8d66:	d9f9      	bls.n	8d5c <_dtoa_r+0x210>
    8d68:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8d6a:	220e      	movs	r2, #14
    8d6c:	2300      	movs	r3, #0
    8d6e:	4282      	cmp	r2, r0
    8d70:	415b      	adcs	r3, r3
    8d72:	6461      	str	r1, [r4, #68]	; 0x44
    8d74:	1c20      	adds	r0, r4, #0
    8d76:	401d      	ands	r5, r3
    8d78:	f001 f9d2 	bl	a120 <_Balloc>
    8d7c:	900a      	str	r0, [sp, #40]	; 0x28
    8d7e:	6420      	str	r0, [r4, #64]	; 0x40
    8d80:	2d00      	cmp	r5, #0
    8d82:	d000      	beq.n	8d86 <_dtoa_r+0x23a>
    8d84:	e12b      	b.n	8fde <_dtoa_r+0x492>
    8d86:	9a04      	ldr	r2, [sp, #16]
    8d88:	9d04      	ldr	r5, [sp, #16]
    8d8a:	0fd1      	lsrs	r1, r2, #31
    8d8c:	2300      	movs	r3, #0
    8d8e:	220e      	movs	r2, #14
    8d90:	42aa      	cmp	r2, r5
    8d92:	4159      	adcs	r1, r3
    8d94:	0609      	lsls	r1, r1, #24
    8d96:	981a      	ldr	r0, [sp, #104]	; 0x68
    8d98:	4299      	cmp	r1, r3
    8d9a:	d100      	bne.n	8d9e <_dtoa_r+0x252>
    8d9c:	e206      	b.n	91ac <_dtoa_r+0x660>
    8d9e:	4298      	cmp	r0, r3
    8da0:	da00      	bge.n	8da4 <_dtoa_r+0x258>
    8da2:	e203      	b.n	91ac <_dtoa_r+0x660>
    8da4:	493a      	ldr	r1, [pc, #232]	; (8e90 <_dtoa_r+0x344>)
    8da6:	00ea      	lsls	r2, r5, #3
    8da8:	188a      	adds	r2, r1, r2
    8daa:	6810      	ldr	r0, [r2, #0]
    8dac:	6851      	ldr	r1, [r2, #4]
    8dae:	9002      	str	r0, [sp, #8]
    8db0:	9103      	str	r1, [sp, #12]
    8db2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8db4:	4299      	cmp	r1, r3
    8db6:	dc00      	bgt.n	8dba <_dtoa_r+0x26e>
    8db8:	e2e1      	b.n	937e <_dtoa_r+0x832>
    8dba:	9a02      	ldr	r2, [sp, #8]
    8dbc:	9b03      	ldr	r3, [sp, #12]
    8dbe:	1c30      	adds	r0, r6, #0
    8dc0:	1c39      	adds	r1, r7, #0
    8dc2:	f005 f96f 	bl	e0a4 <____aeabi_ddiv_from_thumb>
    8dc6:	f005 f9f3 	bl	e1b0 <____aeabi_d2iz_from_thumb>
    8dca:	4680      	mov	r8, r0
    8dcc:	f005 f948 	bl	e060 <____aeabi_i2d_from_thumb>
    8dd0:	9a02      	ldr	r2, [sp, #8]
    8dd2:	9b03      	ldr	r3, [sp, #12]
    8dd4:	f005 f954 	bl	e080 <____aeabi_dmul_from_thumb>
    8dd8:	1c02      	adds	r2, r0, #0
    8dda:	1c0b      	adds	r3, r1, #0
    8ddc:	1c30      	adds	r0, r6, #0
    8dde:	1c39      	adds	r1, r7, #0
    8de0:	f005 f98c 	bl	e0fc <____aeabi_dsub_from_thumb>
    8de4:	2530      	movs	r5, #48	; 0x30
    8de6:	1c06      	adds	r6, r0, #0
    8de8:	1c0f      	adds	r7, r1, #0
    8dea:	1c02      	adds	r2, r0, #0
    8dec:	1c0b      	adds	r3, r1, #0
    8dee:	980a      	ldr	r0, [sp, #40]	; 0x28
    8df0:	1c29      	adds	r1, r5, #0
    8df2:	4441      	add	r1, r8
    8df4:	7001      	strb	r1, [r0, #0]
    8df6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8df8:	1c05      	adds	r5, r0, #0
    8dfa:	3501      	adds	r5, #1
    8dfc:	2901      	cmp	r1, #1
    8dfe:	d100      	bne.n	8e02 <_dtoa_r+0x2b6>
    8e00:	e07c      	b.n	8efc <_dtoa_r+0x3b0>
    8e02:	1c30      	adds	r0, r6, #0
    8e04:	1c39      	adds	r1, r7, #0
    8e06:	4a1a      	ldr	r2, [pc, #104]	; (8e70 <_dtoa_r+0x324>)
    8e08:	4b1a      	ldr	r3, [pc, #104]	; (8e74 <_dtoa_r+0x328>)
    8e0a:	f005 f939 	bl	e080 <____aeabi_dmul_from_thumb>
    8e0e:	1c06      	adds	r6, r0, #0
    8e10:	2001      	movs	r0, #1
    8e12:	4680      	mov	r8, r0
    8e14:	4b0d      	ldr	r3, [pc, #52]	; (8e4c <_dtoa_r+0x300>)
    8e16:	4a0c      	ldr	r2, [pc, #48]	; (8e48 <_dtoa_r+0x2fc>)
    8e18:	1c30      	adds	r0, r6, #0
    8e1a:	1c0f      	adds	r7, r1, #0
    8e1c:	f005 f9d0 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    8e20:	4243      	negs	r3, r0
    8e22:	4143      	adcs	r3, r0
    8e24:	425b      	negs	r3, r3
    8e26:	4641      	mov	r1, r8
    8e28:	4019      	ands	r1, r3
    8e2a:	060b      	lsls	r3, r1, #24
    8e2c:	2b00      	cmp	r3, #0
    8e2e:	d100      	bne.n	8e32 <_dtoa_r+0x2e6>
    8e30:	e185      	b.n	913e <_dtoa_r+0x5f2>
    8e32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e34:	2201      	movs	r2, #1
    8e36:	469b      	mov	fp, r3
    8e38:	1c23      	adds	r3, r4, #0
    8e3a:	4692      	mov	sl, r2
    8e3c:	1c14      	adds	r4, r2, #0
    8e3e:	4699      	mov	r9, r3
    8e40:	e03c      	b.n	8ebc <_dtoa_r+0x370>
    8e42:	46c0      	nop			; (mov r8, r8)
    8e44:	46c0      	nop			; (mov r8, r8)
    8e46:	46c0      	nop			; (mov r8, r8)
	...
    8e54:	3ff80000 	.word	0x3ff80000
    8e58:	636f4361 	.word	0x636f4361
    8e5c:	3fd287a7 	.word	0x3fd287a7
    8e60:	8b60c8b3 	.word	0x8b60c8b3
    8e64:	3fc68a28 	.word	0x3fc68a28
    8e68:	509f79fb 	.word	0x509f79fb
    8e6c:	3fd34413 	.word	0x3fd34413
    8e70:	00000000 	.word	0x00000000
    8e74:	40240000 	.word	0x40240000
    8e78:	7ff00000 	.word	0x7ff00000
    8e7c:	0000ee01 	.word	0x0000ee01
    8e80:	0000270f 	.word	0x0000270f
    8e84:	0000ee10 	.word	0x0000ee10
    8e88:	3ff00000 	.word	0x3ff00000
    8e8c:	fffffc01 	.word	0xfffffc01
    8e90:	0000e558 	.word	0x0000e558
    8e94:	4bb3      	ldr	r3, [pc, #716]	; (9164 <_dtoa_r+0x618>)
    8e96:	4ab2      	ldr	r2, [pc, #712]	; (9160 <_dtoa_r+0x614>)
    8e98:	f005 f8f2 	bl	e080 <____aeabi_dmul_from_thumb>
    8e9c:	4ab2      	ldr	r2, [pc, #712]	; (9168 <_dtoa_r+0x61c>)
    8e9e:	4bb3      	ldr	r3, [pc, #716]	; (916c <_dtoa_r+0x620>)
    8ea0:	1c0f      	adds	r7, r1, #0
    8ea2:	1c06      	adds	r6, r0, #0
    8ea4:	f005 f98c 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    8ea8:	4243      	negs	r3, r0
    8eaa:	4143      	adcs	r3, r0
    8eac:	425b      	negs	r3, r3
    8eae:	4651      	mov	r1, sl
    8eb0:	400b      	ands	r3, r1
    8eb2:	061b      	lsls	r3, r3, #24
    8eb4:	2b00      	cmp	r3, #0
    8eb6:	d101      	bne.n	8ebc <_dtoa_r+0x370>
    8eb8:	f000 fd05 	bl	98c6 <_dtoa_r+0xd7a>
    8ebc:	9a02      	ldr	r2, [sp, #8]
    8ebe:	9b03      	ldr	r3, [sp, #12]
    8ec0:	1c30      	adds	r0, r6, #0
    8ec2:	1c39      	adds	r1, r7, #0
    8ec4:	f005 f8ee 	bl	e0a4 <____aeabi_ddiv_from_thumb>
    8ec8:	f005 f972 	bl	e1b0 <____aeabi_d2iz_from_thumb>
    8ecc:	4680      	mov	r8, r0
    8ece:	f005 f8c7 	bl	e060 <____aeabi_i2d_from_thumb>
    8ed2:	9a02      	ldr	r2, [sp, #8]
    8ed4:	9b03      	ldr	r3, [sp, #12]
    8ed6:	f005 f8d3 	bl	e080 <____aeabi_dmul_from_thumb>
    8eda:	1c02      	adds	r2, r0, #0
    8edc:	1c0b      	adds	r3, r1, #0
    8ede:	1c30      	adds	r0, r6, #0
    8ee0:	1c39      	adds	r1, r7, #0
    8ee2:	f005 f90b 	bl	e0fc <____aeabi_dsub_from_thumb>
    8ee6:	2730      	movs	r7, #48	; 0x30
    8ee8:	1c3e      	adds	r6, r7, #0
    8eea:	4446      	add	r6, r8
    8eec:	3401      	adds	r4, #1
    8eee:	702e      	strb	r6, [r5, #0]
    8ef0:	1c02      	adds	r2, r0, #0
    8ef2:	1c0b      	adds	r3, r1, #0
    8ef4:	3501      	adds	r5, #1
    8ef6:	45a3      	cmp	fp, r4
    8ef8:	d1cc      	bne.n	8e94 <_dtoa_r+0x348>
    8efa:	464c      	mov	r4, r9
    8efc:	1c10      	adds	r0, r2, #0
    8efe:	1c19      	adds	r1, r3, #0
    8f00:	f005 f916 	bl	e130 <____aeabi_dadd_from_thumb>
    8f04:	1c06      	adds	r6, r0, #0
    8f06:	1c0f      	adds	r7, r1, #0
    8f08:	1c32      	adds	r2, r6, #0
    8f0a:	9802      	ldr	r0, [sp, #8]
    8f0c:	9903      	ldr	r1, [sp, #12]
    8f0e:	1c3b      	adds	r3, r7, #0
    8f10:	f005 f952 	bl	e1b8 <____aeabi_dcmplt_from_thumb>
    8f14:	9904      	ldr	r1, [sp, #16]
    8f16:	9117      	str	r1, [sp, #92]	; 0x5c
    8f18:	2800      	cmp	r0, #0
    8f1a:	d10e      	bne.n	8f3a <_dtoa_r+0x3ee>
    8f1c:	9802      	ldr	r0, [sp, #8]
    8f1e:	9903      	ldr	r1, [sp, #12]
    8f20:	1c32      	adds	r2, r6, #0
    8f22:	1c3b      	adds	r3, r7, #0
    8f24:	f005 f94c 	bl	e1c0 <____aeabi_dcmpeq_from_thumb>
    8f28:	2800      	cmp	r0, #0
    8f2a:	d100      	bne.n	8f2e <_dtoa_r+0x3e2>
    8f2c:	e107      	b.n	913e <_dtoa_r+0x5f2>
    8f2e:	9a04      	ldr	r2, [sp, #16]
    8f30:	4643      	mov	r3, r8
    8f32:	9217      	str	r2, [sp, #92]	; 0x5c
    8f34:	07db      	lsls	r3, r3, #31
    8f36:	d400      	bmi.n	8f3a <_dtoa_r+0x3ee>
    8f38:	e101      	b.n	913e <_dtoa_r+0x5f2>
    8f3a:	990a      	ldr	r1, [sp, #40]	; 0x28
    8f3c:	e000      	b.n	8f40 <_dtoa_r+0x3f4>
    8f3e:	1c1d      	adds	r5, r3, #0
    8f40:	1e6b      	subs	r3, r5, #1
    8f42:	781a      	ldrb	r2, [r3, #0]
    8f44:	2a39      	cmp	r2, #57	; 0x39
    8f46:	d001      	beq.n	8f4c <_dtoa_r+0x400>
    8f48:	f000 fce8 	bl	991c <_dtoa_r+0xdd0>
    8f4c:	428b      	cmp	r3, r1
    8f4e:	d1f6      	bne.n	8f3e <_dtoa_r+0x3f2>
    8f50:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    8f52:	2230      	movs	r2, #48	; 0x30
    8f54:	3701      	adds	r7, #1
    8f56:	910a      	str	r1, [sp, #40]	; 0x28
    8f58:	9704      	str	r7, [sp, #16]
    8f5a:	700a      	strb	r2, [r1, #0]
    8f5c:	3201      	adds	r2, #1
    8f5e:	701a      	strb	r2, [r3, #0]
    8f60:	e0ed      	b.n	913e <_dtoa_r+0x5f2>
    8f62:	032d      	lsls	r5, r5, #12
    8f64:	2d00      	cmp	r5, #0
    8f66:	d000      	beq.n	8f6a <_dtoa_r+0x41e>
    8f68:	e63e      	b.n	8be8 <_dtoa_r+0x9c>
    8f6a:	4887      	ldr	r0, [pc, #540]	; (9188 <_dtoa_r+0x63c>)
    8f6c:	e63d      	b.n	8bea <_dtoa_r+0x9e>
    8f6e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8f70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8f72:	4689      	mov	r9, r1
    8f74:	4a85      	ldr	r2, [pc, #532]	; (918c <_dtoa_r+0x640>)
    8f76:	444b      	add	r3, r9
    8f78:	18d2      	adds	r2, r2, r3
    8f7a:	4690      	mov	r8, r2
    8f7c:	2020      	movs	r0, #32
    8f7e:	4580      	cmp	r8, r0
    8f80:	dc00      	bgt.n	8f84 <_dtoa_r+0x438>
    8f82:	e1c0      	b.n	9306 <_dtoa_r+0x7ba>
    8f84:	1800      	adds	r0, r0, r0
    8f86:	4982      	ldr	r1, [pc, #520]	; (9190 <_dtoa_r+0x644>)
    8f88:	1a80      	subs	r0, r0, r2
    8f8a:	4085      	lsls	r5, r0
    8f8c:	185b      	adds	r3, r3, r1
    8f8e:	1c32      	adds	r2, r6, #0
    8f90:	1c28      	adds	r0, r5, #0
    8f92:	40da      	lsrs	r2, r3
    8f94:	4310      	orrs	r0, r2
    8f96:	f005 f917 	bl	e1c8 <____aeabi_ui2d_from_thumb>
    8f9a:	9002      	str	r0, [sp, #8]
    8f9c:	9103      	str	r1, [sp, #12]
    8f9e:	9803      	ldr	r0, [sp, #12]
    8fa0:	4a7c      	ldr	r2, [pc, #496]	; (9194 <_dtoa_r+0x648>)
    8fa2:	1c01      	adds	r1, r0, #0
    8fa4:	487c      	ldr	r0, [pc, #496]	; (9198 <_dtoa_r+0x64c>)
    8fa6:	1c15      	adds	r5, r2, #0
    8fa8:	1809      	adds	r1, r1, r0
    8faa:	2301      	movs	r3, #1
    8fac:	9103      	str	r1, [sp, #12]
    8fae:	4445      	add	r5, r8
    8fb0:	9316      	str	r3, [sp, #88]	; 0x58
    8fb2:	e647      	b.n	8c44 <_dtoa_r+0xf8>
    8fb4:	4879      	ldr	r0, [pc, #484]	; (919c <_dtoa_r+0x650>)
    8fb6:	e608      	b.n	8bca <_dtoa_r+0x7e>
    8fb8:	2301      	movs	r3, #1
    8fba:	2200      	movs	r2, #0
    8fbc:	9312      	str	r3, [sp, #72]	; 0x48
    8fbe:	425b      	negs	r3, r3
    8fc0:	9226      	str	r2, [sp, #152]	; 0x98
    8fc2:	9310      	str	r3, [sp, #64]	; 0x40
    8fc4:	930b      	str	r3, [sp, #44]	; 0x2c
    8fc6:	9227      	str	r2, [sp, #156]	; 0x9c
    8fc8:	1c15      	adds	r5, r2, #0
    8fca:	2100      	movs	r1, #0
    8fcc:	6461      	str	r1, [r4, #68]	; 0x44
    8fce:	1c20      	adds	r0, r4, #0
    8fd0:	f001 f8a6 	bl	a120 <_Balloc>
    8fd4:	900a      	str	r0, [sp, #40]	; 0x28
    8fd6:	6420      	str	r0, [r4, #64]	; 0x40
    8fd8:	2d00      	cmp	r5, #0
    8fda:	d100      	bne.n	8fde <_dtoa_r+0x492>
    8fdc:	e6d3      	b.n	8d86 <_dtoa_r+0x23a>
    8fde:	1c3a      	adds	r2, r7, #0
    8fe0:	1c31      	adds	r1, r6, #0
    8fe2:	9102      	str	r1, [sp, #8]
    8fe4:	9203      	str	r2, [sp, #12]
    8fe6:	9a04      	ldr	r2, [sp, #16]
    8fe8:	960c      	str	r6, [sp, #48]	; 0x30
    8fea:	970d      	str	r7, [sp, #52]	; 0x34
    8fec:	2a00      	cmp	r2, #0
    8fee:	dc00      	bgt.n	8ff2 <_dtoa_r+0x4a6>
    8ff0:	e2e1      	b.n	95b6 <_dtoa_r+0xa6a>
    8ff2:	230f      	movs	r3, #15
    8ff4:	496a      	ldr	r1, [pc, #424]	; (91a0 <_dtoa_r+0x654>)
    8ff6:	401a      	ands	r2, r3
    8ff8:	00d2      	lsls	r2, r2, #3
    8ffa:	188a      	adds	r2, r1, r2
    8ffc:	6810      	ldr	r0, [r2, #0]
    8ffe:	6851      	ldr	r1, [r2, #4]
    9000:	9008      	str	r0, [sp, #32]
    9002:	9109      	str	r1, [sp, #36]	; 0x24
    9004:	9904      	ldr	r1, [sp, #16]
    9006:	110d      	asrs	r5, r1, #4
    9008:	2702      	movs	r7, #2
    900a:	06ea      	lsls	r2, r5, #27
    900c:	d500      	bpl.n	9010 <_dtoa_r+0x4c4>
    900e:	e183      	b.n	9318 <_dtoa_r+0x7cc>
    9010:	2d00      	cmp	r5, #0
    9012:	d012      	beq.n	903a <_dtoa_r+0x4ee>
    9014:	2301      	movs	r3, #1
    9016:	4e63      	ldr	r6, [pc, #396]	; (91a4 <_dtoa_r+0x658>)
    9018:	9808      	ldr	r0, [sp, #32]
    901a:	9909      	ldr	r1, [sp, #36]	; 0x24
    901c:	4698      	mov	r8, r3
    901e:	4642      	mov	r2, r8
    9020:	4215      	tst	r5, r2
    9022:	d004      	beq.n	902e <_dtoa_r+0x4e2>
    9024:	6832      	ldr	r2, [r6, #0]
    9026:	6873      	ldr	r3, [r6, #4]
    9028:	3701      	adds	r7, #1
    902a:	f005 f829 	bl	e080 <____aeabi_dmul_from_thumb>
    902e:	106d      	asrs	r5, r5, #1
    9030:	3608      	adds	r6, #8
    9032:	2d00      	cmp	r5, #0
    9034:	d1f3      	bne.n	901e <_dtoa_r+0x4d2>
    9036:	9008      	str	r0, [sp, #32]
    9038:	9109      	str	r1, [sp, #36]	; 0x24
    903a:	980c      	ldr	r0, [sp, #48]	; 0x30
    903c:	990d      	ldr	r1, [sp, #52]	; 0x34
    903e:	9a08      	ldr	r2, [sp, #32]
    9040:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9042:	f005 f82f 	bl	e0a4 <____aeabi_ddiv_from_thumb>
    9046:	900c      	str	r0, [sp, #48]	; 0x30
    9048:	910d      	str	r1, [sp, #52]	; 0x34
    904a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    904c:	2b00      	cmp	r3, #0
    904e:	d032      	beq.n	90b6 <_dtoa_r+0x56a>
    9050:	4a47      	ldr	r2, [pc, #284]	; (9170 <_dtoa_r+0x624>)
    9052:	4b48      	ldr	r3, [pc, #288]	; (9174 <_dtoa_r+0x628>)
    9054:	980c      	ldr	r0, [sp, #48]	; 0x30
    9056:	990d      	ldr	r1, [sp, #52]	; 0x34
    9058:	f005 f8ae 	bl	e1b8 <____aeabi_dcmplt_from_thumb>
    905c:	1e43      	subs	r3, r0, #1
    905e:	4198      	sbcs	r0, r3
    9060:	2501      	movs	r5, #1
    9062:	4240      	negs	r0, r0
    9064:	4005      	ands	r5, r0
    9066:	062d      	lsls	r5, r5, #24
    9068:	2d00      	cmp	r5, #0
    906a:	d024      	beq.n	90b6 <_dtoa_r+0x56a>
    906c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    906e:	2d00      	cmp	r5, #0
    9070:	dd21      	ble.n	90b6 <_dtoa_r+0x56a>
    9072:	9810      	ldr	r0, [sp, #64]	; 0x40
    9074:	2800      	cmp	r0, #0
    9076:	dc00      	bgt.n	907a <_dtoa_r+0x52e>
    9078:	e299      	b.n	95ae <_dtoa_r+0xa62>
    907a:	9904      	ldr	r1, [sp, #16]
    907c:	3901      	subs	r1, #1
    907e:	4b39      	ldr	r3, [pc, #228]	; (9164 <_dtoa_r+0x618>)
    9080:	4a37      	ldr	r2, [pc, #220]	; (9160 <_dtoa_r+0x614>)
    9082:	9117      	str	r1, [sp, #92]	; 0x5c
    9084:	980c      	ldr	r0, [sp, #48]	; 0x30
    9086:	990d      	ldr	r1, [sp, #52]	; 0x34
    9088:	f004 fffa 	bl	e080 <____aeabi_dmul_from_thumb>
    908c:	900c      	str	r0, [sp, #48]	; 0x30
    908e:	910d      	str	r1, [sp, #52]	; 0x34
    9090:	1c78      	adds	r0, r7, #1
    9092:	f004 ffe5 	bl	e060 <____aeabi_i2d_from_thumb>
    9096:	1c02      	adds	r2, r0, #0
    9098:	1c0b      	adds	r3, r1, #0
    909a:	980c      	ldr	r0, [sp, #48]	; 0x30
    909c:	990d      	ldr	r1, [sp, #52]	; 0x34
    909e:	f004 ffef 	bl	e080 <____aeabi_dmul_from_thumb>
    90a2:	4a35      	ldr	r2, [pc, #212]	; (9178 <_dtoa_r+0x62c>)
    90a4:	4b35      	ldr	r3, [pc, #212]	; (917c <_dtoa_r+0x630>)
    90a6:	f005 f843 	bl	e130 <____aeabi_dadd_from_thumb>
    90aa:	4a3f      	ldr	r2, [pc, #252]	; (91a8 <_dtoa_r+0x65c>)
    90ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    90ae:	1c05      	adds	r5, r0, #0
    90b0:	188e      	adds	r6, r1, r2
    90b2:	9315      	str	r3, [sp, #84]	; 0x54
    90b4:	e180      	b.n	93b8 <_dtoa_r+0x86c>
    90b6:	1c38      	adds	r0, r7, #0
    90b8:	f004 ffd2 	bl	e060 <____aeabi_i2d_from_thumb>
    90bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    90be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    90c0:	f004 ffde 	bl	e080 <____aeabi_dmul_from_thumb>
    90c4:	4a2c      	ldr	r2, [pc, #176]	; (9178 <_dtoa_r+0x62c>)
    90c6:	4b2d      	ldr	r3, [pc, #180]	; (917c <_dtoa_r+0x630>)
    90c8:	f005 f832 	bl	e130 <____aeabi_dadd_from_thumb>
    90cc:	1c05      	adds	r5, r0, #0
    90ce:	4836      	ldr	r0, [pc, #216]	; (91a8 <_dtoa_r+0x65c>)
    90d0:	180f      	adds	r7, r1, r0
    90d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    90d4:	1c3e      	adds	r6, r7, #0
    90d6:	2900      	cmp	r1, #0
    90d8:	d000      	beq.n	90dc <_dtoa_r+0x590>
    90da:	e169      	b.n	93b0 <_dtoa_r+0x864>
    90dc:	4a28      	ldr	r2, [pc, #160]	; (9180 <_dtoa_r+0x634>)
    90de:	4b29      	ldr	r3, [pc, #164]	; (9184 <_dtoa_r+0x638>)
    90e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    90e2:	990d      	ldr	r1, [sp, #52]	; 0x34
    90e4:	f005 f80a 	bl	e0fc <____aeabi_dsub_from_thumb>
    90e8:	1c2a      	adds	r2, r5, #0
    90ea:	1c3b      	adds	r3, r7, #0
    90ec:	9008      	str	r0, [sp, #32]
    90ee:	9109      	str	r1, [sp, #36]	; 0x24
    90f0:	f005 f84e 	bl	e190 <____aeabi_dcmpgt_from_thumb>
    90f4:	2800      	cmp	r0, #0
    90f6:	d000      	beq.n	90fa <_dtoa_r+0x5ae>
    90f8:	e288      	b.n	960c <_dtoa_r+0xac0>
    90fa:	1c2a      	adds	r2, r5, #0
    90fc:	2580      	movs	r5, #128	; 0x80
    90fe:	062d      	lsls	r5, r5, #24
    9100:	9808      	ldr	r0, [sp, #32]
    9102:	9909      	ldr	r1, [sp, #36]	; 0x24
    9104:	197b      	adds	r3, r7, r5
    9106:	f005 f857 	bl	e1b8 <____aeabi_dcmplt_from_thumb>
    910a:	2800      	cmp	r0, #0
    910c:	d100      	bne.n	9110 <_dtoa_r+0x5c4>
    910e:	e24e      	b.n	95ae <_dtoa_r+0xa62>
    9110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9112:	9202      	str	r2, [sp, #8]
    9114:	4690      	mov	r8, r2
    9116:	9827      	ldr	r0, [sp, #156]	; 0x9c
    9118:	43c0      	mvns	r0, r0
    911a:	2100      	movs	r1, #0
    911c:	9004      	str	r0, [sp, #16]
    911e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9120:	4689      	mov	r9, r1
    9122:	1c20      	adds	r0, r4, #0
    9124:	4641      	mov	r1, r8
    9126:	f001 f825 	bl	a174 <_Bfree>
    912a:	9802      	ldr	r0, [sp, #8]
    912c:	2800      	cmp	r0, #0
    912e:	d006      	beq.n	913e <_dtoa_r+0x5f2>
    9130:	4581      	cmp	r9, r0
    9132:	d000      	beq.n	9136 <_dtoa_r+0x5ea>
    9134:	e22f      	b.n	9596 <_dtoa_r+0xa4a>
    9136:	1c20      	adds	r0, r4, #0
    9138:	9902      	ldr	r1, [sp, #8]
    913a:	f001 f81b 	bl	a174 <_Bfree>
    913e:	1c20      	adds	r0, r4, #0
    9140:	9907      	ldr	r1, [sp, #28]
    9142:	f001 f817 	bl	a174 <_Bfree>
    9146:	2300      	movs	r3, #0
    9148:	702b      	strb	r3, [r5, #0]
    914a:	9b04      	ldr	r3, [sp, #16]
    914c:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    914e:	992a      	ldr	r1, [sp, #168]	; 0xa8
    9150:	3301      	adds	r3, #1
    9152:	603b      	str	r3, [r7, #0]
    9154:	980a      	ldr	r0, [sp, #40]	; 0x28
    9156:	2900      	cmp	r1, #0
    9158:	d100      	bne.n	915c <_dtoa_r+0x610>
    915a:	e536      	b.n	8bca <_dtoa_r+0x7e>
    915c:	600d      	str	r5, [r1, #0]
    915e:	e534      	b.n	8bca <_dtoa_r+0x7e>
    9160:	00000000 	.word	0x00000000
    9164:	40240000 	.word	0x40240000
	...
    9174:	3ff00000 	.word	0x3ff00000
    9178:	00000000 	.word	0x00000000
    917c:	401c0000 	.word	0x401c0000
    9180:	00000000 	.word	0x00000000
    9184:	40140000 	.word	0x40140000
    9188:	0000ee04 	.word	0x0000ee04
    918c:	00000432 	.word	0x00000432
    9190:	00000412 	.word	0x00000412
    9194:	fffffbcd 	.word	0xfffffbcd
    9198:	fe100000 	.word	0xfe100000
    919c:	0000ee00 	.word	0x0000ee00
    91a0:	0000e558 	.word	0x0000e558
    91a4:	0000e620 	.word	0x0000e620
    91a8:	fcc00000 	.word	0xfcc00000
    91ac:	9912      	ldr	r1, [sp, #72]	; 0x48
    91ae:	2900      	cmp	r1, #0
    91b0:	d000      	beq.n	91b4 <_dtoa_r+0x668>
    91b2:	e0c8      	b.n	9346 <_dtoa_r+0x7fa>
    91b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    91b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    91b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    91ba:	9302      	str	r3, [sp, #8]
    91bc:	4690      	mov	r8, r2
    91be:	2000      	movs	r0, #0
    91c0:	4582      	cmp	sl, r0
    91c2:	dd0c      	ble.n	91de <_dtoa_r+0x692>
    91c4:	4285      	cmp	r5, r0
    91c6:	dd0a      	ble.n	91de <_dtoa_r+0x692>
    91c8:	4653      	mov	r3, sl
    91ca:	45aa      	cmp	sl, r5
    91cc:	dd00      	ble.n	91d0 <_dtoa_r+0x684>
    91ce:	1c2b      	adds	r3, r5, #0
    91d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    91d2:	4652      	mov	r2, sl
    91d4:	1ac9      	subs	r1, r1, r3
    91d6:	1ad2      	subs	r2, r2, r3
    91d8:	910f      	str	r1, [sp, #60]	; 0x3c
    91da:	1aed      	subs	r5, r5, r3
    91dc:	4692      	mov	sl, r2
    91de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    91e0:	2b00      	cmp	r3, #0
    91e2:	dd1e      	ble.n	9222 <_dtoa_r+0x6d6>
    91e4:	9812      	ldr	r0, [sp, #72]	; 0x48
    91e6:	2800      	cmp	r0, #0
    91e8:	d100      	bne.n	91ec <_dtoa_r+0x6a0>
    91ea:	e36e      	b.n	98ca <_dtoa_r+0xd7e>
    91ec:	2100      	movs	r1, #0
    91ee:	4588      	cmp	r8, r1
    91f0:	dd11      	ble.n	9216 <_dtoa_r+0x6ca>
    91f2:	9902      	ldr	r1, [sp, #8]
    91f4:	4642      	mov	r2, r8
    91f6:	1c20      	adds	r0, r4, #0
    91f8:	f001 f980 	bl	a4fc <__pow5mult>
    91fc:	9002      	str	r0, [sp, #8]
    91fe:	9a07      	ldr	r2, [sp, #28]
    9200:	9902      	ldr	r1, [sp, #8]
    9202:	1c20      	adds	r0, r4, #0
    9204:	f001 f8b6 	bl	a374 <__multiply>
    9208:	9907      	ldr	r1, [sp, #28]
    920a:	4681      	mov	r9, r0
    920c:	1c20      	adds	r0, r4, #0
    920e:	f000 ffb1 	bl	a174 <_Bfree>
    9212:	464a      	mov	r2, r9
    9214:	9207      	str	r2, [sp, #28]
    9216:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9218:	4641      	mov	r1, r8
    921a:	1a42      	subs	r2, r0, r1
    921c:	2a00      	cmp	r2, #0
    921e:	d000      	beq.n	9222 <_dtoa_r+0x6d6>
    9220:	e369      	b.n	98f6 <_dtoa_r+0xdaa>
    9222:	1c20      	adds	r0, r4, #0
    9224:	2101      	movs	r1, #1
    9226:	f001 f899 	bl	a35c <__i2b>
    922a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    922c:	4680      	mov	r8, r0
    922e:	2a00      	cmp	r2, #0
    9230:	dd04      	ble.n	923c <_dtoa_r+0x6f0>
    9232:	4641      	mov	r1, r8
    9234:	1c20      	adds	r0, r4, #0
    9236:	f001 f961 	bl	a4fc <__pow5mult>
    923a:	4680      	mov	r8, r0
    923c:	9826      	ldr	r0, [sp, #152]	; 0x98
    923e:	2300      	movs	r3, #0
    9240:	4699      	mov	r9, r3
    9242:	2801      	cmp	r0, #1
    9244:	dc00      	bgt.n	9248 <_dtoa_r+0x6fc>
    9246:	e2b6      	b.n	97b6 <_dtoa_r+0xc6a>
    9248:	9814      	ldr	r0, [sp, #80]	; 0x50
    924a:	2301      	movs	r3, #1
    924c:	2800      	cmp	r0, #0
    924e:	d000      	beq.n	9252 <_dtoa_r+0x706>
    9250:	e298      	b.n	9784 <_dtoa_r+0xc38>
    9252:	1c1a      	adds	r2, r3, #0
    9254:	4452      	add	r2, sl
    9256:	211f      	movs	r1, #31
    9258:	231c      	movs	r3, #28
    925a:	400a      	ands	r2, r1
    925c:	d000      	beq.n	9260 <_dtoa_r+0x714>
    925e:	e13b      	b.n	94d8 <_dtoa_r+0x98c>
    9260:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9262:	18c0      	adds	r0, r0, r3
    9264:	900f      	str	r0, [sp, #60]	; 0x3c
    9266:	18ed      	adds	r5, r5, r3
    9268:	449a      	add	sl, r3
    926a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    926c:	2900      	cmp	r1, #0
    926e:	dd05      	ble.n	927c <_dtoa_r+0x730>
    9270:	1c20      	adds	r0, r4, #0
    9272:	9907      	ldr	r1, [sp, #28]
    9274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9276:	f001 f99b 	bl	a5b0 <__lshift>
    927a:	9007      	str	r0, [sp, #28]
    927c:	2200      	movs	r2, #0
    927e:	4592      	cmp	sl, r2
    9280:	dd05      	ble.n	928e <_dtoa_r+0x742>
    9282:	4641      	mov	r1, r8
    9284:	1c20      	adds	r0, r4, #0
    9286:	4652      	mov	r2, sl
    9288:	f001 f992 	bl	a5b0 <__lshift>
    928c:	4680      	mov	r8, r0
    928e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9290:	2b00      	cmp	r3, #0
    9292:	d000      	beq.n	9296 <_dtoa_r+0x74a>
    9294:	e257      	b.n	9746 <_dtoa_r+0xbfa>
    9296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9298:	2b00      	cmp	r3, #0
    929a:	dd00      	ble.n	929e <_dtoa_r+0x752>
    929c:	e128      	b.n	94f0 <_dtoa_r+0x9a4>
    929e:	9826      	ldr	r0, [sp, #152]	; 0x98
    92a0:	2301      	movs	r3, #1
    92a2:	2802      	cmp	r0, #2
    92a4:	dc00      	bgt.n	92a8 <_dtoa_r+0x75c>
    92a6:	2300      	movs	r3, #0
    92a8:	061b      	lsls	r3, r3, #24
    92aa:	2b00      	cmp	r3, #0
    92ac:	d100      	bne.n	92b0 <_dtoa_r+0x764>
    92ae:	e11f      	b.n	94f0 <_dtoa_r+0x9a4>
    92b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    92b2:	2900      	cmp	r1, #0
    92b4:	d000      	beq.n	92b8 <_dtoa_r+0x76c>
    92b6:	e72e      	b.n	9116 <_dtoa_r+0x5ca>
    92b8:	4641      	mov	r1, r8
    92ba:	1c20      	adds	r0, r4, #0
    92bc:	2205      	movs	r2, #5
    92be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    92c0:	f000 ff64 	bl	a18c <__multadd>
    92c4:	4680      	mov	r8, r0
    92c6:	4641      	mov	r1, r8
    92c8:	9807      	ldr	r0, [sp, #28]
    92ca:	f001 f9d9 	bl	a680 <__mcmp>
    92ce:	2800      	cmp	r0, #0
    92d0:	dc00      	bgt.n	92d4 <_dtoa_r+0x788>
    92d2:	e720      	b.n	9116 <_dtoa_r+0x5ca>
    92d4:	980a      	ldr	r0, [sp, #40]	; 0x28
    92d6:	2331      	movs	r3, #49	; 0x31
    92d8:	7003      	strb	r3, [r0, #0]
    92da:	9904      	ldr	r1, [sp, #16]
    92dc:	1c05      	adds	r5, r0, #0
    92de:	3101      	adds	r1, #1
    92e0:	2200      	movs	r2, #0
    92e2:	3501      	adds	r5, #1
    92e4:	9104      	str	r1, [sp, #16]
    92e6:	4691      	mov	r9, r2
    92e8:	e71b      	b.n	9122 <_dtoa_r+0x5d6>
    92ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    92ec:	9b04      	ldr	r3, [sp, #16]
    92ee:	2000      	movs	r0, #0
    92f0:	1ad2      	subs	r2, r2, r3
    92f2:	425d      	negs	r5, r3
    92f4:	920f      	str	r2, [sp, #60]	; 0x3c
    92f6:	9513      	str	r5, [sp, #76]	; 0x4c
    92f8:	9014      	str	r0, [sp, #80]	; 0x50
    92fa:	e501      	b.n	8d00 <_dtoa_r+0x1b4>
    92fc:	426d      	negs	r5, r5
    92fe:	2300      	movs	r3, #0
    9300:	950f      	str	r5, [sp, #60]	; 0x3c
    9302:	469a      	mov	sl, r3
    9304:	e4f4      	b.n	8cf0 <_dtoa_r+0x1a4>
    9306:	2020      	movs	r0, #32
    9308:	1a80      	subs	r0, r0, r2
    930a:	1c35      	adds	r5, r6, #0
    930c:	4085      	lsls	r5, r0
    930e:	1c28      	adds	r0, r5, #0
    9310:	e641      	b.n	8f96 <_dtoa_r+0x44a>
    9312:	2100      	movs	r1, #0
    9314:	9111      	str	r1, [sp, #68]	; 0x44
    9316:	e4e1      	b.n	8cdc <_dtoa_r+0x190>
    9318:	401d      	ands	r5, r3
    931a:	4bc7      	ldr	r3, [pc, #796]	; (9638 <_dtoa_r+0xaec>)
    931c:	980c      	ldr	r0, [sp, #48]	; 0x30
    931e:	990d      	ldr	r1, [sp, #52]	; 0x34
    9320:	6a1a      	ldr	r2, [r3, #32]
    9322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9324:	f004 febe 	bl	e0a4 <____aeabi_ddiv_from_thumb>
    9328:	3701      	adds	r7, #1
    932a:	900c      	str	r0, [sp, #48]	; 0x30
    932c:	910d      	str	r1, [sp, #52]	; 0x34
    932e:	e66f      	b.n	9010 <_dtoa_r+0x4c4>
    9330:	2a02      	cmp	r2, #2
    9332:	d100      	bne.n	9336 <_dtoa_r+0x7ea>
    9334:	e1fa      	b.n	972c <_dtoa_r+0xbe0>
    9336:	2001      	movs	r0, #1
    9338:	4243      	negs	r3, r0
    933a:	2500      	movs	r5, #0
    933c:	9012      	str	r0, [sp, #72]	; 0x48
    933e:	9310      	str	r3, [sp, #64]	; 0x40
    9340:	930b      	str	r3, [sp, #44]	; 0x2c
    9342:	9527      	str	r5, [sp, #156]	; 0x9c
    9344:	e641      	b.n	8fca <_dtoa_r+0x47e>
    9346:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9348:	2a01      	cmp	r2, #1
    934a:	dc00      	bgt.n	934e <_dtoa_r+0x802>
    934c:	e2dd      	b.n	990a <_dtoa_r+0xdbe>
    934e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9352:	3a01      	subs	r2, #1
    9354:	4293      	cmp	r3, r2
    9356:	da00      	bge.n	935a <_dtoa_r+0x80e>
    9358:	e2c3      	b.n	98e2 <_dtoa_r+0xd96>
    935a:	1a9b      	subs	r3, r3, r2
    935c:	4698      	mov	r8, r3
    935e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9360:	2a00      	cmp	r2, #0
    9362:	da00      	bge.n	9366 <_dtoa_r+0x81a>
    9364:	e2e8      	b.n	9938 <_dtoa_r+0xdec>
    9366:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9368:	980b      	ldr	r0, [sp, #44]	; 0x2c
    936a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    936c:	1809      	adds	r1, r1, r0
    936e:	910f      	str	r1, [sp, #60]	; 0x3c
    9370:	4482      	add	sl, r0
    9372:	2101      	movs	r1, #1
    9374:	1c20      	adds	r0, r4, #0
    9376:	f000 fff1 	bl	a35c <__i2b>
    937a:	9002      	str	r0, [sp, #8]
    937c:	e71f      	b.n	91be <_dtoa_r+0x672>
    937e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    9380:	429a      	cmp	r2, r3
    9382:	db00      	blt.n	9386 <_dtoa_r+0x83a>
    9384:	e519      	b.n	8dba <_dtoa_r+0x26e>
    9386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9388:	2a00      	cmp	r2, #0
    938a:	d000      	beq.n	938e <_dtoa_r+0x842>
    938c:	e2b9      	b.n	9902 <_dtoa_r+0xdb6>
    938e:	4ba3      	ldr	r3, [pc, #652]	; (961c <_dtoa_r+0xad0>)
    9390:	4aa1      	ldr	r2, [pc, #644]	; (9618 <_dtoa_r+0xacc>)
    9392:	9802      	ldr	r0, [sp, #8]
    9394:	9903      	ldr	r1, [sp, #12]
    9396:	f004 fe73 	bl	e080 <____aeabi_dmul_from_thumb>
    939a:	1c32      	adds	r2, r6, #0
    939c:	1c3b      	adds	r3, r7, #0
    939e:	f004 fef3 	bl	e188 <____aeabi_dcmpge_from_thumb>
    93a2:	2800      	cmp	r0, #0
    93a4:	d000      	beq.n	93a8 <_dtoa_r+0x85c>
    93a6:	e297      	b.n	98d8 <_dtoa_r+0xd8c>
    93a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    93aa:	4698      	mov	r8, r3
    93ac:	9302      	str	r3, [sp, #8]
    93ae:	e791      	b.n	92d4 <_dtoa_r+0x788>
    93b0:	9f04      	ldr	r7, [sp, #16]
    93b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    93b4:	9717      	str	r7, [sp, #92]	; 0x5c
    93b6:	9015      	str	r0, [sp, #84]	; 0x54
    93b8:	9912      	ldr	r1, [sp, #72]	; 0x48
    93ba:	2900      	cmp	r1, #0
    93bc:	d100      	bne.n	93c0 <_dtoa_r+0x874>
    93be:	e13f      	b.n	9640 <_dtoa_r+0xaf4>
    93c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    93c2:	3b01      	subs	r3, #1
    93c4:	00da      	lsls	r2, r3, #3
    93c6:	4b9d      	ldr	r3, [pc, #628]	; (963c <_dtoa_r+0xaf0>)
    93c8:	189b      	adds	r3, r3, r2
    93ca:	681a      	ldr	r2, [r3, #0]
    93cc:	685b      	ldr	r3, [r3, #4]
    93ce:	4894      	ldr	r0, [pc, #592]	; (9620 <_dtoa_r+0xad4>)
    93d0:	4994      	ldr	r1, [pc, #592]	; (9624 <_dtoa_r+0xad8>)
    93d2:	f004 fe67 	bl	e0a4 <____aeabi_ddiv_from_thumb>
    93d6:	1c2a      	adds	r2, r5, #0
    93d8:	1c33      	adds	r3, r6, #0
    93da:	f004 fe8f 	bl	e0fc <____aeabi_dsub_from_thumb>
    93de:	9008      	str	r0, [sp, #32]
    93e0:	9109      	str	r1, [sp, #36]	; 0x24
    93e2:	980c      	ldr	r0, [sp, #48]	; 0x30
    93e4:	990d      	ldr	r1, [sp, #52]	; 0x34
    93e6:	f004 fee3 	bl	e1b0 <____aeabi_d2iz_from_thumb>
    93ea:	1c05      	adds	r5, r0, #0
    93ec:	f004 fe38 	bl	e060 <____aeabi_i2d_from_thumb>
    93f0:	1c02      	adds	r2, r0, #0
    93f2:	1c0b      	adds	r3, r1, #0
    93f4:	980c      	ldr	r0, [sp, #48]	; 0x30
    93f6:	990d      	ldr	r1, [sp, #52]	; 0x34
    93f8:	f004 fe80 	bl	e0fc <____aeabi_dsub_from_thumb>
    93fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    93fe:	1c2b      	adds	r3, r5, #0
    9400:	3330      	adds	r3, #48	; 0x30
    9402:	7013      	strb	r3, [r2, #0]
    9404:	1c06      	adds	r6, r0, #0
    9406:	1c0f      	adds	r7, r1, #0
    9408:	1c15      	adds	r5, r2, #0
    940a:	9808      	ldr	r0, [sp, #32]
    940c:	9909      	ldr	r1, [sp, #36]	; 0x24
    940e:	1c32      	adds	r2, r6, #0
    9410:	1c3b      	adds	r3, r7, #0
    9412:	3501      	adds	r5, #1
    9414:	f004 febc 	bl	e190 <____aeabi_dcmpgt_from_thumb>
    9418:	2800      	cmp	r0, #0
    941a:	d000      	beq.n	941e <_dtoa_r+0x8d2>
    941c:	e315      	b.n	9a4a <_dtoa_r+0xefe>
    941e:	1c32      	adds	r2, r6, #0
    9420:	1c3b      	adds	r3, r7, #0
    9422:	4881      	ldr	r0, [pc, #516]	; (9628 <_dtoa_r+0xadc>)
    9424:	4981      	ldr	r1, [pc, #516]	; (962c <_dtoa_r+0xae0>)
    9426:	f004 fe69 	bl	e0fc <____aeabi_dsub_from_thumb>
    942a:	1c02      	adds	r2, r0, #0
    942c:	1c0b      	adds	r3, r1, #0
    942e:	9808      	ldr	r0, [sp, #32]
    9430:	9909      	ldr	r1, [sp, #36]	; 0x24
    9432:	f004 fead 	bl	e190 <____aeabi_dcmpgt_from_thumb>
    9436:	2800      	cmp	r0, #0
    9438:	d000      	beq.n	943c <_dtoa_r+0x8f0>
    943a:	e57e      	b.n	8f3a <_dtoa_r+0x3ee>
    943c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    943e:	2b01      	cmp	r3, #1
    9440:	dc00      	bgt.n	9444 <_dtoa_r+0x8f8>
    9442:	e0b4      	b.n	95ae <_dtoa_r+0xa62>
    9444:	4651      	mov	r1, sl
    9446:	3001      	adds	r0, #1
    9448:	910c      	str	r1, [sp, #48]	; 0x30
    944a:	46a8      	mov	r8, r5
    944c:	4682      	mov	sl, r0
    944e:	46a3      	mov	fp, r4
    9450:	e012      	b.n	9478 <_dtoa_r+0x92c>
    9452:	1c32      	adds	r2, r6, #0
    9454:	1c3b      	adds	r3, r7, #0
    9456:	4874      	ldr	r0, [pc, #464]	; (9628 <_dtoa_r+0xadc>)
    9458:	4974      	ldr	r1, [pc, #464]	; (962c <_dtoa_r+0xae0>)
    945a:	f004 fe4f 	bl	e0fc <____aeabi_dsub_from_thumb>
    945e:	9a08      	ldr	r2, [sp, #32]
    9460:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9462:	f004 fea9 	bl	e1b8 <____aeabi_dcmplt_from_thumb>
    9466:	2800      	cmp	r0, #0
    9468:	d000      	beq.n	946c <_dtoa_r+0x920>
    946a:	e260      	b.n	992e <_dtoa_r+0xde2>
    946c:	3001      	adds	r0, #1
    946e:	9915      	ldr	r1, [sp, #84]	; 0x54
    9470:	4482      	add	sl, r0
    9472:	458a      	cmp	sl, r1
    9474:	db00      	blt.n	9478 <_dtoa_r+0x92c>
    9476:	e097      	b.n	95a8 <_dtoa_r+0xa5c>
    9478:	9808      	ldr	r0, [sp, #32]
    947a:	9909      	ldr	r1, [sp, #36]	; 0x24
    947c:	4a6c      	ldr	r2, [pc, #432]	; (9630 <_dtoa_r+0xae4>)
    947e:	4b6d      	ldr	r3, [pc, #436]	; (9634 <_dtoa_r+0xae8>)
    9480:	f004 fdfe 	bl	e080 <____aeabi_dmul_from_thumb>
    9484:	4a6a      	ldr	r2, [pc, #424]	; (9630 <_dtoa_r+0xae4>)
    9486:	4b6b      	ldr	r3, [pc, #428]	; (9634 <_dtoa_r+0xae8>)
    9488:	9008      	str	r0, [sp, #32]
    948a:	9109      	str	r1, [sp, #36]	; 0x24
    948c:	1c30      	adds	r0, r6, #0
    948e:	1c39      	adds	r1, r7, #0
    9490:	f004 fdf6 	bl	e080 <____aeabi_dmul_from_thumb>
    9494:	1c0d      	adds	r5, r1, #0
    9496:	1c04      	adds	r4, r0, #0
    9498:	f004 fe8a 	bl	e1b0 <____aeabi_d2iz_from_thumb>
    949c:	4681      	mov	r9, r0
    949e:	f004 fddf 	bl	e060 <____aeabi_i2d_from_thumb>
    94a2:	1c02      	adds	r2, r0, #0
    94a4:	1c0b      	adds	r3, r1, #0
    94a6:	1c20      	adds	r0, r4, #0
    94a8:	1c29      	adds	r1, r5, #0
    94aa:	f004 fe27 	bl	e0fc <____aeabi_dsub_from_thumb>
    94ae:	2230      	movs	r2, #48	; 0x30
    94b0:	1c13      	adds	r3, r2, #0
    94b2:	444b      	add	r3, r9
    94b4:	4645      	mov	r5, r8
    94b6:	1c06      	adds	r6, r0, #0
    94b8:	702b      	strb	r3, [r5, #0]
    94ba:	2001      	movs	r0, #1
    94bc:	4480      	add	r8, r0
    94be:	9a08      	ldr	r2, [sp, #32]
    94c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    94c2:	1c30      	adds	r0, r6, #0
    94c4:	1c0f      	adds	r7, r1, #0
    94c6:	f004 fe77 	bl	e1b8 <____aeabi_dcmplt_from_thumb>
    94ca:	2800      	cmp	r0, #0
    94cc:	d0c1      	beq.n	9452 <_dtoa_r+0x906>
    94ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    94d0:	4645      	mov	r5, r8
    94d2:	465c      	mov	r4, fp
    94d4:	9304      	str	r3, [sp, #16]
    94d6:	e632      	b.n	913e <_dtoa_r+0x5f2>
    94d8:	3304      	adds	r3, #4
    94da:	1a9b      	subs	r3, r3, r2
    94dc:	2b04      	cmp	r3, #4
    94de:	dc00      	bgt.n	94e2 <_dtoa_r+0x996>
    94e0:	e2b7      	b.n	9a52 <_dtoa_r+0xf06>
    94e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    94e4:	3b04      	subs	r3, #4
    94e6:	18d2      	adds	r2, r2, r3
    94e8:	920f      	str	r2, [sp, #60]	; 0x3c
    94ea:	18ed      	adds	r5, r5, r3
    94ec:	449a      	add	sl, r3
    94ee:	e6bc      	b.n	926a <_dtoa_r+0x71e>
    94f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    94f2:	2b00      	cmp	r3, #0
    94f4:	d000      	beq.n	94f8 <_dtoa_r+0x9ac>
    94f6:	e172      	b.n	97de <_dtoa_r+0xc92>
    94f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    94fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    94fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    94fe:	46ab      	mov	fp, r5
    9500:	2501      	movs	r5, #1
    9502:	44ab      	add	fp, r5
    9504:	4647      	mov	r7, r8
    9506:	1c25      	adds	r5, r4, #0
    9508:	1c1e      	adds	r6, r3, #0
    950a:	4680      	mov	r8, r0
    950c:	4689      	mov	r9, r1
    950e:	9c07      	ldr	r4, [sp, #28]
    9510:	e006      	b.n	9520 <_dtoa_r+0x9d4>
    9512:	1c21      	adds	r1, r4, #0
    9514:	1c28      	adds	r0, r5, #0
    9516:	220a      	movs	r2, #10
    9518:	2300      	movs	r3, #0
    951a:	f000 fe37 	bl	a18c <__multadd>
    951e:	1c04      	adds	r4, r0, #0
    9520:	1c20      	adds	r0, r4, #0
    9522:	1c39      	adds	r1, r7, #0
    9524:	f7ff fa60 	bl	89e8 <quorem>
    9528:	464b      	mov	r3, r9
    952a:	3030      	adds	r0, #48	; 0x30
    952c:	5598      	strb	r0, [r3, r6]
    952e:	1c33      	adds	r3, r6, #0
    9530:	3601      	adds	r6, #1
    9532:	445b      	add	r3, fp
    9534:	45b0      	cmp	r8, r6
    9536:	dcec      	bgt.n	9512 <_dtoa_r+0x9c6>
    9538:	4682      	mov	sl, r0
    953a:	2000      	movs	r0, #0
    953c:	9407      	str	r4, [sp, #28]
    953e:	46b8      	mov	r8, r7
    9540:	1c2c      	adds	r4, r5, #0
    9542:	4681      	mov	r9, r0
    9544:	1c1d      	adds	r5, r3, #0
    9546:	9907      	ldr	r1, [sp, #28]
    9548:	1c20      	adds	r0, r4, #0
    954a:	2201      	movs	r2, #1
    954c:	f001 f830 	bl	a5b0 <__lshift>
    9550:	4641      	mov	r1, r8
    9552:	9007      	str	r0, [sp, #28]
    9554:	f001 f894 	bl	a680 <__mcmp>
    9558:	2800      	cmp	r0, #0
    955a:	dd10      	ble.n	957e <_dtoa_r+0xa32>
    955c:	990a      	ldr	r1, [sp, #40]	; 0x28
    955e:	e000      	b.n	9562 <_dtoa_r+0xa16>
    9560:	1c1d      	adds	r5, r3, #0
    9562:	1e6b      	subs	r3, r5, #1
    9564:	781a      	ldrb	r2, [r3, #0]
    9566:	2a39      	cmp	r2, #57	; 0x39
    9568:	d000      	beq.n	956c <_dtoa_r+0xa20>
    956a:	e22c      	b.n	99c6 <_dtoa_r+0xe7a>
    956c:	428b      	cmp	r3, r1
    956e:	d1f7      	bne.n	9560 <_dtoa_r+0xa14>
    9570:	9a04      	ldr	r2, [sp, #16]
    9572:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    9574:	3201      	adds	r2, #1
    9576:	2331      	movs	r3, #49	; 0x31
    9578:	9204      	str	r2, [sp, #16]
    957a:	703b      	strb	r3, [r7, #0]
    957c:	e5d1      	b.n	9122 <_dtoa_r+0x5d6>
    957e:	2800      	cmp	r0, #0
    9580:	d104      	bne.n	958c <_dtoa_r+0xa40>
    9582:	4651      	mov	r1, sl
    9584:	07c9      	lsls	r1, r1, #31
    9586:	d4e9      	bmi.n	955c <_dtoa_r+0xa10>
    9588:	e000      	b.n	958c <_dtoa_r+0xa40>
    958a:	1c1d      	adds	r5, r3, #0
    958c:	1e6b      	subs	r3, r5, #1
    958e:	781a      	ldrb	r2, [r3, #0]
    9590:	2a30      	cmp	r2, #48	; 0x30
    9592:	d0fa      	beq.n	958a <_dtoa_r+0xa3e>
    9594:	e5c5      	b.n	9122 <_dtoa_r+0x5d6>
    9596:	2100      	movs	r1, #0
    9598:	4589      	cmp	r9, r1
    959a:	d100      	bne.n	959e <_dtoa_r+0xa52>
    959c:	e5cb      	b.n	9136 <_dtoa_r+0x5ea>
    959e:	1c20      	adds	r0, r4, #0
    95a0:	4649      	mov	r1, r9
    95a2:	f000 fde7 	bl	a174 <_Bfree>
    95a6:	e5c6      	b.n	9136 <_dtoa_r+0x5ea>
    95a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    95aa:	465c      	mov	r4, fp
    95ac:	46aa      	mov	sl, r5
    95ae:	9e02      	ldr	r6, [sp, #8]
    95b0:	9f03      	ldr	r7, [sp, #12]
    95b2:	f7ff fbe8 	bl	8d86 <_dtoa_r+0x23a>
    95b6:	9b04      	ldr	r3, [sp, #16]
    95b8:	425d      	negs	r5, r3
    95ba:	2702      	movs	r7, #2
    95bc:	2d00      	cmp	r5, #0
    95be:	d100      	bne.n	95c2 <_dtoa_r+0xa76>
    95c0:	e543      	b.n	904a <_dtoa_r+0x4fe>
    95c2:	230f      	movs	r3, #15
    95c4:	402b      	ands	r3, r5
    95c6:	00da      	lsls	r2, r3, #3
    95c8:	4b1c      	ldr	r3, [pc, #112]	; (963c <_dtoa_r+0xaf0>)
    95ca:	189b      	adds	r3, r3, r2
    95cc:	980c      	ldr	r0, [sp, #48]	; 0x30
    95ce:	990d      	ldr	r1, [sp, #52]	; 0x34
    95d0:	681a      	ldr	r2, [r3, #0]
    95d2:	685b      	ldr	r3, [r3, #4]
    95d4:	f004 fd54 	bl	e080 <____aeabi_dmul_from_thumb>
    95d8:	112d      	asrs	r5, r5, #4
    95da:	900c      	str	r0, [sp, #48]	; 0x30
    95dc:	910d      	str	r1, [sp, #52]	; 0x34
    95de:	2d00      	cmp	r5, #0
    95e0:	d100      	bne.n	95e4 <_dtoa_r+0xa98>
    95e2:	e532      	b.n	904a <_dtoa_r+0x4fe>
    95e4:	2001      	movs	r0, #1
    95e6:	4680      	mov	r8, r0
    95e8:	4e13      	ldr	r6, [pc, #76]	; (9638 <_dtoa_r+0xaec>)
    95ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    95ec:	990d      	ldr	r1, [sp, #52]	; 0x34
    95ee:	4642      	mov	r2, r8
    95f0:	4215      	tst	r5, r2
    95f2:	d004      	beq.n	95fe <_dtoa_r+0xab2>
    95f4:	6832      	ldr	r2, [r6, #0]
    95f6:	6873      	ldr	r3, [r6, #4]
    95f8:	3701      	adds	r7, #1
    95fa:	f004 fd41 	bl	e080 <____aeabi_dmul_from_thumb>
    95fe:	106d      	asrs	r5, r5, #1
    9600:	3608      	adds	r6, #8
    9602:	2d00      	cmp	r5, #0
    9604:	d1f3      	bne.n	95ee <_dtoa_r+0xaa2>
    9606:	900c      	str	r0, [sp, #48]	; 0x30
    9608:	910d      	str	r1, [sp, #52]	; 0x34
    960a:	e51e      	b.n	904a <_dtoa_r+0x4fe>
    960c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    960e:	4690      	mov	r8, r2
    9610:	9202      	str	r2, [sp, #8]
    9612:	e65f      	b.n	92d4 <_dtoa_r+0x788>
    9614:	46c0      	nop			; (mov r8, r8)
    9616:	46c0      	nop			; (mov r8, r8)
    9618:	00000000 	.word	0x00000000
    961c:	40140000 	.word	0x40140000
    9620:	00000000 	.word	0x00000000
    9624:	3fe00000 	.word	0x3fe00000
    9628:	00000000 	.word	0x00000000
    962c:	3ff00000 	.word	0x3ff00000
    9630:	00000000 	.word	0x00000000
    9634:	40240000 	.word	0x40240000
    9638:	0000e620 	.word	0x0000e620
    963c:	0000e558 	.word	0x0000e558
    9640:	9915      	ldr	r1, [sp, #84]	; 0x54
    9642:	4bd3      	ldr	r3, [pc, #844]	; (9990 <_dtoa_r+0xe44>)
    9644:	3901      	subs	r1, #1
    9646:	00ca      	lsls	r2, r1, #3
    9648:	189b      	adds	r3, r3, r2
    964a:	9108      	str	r1, [sp, #32]
    964c:	1c2a      	adds	r2, r5, #0
    964e:	6818      	ldr	r0, [r3, #0]
    9650:	6859      	ldr	r1, [r3, #4]
    9652:	1c33      	adds	r3, r6, #0
    9654:	f004 fd14 	bl	e080 <____aeabi_dmul_from_thumb>
    9658:	9018      	str	r0, [sp, #96]	; 0x60
    965a:	9119      	str	r1, [sp, #100]	; 0x64
    965c:	980c      	ldr	r0, [sp, #48]	; 0x30
    965e:	990d      	ldr	r1, [sp, #52]	; 0x34
    9660:	f004 fda6 	bl	e1b0 <____aeabi_d2iz_from_thumb>
    9664:	1c05      	adds	r5, r0, #0
    9666:	f004 fcfb 	bl	e060 <____aeabi_i2d_from_thumb>
    966a:	1c02      	adds	r2, r0, #0
    966c:	1c0b      	adds	r3, r1, #0
    966e:	980c      	ldr	r0, [sp, #48]	; 0x30
    9670:	990d      	ldr	r1, [sp, #52]	; 0x34
    9672:	f004 fd43 	bl	e0fc <____aeabi_dsub_from_thumb>
    9676:	1c2b      	adds	r3, r5, #0
    9678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    967a:	3330      	adds	r3, #48	; 0x30
    967c:	7013      	strb	r3, [r2, #0]
    967e:	1c06      	adds	r6, r0, #0
    9680:	4693      	mov	fp, r2
    9682:	2301      	movs	r3, #1
    9684:	9815      	ldr	r0, [sp, #84]	; 0x54
    9686:	449b      	add	fp, r3
    9688:	1c0f      	adds	r7, r1, #0
    968a:	465d      	mov	r5, fp
    968c:	4298      	cmp	r0, r3
    968e:	d022      	beq.n	96d6 <_dtoa_r+0xb8a>
    9690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9692:	4691      	mov	r9, r2
    9694:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9696:	465d      	mov	r5, fp
    9698:	4491      	add	r9, r2
    969a:	1c30      	adds	r0, r6, #0
    969c:	46a0      	mov	r8, r4
    969e:	4bb9      	ldr	r3, [pc, #740]	; (9984 <_dtoa_r+0xe38>)
    96a0:	4ab7      	ldr	r2, [pc, #732]	; (9980 <_dtoa_r+0xe34>)
    96a2:	f004 fced 	bl	e080 <____aeabi_dmul_from_thumb>
    96a6:	1c0f      	adds	r7, r1, #0
    96a8:	1c06      	adds	r6, r0, #0
    96aa:	f004 fd81 	bl	e1b0 <____aeabi_d2iz_from_thumb>
    96ae:	1c04      	adds	r4, r0, #0
    96b0:	f004 fcd6 	bl	e060 <____aeabi_i2d_from_thumb>
    96b4:	3430      	adds	r4, #48	; 0x30
    96b6:	1c02      	adds	r2, r0, #0
    96b8:	1c0b      	adds	r3, r1, #0
    96ba:	1c30      	adds	r0, r6, #0
    96bc:	1c39      	adds	r1, r7, #0
    96be:	f004 fd1d 	bl	e0fc <____aeabi_dsub_from_thumb>
    96c2:	702c      	strb	r4, [r5, #0]
    96c4:	3501      	adds	r5, #1
    96c6:	454d      	cmp	r5, r9
    96c8:	d1e9      	bne.n	969e <_dtoa_r+0xb52>
    96ca:	9b08      	ldr	r3, [sp, #32]
    96cc:	1c1d      	adds	r5, r3, #0
    96ce:	1c06      	adds	r6, r0, #0
    96d0:	1c0f      	adds	r7, r1, #0
    96d2:	4644      	mov	r4, r8
    96d4:	445d      	add	r5, fp
    96d6:	4aac      	ldr	r2, [pc, #688]	; (9988 <_dtoa_r+0xe3c>)
    96d8:	4bac      	ldr	r3, [pc, #688]	; (998c <_dtoa_r+0xe40>)
    96da:	9818      	ldr	r0, [sp, #96]	; 0x60
    96dc:	9919      	ldr	r1, [sp, #100]	; 0x64
    96de:	f004 fd27 	bl	e130 <____aeabi_dadd_from_thumb>
    96e2:	1c02      	adds	r2, r0, #0
    96e4:	1c0b      	adds	r3, r1, #0
    96e6:	1c30      	adds	r0, r6, #0
    96e8:	1c39      	adds	r1, r7, #0
    96ea:	f004 fd51 	bl	e190 <____aeabi_dcmpgt_from_thumb>
    96ee:	2800      	cmp	r0, #0
    96f0:	d001      	beq.n	96f6 <_dtoa_r+0xbaa>
    96f2:	f7ff fc22 	bl	8f3a <_dtoa_r+0x3ee>
    96f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    96f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    96fa:	48a3      	ldr	r0, [pc, #652]	; (9988 <_dtoa_r+0xe3c>)
    96fc:	49a3      	ldr	r1, [pc, #652]	; (998c <_dtoa_r+0xe40>)
    96fe:	f004 fcfd 	bl	e0fc <____aeabi_dsub_from_thumb>
    9702:	1c02      	adds	r2, r0, #0
    9704:	1c0b      	adds	r3, r1, #0
    9706:	1c30      	adds	r0, r6, #0
    9708:	1c39      	adds	r1, r7, #0
    970a:	f004 fd55 	bl	e1b8 <____aeabi_dcmplt_from_thumb>
    970e:	2800      	cmp	r0, #0
    9710:	d101      	bne.n	9716 <_dtoa_r+0xbca>
    9712:	e74c      	b.n	95ae <_dtoa_r+0xa62>
    9714:	1c1d      	adds	r5, r3, #0
    9716:	1e6b      	subs	r3, r5, #1
    9718:	781a      	ldrb	r2, [r3, #0]
    971a:	2a30      	cmp	r2, #48	; 0x30
    971c:	d0fa      	beq.n	9714 <_dtoa_r+0xbc8>
    971e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9720:	9104      	str	r1, [sp, #16]
    9722:	e50c      	b.n	913e <_dtoa_r+0x5f2>
    9724:	2100      	movs	r1, #0
    9726:	9112      	str	r1, [sp, #72]	; 0x48
    9728:	f7ff fb05 	bl	8d36 <_dtoa_r+0x1ea>
    972c:	2200      	movs	r2, #0
    972e:	9212      	str	r2, [sp, #72]	; 0x48
    9730:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    9732:	2b00      	cmp	r3, #0
    9734:	dd39      	ble.n	97aa <_dtoa_r+0xc5e>
    9736:	1c18      	adds	r0, r3, #0
    9738:	9310      	str	r3, [sp, #64]	; 0x40
    973a:	930b      	str	r3, [sp, #44]	; 0x2c
    973c:	f7ff fb07 	bl	8d4e <_dtoa_r+0x202>
    9740:	2101      	movs	r1, #1
    9742:	9112      	str	r1, [sp, #72]	; 0x48
    9744:	e7f4      	b.n	9730 <_dtoa_r+0xbe4>
    9746:	9807      	ldr	r0, [sp, #28]
    9748:	4641      	mov	r1, r8
    974a:	f000 ff99 	bl	a680 <__mcmp>
    974e:	2800      	cmp	r0, #0
    9750:	db00      	blt.n	9754 <_dtoa_r+0xc08>
    9752:	e5a0      	b.n	9296 <_dtoa_r+0x74a>
    9754:	9804      	ldr	r0, [sp, #16]
    9756:	3801      	subs	r0, #1
    9758:	9004      	str	r0, [sp, #16]
    975a:	9907      	ldr	r1, [sp, #28]
    975c:	220a      	movs	r2, #10
    975e:	1c20      	adds	r0, r4, #0
    9760:	2300      	movs	r3, #0
    9762:	f000 fd13 	bl	a18c <__multadd>
    9766:	9910      	ldr	r1, [sp, #64]	; 0x40
    9768:	9a12      	ldr	r2, [sp, #72]	; 0x48
    976a:	9007      	str	r0, [sp, #28]
    976c:	910b      	str	r1, [sp, #44]	; 0x2c
    976e:	2a00      	cmp	r2, #0
    9770:	d100      	bne.n	9774 <_dtoa_r+0xc28>
    9772:	e590      	b.n	9296 <_dtoa_r+0x74a>
    9774:	1c20      	adds	r0, r4, #0
    9776:	9902      	ldr	r1, [sp, #8]
    9778:	220a      	movs	r2, #10
    977a:	2300      	movs	r3, #0
    977c:	f000 fd06 	bl	a18c <__multadd>
    9780:	9002      	str	r0, [sp, #8]
    9782:	e588      	b.n	9296 <_dtoa_r+0x74a>
    9784:	4641      	mov	r1, r8
    9786:	690b      	ldr	r3, [r1, #16]
    9788:	3303      	adds	r3, #3
    978a:	009b      	lsls	r3, r3, #2
    978c:	4443      	add	r3, r8
    978e:	6858      	ldr	r0, [r3, #4]
    9790:	f000 fd92 	bl	a2b8 <__hi0bits>
    9794:	2320      	movs	r3, #32
    9796:	1a1b      	subs	r3, r3, r0
    9798:	e55b      	b.n	9252 <_dtoa_r+0x706>
    979a:	2200      	movs	r2, #0
    979c:	230e      	movs	r3, #14
    979e:	4283      	cmp	r3, r0
    97a0:	4152      	adcs	r2, r2
    97a2:	4015      	ands	r5, r2
    97a4:	900b      	str	r0, [sp, #44]	; 0x2c
    97a6:	f7ff fc10 	bl	8fca <_dtoa_r+0x47e>
    97aa:	2001      	movs	r0, #1
    97ac:	9010      	str	r0, [sp, #64]	; 0x40
    97ae:	900b      	str	r0, [sp, #44]	; 0x2c
    97b0:	9027      	str	r0, [sp, #156]	; 0x9c
    97b2:	f7ff fc0a 	bl	8fca <_dtoa_r+0x47e>
    97b6:	454e      	cmp	r6, r9
    97b8:	d000      	beq.n	97bc <_dtoa_r+0xc70>
    97ba:	e545      	b.n	9248 <_dtoa_r+0x6fc>
    97bc:	033b      	lsls	r3, r7, #12
    97be:	1c3a      	adds	r2, r7, #0
    97c0:	454b      	cmp	r3, r9
    97c2:	d000      	beq.n	97c6 <_dtoa_r+0xc7a>
    97c4:	e540      	b.n	9248 <_dtoa_r+0x6fc>
    97c6:	4b73      	ldr	r3, [pc, #460]	; (9994 <_dtoa_r+0xe48>)
    97c8:	401a      	ands	r2, r3
    97ca:	4691      	mov	r9, r2
    97cc:	d100      	bne.n	97d0 <_dtoa_r+0xc84>
    97ce:	e53b      	b.n	9248 <_dtoa_r+0x6fc>
    97d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    97d2:	2201      	movs	r2, #1
    97d4:	3101      	adds	r1, #1
    97d6:	910f      	str	r1, [sp, #60]	; 0x3c
    97d8:	4492      	add	sl, r2
    97da:	4691      	mov	r9, r2
    97dc:	e534      	b.n	9248 <_dtoa_r+0x6fc>
    97de:	2d00      	cmp	r5, #0
    97e0:	dd05      	ble.n	97ee <_dtoa_r+0xca2>
    97e2:	1c20      	adds	r0, r4, #0
    97e4:	9902      	ldr	r1, [sp, #8]
    97e6:	1c2a      	adds	r2, r5, #0
    97e8:	f000 fee2 	bl	a5b0 <__lshift>
    97ec:	9002      	str	r0, [sp, #8]
    97ee:	9a02      	ldr	r2, [sp, #8]
    97f0:	2300      	movs	r3, #0
    97f2:	4693      	mov	fp, r2
    97f4:	4599      	cmp	r9, r3
    97f6:	d000      	beq.n	97fa <_dtoa_r+0xcae>
    97f8:	e0d0      	b.n	999c <_dtoa_r+0xe50>
    97fa:	2301      	movs	r3, #1
    97fc:	9802      	ldr	r0, [sp, #8]
    97fe:	4033      	ands	r3, r6
    9800:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9802:	9306      	str	r3, [sp, #24]
    9804:	1c07      	adds	r7, r0, #0
    9806:	46c1      	mov	r9, r8
    9808:	4649      	mov	r1, r9
    980a:	9807      	ldr	r0, [sp, #28]
    980c:	f7ff f8ec 	bl	89e8 <quorem>
    9810:	3030      	adds	r0, #48	; 0x30
    9812:	9002      	str	r0, [sp, #8]
    9814:	1c39      	adds	r1, r7, #0
    9816:	9807      	ldr	r0, [sp, #28]
    9818:	f000 ff32 	bl	a680 <__mcmp>
    981c:	4649      	mov	r1, r9
    981e:	4682      	mov	sl, r0
    9820:	465a      	mov	r2, fp
    9822:	1c20      	adds	r0, r4, #0
    9824:	f000 ff4c 	bl	a6c0 <__mdiff>
    9828:	68c3      	ldr	r3, [r0, #12]
    982a:	4680      	mov	r8, r0
    982c:	2601      	movs	r6, #1
    982e:	2b00      	cmp	r3, #0
    9830:	d03a      	beq.n	98a8 <_dtoa_r+0xd5c>
    9832:	4641      	mov	r1, r8
    9834:	1c20      	adds	r0, r4, #0
    9836:	f000 fc9d 	bl	a174 <_Bfree>
    983a:	9926      	ldr	r1, [sp, #152]	; 0x98
    983c:	4331      	orrs	r1, r6
    983e:	d103      	bne.n	9848 <_dtoa_r+0xcfc>
    9840:	9a06      	ldr	r2, [sp, #24]
    9842:	2a00      	cmp	r2, #0
    9844:	d100      	bne.n	9848 <_dtoa_r+0xcfc>
    9846:	e0e7      	b.n	9a18 <_dtoa_r+0xecc>
    9848:	2000      	movs	r0, #0
    984a:	4582      	cmp	sl, r0
    984c:	db78      	blt.n	9940 <_dtoa_r+0xdf4>
    984e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    9850:	4651      	mov	r1, sl
    9852:	4311      	orrs	r1, r2
    9854:	d102      	bne.n	985c <_dtoa_r+0xd10>
    9856:	9b06      	ldr	r3, [sp, #24]
    9858:	4283      	cmp	r3, r0
    985a:	d071      	beq.n	9940 <_dtoa_r+0xdf4>
    985c:	2e00      	cmp	r6, #0
    985e:	dd00      	ble.n	9862 <_dtoa_r+0xd16>
    9860:	e0c3      	b.n	99ea <_dtoa_r+0xe9e>
    9862:	2108      	movs	r1, #8
    9864:	4668      	mov	r0, sp
    9866:	5c08      	ldrb	r0, [r1, r0]
    9868:	7028      	strb	r0, [r5, #0]
    986a:	990a      	ldr	r1, [sp, #40]	; 0x28
    986c:	3501      	adds	r5, #1
    986e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9870:	1a6b      	subs	r3, r5, r1
    9872:	4293      	cmp	r3, r2
    9874:	d100      	bne.n	9878 <_dtoa_r+0xd2c>
    9876:	e0b1      	b.n	99dc <_dtoa_r+0xe90>
    9878:	1c20      	adds	r0, r4, #0
    987a:	9907      	ldr	r1, [sp, #28]
    987c:	220a      	movs	r2, #10
    987e:	2300      	movs	r3, #0
    9880:	f000 fc84 	bl	a18c <__multadd>
    9884:	9007      	str	r0, [sp, #28]
    9886:	455f      	cmp	r7, fp
    9888:	d014      	beq.n	98b4 <_dtoa_r+0xd68>
    988a:	1c39      	adds	r1, r7, #0
    988c:	220a      	movs	r2, #10
    988e:	2300      	movs	r3, #0
    9890:	1c20      	adds	r0, r4, #0
    9892:	f000 fc7b 	bl	a18c <__multadd>
    9896:	4659      	mov	r1, fp
    9898:	1c07      	adds	r7, r0, #0
    989a:	220a      	movs	r2, #10
    989c:	1c20      	adds	r0, r4, #0
    989e:	2300      	movs	r3, #0
    98a0:	f000 fc74 	bl	a18c <__multadd>
    98a4:	4683      	mov	fp, r0
    98a6:	e7af      	b.n	9808 <_dtoa_r+0xcbc>
    98a8:	9807      	ldr	r0, [sp, #28]
    98aa:	4641      	mov	r1, r8
    98ac:	f000 fee8 	bl	a680 <__mcmp>
    98b0:	1c06      	adds	r6, r0, #0
    98b2:	e7be      	b.n	9832 <_dtoa_r+0xce6>
    98b4:	1c39      	adds	r1, r7, #0
    98b6:	1c20      	adds	r0, r4, #0
    98b8:	220a      	movs	r2, #10
    98ba:	2300      	movs	r3, #0
    98bc:	f000 fc66 	bl	a18c <__multadd>
    98c0:	1c07      	adds	r7, r0, #0
    98c2:	4683      	mov	fp, r0
    98c4:	e7a0      	b.n	9808 <_dtoa_r+0xcbc>
    98c6:	464c      	mov	r4, r9
    98c8:	e439      	b.n	913e <_dtoa_r+0x5f2>
    98ca:	1c20      	adds	r0, r4, #0
    98cc:	9907      	ldr	r1, [sp, #28]
    98ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    98d0:	f000 fe14 	bl	a4fc <__pow5mult>
    98d4:	9007      	str	r0, [sp, #28]
    98d6:	e4a4      	b.n	9222 <_dtoa_r+0x6d6>
    98d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    98da:	4680      	mov	r8, r0
    98dc:	9002      	str	r0, [sp, #8]
    98de:	f7ff fc1a 	bl	9116 <_dtoa_r+0x5ca>
    98e2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    98e4:	9814      	ldr	r0, [sp, #80]	; 0x50
    98e6:	1b52      	subs	r2, r2, r5
    98e8:	1880      	adds	r0, r0, r2
    98ea:	18ad      	adds	r5, r5, r2
    98ec:	2100      	movs	r1, #0
    98ee:	9014      	str	r0, [sp, #80]	; 0x50
    98f0:	9513      	str	r5, [sp, #76]	; 0x4c
    98f2:	4688      	mov	r8, r1
    98f4:	e533      	b.n	935e <_dtoa_r+0x812>
    98f6:	1c20      	adds	r0, r4, #0
    98f8:	9907      	ldr	r1, [sp, #28]
    98fa:	f000 fdff 	bl	a4fc <__pow5mult>
    98fe:	9007      	str	r0, [sp, #28]
    9900:	e48f      	b.n	9222 <_dtoa_r+0x6d6>
    9902:	4698      	mov	r8, r3
    9904:	9302      	str	r3, [sp, #8]
    9906:	f7ff fc06 	bl	9116 <_dtoa_r+0x5ca>
    990a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    990c:	2b00      	cmp	r3, #0
    990e:	d05e      	beq.n	99ce <_dtoa_r+0xe82>
    9910:	4d21      	ldr	r5, [pc, #132]	; (9998 <_dtoa_r+0xe4c>)
    9912:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9914:	1940      	adds	r0, r0, r5
    9916:	4688      	mov	r8, r1
    9918:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    991a:	e526      	b.n	936a <_dtoa_r+0x81e>
    991c:	3201      	adds	r2, #1
    991e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9920:	0612      	lsls	r2, r2, #24
    9922:	0e12      	lsrs	r2, r2, #24
    9924:	910a      	str	r1, [sp, #40]	; 0x28
    9926:	9004      	str	r0, [sp, #16]
    9928:	701a      	strb	r2, [r3, #0]
    992a:	f7ff fc08 	bl	913e <_dtoa_r+0x5f2>
    992e:	4645      	mov	r5, r8
    9930:	990a      	ldr	r1, [sp, #40]	; 0x28
    9932:	465c      	mov	r4, fp
    9934:	f7ff fb04 	bl	8f40 <_dtoa_r+0x3f4>
    9938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    993a:	2000      	movs	r0, #0
    993c:	1a9d      	subs	r5, r3, r2
    993e:	e514      	b.n	936a <_dtoa_r+0x81e>
    9940:	9802      	ldr	r0, [sp, #8]
    9942:	46c8      	mov	r8, r9
    9944:	4682      	mov	sl, r0
    9946:	46b9      	mov	r9, r7
    9948:	2e00      	cmp	r6, #0
    994a:	dd0f      	ble.n	996c <_dtoa_r+0xe20>
    994c:	9907      	ldr	r1, [sp, #28]
    994e:	1c20      	adds	r0, r4, #0
    9950:	2201      	movs	r2, #1
    9952:	f000 fe2d 	bl	a5b0 <__lshift>
    9956:	4641      	mov	r1, r8
    9958:	9007      	str	r0, [sp, #28]
    995a:	f000 fe91 	bl	a680 <__mcmp>
    995e:	2800      	cmp	r0, #0
    9960:	dd6d      	ble.n	9a3e <_dtoa_r+0xef2>
    9962:	2239      	movs	r2, #57	; 0x39
    9964:	4592      	cmp	sl, r2
    9966:	d050      	beq.n	9a0a <_dtoa_r+0xebe>
    9968:	2301      	movs	r3, #1
    996a:	449a      	add	sl, r3
    996c:	4657      	mov	r7, sl
    996e:	4658      	mov	r0, fp
    9970:	702f      	strb	r7, [r5, #0]
    9972:	3501      	adds	r5, #1
    9974:	9002      	str	r0, [sp, #8]
    9976:	f7ff fbd4 	bl	9122 <_dtoa_r+0x5d6>
    997a:	46c0      	nop			; (mov r8, r8)
    997c:	46c0      	nop			; (mov r8, r8)
    997e:	46c0      	nop			; (mov r8, r8)
    9980:	00000000 	.word	0x00000000
    9984:	40240000 	.word	0x40240000
    9988:	00000000 	.word	0x00000000
    998c:	3fe00000 	.word	0x3fe00000
    9990:	0000e558 	.word	0x0000e558
    9994:	7ff00000 	.word	0x7ff00000
    9998:	00000433 	.word	0x00000433
    999c:	6851      	ldr	r1, [r2, #4]
    999e:	1c20      	adds	r0, r4, #0
    99a0:	f000 fbbe 	bl	a120 <_Balloc>
    99a4:	9b02      	ldr	r3, [sp, #8]
    99a6:	691a      	ldr	r2, [r3, #16]
    99a8:	9902      	ldr	r1, [sp, #8]
    99aa:	3202      	adds	r2, #2
    99ac:	1c05      	adds	r5, r0, #0
    99ae:	310c      	adds	r1, #12
    99b0:	0092      	lsls	r2, r2, #2
    99b2:	300c      	adds	r0, #12
    99b4:	f7fb fe64 	bl	5680 <memcpy>
    99b8:	1c20      	adds	r0, r4, #0
    99ba:	1c29      	adds	r1, r5, #0
    99bc:	2201      	movs	r2, #1
    99be:	f000 fdf7 	bl	a5b0 <__lshift>
    99c2:	4683      	mov	fp, r0
    99c4:	e719      	b.n	97fa <_dtoa_r+0xcae>
    99c6:	3201      	adds	r2, #1
    99c8:	701a      	strb	r2, [r3, #0]
    99ca:	f7ff fbaa 	bl	9122 <_dtoa_r+0x5d6>
    99ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    99d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    99d2:	2036      	movs	r0, #54	; 0x36
    99d4:	1ac0      	subs	r0, r0, r3
    99d6:	4690      	mov	r8, r2
    99d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    99da:	e4c6      	b.n	936a <_dtoa_r+0x81e>
    99dc:	9802      	ldr	r0, [sp, #8]
    99de:	4659      	mov	r1, fp
    99e0:	46c8      	mov	r8, r9
    99e2:	4682      	mov	sl, r0
    99e4:	46b9      	mov	r9, r7
    99e6:	9102      	str	r1, [sp, #8]
    99e8:	e5ad      	b.n	9546 <_dtoa_r+0x9fa>
    99ea:	9802      	ldr	r0, [sp, #8]
    99ec:	2139      	movs	r1, #57	; 0x39
    99ee:	4682      	mov	sl, r0
    99f0:	46c8      	mov	r8, r9
    99f2:	46b9      	mov	r9, r7
    99f4:	458a      	cmp	sl, r1
    99f6:	d008      	beq.n	9a0a <_dtoa_r+0xebe>
    99f8:	2001      	movs	r0, #1
    99fa:	1c03      	adds	r3, r0, #0
    99fc:	4453      	add	r3, sl
    99fe:	4659      	mov	r1, fp
    9a00:	702b      	strb	r3, [r5, #0]
    9a02:	182d      	adds	r5, r5, r0
    9a04:	9102      	str	r1, [sp, #8]
    9a06:	f7ff fb8c 	bl	9122 <_dtoa_r+0x5d6>
    9a0a:	2339      	movs	r3, #57	; 0x39
    9a0c:	702b      	strb	r3, [r5, #0]
    9a0e:	465a      	mov	r2, fp
    9a10:	3501      	adds	r5, #1
    9a12:	9202      	str	r2, [sp, #8]
    9a14:	990a      	ldr	r1, [sp, #40]	; 0x28
    9a16:	e5a4      	b.n	9562 <_dtoa_r+0xa16>
    9a18:	9b02      	ldr	r3, [sp, #8]
    9a1a:	46c8      	mov	r8, r9
    9a1c:	4656      	mov	r6, sl
    9a1e:	46b9      	mov	r9, r7
    9a20:	469a      	mov	sl, r3
    9a22:	2739      	movs	r7, #57	; 0x39
    9a24:	45ba      	cmp	sl, r7
    9a26:	d0f0      	beq.n	9a0a <_dtoa_r+0xebe>
    9a28:	17f3      	asrs	r3, r6, #31
    9a2a:	1b9b      	subs	r3, r3, r6
    9a2c:	0fdb      	lsrs	r3, r3, #31
    9a2e:	449a      	add	sl, r3
    9a30:	4650      	mov	r0, sl
    9a32:	4659      	mov	r1, fp
    9a34:	7028      	strb	r0, [r5, #0]
    9a36:	3501      	adds	r5, #1
    9a38:	9102      	str	r1, [sp, #8]
    9a3a:	f7ff fb72 	bl	9122 <_dtoa_r+0x5d6>
    9a3e:	2800      	cmp	r0, #0
    9a40:	d194      	bne.n	996c <_dtoa_r+0xe20>
    9a42:	4651      	mov	r1, sl
    9a44:	07c9      	lsls	r1, r1, #31
    9a46:	d591      	bpl.n	996c <_dtoa_r+0xe20>
    9a48:	e78b      	b.n	9962 <_dtoa_r+0xe16>
    9a4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9a4c:	9204      	str	r2, [sp, #16]
    9a4e:	f7ff fb76 	bl	913e <_dtoa_r+0x5f2>
    9a52:	2b04      	cmp	r3, #4
    9a54:	d101      	bne.n	9a5a <_dtoa_r+0xf0e>
    9a56:	f7ff fc08 	bl	926a <_dtoa_r+0x71e>
    9a5a:	331c      	adds	r3, #28
    9a5c:	f7ff fc00 	bl	9260 <_dtoa_r+0x714>
    9a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9a62:	230e      	movs	r3, #14
    9a64:	1c08      	adds	r0, r1, #0
    9a66:	4293      	cmp	r3, r2
    9a68:	4148      	adcs	r0, r1
    9a6a:	4005      	ands	r5, r0
    9a6c:	f7ff faaf 	bl	8fce <_dtoa_r+0x482>

00009a70 <_fclose_r>:
    9a70:	b570      	push	{r4, r5, r6, lr}
    9a72:	1c05      	adds	r5, r0, #0
    9a74:	1c0c      	adds	r4, r1, #0
    9a76:	1e0e      	subs	r6, r1, #0
    9a78:	d033      	beq.n	9ae2 <_fclose_r+0x72>
    9a7a:	f7fb f9bb 	bl	4df4 <__sfp_lock_acquire>
    9a7e:	2d00      	cmp	r5, #0
    9a80:	d002      	beq.n	9a88 <_fclose_r+0x18>
    9a82:	6bab      	ldr	r3, [r5, #56]	; 0x38
    9a84:	2b00      	cmp	r3, #0
    9a86:	d030      	beq.n	9aea <_fclose_r+0x7a>
    9a88:	220c      	movs	r2, #12
    9a8a:	5ea6      	ldrsh	r6, [r4, r2]
    9a8c:	2e00      	cmp	r6, #0
    9a8e:	d026      	beq.n	9ade <_fclose_r+0x6e>
    9a90:	1c28      	adds	r0, r5, #0
    9a92:	1c21      	adds	r1, r4, #0
    9a94:	f7fa fff2 	bl	4a7c <_fflush_r>
    9a98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9a9a:	1c06      	adds	r6, r0, #0
    9a9c:	2b00      	cmp	r3, #0
    9a9e:	d005      	beq.n	9aac <_fclose_r+0x3c>
    9aa0:	69e1      	ldr	r1, [r4, #28]
    9aa2:	1c28      	adds	r0, r5, #0
    9aa4:	f000 f83e 	bl	9b24 <fclose+0x18>
    9aa8:	2800      	cmp	r0, #0
    9aaa:	db2b      	blt.n	9b04 <_fclose_r+0x94>
    9aac:	89a3      	ldrh	r3, [r4, #12]
    9aae:	061a      	lsls	r2, r3, #24
    9ab0:	d423      	bmi.n	9afa <_fclose_r+0x8a>
    9ab2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    9ab4:	2900      	cmp	r1, #0
    9ab6:	d008      	beq.n	9aca <_fclose_r+0x5a>
    9ab8:	1c23      	adds	r3, r4, #0
    9aba:	3340      	adds	r3, #64	; 0x40
    9abc:	4299      	cmp	r1, r3
    9abe:	d002      	beq.n	9ac6 <_fclose_r+0x56>
    9ac0:	1c28      	adds	r0, r5, #0
    9ac2:	f7fb fa0d 	bl	4ee0 <_free_r>
    9ac6:	2300      	movs	r3, #0
    9ac8:	6323      	str	r3, [r4, #48]	; 0x30
    9aca:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9acc:	2900      	cmp	r1, #0
    9ace:	d004      	beq.n	9ada <_fclose_r+0x6a>
    9ad0:	1c28      	adds	r0, r5, #0
    9ad2:	f7fb fa05 	bl	4ee0 <_free_r>
    9ad6:	2300      	movs	r3, #0
    9ad8:	6463      	str	r3, [r4, #68]	; 0x44
    9ada:	2300      	movs	r3, #0
    9adc:	81a3      	strh	r3, [r4, #12]
    9ade:	f7fb f98b 	bl	4df8 <__sfp_lock_release>
    9ae2:	1c30      	adds	r0, r6, #0
    9ae4:	bc70      	pop	{r4, r5, r6}
    9ae6:	bc02      	pop	{r1}
    9ae8:	4708      	bx	r1
    9aea:	1c28      	adds	r0, r5, #0
    9aec:	f7fb f8ba 	bl	4c64 <__sinit>
    9af0:	220c      	movs	r2, #12
    9af2:	5ea6      	ldrsh	r6, [r4, r2]
    9af4:	2e00      	cmp	r6, #0
    9af6:	d1cb      	bne.n	9a90 <_fclose_r+0x20>
    9af8:	e7f1      	b.n	9ade <_fclose_r+0x6e>
    9afa:	6921      	ldr	r1, [r4, #16]
    9afc:	1c28      	adds	r0, r5, #0
    9afe:	f7fb f9ef 	bl	4ee0 <_free_r>
    9b02:	e7d6      	b.n	9ab2 <_fclose_r+0x42>
    9b04:	2601      	movs	r6, #1
    9b06:	4276      	negs	r6, r6
    9b08:	e7d0      	b.n	9aac <_fclose_r+0x3c>
    9b0a:	46c0      	nop			; (mov r8, r8)

00009b0c <fclose>:
    9b0c:	b508      	push	{r3, lr}
    9b0e:	4b04      	ldr	r3, [pc, #16]	; (9b20 <fclose+0x14>)
    9b10:	1c01      	adds	r1, r0, #0
    9b12:	6818      	ldr	r0, [r3, #0]
    9b14:	f7ff ffac 	bl	9a70 <_fclose_r>
    9b18:	bc08      	pop	{r3}
    9b1a:	bc02      	pop	{r1}
    9b1c:	4708      	bx	r1
    9b1e:	46c0      	nop			; (mov r8, r8)
    9b20:	40000000 	.word	0x40000000
    9b24:	4718      	bx	r3
    9b26:	46c0      	nop			; (mov r8, r8)

00009b28 <__sfvwrite_r>:
    9b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b2a:	465f      	mov	r7, fp
    9b2c:	4656      	mov	r6, sl
    9b2e:	464d      	mov	r5, r9
    9b30:	4644      	mov	r4, r8
    9b32:	b4f0      	push	{r4, r5, r6, r7}
    9b34:	b083      	sub	sp, #12
    9b36:	9001      	str	r0, [sp, #4]
    9b38:	6890      	ldr	r0, [r2, #8]
    9b3a:	1c0c      	adds	r4, r1, #0
    9b3c:	1c16      	adds	r6, r2, #0
    9b3e:	2800      	cmp	r0, #0
    9b40:	d028      	beq.n	9b94 <__sfvwrite_r+0x6c>
    9b42:	898b      	ldrh	r3, [r1, #12]
    9b44:	1c1a      	adds	r2, r3, #0
    9b46:	0718      	lsls	r0, r3, #28
    9b48:	d52d      	bpl.n	9ba6 <__sfvwrite_r+0x7e>
    9b4a:	6909      	ldr	r1, [r1, #16]
    9b4c:	2900      	cmp	r1, #0
    9b4e:	d02a      	beq.n	9ba6 <__sfvwrite_r+0x7e>
    9b50:	2102      	movs	r1, #2
    9b52:	6835      	ldr	r5, [r6, #0]
    9b54:	4011      	ands	r1, r2
    9b56:	d033      	beq.n	9bc0 <__sfvwrite_r+0x98>
    9b58:	2380      	movs	r3, #128	; 0x80
    9b5a:	2200      	movs	r2, #0
    9b5c:	00db      	lsls	r3, r3, #3
    9b5e:	4691      	mov	r9, r2
    9b60:	1c17      	adds	r7, r2, #0
    9b62:	469a      	mov	sl, r3
    9b64:	46b0      	mov	r8, r6
    9b66:	2f00      	cmp	r7, #0
    9b68:	d068      	beq.n	9c3c <__sfvwrite_r+0x114>
    9b6a:	69e1      	ldr	r1, [r4, #28]
    9b6c:	1c3b      	adds	r3, r7, #0
    9b6e:	4557      	cmp	r7, sl
    9b70:	d901      	bls.n	9b76 <__sfvwrite_r+0x4e>
    9b72:	2380      	movs	r3, #128	; 0x80
    9b74:	00db      	lsls	r3, r3, #3
    9b76:	6a66      	ldr	r6, [r4, #36]	; 0x24
    9b78:	9801      	ldr	r0, [sp, #4]
    9b7a:	464a      	mov	r2, r9
    9b7c:	f000 f974 	bl	9e68 <__sfvwrite_r+0x340>
    9b80:	2800      	cmp	r0, #0
    9b82:	dd63      	ble.n	9c4c <__sfvwrite_r+0x124>
    9b84:	4641      	mov	r1, r8
    9b86:	688b      	ldr	r3, [r1, #8]
    9b88:	4481      	add	r9, r0
    9b8a:	1a3f      	subs	r7, r7, r0
    9b8c:	1a18      	subs	r0, r3, r0
    9b8e:	6088      	str	r0, [r1, #8]
    9b90:	2800      	cmp	r0, #0
    9b92:	d1e8      	bne.n	9b66 <__sfvwrite_r+0x3e>
    9b94:	b003      	add	sp, #12
    9b96:	bc3c      	pop	{r2, r3, r4, r5}
    9b98:	4690      	mov	r8, r2
    9b9a:	4699      	mov	r9, r3
    9b9c:	46a2      	mov	sl, r4
    9b9e:	46ab      	mov	fp, r5
    9ba0:	bcf0      	pop	{r4, r5, r6, r7}
    9ba2:	bc02      	pop	{r1}
    9ba4:	4708      	bx	r1
    9ba6:	9801      	ldr	r0, [sp, #4]
    9ba8:	1c21      	adds	r1, r4, #0
    9baa:	f7fe febd 	bl	8928 <__swsetup_r>
    9bae:	2800      	cmp	r0, #0
    9bb0:	d000      	beq.n	9bb4 <__sfvwrite_r+0x8c>
    9bb2:	e14d      	b.n	9e50 <__sfvwrite_r+0x328>
    9bb4:	89a3      	ldrh	r3, [r4, #12]
    9bb6:	2102      	movs	r1, #2
    9bb8:	1c1a      	adds	r2, r3, #0
    9bba:	6835      	ldr	r5, [r6, #0]
    9bbc:	4011      	ands	r1, r2
    9bbe:	d1cb      	bne.n	9b58 <__sfvwrite_r+0x30>
    9bc0:	2001      	movs	r0, #1
    9bc2:	4002      	ands	r2, r0
    9bc4:	d049      	beq.n	9c5a <__sfvwrite_r+0x132>
    9bc6:	9100      	str	r1, [sp, #0]
    9bc8:	468a      	mov	sl, r1
    9bca:	468b      	mov	fp, r1
    9bcc:	1c0f      	adds	r7, r1, #0
    9bce:	2f00      	cmp	r7, #0
    9bd0:	d076      	beq.n	9cc0 <__sfvwrite_r+0x198>
    9bd2:	9a00      	ldr	r2, [sp, #0]
    9bd4:	2a00      	cmp	r2, #0
    9bd6:	d100      	bne.n	9bda <__sfvwrite_r+0xb2>
    9bd8:	e0c2      	b.n	9d60 <__sfvwrite_r+0x238>
    9bda:	46d1      	mov	r9, sl
    9bdc:	45ba      	cmp	sl, r7
    9bde:	d900      	bls.n	9be2 <__sfvwrite_r+0xba>
    9be0:	46b9      	mov	r9, r7
    9be2:	6963      	ldr	r3, [r4, #20]
    9be4:	68a2      	ldr	r2, [r4, #8]
    9be6:	18d2      	adds	r2, r2, r3
    9be8:	4690      	mov	r8, r2
    9bea:	6820      	ldr	r0, [r4, #0]
    9bec:	2201      	movs	r2, #1
    9bee:	45c1      	cmp	r9, r8
    9bf0:	dc00      	bgt.n	9bf4 <__sfvwrite_r+0xcc>
    9bf2:	2200      	movs	r2, #0
    9bf4:	0612      	lsls	r2, r2, #24
    9bf6:	2a00      	cmp	r2, #0
    9bf8:	d000      	beq.n	9bfc <__sfvwrite_r+0xd4>
    9bfa:	e09e      	b.n	9d3a <__sfvwrite_r+0x212>
    9bfc:	4599      	cmp	r9, r3
    9bfe:	da00      	bge.n	9c02 <__sfvwrite_r+0xda>
    9c00:	e07e      	b.n	9d00 <__sfvwrite_r+0x1d8>
    9c02:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9c04:	69e1      	ldr	r1, [r4, #28]
    9c06:	4684      	mov	ip, r0
    9c08:	465a      	mov	r2, fp
    9c0a:	9801      	ldr	r0, [sp, #4]
    9c0c:	f000 f92d 	bl	9e6a <__sfvwrite_r+0x342>
    9c10:	2100      	movs	r1, #0
    9c12:	4680      	mov	r8, r0
    9c14:	4588      	cmp	r8, r1
    9c16:	dd19      	ble.n	9c4c <__sfvwrite_r+0x124>
    9c18:	4653      	mov	r3, sl
    9c1a:	4640      	mov	r0, r8
    9c1c:	1a1b      	subs	r3, r3, r0
    9c1e:	469a      	mov	sl, r3
    9c20:	2100      	movs	r1, #0
    9c22:	458a      	cmp	sl, r1
    9c24:	d100      	bne.n	9c28 <__sfvwrite_r+0x100>
    9c26:	e07f      	b.n	9d28 <__sfvwrite_r+0x200>
    9c28:	68b3      	ldr	r3, [r6, #8]
    9c2a:	4640      	mov	r0, r8
    9c2c:	1a1b      	subs	r3, r3, r0
    9c2e:	44c3      	add	fp, r8
    9c30:	1a3f      	subs	r7, r7, r0
    9c32:	60b3      	str	r3, [r6, #8]
    9c34:	2b00      	cmp	r3, #0
    9c36:	d1ca      	bne.n	9bce <__sfvwrite_r+0xa6>
    9c38:	1c18      	adds	r0, r3, #0
    9c3a:	e7ab      	b.n	9b94 <__sfvwrite_r+0x6c>
    9c3c:	682b      	ldr	r3, [r5, #0]
    9c3e:	686f      	ldr	r7, [r5, #4]
    9c40:	4699      	mov	r9, r3
    9c42:	3508      	adds	r5, #8
    9c44:	e78f      	b.n	9b66 <__sfvwrite_r+0x3e>
    9c46:	9a01      	ldr	r2, [sp, #4]
    9c48:	230c      	movs	r3, #12
    9c4a:	6013      	str	r3, [r2, #0]
    9c4c:	89a3      	ldrh	r3, [r4, #12]
    9c4e:	2240      	movs	r2, #64	; 0x40
    9c50:	4313      	orrs	r3, r2
    9c52:	2001      	movs	r0, #1
    9c54:	81a3      	strh	r3, [r4, #12]
    9c56:	4240      	negs	r0, r0
    9c58:	e79c      	b.n	9b94 <__sfvwrite_r+0x6c>
    9c5a:	4691      	mov	r9, r2
    9c5c:	1c17      	adds	r7, r2, #0
    9c5e:	2f00      	cmp	r7, #0
    9c60:	d029      	beq.n	9cb6 <__sfvwrite_r+0x18e>
    9c62:	68a1      	ldr	r1, [r4, #8]
    9c64:	2280      	movs	r2, #128	; 0x80
    9c66:	0092      	lsls	r2, r2, #2
    9c68:	4688      	mov	r8, r1
    9c6a:	4213      	tst	r3, r2
    9c6c:	d02f      	beq.n	9cce <__sfvwrite_r+0x1a6>
    9c6e:	468a      	mov	sl, r1
    9c70:	4547      	cmp	r7, r8
    9c72:	d340      	bcc.n	9cf6 <__sfvwrite_r+0x1ce>
    9c74:	2090      	movs	r0, #144	; 0x90
    9c76:	00c0      	lsls	r0, r0, #3
    9c78:	4203      	tst	r3, r0
    9c7a:	d000      	beq.n	9c7e <__sfvwrite_r+0x156>
    9c7c:	e09d      	b.n	9dba <__sfvwrite_r+0x292>
    9c7e:	6820      	ldr	r0, [r4, #0]
    9c80:	468b      	mov	fp, r1
    9c82:	46b8      	mov	r8, r7
    9c84:	4652      	mov	r2, sl
    9c86:	4649      	mov	r1, r9
    9c88:	f000 f9fc 	bl	a084 <memmove>
    9c8c:	68a3      	ldr	r3, [r4, #8]
    9c8e:	465a      	mov	r2, fp
    9c90:	1a9b      	subs	r3, r3, r2
    9c92:	60a3      	str	r3, [r4, #8]
    9c94:	6823      	ldr	r3, [r4, #0]
    9c96:	4453      	add	r3, sl
    9c98:	6023      	str	r3, [r4, #0]
    9c9a:	46ba      	mov	sl, r7
    9c9c:	68b0      	ldr	r0, [r6, #8]
    9c9e:	4643      	mov	r3, r8
    9ca0:	4652      	mov	r2, sl
    9ca2:	1ac0      	subs	r0, r0, r3
    9ca4:	44d1      	add	r9, sl
    9ca6:	1abf      	subs	r7, r7, r2
    9ca8:	60b0      	str	r0, [r6, #8]
    9caa:	2800      	cmp	r0, #0
    9cac:	d100      	bne.n	9cb0 <__sfvwrite_r+0x188>
    9cae:	e771      	b.n	9b94 <__sfvwrite_r+0x6c>
    9cb0:	89a3      	ldrh	r3, [r4, #12]
    9cb2:	2f00      	cmp	r7, #0
    9cb4:	d1d5      	bne.n	9c62 <__sfvwrite_r+0x13a>
    9cb6:	6828      	ldr	r0, [r5, #0]
    9cb8:	686f      	ldr	r7, [r5, #4]
    9cba:	4681      	mov	r9, r0
    9cbc:	3508      	adds	r5, #8
    9cbe:	e7ce      	b.n	9c5e <__sfvwrite_r+0x136>
    9cc0:	6828      	ldr	r0, [r5, #0]
    9cc2:	2100      	movs	r1, #0
    9cc4:	686f      	ldr	r7, [r5, #4]
    9cc6:	4683      	mov	fp, r0
    9cc8:	3508      	adds	r5, #8
    9cca:	9100      	str	r1, [sp, #0]
    9ccc:	e77f      	b.n	9bce <__sfvwrite_r+0xa6>
    9cce:	6820      	ldr	r0, [r4, #0]
    9cd0:	468a      	mov	sl, r1
    9cd2:	45b8      	cmp	r8, r7
    9cd4:	d35f      	bcc.n	9d96 <__sfvwrite_r+0x26e>
    9cd6:	6963      	ldr	r3, [r4, #20]
    9cd8:	429f      	cmp	r7, r3
    9cda:	d34f      	bcc.n	9d7c <__sfvwrite_r+0x254>
    9cdc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9cde:	69e1      	ldr	r1, [r4, #28]
    9ce0:	4684      	mov	ip, r0
    9ce2:	464a      	mov	r2, r9
    9ce4:	9801      	ldr	r0, [sp, #4]
    9ce6:	f000 f8c0 	bl	9e6a <__sfvwrite_r+0x342>
    9cea:	2100      	movs	r1, #0
    9cec:	4680      	mov	r8, r0
    9cee:	4588      	cmp	r8, r1
    9cf0:	ddac      	ble.n	9c4c <__sfvwrite_r+0x124>
    9cf2:	4682      	mov	sl, r0
    9cf4:	e7d2      	b.n	9c9c <__sfvwrite_r+0x174>
    9cf6:	46bb      	mov	fp, r7
    9cf8:	6820      	ldr	r0, [r4, #0]
    9cfa:	46ba      	mov	sl, r7
    9cfc:	46b8      	mov	r8, r7
    9cfe:	e7c1      	b.n	9c84 <__sfvwrite_r+0x15c>
    9d00:	4659      	mov	r1, fp
    9d02:	464a      	mov	r2, r9
    9d04:	f000 f9be 	bl	a084 <memmove>
    9d08:	68a3      	ldr	r3, [r4, #8]
    9d0a:	464a      	mov	r2, r9
    9d0c:	1a9b      	subs	r3, r3, r2
    9d0e:	60a3      	str	r3, [r4, #8]
    9d10:	6823      	ldr	r3, [r4, #0]
    9d12:	46c8      	mov	r8, r9
    9d14:	444b      	add	r3, r9
    9d16:	6023      	str	r3, [r4, #0]
    9d18:	4640      	mov	r0, r8
    9d1a:	4653      	mov	r3, sl
    9d1c:	1a1b      	subs	r3, r3, r0
    9d1e:	469a      	mov	sl, r3
    9d20:	2100      	movs	r1, #0
    9d22:	458a      	cmp	sl, r1
    9d24:	d000      	beq.n	9d28 <__sfvwrite_r+0x200>
    9d26:	e77f      	b.n	9c28 <__sfvwrite_r+0x100>
    9d28:	9801      	ldr	r0, [sp, #4]
    9d2a:	1c21      	adds	r1, r4, #0
    9d2c:	f7fa fea6 	bl	4a7c <_fflush_r>
    9d30:	2800      	cmp	r0, #0
    9d32:	d18b      	bne.n	9c4c <__sfvwrite_r+0x124>
    9d34:	4652      	mov	r2, sl
    9d36:	9200      	str	r2, [sp, #0]
    9d38:	e776      	b.n	9c28 <__sfvwrite_r+0x100>
    9d3a:	6922      	ldr	r2, [r4, #16]
    9d3c:	4282      	cmp	r2, r0
    9d3e:	d300      	bcc.n	9d42 <__sfvwrite_r+0x21a>
    9d40:	e75c      	b.n	9bfc <__sfvwrite_r+0xd4>
    9d42:	4659      	mov	r1, fp
    9d44:	4642      	mov	r2, r8
    9d46:	f000 f99d 	bl	a084 <memmove>
    9d4a:	6823      	ldr	r3, [r4, #0]
    9d4c:	4443      	add	r3, r8
    9d4e:	6023      	str	r3, [r4, #0]
    9d50:	9801      	ldr	r0, [sp, #4]
    9d52:	1c21      	adds	r1, r4, #0
    9d54:	f7fa fe92 	bl	4a7c <_fflush_r>
    9d58:	2800      	cmp	r0, #0
    9d5a:	d100      	bne.n	9d5e <__sfvwrite_r+0x236>
    9d5c:	e75c      	b.n	9c18 <__sfvwrite_r+0xf0>
    9d5e:	e775      	b.n	9c4c <__sfvwrite_r+0x124>
    9d60:	4658      	mov	r0, fp
    9d62:	210a      	movs	r1, #10
    9d64:	1c3a      	adds	r2, r7, #0
    9d66:	f000 f945 	bl	9ff4 <memchr>
    9d6a:	2800      	cmp	r0, #0
    9d6c:	d06b      	beq.n	9e46 <__sfvwrite_r+0x31e>
    9d6e:	3001      	adds	r0, #1
    9d70:	465b      	mov	r3, fp
    9d72:	1ac3      	subs	r3, r0, r3
    9d74:	2001      	movs	r0, #1
    9d76:	469a      	mov	sl, r3
    9d78:	9000      	str	r0, [sp, #0]
    9d7a:	e72e      	b.n	9bda <__sfvwrite_r+0xb2>
    9d7c:	4649      	mov	r1, r9
    9d7e:	1c3a      	adds	r2, r7, #0
    9d80:	f000 f980 	bl	a084 <memmove>
    9d84:	68a3      	ldr	r3, [r4, #8]
    9d86:	1bdb      	subs	r3, r3, r7
    9d88:	60a3      	str	r3, [r4, #8]
    9d8a:	6823      	ldr	r3, [r4, #0]
    9d8c:	19db      	adds	r3, r3, r7
    9d8e:	46b8      	mov	r8, r7
    9d90:	6023      	str	r3, [r4, #0]
    9d92:	46ba      	mov	sl, r7
    9d94:	e782      	b.n	9c9c <__sfvwrite_r+0x174>
    9d96:	6923      	ldr	r3, [r4, #16]
    9d98:	4283      	cmp	r3, r0
    9d9a:	d29c      	bcs.n	9cd6 <__sfvwrite_r+0x1ae>
    9d9c:	4649      	mov	r1, r9
    9d9e:	4642      	mov	r2, r8
    9da0:	f000 f970 	bl	a084 <memmove>
    9da4:	6823      	ldr	r3, [r4, #0]
    9da6:	4443      	add	r3, r8
    9da8:	6023      	str	r3, [r4, #0]
    9daa:	9801      	ldr	r0, [sp, #4]
    9dac:	1c21      	adds	r1, r4, #0
    9dae:	f7fa fe65 	bl	4a7c <_fflush_r>
    9db2:	2800      	cmp	r0, #0
    9db4:	d100      	bne.n	9db8 <__sfvwrite_r+0x290>
    9db6:	e771      	b.n	9c9c <__sfvwrite_r+0x174>
    9db8:	e748      	b.n	9c4c <__sfvwrite_r+0x124>
    9dba:	6921      	ldr	r1, [r4, #16]
    9dbc:	6822      	ldr	r2, [r4, #0]
    9dbe:	1a52      	subs	r2, r2, r1
    9dc0:	9200      	str	r2, [sp, #0]
    9dc2:	6962      	ldr	r2, [r4, #20]
    9dc4:	0050      	lsls	r0, r2, #1
    9dc6:	1882      	adds	r2, r0, r2
    9dc8:	0fd0      	lsrs	r0, r2, #31
    9dca:	1882      	adds	r2, r0, r2
    9dcc:	9800      	ldr	r0, [sp, #0]
    9dce:	1052      	asrs	r2, r2, #1
    9dd0:	3001      	adds	r0, #1
    9dd2:	4690      	mov	r8, r2
    9dd4:	19c0      	adds	r0, r0, r7
    9dd6:	4580      	cmp	r8, r0
    9dd8:	d201      	bcs.n	9dde <__sfvwrite_r+0x2b6>
    9dda:	4680      	mov	r8, r0
    9ddc:	1c02      	adds	r2, r0, #0
    9dde:	2080      	movs	r0, #128	; 0x80
    9de0:	00c0      	lsls	r0, r0, #3
    9de2:	4203      	tst	r3, r0
    9de4:	d020      	beq.n	9e28 <__sfvwrite_r+0x300>
    9de6:	1c11      	adds	r1, r2, #0
    9de8:	9801      	ldr	r0, [sp, #4]
    9dea:	f7fb f9c3 	bl	5174 <_malloc_r>
    9dee:	2100      	movs	r1, #0
    9df0:	4682      	mov	sl, r0
    9df2:	458a      	cmp	sl, r1
    9df4:	d100      	bne.n	9df8 <__sfvwrite_r+0x2d0>
    9df6:	e726      	b.n	9c46 <__sfvwrite_r+0x11e>
    9df8:	9a00      	ldr	r2, [sp, #0]
    9dfa:	6921      	ldr	r1, [r4, #16]
    9dfc:	f7fb fc40 	bl	5680 <memcpy>
    9e00:	89a2      	ldrh	r2, [r4, #12]
    9e02:	4b18      	ldr	r3, [pc, #96]	; (9e64 <__sfvwrite_r+0x33c>)
    9e04:	4013      	ands	r3, r2
    9e06:	2280      	movs	r2, #128	; 0x80
    9e08:	4313      	orrs	r3, r2
    9e0a:	81a3      	strh	r3, [r4, #12]
    9e0c:	9a00      	ldr	r2, [sp, #0]
    9e0e:	4643      	mov	r3, r8
    9e10:	1c10      	adds	r0, r2, #0
    9e12:	4651      	mov	r1, sl
    9e14:	4450      	add	r0, sl
    9e16:	6163      	str	r3, [r4, #20]
    9e18:	1a9b      	subs	r3, r3, r2
    9e1a:	6121      	str	r1, [r4, #16]
    9e1c:	6020      	str	r0, [r4, #0]
    9e1e:	46bb      	mov	fp, r7
    9e20:	60a3      	str	r3, [r4, #8]
    9e22:	46ba      	mov	sl, r7
    9e24:	46b8      	mov	r8, r7
    9e26:	e72d      	b.n	9c84 <__sfvwrite_r+0x15c>
    9e28:	9801      	ldr	r0, [sp, #4]
    9e2a:	f000 fec1 	bl	abb0 <_realloc_r>
    9e2e:	2300      	movs	r3, #0
    9e30:	4682      	mov	sl, r0
    9e32:	459a      	cmp	sl, r3
    9e34:	d1ea      	bne.n	9e0c <__sfvwrite_r+0x2e4>
    9e36:	9801      	ldr	r0, [sp, #4]
    9e38:	6921      	ldr	r1, [r4, #16]
    9e3a:	f7fb f851 	bl	4ee0 <_free_r>
    9e3e:	9801      	ldr	r0, [sp, #4]
    9e40:	230c      	movs	r3, #12
    9e42:	6003      	str	r3, [r0, #0]
    9e44:	e702      	b.n	9c4c <__sfvwrite_r+0x124>
    9e46:	1c79      	adds	r1, r7, #1
    9e48:	2201      	movs	r2, #1
    9e4a:	468a      	mov	sl, r1
    9e4c:	9200      	str	r2, [sp, #0]
    9e4e:	e6c4      	b.n	9bda <__sfvwrite_r+0xb2>
    9e50:	89a3      	ldrh	r3, [r4, #12]
    9e52:	2240      	movs	r2, #64	; 0x40
    9e54:	4313      	orrs	r3, r2
    9e56:	9901      	ldr	r1, [sp, #4]
    9e58:	81a3      	strh	r3, [r4, #12]
    9e5a:	2001      	movs	r0, #1
    9e5c:	2309      	movs	r3, #9
    9e5e:	600b      	str	r3, [r1, #0]
    9e60:	4240      	negs	r0, r0
    9e62:	e697      	b.n	9b94 <__sfvwrite_r+0x6c>
    9e64:	fffffb7f 	.word	0xfffffb7f
    9e68:	4730      	bx	r6
    9e6a:	4760      	bx	ip

00009e6c <_setlocale_r>:
    9e6c:	b538      	push	{r3, r4, r5, lr}
    9e6e:	1e14      	subs	r4, r2, #0
    9e70:	d005      	beq.n	9e7e <_setlocale_r+0x12>
    9e72:	1c20      	adds	r0, r4, #0
    9e74:	490d      	ldr	r1, [pc, #52]	; (9eac <_setlocale_r+0x40>)
    9e76:	f001 f8fb 	bl	b070 <strcmp>
    9e7a:	2800      	cmp	r0, #0
    9e7c:	d103      	bne.n	9e86 <_setlocale_r+0x1a>
    9e7e:	480c      	ldr	r0, [pc, #48]	; (9eb0 <_setlocale_r+0x44>)
    9e80:	bc38      	pop	{r3, r4, r5}
    9e82:	bc02      	pop	{r1}
    9e84:	4708      	bx	r1
    9e86:	4d0a      	ldr	r5, [pc, #40]	; (9eb0 <_setlocale_r+0x44>)
    9e88:	1c20      	adds	r0, r4, #0
    9e8a:	1c29      	adds	r1, r5, #0
    9e8c:	f001 f8f0 	bl	b070 <strcmp>
    9e90:	1c03      	adds	r3, r0, #0
    9e92:	1c28      	adds	r0, r5, #0
    9e94:	2b00      	cmp	r3, #0
    9e96:	d0f3      	beq.n	9e80 <_setlocale_r+0x14>
    9e98:	1c20      	adds	r0, r4, #0
    9e9a:	4906      	ldr	r1, [pc, #24]	; (9eb4 <_setlocale_r+0x48>)
    9e9c:	f001 f8e8 	bl	b070 <strcmp>
    9ea0:	1c03      	adds	r3, r0, #0
    9ea2:	2000      	movs	r0, #0
    9ea4:	4283      	cmp	r3, r0
    9ea6:	d1eb      	bne.n	9e80 <_setlocale_r+0x14>
    9ea8:	1c28      	adds	r0, r5, #0
    9eaa:	e7e9      	b.n	9e80 <_setlocale_r+0x14>
    9eac:	0000ee14 	.word	0x0000ee14
    9eb0:	0000edbc 	.word	0x0000edbc
    9eb4:	0000ecd4 	.word	0x0000ecd4

00009eb8 <__locale_charset>:
    9eb8:	4800      	ldr	r0, [pc, #0]	; (9ebc <__locale_charset+0x4>)
    9eba:	4770      	bx	lr
    9ebc:	40000840 	.word	0x40000840

00009ec0 <__locale_mb_cur_max>:
    9ec0:	4b01      	ldr	r3, [pc, #4]	; (9ec8 <__locale_mb_cur_max+0x8>)
    9ec2:	6a18      	ldr	r0, [r3, #32]
    9ec4:	4770      	bx	lr
    9ec6:	46c0      	nop			; (mov r8, r8)
    9ec8:	40000840 	.word	0x40000840

00009ecc <__locale_msgcharset>:
    9ecc:	4801      	ldr	r0, [pc, #4]	; (9ed4 <__locale_msgcharset+0x8>)
    9ece:	3024      	adds	r0, #36	; 0x24
    9ed0:	4770      	bx	lr
    9ed2:	46c0      	nop			; (mov r8, r8)
    9ed4:	40000840 	.word	0x40000840

00009ed8 <__locale_cjk_lang>:
    9ed8:	2000      	movs	r0, #0
    9eda:	4770      	bx	lr

00009edc <_localeconv_r>:
    9edc:	4801      	ldr	r0, [pc, #4]	; (9ee4 <_localeconv_r+0x8>)
    9ede:	3044      	adds	r0, #68	; 0x44
    9ee0:	4770      	bx	lr
    9ee2:	46c0      	nop			; (mov r8, r8)
    9ee4:	40000840 	.word	0x40000840

00009ee8 <setlocale>:
    9ee8:	b508      	push	{r3, lr}
    9eea:	1c0a      	adds	r2, r1, #0
    9eec:	4904      	ldr	r1, [pc, #16]	; (9f00 <setlocale+0x18>)
    9eee:	1c03      	adds	r3, r0, #0
    9ef0:	6808      	ldr	r0, [r1, #0]
    9ef2:	1c19      	adds	r1, r3, #0
    9ef4:	f7ff ffba 	bl	9e6c <_setlocale_r>
    9ef8:	bc08      	pop	{r3}
    9efa:	bc02      	pop	{r1}
    9efc:	4708      	bx	r1
    9efe:	46c0      	nop			; (mov r8, r8)
    9f00:	40000000 	.word	0x40000000

00009f04 <localeconv>:
    9f04:	4801      	ldr	r0, [pc, #4]	; (9f0c <localeconv+0x8>)
    9f06:	3044      	adds	r0, #68	; 0x44
    9f08:	4770      	bx	lr
    9f0a:	46c0      	nop			; (mov r8, r8)
    9f0c:	40000840 	.word	0x40000840

00009f10 <__smakebuf_r>:
    9f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f12:	898b      	ldrh	r3, [r1, #12]
    9f14:	b091      	sub	sp, #68	; 0x44
    9f16:	1c05      	adds	r5, r0, #0
    9f18:	1c0c      	adds	r4, r1, #0
    9f1a:	1c1a      	adds	r2, r3, #0
    9f1c:	0798      	lsls	r0, r3, #30
    9f1e:	d442      	bmi.n	9fa6 <__smakebuf_r+0x96>
    9f20:	200e      	movs	r0, #14
    9f22:	5e09      	ldrsh	r1, [r1, r0]
    9f24:	2900      	cmp	r1, #0
    9f26:	db1b      	blt.n	9f60 <__smakebuf_r+0x50>
    9f28:	1c28      	adds	r0, r5, #0
    9f2a:	aa01      	add	r2, sp, #4
    9f2c:	f7f8 f872 	bl	2014 <_fstat_r>
    9f30:	2800      	cmp	r0, #0
    9f32:	db13      	blt.n	9f5c <__smakebuf_r+0x4c>
    9f34:	9a02      	ldr	r2, [sp, #8]
    9f36:	23f0      	movs	r3, #240	; 0xf0
    9f38:	021b      	lsls	r3, r3, #8
    9f3a:	4013      	ands	r3, r2
    9f3c:	4a2a      	ldr	r2, [pc, #168]	; (9fe8 <__smakebuf_r+0xd8>)
    9f3e:	189f      	adds	r7, r3, r2
    9f40:	427a      	negs	r2, r7
    9f42:	4157      	adcs	r7, r2
    9f44:	2280      	movs	r2, #128	; 0x80
    9f46:	0212      	lsls	r2, r2, #8
    9f48:	4293      	cmp	r3, r2
    9f4a:	d042      	beq.n	9fd2 <__smakebuf_r+0xc2>
    9f4c:	89a2      	ldrh	r2, [r4, #12]
    9f4e:	2380      	movs	r3, #128	; 0x80
    9f50:	011b      	lsls	r3, r3, #4
    9f52:	4313      	orrs	r3, r2
    9f54:	2680      	movs	r6, #128	; 0x80
    9f56:	81a3      	strh	r3, [r4, #12]
    9f58:	00f6      	lsls	r6, r6, #3
    9f5a:	e009      	b.n	9f70 <__smakebuf_r+0x60>
    9f5c:	89a3      	ldrh	r3, [r4, #12]
    9f5e:	1c1a      	adds	r2, r3, #0
    9f60:	2640      	movs	r6, #64	; 0x40
    9f62:	0611      	lsls	r1, r2, #24
    9f64:	d532      	bpl.n	9fcc <__smakebuf_r+0xbc>
    9f66:	2280      	movs	r2, #128	; 0x80
    9f68:	0112      	lsls	r2, r2, #4
    9f6a:	4313      	orrs	r3, r2
    9f6c:	81a3      	strh	r3, [r4, #12]
    9f6e:	2700      	movs	r7, #0
    9f70:	1c28      	adds	r0, r5, #0
    9f72:	1c31      	adds	r1, r6, #0
    9f74:	f7fb f8fe 	bl	5174 <_malloc_r>
    9f78:	2800      	cmp	r0, #0
    9f7a:	d00e      	beq.n	9f9a <__smakebuf_r+0x8a>
    9f7c:	4b1b      	ldr	r3, [pc, #108]	; (9fec <__smakebuf_r+0xdc>)
    9f7e:	63eb      	str	r3, [r5, #60]	; 0x3c
    9f80:	89a3      	ldrh	r3, [r4, #12]
    9f82:	2280      	movs	r2, #128	; 0x80
    9f84:	4313      	orrs	r3, r2
    9f86:	81a3      	strh	r3, [r4, #12]
    9f88:	6020      	str	r0, [r4, #0]
    9f8a:	6120      	str	r0, [r4, #16]
    9f8c:	6166      	str	r6, [r4, #20]
    9f8e:	2f00      	cmp	r7, #0
    9f90:	d110      	bne.n	9fb4 <__smakebuf_r+0xa4>
    9f92:	b011      	add	sp, #68	; 0x44
    9f94:	bcf0      	pop	{r4, r5, r6, r7}
    9f96:	bc01      	pop	{r0}
    9f98:	4700      	bx	r0
    9f9a:	89a3      	ldrh	r3, [r4, #12]
    9f9c:	0598      	lsls	r0, r3, #22
    9f9e:	d4f8      	bmi.n	9f92 <__smakebuf_r+0x82>
    9fa0:	2202      	movs	r2, #2
    9fa2:	4313      	orrs	r3, r2
    9fa4:	81a3      	strh	r3, [r4, #12]
    9fa6:	1c23      	adds	r3, r4, #0
    9fa8:	3343      	adds	r3, #67	; 0x43
    9faa:	6023      	str	r3, [r4, #0]
    9fac:	6123      	str	r3, [r4, #16]
    9fae:	2301      	movs	r3, #1
    9fb0:	6163      	str	r3, [r4, #20]
    9fb2:	e7ee      	b.n	9f92 <__smakebuf_r+0x82>
    9fb4:	220e      	movs	r2, #14
    9fb6:	5ea1      	ldrsh	r1, [r4, r2]
    9fb8:	1c28      	adds	r0, r5, #0
    9fba:	f002 fdd5 	bl	cb68 <_isatty_r>
    9fbe:	2800      	cmp	r0, #0
    9fc0:	d0e7      	beq.n	9f92 <__smakebuf_r+0x82>
    9fc2:	89a3      	ldrh	r3, [r4, #12]
    9fc4:	2201      	movs	r2, #1
    9fc6:	4313      	orrs	r3, r2
    9fc8:	81a3      	strh	r3, [r4, #12]
    9fca:	e7e2      	b.n	9f92 <__smakebuf_r+0x82>
    9fcc:	19b6      	adds	r6, r6, r6
    9fce:	00f6      	lsls	r6, r6, #3
    9fd0:	e7c9      	b.n	9f66 <__smakebuf_r+0x56>
    9fd2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9fd4:	4b06      	ldr	r3, [pc, #24]	; (9ff0 <__smakebuf_r+0xe0>)
    9fd6:	429a      	cmp	r2, r3
    9fd8:	d1b8      	bne.n	9f4c <__smakebuf_r+0x3c>
    9fda:	89a3      	ldrh	r3, [r4, #12]
    9fdc:	2680      	movs	r6, #128	; 0x80
    9fde:	00f6      	lsls	r6, r6, #3
    9fe0:	4333      	orrs	r3, r6
    9fe2:	81a3      	strh	r3, [r4, #12]
    9fe4:	64e6      	str	r6, [r4, #76]	; 0x4c
    9fe6:	e7c3      	b.n	9f70 <__smakebuf_r+0x60>
    9fe8:	ffffe000 	.word	0xffffe000
    9fec:	00004c11 	.word	0x00004c11
    9ff0:	000059ed 	.word	0x000059ed

00009ff4 <memchr>:
    9ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ff6:	0609      	lsls	r1, r1, #24
    9ff8:	2403      	movs	r4, #3
    9ffa:	1c03      	adds	r3, r0, #0
    9ffc:	0e09      	lsrs	r1, r1, #24
    9ffe:	4220      	tst	r0, r4
    a000:	d00f      	beq.n	a022 <memchr+0x2e>
    a002:	1e10      	subs	r0, r2, #0
    a004:	d01f      	beq.n	a046 <memchr+0x52>
    a006:	781d      	ldrb	r5, [r3, #0]
    a008:	1c18      	adds	r0, r3, #0
    a00a:	428d      	cmp	r5, r1
    a00c:	d105      	bne.n	a01a <memchr+0x26>
    a00e:	e01a      	b.n	a046 <memchr+0x52>
    a010:	2a00      	cmp	r2, #0
    a012:	d017      	beq.n	a044 <memchr+0x50>
    a014:	7818      	ldrb	r0, [r3, #0]
    a016:	4288      	cmp	r0, r1
    a018:	d018      	beq.n	a04c <memchr+0x58>
    a01a:	3301      	adds	r3, #1
    a01c:	3a01      	subs	r2, #1
    a01e:	4223      	tst	r3, r4
    a020:	d1f6      	bne.n	a010 <memchr+0x1c>
    a022:	2a03      	cmp	r2, #3
    a024:	d814      	bhi.n	a050 <memchr+0x5c>
    a026:	1e10      	subs	r0, r2, #0
    a028:	d00d      	beq.n	a046 <memchr+0x52>
    a02a:	781c      	ldrb	r4, [r3, #0]
    a02c:	1c18      	adds	r0, r3, #0
    a02e:	3a01      	subs	r2, #1
    a030:	428c      	cmp	r4, r1
    a032:	d105      	bne.n	a040 <memchr+0x4c>
    a034:	e007      	b.n	a046 <memchr+0x52>
    a036:	3301      	adds	r3, #1
    a038:	7818      	ldrb	r0, [r3, #0]
    a03a:	3a01      	subs	r2, #1
    a03c:	4288      	cmp	r0, r1
    a03e:	d005      	beq.n	a04c <memchr+0x58>
    a040:	2a00      	cmp	r2, #0
    a042:	d1f8      	bne.n	a036 <memchr+0x42>
    a044:	1c10      	adds	r0, r2, #0
    a046:	bcf0      	pop	{r4, r5, r6, r7}
    a048:	bc02      	pop	{r1}
    a04a:	4708      	bx	r1
    a04c:	1c18      	adds	r0, r3, #0
    a04e:	e7fa      	b.n	a046 <memchr+0x52>
    a050:	020f      	lsls	r7, r1, #8
    a052:	430f      	orrs	r7, r1
    a054:	0438      	lsls	r0, r7, #16
    a056:	4307      	orrs	r7, r0
    a058:	4808      	ldr	r0, [pc, #32]	; (a07c <memchr+0x88>)
    a05a:	4684      	mov	ip, r0
    a05c:	1c18      	adds	r0, r3, #0
    a05e:	cb10      	ldmia	r3!, {r4}
    a060:	4e07      	ldr	r6, [pc, #28]	; (a080 <memchr+0x8c>)
    a062:	407c      	eors	r4, r7
    a064:	19a5      	adds	r5, r4, r6
    a066:	43a5      	bics	r5, r4
    a068:	1c2c      	adds	r4, r5, #0
    a06a:	4665      	mov	r5, ip
    a06c:	422c      	tst	r4, r5
    a06e:	d103      	bne.n	a078 <memchr+0x84>
    a070:	3a04      	subs	r2, #4
    a072:	1c18      	adds	r0, r3, #0
    a074:	2a03      	cmp	r2, #3
    a076:	d8f1      	bhi.n	a05c <memchr+0x68>
    a078:	1c03      	adds	r3, r0, #0
    a07a:	e7d4      	b.n	a026 <memchr+0x32>
    a07c:	80808080 	.word	0x80808080
    a080:	fefefeff 	.word	0xfefefeff

0000a084 <memmove>:
    a084:	b5f0      	push	{r4, r5, r6, r7, lr}
    a086:	1c05      	adds	r5, r0, #0
    a088:	1c0e      	adds	r6, r1, #0
    a08a:	4288      	cmp	r0, r1
    a08c:	d90f      	bls.n	a0ae <memmove+0x2a>
    a08e:	188b      	adds	r3, r1, r2
    a090:	4298      	cmp	r0, r3
    a092:	d20c      	bcs.n	a0ae <memmove+0x2a>
    a094:	2a00      	cmp	r2, #0
    a096:	d007      	beq.n	a0a8 <memmove+0x24>
    a098:	1881      	adds	r1, r0, r2
    a09a:	3b01      	subs	r3, #1
    a09c:	781c      	ldrb	r4, [r3, #0]
    a09e:	3901      	subs	r1, #1
    a0a0:	3a01      	subs	r2, #1
    a0a2:	700c      	strb	r4, [r1, #0]
    a0a4:	2a00      	cmp	r2, #0
    a0a6:	d1f8      	bne.n	a09a <memmove+0x16>
    a0a8:	bcf0      	pop	{r4, r5, r6, r7}
    a0aa:	bc02      	pop	{r1}
    a0ac:	4708      	bx	r1
    a0ae:	2a0f      	cmp	r2, #15
    a0b0:	d92d      	bls.n	a10e <memmove+0x8a>
    a0b2:	1c0b      	adds	r3, r1, #0
    a0b4:	4303      	orrs	r3, r0
    a0b6:	079c      	lsls	r4, r3, #30
    a0b8:	d12b      	bne.n	a112 <memmove+0x8e>
    a0ba:	1c0c      	adds	r4, r1, #0
    a0bc:	1c03      	adds	r3, r0, #0
    a0be:	1c15      	adds	r5, r2, #0
    a0c0:	6826      	ldr	r6, [r4, #0]
    a0c2:	601e      	str	r6, [r3, #0]
    a0c4:	6866      	ldr	r6, [r4, #4]
    a0c6:	605e      	str	r6, [r3, #4]
    a0c8:	68a6      	ldr	r6, [r4, #8]
    a0ca:	609e      	str	r6, [r3, #8]
    a0cc:	68e6      	ldr	r6, [r4, #12]
    a0ce:	3d10      	subs	r5, #16
    a0d0:	60de      	str	r6, [r3, #12]
    a0d2:	3410      	adds	r4, #16
    a0d4:	3310      	adds	r3, #16
    a0d6:	2d0f      	cmp	r5, #15
    a0d8:	d8f2      	bhi.n	a0c0 <memmove+0x3c>
    a0da:	3a10      	subs	r2, #16
    a0dc:	0916      	lsrs	r6, r2, #4
    a0de:	3601      	adds	r6, #1
    a0e0:	230f      	movs	r3, #15
    a0e2:	0136      	lsls	r6, r6, #4
    a0e4:	401a      	ands	r2, r3
    a0e6:	1985      	adds	r5, r0, r6
    a0e8:	198e      	adds	r6, r1, r6
    a0ea:	2a03      	cmp	r2, #3
    a0ec:	d90f      	bls.n	a10e <memmove+0x8a>
    a0ee:	1c37      	adds	r7, r6, #0
    a0f0:	1c2c      	adds	r4, r5, #0
    a0f2:	1c13      	adds	r3, r2, #0
    a0f4:	cf02      	ldmia	r7!, {r1}
    a0f6:	3b04      	subs	r3, #4
    a0f8:	c402      	stmia	r4!, {r1}
    a0fa:	2b03      	cmp	r3, #3
    a0fc:	d8fa      	bhi.n	a0f4 <memmove+0x70>
    a0fe:	3a04      	subs	r2, #4
    a100:	0893      	lsrs	r3, r2, #2
    a102:	3301      	adds	r3, #1
    a104:	009b      	lsls	r3, r3, #2
    a106:	18ed      	adds	r5, r5, r3
    a108:	18f6      	adds	r6, r6, r3
    a10a:	2303      	movs	r3, #3
    a10c:	401a      	ands	r2, r3
    a10e:	2a00      	cmp	r2, #0
    a110:	d0ca      	beq.n	a0a8 <memmove+0x24>
    a112:	2300      	movs	r3, #0
    a114:	5cf4      	ldrb	r4, [r6, r3]
    a116:	54ec      	strb	r4, [r5, r3]
    a118:	3301      	adds	r3, #1
    a11a:	4293      	cmp	r3, r2
    a11c:	d1fa      	bne.n	a114 <memmove+0x90>
    a11e:	e7c3      	b.n	a0a8 <memmove+0x24>

0000a120 <_Balloc>:
    a120:	b570      	push	{r4, r5, r6, lr}
    a122:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    a124:	1c04      	adds	r4, r0, #0
    a126:	1c0d      	adds	r5, r1, #0
    a128:	2b00      	cmp	r3, #0
    a12a:	d00c      	beq.n	a146 <_Balloc+0x26>
    a12c:	00aa      	lsls	r2, r5, #2
    a12e:	189b      	adds	r3, r3, r2
    a130:	6818      	ldr	r0, [r3, #0]
    a132:	2800      	cmp	r0, #0
    a134:	d010      	beq.n	a158 <_Balloc+0x38>
    a136:	6802      	ldr	r2, [r0, #0]
    a138:	601a      	str	r2, [r3, #0]
    a13a:	2300      	movs	r3, #0
    a13c:	6103      	str	r3, [r0, #16]
    a13e:	60c3      	str	r3, [r0, #12]
    a140:	bc70      	pop	{r4, r5, r6}
    a142:	bc02      	pop	{r1}
    a144:	4708      	bx	r1
    a146:	2104      	movs	r1, #4
    a148:	2221      	movs	r2, #33	; 0x21
    a14a:	f002 fc61 	bl	ca10 <_calloc_r>
    a14e:	1c03      	adds	r3, r0, #0
    a150:	64e0      	str	r0, [r4, #76]	; 0x4c
    a152:	2800      	cmp	r0, #0
    a154:	d0f4      	beq.n	a140 <_Balloc+0x20>
    a156:	e7e9      	b.n	a12c <_Balloc+0xc>
    a158:	2101      	movs	r1, #1
    a15a:	1c0e      	adds	r6, r1, #0
    a15c:	40ae      	lsls	r6, r5
    a15e:	1d72      	adds	r2, r6, #5
    a160:	0092      	lsls	r2, r2, #2
    a162:	1c20      	adds	r0, r4, #0
    a164:	f002 fc54 	bl	ca10 <_calloc_r>
    a168:	2800      	cmp	r0, #0
    a16a:	d0e9      	beq.n	a140 <_Balloc+0x20>
    a16c:	6045      	str	r5, [r0, #4]
    a16e:	6086      	str	r6, [r0, #8]
    a170:	e7e3      	b.n	a13a <_Balloc+0x1a>
    a172:	46c0      	nop			; (mov r8, r8)

0000a174 <_Bfree>:
    a174:	b500      	push	{lr}
    a176:	2900      	cmp	r1, #0
    a178:	d006      	beq.n	a188 <_Bfree+0x14>
    a17a:	684b      	ldr	r3, [r1, #4]
    a17c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    a17e:	009b      	lsls	r3, r3, #2
    a180:	18d3      	adds	r3, r2, r3
    a182:	681a      	ldr	r2, [r3, #0]
    a184:	600a      	str	r2, [r1, #0]
    a186:	6019      	str	r1, [r3, #0]
    a188:	bc01      	pop	{r0}
    a18a:	4700      	bx	r0

0000a18c <__multadd>:
    a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a18e:	464f      	mov	r7, r9
    a190:	4646      	mov	r6, r8
    a192:	b4c0      	push	{r6, r7}
    a194:	1c0e      	adds	r6, r1, #0
    a196:	1c1c      	adds	r4, r3, #0
    a198:	690d      	ldr	r5, [r1, #16]
    a19a:	4681      	mov	r9, r0
    a19c:	3114      	adds	r1, #20
    a19e:	2300      	movs	r3, #0
    a1a0:	6808      	ldr	r0, [r1, #0]
    a1a2:	4680      	mov	r8, r0
    a1a4:	0400      	lsls	r0, r0, #16
    a1a6:	0c00      	lsrs	r0, r0, #16
    a1a8:	4350      	muls	r0, r2
    a1aa:	1820      	adds	r0, r4, r0
    a1ac:	0c04      	lsrs	r4, r0, #16
    a1ae:	4647      	mov	r7, r8
    a1b0:	46a4      	mov	ip, r4
    a1b2:	0c3c      	lsrs	r4, r7, #16
    a1b4:	4354      	muls	r4, r2
    a1b6:	44a4      	add	ip, r4
    a1b8:	4667      	mov	r7, ip
    a1ba:	0c3c      	lsrs	r4, r7, #16
    a1bc:	0400      	lsls	r0, r0, #16
    a1be:	043f      	lsls	r7, r7, #16
    a1c0:	46bc      	mov	ip, r7
    a1c2:	0c00      	lsrs	r0, r0, #16
    a1c4:	4460      	add	r0, ip
    a1c6:	3301      	adds	r3, #1
    a1c8:	c101      	stmia	r1!, {r0}
    a1ca:	429d      	cmp	r5, r3
    a1cc:	dce8      	bgt.n	a1a0 <__multadd+0x14>
    a1ce:	2c00      	cmp	r4, #0
    a1d0:	d008      	beq.n	a1e4 <__multadd+0x58>
    a1d2:	68b3      	ldr	r3, [r6, #8]
    a1d4:	429d      	cmp	r5, r3
    a1d6:	da0c      	bge.n	a1f2 <__multadd+0x66>
    a1d8:	1d2b      	adds	r3, r5, #4
    a1da:	009b      	lsls	r3, r3, #2
    a1dc:	18f3      	adds	r3, r6, r3
    a1de:	3501      	adds	r5, #1
    a1e0:	605c      	str	r4, [r3, #4]
    a1e2:	6135      	str	r5, [r6, #16]
    a1e4:	1c30      	adds	r0, r6, #0
    a1e6:	bc0c      	pop	{r2, r3}
    a1e8:	4690      	mov	r8, r2
    a1ea:	4699      	mov	r9, r3
    a1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a1ee:	bc02      	pop	{r1}
    a1f0:	4708      	bx	r1
    a1f2:	6871      	ldr	r1, [r6, #4]
    a1f4:	4648      	mov	r0, r9
    a1f6:	3101      	adds	r1, #1
    a1f8:	f7ff ff92 	bl	a120 <_Balloc>
    a1fc:	6932      	ldr	r2, [r6, #16]
    a1fe:	210c      	movs	r1, #12
    a200:	4680      	mov	r8, r0
    a202:	3202      	adds	r2, #2
    a204:	1c08      	adds	r0, r1, #0
    a206:	1c31      	adds	r1, r6, #0
    a208:	0092      	lsls	r2, r2, #2
    a20a:	4440      	add	r0, r8
    a20c:	310c      	adds	r1, #12
    a20e:	f7fb fa37 	bl	5680 <memcpy>
    a212:	464f      	mov	r7, r9
    a214:	6873      	ldr	r3, [r6, #4]
    a216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    a218:	009b      	lsls	r3, r3, #2
    a21a:	18d3      	adds	r3, r2, r3
    a21c:	681a      	ldr	r2, [r3, #0]
    a21e:	6032      	str	r2, [r6, #0]
    a220:	601e      	str	r6, [r3, #0]
    a222:	4646      	mov	r6, r8
    a224:	e7d8      	b.n	a1d8 <__multadd+0x4c>
    a226:	46c0      	nop			; (mov r8, r8)

0000a228 <__s2b>:
    a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a22a:	464f      	mov	r7, r9
    a22c:	4646      	mov	r6, r8
    a22e:	b4c0      	push	{r6, r7}
    a230:	1c06      	adds	r6, r0, #0
    a232:	1c18      	adds	r0, r3, #0
    a234:	1c0d      	adds	r5, r1, #0
    a236:	3008      	adds	r0, #8
    a238:	2109      	movs	r1, #9
    a23a:	4690      	mov	r8, r2
    a23c:	1c1f      	adds	r7, r3, #0
    a23e:	f003 ff51 	bl	e0e4 <____aeabi_idiv_from_thumb>
    a242:	2100      	movs	r1, #0
    a244:	2801      	cmp	r0, #1
    a246:	dd04      	ble.n	a252 <__s2b+0x2a>
    a248:	2301      	movs	r3, #1
    a24a:	005b      	lsls	r3, r3, #1
    a24c:	3101      	adds	r1, #1
    a24e:	4298      	cmp	r0, r3
    a250:	dcfb      	bgt.n	a24a <__s2b+0x22>
    a252:	1c30      	adds	r0, r6, #0
    a254:	f7ff ff64 	bl	a120 <_Balloc>
    a258:	9b08      	ldr	r3, [sp, #32]
    a25a:	6143      	str	r3, [r0, #20]
    a25c:	2301      	movs	r3, #1
    a25e:	6103      	str	r3, [r0, #16]
    a260:	3308      	adds	r3, #8
    a262:	1c01      	adds	r1, r0, #0
    a264:	4598      	cmp	r8, r3
    a266:	dd23      	ble.n	a2b0 <__s2b+0x88>
    a268:	195b      	adds	r3, r3, r5
    a26a:	4699      	mov	r9, r3
    a26c:	2409      	movs	r4, #9
    a26e:	5d2b      	ldrb	r3, [r5, r4]
    a270:	1c30      	adds	r0, r6, #0
    a272:	3b30      	subs	r3, #48	; 0x30
    a274:	220a      	movs	r2, #10
    a276:	f7ff ff89 	bl	a18c <__multadd>
    a27a:	3401      	adds	r4, #1
    a27c:	1c01      	adds	r1, r0, #0
    a27e:	45a0      	cmp	r8, r4
    a280:	dcf5      	bgt.n	a26e <__s2b+0x46>
    a282:	464d      	mov	r5, r9
    a284:	4445      	add	r5, r8
    a286:	3d08      	subs	r5, #8
    a288:	4644      	mov	r4, r8
    a28a:	e008      	b.n	a29e <__s2b+0x76>
    a28c:	782b      	ldrb	r3, [r5, #0]
    a28e:	1c30      	adds	r0, r6, #0
    a290:	3b30      	subs	r3, #48	; 0x30
    a292:	220a      	movs	r2, #10
    a294:	f7ff ff7a 	bl	a18c <__multadd>
    a298:	3501      	adds	r5, #1
    a29a:	1c01      	adds	r1, r0, #0
    a29c:	3401      	adds	r4, #1
    a29e:	42a7      	cmp	r7, r4
    a2a0:	dcf4      	bgt.n	a28c <__s2b+0x64>
    a2a2:	1c08      	adds	r0, r1, #0
    a2a4:	bc0c      	pop	{r2, r3}
    a2a6:	4690      	mov	r8, r2
    a2a8:	4699      	mov	r9, r3
    a2aa:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a2ac:	bc02      	pop	{r1}
    a2ae:	4708      	bx	r1
    a2b0:	350a      	adds	r5, #10
    a2b2:	2409      	movs	r4, #9
    a2b4:	e7f3      	b.n	a29e <__s2b+0x76>
    a2b6:	46c0      	nop			; (mov r8, r8)

0000a2b8 <__hi0bits>:
    a2b8:	b500      	push	{lr}
    a2ba:	1c03      	adds	r3, r0, #0
    a2bc:	0c02      	lsrs	r2, r0, #16
    a2be:	2000      	movs	r0, #0
    a2c0:	4282      	cmp	r2, r0
    a2c2:	d101      	bne.n	a2c8 <__hi0bits+0x10>
    a2c4:	041b      	lsls	r3, r3, #16
    a2c6:	3010      	adds	r0, #16
    a2c8:	0e1a      	lsrs	r2, r3, #24
    a2ca:	2a00      	cmp	r2, #0
    a2cc:	d101      	bne.n	a2d2 <__hi0bits+0x1a>
    a2ce:	3008      	adds	r0, #8
    a2d0:	021b      	lsls	r3, r3, #8
    a2d2:	0f1a      	lsrs	r2, r3, #28
    a2d4:	2a00      	cmp	r2, #0
    a2d6:	d101      	bne.n	a2dc <__hi0bits+0x24>
    a2d8:	3004      	adds	r0, #4
    a2da:	011b      	lsls	r3, r3, #4
    a2dc:	0f9a      	lsrs	r2, r3, #30
    a2de:	2a00      	cmp	r2, #0
    a2e0:	d101      	bne.n	a2e6 <__hi0bits+0x2e>
    a2e2:	3002      	adds	r0, #2
    a2e4:	009b      	lsls	r3, r3, #2
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	db03      	blt.n	a2f2 <__hi0bits+0x3a>
    a2ea:	3001      	adds	r0, #1
    a2ec:	005a      	lsls	r2, r3, #1
    a2ee:	d400      	bmi.n	a2f2 <__hi0bits+0x3a>
    a2f0:	2020      	movs	r0, #32
    a2f2:	bc02      	pop	{r1}
    a2f4:	4708      	bx	r1
    a2f6:	46c0      	nop			; (mov r8, r8)

0000a2f8 <__lo0bits>:
    a2f8:	b500      	push	{lr}
    a2fa:	6803      	ldr	r3, [r0, #0]
    a2fc:	1c01      	adds	r1, r0, #0
    a2fe:	2207      	movs	r2, #7
    a300:	1c18      	adds	r0, r3, #0
    a302:	4010      	ands	r0, r2
    a304:	d00a      	beq.n	a31c <__lo0bits+0x24>
    a306:	3a06      	subs	r2, #6
    a308:	2000      	movs	r0, #0
    a30a:	4213      	tst	r3, r2
    a30c:	d104      	bne.n	a318 <__lo0bits+0x20>
    a30e:	3002      	adds	r0, #2
    a310:	4203      	tst	r3, r0
    a312:	d11f      	bne.n	a354 <__lo0bits+0x5c>
    a314:	089b      	lsrs	r3, r3, #2
    a316:	600b      	str	r3, [r1, #0]
    a318:	bc02      	pop	{r1}
    a31a:	4708      	bx	r1
    a31c:	041a      	lsls	r2, r3, #16
    a31e:	2a00      	cmp	r2, #0
    a320:	d101      	bne.n	a326 <__lo0bits+0x2e>
    a322:	0c1b      	lsrs	r3, r3, #16
    a324:	2010      	movs	r0, #16
    a326:	22ff      	movs	r2, #255	; 0xff
    a328:	4213      	tst	r3, r2
    a32a:	d101      	bne.n	a330 <__lo0bits+0x38>
    a32c:	3008      	adds	r0, #8
    a32e:	0a1b      	lsrs	r3, r3, #8
    a330:	071a      	lsls	r2, r3, #28
    a332:	d101      	bne.n	a338 <__lo0bits+0x40>
    a334:	3004      	adds	r0, #4
    a336:	091b      	lsrs	r3, r3, #4
    a338:	079a      	lsls	r2, r3, #30
    a33a:	d101      	bne.n	a340 <__lo0bits+0x48>
    a33c:	3002      	adds	r0, #2
    a33e:	089b      	lsrs	r3, r3, #2
    a340:	07da      	lsls	r2, r3, #31
    a342:	d403      	bmi.n	a34c <__lo0bits+0x54>
    a344:	085b      	lsrs	r3, r3, #1
    a346:	2b00      	cmp	r3, #0
    a348:	d002      	beq.n	a350 <__lo0bits+0x58>
    a34a:	3001      	adds	r0, #1
    a34c:	600b      	str	r3, [r1, #0]
    a34e:	e7e3      	b.n	a318 <__lo0bits+0x20>
    a350:	2020      	movs	r0, #32
    a352:	e7e1      	b.n	a318 <__lo0bits+0x20>
    a354:	40d3      	lsrs	r3, r2
    a356:	600b      	str	r3, [r1, #0]
    a358:	1c10      	adds	r0, r2, #0
    a35a:	e7dd      	b.n	a318 <__lo0bits+0x20>

0000a35c <__i2b>:
    a35c:	b510      	push	{r4, lr}
    a35e:	1c0c      	adds	r4, r1, #0
    a360:	2101      	movs	r1, #1
    a362:	f7ff fedd 	bl	a120 <_Balloc>
    a366:	2301      	movs	r3, #1
    a368:	6144      	str	r4, [r0, #20]
    a36a:	6103      	str	r3, [r0, #16]
    a36c:	bc10      	pop	{r4}
    a36e:	bc02      	pop	{r1}
    a370:	4708      	bx	r1
    a372:	46c0      	nop			; (mov r8, r8)

0000a374 <__multiply>:
    a374:	b5f0      	push	{r4, r5, r6, r7, lr}
    a376:	465f      	mov	r7, fp
    a378:	4656      	mov	r6, sl
    a37a:	464d      	mov	r5, r9
    a37c:	4644      	mov	r4, r8
    a37e:	b4f0      	push	{r4, r5, r6, r7}
    a380:	1c0d      	adds	r5, r1, #0
    a382:	690f      	ldr	r7, [r1, #16]
    a384:	6911      	ldr	r1, [r2, #16]
    a386:	4688      	mov	r8, r1
    a388:	b085      	sub	sp, #20
    a38a:	1c16      	adds	r6, r2, #0
    a38c:	4547      	cmp	r7, r8
    a38e:	da05      	bge.n	a39c <__multiply+0x28>
    a390:	1c3b      	adds	r3, r7, #0
    a392:	4698      	mov	r8, r3
    a394:	1c2b      	adds	r3, r5, #0
    a396:	1c0f      	adds	r7, r1, #0
    a398:	1c15      	adds	r5, r2, #0
    a39a:	1c1e      	adds	r6, r3, #0
    a39c:	1c3c      	adds	r4, r7, #0
    a39e:	68ab      	ldr	r3, [r5, #8]
    a3a0:	4444      	add	r4, r8
    a3a2:	6869      	ldr	r1, [r5, #4]
    a3a4:	429c      	cmp	r4, r3
    a3a6:	dd00      	ble.n	a3aa <__multiply+0x36>
    a3a8:	3101      	adds	r1, #1
    a3aa:	f7ff feb9 	bl	a120 <_Balloc>
    a3ae:	1d23      	adds	r3, r4, #4
    a3b0:	009b      	lsls	r3, r3, #2
    a3b2:	1c02      	adds	r2, r0, #0
    a3b4:	181b      	adds	r3, r3, r0
    a3b6:	3304      	adds	r3, #4
    a3b8:	3214      	adds	r2, #20
    a3ba:	9002      	str	r0, [sp, #8]
    a3bc:	9303      	str	r3, [sp, #12]
    a3be:	429a      	cmp	r2, r3
    a3c0:	d205      	bcs.n	a3ce <__multiply+0x5a>
    a3c2:	9803      	ldr	r0, [sp, #12]
    a3c4:	1c13      	adds	r3, r2, #0
    a3c6:	2100      	movs	r1, #0
    a3c8:	c302      	stmia	r3!, {r1}
    a3ca:	4298      	cmp	r0, r3
    a3cc:	d8fc      	bhi.n	a3c8 <__multiply+0x54>
    a3ce:	2314      	movs	r3, #20
    a3d0:	195b      	adds	r3, r3, r5
    a3d2:	2104      	movs	r1, #4
    a3d4:	9300      	str	r3, [sp, #0]
    a3d6:	1c0b      	adds	r3, r1, #0
    a3d8:	3704      	adds	r7, #4
    a3da:	4443      	add	r3, r8
    a3dc:	00bf      	lsls	r7, r7, #2
    a3de:	009b      	lsls	r3, r3, #2
    a3e0:	19ed      	adds	r5, r5, r7
    a3e2:	1c37      	adds	r7, r6, #0
    a3e4:	18f6      	adds	r6, r6, r3
    a3e6:	1876      	adds	r6, r6, r1
    a3e8:	3714      	adds	r7, #20
    a3ea:	46b4      	mov	ip, r6
    a3ec:	3504      	adds	r5, #4
    a3ee:	4567      	cmp	r7, ip
    a3f0:	d26c      	bcs.n	a4cc <__multiply+0x158>
    a3f2:	1c23      	adds	r3, r4, #0
    a3f4:	1c16      	adds	r6, r2, #0
    a3f6:	4664      	mov	r4, ip
    a3f8:	469c      	mov	ip, r3
    a3fa:	683b      	ldr	r3, [r7, #0]
    a3fc:	041a      	lsls	r2, r3, #16
    a3fe:	0c12      	lsrs	r2, r2, #16
    a400:	4691      	mov	r9, r2
    a402:	2200      	movs	r2, #0
    a404:	4591      	cmp	r9, r2
    a406:	d029      	beq.n	a45c <__multiply+0xe8>
    a408:	2100      	movs	r1, #0
    a40a:	4688      	mov	r8, r1
    a40c:	9a00      	ldr	r2, [sp, #0]
    a40e:	4649      	mov	r1, r9
    a410:	1c33      	adds	r3, r6, #0
    a412:	46a1      	mov	r9, r4
    a414:	46ba      	mov	sl, r7
    a416:	4644      	mov	r4, r8
    a418:	46b3      	mov	fp, r6
    a41a:	46a8      	mov	r8, r5
    a41c:	1c0d      	adds	r5, r1, #0
    a41e:	ca01      	ldmia	r2!, {r0}
    a420:	0407      	lsls	r7, r0, #16
    a422:	0c3f      	lsrs	r7, r7, #16
    a424:	436f      	muls	r7, r5
    a426:	0c00      	lsrs	r0, r0, #16
    a428:	4368      	muls	r0, r5
    a42a:	6819      	ldr	r1, [r3, #0]
    a42c:	040e      	lsls	r6, r1, #16
    a42e:	0c36      	lsrs	r6, r6, #16
    a430:	19be      	adds	r6, r7, r6
    a432:	1936      	adds	r6, r6, r4
    a434:	0c09      	lsrs	r1, r1, #16
    a436:	0c34      	lsrs	r4, r6, #16
    a438:	1841      	adds	r1, r0, r1
    a43a:	1909      	adds	r1, r1, r4
    a43c:	0436      	lsls	r6, r6, #16
    a43e:	0c0c      	lsrs	r4, r1, #16
    a440:	0c36      	lsrs	r6, r6, #16
    a442:	0409      	lsls	r1, r1, #16
    a444:	4331      	orrs	r1, r6
    a446:	c302      	stmia	r3!, {r1}
    a448:	4590      	cmp	r8, r2
    a44a:	d8e8      	bhi.n	a41e <__multiply+0xaa>
    a44c:	4645      	mov	r5, r8
    a44e:	46a0      	mov	r8, r4
    a450:	4642      	mov	r2, r8
    a452:	4657      	mov	r7, sl
    a454:	601a      	str	r2, [r3, #0]
    a456:	683b      	ldr	r3, [r7, #0]
    a458:	464c      	mov	r4, r9
    a45a:	465e      	mov	r6, fp
    a45c:	0c1b      	lsrs	r3, r3, #16
    a45e:	4698      	mov	r8, r3
    a460:	2300      	movs	r3, #0
    a462:	4598      	cmp	r8, r3
    a464:	d02c      	beq.n	a4c0 <__multiply+0x14c>
    a466:	6832      	ldr	r2, [r6, #0]
    a468:	9b00      	ldr	r3, [sp, #0]
    a46a:	9401      	str	r4, [sp, #4]
    a46c:	1c31      	adds	r1, r6, #0
    a46e:	46b3      	mov	fp, r6
    a470:	9e01      	ldr	r6, [sp, #4]
    a472:	469a      	mov	sl, r3
    a474:	46c1      	mov	r9, r8
    a476:	2300      	movs	r3, #0
    a478:	1c1c      	adds	r4, r3, #0
    a47a:	46a8      	mov	r8, r5
    a47c:	4653      	mov	r3, sl
    a47e:	464d      	mov	r5, r9
    a480:	1c10      	adds	r0, r2, #0
    a482:	46ba      	mov	sl, r7
    a484:	46b1      	mov	r9, r6
    a486:	1c1e      	adds	r6, r3, #0
    a488:	cb80      	ldmia	r3!, {r7}
    a48a:	043f      	lsls	r7, r7, #16
    a48c:	0c3f      	lsrs	r7, r7, #16
    a48e:	436f      	muls	r7, r5
    a490:	0c00      	lsrs	r0, r0, #16
    a492:	19e4      	adds	r4, r4, r7
    a494:	1824      	adds	r4, r4, r0
    a496:	0412      	lsls	r2, r2, #16
    a498:	0420      	lsls	r0, r4, #16
    a49a:	0c12      	lsrs	r2, r2, #16
    a49c:	4302      	orrs	r2, r0
    a49e:	c104      	stmia	r1!, {r2}
    a4a0:	8876      	ldrh	r6, [r6, #2]
    a4a2:	436e      	muls	r6, r5
    a4a4:	6808      	ldr	r0, [r1, #0]
    a4a6:	0402      	lsls	r2, r0, #16
    a4a8:	0c12      	lsrs	r2, r2, #16
    a4aa:	0c24      	lsrs	r4, r4, #16
    a4ac:	18b2      	adds	r2, r6, r2
    a4ae:	1912      	adds	r2, r2, r4
    a4b0:	0c14      	lsrs	r4, r2, #16
    a4b2:	4598      	cmp	r8, r3
    a4b4:	d8e7      	bhi.n	a486 <__multiply+0x112>
    a4b6:	600a      	str	r2, [r1, #0]
    a4b8:	4645      	mov	r5, r8
    a4ba:	464c      	mov	r4, r9
    a4bc:	4657      	mov	r7, sl
    a4be:	465e      	mov	r6, fp
    a4c0:	3704      	adds	r7, #4
    a4c2:	42bc      	cmp	r4, r7
    a4c4:	d901      	bls.n	a4ca <__multiply+0x156>
    a4c6:	3604      	adds	r6, #4
    a4c8:	e797      	b.n	a3fa <__multiply+0x86>
    a4ca:	4664      	mov	r4, ip
    a4cc:	2c00      	cmp	r4, #0
    a4ce:	dd08      	ble.n	a4e2 <__multiply+0x16e>
    a4d0:	9b03      	ldr	r3, [sp, #12]
    a4d2:	e002      	b.n	a4da <__multiply+0x166>
    a4d4:	3c01      	subs	r4, #1
    a4d6:	2c00      	cmp	r4, #0
    a4d8:	dd03      	ble.n	a4e2 <__multiply+0x16e>
    a4da:	3b04      	subs	r3, #4
    a4dc:	681a      	ldr	r2, [r3, #0]
    a4de:	2a00      	cmp	r2, #0
    a4e0:	d0f8      	beq.n	a4d4 <__multiply+0x160>
    a4e2:	9902      	ldr	r1, [sp, #8]
    a4e4:	b005      	add	sp, #20
    a4e6:	1c08      	adds	r0, r1, #0
    a4e8:	610c      	str	r4, [r1, #16]
    a4ea:	bc3c      	pop	{r2, r3, r4, r5}
    a4ec:	4690      	mov	r8, r2
    a4ee:	4699      	mov	r9, r3
    a4f0:	46a2      	mov	sl, r4
    a4f2:	46ab      	mov	fp, r5
    a4f4:	bcf0      	pop	{r4, r5, r6, r7}
    a4f6:	bc02      	pop	{r1}
    a4f8:	4708      	bx	r1
    a4fa:	46c0      	nop			; (mov r8, r8)

0000a4fc <__pow5mult>:
    a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4fe:	464f      	mov	r7, r9
    a500:	4646      	mov	r6, r8
    a502:	b4c0      	push	{r6, r7}
    a504:	2303      	movs	r3, #3
    a506:	4680      	mov	r8, r0
    a508:	1c0e      	adds	r6, r1, #0
    a50a:	1c14      	adds	r4, r2, #0
    a50c:	4013      	ands	r3, r2
    a50e:	d138      	bne.n	a582 <__pow5mult+0x86>
    a510:	10a4      	asrs	r4, r4, #2
    a512:	2c00      	cmp	r4, #0
    a514:	d023      	beq.n	a55e <__pow5mult+0x62>
    a516:	4641      	mov	r1, r8
    a518:	6c8d      	ldr	r5, [r1, #72]	; 0x48
    a51a:	2d00      	cmp	r5, #0
    a51c:	d03a      	beq.n	a594 <__pow5mult+0x98>
    a51e:	2101      	movs	r1, #1
    a520:	4689      	mov	r9, r1
    a522:	e006      	b.n	a532 <__pow5mult+0x36>
    a524:	1064      	asrs	r4, r4, #1
    a526:	2c00      	cmp	r4, #0
    a528:	d019      	beq.n	a55e <__pow5mult+0x62>
    a52a:	682f      	ldr	r7, [r5, #0]
    a52c:	2f00      	cmp	r7, #0
    a52e:	d01d      	beq.n	a56c <__pow5mult+0x70>
    a530:	1c3d      	adds	r5, r7, #0
    a532:	464b      	mov	r3, r9
    a534:	421c      	tst	r4, r3
    a536:	d0f5      	beq.n	a524 <__pow5mult+0x28>
    a538:	4640      	mov	r0, r8
    a53a:	1c31      	adds	r1, r6, #0
    a53c:	1c2a      	adds	r2, r5, #0
    a53e:	f7ff ff19 	bl	a374 <__multiply>
    a542:	2e00      	cmp	r6, #0
    a544:	d01b      	beq.n	a57e <__pow5mult+0x82>
    a546:	6873      	ldr	r3, [r6, #4]
    a548:	4641      	mov	r1, r8
    a54a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    a54c:	009b      	lsls	r3, r3, #2
    a54e:	18d3      	adds	r3, r2, r3
    a550:	681a      	ldr	r2, [r3, #0]
    a552:	1064      	asrs	r4, r4, #1
    a554:	6032      	str	r2, [r6, #0]
    a556:	601e      	str	r6, [r3, #0]
    a558:	1c06      	adds	r6, r0, #0
    a55a:	2c00      	cmp	r4, #0
    a55c:	d1e5      	bne.n	a52a <__pow5mult+0x2e>
    a55e:	1c30      	adds	r0, r6, #0
    a560:	bc0c      	pop	{r2, r3}
    a562:	4690      	mov	r8, r2
    a564:	4699      	mov	r9, r3
    a566:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a568:	bc02      	pop	{r1}
    a56a:	4708      	bx	r1
    a56c:	1c29      	adds	r1, r5, #0
    a56e:	1c2a      	adds	r2, r5, #0
    a570:	4640      	mov	r0, r8
    a572:	f7ff feff 	bl	a374 <__multiply>
    a576:	6028      	str	r0, [r5, #0]
    a578:	6007      	str	r7, [r0, #0]
    a57a:	1c05      	adds	r5, r0, #0
    a57c:	e7d9      	b.n	a532 <__pow5mult+0x36>
    a57e:	1c06      	adds	r6, r0, #0
    a580:	e7d0      	b.n	a524 <__pow5mult+0x28>
    a582:	4a09      	ldr	r2, [pc, #36]	; (a5a8 <__pow5mult+0xac>)
    a584:	3b01      	subs	r3, #1
    a586:	009b      	lsls	r3, r3, #2
    a588:	589a      	ldr	r2, [r3, r2]
    a58a:	2300      	movs	r3, #0
    a58c:	f7ff fdfe 	bl	a18c <__multadd>
    a590:	1c06      	adds	r6, r0, #0
    a592:	e7bd      	b.n	a510 <__pow5mult+0x14>
    a594:	4640      	mov	r0, r8
    a596:	4905      	ldr	r1, [pc, #20]	; (a5ac <__pow5mult+0xb0>)
    a598:	f7ff fee0 	bl	a35c <__i2b>
    a59c:	4643      	mov	r3, r8
    a59e:	6498      	str	r0, [r3, #72]	; 0x48
    a5a0:	2300      	movs	r3, #0
    a5a2:	1c05      	adds	r5, r0, #0
    a5a4:	6003      	str	r3, [r0, #0]
    a5a6:	e7ba      	b.n	a51e <__pow5mult+0x22>
    a5a8:	0000e548 	.word	0x0000e548
    a5ac:	00000271 	.word	0x00000271

0000a5b0 <__lshift>:
    a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5b2:	465f      	mov	r7, fp
    a5b4:	4656      	mov	r6, sl
    a5b6:	464d      	mov	r5, r9
    a5b8:	4644      	mov	r4, r8
    a5ba:	b4f0      	push	{r4, r5, r6, r7}
    a5bc:	1c0e      	adds	r6, r1, #0
    a5be:	6934      	ldr	r4, [r6, #16]
    a5c0:	1155      	asrs	r5, r2, #5
    a5c2:	3401      	adds	r4, #1
    a5c4:	68b3      	ldr	r3, [r6, #8]
    a5c6:	1964      	adds	r4, r4, r5
    a5c8:	4683      	mov	fp, r0
    a5ca:	4690      	mov	r8, r2
    a5cc:	6849      	ldr	r1, [r1, #4]
    a5ce:	429c      	cmp	r4, r3
    a5d0:	dd03      	ble.n	a5da <__lshift+0x2a>
    a5d2:	005b      	lsls	r3, r3, #1
    a5d4:	3101      	adds	r1, #1
    a5d6:	429c      	cmp	r4, r3
    a5d8:	dcfb      	bgt.n	a5d2 <__lshift+0x22>
    a5da:	4658      	mov	r0, fp
    a5dc:	f7ff fda0 	bl	a120 <_Balloc>
    a5e0:	4682      	mov	sl, r0
    a5e2:	2014      	movs	r0, #20
    a5e4:	1c02      	adds	r2, r0, #0
    a5e6:	4452      	add	r2, sl
    a5e8:	2d00      	cmp	r5, #0
    a5ea:	dd09      	ble.n	a600 <__lshift+0x50>
    a5ec:	2300      	movs	r3, #0
    a5ee:	1c19      	adds	r1, r3, #0
    a5f0:	3301      	adds	r3, #1
    a5f2:	c202      	stmia	r2!, {r1}
    a5f4:	42ab      	cmp	r3, r5
    a5f6:	d1fb      	bne.n	a5f0 <__lshift+0x40>
    a5f8:	1d1a      	adds	r2, r3, #4
    a5fa:	0092      	lsls	r2, r2, #2
    a5fc:	4452      	add	r2, sl
    a5fe:	3204      	adds	r2, #4
    a600:	6935      	ldr	r5, [r6, #16]
    a602:	211f      	movs	r1, #31
    a604:	3504      	adds	r5, #4
    a606:	468c      	mov	ip, r1
    a608:	1c33      	adds	r3, r6, #0
    a60a:	00ad      	lsls	r5, r5, #2
    a60c:	3314      	adds	r3, #20
    a60e:	1975      	adds	r5, r6, r5
    a610:	4647      	mov	r7, r8
    a612:	4660      	mov	r0, ip
    a614:	3504      	adds	r5, #4
    a616:	1c19      	adds	r1, r3, #0
    a618:	4007      	ands	r7, r0
    a61a:	46b8      	mov	r8, r7
    a61c:	d026      	beq.n	a66c <__lshift+0xbc>
    a61e:	2120      	movs	r1, #32
    a620:	4647      	mov	r7, r8
    a622:	1bcf      	subs	r7, r1, r7
    a624:	46bc      	mov	ip, r7
    a626:	3920      	subs	r1, #32
    a628:	6818      	ldr	r0, [r3, #0]
    a62a:	1c07      	adds	r7, r0, #0
    a62c:	4640      	mov	r0, r8
    a62e:	4087      	lsls	r7, r0
    a630:	4339      	orrs	r1, r7
    a632:	c202      	stmia	r2!, {r1}
    a634:	cb02      	ldmia	r3!, {r1}
    a636:	4667      	mov	r7, ip
    a638:	40f9      	lsrs	r1, r7
    a63a:	429d      	cmp	r5, r3
    a63c:	d8f4      	bhi.n	a628 <__lshift+0x78>
    a63e:	6011      	str	r1, [r2, #0]
    a640:	1e4b      	subs	r3, r1, #1
    a642:	4199      	sbcs	r1, r3
    a644:	1864      	adds	r4, r4, r1
    a646:	6873      	ldr	r3, [r6, #4]
    a648:	4659      	mov	r1, fp
    a64a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    a64c:	009b      	lsls	r3, r3, #2
    a64e:	18d3      	adds	r3, r2, r3
    a650:	681a      	ldr	r2, [r3, #0]
    a652:	4650      	mov	r0, sl
    a654:	3c01      	subs	r4, #1
    a656:	6032      	str	r2, [r6, #0]
    a658:	6104      	str	r4, [r0, #16]
    a65a:	601e      	str	r6, [r3, #0]
    a65c:	bc3c      	pop	{r2, r3, r4, r5}
    a65e:	4690      	mov	r8, r2
    a660:	4699      	mov	r9, r3
    a662:	46a2      	mov	sl, r4
    a664:	46ab      	mov	fp, r5
    a666:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a668:	bc02      	pop	{r1}
    a66a:	4708      	bx	r1
    a66c:	c908      	ldmia	r1!, {r3}
    a66e:	c208      	stmia	r2!, {r3}
    a670:	428d      	cmp	r5, r1
    a672:	d9e8      	bls.n	a646 <__lshift+0x96>
    a674:	c908      	ldmia	r1!, {r3}
    a676:	c208      	stmia	r2!, {r3}
    a678:	428d      	cmp	r5, r1
    a67a:	d8f7      	bhi.n	a66c <__lshift+0xbc>
    a67c:	e7e3      	b.n	a646 <__lshift+0x96>
    a67e:	46c0      	nop			; (mov r8, r8)

0000a680 <__mcmp>:
    a680:	b570      	push	{r4, r5, r6, lr}
    a682:	1c03      	adds	r3, r0, #0
    a684:	690e      	ldr	r6, [r1, #16]
    a686:	6900      	ldr	r0, [r0, #16]
    a688:	1b80      	subs	r0, r0, r6
    a68a:	2800      	cmp	r0, #0
    a68c:	d10f      	bne.n	a6ae <__mcmp+0x2e>
    a68e:	3604      	adds	r6, #4
    a690:	00b6      	lsls	r6, r6, #2
    a692:	1c1d      	adds	r5, r3, #0
    a694:	1989      	adds	r1, r1, r6
    a696:	199b      	adds	r3, r3, r6
    a698:	3514      	adds	r5, #20
    a69a:	3304      	adds	r3, #4
    a69c:	3104      	adds	r1, #4
    a69e:	3b04      	subs	r3, #4
    a6a0:	3904      	subs	r1, #4
    a6a2:	681c      	ldr	r4, [r3, #0]
    a6a4:	680a      	ldr	r2, [r1, #0]
    a6a6:	4294      	cmp	r4, r2
    a6a8:	d104      	bne.n	a6b4 <__mcmp+0x34>
    a6aa:	429d      	cmp	r5, r3
    a6ac:	d3f7      	bcc.n	a69e <__mcmp+0x1e>
    a6ae:	bc70      	pop	{r4, r5, r6}
    a6b0:	bc02      	pop	{r1}
    a6b2:	4708      	bx	r1
    a6b4:	4294      	cmp	r4, r2
    a6b6:	4192      	sbcs	r2, r2
    a6b8:	2001      	movs	r0, #1
    a6ba:	4310      	orrs	r0, r2
    a6bc:	e7f7      	b.n	a6ae <__mcmp+0x2e>
    a6be:	46c0      	nop			; (mov r8, r8)

0000a6c0 <__mdiff>:
    a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a6c2:	465f      	mov	r7, fp
    a6c4:	4656      	mov	r6, sl
    a6c6:	464d      	mov	r5, r9
    a6c8:	4644      	mov	r4, r8
    a6ca:	b4f0      	push	{r4, r5, r6, r7}
    a6cc:	1c07      	adds	r7, r0, #0
    a6ce:	1c0c      	adds	r4, r1, #0
    a6d0:	1c08      	adds	r0, r1, #0
    a6d2:	1c11      	adds	r1, r2, #0
    a6d4:	1c15      	adds	r5, r2, #0
    a6d6:	f7ff ffd3 	bl	a680 <__mcmp>
    a6da:	1e06      	subs	r6, r0, #0
    a6dc:	d067      	beq.n	a7ae <__mdiff+0xee>
    a6de:	2e00      	cmp	r6, #0
    a6e0:	db60      	blt.n	a7a4 <__mdiff+0xe4>
    a6e2:	2600      	movs	r6, #0
    a6e4:	6861      	ldr	r1, [r4, #4]
    a6e6:	1c38      	adds	r0, r7, #0
    a6e8:	f7ff fd1a 	bl	a120 <_Balloc>
    a6ec:	6922      	ldr	r2, [r4, #16]
    a6ee:	2704      	movs	r7, #4
    a6f0:	4694      	mov	ip, r2
    a6f2:	1c3b      	adds	r3, r7, #0
    a6f4:	4463      	add	r3, ip
    a6f6:	009b      	lsls	r3, r3, #2
    a6f8:	18e3      	adds	r3, r4, r3
    a6fa:	19db      	adds	r3, r3, r7
    a6fc:	692f      	ldr	r7, [r5, #16]
    a6fe:	3704      	adds	r7, #4
    a700:	00bf      	lsls	r7, r7, #2
    a702:	19ef      	adds	r7, r5, r7
    a704:	2214      	movs	r2, #20
    a706:	3704      	adds	r7, #4
    a708:	1812      	adds	r2, r2, r0
    a70a:	60c6      	str	r6, [r0, #12]
    a70c:	4698      	mov	r8, r3
    a70e:	46bb      	mov	fp, r7
    a710:	3414      	adds	r4, #20
    a712:	3514      	adds	r5, #20
    a714:	4691      	mov	r9, r2
    a716:	2100      	movs	r1, #0
    a718:	cc40      	ldmia	r4!, {r6}
    a71a:	cd04      	ldmia	r5!, {r2}
    a71c:	0433      	lsls	r3, r6, #16
    a71e:	0c1b      	lsrs	r3, r3, #16
    a720:	469a      	mov	sl, r3
    a722:	0413      	lsls	r3, r2, #16
    a724:	0c1b      	lsrs	r3, r3, #16
    a726:	4657      	mov	r7, sl
    a728:	1afb      	subs	r3, r7, r3
    a72a:	185b      	adds	r3, r3, r1
    a72c:	0c12      	lsrs	r2, r2, #16
    a72e:	0c36      	lsrs	r6, r6, #16
    a730:	1419      	asrs	r1, r3, #16
    a732:	1ab6      	subs	r6, r6, r2
    a734:	1876      	adds	r6, r6, r1
    a736:	041b      	lsls	r3, r3, #16
    a738:	0c1b      	lsrs	r3, r3, #16
    a73a:	1431      	asrs	r1, r6, #16
    a73c:	0436      	lsls	r6, r6, #16
    a73e:	431e      	orrs	r6, r3
    a740:	464b      	mov	r3, r9
    a742:	c340      	stmia	r3!, {r6}
    a744:	1c22      	adds	r2, r4, #0
    a746:	4699      	mov	r9, r3
    a748:	45ab      	cmp	fp, r5
    a74a:	d8e5      	bhi.n	a718 <__mdiff+0x58>
    a74c:	45a0      	cmp	r8, r4
    a74e:	d91b      	bls.n	a788 <__mdiff+0xc8>
    a750:	ca80      	ldmia	r2!, {r7}
    a752:	043d      	lsls	r5, r7, #16
    a754:	0c2d      	lsrs	r5, r5, #16
    a756:	194d      	adds	r5, r1, r5
    a758:	142e      	asrs	r6, r5, #16
    a75a:	0c3f      	lsrs	r7, r7, #16
    a75c:	19f6      	adds	r6, r6, r7
    a75e:	042d      	lsls	r5, r5, #16
    a760:	1431      	asrs	r1, r6, #16
    a762:	0c2d      	lsrs	r5, r5, #16
    a764:	0436      	lsls	r6, r6, #16
    a766:	432e      	orrs	r6, r5
    a768:	c340      	stmia	r3!, {r6}
    a76a:	4590      	cmp	r8, r2
    a76c:	d8f0      	bhi.n	a750 <__mdiff+0x90>
    a76e:	43e3      	mvns	r3, r4
    a770:	4443      	add	r3, r8
    a772:	089b      	lsrs	r3, r3, #2
    a774:	3301      	adds	r3, #1
    a776:	009b      	lsls	r3, r3, #2
    a778:	444b      	add	r3, r9
    a77a:	3b04      	subs	r3, #4
    a77c:	681a      	ldr	r2, [r3, #0]
    a77e:	2a00      	cmp	r2, #0
    a780:	d106      	bne.n	a790 <__mdiff+0xd0>
    a782:	2201      	movs	r2, #1
    a784:	4252      	negs	r2, r2
    a786:	4494      	add	ip, r2
    a788:	3b04      	subs	r3, #4
    a78a:	681a      	ldr	r2, [r3, #0]
    a78c:	2a00      	cmp	r2, #0
    a78e:	d0f8      	beq.n	a782 <__mdiff+0xc2>
    a790:	4663      	mov	r3, ip
    a792:	6103      	str	r3, [r0, #16]
    a794:	bc3c      	pop	{r2, r3, r4, r5}
    a796:	4690      	mov	r8, r2
    a798:	4699      	mov	r9, r3
    a79a:	46a2      	mov	sl, r4
    a79c:	46ab      	mov	fp, r5
    a79e:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a7a0:	bc02      	pop	{r1}
    a7a2:	4708      	bx	r1
    a7a4:	1c23      	adds	r3, r4, #0
    a7a6:	2601      	movs	r6, #1
    a7a8:	1c2c      	adds	r4, r5, #0
    a7aa:	1c1d      	adds	r5, r3, #0
    a7ac:	e79a      	b.n	a6e4 <__mdiff+0x24>
    a7ae:	1c38      	adds	r0, r7, #0
    a7b0:	1c31      	adds	r1, r6, #0
    a7b2:	f7ff fcb5 	bl	a120 <_Balloc>
    a7b6:	2301      	movs	r3, #1
    a7b8:	6103      	str	r3, [r0, #16]
    a7ba:	6146      	str	r6, [r0, #20]
    a7bc:	e7ea      	b.n	a794 <__mdiff+0xd4>
    a7be:	46c0      	nop			; (mov r8, r8)

0000a7c0 <__ulp>:
    a7c0:	b510      	push	{r4, lr}
    a7c2:	4b10      	ldr	r3, [pc, #64]	; (a804 <__ulp+0x44>)
    a7c4:	4a10      	ldr	r2, [pc, #64]	; (a808 <__ulp+0x48>)
    a7c6:	400b      	ands	r3, r1
    a7c8:	189b      	adds	r3, r3, r2
    a7ca:	2b00      	cmp	r3, #0
    a7cc:	dd04      	ble.n	a7d8 <__ulp+0x18>
    a7ce:	1c19      	adds	r1, r3, #0
    a7d0:	2000      	movs	r0, #0
    a7d2:	bc10      	pop	{r4}
    a7d4:	bc04      	pop	{r2}
    a7d6:	4710      	bx	r2
    a7d8:	425b      	negs	r3, r3
    a7da:	151b      	asrs	r3, r3, #20
    a7dc:	2b13      	cmp	r3, #19
    a7de:	dd0a      	ble.n	a7f6 <__ulp+0x36>
    a7e0:	3b14      	subs	r3, #20
    a7e2:	2000      	movs	r0, #0
    a7e4:	2100      	movs	r1, #0
    a7e6:	2201      	movs	r2, #1
    a7e8:	2b1e      	cmp	r3, #30
    a7ea:	dc02      	bgt.n	a7f2 <__ulp+0x32>
    a7ec:	241f      	movs	r4, #31
    a7ee:	1ae3      	subs	r3, r4, r3
    a7f0:	409a      	lsls	r2, r3
    a7f2:	1c10      	adds	r0, r2, #0
    a7f4:	e7ed      	b.n	a7d2 <__ulp+0x12>
    a7f6:	2280      	movs	r2, #128	; 0x80
    a7f8:	0312      	lsls	r2, r2, #12
    a7fa:	1c11      	adds	r1, r2, #0
    a7fc:	4119      	asrs	r1, r3
    a7fe:	2000      	movs	r0, #0
    a800:	e7e7      	b.n	a7d2 <__ulp+0x12>
    a802:	46c0      	nop			; (mov r8, r8)
    a804:	7ff00000 	.word	0x7ff00000
    a808:	fcc00000 	.word	0xfcc00000

0000a80c <__b2d>:
    a80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a80e:	4647      	mov	r7, r8
    a810:	b480      	push	{r7}
    a812:	6904      	ldr	r4, [r0, #16]
    a814:	3404      	adds	r4, #4
    a816:	00a4      	lsls	r4, r4, #2
    a818:	1904      	adds	r4, r0, r4
    a81a:	6825      	ldr	r5, [r4, #0]
    a81c:	1c07      	adds	r7, r0, #0
    a81e:	1c28      	adds	r0, r5, #0
    a820:	1c0e      	adds	r6, r1, #0
    a822:	f7ff fd49 	bl	a2b8 <__hi0bits>
    a826:	2320      	movs	r3, #32
    a828:	1a1b      	subs	r3, r3, r0
    a82a:	3714      	adds	r7, #20
    a82c:	6033      	str	r3, [r6, #0]
    a82e:	280a      	cmp	r0, #10
    a830:	dc19      	bgt.n	a866 <__b2d+0x5a>
    a832:	260b      	movs	r6, #11
    a834:	1a36      	subs	r6, r6, r0
    a836:	1c29      	adds	r1, r5, #0
    a838:	40f1      	lsrs	r1, r6
    a83a:	4688      	mov	r8, r1
    a83c:	491a      	ldr	r1, [pc, #104]	; (a8a8 <__b2d+0x9c>)
    a83e:	1c0b      	adds	r3, r1, #0
    a840:	4641      	mov	r1, r8
    a842:	430b      	orrs	r3, r1
    a844:	2100      	movs	r1, #0
    a846:	42a7      	cmp	r7, r4
    a848:	d202      	bcs.n	a850 <__b2d+0x44>
    a84a:	3c04      	subs	r4, #4
    a84c:	6821      	ldr	r1, [r4, #0]
    a84e:	40f1      	lsrs	r1, r6
    a850:	3015      	adds	r0, #21
    a852:	4085      	lsls	r5, r0
    a854:	1c0a      	adds	r2, r1, #0
    a856:	432a      	orrs	r2, r5
    a858:	1c10      	adds	r0, r2, #0
    a85a:	1c19      	adds	r1, r3, #0
    a85c:	bc04      	pop	{r2}
    a85e:	4690      	mov	r8, r2
    a860:	bcf0      	pop	{r4, r5, r6, r7}
    a862:	bc04      	pop	{r2}
    a864:	4710      	bx	r2
    a866:	2100      	movs	r1, #0
    a868:	42a7      	cmp	r7, r4
    a86a:	d201      	bcs.n	a870 <__b2d+0x64>
    a86c:	3c04      	subs	r4, #4
    a86e:	6821      	ldr	r1, [r4, #0]
    a870:	380b      	subs	r0, #11
    a872:	2800      	cmp	r0, #0
    a874:	d013      	beq.n	a89e <__b2d+0x92>
    a876:	4b0c      	ldr	r3, [pc, #48]	; (a8a8 <__b2d+0x9c>)
    a878:	4085      	lsls	r5, r0
    a87a:	432b      	orrs	r3, r5
    a87c:	2620      	movs	r6, #32
    a87e:	1a36      	subs	r6, r6, r0
    a880:	469c      	mov	ip, r3
    a882:	1c0d      	adds	r5, r1, #0
    a884:	40f5      	lsrs	r5, r6
    a886:	4663      	mov	r3, ip
    a888:	432b      	orrs	r3, r5
    a88a:	2500      	movs	r5, #0
    a88c:	42bc      	cmp	r4, r7
    a88e:	d902      	bls.n	a896 <__b2d+0x8a>
    a890:	3c04      	subs	r4, #4
    a892:	6825      	ldr	r5, [r4, #0]
    a894:	40f5      	lsrs	r5, r6
    a896:	4081      	lsls	r1, r0
    a898:	1c2a      	adds	r2, r5, #0
    a89a:	430a      	orrs	r2, r1
    a89c:	e7dc      	b.n	a858 <__b2d+0x4c>
    a89e:	4802      	ldr	r0, [pc, #8]	; (a8a8 <__b2d+0x9c>)
    a8a0:	1c03      	adds	r3, r0, #0
    a8a2:	432b      	orrs	r3, r5
    a8a4:	1c0a      	adds	r2, r1, #0
    a8a6:	e7d7      	b.n	a858 <__b2d+0x4c>
    a8a8:	3ff00000 	.word	0x3ff00000

0000a8ac <__d2b>:
    a8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8ae:	464f      	mov	r7, r9
    a8b0:	4646      	mov	r6, r8
    a8b2:	b4c0      	push	{r6, r7}
    a8b4:	b083      	sub	sp, #12
    a8b6:	990a      	ldr	r1, [sp, #40]	; 0x28
    a8b8:	4688      	mov	r8, r1
    a8ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a8bc:	4689      	mov	r9, r1
    a8be:	2101      	movs	r1, #1
    a8c0:	1c1f      	adds	r7, r3, #0
    a8c2:	1c16      	adds	r6, r2, #0
    a8c4:	f7ff fc2c 	bl	a120 <_Balloc>
    a8c8:	007d      	lsls	r5, r7, #1
    a8ca:	033b      	lsls	r3, r7, #12
    a8cc:	0b1b      	lsrs	r3, r3, #12
    a8ce:	0d6d      	lsrs	r5, r5, #21
    a8d0:	1c04      	adds	r4, r0, #0
    a8d2:	9300      	str	r3, [sp, #0]
    a8d4:	2d00      	cmp	r5, #0
    a8d6:	d003      	beq.n	a8e0 <__d2b+0x34>
    a8d8:	2280      	movs	r2, #128	; 0x80
    a8da:	0352      	lsls	r2, r2, #13
    a8dc:	4313      	orrs	r3, r2
    a8de:	9300      	str	r3, [sp, #0]
    a8e0:	2e00      	cmp	r6, #0
    a8e2:	d01a      	beq.n	a91a <__d2b+0x6e>
    a8e4:	a801      	add	r0, sp, #4
    a8e6:	9601      	str	r6, [sp, #4]
    a8e8:	f7ff fd06 	bl	a2f8 <__lo0bits>
    a8ec:	2800      	cmp	r0, #0
    a8ee:	d134      	bne.n	a95a <__d2b+0xae>
    a8f0:	9b01      	ldr	r3, [sp, #4]
    a8f2:	9e00      	ldr	r6, [sp, #0]
    a8f4:	6163      	str	r3, [r4, #20]
    a8f6:	61a6      	str	r6, [r4, #24]
    a8f8:	4273      	negs	r3, r6
    a8fa:	4173      	adcs	r3, r6
    a8fc:	2602      	movs	r6, #2
    a8fe:	1af6      	subs	r6, r6, r3
    a900:	6126      	str	r6, [r4, #16]
    a902:	2d00      	cmp	r5, #0
    a904:	d013      	beq.n	a92e <__d2b+0x82>
    a906:	4b1b      	ldr	r3, [pc, #108]	; (a974 <__d2b+0xc8>)
    a908:	18ed      	adds	r5, r5, r3
    a90a:	2335      	movs	r3, #53	; 0x35
    a90c:	182d      	adds	r5, r5, r0
    a90e:	4641      	mov	r1, r8
    a910:	1a18      	subs	r0, r3, r0
    a912:	464a      	mov	r2, r9
    a914:	600d      	str	r5, [r1, #0]
    a916:	6010      	str	r0, [r2, #0]
    a918:	e017      	b.n	a94a <__d2b+0x9e>
    a91a:	4668      	mov	r0, sp
    a91c:	f7ff fcec 	bl	a2f8 <__lo0bits>
    a920:	9b00      	ldr	r3, [sp, #0]
    a922:	2601      	movs	r6, #1
    a924:	6163      	str	r3, [r4, #20]
    a926:	6126      	str	r6, [r4, #16]
    a928:	3020      	adds	r0, #32
    a92a:	2d00      	cmp	r5, #0
    a92c:	d1eb      	bne.n	a906 <__d2b+0x5a>
    a92e:	4b12      	ldr	r3, [pc, #72]	; (a978 <__d2b+0xcc>)
    a930:	18c0      	adds	r0, r0, r3
    a932:	1cf3      	adds	r3, r6, #3
    a934:	009b      	lsls	r3, r3, #2
    a936:	4641      	mov	r1, r8
    a938:	18e3      	adds	r3, r4, r3
    a93a:	6008      	str	r0, [r1, #0]
    a93c:	6858      	ldr	r0, [r3, #4]
    a93e:	f7ff fcbb 	bl	a2b8 <__hi0bits>
    a942:	0176      	lsls	r6, r6, #5
    a944:	1a36      	subs	r6, r6, r0
    a946:	464a      	mov	r2, r9
    a948:	6016      	str	r6, [r2, #0]
    a94a:	b003      	add	sp, #12
    a94c:	1c20      	adds	r0, r4, #0
    a94e:	bc0c      	pop	{r2, r3}
    a950:	4690      	mov	r8, r2
    a952:	4699      	mov	r9, r3
    a954:	bcf0      	pop	{r4, r5, r6, r7}
    a956:	bc02      	pop	{r1}
    a958:	4708      	bx	r1
    a95a:	9e00      	ldr	r6, [sp, #0]
    a95c:	2320      	movs	r3, #32
    a95e:	1a1b      	subs	r3, r3, r0
    a960:	1c32      	adds	r2, r6, #0
    a962:	409a      	lsls	r2, r3
    a964:	1c13      	adds	r3, r2, #0
    a966:	9a01      	ldr	r2, [sp, #4]
    a968:	40c6      	lsrs	r6, r0
    a96a:	4313      	orrs	r3, r2
    a96c:	6163      	str	r3, [r4, #20]
    a96e:	9600      	str	r6, [sp, #0]
    a970:	e7c1      	b.n	a8f6 <__d2b+0x4a>
    a972:	46c0      	nop			; (mov r8, r8)
    a974:	fffffbcd 	.word	0xfffffbcd
    a978:	fffffbce 	.word	0xfffffbce

0000a97c <__ratio>:
    a97c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a97e:	4647      	mov	r7, r8
    a980:	b480      	push	{r7}
    a982:	b086      	sub	sp, #24
    a984:	1c0f      	adds	r7, r1, #0
    a986:	a905      	add	r1, sp, #20
    a988:	1c06      	adds	r6, r0, #0
    a98a:	f7ff ff3f 	bl	a80c <__b2d>
    a98e:	1c04      	adds	r4, r0, #0
    a990:	1c0d      	adds	r5, r1, #0
    a992:	1c38      	adds	r0, r7, #0
    a994:	a904      	add	r1, sp, #16
    a996:	9402      	str	r4, [sp, #8]
    a998:	9503      	str	r5, [sp, #12]
    a99a:	f7ff ff37 	bl	a80c <__b2d>
    a99e:	6936      	ldr	r6, [r6, #16]
    a9a0:	1c02      	adds	r2, r0, #0
    a9a2:	1c0b      	adds	r3, r1, #0
    a9a4:	9804      	ldr	r0, [sp, #16]
    a9a6:	9905      	ldr	r1, [sp, #20]
    a9a8:	46b0      	mov	r8, r6
    a9aa:	693e      	ldr	r6, [r7, #16]
    a9ac:	1a09      	subs	r1, r1, r0
    a9ae:	4640      	mov	r0, r8
    a9b0:	1b87      	subs	r7, r0, r6
    a9b2:	017f      	lsls	r7, r7, #5
    a9b4:	468c      	mov	ip, r1
    a9b6:	1c3e      	adds	r6, r7, #0
    a9b8:	4466      	add	r6, ip
    a9ba:	9200      	str	r2, [sp, #0]
    a9bc:	9301      	str	r3, [sp, #4]
    a9be:	2e00      	cmp	r6, #0
    a9c0:	dd0f      	ble.n	a9e2 <__ratio+0x66>
    a9c2:	9903      	ldr	r1, [sp, #12]
    a9c4:	0536      	lsls	r6, r6, #20
    a9c6:	1989      	adds	r1, r1, r6
    a9c8:	9103      	str	r1, [sp, #12]
    a9ca:	9c02      	ldr	r4, [sp, #8]
    a9cc:	9d03      	ldr	r5, [sp, #12]
    a9ce:	1c29      	adds	r1, r5, #0
    a9d0:	1c20      	adds	r0, r4, #0
    a9d2:	f003 fb67 	bl	e0a4 <____aeabi_ddiv_from_thumb>
    a9d6:	b006      	add	sp, #24
    a9d8:	bc04      	pop	{r2}
    a9da:	4690      	mov	r8, r2
    a9dc:	bcf0      	pop	{r4, r5, r6, r7}
    a9de:	bc04      	pop	{r2}
    a9e0:	4710      	bx	r2
    a9e2:	9b01      	ldr	r3, [sp, #4]
    a9e4:	0536      	lsls	r6, r6, #20
    a9e6:	1b9e      	subs	r6, r3, r6
    a9e8:	9601      	str	r6, [sp, #4]
    a9ea:	9a00      	ldr	r2, [sp, #0]
    a9ec:	9b01      	ldr	r3, [sp, #4]
    a9ee:	e7ee      	b.n	a9ce <__ratio+0x52>

0000a9f0 <_mprec_log10>:
    a9f0:	b510      	push	{r4, lr}
    a9f2:	1c04      	adds	r4, r0, #0
    a9f4:	2817      	cmp	r0, #23
    a9f6:	dd0b      	ble.n	aa10 <_mprec_log10+0x20>
    a9f8:	490a      	ldr	r1, [pc, #40]	; (aa24 <_mprec_log10+0x34>)
    a9fa:	4809      	ldr	r0, [pc, #36]	; (aa20 <_mprec_log10+0x30>)
    a9fc:	4a0a      	ldr	r2, [pc, #40]	; (aa28 <_mprec_log10+0x38>)
    a9fe:	4b0b      	ldr	r3, [pc, #44]	; (aa2c <_mprec_log10+0x3c>)
    aa00:	3c01      	subs	r4, #1
    aa02:	f003 fb3d 	bl	e080 <____aeabi_dmul_from_thumb>
    aa06:	2c00      	cmp	r4, #0
    aa08:	d1f8      	bne.n	a9fc <_mprec_log10+0xc>
    aa0a:	bc10      	pop	{r4}
    aa0c:	bc04      	pop	{r2}
    aa0e:	4710      	bx	r2
    aa10:	4b07      	ldr	r3, [pc, #28]	; (aa30 <_mprec_log10+0x40>)
    aa12:	00c4      	lsls	r4, r0, #3
    aa14:	191c      	adds	r4, r3, r4
    aa16:	6920      	ldr	r0, [r4, #16]
    aa18:	6961      	ldr	r1, [r4, #20]
    aa1a:	e7f6      	b.n	aa0a <_mprec_log10+0x1a>
    aa1c:	46c0      	nop			; (mov r8, r8)
    aa1e:	46c0      	nop			; (mov r8, r8)
    aa20:	00000000 	.word	0x00000000
    aa24:	3ff00000 	.word	0x3ff00000
    aa28:	00000000 	.word	0x00000000
    aa2c:	40240000 	.word	0x40240000
    aa30:	0000e548 	.word	0x0000e548

0000aa34 <__copybits>:
    aa34:	b570      	push	{r4, r5, r6, lr}
    aa36:	6915      	ldr	r5, [r2, #16]
    aa38:	1e4e      	subs	r6, r1, #1
    aa3a:	3504      	adds	r5, #4
    aa3c:	1176      	asrs	r6, r6, #5
    aa3e:	00ad      	lsls	r5, r5, #2
    aa40:	3601      	adds	r6, #1
    aa42:	1c13      	adds	r3, r2, #0
    aa44:	1955      	adds	r5, r2, r5
    aa46:	00b6      	lsls	r6, r6, #2
    aa48:	3314      	adds	r3, #20
    aa4a:	3504      	adds	r5, #4
    aa4c:	1986      	adds	r6, r0, r6
    aa4e:	42ab      	cmp	r3, r5
    aa50:	d20a      	bcs.n	aa68 <__copybits+0x34>
    aa52:	1c01      	adds	r1, r0, #0
    aa54:	cb10      	ldmia	r3!, {r4}
    aa56:	c110      	stmia	r1!, {r4}
    aa58:	429d      	cmp	r5, r3
    aa5a:	d8fb      	bhi.n	aa54 <__copybits+0x20>
    aa5c:	1aab      	subs	r3, r5, r2
    aa5e:	3b15      	subs	r3, #21
    aa60:	089b      	lsrs	r3, r3, #2
    aa62:	3301      	adds	r3, #1
    aa64:	009b      	lsls	r3, r3, #2
    aa66:	18c0      	adds	r0, r0, r3
    aa68:	4286      	cmp	r6, r0
    aa6a:	d903      	bls.n	aa74 <__copybits+0x40>
    aa6c:	2300      	movs	r3, #0
    aa6e:	c008      	stmia	r0!, {r3}
    aa70:	4286      	cmp	r6, r0
    aa72:	d8fc      	bhi.n	aa6e <__copybits+0x3a>
    aa74:	bc70      	pop	{r4, r5, r6}
    aa76:	bc01      	pop	{r0}
    aa78:	4700      	bx	r0
    aa7a:	46c0      	nop			; (mov r8, r8)

0000aa7c <__any_on>:
    aa7c:	b510      	push	{r4, lr}
    aa7e:	1c03      	adds	r3, r0, #0
    aa80:	6900      	ldr	r0, [r0, #16]
    aa82:	114a      	asrs	r2, r1, #5
    aa84:	4290      	cmp	r0, r2
    aa86:	da17      	bge.n	aab8 <__any_on+0x3c>
    aa88:	1c02      	adds	r2, r0, #0
    aa8a:	3204      	adds	r2, #4
    aa8c:	0092      	lsls	r2, r2, #2
    aa8e:	1c19      	adds	r1, r3, #0
    aa90:	189b      	adds	r3, r3, r2
    aa92:	3114      	adds	r1, #20
    aa94:	1d1a      	adds	r2, r3, #4
    aa96:	2000      	movs	r0, #0
    aa98:	4291      	cmp	r1, r2
    aa9a:	d20a      	bcs.n	aab2 <__any_on+0x36>
    aa9c:	681a      	ldr	r2, [r3, #0]
    aa9e:	3001      	adds	r0, #1
    aaa0:	2a00      	cmp	r2, #0
    aaa2:	d106      	bne.n	aab2 <__any_on+0x36>
    aaa4:	4299      	cmp	r1, r3
    aaa6:	d218      	bcs.n	aada <__any_on+0x5e>
    aaa8:	3b04      	subs	r3, #4
    aaaa:	681a      	ldr	r2, [r3, #0]
    aaac:	2a00      	cmp	r2, #0
    aaae:	d0f9      	beq.n	aaa4 <__any_on+0x28>
    aab0:	2001      	movs	r0, #1
    aab2:	bc10      	pop	{r4}
    aab4:	bc02      	pop	{r1}
    aab6:	4708      	bx	r1
    aab8:	4290      	cmp	r0, r2
    aaba:	dde6      	ble.n	aa8a <__any_on+0xe>
    aabc:	201f      	movs	r0, #31
    aabe:	4001      	ands	r1, r0
    aac0:	d0e3      	beq.n	aa8a <__any_on+0xe>
    aac2:	1d10      	adds	r0, r2, #4
    aac4:	0080      	lsls	r0, r0, #2
    aac6:	1818      	adds	r0, r3, r0
    aac8:	6844      	ldr	r4, [r0, #4]
    aaca:	1c20      	adds	r0, r4, #0
    aacc:	40c8      	lsrs	r0, r1
    aace:	4088      	lsls	r0, r1
    aad0:	1c01      	adds	r1, r0, #0
    aad2:	2001      	movs	r0, #1
    aad4:	42a1      	cmp	r1, r4
    aad6:	d1ec      	bne.n	aab2 <__any_on+0x36>
    aad8:	e7d7      	b.n	aa8a <__any_on+0xe>
    aada:	2000      	movs	r0, #0
    aadc:	e7e9      	b.n	aab2 <__any_on+0x36>
    aade:	46c0      	nop			; (mov r8, r8)

0000aae0 <_putc_r>:
    aae0:	b570      	push	{r4, r5, r6, lr}
    aae2:	1c05      	adds	r5, r0, #0
    aae4:	1c0e      	adds	r6, r1, #0
    aae6:	1c14      	adds	r4, r2, #0
    aae8:	2800      	cmp	r0, #0
    aaea:	d002      	beq.n	aaf2 <_putc_r+0x12>
    aaec:	6b83      	ldr	r3, [r0, #56]	; 0x38
    aaee:	2b00      	cmp	r3, #0
    aaf0:	d01a      	beq.n	ab28 <_putc_r+0x48>
    aaf2:	68a3      	ldr	r3, [r4, #8]
    aaf4:	3b01      	subs	r3, #1
    aaf6:	60a3      	str	r3, [r4, #8]
    aaf8:	2b00      	cmp	r3, #0
    aafa:	db08      	blt.n	ab0e <_putc_r+0x2e>
    aafc:	6823      	ldr	r3, [r4, #0]
    aafe:	701e      	strb	r6, [r3, #0]
    ab00:	6823      	ldr	r3, [r4, #0]
    ab02:	7818      	ldrb	r0, [r3, #0]
    ab04:	3301      	adds	r3, #1
    ab06:	6023      	str	r3, [r4, #0]
    ab08:	bc70      	pop	{r4, r5, r6}
    ab0a:	bc02      	pop	{r1}
    ab0c:	4708      	bx	r1
    ab0e:	69a2      	ldr	r2, [r4, #24]
    ab10:	4293      	cmp	r3, r2
    ab12:	db0c      	blt.n	ab2e <_putc_r+0x4e>
    ab14:	6823      	ldr	r3, [r4, #0]
    ab16:	701e      	strb	r6, [r3, #0]
    ab18:	6823      	ldr	r3, [r4, #0]
    ab1a:	7819      	ldrb	r1, [r3, #0]
    ab1c:	290a      	cmp	r1, #10
    ab1e:	d00c      	beq.n	ab3a <_putc_r+0x5a>
    ab20:	3301      	adds	r3, #1
    ab22:	1c08      	adds	r0, r1, #0
    ab24:	6023      	str	r3, [r4, #0]
    ab26:	e7ef      	b.n	ab08 <_putc_r+0x28>
    ab28:	f7fa f89c 	bl	4c64 <__sinit>
    ab2c:	e7e1      	b.n	aaf2 <_putc_r+0x12>
    ab2e:	1c28      	adds	r0, r5, #0
    ab30:	1c31      	adds	r1, r6, #0
    ab32:	1c22      	adds	r2, r4, #0
    ab34:	f7fd fe88 	bl	8848 <__swbuf_r>
    ab38:	e7e6      	b.n	ab08 <_putc_r+0x28>
    ab3a:	1c28      	adds	r0, r5, #0
    ab3c:	1c22      	adds	r2, r4, #0
    ab3e:	f7fd fe83 	bl	8848 <__swbuf_r>
    ab42:	e7e1      	b.n	ab08 <_putc_r+0x28>

0000ab44 <putc>:
    ab44:	b570      	push	{r4, r5, r6, lr}
    ab46:	4d19      	ldr	r5, [pc, #100]	; (abac <putc+0x68>)
    ab48:	1c06      	adds	r6, r0, #0
    ab4a:	6828      	ldr	r0, [r5, #0]
    ab4c:	1c0c      	adds	r4, r1, #0
    ab4e:	2800      	cmp	r0, #0
    ab50:	d002      	beq.n	ab58 <putc+0x14>
    ab52:	6b83      	ldr	r3, [r0, #56]	; 0x38
    ab54:	2b00      	cmp	r3, #0
    ab56:	d01a      	beq.n	ab8e <putc+0x4a>
    ab58:	68a3      	ldr	r3, [r4, #8]
    ab5a:	3b01      	subs	r3, #1
    ab5c:	60a3      	str	r3, [r4, #8]
    ab5e:	2b00      	cmp	r3, #0
    ab60:	db08      	blt.n	ab74 <putc+0x30>
    ab62:	6823      	ldr	r3, [r4, #0]
    ab64:	701e      	strb	r6, [r3, #0]
    ab66:	6823      	ldr	r3, [r4, #0]
    ab68:	7818      	ldrb	r0, [r3, #0]
    ab6a:	3301      	adds	r3, #1
    ab6c:	6023      	str	r3, [r4, #0]
    ab6e:	bc70      	pop	{r4, r5, r6}
    ab70:	bc02      	pop	{r1}
    ab72:	4708      	bx	r1
    ab74:	69a2      	ldr	r2, [r4, #24]
    ab76:	4293      	cmp	r3, r2
    ab78:	db0c      	blt.n	ab94 <putc+0x50>
    ab7a:	6823      	ldr	r3, [r4, #0]
    ab7c:	701e      	strb	r6, [r3, #0]
    ab7e:	6823      	ldr	r3, [r4, #0]
    ab80:	7819      	ldrb	r1, [r3, #0]
    ab82:	290a      	cmp	r1, #10
    ab84:	d00c      	beq.n	aba0 <putc+0x5c>
    ab86:	3301      	adds	r3, #1
    ab88:	1c08      	adds	r0, r1, #0
    ab8a:	6023      	str	r3, [r4, #0]
    ab8c:	e7ef      	b.n	ab6e <putc+0x2a>
    ab8e:	f7fa f869 	bl	4c64 <__sinit>
    ab92:	e7e1      	b.n	ab58 <putc+0x14>
    ab94:	6828      	ldr	r0, [r5, #0]
    ab96:	1c31      	adds	r1, r6, #0
    ab98:	1c22      	adds	r2, r4, #0
    ab9a:	f7fd fe55 	bl	8848 <__swbuf_r>
    ab9e:	e7e6      	b.n	ab6e <putc+0x2a>
    aba0:	6828      	ldr	r0, [r5, #0]
    aba2:	1c22      	adds	r2, r4, #0
    aba4:	f7fd fe50 	bl	8848 <__swbuf_r>
    aba8:	e7e1      	b.n	ab6e <putc+0x2a>
    abaa:	46c0      	nop			; (mov r8, r8)
    abac:	40000000 	.word	0x40000000

0000abb0 <_realloc_r>:
    abb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    abb2:	465f      	mov	r7, fp
    abb4:	4656      	mov	r6, sl
    abb6:	464d      	mov	r5, r9
    abb8:	4644      	mov	r4, r8
    abba:	b4f0      	push	{r4, r5, r6, r7}
    abbc:	b085      	sub	sp, #20
    abbe:	4680      	mov	r8, r0
    abc0:	1c0e      	adds	r6, r1, #0
    abc2:	1c17      	adds	r7, r2, #0
    abc4:	2900      	cmp	r1, #0
    abc6:	d100      	bne.n	abca <_realloc_r+0x1a>
    abc8:	e15f      	b.n	ae8a <_realloc_r+0x2da>
    abca:	1c34      	adds	r4, r6, #0
    abcc:	1c3d      	adds	r5, r7, #0
    abce:	3c08      	subs	r4, #8
    abd0:	350b      	adds	r5, #11
    abd2:	f7fa fe19 	bl	5808 <__malloc_lock>
    abd6:	6863      	ldr	r3, [r4, #4]
    abd8:	2d16      	cmp	r5, #22
    abda:	d900      	bls.n	abde <_realloc_r+0x2e>
    abdc:	e085      	b.n	acea <_realloc_r+0x13a>
    abde:	2210      	movs	r2, #16
    abe0:	2100      	movs	r1, #0
    abe2:	9100      	str	r1, [sp, #0]
    abe4:	9201      	str	r2, [sp, #4]
    abe6:	1c15      	adds	r5, r2, #0
    abe8:	42bd      	cmp	r5, r7
    abea:	d200      	bcs.n	abee <_realloc_r+0x3e>
    abec:	e152      	b.n	ae94 <_realloc_r+0x2e4>
    abee:	9800      	ldr	r0, [sp, #0]
    abf0:	2800      	cmp	r0, #0
    abf2:	d000      	beq.n	abf6 <_realloc_r+0x46>
    abf4:	e14e      	b.n	ae94 <_realloc_r+0x2e4>
    abf6:	2203      	movs	r2, #3
    abf8:	1c18      	adds	r0, r3, #0
    abfa:	4390      	bics	r0, r2
    abfc:	9901      	ldr	r1, [sp, #4]
    abfe:	4681      	mov	r9, r0
    ac00:	4692      	mov	sl, r2
    ac02:	4589      	cmp	r9, r1
    ac04:	da77      	bge.n	acf6 <_realloc_r+0x146>
    ac06:	4abb      	ldr	r2, [pc, #748]	; (aef4 <_realloc_r+0x344>)
    ac08:	6892      	ldr	r2, [r2, #8]
    ac0a:	1c21      	adds	r1, r4, #0
    ac0c:	4449      	add	r1, r9
    ac0e:	4694      	mov	ip, r2
    ac10:	458c      	cmp	ip, r1
    ac12:	d100      	bne.n	ac16 <_realloc_r+0x66>
    ac14:	e143      	b.n	ae9e <_realloc_r+0x2ee>
    ac16:	6848      	ldr	r0, [r1, #4]
    ac18:	2201      	movs	r2, #1
    ac1a:	9003      	str	r0, [sp, #12]
    ac1c:	4390      	bics	r0, r2
    ac1e:	4683      	mov	fp, r0
    ac20:	448b      	add	fp, r1
    ac22:	4658      	mov	r0, fp
    ac24:	6840      	ldr	r0, [r0, #4]
    ac26:	4210      	tst	r0, r2
    ac28:	d100      	bne.n	ac2c <_realloc_r+0x7c>
    ac2a:	e081      	b.n	ad30 <_realloc_r+0x180>
    ac2c:	9800      	ldr	r0, [sp, #0]
    ac2e:	1c01      	adds	r1, r0, #0
    ac30:	07da      	lsls	r2, r3, #31
    ac32:	d500      	bpl.n	ac36 <_realloc_r+0x86>
    ac34:	e09d      	b.n	ad72 <_realloc_r+0x1c2>
    ac36:	6823      	ldr	r3, [r4, #0]
    ac38:	1ae3      	subs	r3, r4, r3
    ac3a:	469a      	mov	sl, r3
    ac3c:	685b      	ldr	r3, [r3, #4]
    ac3e:	469b      	mov	fp, r3
    ac40:	465a      	mov	r2, fp
    ac42:	2303      	movs	r3, #3
    ac44:	439a      	bics	r2, r3
    ac46:	1c13      	adds	r3, r2, #0
    ac48:	2900      	cmp	r1, #0
    ac4a:	d100      	bne.n	ac4e <_realloc_r+0x9e>
    ac4c:	e0d6      	b.n	adfc <_realloc_r+0x24c>
    ac4e:	4561      	cmp	r1, ip
    ac50:	d100      	bne.n	ac54 <_realloc_r+0xa4>
    ac52:	e151      	b.n	aef8 <_realloc_r+0x348>
    ac54:	444b      	add	r3, r9
    ac56:	9303      	str	r3, [sp, #12]
    ac58:	181b      	adds	r3, r3, r0
    ac5a:	469b      	mov	fp, r3
    ac5c:	9b01      	ldr	r3, [sp, #4]
    ac5e:	455b      	cmp	r3, fp
    ac60:	dd00      	ble.n	ac64 <_realloc_r+0xb4>
    ac62:	e0cd      	b.n	ae00 <_realloc_r+0x250>
    ac64:	68cb      	ldr	r3, [r1, #12]
    ac66:	688a      	ldr	r2, [r1, #8]
    ac68:	60d3      	str	r3, [r2, #12]
    ac6a:	609a      	str	r2, [r3, #8]
    ac6c:	4650      	mov	r0, sl
    ac6e:	68c3      	ldr	r3, [r0, #12]
    ac70:	6882      	ldr	r2, [r0, #8]
    ac72:	60d3      	str	r3, [r2, #12]
    ac74:	609a      	str	r2, [r3, #8]
    ac76:	2304      	movs	r3, #4
    ac78:	425b      	negs	r3, r3
    ac7a:	2108      	movs	r1, #8
    ac7c:	1c1a      	adds	r2, r3, #0
    ac7e:	1c0f      	adds	r7, r1, #0
    ac80:	444a      	add	r2, r9
    ac82:	4457      	add	r7, sl
    ac84:	2a24      	cmp	r2, #36	; 0x24
    ac86:	d900      	bls.n	ac8a <_realloc_r+0xda>
    ac88:	e194      	b.n	afb4 <_realloc_r+0x404>
    ac8a:	1c39      	adds	r1, r7, #0
    ac8c:	2a13      	cmp	r2, #19
    ac8e:	d920      	bls.n	acd2 <_realloc_r+0x122>
    ac90:	1c33      	adds	r3, r6, #0
    ac92:	cb02      	ldmia	r3!, {r1}
    ac94:	6081      	str	r1, [r0, #8]
    ac96:	6871      	ldr	r1, [r6, #4]
    ac98:	60c1      	str	r1, [r0, #12]
    ac9a:	2010      	movs	r0, #16
    ac9c:	1c01      	adds	r1, r0, #0
    ac9e:	4451      	add	r1, sl
    aca0:	1d1e      	adds	r6, r3, #4
    aca2:	2a1b      	cmp	r2, #27
    aca4:	d915      	bls.n	acd2 <_realloc_r+0x122>
    aca6:	685b      	ldr	r3, [r3, #4]
    aca8:	4651      	mov	r1, sl
    acaa:	610b      	str	r3, [r1, #16]
    acac:	6871      	ldr	r1, [r6, #4]
    acae:	4650      	mov	r0, sl
    acb0:	6141      	str	r1, [r0, #20]
    acb2:	2018      	movs	r0, #24
    acb4:	1c01      	adds	r1, r0, #0
    acb6:	1d33      	adds	r3, r6, #4
    acb8:	4451      	add	r1, sl
    acba:	3608      	adds	r6, #8
    acbc:	2a24      	cmp	r2, #36	; 0x24
    acbe:	d108      	bne.n	acd2 <_realloc_r+0x122>
    acc0:	685b      	ldr	r3, [r3, #4]
    acc2:	4651      	mov	r1, sl
    acc4:	618b      	str	r3, [r1, #24]
    acc6:	6873      	ldr	r3, [r6, #4]
    acc8:	3a04      	subs	r2, #4
    acca:	61cb      	str	r3, [r1, #28]
    accc:	1c11      	adds	r1, r2, #0
    acce:	4451      	add	r1, sl
    acd0:	3608      	adds	r6, #8
    acd2:	1c32      	adds	r2, r6, #0
    acd4:	ca01      	ldmia	r2!, {r0}
    acd6:	1c0b      	adds	r3, r1, #0
    acd8:	c301      	stmia	r3!, {r0}
    acda:	6870      	ldr	r0, [r6, #4]
    acdc:	6048      	str	r0, [r1, #4]
    acde:	6852      	ldr	r2, [r2, #4]
    ace0:	605a      	str	r2, [r3, #4]
    ace2:	4650      	mov	r0, sl
    ace4:	6843      	ldr	r3, [r0, #4]
    ace6:	4654      	mov	r4, sl
    ace8:	e008      	b.n	acfc <_realloc_r+0x14c>
    acea:	2207      	movs	r2, #7
    acec:	4395      	bics	r5, r2
    acee:	0fe8      	lsrs	r0, r5, #31
    acf0:	9501      	str	r5, [sp, #4]
    acf2:	9000      	str	r0, [sp, #0]
    acf4:	e778      	b.n	abe8 <_realloc_r+0x38>
    acf6:	1c27      	adds	r7, r4, #0
    acf8:	3708      	adds	r7, #8
    acfa:	4683      	mov	fp, r0
    acfc:	4658      	mov	r0, fp
    acfe:	1b42      	subs	r2, r0, r5
    ad00:	2a0f      	cmp	r2, #15
    ad02:	d825      	bhi.n	ad50 <_realloc_r+0x1a0>
    ad04:	2201      	movs	r2, #1
    ad06:	4013      	ands	r3, r2
    ad08:	4659      	mov	r1, fp
    ad0a:	430b      	orrs	r3, r1
    ad0c:	6063      	str	r3, [r4, #4]
    ad0e:	445c      	add	r4, fp
    ad10:	6863      	ldr	r3, [r4, #4]
    ad12:	431a      	orrs	r2, r3
    ad14:	6062      	str	r2, [r4, #4]
    ad16:	4640      	mov	r0, r8
    ad18:	f7fa fd78 	bl	580c <__malloc_unlock>
    ad1c:	b005      	add	sp, #20
    ad1e:	1c38      	adds	r0, r7, #0
    ad20:	bc3c      	pop	{r2, r3, r4, r5}
    ad22:	4690      	mov	r8, r2
    ad24:	4699      	mov	r9, r3
    ad26:	46a2      	mov	sl, r4
    ad28:	46ab      	mov	fp, r5
    ad2a:	bcf0      	pop	{r4, r5, r6, r7}
    ad2c:	bc02      	pop	{r1}
    ad2e:	4708      	bx	r1
    ad30:	9803      	ldr	r0, [sp, #12]
    ad32:	4652      	mov	r2, sl
    ad34:	4390      	bics	r0, r2
    ad36:	4683      	mov	fp, r0
    ad38:	9a01      	ldr	r2, [sp, #4]
    ad3a:	44cb      	add	fp, r9
    ad3c:	455a      	cmp	r2, fp
    ad3e:	dd00      	ble.n	ad42 <_realloc_r+0x192>
    ad40:	e776      	b.n	ac30 <_realloc_r+0x80>
    ad42:	68ca      	ldr	r2, [r1, #12]
    ad44:	6889      	ldr	r1, [r1, #8]
    ad46:	1c27      	adds	r7, r4, #0
    ad48:	60ca      	str	r2, [r1, #12]
    ad4a:	6091      	str	r1, [r2, #8]
    ad4c:	3708      	adds	r7, #8
    ad4e:	e7d5      	b.n	acfc <_realloc_r+0x14c>
    ad50:	2001      	movs	r0, #1
    ad52:	4003      	ands	r3, r0
    ad54:	1961      	adds	r1, r4, r5
    ad56:	431d      	orrs	r5, r3
    ad58:	1c03      	adds	r3, r0, #0
    ad5a:	4313      	orrs	r3, r2
    ad5c:	6065      	str	r5, [r4, #4]
    ad5e:	604b      	str	r3, [r1, #4]
    ad60:	188a      	adds	r2, r1, r2
    ad62:	6853      	ldr	r3, [r2, #4]
    ad64:	4318      	orrs	r0, r3
    ad66:	6050      	str	r0, [r2, #4]
    ad68:	3108      	adds	r1, #8
    ad6a:	4640      	mov	r0, r8
    ad6c:	f7fa f8b8 	bl	4ee0 <_free_r>
    ad70:	e7d1      	b.n	ad16 <_realloc_r+0x166>
    ad72:	1c39      	adds	r1, r7, #0
    ad74:	4640      	mov	r0, r8
    ad76:	f7fa f9fd 	bl	5174 <_malloc_r>
    ad7a:	1e07      	subs	r7, r0, #0
    ad7c:	d0cb      	beq.n	ad16 <_realloc_r+0x166>
    ad7e:	6863      	ldr	r3, [r4, #4]
    ad80:	2101      	movs	r1, #1
    ad82:	1c18      	adds	r0, r3, #0
    ad84:	1c3a      	adds	r2, r7, #0
    ad86:	4388      	bics	r0, r1
    ad88:	3a08      	subs	r2, #8
    ad8a:	1821      	adds	r1, r4, r0
    ad8c:	428a      	cmp	r2, r1
    ad8e:	d100      	bne.n	ad92 <_realloc_r+0x1e2>
    ad90:	e108      	b.n	afa4 <_realloc_r+0x3f4>
    ad92:	2304      	movs	r3, #4
    ad94:	425b      	negs	r3, r3
    ad96:	1c1a      	adds	r2, r3, #0
    ad98:	444a      	add	r2, r9
    ad9a:	2a24      	cmp	r2, #36	; 0x24
    ad9c:	d900      	bls.n	ada0 <_realloc_r+0x1f0>
    ad9e:	e0a4      	b.n	aeea <_realloc_r+0x33a>
    ada0:	1c31      	adds	r1, r6, #0
    ada2:	1c3b      	adds	r3, r7, #0
    ada4:	2a13      	cmp	r2, #19
    ada6:	d919      	bls.n	addc <_realloc_r+0x22c>
    ada8:	1c34      	adds	r4, r6, #0
    adaa:	cc08      	ldmia	r4!, {r3}
    adac:	1c38      	adds	r0, r7, #0
    adae:	c008      	stmia	r0!, {r3}
    adb0:	6873      	ldr	r3, [r6, #4]
    adb2:	1d21      	adds	r1, r4, #4
    adb4:	607b      	str	r3, [r7, #4]
    adb6:	1d03      	adds	r3, r0, #4
    adb8:	2a1b      	cmp	r2, #27
    adba:	d90f      	bls.n	addc <_realloc_r+0x22c>
    adbc:	6864      	ldr	r4, [r4, #4]
    adbe:	6044      	str	r4, [r0, #4]
    adc0:	1d0c      	adds	r4, r1, #4
    adc2:	6849      	ldr	r1, [r1, #4]
    adc4:	1d18      	adds	r0, r3, #4
    adc6:	6059      	str	r1, [r3, #4]
    adc8:	3308      	adds	r3, #8
    adca:	1d21      	adds	r1, r4, #4
    adcc:	2a24      	cmp	r2, #36	; 0x24
    adce:	d105      	bne.n	addc <_realloc_r+0x22c>
    add0:	6862      	ldr	r2, [r4, #4]
    add2:	6042      	str	r2, [r0, #4]
    add4:	684a      	ldr	r2, [r1, #4]
    add6:	3108      	adds	r1, #8
    add8:	605a      	str	r2, [r3, #4]
    adda:	3308      	adds	r3, #8
    addc:	1c08      	adds	r0, r1, #0
    adde:	c810      	ldmia	r0!, {r4}
    ade0:	1c1a      	adds	r2, r3, #0
    ade2:	c210      	stmia	r2!, {r4}
    ade4:	6849      	ldr	r1, [r1, #4]
    ade6:	6059      	str	r1, [r3, #4]
    ade8:	6843      	ldr	r3, [r0, #4]
    adea:	6053      	str	r3, [r2, #4]
    adec:	4640      	mov	r0, r8
    adee:	1c31      	adds	r1, r6, #0
    adf0:	f7fa f876 	bl	4ee0 <_free_r>
    adf4:	4640      	mov	r0, r8
    adf6:	f7fa fd09 	bl	580c <__malloc_unlock>
    adfa:	e78f      	b.n	ad1c <_realloc_r+0x16c>
    adfc:	444b      	add	r3, r9
    adfe:	9303      	str	r3, [sp, #12]
    ae00:	9b01      	ldr	r3, [sp, #4]
    ae02:	9803      	ldr	r0, [sp, #12]
    ae04:	4283      	cmp	r3, r0
    ae06:	dcb4      	bgt.n	ad72 <_realloc_r+0x1c2>
    ae08:	4651      	mov	r1, sl
    ae0a:	68cb      	ldr	r3, [r1, #12]
    ae0c:	688a      	ldr	r2, [r1, #8]
    ae0e:	60d3      	str	r3, [r2, #12]
    ae10:	609a      	str	r2, [r3, #8]
    ae12:	2304      	movs	r3, #4
    ae14:	2208      	movs	r2, #8
    ae16:	425b      	negs	r3, r3
    ae18:	1c17      	adds	r7, r2, #0
    ae1a:	1c1a      	adds	r2, r3, #0
    ae1c:	444a      	add	r2, r9
    ae1e:	4457      	add	r7, sl
    ae20:	2a24      	cmp	r2, #36	; 0x24
    ae22:	d858      	bhi.n	aed6 <_realloc_r+0x326>
    ae24:	1c39      	adds	r1, r7, #0
    ae26:	2a13      	cmp	r2, #19
    ae28:	d921      	bls.n	ae6e <_realloc_r+0x2be>
    ae2a:	1c33      	adds	r3, r6, #0
    ae2c:	cb02      	ldmia	r3!, {r1}
    ae2e:	4650      	mov	r0, sl
    ae30:	6081      	str	r1, [r0, #8]
    ae32:	6871      	ldr	r1, [r6, #4]
    ae34:	60c1      	str	r1, [r0, #12]
    ae36:	2010      	movs	r0, #16
    ae38:	1c01      	adds	r1, r0, #0
    ae3a:	4451      	add	r1, sl
    ae3c:	1d1e      	adds	r6, r3, #4
    ae3e:	2a1b      	cmp	r2, #27
    ae40:	d915      	bls.n	ae6e <_realloc_r+0x2be>
    ae42:	685b      	ldr	r3, [r3, #4]
    ae44:	4651      	mov	r1, sl
    ae46:	610b      	str	r3, [r1, #16]
    ae48:	6871      	ldr	r1, [r6, #4]
    ae4a:	4650      	mov	r0, sl
    ae4c:	6141      	str	r1, [r0, #20]
    ae4e:	2018      	movs	r0, #24
    ae50:	1c01      	adds	r1, r0, #0
    ae52:	1d33      	adds	r3, r6, #4
    ae54:	4451      	add	r1, sl
    ae56:	3608      	adds	r6, #8
    ae58:	2a24      	cmp	r2, #36	; 0x24
    ae5a:	d108      	bne.n	ae6e <_realloc_r+0x2be>
    ae5c:	685b      	ldr	r3, [r3, #4]
    ae5e:	4651      	mov	r1, sl
    ae60:	618b      	str	r3, [r1, #24]
    ae62:	6873      	ldr	r3, [r6, #4]
    ae64:	3a04      	subs	r2, #4
    ae66:	61cb      	str	r3, [r1, #28]
    ae68:	1c11      	adds	r1, r2, #0
    ae6a:	4451      	add	r1, sl
    ae6c:	3608      	adds	r6, #8
    ae6e:	1c32      	adds	r2, r6, #0
    ae70:	ca01      	ldmia	r2!, {r0}
    ae72:	1c0b      	adds	r3, r1, #0
    ae74:	c301      	stmia	r3!, {r0}
    ae76:	6870      	ldr	r0, [r6, #4]
    ae78:	6048      	str	r0, [r1, #4]
    ae7a:	6852      	ldr	r2, [r2, #4]
    ae7c:	9903      	ldr	r1, [sp, #12]
    ae7e:	605a      	str	r2, [r3, #4]
    ae80:	4650      	mov	r0, sl
    ae82:	6843      	ldr	r3, [r0, #4]
    ae84:	468b      	mov	fp, r1
    ae86:	4654      	mov	r4, sl
    ae88:	e738      	b.n	acfc <_realloc_r+0x14c>
    ae8a:	1c11      	adds	r1, r2, #0
    ae8c:	f7fa f972 	bl	5174 <_malloc_r>
    ae90:	1c07      	adds	r7, r0, #0
    ae92:	e743      	b.n	ad1c <_realloc_r+0x16c>
    ae94:	230c      	movs	r3, #12
    ae96:	4641      	mov	r1, r8
    ae98:	600b      	str	r3, [r1, #0]
    ae9a:	2700      	movs	r7, #0
    ae9c:	e73e      	b.n	ad1c <_realloc_r+0x16c>
    ae9e:	6850      	ldr	r0, [r2, #4]
    aea0:	1c11      	adds	r1, r2, #0
    aea2:	4652      	mov	r2, sl
    aea4:	4390      	bics	r0, r2
    aea6:	4682      	mov	sl, r0
    aea8:	2210      	movs	r2, #16
    aeaa:	44ca      	add	sl, r9
    aeac:	1952      	adds	r2, r2, r5
    aeae:	4592      	cmp	sl, r2
    aeb0:	da00      	bge.n	aeb4 <_realloc_r+0x304>
    aeb2:	e6bd      	b.n	ac30 <_realloc_r+0x80>
    aeb4:	4b0f      	ldr	r3, [pc, #60]	; (aef4 <_realloc_r+0x344>)
    aeb6:	1962      	adds	r2, r4, r5
    aeb8:	4650      	mov	r0, sl
    aeba:	609a      	str	r2, [r3, #8]
    aebc:	1b41      	subs	r1, r0, r5
    aebe:	2301      	movs	r3, #1
    aec0:	4319      	orrs	r1, r3
    aec2:	6051      	str	r1, [r2, #4]
    aec4:	6862      	ldr	r2, [r4, #4]
    aec6:	4013      	ands	r3, r2
    aec8:	431d      	orrs	r5, r3
    aeca:	6065      	str	r5, [r4, #4]
    aecc:	4640      	mov	r0, r8
    aece:	f7fa fc9d 	bl	580c <__malloc_unlock>
    aed2:	1c37      	adds	r7, r6, #0
    aed4:	e722      	b.n	ad1c <_realloc_r+0x16c>
    aed6:	1c38      	adds	r0, r7, #0
    aed8:	1c31      	adds	r1, r6, #0
    aeda:	f7ff f8d3 	bl	a084 <memmove>
    aede:	9803      	ldr	r0, [sp, #12]
    aee0:	4652      	mov	r2, sl
    aee2:	6853      	ldr	r3, [r2, #4]
    aee4:	4683      	mov	fp, r0
    aee6:	4654      	mov	r4, sl
    aee8:	e708      	b.n	acfc <_realloc_r+0x14c>
    aeea:	1c38      	adds	r0, r7, #0
    aeec:	1c31      	adds	r1, r6, #0
    aeee:	f7ff f8c9 	bl	a084 <memmove>
    aef2:	e77b      	b.n	adec <_realloc_r+0x23c>
    aef4:	40000430 	.word	0x40000430
    aef8:	444b      	add	r3, r9
    aefa:	9303      	str	r3, [sp, #12]
    aefc:	181b      	adds	r3, r3, r0
    aefe:	469b      	mov	fp, r3
    af00:	1c2b      	adds	r3, r5, #0
    af02:	3310      	adds	r3, #16
    af04:	459b      	cmp	fp, r3
    af06:	da00      	bge.n	af0a <_realloc_r+0x35a>
    af08:	e77a      	b.n	ae00 <_realloc_r+0x250>
    af0a:	4652      	mov	r2, sl
    af0c:	68d3      	ldr	r3, [r2, #12]
    af0e:	2004      	movs	r0, #4
    af10:	6892      	ldr	r2, [r2, #8]
    af12:	4240      	negs	r0, r0
    af14:	60d3      	str	r3, [r2, #12]
    af16:	609a      	str	r2, [r3, #8]
    af18:	2308      	movs	r3, #8
    af1a:	1c02      	adds	r2, r0, #0
    af1c:	1c1f      	adds	r7, r3, #0
    af1e:	444a      	add	r2, r9
    af20:	4457      	add	r7, sl
    af22:	2a24      	cmp	r2, #36	; 0x24
    af24:	d84e      	bhi.n	afc4 <_realloc_r+0x414>
    af26:	1c39      	adds	r1, r7, #0
    af28:	2a13      	cmp	r2, #19
    af2a:	d921      	bls.n	af70 <_realloc_r+0x3c0>
    af2c:	1c33      	adds	r3, r6, #0
    af2e:	cb02      	ldmia	r3!, {r1}
    af30:	4650      	mov	r0, sl
    af32:	6081      	str	r1, [r0, #8]
    af34:	6871      	ldr	r1, [r6, #4]
    af36:	60c1      	str	r1, [r0, #12]
    af38:	2010      	movs	r0, #16
    af3a:	1c01      	adds	r1, r0, #0
    af3c:	4451      	add	r1, sl
    af3e:	1d1e      	adds	r6, r3, #4
    af40:	2a1b      	cmp	r2, #27
    af42:	d915      	bls.n	af70 <_realloc_r+0x3c0>
    af44:	685b      	ldr	r3, [r3, #4]
    af46:	4651      	mov	r1, sl
    af48:	610b      	str	r3, [r1, #16]
    af4a:	6871      	ldr	r1, [r6, #4]
    af4c:	4650      	mov	r0, sl
    af4e:	6141      	str	r1, [r0, #20]
    af50:	2018      	movs	r0, #24
    af52:	1c01      	adds	r1, r0, #0
    af54:	1d33      	adds	r3, r6, #4
    af56:	4451      	add	r1, sl
    af58:	3608      	adds	r6, #8
    af5a:	2a24      	cmp	r2, #36	; 0x24
    af5c:	d108      	bne.n	af70 <_realloc_r+0x3c0>
    af5e:	685b      	ldr	r3, [r3, #4]
    af60:	4651      	mov	r1, sl
    af62:	618b      	str	r3, [r1, #24]
    af64:	6873      	ldr	r3, [r6, #4]
    af66:	3a04      	subs	r2, #4
    af68:	61cb      	str	r3, [r1, #28]
    af6a:	1c11      	adds	r1, r2, #0
    af6c:	4451      	add	r1, sl
    af6e:	3608      	adds	r6, #8
    af70:	1c32      	adds	r2, r6, #0
    af72:	ca01      	ldmia	r2!, {r0}
    af74:	1c0b      	adds	r3, r1, #0
    af76:	c301      	stmia	r3!, {r0}
    af78:	6870      	ldr	r0, [r6, #4]
    af7a:	6048      	str	r0, [r1, #4]
    af7c:	6852      	ldr	r2, [r2, #4]
    af7e:	605a      	str	r2, [r3, #4]
    af80:	1c2a      	adds	r2, r5, #0
    af82:	4b13      	ldr	r3, [pc, #76]	; (afd0 <_realloc_r+0x420>)
    af84:	4452      	add	r2, sl
    af86:	4659      	mov	r1, fp
    af88:	1b48      	subs	r0, r1, r5
    af8a:	609a      	str	r2, [r3, #8]
    af8c:	2301      	movs	r3, #1
    af8e:	4318      	orrs	r0, r3
    af90:	6050      	str	r0, [r2, #4]
    af92:	4650      	mov	r0, sl
    af94:	6842      	ldr	r2, [r0, #4]
    af96:	4013      	ands	r3, r2
    af98:	431d      	orrs	r5, r3
    af9a:	6045      	str	r5, [r0, #4]
    af9c:	4640      	mov	r0, r8
    af9e:	f7fa fc35 	bl	580c <__malloc_unlock>
    afa2:	e6bb      	b.n	ad1c <_realloc_r+0x16c>
    afa4:	6852      	ldr	r2, [r2, #4]
    afa6:	2103      	movs	r1, #3
    afa8:	438a      	bics	r2, r1
    afaa:	4693      	mov	fp, r2
    afac:	1c27      	adds	r7, r4, #0
    afae:	44cb      	add	fp, r9
    afb0:	3708      	adds	r7, #8
    afb2:	e6a3      	b.n	acfc <_realloc_r+0x14c>
    afb4:	1c31      	adds	r1, r6, #0
    afb6:	1c38      	adds	r0, r7, #0
    afb8:	f7ff f864 	bl	a084 <memmove>
    afbc:	4651      	mov	r1, sl
    afbe:	684b      	ldr	r3, [r1, #4]
    afc0:	4654      	mov	r4, sl
    afc2:	e69b      	b.n	acfc <_realloc_r+0x14c>
    afc4:	1c38      	adds	r0, r7, #0
    afc6:	1c31      	adds	r1, r6, #0
    afc8:	f7ff f85c 	bl	a084 <memmove>
    afcc:	e7d8      	b.n	af80 <_realloc_r+0x3d0>
    afce:	46c0      	nop			; (mov r8, r8)
    afd0:	40000430 	.word	0x40000430

0000afd4 <__fpclassifyd>:
    afd4:	b530      	push	{r4, r5, lr}
    afd6:	1c02      	adds	r2, r0, #0
    afd8:	1c0b      	adds	r3, r1, #0
    afda:	1c11      	adds	r1, r2, #0
    afdc:	2002      	movs	r0, #2
    afde:	4319      	orrs	r1, r3
    afe0:	d028      	beq.n	b034 <__fpclassifyd+0x60>
    afe2:	4251      	negs	r1, r2
    afe4:	414a      	adcs	r2, r1
    afe6:	2a00      	cmp	r2, #0
    afe8:	d127      	bne.n	b03a <__fpclassifyd+0x66>
    afea:	4d1c      	ldr	r5, [pc, #112]	; (b05c <__fpclassifyd+0x88>)
    afec:	481c      	ldr	r0, [pc, #112]	; (b060 <__fpclassifyd+0x8c>)
    afee:	195c      	adds	r4, r3, r5
    aff0:	2100      	movs	r1, #0
    aff2:	42a0      	cmp	r0, r4
    aff4:	4149      	adcs	r1, r1
    aff6:	2900      	cmp	r1, #0
    aff8:	d12c      	bne.n	b054 <__fpclassifyd+0x80>
    affa:	4d1a      	ldr	r5, [pc, #104]	; (b064 <__fpclassifyd+0x90>)
    affc:	195c      	adds	r4, r3, r5
    affe:	42a0      	cmp	r0, r4
    b000:	4149      	adcs	r1, r1
    b002:	2900      	cmp	r1, #0
    b004:	d126      	bne.n	b054 <__fpclassifyd+0x80>
    b006:	2080      	movs	r0, #128	; 0x80
    b008:	0600      	lsls	r0, r0, #24
    b00a:	181c      	adds	r4, r3, r0
    b00c:	4816      	ldr	r0, [pc, #88]	; (b068 <__fpclassifyd+0x94>)
    b00e:	42a0      	cmp	r0, r4
    b010:	4149      	adcs	r1, r1
    b012:	2900      	cmp	r1, #0
    b014:	d120      	bne.n	b058 <__fpclassifyd+0x84>
    b016:	4298      	cmp	r0, r3
    b018:	4149      	adcs	r1, r1
    b01a:	2900      	cmp	r1, #0
    b01c:	d11c      	bne.n	b058 <__fpclassifyd+0x84>
    b01e:	2180      	movs	r1, #128	; 0x80
    b020:	4c12      	ldr	r4, [pc, #72]	; (b06c <__fpclassifyd+0x98>)
    b022:	0349      	lsls	r1, r1, #13
    b024:	1858      	adds	r0, r3, r1
    b026:	191b      	adds	r3, r3, r4
    b028:	4241      	negs	r1, r0
    b02a:	4148      	adcs	r0, r1
    b02c:	4259      	negs	r1, r3
    b02e:	414b      	adcs	r3, r1
    b030:	4318      	orrs	r0, r3
    b032:	4010      	ands	r0, r2
    b034:	bc30      	pop	{r4, r5}
    b036:	bc02      	pop	{r1}
    b038:	4708      	bx	r1
    b03a:	2480      	movs	r4, #128	; 0x80
    b03c:	0624      	lsls	r4, r4, #24
    b03e:	1919      	adds	r1, r3, r4
    b040:	2900      	cmp	r1, #0
    b042:	d0f7      	beq.n	b034 <__fpclassifyd+0x60>
    b044:	4d05      	ldr	r5, [pc, #20]	; (b05c <__fpclassifyd+0x88>)
    b046:	4806      	ldr	r0, [pc, #24]	; (b060 <__fpclassifyd+0x8c>)
    b048:	195c      	adds	r4, r3, r5
    b04a:	2100      	movs	r1, #0
    b04c:	42a0      	cmp	r0, r4
    b04e:	4149      	adcs	r1, r1
    b050:	2900      	cmp	r1, #0
    b052:	d0d2      	beq.n	affa <__fpclassifyd+0x26>
    b054:	2004      	movs	r0, #4
    b056:	e7ed      	b.n	b034 <__fpclassifyd+0x60>
    b058:	2003      	movs	r0, #3
    b05a:	e7eb      	b.n	b034 <__fpclassifyd+0x60>
    b05c:	7ff00000 	.word	0x7ff00000
    b060:	7fdfffff 	.word	0x7fdfffff
    b064:	fff00000 	.word	0xfff00000
    b068:	000fffff 	.word	0x000fffff
    b06c:	80100000 	.word	0x80100000

0000b070 <strcmp>:
    b070:	7802      	ldrb	r2, [r0, #0]
    b072:	780b      	ldrb	r3, [r1, #0]
    b074:	3001      	adds	r0, #1
    b076:	3101      	adds	r1, #1
    b078:	2a00      	cmp	r2, #0
    b07a:	d001      	beq.n	b080 <strcmp+0x10>
    b07c:	429a      	cmp	r2, r3
    b07e:	d0f7      	beq.n	b070 <strcmp>
    b080:	1ad0      	subs	r0, r2, r3
    b082:	4770      	bx	lr

0000b084 <__ssprint_r>:
    b084:	b5f0      	push	{r4, r5, r6, r7, lr}
    b086:	465f      	mov	r7, fp
    b088:	4656      	mov	r6, sl
    b08a:	464d      	mov	r5, r9
    b08c:	4644      	mov	r4, r8
    b08e:	b4f0      	push	{r4, r5, r6, r7}
    b090:	6894      	ldr	r4, [r2, #8]
    b092:	b083      	sub	sp, #12
    b094:	9001      	str	r0, [sp, #4]
    b096:	1c0d      	adds	r5, r1, #0
    b098:	1c16      	adds	r6, r2, #0
    b09a:	6817      	ldr	r7, [r2, #0]
    b09c:	2c00      	cmp	r4, #0
    b09e:	d076      	beq.n	b18e <__ssprint_r+0x10a>
    b0a0:	6808      	ldr	r0, [r1, #0]
    b0a2:	2100      	movs	r1, #0
    b0a4:	1c0c      	adds	r4, r1, #0
    b0a6:	468a      	mov	sl, r1
    b0a8:	68ab      	ldr	r3, [r5, #8]
    b0aa:	2c00      	cmp	r4, #0
    b0ac:	d04a      	beq.n	b144 <__ssprint_r+0xc0>
    b0ae:	4698      	mov	r8, r3
    b0b0:	4699      	mov	r9, r3
    b0b2:	4544      	cmp	r4, r8
    b0b4:	d350      	bcc.n	b158 <__ssprint_r+0xd4>
    b0b6:	2190      	movs	r1, #144	; 0x90
    b0b8:	89ab      	ldrh	r3, [r5, #12]
    b0ba:	00c9      	lsls	r1, r1, #3
    b0bc:	420b      	tst	r3, r1
    b0be:	d031      	beq.n	b124 <__ssprint_r+0xa0>
    b0c0:	6929      	ldr	r1, [r5, #16]
    b0c2:	696a      	ldr	r2, [r5, #20]
    b0c4:	1a40      	subs	r0, r0, r1
    b0c6:	4683      	mov	fp, r0
    b0c8:	0050      	lsls	r0, r2, #1
    b0ca:	1882      	adds	r2, r0, r2
    b0cc:	0fd0      	lsrs	r0, r2, #31
    b0ce:	1882      	adds	r2, r0, r2
    b0d0:	1052      	asrs	r2, r2, #1
    b0d2:	1c60      	adds	r0, r4, #1
    b0d4:	4691      	mov	r9, r2
    b0d6:	4458      	add	r0, fp
    b0d8:	4581      	cmp	r9, r0
    b0da:	d201      	bcs.n	b0e0 <__ssprint_r+0x5c>
    b0dc:	4681      	mov	r9, r0
    b0de:	1c02      	adds	r2, r0, #0
    b0e0:	2080      	movs	r0, #128	; 0x80
    b0e2:	00c0      	lsls	r0, r0, #3
    b0e4:	4203      	tst	r3, r0
    b0e6:	d03a      	beq.n	b15e <__ssprint_r+0xda>
    b0e8:	1c11      	adds	r1, r2, #0
    b0ea:	9801      	ldr	r0, [sp, #4]
    b0ec:	f7fa f842 	bl	5174 <_malloc_r>
    b0f0:	2100      	movs	r1, #0
    b0f2:	4680      	mov	r8, r0
    b0f4:	4588      	cmp	r8, r1
    b0f6:	d03d      	beq.n	b174 <__ssprint_r+0xf0>
    b0f8:	465a      	mov	r2, fp
    b0fa:	6929      	ldr	r1, [r5, #16]
    b0fc:	f7fa fac0 	bl	5680 <memcpy>
    b100:	89ab      	ldrh	r3, [r5, #12]
    b102:	4828      	ldr	r0, [pc, #160]	; (b1a4 <__ssprint_r+0x120>)
    b104:	2280      	movs	r2, #128	; 0x80
    b106:	4003      	ands	r3, r0
    b108:	4313      	orrs	r3, r2
    b10a:	81ab      	strh	r3, [r5, #12]
    b10c:	4643      	mov	r3, r8
    b10e:	464a      	mov	r2, r9
    b110:	4640      	mov	r0, r8
    b112:	4659      	mov	r1, fp
    b114:	612b      	str	r3, [r5, #16]
    b116:	4458      	add	r0, fp
    b118:	1a53      	subs	r3, r2, r1
    b11a:	6028      	str	r0, [r5, #0]
    b11c:	616a      	str	r2, [r5, #20]
    b11e:	60ab      	str	r3, [r5, #8]
    b120:	46a0      	mov	r8, r4
    b122:	46a1      	mov	r9, r4
    b124:	464a      	mov	r2, r9
    b126:	4651      	mov	r1, sl
    b128:	f7fe ffac 	bl	a084 <memmove>
    b12c:	68ab      	ldr	r3, [r5, #8]
    b12e:	4642      	mov	r2, r8
    b130:	6828      	ldr	r0, [r5, #0]
    b132:	1a9b      	subs	r3, r3, r2
    b134:	68b2      	ldr	r2, [r6, #8]
    b136:	4448      	add	r0, r9
    b138:	1b14      	subs	r4, r2, r4
    b13a:	60ab      	str	r3, [r5, #8]
    b13c:	6028      	str	r0, [r5, #0]
    b13e:	60b4      	str	r4, [r6, #8]
    b140:	2c00      	cmp	r4, #0
    b142:	d024      	beq.n	b18e <__ssprint_r+0x10a>
    b144:	683a      	ldr	r2, [r7, #0]
    b146:	687c      	ldr	r4, [r7, #4]
    b148:	4692      	mov	sl, r2
    b14a:	3708      	adds	r7, #8
    b14c:	2c00      	cmp	r4, #0
    b14e:	d0f9      	beq.n	b144 <__ssprint_r+0xc0>
    b150:	4698      	mov	r8, r3
    b152:	4699      	mov	r9, r3
    b154:	4544      	cmp	r4, r8
    b156:	d2ae      	bcs.n	b0b6 <__ssprint_r+0x32>
    b158:	46a0      	mov	r8, r4
    b15a:	46a1      	mov	r9, r4
    b15c:	e7e2      	b.n	b124 <__ssprint_r+0xa0>
    b15e:	9801      	ldr	r0, [sp, #4]
    b160:	f7ff fd26 	bl	abb0 <_realloc_r>
    b164:	2100      	movs	r1, #0
    b166:	4680      	mov	r8, r0
    b168:	4588      	cmp	r8, r1
    b16a:	d1cf      	bne.n	b10c <__ssprint_r+0x88>
    b16c:	6929      	ldr	r1, [r5, #16]
    b16e:	9801      	ldr	r0, [sp, #4]
    b170:	f7f9 feb6 	bl	4ee0 <_free_r>
    b174:	9a01      	ldr	r2, [sp, #4]
    b176:	230c      	movs	r3, #12
    b178:	6013      	str	r3, [r2, #0]
    b17a:	89ab      	ldrh	r3, [r5, #12]
    b17c:	2240      	movs	r2, #64	; 0x40
    b17e:	4313      	orrs	r3, r2
    b180:	81ab      	strh	r3, [r5, #12]
    b182:	2001      	movs	r0, #1
    b184:	2300      	movs	r3, #0
    b186:	60b3      	str	r3, [r6, #8]
    b188:	6073      	str	r3, [r6, #4]
    b18a:	4240      	negs	r0, r0
    b18c:	e001      	b.n	b192 <__ssprint_r+0x10e>
    b18e:	6074      	str	r4, [r6, #4]
    b190:	1c20      	adds	r0, r4, #0
    b192:	b003      	add	sp, #12
    b194:	bc3c      	pop	{r2, r3, r4, r5}
    b196:	4690      	mov	r8, r2
    b198:	4699      	mov	r9, r3
    b19a:	46a2      	mov	sl, r4
    b19c:	46ab      	mov	fp, r5
    b19e:	bcf0      	pop	{r4, r5, r6, r7}
    b1a0:	bc02      	pop	{r1}
    b1a2:	4708      	bx	r1
    b1a4:	fffffb7f 	.word	0xfffffb7f

0000b1a8 <_svfiprintf_r>:
    b1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1aa:	465f      	mov	r7, fp
    b1ac:	4656      	mov	r6, sl
    b1ae:	464d      	mov	r5, r9
    b1b0:	4644      	mov	r4, r8
    b1b2:	b4f0      	push	{r4, r5, r6, r7}
    b1b4:	b0ad      	sub	sp, #180	; 0xb4
    b1b6:	9002      	str	r0, [sp, #8]
    b1b8:	9307      	str	r3, [sp, #28]
    b1ba:	898b      	ldrh	r3, [r1, #12]
    b1bc:	468b      	mov	fp, r1
    b1be:	1c15      	adds	r5, r2, #0
    b1c0:	0618      	lsls	r0, r3, #24
    b1c2:	d504      	bpl.n	b1ce <_svfiprintf_r+0x26>
    b1c4:	690b      	ldr	r3, [r1, #16]
    b1c6:	2b00      	cmp	r3, #0
    b1c8:	d101      	bne.n	b1ce <_svfiprintf_r+0x26>
    b1ca:	f000 fd30 	bl	bc2e <_svfiprintf_r+0xa86>
    b1ce:	2300      	movs	r3, #0
    b1d0:	ac28      	add	r4, sp, #160	; 0xa0
    b1d2:	a90e      	add	r1, sp, #56	; 0x38
    b1d4:	46aa      	mov	sl, r5
    b1d6:	9128      	str	r1, [sp, #160]	; 0xa0
    b1d8:	60a3      	str	r3, [r4, #8]
    b1da:	6063      	str	r3, [r4, #4]
    b1dc:	930c      	str	r3, [sp, #48]	; 0x30
    b1de:	9305      	str	r3, [sp, #20]
    b1e0:	1c0d      	adds	r5, r1, #0
    b1e2:	4657      	mov	r7, sl
    b1e4:	783b      	ldrb	r3, [r7, #0]
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d100      	bne.n	b1ec <_svfiprintf_r+0x44>
    b1ea:	e32a      	b.n	b842 <_svfiprintf_r+0x69a>
    b1ec:	2b25      	cmp	r3, #37	; 0x25
    b1ee:	d100      	bne.n	b1f2 <_svfiprintf_r+0x4a>
    b1f0:	e327      	b.n	b842 <_svfiprintf_r+0x69a>
    b1f2:	1c3e      	adds	r6, r7, #0
    b1f4:	e001      	b.n	b1fa <_svfiprintf_r+0x52>
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	d003      	beq.n	b202 <_svfiprintf_r+0x5a>
    b1fa:	3601      	adds	r6, #1
    b1fc:	7833      	ldrb	r3, [r6, #0]
    b1fe:	2b25      	cmp	r3, #37	; 0x25
    b200:	d1f9      	bne.n	b1f6 <_svfiprintf_r+0x4e>
    b202:	1bf2      	subs	r2, r6, r7
    b204:	4690      	mov	r8, r2
    b206:	2000      	movs	r0, #0
    b208:	4580      	cmp	r8, r0
    b20a:	d010      	beq.n	b22e <_svfiprintf_r+0x86>
    b20c:	68a3      	ldr	r3, [r4, #8]
    b20e:	4443      	add	r3, r8
    b210:	602f      	str	r7, [r5, #0]
    b212:	606a      	str	r2, [r5, #4]
    b214:	60a3      	str	r3, [r4, #8]
    b216:	6863      	ldr	r3, [r4, #4]
    b218:	3301      	adds	r3, #1
    b21a:	6063      	str	r3, [r4, #4]
    b21c:	3508      	adds	r5, #8
    b21e:	2b07      	cmp	r3, #7
    b220:	dd00      	ble.n	b224 <_svfiprintf_r+0x7c>
    b222:	e39f      	b.n	b964 <_svfiprintf_r+0x7bc>
    b224:	9905      	ldr	r1, [sp, #20]
    b226:	1c0a      	adds	r2, r1, #0
    b228:	4442      	add	r2, r8
    b22a:	9205      	str	r2, [sp, #20]
    b22c:	7833      	ldrb	r3, [r6, #0]
    b22e:	2b00      	cmp	r3, #0
    b230:	d100      	bne.n	b234 <_svfiprintf_r+0x8c>
    b232:	e31a      	b.n	b86a <_svfiprintf_r+0x6c2>
    b234:	23af      	movs	r3, #175	; 0xaf
    b236:	2000      	movs	r0, #0
    b238:	446b      	add	r3, sp
    b23a:	7018      	strb	r0, [r3, #0]
    b23c:	2100      	movs	r1, #0
    b23e:	2240      	movs	r2, #64	; 0x40
    b240:	7873      	ldrb	r3, [r6, #1]
    b242:	1c77      	adds	r7, r6, #1
    b244:	9104      	str	r1, [sp, #16]
    b246:	2601      	movs	r6, #1
    b248:	9100      	str	r1, [sp, #0]
    b24a:	4690      	mov	r8, r2
    b24c:	2080      	movs	r0, #128	; 0x80
    b24e:	3a15      	subs	r2, #21
    b250:	49cf      	ldr	r1, [pc, #828]	; (b590 <_svfiprintf_r+0x3e8>)
    b252:	4276      	negs	r6, r6
    b254:	4684      	mov	ip, r0
    b256:	4692      	mov	sl, r2
    b258:	3701      	adds	r7, #1
    b25a:	1c1a      	adds	r2, r3, #0
    b25c:	3a20      	subs	r2, #32
    b25e:	2a58      	cmp	r2, #88	; 0x58
    b260:	d964      	bls.n	b32c <_svfiprintf_r+0x184>
    b262:	2b00      	cmp	r3, #0
    b264:	d100      	bne.n	b268 <_svfiprintf_r+0xc0>
    b266:	e300      	b.n	b86a <_svfiprintf_r+0x6c2>
    b268:	aa1e      	add	r2, sp, #120	; 0x78
    b26a:	7013      	strb	r3, [r2, #0]
    b26c:	23af      	movs	r3, #175	; 0xaf
    b26e:	2101      	movs	r1, #1
    b270:	2000      	movs	r0, #0
    b272:	446b      	add	r3, sp
    b274:	7018      	strb	r0, [r3, #0]
    b276:	9101      	str	r1, [sp, #4]
    b278:	9103      	str	r1, [sp, #12]
    b27a:	920b      	str	r2, [sp, #44]	; 0x2c
    b27c:	2100      	movs	r1, #0
    b27e:	9106      	str	r1, [sp, #24]
    b280:	9900      	ldr	r1, [sp, #0]
    b282:	2302      	movs	r3, #2
    b284:	4019      	ands	r1, r3
    b286:	4689      	mov	r9, r1
    b288:	d002      	beq.n	b290 <_svfiprintf_r+0xe8>
    b28a:	9a01      	ldr	r2, [sp, #4]
    b28c:	18d2      	adds	r2, r2, r3
    b28e:	9201      	str	r2, [sp, #4]
    b290:	9800      	ldr	r0, [sp, #0]
    b292:	2384      	movs	r3, #132	; 0x84
    b294:	4018      	ands	r0, r3
    b296:	900d      	str	r0, [sp, #52]	; 0x34
    b298:	d000      	beq.n	b29c <_svfiprintf_r+0xf4>
    b29a:	e201      	b.n	b6a0 <_svfiprintf_r+0x4f8>
    b29c:	9904      	ldr	r1, [sp, #16]
    b29e:	9a01      	ldr	r2, [sp, #4]
    b2a0:	1a8e      	subs	r6, r1, r2
    b2a2:	2e00      	cmp	r6, #0
    b2a4:	dc00      	bgt.n	b2a8 <_svfiprintf_r+0x100>
    b2a6:	e1fb      	b.n	b6a0 <_svfiprintf_r+0x4f8>
    b2a8:	2e10      	cmp	r6, #16
    b2aa:	dc01      	bgt.n	b2b0 <_svfiprintf_r+0x108>
    b2ac:	f000 fcd5 	bl	bc5a <_svfiprintf_r+0xab2>
    b2b0:	4bb8      	ldr	r3, [pc, #736]	; (b594 <_svfiprintf_r+0x3ec>)
    b2b2:	469a      	mov	sl, r3
    b2b4:	4652      	mov	r2, sl
    b2b6:	2010      	movs	r0, #16
    b2b8:	1c2b      	adds	r3, r5, #0
    b2ba:	46ba      	mov	sl, r7
    b2bc:	4680      	mov	r8, r0
    b2be:	465d      	mov	r5, fp
    b2c0:	1c17      	adds	r7, r2, #0
    b2c2:	e005      	b.n	b2d0 <_svfiprintf_r+0x128>
    b2c4:	3308      	adds	r3, #8
    b2c6:	1c1a      	adds	r2, r3, #0
    b2c8:	3e10      	subs	r6, #16
    b2ca:	3208      	adds	r2, #8
    b2cc:	2e10      	cmp	r6, #16
    b2ce:	dd18      	ble.n	b302 <_svfiprintf_r+0x15a>
    b2d0:	4642      	mov	r2, r8
    b2d2:	605a      	str	r2, [r3, #4]
    b2d4:	68a2      	ldr	r2, [r4, #8]
    b2d6:	3210      	adds	r2, #16
    b2d8:	601f      	str	r7, [r3, #0]
    b2da:	60a2      	str	r2, [r4, #8]
    b2dc:	6862      	ldr	r2, [r4, #4]
    b2de:	3201      	adds	r2, #1
    b2e0:	6062      	str	r2, [r4, #4]
    b2e2:	2a07      	cmp	r2, #7
    b2e4:	ddee      	ble.n	b2c4 <_svfiprintf_r+0x11c>
    b2e6:	9802      	ldr	r0, [sp, #8]
    b2e8:	1c29      	adds	r1, r5, #0
    b2ea:	1c22      	adds	r2, r4, #0
    b2ec:	f7ff feca 	bl	b084 <__ssprint_r>
    b2f0:	2800      	cmp	r0, #0
    b2f2:	d001      	beq.n	b2f8 <_svfiprintf_r+0x150>
    b2f4:	f000 fbf0 	bl	bad8 <_svfiprintf_r+0x930>
    b2f8:	3e10      	subs	r6, #16
    b2fa:	aa10      	add	r2, sp, #64	; 0x40
    b2fc:	ab0e      	add	r3, sp, #56	; 0x38
    b2fe:	2e10      	cmp	r6, #16
    b300:	dce6      	bgt.n	b2d0 <_svfiprintf_r+0x128>
    b302:	46ab      	mov	fp, r5
    b304:	1c1d      	adds	r5, r3, #0
    b306:	1c3b      	adds	r3, r7, #0
    b308:	4657      	mov	r7, sl
    b30a:	469a      	mov	sl, r3
    b30c:	4653      	mov	r3, sl
    b30e:	602b      	str	r3, [r5, #0]
    b310:	68a3      	ldr	r3, [r4, #8]
    b312:	18f3      	adds	r3, r6, r3
    b314:	606e      	str	r6, [r5, #4]
    b316:	60a3      	str	r3, [r4, #8]
    b318:	6863      	ldr	r3, [r4, #4]
    b31a:	3301      	adds	r3, #1
    b31c:	6063      	str	r3, [r4, #4]
    b31e:	2b07      	cmp	r3, #7
    b320:	dd00      	ble.n	b324 <_svfiprintf_r+0x17c>
    b322:	e3ce      	b.n	bac2 <_svfiprintf_r+0x91a>
    b324:	1c13      	adds	r3, r2, #0
    b326:	3308      	adds	r3, #8
    b328:	1c15      	adds	r5, r2, #0
    b32a:	e1bb      	b.n	b6a4 <_svfiprintf_r+0x4fc>
    b32c:	0092      	lsls	r2, r2, #2
    b32e:	588a      	ldr	r2, [r1, r2]
    b330:	4697      	mov	pc, r2
    b332:	9800      	ldr	r0, [sp, #0]
    b334:	2310      	movs	r3, #16
    b336:	4318      	orrs	r0, r3
    b338:	9000      	str	r0, [sp, #0]
    b33a:	9900      	ldr	r1, [sp, #0]
    b33c:	2220      	movs	r2, #32
    b33e:	400a      	ands	r2, r1
    b340:	d100      	bne.n	b344 <_svfiprintf_r+0x19c>
    b342:	e385      	b.n	ba50 <_svfiprintf_r+0x8a8>
    b344:	9b07      	ldr	r3, [sp, #28]
    b346:	2207      	movs	r2, #7
    b348:	3307      	adds	r3, #7
    b34a:	4393      	bics	r3, r2
    b34c:	6818      	ldr	r0, [r3, #0]
    b34e:	6859      	ldr	r1, [r3, #4]
    b350:	3201      	adds	r2, #1
    b352:	18d2      	adds	r2, r2, r3
    b354:	9008      	str	r0, [sp, #32]
    b356:	9109      	str	r1, [sp, #36]	; 0x24
    b358:	9207      	str	r2, [sp, #28]
    b35a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b35c:	1c01      	adds	r1, r0, #0
    b35e:	4311      	orrs	r1, r2
    b360:	1e4b      	subs	r3, r1, #1
    b362:	4199      	sbcs	r1, r3
    b364:	2301      	movs	r3, #1
    b366:	22af      	movs	r2, #175	; 0xaf
    b368:	2000      	movs	r0, #0
    b36a:	446a      	add	r2, sp
    b36c:	7010      	strb	r0, [r2, #0]
    b36e:	2e00      	cmp	r6, #0
    b370:	db03      	blt.n	b37a <_svfiprintf_r+0x1d2>
    b372:	9800      	ldr	r0, [sp, #0]
    b374:	2280      	movs	r2, #128	; 0x80
    b376:	4390      	bics	r0, r2
    b378:	9000      	str	r0, [sp, #0]
    b37a:	2e00      	cmp	r6, #0
    b37c:	d102      	bne.n	b384 <_svfiprintf_r+0x1dc>
    b37e:	2900      	cmp	r1, #0
    b380:	d100      	bne.n	b384 <_svfiprintf_r+0x1dc>
    b382:	e261      	b.n	b848 <_svfiprintf_r+0x6a0>
    b384:	2b01      	cmp	r3, #1
    b386:	d100      	bne.n	b38a <_svfiprintf_r+0x1e2>
    b388:	e31a      	b.n	b9c0 <_svfiprintf_r+0x818>
    b38a:	2b02      	cmp	r3, #2
    b38c:	d100      	bne.n	b390 <_svfiprintf_r+0x1e8>
    b38e:	e340      	b.n	ba12 <_svfiprintf_r+0x86a>
    b390:	2107      	movs	r1, #7
    b392:	940b      	str	r4, [sp, #44]	; 0x2c
    b394:	9701      	str	r7, [sp, #4]
    b396:	9a08      	ldr	r2, [sp, #32]
    b398:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b39a:	4688      	mov	r8, r1
    b39c:	46ac      	mov	ip, r5
    b39e:	1c21      	adds	r1, r4, #0
    b3a0:	0758      	lsls	r0, r3, #29
    b3a2:	4682      	mov	sl, r0
    b3a4:	4645      	mov	r5, r8
    b3a6:	08d0      	lsrs	r0, r2, #3
    b3a8:	4657      	mov	r7, sl
    b3aa:	4307      	orrs	r7, r0
    b3ac:	4015      	ands	r5, r2
    b3ae:	08d8      	lsrs	r0, r3, #3
    b3b0:	3901      	subs	r1, #1
    b3b2:	3530      	adds	r5, #48	; 0x30
    b3b4:	1c03      	adds	r3, r0, #0
    b3b6:	1c38      	adds	r0, r7, #0
    b3b8:	700d      	strb	r5, [r1, #0]
    b3ba:	1c3a      	adds	r2, r7, #0
    b3bc:	4318      	orrs	r0, r3
    b3be:	d1ef      	bne.n	b3a0 <_svfiprintf_r+0x1f8>
    b3c0:	910b      	str	r1, [sp, #44]	; 0x2c
    b3c2:	9900      	ldr	r1, [sp, #0]
    b3c4:	9208      	str	r2, [sp, #32]
    b3c6:	9309      	str	r3, [sp, #36]	; 0x24
    b3c8:	1c2b      	adds	r3, r5, #0
    b3ca:	9f01      	ldr	r7, [sp, #4]
    b3cc:	4665      	mov	r5, ip
    b3ce:	469c      	mov	ip, r3
    b3d0:	07c9      	lsls	r1, r1, #31
    b3d2:	d400      	bmi.n	b3d6 <_svfiprintf_r+0x22e>
    b3d4:	e386      	b.n	bae4 <_svfiprintf_r+0x93c>
    b3d6:	2330      	movs	r3, #48	; 0x30
    b3d8:	459c      	cmp	ip, r3
    b3da:	d101      	bne.n	b3e0 <_svfiprintf_r+0x238>
    b3dc:	f000 fc43 	bl	bc66 <_svfiprintf_r+0xabe>
    b3e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b3e2:	3901      	subs	r1, #1
    b3e4:	2330      	movs	r3, #48	; 0x30
    b3e6:	1a62      	subs	r2, r4, r1
    b3e8:	910b      	str	r1, [sp, #44]	; 0x2c
    b3ea:	700b      	strb	r3, [r1, #0]
    b3ec:	9203      	str	r2, [sp, #12]
    b3ee:	9606      	str	r6, [sp, #24]
    b3f0:	9803      	ldr	r0, [sp, #12]
    b3f2:	9906      	ldr	r1, [sp, #24]
    b3f4:	9001      	str	r0, [sp, #4]
    b3f6:	4288      	cmp	r0, r1
    b3f8:	da00      	bge.n	b3fc <_svfiprintf_r+0x254>
    b3fa:	9101      	str	r1, [sp, #4]
    b3fc:	22af      	movs	r2, #175	; 0xaf
    b3fe:	446a      	add	r2, sp
    b400:	7813      	ldrb	r3, [r2, #0]
    b402:	9801      	ldr	r0, [sp, #4]
    b404:	1e5a      	subs	r2, r3, #1
    b406:	4193      	sbcs	r3, r2
    b408:	18c0      	adds	r0, r0, r3
    b40a:	9001      	str	r0, [sp, #4]
    b40c:	e738      	b.n	b280 <_svfiprintf_r+0xd8>
    b40e:	9900      	ldr	r1, [sp, #0]
    b410:	2310      	movs	r3, #16
    b412:	4319      	orrs	r1, r3
    b414:	9100      	str	r1, [sp, #0]
    b416:	9a00      	ldr	r2, [sp, #0]
    b418:	2320      	movs	r3, #32
    b41a:	4013      	ands	r3, r2
    b41c:	d100      	bne.n	b420 <_svfiprintf_r+0x278>
    b41e:	e32c      	b.n	ba7a <_svfiprintf_r+0x8d2>
    b420:	9b07      	ldr	r3, [sp, #28]
    b422:	2207      	movs	r2, #7
    b424:	3307      	adds	r3, #7
    b426:	4393      	bics	r3, r2
    b428:	6819      	ldr	r1, [r3, #0]
    b42a:	685a      	ldr	r2, [r3, #4]
    b42c:	9108      	str	r1, [sp, #32]
    b42e:	9209      	str	r2, [sp, #36]	; 0x24
    b430:	9908      	ldr	r1, [sp, #32]
    b432:	2008      	movs	r0, #8
    b434:	18c0      	adds	r0, r0, r3
    b436:	4311      	orrs	r1, r2
    b438:	1e4b      	subs	r3, r1, #1
    b43a:	4199      	sbcs	r1, r3
    b43c:	9007      	str	r0, [sp, #28]
    b43e:	2300      	movs	r3, #0
    b440:	e791      	b.n	b366 <_svfiprintf_r+0x1be>
    b442:	9a00      	ldr	r2, [sp, #0]
    b444:	2310      	movs	r3, #16
    b446:	431a      	orrs	r2, r3
    b448:	9200      	str	r2, [sp, #0]
    b44a:	9b00      	ldr	r3, [sp, #0]
    b44c:	069b      	lsls	r3, r3, #26
    b44e:	d400      	bmi.n	b452 <_svfiprintf_r+0x2aa>
    b450:	e327      	b.n	baa2 <_svfiprintf_r+0x8fa>
    b452:	9b07      	ldr	r3, [sp, #28]
    b454:	2207      	movs	r2, #7
    b456:	3307      	adds	r3, #7
    b458:	4393      	bics	r3, r2
    b45a:	6819      	ldr	r1, [r3, #0]
    b45c:	685a      	ldr	r2, [r3, #4]
    b45e:	2008      	movs	r0, #8
    b460:	18c0      	adds	r0, r0, r3
    b462:	9108      	str	r1, [sp, #32]
    b464:	9209      	str	r2, [sp, #36]	; 0x24
    b466:	9007      	str	r0, [sp, #28]
    b468:	9909      	ldr	r1, [sp, #36]	; 0x24
    b46a:	2900      	cmp	r1, #0
    b46c:	da00      	bge.n	b470 <_svfiprintf_r+0x2c8>
    b46e:	e357      	b.n	bb20 <_svfiprintf_r+0x978>
    b470:	9908      	ldr	r1, [sp, #32]
    b472:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b474:	4311      	orrs	r1, r2
    b476:	1e4b      	subs	r3, r1, #1
    b478:	4199      	sbcs	r1, r3
    b47a:	2301      	movs	r3, #1
    b47c:	e777      	b.n	b36e <_svfiprintf_r+0x1c6>
    b47e:	9b07      	ldr	r3, [sp, #28]
    b480:	9a07      	ldr	r2, [sp, #28]
    b482:	681b      	ldr	r3, [r3, #0]
    b484:	3204      	adds	r2, #4
    b486:	9304      	str	r3, [sp, #16]
    b488:	2b00      	cmp	r3, #0
    b48a:	db00      	blt.n	b48e <_svfiprintf_r+0x2e6>
    b48c:	e326      	b.n	badc <_svfiprintf_r+0x934>
    b48e:	9804      	ldr	r0, [sp, #16]
    b490:	4240      	negs	r0, r0
    b492:	9004      	str	r0, [sp, #16]
    b494:	9207      	str	r2, [sp, #28]
    b496:	9a00      	ldr	r2, [sp, #0]
    b498:	2304      	movs	r3, #4
    b49a:	431a      	orrs	r2, r3
    b49c:	9200      	str	r2, [sp, #0]
    b49e:	783b      	ldrb	r3, [r7, #0]
    b4a0:	e6da      	b.n	b258 <_svfiprintf_r+0xb0>
    b4a2:	9b00      	ldr	r3, [sp, #0]
    b4a4:	069b      	lsls	r3, r3, #26
    b4a6:	d500      	bpl.n	b4aa <_svfiprintf_r+0x302>
    b4a8:	e346      	b.n	bb38 <_svfiprintf_r+0x990>
    b4aa:	9a00      	ldr	r2, [sp, #0]
    b4ac:	06d2      	lsls	r2, r2, #27
    b4ae:	d400      	bmi.n	b4b2 <_svfiprintf_r+0x30a>
    b4b0:	e38c      	b.n	bbcc <_svfiprintf_r+0xa24>
    b4b2:	9807      	ldr	r0, [sp, #28]
    b4b4:	9905      	ldr	r1, [sp, #20]
    b4b6:	6803      	ldr	r3, [r0, #0]
    b4b8:	3004      	adds	r0, #4
    b4ba:	6019      	str	r1, [r3, #0]
    b4bc:	9007      	str	r0, [sp, #28]
    b4be:	e691      	b.n	b1e4 <_svfiprintf_r+0x3c>
    b4c0:	9b00      	ldr	r3, [sp, #0]
    b4c2:	2020      	movs	r0, #32
    b4c4:	4303      	orrs	r3, r0
    b4c6:	9300      	str	r3, [sp, #0]
    b4c8:	783b      	ldrb	r3, [r7, #0]
    b4ca:	e6c5      	b.n	b258 <_svfiprintf_r+0xb0>
    b4cc:	9b07      	ldr	r3, [sp, #28]
    b4ce:	1c18      	adds	r0, r3, #0
    b4d0:	681b      	ldr	r3, [r3, #0]
    b4d2:	9a00      	ldr	r2, [sp, #0]
    b4d4:	9308      	str	r3, [sp, #32]
    b4d6:	2302      	movs	r3, #2
    b4d8:	2100      	movs	r1, #0
    b4da:	431a      	orrs	r2, r3
    b4dc:	9109      	str	r1, [sp, #36]	; 0x24
    b4de:	9200      	str	r2, [sp, #0]
    b4e0:	3130      	adds	r1, #48	; 0x30
    b4e2:	aa2b      	add	r2, sp, #172	; 0xac
    b4e4:	3004      	adds	r0, #4
    b4e6:	7011      	strb	r1, [r2, #0]
    b4e8:	3148      	adds	r1, #72	; 0x48
    b4ea:	7051      	strb	r1, [r2, #1]
    b4ec:	9007      	str	r0, [sp, #28]
    b4ee:	9908      	ldr	r1, [sp, #32]
    b4f0:	4829      	ldr	r0, [pc, #164]	; (b598 <_svfiprintf_r+0x3f0>)
    b4f2:	1e4a      	subs	r2, r1, #1
    b4f4:	4191      	sbcs	r1, r2
    b4f6:	900c      	str	r0, [sp, #48]	; 0x30
    b4f8:	e735      	b.n	b366 <_svfiprintf_r+0x1be>
    b4fa:	4927      	ldr	r1, [pc, #156]	; (b598 <_svfiprintf_r+0x3f0>)
    b4fc:	9800      	ldr	r0, [sp, #0]
    b4fe:	910c      	str	r1, [sp, #48]	; 0x30
    b500:	2120      	movs	r1, #32
    b502:	4001      	ands	r1, r0
    b504:	d050      	beq.n	b5a8 <_svfiprintf_r+0x400>
    b506:	9a07      	ldr	r2, [sp, #28]
    b508:	2107      	movs	r1, #7
    b50a:	3207      	adds	r2, #7
    b50c:	438a      	bics	r2, r1
    b50e:	3101      	adds	r1, #1
    b510:	1889      	adds	r1, r1, r2
    b512:	9107      	str	r1, [sp, #28]
    b514:	6810      	ldr	r0, [r2, #0]
    b516:	6851      	ldr	r1, [r2, #4]
    b518:	9008      	str	r0, [sp, #32]
    b51a:	9109      	str	r1, [sp, #36]	; 0x24
    b51c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b51e:	9908      	ldr	r1, [sp, #32]
    b520:	4311      	orrs	r1, r2
    b522:	1e4a      	subs	r2, r1, #1
    b524:	4191      	sbcs	r1, r2
    b526:	2900      	cmp	r1, #0
    b528:	d00d      	beq.n	b546 <_svfiprintf_r+0x39e>
    b52a:	9800      	ldr	r0, [sp, #0]
    b52c:	2201      	movs	r2, #1
    b52e:	4210      	tst	r0, r2
    b530:	d009      	beq.n	b546 <_svfiprintf_r+0x39e>
    b532:	a92b      	add	r1, sp, #172	; 0xac
    b534:	2030      	movs	r0, #48	; 0x30
    b536:	704b      	strb	r3, [r1, #1]
    b538:	7008      	strb	r0, [r1, #0]
    b53a:	9900      	ldr	r1, [sp, #0]
    b53c:	2302      	movs	r3, #2
    b53e:	4319      	orrs	r1, r3
    b540:	9100      	str	r1, [sp, #0]
    b542:	1c11      	adds	r1, r2, #0
    b544:	e70f      	b.n	b366 <_svfiprintf_r+0x1be>
    b546:	2302      	movs	r3, #2
    b548:	e70d      	b.n	b366 <_svfiprintf_r+0x1be>
    b54a:	21af      	movs	r1, #175	; 0xaf
    b54c:	2200      	movs	r2, #0
    b54e:	4469      	add	r1, sp
    b550:	9b07      	ldr	r3, [sp, #28]
    b552:	700a      	strb	r2, [r1, #0]
    b554:	1c18      	adds	r0, r3, #0
    b556:	681b      	ldr	r3, [r3, #0]
    b558:	3004      	adds	r0, #4
    b55a:	9007      	str	r0, [sp, #28]
    b55c:	930b      	str	r3, [sp, #44]	; 0x2c
    b55e:	2b00      	cmp	r3, #0
    b560:	d100      	bne.n	b564 <_svfiprintf_r+0x3bc>
    b562:	e388      	b.n	bc76 <_svfiprintf_r+0xace>
    b564:	2e00      	cmp	r6, #0
    b566:	da00      	bge.n	b56a <_svfiprintf_r+0x3c2>
    b568:	e313      	b.n	bb92 <_svfiprintf_r+0x9ea>
    b56a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b56c:	2100      	movs	r1, #0
    b56e:	1c32      	adds	r2, r6, #0
    b570:	f7fe fd40 	bl	9ff4 <memchr>
    b574:	2800      	cmp	r0, #0
    b576:	d100      	bne.n	b57a <_svfiprintf_r+0x3d2>
    b578:	e391      	b.n	bc9e <_svfiprintf_r+0xaf6>
    b57a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b57c:	1a40      	subs	r0, r0, r1
    b57e:	9003      	str	r0, [sp, #12]
    b580:	42b0      	cmp	r0, r6
    b582:	dc00      	bgt.n	b586 <_svfiprintf_r+0x3de>
    b584:	e31e      	b.n	bbc4 <_svfiprintf_r+0xa1c>
    b586:	2300      	movs	r3, #0
    b588:	9603      	str	r6, [sp, #12]
    b58a:	9306      	str	r3, [sp, #24]
    b58c:	e730      	b.n	b3f0 <_svfiprintf_r+0x248>
    b58e:	46c0      	nop			; (mov r8, r8)
    b590:	0000e670 	.word	0x0000e670
    b594:	0000e7d4 	.word	0x0000e7d4
    b598:	0000ede4 	.word	0x0000ede4
    b59c:	4abf      	ldr	r2, [pc, #764]	; (b89c <_svfiprintf_r+0x6f4>)
    b59e:	9800      	ldr	r0, [sp, #0]
    b5a0:	2120      	movs	r1, #32
    b5a2:	920c      	str	r2, [sp, #48]	; 0x30
    b5a4:	4001      	ands	r1, r0
    b5a6:	d1ae      	bne.n	b506 <_svfiprintf_r+0x35e>
    b5a8:	9800      	ldr	r0, [sp, #0]
    b5aa:	2210      	movs	r2, #16
    b5ac:	4002      	ands	r2, r0
    b5ae:	d000      	beq.n	b5b2 <_svfiprintf_r+0x40a>
    b5b0:	e2cc      	b.n	bb4c <_svfiprintf_r+0x9a4>
    b5b2:	9800      	ldr	r0, [sp, #0]
    b5b4:	2140      	movs	r1, #64	; 0x40
    b5b6:	4001      	ands	r1, r0
    b5b8:	d100      	bne.n	b5bc <_svfiprintf_r+0x414>
    b5ba:	e324      	b.n	bc06 <_svfiprintf_r+0xa5e>
    b5bc:	9907      	ldr	r1, [sp, #28]
    b5be:	8809      	ldrh	r1, [r1, #0]
    b5c0:	9209      	str	r2, [sp, #36]	; 0x24
    b5c2:	9a07      	ldr	r2, [sp, #28]
    b5c4:	3204      	adds	r2, #4
    b5c6:	9108      	str	r1, [sp, #32]
    b5c8:	9207      	str	r2, [sp, #28]
    b5ca:	e7a7      	b.n	b51c <_svfiprintf_r+0x374>
    b5cc:	783b      	ldrb	r3, [r7, #0]
    b5ce:	2b6c      	cmp	r3, #108	; 0x6c
    b5d0:	d100      	bne.n	b5d4 <_svfiprintf_r+0x42c>
    b5d2:	e2d6      	b.n	bb82 <_svfiprintf_r+0x9da>
    b5d4:	9800      	ldr	r0, [sp, #0]
    b5d6:	2210      	movs	r2, #16
    b5d8:	4310      	orrs	r0, r2
    b5da:	9000      	str	r0, [sp, #0]
    b5dc:	e63c      	b.n	b258 <_svfiprintf_r+0xb0>
    b5de:	9b00      	ldr	r3, [sp, #0]
    b5e0:	4640      	mov	r0, r8
    b5e2:	4303      	orrs	r3, r0
    b5e4:	9300      	str	r3, [sp, #0]
    b5e6:	783b      	ldrb	r3, [r7, #0]
    b5e8:	e636      	b.n	b258 <_svfiprintf_r+0xb0>
    b5ea:	9a07      	ldr	r2, [sp, #28]
    b5ec:	1c11      	adds	r1, r2, #0
    b5ee:	6812      	ldr	r2, [r2, #0]
    b5f0:	ab1e      	add	r3, sp, #120	; 0x78
    b5f2:	3104      	adds	r1, #4
    b5f4:	701a      	strb	r2, [r3, #0]
    b5f6:	22af      	movs	r2, #175	; 0xaf
    b5f8:	9107      	str	r1, [sp, #28]
    b5fa:	2000      	movs	r0, #0
    b5fc:	2101      	movs	r1, #1
    b5fe:	446a      	add	r2, sp
    b600:	7010      	strb	r0, [r2, #0]
    b602:	9101      	str	r1, [sp, #4]
    b604:	9103      	str	r1, [sp, #12]
    b606:	930b      	str	r3, [sp, #44]	; 0x2c
    b608:	e638      	b.n	b27c <_svfiprintf_r+0xd4>
    b60a:	23af      	movs	r3, #175	; 0xaf
    b60c:	446b      	add	r3, sp
    b60e:	4650      	mov	r0, sl
    b610:	7018      	strb	r0, [r3, #0]
    b612:	783b      	ldrb	r3, [r7, #0]
    b614:	e620      	b.n	b258 <_svfiprintf_r+0xb0>
    b616:	9800      	ldr	r0, [sp, #0]
    b618:	2301      	movs	r3, #1
    b61a:	4318      	orrs	r0, r3
    b61c:	9000      	str	r0, [sp, #0]
    b61e:	783b      	ldrb	r3, [r7, #0]
    b620:	e61a      	b.n	b258 <_svfiprintf_r+0xb0>
    b622:	20af      	movs	r0, #175	; 0xaf
    b624:	4468      	add	r0, sp
    b626:	7803      	ldrb	r3, [r0, #0]
    b628:	2b00      	cmp	r3, #0
    b62a:	d000      	beq.n	b62e <_svfiprintf_r+0x486>
    b62c:	e2a6      	b.n	bb7c <_svfiprintf_r+0x9d4>
    b62e:	2220      	movs	r2, #32
    b630:	7002      	strb	r2, [r0, #0]
    b632:	783b      	ldrb	r3, [r7, #0]
    b634:	e610      	b.n	b258 <_svfiprintf_r+0xb0>
    b636:	1c1a      	adds	r2, r3, #0
    b638:	2000      	movs	r0, #0
    b63a:	3a30      	subs	r2, #48	; 0x30
    b63c:	1c03      	adds	r3, r0, #0
    b63e:	46a9      	mov	r9, r5
    b640:	009d      	lsls	r5, r3, #2
    b642:	18eb      	adds	r3, r5, r3
    b644:	783d      	ldrb	r5, [r7, #0]
    b646:	005b      	lsls	r3, r3, #1
    b648:	18d3      	adds	r3, r2, r3
    b64a:	1c2a      	adds	r2, r5, #0
    b64c:	3a30      	subs	r2, #48	; 0x30
    b64e:	3701      	adds	r7, #1
    b650:	2a09      	cmp	r2, #9
    b652:	d9f5      	bls.n	b640 <_svfiprintf_r+0x498>
    b654:	1c18      	adds	r0, r3, #0
    b656:	9004      	str	r0, [sp, #16]
    b658:	1c2b      	adds	r3, r5, #0
    b65a:	464d      	mov	r5, r9
    b65c:	e5fd      	b.n	b25a <_svfiprintf_r+0xb2>
    b65e:	9800      	ldr	r0, [sp, #0]
    b660:	4662      	mov	r2, ip
    b662:	4310      	orrs	r0, r2
    b664:	9000      	str	r0, [sp, #0]
    b666:	783b      	ldrb	r3, [r7, #0]
    b668:	e5f6      	b.n	b258 <_svfiprintf_r+0xb0>
    b66a:	783b      	ldrb	r3, [r7, #0]
    b66c:	3701      	adds	r7, #1
    b66e:	2b2a      	cmp	r3, #42	; 0x2a
    b670:	d100      	bne.n	b674 <_svfiprintf_r+0x4cc>
    b672:	e318      	b.n	bca6 <_svfiprintf_r+0xafe>
    b674:	1c1a      	adds	r2, r3, #0
    b676:	3a30      	subs	r2, #48	; 0x30
    b678:	2600      	movs	r6, #0
    b67a:	2a09      	cmp	r2, #9
    b67c:	d900      	bls.n	b680 <_svfiprintf_r+0x4d8>
    b67e:	e5ec      	b.n	b25a <_svfiprintf_r+0xb2>
    b680:	00b3      	lsls	r3, r6, #2
    b682:	199e      	adds	r6, r3, r6
    b684:	783b      	ldrb	r3, [r7, #0]
    b686:	0076      	lsls	r6, r6, #1
    b688:	18b6      	adds	r6, r6, r2
    b68a:	1c1a      	adds	r2, r3, #0
    b68c:	3a30      	subs	r2, #48	; 0x30
    b68e:	3701      	adds	r7, #1
    b690:	2a09      	cmp	r2, #9
    b692:	d9f5      	bls.n	b680 <_svfiprintf_r+0x4d8>
    b694:	2e00      	cmp	r6, #0
    b696:	db00      	blt.n	b69a <_svfiprintf_r+0x4f2>
    b698:	e5df      	b.n	b25a <_svfiprintf_r+0xb2>
    b69a:	2601      	movs	r6, #1
    b69c:	4276      	negs	r6, r6
    b69e:	e5dc      	b.n	b25a <_svfiprintf_r+0xb2>
    b6a0:	1c2b      	adds	r3, r5, #0
    b6a2:	3308      	adds	r3, #8
    b6a4:	20af      	movs	r0, #175	; 0xaf
    b6a6:	4468      	add	r0, sp
    b6a8:	7802      	ldrb	r2, [r0, #0]
    b6aa:	2a00      	cmp	r2, #0
    b6ac:	d00d      	beq.n	b6ca <_svfiprintf_r+0x522>
    b6ae:	2201      	movs	r2, #1
    b6b0:	606a      	str	r2, [r5, #4]
    b6b2:	68a2      	ldr	r2, [r4, #8]
    b6b4:	3201      	adds	r2, #1
    b6b6:	6028      	str	r0, [r5, #0]
    b6b8:	60a2      	str	r2, [r4, #8]
    b6ba:	6862      	ldr	r2, [r4, #4]
    b6bc:	3201      	adds	r2, #1
    b6be:	6062      	str	r2, [r4, #4]
    b6c0:	2a07      	cmp	r2, #7
    b6c2:	dd00      	ble.n	b6c6 <_svfiprintf_r+0x51e>
    b6c4:	e16e      	b.n	b9a4 <_svfiprintf_r+0x7fc>
    b6c6:	1c1d      	adds	r5, r3, #0
    b6c8:	3308      	adds	r3, #8
    b6ca:	2100      	movs	r1, #0
    b6cc:	4589      	cmp	r9, r1
    b6ce:	d00e      	beq.n	b6ee <_svfiprintf_r+0x546>
    b6d0:	aa2b      	add	r2, sp, #172	; 0xac
    b6d2:	602a      	str	r2, [r5, #0]
    b6d4:	2202      	movs	r2, #2
    b6d6:	606a      	str	r2, [r5, #4]
    b6d8:	68a2      	ldr	r2, [r4, #8]
    b6da:	3202      	adds	r2, #2
    b6dc:	60a2      	str	r2, [r4, #8]
    b6de:	6862      	ldr	r2, [r4, #4]
    b6e0:	3201      	adds	r2, #1
    b6e2:	6062      	str	r2, [r4, #4]
    b6e4:	2a07      	cmp	r2, #7
    b6e6:	dd00      	ble.n	b6ea <_svfiprintf_r+0x542>
    b6e8:	e151      	b.n	b98e <_svfiprintf_r+0x7e6>
    b6ea:	1c1d      	adds	r5, r3, #0
    b6ec:	3308      	adds	r3, #8
    b6ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b6f0:	2a80      	cmp	r2, #128	; 0x80
    b6f2:	d100      	bne.n	b6f6 <_svfiprintf_r+0x54e>
    b6f4:	e0d6      	b.n	b8a4 <_svfiprintf_r+0x6fc>
    b6f6:	9906      	ldr	r1, [sp, #24]
    b6f8:	9a03      	ldr	r2, [sp, #12]
    b6fa:	1a8e      	subs	r6, r1, r2
    b6fc:	2e00      	cmp	r6, #0
    b6fe:	dd42      	ble.n	b786 <_svfiprintf_r+0x5de>
    b700:	2e10      	cmp	r6, #16
    b702:	dc00      	bgt.n	b706 <_svfiprintf_r+0x55e>
    b704:	e25a      	b.n	bbbc <_svfiprintf_r+0xa14>
    b706:	4b66      	ldr	r3, [pc, #408]	; (b8a0 <_svfiprintf_r+0x6f8>)
    b708:	2010      	movs	r0, #16
    b70a:	469a      	mov	sl, r3
    b70c:	465a      	mov	r2, fp
    b70e:	4680      	mov	r8, r0
    b710:	1c2b      	adds	r3, r5, #0
    b712:	46bb      	mov	fp, r7
    b714:	44d0      	add	r8, sl
    b716:	4681      	mov	r9, r0
    b718:	9d02      	ldr	r5, [sp, #8]
    b71a:	1c17      	adds	r7, r2, #0
    b71c:	e005      	b.n	b72a <_svfiprintf_r+0x582>
    b71e:	3308      	adds	r3, #8
    b720:	1c1a      	adds	r2, r3, #0
    b722:	3e10      	subs	r6, #16
    b724:	3208      	adds	r2, #8
    b726:	2e10      	cmp	r6, #16
    b728:	dd18      	ble.n	b75c <_svfiprintf_r+0x5b4>
    b72a:	464a      	mov	r2, r9
    b72c:	605a      	str	r2, [r3, #4]
    b72e:	68a2      	ldr	r2, [r4, #8]
    b730:	4641      	mov	r1, r8
    b732:	3210      	adds	r2, #16
    b734:	6019      	str	r1, [r3, #0]
    b736:	60a2      	str	r2, [r4, #8]
    b738:	6862      	ldr	r2, [r4, #4]
    b73a:	3201      	adds	r2, #1
    b73c:	6062      	str	r2, [r4, #4]
    b73e:	2a07      	cmp	r2, #7
    b740:	dded      	ble.n	b71e <_svfiprintf_r+0x576>
    b742:	1c28      	adds	r0, r5, #0
    b744:	1c39      	adds	r1, r7, #0
    b746:	1c22      	adds	r2, r4, #0
    b748:	f7ff fc9c 	bl	b084 <__ssprint_r>
    b74c:	2800      	cmp	r0, #0
    b74e:	d000      	beq.n	b752 <_svfiprintf_r+0x5aa>
    b750:	e106      	b.n	b960 <_svfiprintf_r+0x7b8>
    b752:	3e10      	subs	r6, #16
    b754:	aa10      	add	r2, sp, #64	; 0x40
    b756:	ab0e      	add	r3, sp, #56	; 0x38
    b758:	2e10      	cmp	r6, #16
    b75a:	dce6      	bgt.n	b72a <_svfiprintf_r+0x582>
    b75c:	1c1d      	adds	r5, r3, #0
    b75e:	1c3b      	adds	r3, r7, #0
    b760:	465f      	mov	r7, fp
    b762:	469b      	mov	fp, r3
    b764:	2010      	movs	r0, #16
    b766:	1c03      	adds	r3, r0, #0
    b768:	4453      	add	r3, sl
    b76a:	602b      	str	r3, [r5, #0]
    b76c:	68a3      	ldr	r3, [r4, #8]
    b76e:	606e      	str	r6, [r5, #4]
    b770:	18f6      	adds	r6, r6, r3
    b772:	6863      	ldr	r3, [r4, #4]
    b774:	3301      	adds	r3, #1
    b776:	60a6      	str	r6, [r4, #8]
    b778:	6063      	str	r3, [r4, #4]
    b77a:	2b07      	cmp	r3, #7
    b77c:	dd00      	ble.n	b780 <_svfiprintf_r+0x5d8>
    b77e:	e0fb      	b.n	b978 <_svfiprintf_r+0x7d0>
    b780:	1c13      	adds	r3, r2, #0
    b782:	3308      	adds	r3, #8
    b784:	1c15      	adds	r5, r2, #0
    b786:	9a03      	ldr	r2, [sp, #12]
    b788:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b78a:	606a      	str	r2, [r5, #4]
    b78c:	6029      	str	r1, [r5, #0]
    b78e:	68a2      	ldr	r2, [r4, #8]
    b790:	9d03      	ldr	r5, [sp, #12]
    b792:	1952      	adds	r2, r2, r5
    b794:	60a2      	str	r2, [r4, #8]
    b796:	6862      	ldr	r2, [r4, #4]
    b798:	3201      	adds	r2, #1
    b79a:	6062      	str	r2, [r4, #4]
    b79c:	2a07      	cmp	r2, #7
    b79e:	dd00      	ble.n	b7a2 <_svfiprintf_r+0x5fa>
    b7a0:	e0c9      	b.n	b936 <_svfiprintf_r+0x78e>
    b7a2:	9800      	ldr	r0, [sp, #0]
    b7a4:	0740      	lsls	r0, r0, #29
    b7a6:	d539      	bpl.n	b81c <_svfiprintf_r+0x674>
    b7a8:	9904      	ldr	r1, [sp, #16]
    b7aa:	9a01      	ldr	r2, [sp, #4]
    b7ac:	1a8d      	subs	r5, r1, r2
    b7ae:	2d00      	cmp	r5, #0
    b7b0:	dd34      	ble.n	b81c <_svfiprintf_r+0x674>
    b7b2:	2d10      	cmp	r5, #16
    b7b4:	dc00      	bgt.n	b7b8 <_svfiprintf_r+0x610>
    b7b6:	e25b      	b.n	bc70 <_svfiprintf_r+0xac8>
    b7b8:	4939      	ldr	r1, [pc, #228]	; (b8a0 <_svfiprintf_r+0x6f8>)
    b7ba:	46b8      	mov	r8, r7
    b7bc:	2610      	movs	r6, #16
    b7be:	1c0f      	adds	r7, r1, #0
    b7c0:	e002      	b.n	b7c8 <_svfiprintf_r+0x620>
    b7c2:	3d10      	subs	r5, #16
    b7c4:	2d10      	cmp	r5, #16
    b7c6:	dd15      	ble.n	b7f4 <_svfiprintf_r+0x64c>
    b7c8:	68a2      	ldr	r2, [r4, #8]
    b7ca:	3210      	adds	r2, #16
    b7cc:	601f      	str	r7, [r3, #0]
    b7ce:	605e      	str	r6, [r3, #4]
    b7d0:	60a2      	str	r2, [r4, #8]
    b7d2:	6862      	ldr	r2, [r4, #4]
    b7d4:	3201      	adds	r2, #1
    b7d6:	6062      	str	r2, [r4, #4]
    b7d8:	3308      	adds	r3, #8
    b7da:	2a07      	cmp	r2, #7
    b7dc:	ddf1      	ble.n	b7c2 <_svfiprintf_r+0x61a>
    b7de:	9802      	ldr	r0, [sp, #8]
    b7e0:	4659      	mov	r1, fp
    b7e2:	1c22      	adds	r2, r4, #0
    b7e4:	f7ff fc4e 	bl	b084 <__ssprint_r>
    b7e8:	2800      	cmp	r0, #0
    b7ea:	d146      	bne.n	b87a <_svfiprintf_r+0x6d2>
    b7ec:	3d10      	subs	r5, #16
    b7ee:	ab0e      	add	r3, sp, #56	; 0x38
    b7f0:	2d10      	cmp	r5, #16
    b7f2:	dce9      	bgt.n	b7c8 <_svfiprintf_r+0x620>
    b7f4:	46ba      	mov	sl, r7
    b7f6:	4647      	mov	r7, r8
    b7f8:	4652      	mov	r2, sl
    b7fa:	605d      	str	r5, [r3, #4]
    b7fc:	601a      	str	r2, [r3, #0]
    b7fe:	68a3      	ldr	r3, [r4, #8]
    b800:	18ed      	adds	r5, r5, r3
    b802:	6863      	ldr	r3, [r4, #4]
    b804:	3301      	adds	r3, #1
    b806:	60a5      	str	r5, [r4, #8]
    b808:	6063      	str	r3, [r4, #4]
    b80a:	2b07      	cmp	r3, #7
    b80c:	dd07      	ble.n	b81e <_svfiprintf_r+0x676>
    b80e:	9802      	ldr	r0, [sp, #8]
    b810:	4659      	mov	r1, fp
    b812:	1c22      	adds	r2, r4, #0
    b814:	f7ff fc36 	bl	b084 <__ssprint_r>
    b818:	2800      	cmp	r0, #0
    b81a:	d12e      	bne.n	b87a <_svfiprintf_r+0x6d2>
    b81c:	68a5      	ldr	r5, [r4, #8]
    b81e:	9b01      	ldr	r3, [sp, #4]
    b820:	9804      	ldr	r0, [sp, #16]
    b822:	4283      	cmp	r3, r0
    b824:	da00      	bge.n	b828 <_svfiprintf_r+0x680>
    b826:	1c03      	adds	r3, r0, #0
    b828:	9905      	ldr	r1, [sp, #20]
    b82a:	18c9      	adds	r1, r1, r3
    b82c:	9105      	str	r1, [sp, #20]
    b82e:	2d00      	cmp	r5, #0
    b830:	d000      	beq.n	b834 <_svfiprintf_r+0x68c>
    b832:	e089      	b.n	b948 <_svfiprintf_r+0x7a0>
    b834:	2200      	movs	r2, #0
    b836:	6062      	str	r2, [r4, #4]
    b838:	783b      	ldrb	r3, [r7, #0]
    b83a:	ad0e      	add	r5, sp, #56	; 0x38
    b83c:	2b00      	cmp	r3, #0
    b83e:	d000      	beq.n	b842 <_svfiprintf_r+0x69a>
    b840:	e4d4      	b.n	b1ec <_svfiprintf_r+0x44>
    b842:	1c3e      	adds	r6, r7, #0
    b844:	783b      	ldrb	r3, [r7, #0]
    b846:	e4f2      	b.n	b22e <_svfiprintf_r+0x86>
    b848:	2b00      	cmp	r3, #0
    b84a:	d000      	beq.n	b84e <_svfiprintf_r+0x6a6>
    b84c:	e085      	b.n	b95a <_svfiprintf_r+0x7b2>
    b84e:	9900      	ldr	r1, [sp, #0]
    b850:	07c9      	lsls	r1, r1, #31
    b852:	d400      	bmi.n	b856 <_svfiprintf_r+0x6ae>
    b854:	e0b1      	b.n	b9ba <_svfiprintf_r+0x812>
    b856:	3327      	adds	r3, #39	; 0x27
    b858:	aa1e      	add	r2, sp, #120	; 0x78
    b85a:	2130      	movs	r1, #48	; 0x30
    b85c:	54d1      	strb	r1, [r2, r3]
    b85e:	466b      	mov	r3, sp
    b860:	339f      	adds	r3, #159	; 0x9f
    b862:	1ae2      	subs	r2, r4, r3
    b864:	9203      	str	r2, [sp, #12]
    b866:	930b      	str	r3, [sp, #44]	; 0x2c
    b868:	e5c1      	b.n	b3ee <_svfiprintf_r+0x246>
    b86a:	68a3      	ldr	r3, [r4, #8]
    b86c:	2b00      	cmp	r3, #0
    b86e:	d004      	beq.n	b87a <_svfiprintf_r+0x6d2>
    b870:	9802      	ldr	r0, [sp, #8]
    b872:	4659      	mov	r1, fp
    b874:	1c22      	adds	r2, r4, #0
    b876:	f7ff fc05 	bl	b084 <__ssprint_r>
    b87a:	465d      	mov	r5, fp
    b87c:	89ab      	ldrh	r3, [r5, #12]
    b87e:	0658      	lsls	r0, r3, #25
    b880:	d502      	bpl.n	b888 <_svfiprintf_r+0x6e0>
    b882:	2301      	movs	r3, #1
    b884:	425b      	negs	r3, r3
    b886:	9305      	str	r3, [sp, #20]
    b888:	9805      	ldr	r0, [sp, #20]
    b88a:	b02d      	add	sp, #180	; 0xb4
    b88c:	bc3c      	pop	{r2, r3, r4, r5}
    b88e:	4690      	mov	r8, r2
    b890:	4699      	mov	r9, r3
    b892:	46a2      	mov	sl, r4
    b894:	46ab      	mov	fp, r5
    b896:	bcf0      	pop	{r4, r5, r6, r7}
    b898:	bc02      	pop	{r1}
    b89a:	4708      	bx	r1
    b89c:	0000edd0 	.word	0x0000edd0
    b8a0:	0000e7d4 	.word	0x0000e7d4
    b8a4:	9804      	ldr	r0, [sp, #16]
    b8a6:	9901      	ldr	r1, [sp, #4]
    b8a8:	1a46      	subs	r6, r0, r1
    b8aa:	2e00      	cmp	r6, #0
    b8ac:	dc00      	bgt.n	b8b0 <_svfiprintf_r+0x708>
    b8ae:	e177      	b.n	bba0 <_svfiprintf_r+0x9f8>
    b8b0:	2e10      	cmp	r6, #16
    b8b2:	dc00      	bgt.n	b8b6 <_svfiprintf_r+0x70e>
    b8b4:	e1ef      	b.n	bc96 <_svfiprintf_r+0xaee>
    b8b6:	4acc      	ldr	r2, [pc, #816]	; (bbe8 <_svfiprintf_r+0xa40>)
    b8b8:	2310      	movs	r3, #16
    b8ba:	4692      	mov	sl, r2
    b8bc:	4698      	mov	r8, r3
    b8be:	465a      	mov	r2, fp
    b8c0:	4699      	mov	r9, r3
    b8c2:	46bb      	mov	fp, r7
    b8c4:	1c2b      	adds	r3, r5, #0
    b8c6:	44d0      	add	r8, sl
    b8c8:	9d02      	ldr	r5, [sp, #8]
    b8ca:	1c17      	adds	r7, r2, #0
    b8cc:	e005      	b.n	b8da <_svfiprintf_r+0x732>
    b8ce:	3308      	adds	r3, #8
    b8d0:	1c1a      	adds	r2, r3, #0
    b8d2:	3e10      	subs	r6, #16
    b8d4:	3208      	adds	r2, #8
    b8d6:	2e10      	cmp	r6, #16
    b8d8:	dd17      	ble.n	b90a <_svfiprintf_r+0x762>
    b8da:	68a2      	ldr	r2, [r4, #8]
    b8dc:	4640      	mov	r0, r8
    b8de:	3210      	adds	r2, #16
    b8e0:	4649      	mov	r1, r9
    b8e2:	6018      	str	r0, [r3, #0]
    b8e4:	6059      	str	r1, [r3, #4]
    b8e6:	60a2      	str	r2, [r4, #8]
    b8e8:	6862      	ldr	r2, [r4, #4]
    b8ea:	3201      	adds	r2, #1
    b8ec:	6062      	str	r2, [r4, #4]
    b8ee:	2a07      	cmp	r2, #7
    b8f0:	dded      	ble.n	b8ce <_svfiprintf_r+0x726>
    b8f2:	1c28      	adds	r0, r5, #0
    b8f4:	1c39      	adds	r1, r7, #0
    b8f6:	1c22      	adds	r2, r4, #0
    b8f8:	f7ff fbc4 	bl	b084 <__ssprint_r>
    b8fc:	2800      	cmp	r0, #0
    b8fe:	d12f      	bne.n	b960 <_svfiprintf_r+0x7b8>
    b900:	3e10      	subs	r6, #16
    b902:	aa10      	add	r2, sp, #64	; 0x40
    b904:	ab0e      	add	r3, sp, #56	; 0x38
    b906:	2e10      	cmp	r6, #16
    b908:	dce7      	bgt.n	b8da <_svfiprintf_r+0x732>
    b90a:	1c1d      	adds	r5, r3, #0
    b90c:	1c3b      	adds	r3, r7, #0
    b90e:	465f      	mov	r7, fp
    b910:	469b      	mov	fp, r3
    b912:	2010      	movs	r0, #16
    b914:	1c03      	adds	r3, r0, #0
    b916:	4453      	add	r3, sl
    b918:	602b      	str	r3, [r5, #0]
    b91a:	68a3      	ldr	r3, [r4, #8]
    b91c:	18f3      	adds	r3, r6, r3
    b91e:	606e      	str	r6, [r5, #4]
    b920:	60a3      	str	r3, [r4, #8]
    b922:	6863      	ldr	r3, [r4, #4]
    b924:	3301      	adds	r3, #1
    b926:	6063      	str	r3, [r4, #4]
    b928:	2b07      	cmp	r3, #7
    b92a:	dd00      	ble.n	b92e <_svfiprintf_r+0x786>
    b92c:	e13b      	b.n	bba6 <_svfiprintf_r+0x9fe>
    b92e:	1c13      	adds	r3, r2, #0
    b930:	3308      	adds	r3, #8
    b932:	1c15      	adds	r5, r2, #0
    b934:	e6df      	b.n	b6f6 <_svfiprintf_r+0x54e>
    b936:	9802      	ldr	r0, [sp, #8]
    b938:	4659      	mov	r1, fp
    b93a:	1c22      	adds	r2, r4, #0
    b93c:	f7ff fba2 	bl	b084 <__ssprint_r>
    b940:	2800      	cmp	r0, #0
    b942:	d19a      	bne.n	b87a <_svfiprintf_r+0x6d2>
    b944:	ab0e      	add	r3, sp, #56	; 0x38
    b946:	e72c      	b.n	b7a2 <_svfiprintf_r+0x5fa>
    b948:	9802      	ldr	r0, [sp, #8]
    b94a:	4659      	mov	r1, fp
    b94c:	1c22      	adds	r2, r4, #0
    b94e:	f7ff fb99 	bl	b084 <__ssprint_r>
    b952:	2800      	cmp	r0, #0
    b954:	d100      	bne.n	b958 <_svfiprintf_r+0x7b0>
    b956:	e76d      	b.n	b834 <_svfiprintf_r+0x68c>
    b958:	e78f      	b.n	b87a <_svfiprintf_r+0x6d2>
    b95a:	9103      	str	r1, [sp, #12]
    b95c:	940b      	str	r4, [sp, #44]	; 0x2c
    b95e:	e546      	b.n	b3ee <_svfiprintf_r+0x246>
    b960:	46bb      	mov	fp, r7
    b962:	e78a      	b.n	b87a <_svfiprintf_r+0x6d2>
    b964:	9802      	ldr	r0, [sp, #8]
    b966:	4659      	mov	r1, fp
    b968:	1c22      	adds	r2, r4, #0
    b96a:	f7ff fb8b 	bl	b084 <__ssprint_r>
    b96e:	2800      	cmp	r0, #0
    b970:	d000      	beq.n	b974 <_svfiprintf_r+0x7cc>
    b972:	e782      	b.n	b87a <_svfiprintf_r+0x6d2>
    b974:	ad0e      	add	r5, sp, #56	; 0x38
    b976:	e455      	b.n	b224 <_svfiprintf_r+0x7c>
    b978:	9802      	ldr	r0, [sp, #8]
    b97a:	4659      	mov	r1, fp
    b97c:	1c22      	adds	r2, r4, #0
    b97e:	f7ff fb81 	bl	b084 <__ssprint_r>
    b982:	2800      	cmp	r0, #0
    b984:	d000      	beq.n	b988 <_svfiprintf_r+0x7e0>
    b986:	e778      	b.n	b87a <_svfiprintf_r+0x6d2>
    b988:	ab10      	add	r3, sp, #64	; 0x40
    b98a:	ad0e      	add	r5, sp, #56	; 0x38
    b98c:	e6fb      	b.n	b786 <_svfiprintf_r+0x5de>
    b98e:	9802      	ldr	r0, [sp, #8]
    b990:	4659      	mov	r1, fp
    b992:	1c22      	adds	r2, r4, #0
    b994:	f7ff fb76 	bl	b084 <__ssprint_r>
    b998:	2800      	cmp	r0, #0
    b99a:	d000      	beq.n	b99e <_svfiprintf_r+0x7f6>
    b99c:	e76d      	b.n	b87a <_svfiprintf_r+0x6d2>
    b99e:	ab10      	add	r3, sp, #64	; 0x40
    b9a0:	ad0e      	add	r5, sp, #56	; 0x38
    b9a2:	e6a4      	b.n	b6ee <_svfiprintf_r+0x546>
    b9a4:	9802      	ldr	r0, [sp, #8]
    b9a6:	4659      	mov	r1, fp
    b9a8:	1c22      	adds	r2, r4, #0
    b9aa:	f7ff fb6b 	bl	b084 <__ssprint_r>
    b9ae:	2800      	cmp	r0, #0
    b9b0:	d000      	beq.n	b9b4 <_svfiprintf_r+0x80c>
    b9b2:	e762      	b.n	b87a <_svfiprintf_r+0x6d2>
    b9b4:	ab10      	add	r3, sp, #64	; 0x40
    b9b6:	ad0e      	add	r5, sp, #56	; 0x38
    b9b8:	e687      	b.n	b6ca <_svfiprintf_r+0x522>
    b9ba:	9303      	str	r3, [sp, #12]
    b9bc:	940b      	str	r4, [sp, #44]	; 0x2c
    b9be:	e516      	b.n	b3ee <_svfiprintf_r+0x246>
    b9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9c2:	2b00      	cmp	r3, #0
    b9c4:	d100      	bne.n	b9c8 <_svfiprintf_r+0x820>
    b9c6:	e091      	b.n	baec <_svfiprintf_r+0x944>
    b9c8:	46a9      	mov	r9, r5
    b9ca:	46b0      	mov	r8, r6
    b9cc:	940b      	str	r4, [sp, #44]	; 0x2c
    b9ce:	9d08      	ldr	r5, [sp, #32]
    b9d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b9d2:	46ba      	mov	sl, r7
    b9d4:	1c27      	adds	r7, r4, #0
    b9d6:	1c28      	adds	r0, r5, #0
    b9d8:	1c31      	adds	r1, r6, #0
    b9da:	220a      	movs	r2, #10
    b9dc:	2300      	movs	r3, #0
    b9de:	f002 fbbb 	bl	e158 <____aeabi_uldivmod_from_thumb>
    b9e2:	3f01      	subs	r7, #1
    b9e4:	3230      	adds	r2, #48	; 0x30
    b9e6:	703a      	strb	r2, [r7, #0]
    b9e8:	1c28      	adds	r0, r5, #0
    b9ea:	1c31      	adds	r1, r6, #0
    b9ec:	220a      	movs	r2, #10
    b9ee:	2300      	movs	r3, #0
    b9f0:	f002 fbb2 	bl	e158 <____aeabi_uldivmod_from_thumb>
    b9f4:	1c02      	adds	r2, r0, #0
    b9f6:	1c05      	adds	r5, r0, #0
    b9f8:	1c0e      	adds	r6, r1, #0
    b9fa:	430a      	orrs	r2, r1
    b9fc:	d1eb      	bne.n	b9d6 <_svfiprintf_r+0x82e>
    b9fe:	970b      	str	r7, [sp, #44]	; 0x2c
    ba00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ba02:	1ae3      	subs	r3, r4, r3
    ba04:	9508      	str	r5, [sp, #32]
    ba06:	9609      	str	r6, [sp, #36]	; 0x24
    ba08:	4657      	mov	r7, sl
    ba0a:	464d      	mov	r5, r9
    ba0c:	4646      	mov	r6, r8
    ba0e:	9303      	str	r3, [sp, #12]
    ba10:	e4ed      	b.n	b3ee <_svfiprintf_r+0x246>
    ba12:	200f      	movs	r0, #15
    ba14:	940b      	str	r4, [sp, #44]	; 0x2c
    ba16:	9a08      	ldr	r2, [sp, #32]
    ba18:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba1a:	4684      	mov	ip, r0
    ba1c:	1c21      	adds	r1, r4, #0
    ba1e:	46a8      	mov	r8, r5
    ba20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    ba22:	4660      	mov	r0, ip
    ba24:	4010      	ands	r0, r2
    ba26:	5c28      	ldrb	r0, [r5, r0]
    ba28:	3901      	subs	r1, #1
    ba2a:	0915      	lsrs	r5, r2, #4
    ba2c:	46a9      	mov	r9, r5
    ba2e:	7008      	strb	r0, [r1, #0]
    ba30:	0718      	lsls	r0, r3, #28
    ba32:	1c05      	adds	r5, r0, #0
    ba34:	4648      	mov	r0, r9
    ba36:	4305      	orrs	r5, r0
    ba38:	0918      	lsrs	r0, r3, #4
    ba3a:	1c2a      	adds	r2, r5, #0
    ba3c:	1c03      	adds	r3, r0, #0
    ba3e:	4305      	orrs	r5, r0
    ba40:	d1ee      	bne.n	ba20 <_svfiprintf_r+0x878>
    ba42:	1a60      	subs	r0, r4, r1
    ba44:	910b      	str	r1, [sp, #44]	; 0x2c
    ba46:	4645      	mov	r5, r8
    ba48:	9208      	str	r2, [sp, #32]
    ba4a:	9309      	str	r3, [sp, #36]	; 0x24
    ba4c:	9003      	str	r0, [sp, #12]
    ba4e:	e4ce      	b.n	b3ee <_svfiprintf_r+0x246>
    ba50:	9800      	ldr	r0, [sp, #0]
    ba52:	2310      	movs	r3, #16
    ba54:	4003      	ands	r3, r0
    ba56:	d000      	beq.n	ba5a <_svfiprintf_r+0x8b2>
    ba58:	e08b      	b.n	bb72 <_svfiprintf_r+0x9ca>
    ba5a:	9800      	ldr	r0, [sp, #0]
    ba5c:	2240      	movs	r2, #64	; 0x40
    ba5e:	4002      	ands	r2, r0
    ba60:	d100      	bne.n	ba64 <_svfiprintf_r+0x8bc>
    ba62:	e0c3      	b.n	bbec <_svfiprintf_r+0xa44>
    ba64:	9907      	ldr	r1, [sp, #28]
    ba66:	8809      	ldrh	r1, [r1, #0]
    ba68:	9309      	str	r3, [sp, #36]	; 0x24
    ba6a:	9108      	str	r1, [sp, #32]
    ba6c:	9a07      	ldr	r2, [sp, #28]
    ba6e:	3204      	adds	r2, #4
    ba70:	1e4b      	subs	r3, r1, #1
    ba72:	4199      	sbcs	r1, r3
    ba74:	9207      	str	r2, [sp, #28]
    ba76:	2301      	movs	r3, #1
    ba78:	e475      	b.n	b366 <_svfiprintf_r+0x1be>
    ba7a:	9800      	ldr	r0, [sp, #0]
    ba7c:	2210      	movs	r2, #16
    ba7e:	4002      	ands	r2, r0
    ba80:	d16c      	bne.n	bb5c <_svfiprintf_r+0x9b4>
    ba82:	9800      	ldr	r0, [sp, #0]
    ba84:	2340      	movs	r3, #64	; 0x40
    ba86:	4003      	ands	r3, r0
    ba88:	d100      	bne.n	ba8c <_svfiprintf_r+0x8e4>
    ba8a:	e0c4      	b.n	bc16 <_svfiprintf_r+0xa6e>
    ba8c:	9907      	ldr	r1, [sp, #28]
    ba8e:	8809      	ldrh	r1, [r1, #0]
    ba90:	9108      	str	r1, [sp, #32]
    ba92:	1e4b      	subs	r3, r1, #1
    ba94:	4199      	sbcs	r1, r3
    ba96:	9b07      	ldr	r3, [sp, #28]
    ba98:	3304      	adds	r3, #4
    ba9a:	9307      	str	r3, [sp, #28]
    ba9c:	9209      	str	r2, [sp, #36]	; 0x24
    ba9e:	1c13      	adds	r3, r2, #0
    baa0:	e461      	b.n	b366 <_svfiprintf_r+0x1be>
    baa2:	9a00      	ldr	r2, [sp, #0]
    baa4:	06d2      	lsls	r2, r2, #27
    baa6:	d430      	bmi.n	bb0a <_svfiprintf_r+0x962>
    baa8:	9900      	ldr	r1, [sp, #0]
    baaa:	0649      	lsls	r1, r1, #25
    baac:	d52d      	bpl.n	bb0a <_svfiprintf_r+0x962>
    baae:	9a07      	ldr	r2, [sp, #28]
    bab0:	2300      	movs	r3, #0
    bab2:	5ed3      	ldrsh	r3, [r2, r3]
    bab4:	9308      	str	r3, [sp, #32]
    bab6:	17db      	asrs	r3, r3, #31
    bab8:	9309      	str	r3, [sp, #36]	; 0x24
    baba:	9b07      	ldr	r3, [sp, #28]
    babc:	3304      	adds	r3, #4
    babe:	9307      	str	r3, [sp, #28]
    bac0:	e4d2      	b.n	b468 <_svfiprintf_r+0x2c0>
    bac2:	9802      	ldr	r0, [sp, #8]
    bac4:	4659      	mov	r1, fp
    bac6:	1c22      	adds	r2, r4, #0
    bac8:	f7ff fadc 	bl	b084 <__ssprint_r>
    bacc:	2800      	cmp	r0, #0
    bace:	d000      	beq.n	bad2 <_svfiprintf_r+0x92a>
    bad0:	e6d3      	b.n	b87a <_svfiprintf_r+0x6d2>
    bad2:	ab10      	add	r3, sp, #64	; 0x40
    bad4:	ad0e      	add	r5, sp, #56	; 0x38
    bad6:	e5e5      	b.n	b6a4 <_svfiprintf_r+0x4fc>
    bad8:	46ab      	mov	fp, r5
    bada:	e6ce      	b.n	b87a <_svfiprintf_r+0x6d2>
    badc:	783b      	ldrb	r3, [r7, #0]
    bade:	9207      	str	r2, [sp, #28]
    bae0:	f7ff fbba 	bl	b258 <_svfiprintf_r+0xb0>
    bae4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bae6:	1aa2      	subs	r2, r4, r2
    bae8:	9203      	str	r2, [sp, #12]
    baea:	e480      	b.n	b3ee <_svfiprintf_r+0x246>
    baec:	9808      	ldr	r0, [sp, #32]
    baee:	2809      	cmp	r0, #9
    baf0:	d900      	bls.n	baf4 <_svfiprintf_r+0x94c>
    baf2:	e769      	b.n	b9c8 <_svfiprintf_r+0x820>
    baf4:	1c01      	adds	r1, r0, #0
    baf6:	3130      	adds	r1, #48	; 0x30
    baf8:	3327      	adds	r3, #39	; 0x27
    bafa:	aa1e      	add	r2, sp, #120	; 0x78
    bafc:	54d1      	strb	r1, [r2, r3]
    bafe:	466b      	mov	r3, sp
    bb00:	339f      	adds	r3, #159	; 0x9f
    bb02:	1ae1      	subs	r1, r4, r3
    bb04:	9103      	str	r1, [sp, #12]
    bb06:	930b      	str	r3, [sp, #44]	; 0x2c
    bb08:	e471      	b.n	b3ee <_svfiprintf_r+0x246>
    bb0a:	9807      	ldr	r0, [sp, #28]
    bb0c:	6803      	ldr	r3, [r0, #0]
    bb0e:	9308      	str	r3, [sp, #32]
    bb10:	17db      	asrs	r3, r3, #31
    bb12:	9309      	str	r3, [sp, #36]	; 0x24
    bb14:	9909      	ldr	r1, [sp, #36]	; 0x24
    bb16:	3004      	adds	r0, #4
    bb18:	9007      	str	r0, [sp, #28]
    bb1a:	2900      	cmp	r1, #0
    bb1c:	db00      	blt.n	bb20 <_svfiprintf_r+0x978>
    bb1e:	e4a7      	b.n	b470 <_svfiprintf_r+0x2c8>
    bb20:	9a08      	ldr	r2, [sp, #32]
    bb22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb24:	2100      	movs	r1, #0
    bb26:	4250      	negs	r0, r2
    bb28:	4199      	sbcs	r1, r3
    bb2a:	9008      	str	r0, [sp, #32]
    bb2c:	9109      	str	r1, [sp, #36]	; 0x24
    bb2e:	20af      	movs	r0, #175	; 0xaf
    bb30:	232d      	movs	r3, #45	; 0x2d
    bb32:	4468      	add	r0, sp
    bb34:	7003      	strb	r3, [r0, #0]
    bb36:	e49b      	b.n	b470 <_svfiprintf_r+0x2c8>
    bb38:	9807      	ldr	r0, [sp, #28]
    bb3a:	9905      	ldr	r1, [sp, #20]
    bb3c:	6803      	ldr	r3, [r0, #0]
    bb3e:	17ca      	asrs	r2, r1, #31
    bb40:	3004      	adds	r0, #4
    bb42:	6019      	str	r1, [r3, #0]
    bb44:	605a      	str	r2, [r3, #4]
    bb46:	9007      	str	r0, [sp, #28]
    bb48:	f7ff fb4c 	bl	b1e4 <_svfiprintf_r+0x3c>
    bb4c:	9a07      	ldr	r2, [sp, #28]
    bb4e:	9807      	ldr	r0, [sp, #28]
    bb50:	6812      	ldr	r2, [r2, #0]
    bb52:	3004      	adds	r0, #4
    bb54:	9208      	str	r2, [sp, #32]
    bb56:	9109      	str	r1, [sp, #36]	; 0x24
    bb58:	9007      	str	r0, [sp, #28]
    bb5a:	e4df      	b.n	b51c <_svfiprintf_r+0x374>
    bb5c:	9907      	ldr	r1, [sp, #28]
    bb5e:	6809      	ldr	r1, [r1, #0]
    bb60:	9108      	str	r1, [sp, #32]
    bb62:	1e4a      	subs	r2, r1, #1
    bb64:	4191      	sbcs	r1, r2
    bb66:	9a07      	ldr	r2, [sp, #28]
    bb68:	3204      	adds	r2, #4
    bb6a:	9309      	str	r3, [sp, #36]	; 0x24
    bb6c:	9207      	str	r2, [sp, #28]
    bb6e:	f7ff fbfa 	bl	b366 <_svfiprintf_r+0x1be>
    bb72:	9907      	ldr	r1, [sp, #28]
    bb74:	6809      	ldr	r1, [r1, #0]
    bb76:	9209      	str	r2, [sp, #36]	; 0x24
    bb78:	9108      	str	r1, [sp, #32]
    bb7a:	e777      	b.n	ba6c <_svfiprintf_r+0x8c4>
    bb7c:	783b      	ldrb	r3, [r7, #0]
    bb7e:	f7ff fb6b 	bl	b258 <_svfiprintf_r+0xb0>
    bb82:	9a00      	ldr	r2, [sp, #0]
    bb84:	3b4c      	subs	r3, #76	; 0x4c
    bb86:	431a      	orrs	r2, r3
    bb88:	9200      	str	r2, [sp, #0]
    bb8a:	3701      	adds	r7, #1
    bb8c:	783b      	ldrb	r3, [r7, #0]
    bb8e:	f7ff fb63 	bl	b258 <_svfiprintf_r+0xb0>
    bb92:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bb94:	f7f9 ff76 	bl	5a84 <strlen>
    bb98:	2200      	movs	r2, #0
    bb9a:	9003      	str	r0, [sp, #12]
    bb9c:	9206      	str	r2, [sp, #24]
    bb9e:	e427      	b.n	b3f0 <_svfiprintf_r+0x248>
    bba0:	1c2b      	adds	r3, r5, #0
    bba2:	3308      	adds	r3, #8
    bba4:	e5a7      	b.n	b6f6 <_svfiprintf_r+0x54e>
    bba6:	9802      	ldr	r0, [sp, #8]
    bba8:	4659      	mov	r1, fp
    bbaa:	1c22      	adds	r2, r4, #0
    bbac:	f7ff fa6a 	bl	b084 <__ssprint_r>
    bbb0:	2800      	cmp	r0, #0
    bbb2:	d000      	beq.n	bbb6 <_svfiprintf_r+0xa0e>
    bbb4:	e661      	b.n	b87a <_svfiprintf_r+0x6d2>
    bbb6:	ab10      	add	r3, sp, #64	; 0x40
    bbb8:	ad0e      	add	r5, sp, #56	; 0x38
    bbba:	e59c      	b.n	b6f6 <_svfiprintf_r+0x54e>
    bbbc:	1c1a      	adds	r2, r3, #0
    bbbe:	4b0a      	ldr	r3, [pc, #40]	; (bbe8 <_svfiprintf_r+0xa40>)
    bbc0:	469a      	mov	sl, r3
    bbc2:	e5cf      	b.n	b764 <_svfiprintf_r+0x5bc>
    bbc4:	2200      	movs	r2, #0
    bbc6:	9206      	str	r2, [sp, #24]
    bbc8:	f7ff fc12 	bl	b3f0 <_svfiprintf_r+0x248>
    bbcc:	9a00      	ldr	r2, [sp, #0]
    bbce:	0652      	lsls	r2, r2, #25
    bbd0:	d53b      	bpl.n	bc4a <_svfiprintf_r+0xaa2>
    bbd2:	9807      	ldr	r0, [sp, #28]
    bbd4:	4669      	mov	r1, sp
    bbd6:	2214      	movs	r2, #20
    bbd8:	6803      	ldr	r3, [r0, #0]
    bbda:	5a51      	ldrh	r1, [r2, r1]
    bbdc:	3004      	adds	r0, #4
    bbde:	8019      	strh	r1, [r3, #0]
    bbe0:	9007      	str	r0, [sp, #28]
    bbe2:	f7ff faff 	bl	b1e4 <_svfiprintf_r+0x3c>
    bbe6:	46c0      	nop			; (mov r8, r8)
    bbe8:	0000e7d4 	.word	0x0000e7d4
    bbec:	9b07      	ldr	r3, [sp, #28]
    bbee:	9807      	ldr	r0, [sp, #28]
    bbf0:	681b      	ldr	r3, [r3, #0]
    bbf2:	3004      	adds	r0, #4
    bbf4:	1c19      	adds	r1, r3, #0
    bbf6:	9308      	str	r3, [sp, #32]
    bbf8:	9209      	str	r2, [sp, #36]	; 0x24
    bbfa:	1e4b      	subs	r3, r1, #1
    bbfc:	4199      	sbcs	r1, r3
    bbfe:	9007      	str	r0, [sp, #28]
    bc00:	2301      	movs	r3, #1
    bc02:	f7ff fbb0 	bl	b366 <_svfiprintf_r+0x1be>
    bc06:	9807      	ldr	r0, [sp, #28]
    bc08:	6800      	ldr	r0, [r0, #0]
    bc0a:	9109      	str	r1, [sp, #36]	; 0x24
    bc0c:	9907      	ldr	r1, [sp, #28]
    bc0e:	3104      	adds	r1, #4
    bc10:	9008      	str	r0, [sp, #32]
    bc12:	9107      	str	r1, [sp, #28]
    bc14:	e482      	b.n	b51c <_svfiprintf_r+0x374>
    bc16:	9807      	ldr	r0, [sp, #28]
    bc18:	6800      	ldr	r0, [r0, #0]
    bc1a:	1c01      	adds	r1, r0, #0
    bc1c:	1e4a      	subs	r2, r1, #1
    bc1e:	4191      	sbcs	r1, r2
    bc20:	9a07      	ldr	r2, [sp, #28]
    bc22:	3204      	adds	r2, #4
    bc24:	9008      	str	r0, [sp, #32]
    bc26:	9309      	str	r3, [sp, #36]	; 0x24
    bc28:	9207      	str	r2, [sp, #28]
    bc2a:	f7ff fb9c 	bl	b366 <_svfiprintf_r+0x1be>
    bc2e:	2140      	movs	r1, #64	; 0x40
    bc30:	9802      	ldr	r0, [sp, #8]
    bc32:	f7f9 fa9f 	bl	5174 <_malloc_r>
    bc36:	4659      	mov	r1, fp
    bc38:	6008      	str	r0, [r1, #0]
    bc3a:	6108      	str	r0, [r1, #16]
    bc3c:	2800      	cmp	r0, #0
    bc3e:	d03f      	beq.n	bcc0 <_svfiprintf_r+0xb18>
    bc40:	2340      	movs	r3, #64	; 0x40
    bc42:	4658      	mov	r0, fp
    bc44:	6143      	str	r3, [r0, #20]
    bc46:	f7ff fac2 	bl	b1ce <_svfiprintf_r+0x26>
    bc4a:	9a07      	ldr	r2, [sp, #28]
    bc4c:	9805      	ldr	r0, [sp, #20]
    bc4e:	6813      	ldr	r3, [r2, #0]
    bc50:	3204      	adds	r2, #4
    bc52:	6018      	str	r0, [r3, #0]
    bc54:	9207      	str	r2, [sp, #28]
    bc56:	f7ff fac5 	bl	b1e4 <_svfiprintf_r+0x3c>
    bc5a:	491d      	ldr	r1, [pc, #116]	; (bcd0 <_svfiprintf_r+0xb28>)
    bc5c:	1c2a      	adds	r2, r5, #0
    bc5e:	3208      	adds	r2, #8
    bc60:	468a      	mov	sl, r1
    bc62:	f7ff fb53 	bl	b30c <_svfiprintf_r+0x164>
    bc66:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bc68:	1a20      	subs	r0, r4, r0
    bc6a:	9003      	str	r0, [sp, #12]
    bc6c:	f7ff fbbf 	bl	b3ee <_svfiprintf_r+0x246>
    bc70:	4817      	ldr	r0, [pc, #92]	; (bcd0 <_svfiprintf_r+0xb28>)
    bc72:	4682      	mov	sl, r0
    bc74:	e5c0      	b.n	b7f8 <_svfiprintf_r+0x650>
    bc76:	9603      	str	r6, [sp, #12]
    bc78:	2e06      	cmp	r6, #6
    bc7a:	d906      	bls.n	bc8a <_svfiprintf_r+0xae2>
    bc7c:	2106      	movs	r1, #6
    bc7e:	9103      	str	r1, [sp, #12]
    bc80:	9101      	str	r1, [sp, #4]
    bc82:	4b14      	ldr	r3, [pc, #80]	; (bcd4 <_svfiprintf_r+0xb2c>)
    bc84:	930b      	str	r3, [sp, #44]	; 0x2c
    bc86:	f7ff faf9 	bl	b27c <_svfiprintf_r+0xd4>
    bc8a:	9a03      	ldr	r2, [sp, #12]
    bc8c:	43d3      	mvns	r3, r2
    bc8e:	17db      	asrs	r3, r3, #31
    bc90:	401a      	ands	r2, r3
    bc92:	9201      	str	r2, [sp, #4]
    bc94:	e7f5      	b.n	bc82 <_svfiprintf_r+0xada>
    bc96:	1c1a      	adds	r2, r3, #0
    bc98:	4b0d      	ldr	r3, [pc, #52]	; (bcd0 <_svfiprintf_r+0xb28>)
    bc9a:	469a      	mov	sl, r3
    bc9c:	e639      	b.n	b912 <_svfiprintf_r+0x76a>
    bc9e:	9603      	str	r6, [sp, #12]
    bca0:	9006      	str	r0, [sp, #24]
    bca2:	f7ff fba5 	bl	b3f0 <_svfiprintf_r+0x248>
    bca6:	9b07      	ldr	r3, [sp, #28]
    bca8:	9a07      	ldr	r2, [sp, #28]
    bcaa:	681e      	ldr	r6, [r3, #0]
    bcac:	3204      	adds	r2, #4
    bcae:	2e00      	cmp	r6, #0
    bcb0:	db00      	blt.n	bcb4 <_svfiprintf_r+0xb0c>
    bcb2:	e713      	b.n	badc <_svfiprintf_r+0x934>
    bcb4:	2601      	movs	r6, #1
    bcb6:	783b      	ldrb	r3, [r7, #0]
    bcb8:	4276      	negs	r6, r6
    bcba:	9207      	str	r2, [sp, #28]
    bcbc:	f7ff facc 	bl	b258 <_svfiprintf_r+0xb0>
    bcc0:	9a02      	ldr	r2, [sp, #8]
    bcc2:	230c      	movs	r3, #12
    bcc4:	6013      	str	r3, [r2, #0]
    bcc6:	3b0b      	subs	r3, #11
    bcc8:	425b      	negs	r3, r3
    bcca:	9305      	str	r3, [sp, #20]
    bccc:	e5dc      	b.n	b888 <_svfiprintf_r+0x6e0>
    bcce:	46c0      	nop			; (mov r8, r8)
    bcd0:	0000e7d4 	.word	0x0000e7d4
    bcd4:	0000edf8 	.word	0x0000edf8

0000bcd8 <__sprint_r>:
    bcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcda:	4657      	mov	r7, sl
    bcdc:	464e      	mov	r6, r9
    bcde:	4645      	mov	r5, r8
    bce0:	b4e0      	push	{r5, r6, r7}
    bce2:	4680      	mov	r8, r0
    bce4:	6890      	ldr	r0, [r2, #8]
    bce6:	1c0e      	adds	r6, r1, #0
    bce8:	4691      	mov	r9, r2
    bcea:	2800      	cmp	r0, #0
    bcec:	d02d      	beq.n	bd4a <__sprint_r+0x72>
    bcee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    bcf0:	049a      	lsls	r2, r3, #18
    bcf2:	d52c      	bpl.n	bd4e <__sprint_r+0x76>
    bcf4:	464b      	mov	r3, r9
    bcf6:	681b      	ldr	r3, [r3, #0]
    bcf8:	469a      	mov	sl, r3
    bcfa:	4652      	mov	r2, sl
    bcfc:	6857      	ldr	r7, [r2, #4]
    bcfe:	08bf      	lsrs	r7, r7, #2
    bd00:	6815      	ldr	r5, [r2, #0]
    bd02:	2f00      	cmp	r7, #0
    bd04:	dd18      	ble.n	bd38 <__sprint_r+0x60>
    bd06:	2400      	movs	r4, #0
    bd08:	e002      	b.n	bd10 <__sprint_r+0x38>
    bd0a:	3401      	adds	r4, #1
    bd0c:	42a7      	cmp	r7, r4
    bd0e:	dd11      	ble.n	bd34 <__sprint_r+0x5c>
    bd10:	cd02      	ldmia	r5!, {r1}
    bd12:	4640      	mov	r0, r8
    bd14:	1c32      	adds	r2, r6, #0
    bd16:	f000 feab 	bl	ca70 <_fputwc_r>
    bd1a:	1c43      	adds	r3, r0, #1
    bd1c:	d1f5      	bne.n	bd0a <__sprint_r+0x32>
    bd1e:	2300      	movs	r3, #0
    bd20:	464a      	mov	r2, r9
    bd22:	6093      	str	r3, [r2, #8]
    bd24:	6053      	str	r3, [r2, #4]
    bd26:	bc1c      	pop	{r2, r3, r4}
    bd28:	4690      	mov	r8, r2
    bd2a:	4699      	mov	r9, r3
    bd2c:	46a2      	mov	sl, r4
    bd2e:	bcf0      	pop	{r4, r5, r6, r7}
    bd30:	bc02      	pop	{r1}
    bd32:	4708      	bx	r1
    bd34:	464a      	mov	r2, r9
    bd36:	6890      	ldr	r0, [r2, #8]
    bd38:	00bf      	lsls	r7, r7, #2
    bd3a:	1bc0      	subs	r0, r0, r7
    bd3c:	464b      	mov	r3, r9
    bd3e:	6098      	str	r0, [r3, #8]
    bd40:	2800      	cmp	r0, #0
    bd42:	d0ec      	beq.n	bd1e <__sprint_r+0x46>
    bd44:	2208      	movs	r2, #8
    bd46:	4492      	add	sl, r2
    bd48:	e7d7      	b.n	bcfa <__sprint_r+0x22>
    bd4a:	6050      	str	r0, [r2, #4]
    bd4c:	e7eb      	b.n	bd26 <__sprint_r+0x4e>
    bd4e:	4640      	mov	r0, r8
    bd50:	464a      	mov	r2, r9
    bd52:	f7fd fee9 	bl	9b28 <__sfvwrite_r>
    bd56:	e7e2      	b.n	bd1e <__sprint_r+0x46>

0000bd58 <_vfiprintf_r>:
    bd58:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd5a:	465f      	mov	r7, fp
    bd5c:	4656      	mov	r6, sl
    bd5e:	464d      	mov	r5, r9
    bd60:	4644      	mov	r4, r8
    bd62:	b4f0      	push	{r4, r5, r6, r7}
    bd64:	4cd1      	ldr	r4, [pc, #836]	; (c0ac <_vfiprintf_r+0x354>)
    bd66:	44a5      	add	sp, r4
    bd68:	9001      	str	r0, [sp, #4]
    bd6a:	468b      	mov	fp, r1
    bd6c:	1c15      	adds	r5, r2, #0
    bd6e:	9307      	str	r3, [sp, #28]
    bd70:	2800      	cmp	r0, #0
    bd72:	d004      	beq.n	bd7e <_vfiprintf_r+0x26>
    bd74:	6b83      	ldr	r3, [r0, #56]	; 0x38
    bd76:	2b00      	cmp	r3, #0
    bd78:	d101      	bne.n	bd7e <_vfiprintf_r+0x26>
    bd7a:	f000 fc91 	bl	c6a0 <_vfiprintf_r+0x948>
    bd7e:	4658      	mov	r0, fp
    bd80:	8982      	ldrh	r2, [r0, #12]
    bd82:	2180      	movs	r1, #128	; 0x80
    bd84:	0189      	lsls	r1, r1, #6
    bd86:	1c13      	adds	r3, r2, #0
    bd88:	420a      	tst	r2, r1
    bd8a:	d107      	bne.n	bd9c <_vfiprintf_r+0x44>
    bd8c:	430a      	orrs	r2, r1
    bd8e:	4659      	mov	r1, fp
    bd90:	818a      	strh	r2, [r1, #12]
    bd92:	4bc7      	ldr	r3, [pc, #796]	; (c0b0 <_vfiprintf_r+0x358>)
    bd94:	6e49      	ldr	r1, [r1, #100]	; 0x64
    bd96:	400b      	ands	r3, r1
    bd98:	6643      	str	r3, [r0, #100]	; 0x64
    bd9a:	1c13      	adds	r3, r2, #0
    bd9c:	0719      	lsls	r1, r3, #28
    bd9e:	d401      	bmi.n	bda4 <_vfiprintf_r+0x4c>
    bda0:	f000 fdf8 	bl	c994 <_vfiprintf_r+0xc3c>
    bda4:	4658      	mov	r0, fp
    bda6:	6901      	ldr	r1, [r0, #16]
    bda8:	2900      	cmp	r1, #0
    bdaa:	d101      	bne.n	bdb0 <_vfiprintf_r+0x58>
    bdac:	f000 fdf2 	bl	c994 <_vfiprintf_r+0xc3c>
    bdb0:	211a      	movs	r1, #26
    bdb2:	400b      	ands	r3, r1
    bdb4:	2b0a      	cmp	r3, #10
    bdb6:	d101      	bne.n	bdbc <_vfiprintf_r+0x64>
    bdb8:	f000 fc35 	bl	c626 <_vfiprintf_r+0x8ce>
    bdbc:	2194      	movs	r1, #148	; 0x94
    bdbe:	24a1      	movs	r4, #161	; 0xa1
    bdc0:	00c9      	lsls	r1, r1, #3
    bdc2:	00e4      	lsls	r4, r4, #3
    bdc4:	2300      	movs	r3, #0
    bdc6:	446c      	add	r4, sp
    bdc8:	4469      	add	r1, sp
    bdca:	46aa      	mov	sl, r5
    bdcc:	6021      	str	r1, [r4, #0]
    bdce:	60a3      	str	r3, [r4, #8]
    bdd0:	6063      	str	r3, [r4, #4]
    bdd2:	930c      	str	r3, [sp, #48]	; 0x30
    bdd4:	9305      	str	r3, [sp, #20]
    bdd6:	1c0d      	adds	r5, r1, #0
    bdd8:	4657      	mov	r7, sl
    bdda:	783b      	ldrb	r3, [r7, #0]
    bddc:	2b00      	cmp	r3, #0
    bdde:	d100      	bne.n	bde2 <_vfiprintf_r+0x8a>
    bde0:	e352      	b.n	c488 <_vfiprintf_r+0x730>
    bde2:	2b25      	cmp	r3, #37	; 0x25
    bde4:	d100      	bne.n	bde8 <_vfiprintf_r+0x90>
    bde6:	e34f      	b.n	c488 <_vfiprintf_r+0x730>
    bde8:	1c3e      	adds	r6, r7, #0
    bdea:	e001      	b.n	bdf0 <_vfiprintf_r+0x98>
    bdec:	2b00      	cmp	r3, #0
    bdee:	d003      	beq.n	bdf8 <_vfiprintf_r+0xa0>
    bdf0:	3601      	adds	r6, #1
    bdf2:	7833      	ldrb	r3, [r6, #0]
    bdf4:	2b25      	cmp	r3, #37	; 0x25
    bdf6:	d1f9      	bne.n	bdec <_vfiprintf_r+0x94>
    bdf8:	1bf2      	subs	r2, r6, r7
    bdfa:	4690      	mov	r8, r2
    bdfc:	2000      	movs	r0, #0
    bdfe:	4580      	cmp	r8, r0
    be00:	d010      	beq.n	be24 <_vfiprintf_r+0xcc>
    be02:	68a3      	ldr	r3, [r4, #8]
    be04:	4443      	add	r3, r8
    be06:	602f      	str	r7, [r5, #0]
    be08:	606a      	str	r2, [r5, #4]
    be0a:	60a3      	str	r3, [r4, #8]
    be0c:	6863      	ldr	r3, [r4, #4]
    be0e:	3301      	adds	r3, #1
    be10:	6063      	str	r3, [r4, #4]
    be12:	3508      	adds	r5, #8
    be14:	2b07      	cmp	r3, #7
    be16:	dd00      	ble.n	be1a <_vfiprintf_r+0xc2>
    be18:	e3cc      	b.n	c5b4 <_vfiprintf_r+0x85c>
    be1a:	9905      	ldr	r1, [sp, #20]
    be1c:	1c0a      	adds	r2, r1, #0
    be1e:	4442      	add	r2, r8
    be20:	9205      	str	r2, [sp, #20]
    be22:	7833      	ldrb	r3, [r6, #0]
    be24:	2b00      	cmp	r3, #0
    be26:	d100      	bne.n	be2a <_vfiprintf_r+0xd2>
    be28:	e344      	b.n	c4b4 <_vfiprintf_r+0x75c>
    be2a:	4ba2      	ldr	r3, [pc, #648]	; (c0b4 <_vfiprintf_r+0x35c>)
    be2c:	2000      	movs	r0, #0
    be2e:	446b      	add	r3, sp
    be30:	7018      	strb	r0, [r3, #0]
    be32:	2100      	movs	r1, #0
    be34:	2240      	movs	r2, #64	; 0x40
    be36:	7873      	ldrb	r3, [r6, #1]
    be38:	1c77      	adds	r7, r6, #1
    be3a:	9104      	str	r1, [sp, #16]
    be3c:	2601      	movs	r6, #1
    be3e:	9100      	str	r1, [sp, #0]
    be40:	4690      	mov	r8, r2
    be42:	2080      	movs	r0, #128	; 0x80
    be44:	3a15      	subs	r2, #21
    be46:	499c      	ldr	r1, [pc, #624]	; (c0b8 <_vfiprintf_r+0x360>)
    be48:	4276      	negs	r6, r6
    be4a:	4684      	mov	ip, r0
    be4c:	4692      	mov	sl, r2
    be4e:	3701      	adds	r7, #1
    be50:	1c1a      	adds	r2, r3, #0
    be52:	3a20      	subs	r2, #32
    be54:	2a58      	cmp	r2, #88	; 0x58
    be56:	d96b      	bls.n	bf30 <_vfiprintf_r+0x1d8>
    be58:	2b00      	cmp	r3, #0
    be5a:	d100      	bne.n	be5e <_vfiprintf_r+0x106>
    be5c:	e32a      	b.n	c4b4 <_vfiprintf_r+0x75c>
    be5e:	229c      	movs	r2, #156	; 0x9c
    be60:	00d2      	lsls	r2, r2, #3
    be62:	446a      	add	r2, sp
    be64:	7013      	strb	r3, [r2, #0]
    be66:	4b93      	ldr	r3, [pc, #588]	; (c0b4 <_vfiprintf_r+0x35c>)
    be68:	2101      	movs	r1, #1
    be6a:	2000      	movs	r0, #0
    be6c:	446b      	add	r3, sp
    be6e:	7018      	strb	r0, [r3, #0]
    be70:	9102      	str	r1, [sp, #8]
    be72:	9103      	str	r1, [sp, #12]
    be74:	920b      	str	r2, [sp, #44]	; 0x2c
    be76:	2100      	movs	r1, #0
    be78:	9106      	str	r1, [sp, #24]
    be7a:	9900      	ldr	r1, [sp, #0]
    be7c:	2302      	movs	r3, #2
    be7e:	4019      	ands	r1, r3
    be80:	4689      	mov	r9, r1
    be82:	d002      	beq.n	be8a <_vfiprintf_r+0x132>
    be84:	9a02      	ldr	r2, [sp, #8]
    be86:	18d2      	adds	r2, r2, r3
    be88:	9202      	str	r2, [sp, #8]
    be8a:	9800      	ldr	r0, [sp, #0]
    be8c:	2384      	movs	r3, #132	; 0x84
    be8e:	4018      	ands	r0, r3
    be90:	900d      	str	r0, [sp, #52]	; 0x34
    be92:	d000      	beq.n	be96 <_vfiprintf_r+0x13e>
    be94:	e213      	b.n	c2be <_vfiprintf_r+0x566>
    be96:	9904      	ldr	r1, [sp, #16]
    be98:	9a02      	ldr	r2, [sp, #8]
    be9a:	1a8e      	subs	r6, r1, r2
    be9c:	2e00      	cmp	r6, #0
    be9e:	dc00      	bgt.n	bea2 <_vfiprintf_r+0x14a>
    bea0:	e20d      	b.n	c2be <_vfiprintf_r+0x566>
    bea2:	2e10      	cmp	r6, #16
    bea4:	dc01      	bgt.n	beaa <_vfiprintf_r+0x152>
    bea6:	f000 fd61 	bl	c96c <_vfiprintf_r+0xc14>
    beaa:	4b84      	ldr	r3, [pc, #528]	; (c0bc <_vfiprintf_r+0x364>)
    beac:	469a      	mov	sl, r3
    beae:	4652      	mov	r2, sl
    beb0:	2010      	movs	r0, #16
    beb2:	1c2b      	adds	r3, r5, #0
    beb4:	46ba      	mov	sl, r7
    beb6:	4680      	mov	r8, r0
    beb8:	465d      	mov	r5, fp
    beba:	1c17      	adds	r7, r2, #0
    bebc:	e005      	b.n	beca <_vfiprintf_r+0x172>
    bebe:	3308      	adds	r3, #8
    bec0:	1c1a      	adds	r2, r3, #0
    bec2:	3e10      	subs	r6, #16
    bec4:	3208      	adds	r2, #8
    bec6:	2e10      	cmp	r6, #16
    bec8:	dd1c      	ble.n	bf04 <_vfiprintf_r+0x1ac>
    beca:	4642      	mov	r2, r8
    becc:	605a      	str	r2, [r3, #4]
    bece:	68a2      	ldr	r2, [r4, #8]
    bed0:	3210      	adds	r2, #16
    bed2:	601f      	str	r7, [r3, #0]
    bed4:	60a2      	str	r2, [r4, #8]
    bed6:	6862      	ldr	r2, [r4, #4]
    bed8:	3201      	adds	r2, #1
    beda:	6062      	str	r2, [r4, #4]
    bedc:	2a07      	cmp	r2, #7
    bede:	ddee      	ble.n	bebe <_vfiprintf_r+0x166>
    bee0:	9801      	ldr	r0, [sp, #4]
    bee2:	1c29      	adds	r1, r5, #0
    bee4:	1c22      	adds	r2, r4, #0
    bee6:	f7ff fef7 	bl	bcd8 <__sprint_r>
    beea:	2800      	cmp	r0, #0
    beec:	d001      	beq.n	bef2 <_vfiprintf_r+0x19a>
    beee:	f000 fcd8 	bl	c8a2 <_vfiprintf_r+0xb4a>
    bef2:	2295      	movs	r2, #149	; 0x95
    bef4:	2394      	movs	r3, #148	; 0x94
    bef6:	00d2      	lsls	r2, r2, #3
    bef8:	00db      	lsls	r3, r3, #3
    befa:	3e10      	subs	r6, #16
    befc:	446a      	add	r2, sp
    befe:	446b      	add	r3, sp
    bf00:	2e10      	cmp	r6, #16
    bf02:	dce2      	bgt.n	beca <_vfiprintf_r+0x172>
    bf04:	46ab      	mov	fp, r5
    bf06:	1c1d      	adds	r5, r3, #0
    bf08:	1c3b      	adds	r3, r7, #0
    bf0a:	4657      	mov	r7, sl
    bf0c:	469a      	mov	sl, r3
    bf0e:	4653      	mov	r3, sl
    bf10:	602b      	str	r3, [r5, #0]
    bf12:	68a3      	ldr	r3, [r4, #8]
    bf14:	18f3      	adds	r3, r6, r3
    bf16:	606e      	str	r6, [r5, #4]
    bf18:	60a3      	str	r3, [r4, #8]
    bf1a:	6863      	ldr	r3, [r4, #4]
    bf1c:	3301      	adds	r3, #1
    bf1e:	6063      	str	r3, [r4, #4]
    bf20:	2b07      	cmp	r3, #7
    bf22:	dd01      	ble.n	bf28 <_vfiprintf_r+0x1d0>
    bf24:	f000 fc46 	bl	c7b4 <_vfiprintf_r+0xa5c>
    bf28:	1c13      	adds	r3, r2, #0
    bf2a:	3308      	adds	r3, #8
    bf2c:	1c15      	adds	r5, r2, #0
    bf2e:	e1c8      	b.n	c2c2 <_vfiprintf_r+0x56a>
    bf30:	0092      	lsls	r2, r2, #2
    bf32:	588a      	ldr	r2, [r1, r2]
    bf34:	4697      	mov	pc, r2
    bf36:	9800      	ldr	r0, [sp, #0]
    bf38:	2310      	movs	r3, #16
    bf3a:	4318      	orrs	r0, r3
    bf3c:	9000      	str	r0, [sp, #0]
    bf3e:	9900      	ldr	r1, [sp, #0]
    bf40:	2220      	movs	r2, #32
    bf42:	400a      	ands	r2, r1
    bf44:	d101      	bne.n	bf4a <_vfiprintf_r+0x1f2>
    bf46:	f000 fc0a 	bl	c75e <_vfiprintf_r+0xa06>
    bf4a:	9b07      	ldr	r3, [sp, #28]
    bf4c:	2207      	movs	r2, #7
    bf4e:	3307      	adds	r3, #7
    bf50:	4393      	bics	r3, r2
    bf52:	6818      	ldr	r0, [r3, #0]
    bf54:	6859      	ldr	r1, [r3, #4]
    bf56:	3201      	adds	r2, #1
    bf58:	18d2      	adds	r2, r2, r3
    bf5a:	9008      	str	r0, [sp, #32]
    bf5c:	9109      	str	r1, [sp, #36]	; 0x24
    bf5e:	9207      	str	r2, [sp, #28]
    bf60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bf62:	1c01      	adds	r1, r0, #0
    bf64:	4311      	orrs	r1, r2
    bf66:	1e4b      	subs	r3, r1, #1
    bf68:	4199      	sbcs	r1, r3
    bf6a:	2301      	movs	r3, #1
    bf6c:	4a51      	ldr	r2, [pc, #324]	; (c0b4 <_vfiprintf_r+0x35c>)
    bf6e:	2000      	movs	r0, #0
    bf70:	446a      	add	r2, sp
    bf72:	7010      	strb	r0, [r2, #0]
    bf74:	2e00      	cmp	r6, #0
    bf76:	db03      	blt.n	bf80 <_vfiprintf_r+0x228>
    bf78:	9800      	ldr	r0, [sp, #0]
    bf7a:	2280      	movs	r2, #128	; 0x80
    bf7c:	4390      	bics	r0, r2
    bf7e:	9000      	str	r0, [sp, #0]
    bf80:	2e00      	cmp	r6, #0
    bf82:	d102      	bne.n	bf8a <_vfiprintf_r+0x232>
    bf84:	2900      	cmp	r1, #0
    bf86:	d100      	bne.n	bf8a <_vfiprintf_r+0x232>
    bf88:	e281      	b.n	c48e <_vfiprintf_r+0x736>
    bf8a:	2b01      	cmp	r3, #1
    bf8c:	d100      	bne.n	bf90 <_vfiprintf_r+0x238>
    bf8e:	e3ad      	b.n	c6ec <_vfiprintf_r+0x994>
    bf90:	2b02      	cmp	r3, #2
    bf92:	d100      	bne.n	bf96 <_vfiprintf_r+0x23e>
    bf94:	e38b      	b.n	c6ae <_vfiprintf_r+0x956>
    bf96:	2107      	movs	r1, #7
    bf98:	940b      	str	r4, [sp, #44]	; 0x2c
    bf9a:	9702      	str	r7, [sp, #8]
    bf9c:	9a08      	ldr	r2, [sp, #32]
    bf9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bfa0:	4688      	mov	r8, r1
    bfa2:	46ac      	mov	ip, r5
    bfa4:	1c21      	adds	r1, r4, #0
    bfa6:	0758      	lsls	r0, r3, #29
    bfa8:	4682      	mov	sl, r0
    bfaa:	4645      	mov	r5, r8
    bfac:	08d0      	lsrs	r0, r2, #3
    bfae:	4657      	mov	r7, sl
    bfb0:	4307      	orrs	r7, r0
    bfb2:	4015      	ands	r5, r2
    bfb4:	08d8      	lsrs	r0, r3, #3
    bfb6:	3901      	subs	r1, #1
    bfb8:	3530      	adds	r5, #48	; 0x30
    bfba:	1c03      	adds	r3, r0, #0
    bfbc:	1c38      	adds	r0, r7, #0
    bfbe:	700d      	strb	r5, [r1, #0]
    bfc0:	1c3a      	adds	r2, r7, #0
    bfc2:	4318      	orrs	r0, r3
    bfc4:	d1ef      	bne.n	bfa6 <_vfiprintf_r+0x24e>
    bfc6:	910b      	str	r1, [sp, #44]	; 0x2c
    bfc8:	9900      	ldr	r1, [sp, #0]
    bfca:	9208      	str	r2, [sp, #32]
    bfcc:	9309      	str	r3, [sp, #36]	; 0x24
    bfce:	1c2b      	adds	r3, r5, #0
    bfd0:	9f02      	ldr	r7, [sp, #8]
    bfd2:	4665      	mov	r5, ip
    bfd4:	469c      	mov	ip, r3
    bfd6:	07c9      	lsls	r1, r1, #31
    bfd8:	d401      	bmi.n	bfde <_vfiprintf_r+0x286>
    bfda:	f000 fc05 	bl	c7e8 <_vfiprintf_r+0xa90>
    bfde:	2330      	movs	r3, #48	; 0x30
    bfe0:	459c      	cmp	ip, r3
    bfe2:	d101      	bne.n	bfe8 <_vfiprintf_r+0x290>
    bfe4:	f000 fcc8 	bl	c978 <_vfiprintf_r+0xc20>
    bfe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bfea:	3901      	subs	r1, #1
    bfec:	2330      	movs	r3, #48	; 0x30
    bfee:	1a62      	subs	r2, r4, r1
    bff0:	910b      	str	r1, [sp, #44]	; 0x2c
    bff2:	700b      	strb	r3, [r1, #0]
    bff4:	9203      	str	r2, [sp, #12]
    bff6:	9606      	str	r6, [sp, #24]
    bff8:	9803      	ldr	r0, [sp, #12]
    bffa:	9906      	ldr	r1, [sp, #24]
    bffc:	9002      	str	r0, [sp, #8]
    bffe:	4288      	cmp	r0, r1
    c000:	da00      	bge.n	c004 <_vfiprintf_r+0x2ac>
    c002:	9102      	str	r1, [sp, #8]
    c004:	4a2b      	ldr	r2, [pc, #172]	; (c0b4 <_vfiprintf_r+0x35c>)
    c006:	446a      	add	r2, sp
    c008:	7813      	ldrb	r3, [r2, #0]
    c00a:	9802      	ldr	r0, [sp, #8]
    c00c:	1e5a      	subs	r2, r3, #1
    c00e:	4193      	sbcs	r3, r2
    c010:	18c0      	adds	r0, r0, r3
    c012:	9002      	str	r0, [sp, #8]
    c014:	e731      	b.n	be7a <_vfiprintf_r+0x122>
    c016:	9a00      	ldr	r2, [sp, #0]
    c018:	2310      	movs	r3, #16
    c01a:	431a      	orrs	r2, r3
    c01c:	9200      	str	r2, [sp, #0]
    c01e:	9b00      	ldr	r3, [sp, #0]
    c020:	069b      	lsls	r3, r3, #26
    c022:	d400      	bmi.n	c026 <_vfiprintf_r+0x2ce>
    c024:	e38b      	b.n	c73e <_vfiprintf_r+0x9e6>
    c026:	9b07      	ldr	r3, [sp, #28]
    c028:	2207      	movs	r2, #7
    c02a:	3307      	adds	r3, #7
    c02c:	4393      	bics	r3, r2
    c02e:	6819      	ldr	r1, [r3, #0]
    c030:	685a      	ldr	r2, [r3, #4]
    c032:	2008      	movs	r0, #8
    c034:	18c0      	adds	r0, r0, r3
    c036:	9108      	str	r1, [sp, #32]
    c038:	9209      	str	r2, [sp, #36]	; 0x24
    c03a:	9007      	str	r0, [sp, #28]
    c03c:	9909      	ldr	r1, [sp, #36]	; 0x24
    c03e:	2900      	cmp	r1, #0
    c040:	da01      	bge.n	c046 <_vfiprintf_r+0x2ee>
    c042:	f000 fbf4 	bl	c82e <_vfiprintf_r+0xad6>
    c046:	9908      	ldr	r1, [sp, #32]
    c048:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c04a:	4311      	orrs	r1, r2
    c04c:	1e4b      	subs	r3, r1, #1
    c04e:	4199      	sbcs	r1, r3
    c050:	2301      	movs	r3, #1
    c052:	e78f      	b.n	bf74 <_vfiprintf_r+0x21c>
    c054:	9900      	ldr	r1, [sp, #0]
    c056:	2310      	movs	r3, #16
    c058:	4319      	orrs	r1, r3
    c05a:	9100      	str	r1, [sp, #0]
    c05c:	9a00      	ldr	r2, [sp, #0]
    c05e:	2320      	movs	r3, #32
    c060:	4013      	ands	r3, r2
    c062:	d100      	bne.n	c066 <_vfiprintf_r+0x30e>
    c064:	e391      	b.n	c78a <_vfiprintf_r+0xa32>
    c066:	9b07      	ldr	r3, [sp, #28]
    c068:	2207      	movs	r2, #7
    c06a:	3307      	adds	r3, #7
    c06c:	4393      	bics	r3, r2
    c06e:	6819      	ldr	r1, [r3, #0]
    c070:	685a      	ldr	r2, [r3, #4]
    c072:	9108      	str	r1, [sp, #32]
    c074:	9209      	str	r2, [sp, #36]	; 0x24
    c076:	9908      	ldr	r1, [sp, #32]
    c078:	2008      	movs	r0, #8
    c07a:	18c0      	adds	r0, r0, r3
    c07c:	4311      	orrs	r1, r2
    c07e:	1e4b      	subs	r3, r1, #1
    c080:	4199      	sbcs	r1, r3
    c082:	9007      	str	r0, [sp, #28]
    c084:	2300      	movs	r3, #0
    c086:	e771      	b.n	bf6c <_vfiprintf_r+0x214>
    c088:	9b07      	ldr	r3, [sp, #28]
    c08a:	9a07      	ldr	r2, [sp, #28]
    c08c:	681b      	ldr	r3, [r3, #0]
    c08e:	3204      	adds	r2, #4
    c090:	9304      	str	r3, [sp, #16]
    c092:	2b00      	cmp	r3, #0
    c094:	db00      	blt.n	c098 <_vfiprintf_r+0x340>
    c096:	e39c      	b.n	c7d2 <_vfiprintf_r+0xa7a>
    c098:	9804      	ldr	r0, [sp, #16]
    c09a:	4240      	negs	r0, r0
    c09c:	9004      	str	r0, [sp, #16]
    c09e:	9207      	str	r2, [sp, #28]
    c0a0:	9a00      	ldr	r2, [sp, #0]
    c0a2:	2304      	movs	r3, #4
    c0a4:	431a      	orrs	r2, r3
    c0a6:	9200      	str	r2, [sp, #0]
    c0a8:	783b      	ldrb	r3, [r7, #0]
    c0aa:	e6d0      	b.n	be4e <_vfiprintf_r+0xf6>
    c0ac:	fffffae4 	.word	0xfffffae4
    c0b0:	ffffdfff 	.word	0xffffdfff
    c0b4:	00000517 	.word	0x00000517
    c0b8:	0000e7f4 	.word	0x0000e7f4
    c0bc:	0000e958 	.word	0x0000e958
    c0c0:	9a07      	ldr	r2, [sp, #28]
    c0c2:	239c      	movs	r3, #156	; 0x9c
    c0c4:	1c11      	adds	r1, r2, #0
    c0c6:	00db      	lsls	r3, r3, #3
    c0c8:	6812      	ldr	r2, [r2, #0]
    c0ca:	446b      	add	r3, sp
    c0cc:	701a      	strb	r2, [r3, #0]
    c0ce:	4ac7      	ldr	r2, [pc, #796]	; (c3ec <_vfiprintf_r+0x694>)
    c0d0:	3104      	adds	r1, #4
    c0d2:	9107      	str	r1, [sp, #28]
    c0d4:	2000      	movs	r0, #0
    c0d6:	2101      	movs	r1, #1
    c0d8:	446a      	add	r2, sp
    c0da:	7010      	strb	r0, [r2, #0]
    c0dc:	9102      	str	r1, [sp, #8]
    c0de:	9103      	str	r1, [sp, #12]
    c0e0:	930b      	str	r3, [sp, #44]	; 0x2c
    c0e2:	e6c8      	b.n	be76 <_vfiprintf_r+0x11e>
    c0e4:	49c1      	ldr	r1, [pc, #772]	; (c3ec <_vfiprintf_r+0x694>)
    c0e6:	2200      	movs	r2, #0
    c0e8:	4469      	add	r1, sp
    c0ea:	9b07      	ldr	r3, [sp, #28]
    c0ec:	700a      	strb	r2, [r1, #0]
    c0ee:	1c18      	adds	r0, r3, #0
    c0f0:	681b      	ldr	r3, [r3, #0]
    c0f2:	3004      	adds	r0, #4
    c0f4:	9007      	str	r0, [sp, #28]
    c0f6:	930b      	str	r3, [sp, #44]	; 0x2c
    c0f8:	2b00      	cmp	r3, #0
    c0fa:	d101      	bne.n	c100 <_vfiprintf_r+0x3a8>
    c0fc:	f000 fc24 	bl	c948 <_vfiprintf_r+0xbf0>
    c100:	2e00      	cmp	r6, #0
    c102:	da01      	bge.n	c108 <_vfiprintf_r+0x3b0>
    c104:	f000 fc18 	bl	c938 <_vfiprintf_r+0xbe0>
    c108:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c10a:	2100      	movs	r1, #0
    c10c:	1c32      	adds	r2, r6, #0
    c10e:	f7fd ff71 	bl	9ff4 <memchr>
    c112:	2800      	cmp	r0, #0
    c114:	d101      	bne.n	c11a <_vfiprintf_r+0x3c2>
    c116:	f000 fc4d 	bl	c9b4 <_vfiprintf_r+0xc5c>
    c11a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c11c:	1a40      	subs	r0, r0, r1
    c11e:	9003      	str	r0, [sp, #12]
    c120:	42b0      	cmp	r0, r6
    c122:	dc00      	bgt.n	c126 <_vfiprintf_r+0x3ce>
    c124:	e3d5      	b.n	c8d2 <_vfiprintf_r+0xb7a>
    c126:	2300      	movs	r3, #0
    c128:	9603      	str	r6, [sp, #12]
    c12a:	9306      	str	r3, [sp, #24]
    c12c:	e764      	b.n	bff8 <_vfiprintf_r+0x2a0>
    c12e:	49b0      	ldr	r1, [pc, #704]	; (c3f0 <_vfiprintf_r+0x698>)
    c130:	9800      	ldr	r0, [sp, #0]
    c132:	910c      	str	r1, [sp, #48]	; 0x30
    c134:	2120      	movs	r1, #32
    c136:	4001      	ands	r1, r0
    c138:	d064      	beq.n	c204 <_vfiprintf_r+0x4ac>
    c13a:	9a07      	ldr	r2, [sp, #28]
    c13c:	2107      	movs	r1, #7
    c13e:	3207      	adds	r2, #7
    c140:	438a      	bics	r2, r1
    c142:	3101      	adds	r1, #1
    c144:	1889      	adds	r1, r1, r2
    c146:	9107      	str	r1, [sp, #28]
    c148:	6810      	ldr	r0, [r2, #0]
    c14a:	6851      	ldr	r1, [r2, #4]
    c14c:	9008      	str	r0, [sp, #32]
    c14e:	9109      	str	r1, [sp, #36]	; 0x24
    c150:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c152:	9908      	ldr	r1, [sp, #32]
    c154:	4311      	orrs	r1, r2
    c156:	1e4a      	subs	r2, r1, #1
    c158:	4191      	sbcs	r1, r2
    c15a:	2900      	cmp	r1, #0
    c15c:	d00e      	beq.n	c17c <_vfiprintf_r+0x424>
    c15e:	9800      	ldr	r0, [sp, #0]
    c160:	2201      	movs	r2, #1
    c162:	4210      	tst	r0, r2
    c164:	d00a      	beq.n	c17c <_vfiprintf_r+0x424>
    c166:	49a3      	ldr	r1, [pc, #652]	; (c3f4 <_vfiprintf_r+0x69c>)
    c168:	2030      	movs	r0, #48	; 0x30
    c16a:	4469      	add	r1, sp
    c16c:	704b      	strb	r3, [r1, #1]
    c16e:	7008      	strb	r0, [r1, #0]
    c170:	9900      	ldr	r1, [sp, #0]
    c172:	2302      	movs	r3, #2
    c174:	4319      	orrs	r1, r3
    c176:	9100      	str	r1, [sp, #0]
    c178:	1c11      	adds	r1, r2, #0
    c17a:	e6f7      	b.n	bf6c <_vfiprintf_r+0x214>
    c17c:	2302      	movs	r3, #2
    c17e:	e6f5      	b.n	bf6c <_vfiprintf_r+0x214>
    c180:	9b00      	ldr	r3, [sp, #0]
    c182:	2020      	movs	r0, #32
    c184:	4303      	orrs	r3, r0
    c186:	9300      	str	r3, [sp, #0]
    c188:	783b      	ldrb	r3, [r7, #0]
    c18a:	e660      	b.n	be4e <_vfiprintf_r+0xf6>
    c18c:	9b07      	ldr	r3, [sp, #28]
    c18e:	1c18      	adds	r0, r3, #0
    c190:	681b      	ldr	r3, [r3, #0]
    c192:	9a00      	ldr	r2, [sp, #0]
    c194:	9308      	str	r3, [sp, #32]
    c196:	2302      	movs	r3, #2
    c198:	431a      	orrs	r2, r3
    c19a:	9200      	str	r2, [sp, #0]
    c19c:	4a95      	ldr	r2, [pc, #596]	; (c3f4 <_vfiprintf_r+0x69c>)
    c19e:	2100      	movs	r1, #0
    c1a0:	446a      	add	r2, sp
    c1a2:	9109      	str	r1, [sp, #36]	; 0x24
    c1a4:	3130      	adds	r1, #48	; 0x30
    c1a6:	3004      	adds	r0, #4
    c1a8:	7011      	strb	r1, [r2, #0]
    c1aa:	3148      	adds	r1, #72	; 0x48
    c1ac:	7051      	strb	r1, [r2, #1]
    c1ae:	9007      	str	r0, [sp, #28]
    c1b0:	9908      	ldr	r1, [sp, #32]
    c1b2:	488f      	ldr	r0, [pc, #572]	; (c3f0 <_vfiprintf_r+0x698>)
    c1b4:	1e4a      	subs	r2, r1, #1
    c1b6:	4191      	sbcs	r1, r2
    c1b8:	900c      	str	r0, [sp, #48]	; 0x30
    c1ba:	e6d7      	b.n	bf6c <_vfiprintf_r+0x214>
    c1bc:	9b00      	ldr	r3, [sp, #0]
    c1be:	069b      	lsls	r3, r3, #26
    c1c0:	d500      	bpl.n	c1c4 <_vfiprintf_r+0x46c>
    c1c2:	e359      	b.n	c878 <_vfiprintf_r+0xb20>
    c1c4:	9a00      	ldr	r2, [sp, #0]
    c1c6:	06d2      	lsls	r2, r2, #27
    c1c8:	d400      	bmi.n	c1cc <_vfiprintf_r+0x474>
    c1ca:	e393      	b.n	c8f4 <_vfiprintf_r+0xb9c>
    c1cc:	9807      	ldr	r0, [sp, #28]
    c1ce:	9905      	ldr	r1, [sp, #20]
    c1d0:	6803      	ldr	r3, [r0, #0]
    c1d2:	3004      	adds	r0, #4
    c1d4:	6019      	str	r1, [r3, #0]
    c1d6:	9007      	str	r0, [sp, #28]
    c1d8:	e5ff      	b.n	bdda <_vfiprintf_r+0x82>
    c1da:	783b      	ldrb	r3, [r7, #0]
    c1dc:	2b6c      	cmp	r3, #108	; 0x6c
    c1de:	d100      	bne.n	c1e2 <_vfiprintf_r+0x48a>
    c1e0:	e357      	b.n	c892 <_vfiprintf_r+0xb3a>
    c1e2:	9800      	ldr	r0, [sp, #0]
    c1e4:	2210      	movs	r2, #16
    c1e6:	4310      	orrs	r0, r2
    c1e8:	9000      	str	r0, [sp, #0]
    c1ea:	e630      	b.n	be4e <_vfiprintf_r+0xf6>
    c1ec:	9b00      	ldr	r3, [sp, #0]
    c1ee:	4640      	mov	r0, r8
    c1f0:	4303      	orrs	r3, r0
    c1f2:	9300      	str	r3, [sp, #0]
    c1f4:	783b      	ldrb	r3, [r7, #0]
    c1f6:	e62a      	b.n	be4e <_vfiprintf_r+0xf6>
    c1f8:	4a7f      	ldr	r2, [pc, #508]	; (c3f8 <_vfiprintf_r+0x6a0>)
    c1fa:	9800      	ldr	r0, [sp, #0]
    c1fc:	2120      	movs	r1, #32
    c1fe:	920c      	str	r2, [sp, #48]	; 0x30
    c200:	4001      	ands	r1, r0
    c202:	d19a      	bne.n	c13a <_vfiprintf_r+0x3e2>
    c204:	9800      	ldr	r0, [sp, #0]
    c206:	2210      	movs	r2, #16
    c208:	4002      	ands	r2, r0
    c20a:	d000      	beq.n	c20e <_vfiprintf_r+0x4b6>
    c20c:	e31c      	b.n	c848 <_vfiprintf_r+0xaf0>
    c20e:	9800      	ldr	r0, [sp, #0]
    c210:	2140      	movs	r1, #64	; 0x40
    c212:	4001      	ands	r1, r0
    c214:	d100      	bne.n	c218 <_vfiprintf_r+0x4c0>
    c216:	e37a      	b.n	c90e <_vfiprintf_r+0xbb6>
    c218:	9907      	ldr	r1, [sp, #28]
    c21a:	8809      	ldrh	r1, [r1, #0]
    c21c:	9209      	str	r2, [sp, #36]	; 0x24
    c21e:	9a07      	ldr	r2, [sp, #28]
    c220:	3204      	adds	r2, #4
    c222:	9108      	str	r1, [sp, #32]
    c224:	9207      	str	r2, [sp, #28]
    c226:	e793      	b.n	c150 <_vfiprintf_r+0x3f8>
    c228:	4b70      	ldr	r3, [pc, #448]	; (c3ec <_vfiprintf_r+0x694>)
    c22a:	4650      	mov	r0, sl
    c22c:	446b      	add	r3, sp
    c22e:	7018      	strb	r0, [r3, #0]
    c230:	783b      	ldrb	r3, [r7, #0]
    c232:	e60c      	b.n	be4e <_vfiprintf_r+0xf6>
    c234:	9800      	ldr	r0, [sp, #0]
    c236:	2301      	movs	r3, #1
    c238:	4318      	orrs	r0, r3
    c23a:	9000      	str	r0, [sp, #0]
    c23c:	783b      	ldrb	r3, [r7, #0]
    c23e:	e606      	b.n	be4e <_vfiprintf_r+0xf6>
    c240:	486a      	ldr	r0, [pc, #424]	; (c3ec <_vfiprintf_r+0x694>)
    c242:	4468      	add	r0, sp
    c244:	7803      	ldrb	r3, [r0, #0]
    c246:	2b00      	cmp	r3, #0
    c248:	d000      	beq.n	c24c <_vfiprintf_r+0x4f4>
    c24a:	e31f      	b.n	c88c <_vfiprintf_r+0xb34>
    c24c:	2220      	movs	r2, #32
    c24e:	7002      	strb	r2, [r0, #0]
    c250:	783b      	ldrb	r3, [r7, #0]
    c252:	e5fc      	b.n	be4e <_vfiprintf_r+0xf6>
    c254:	1c1a      	adds	r2, r3, #0
    c256:	2000      	movs	r0, #0
    c258:	3a30      	subs	r2, #48	; 0x30
    c25a:	1c03      	adds	r3, r0, #0
    c25c:	46a9      	mov	r9, r5
    c25e:	009d      	lsls	r5, r3, #2
    c260:	18eb      	adds	r3, r5, r3
    c262:	783d      	ldrb	r5, [r7, #0]
    c264:	005b      	lsls	r3, r3, #1
    c266:	18d3      	adds	r3, r2, r3
    c268:	1c2a      	adds	r2, r5, #0
    c26a:	3a30      	subs	r2, #48	; 0x30
    c26c:	3701      	adds	r7, #1
    c26e:	2a09      	cmp	r2, #9
    c270:	d9f5      	bls.n	c25e <_vfiprintf_r+0x506>
    c272:	1c18      	adds	r0, r3, #0
    c274:	9004      	str	r0, [sp, #16]
    c276:	1c2b      	adds	r3, r5, #0
    c278:	464d      	mov	r5, r9
    c27a:	e5e9      	b.n	be50 <_vfiprintf_r+0xf8>
    c27c:	9800      	ldr	r0, [sp, #0]
    c27e:	4662      	mov	r2, ip
    c280:	4310      	orrs	r0, r2
    c282:	9000      	str	r0, [sp, #0]
    c284:	783b      	ldrb	r3, [r7, #0]
    c286:	e5e2      	b.n	be4e <_vfiprintf_r+0xf6>
    c288:	783b      	ldrb	r3, [r7, #0]
    c28a:	3701      	adds	r7, #1
    c28c:	2b2a      	cmp	r3, #42	; 0x2a
    c28e:	d100      	bne.n	c292 <_vfiprintf_r+0x53a>
    c290:	e398      	b.n	c9c4 <_vfiprintf_r+0xc6c>
    c292:	1c1a      	adds	r2, r3, #0
    c294:	3a30      	subs	r2, #48	; 0x30
    c296:	2600      	movs	r6, #0
    c298:	2a09      	cmp	r2, #9
    c29a:	d900      	bls.n	c29e <_vfiprintf_r+0x546>
    c29c:	e5d8      	b.n	be50 <_vfiprintf_r+0xf8>
    c29e:	00b3      	lsls	r3, r6, #2
    c2a0:	199e      	adds	r6, r3, r6
    c2a2:	783b      	ldrb	r3, [r7, #0]
    c2a4:	0076      	lsls	r6, r6, #1
    c2a6:	18b6      	adds	r6, r6, r2
    c2a8:	1c1a      	adds	r2, r3, #0
    c2aa:	3a30      	subs	r2, #48	; 0x30
    c2ac:	3701      	adds	r7, #1
    c2ae:	2a09      	cmp	r2, #9
    c2b0:	d9f5      	bls.n	c29e <_vfiprintf_r+0x546>
    c2b2:	2e00      	cmp	r6, #0
    c2b4:	db00      	blt.n	c2b8 <_vfiprintf_r+0x560>
    c2b6:	e5cb      	b.n	be50 <_vfiprintf_r+0xf8>
    c2b8:	2601      	movs	r6, #1
    c2ba:	4276      	negs	r6, r6
    c2bc:	e5c8      	b.n	be50 <_vfiprintf_r+0xf8>
    c2be:	1c2b      	adds	r3, r5, #0
    c2c0:	3308      	adds	r3, #8
    c2c2:	484a      	ldr	r0, [pc, #296]	; (c3ec <_vfiprintf_r+0x694>)
    c2c4:	4468      	add	r0, sp
    c2c6:	7802      	ldrb	r2, [r0, #0]
    c2c8:	2a00      	cmp	r2, #0
    c2ca:	d00d      	beq.n	c2e8 <_vfiprintf_r+0x590>
    c2cc:	2201      	movs	r2, #1
    c2ce:	606a      	str	r2, [r5, #4]
    c2d0:	68a2      	ldr	r2, [r4, #8]
    c2d2:	3201      	adds	r2, #1
    c2d4:	6028      	str	r0, [r5, #0]
    c2d6:	60a2      	str	r2, [r4, #8]
    c2d8:	6862      	ldr	r2, [r4, #4]
    c2da:	3201      	adds	r2, #1
    c2dc:	6062      	str	r2, [r4, #4]
    c2de:	2a07      	cmp	r2, #7
    c2e0:	dd00      	ble.n	c2e4 <_vfiprintf_r+0x58c>
    c2e2:	e191      	b.n	c608 <_vfiprintf_r+0x8b0>
    c2e4:	1c1d      	adds	r5, r3, #0
    c2e6:	3308      	adds	r3, #8
    c2e8:	2100      	movs	r1, #0
    c2ea:	4589      	cmp	r9, r1
    c2ec:	d00f      	beq.n	c30e <_vfiprintf_r+0x5b6>
    c2ee:	4a41      	ldr	r2, [pc, #260]	; (c3f4 <_vfiprintf_r+0x69c>)
    c2f0:	446a      	add	r2, sp
    c2f2:	602a      	str	r2, [r5, #0]
    c2f4:	2202      	movs	r2, #2
    c2f6:	606a      	str	r2, [r5, #4]
    c2f8:	68a2      	ldr	r2, [r4, #8]
    c2fa:	3202      	adds	r2, #2
    c2fc:	60a2      	str	r2, [r4, #8]
    c2fe:	6862      	ldr	r2, [r4, #4]
    c300:	3201      	adds	r2, #1
    c302:	6062      	str	r2, [r4, #4]
    c304:	2a07      	cmp	r2, #7
    c306:	dd00      	ble.n	c30a <_vfiprintf_r+0x5b2>
    c308:	e16f      	b.n	c5ea <_vfiprintf_r+0x892>
    c30a:	1c1d      	adds	r5, r3, #0
    c30c:	3308      	adds	r3, #8
    c30e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c310:	2a80      	cmp	r2, #128	; 0x80
    c312:	d100      	bne.n	c316 <_vfiprintf_r+0x5be>
    c314:	e0e8      	b.n	c4e8 <_vfiprintf_r+0x790>
    c316:	9906      	ldr	r1, [sp, #24]
    c318:	9a03      	ldr	r2, [sp, #12]
    c31a:	1a8e      	subs	r6, r1, r2
    c31c:	2e00      	cmp	r6, #0
    c31e:	dd46      	ble.n	c3ae <_vfiprintf_r+0x656>
    c320:	2e10      	cmp	r6, #16
    c322:	dc00      	bgt.n	c326 <_vfiprintf_r+0x5ce>
    c324:	e2d1      	b.n	c8ca <_vfiprintf_r+0xb72>
    c326:	4b35      	ldr	r3, [pc, #212]	; (c3fc <_vfiprintf_r+0x6a4>)
    c328:	2010      	movs	r0, #16
    c32a:	469a      	mov	sl, r3
    c32c:	465a      	mov	r2, fp
    c32e:	4680      	mov	r8, r0
    c330:	1c2b      	adds	r3, r5, #0
    c332:	46bb      	mov	fp, r7
    c334:	44d0      	add	r8, sl
    c336:	4681      	mov	r9, r0
    c338:	9d01      	ldr	r5, [sp, #4]
    c33a:	1c17      	adds	r7, r2, #0
    c33c:	e005      	b.n	c34a <_vfiprintf_r+0x5f2>
    c33e:	3308      	adds	r3, #8
    c340:	1c1a      	adds	r2, r3, #0
    c342:	3e10      	subs	r6, #16
    c344:	3208      	adds	r2, #8
    c346:	2e10      	cmp	r6, #16
    c348:	dd1c      	ble.n	c384 <_vfiprintf_r+0x62c>
    c34a:	464a      	mov	r2, r9
    c34c:	605a      	str	r2, [r3, #4]
    c34e:	68a2      	ldr	r2, [r4, #8]
    c350:	4641      	mov	r1, r8
    c352:	3210      	adds	r2, #16
    c354:	6019      	str	r1, [r3, #0]
    c356:	60a2      	str	r2, [r4, #8]
    c358:	6862      	ldr	r2, [r4, #4]
    c35a:	3201      	adds	r2, #1
    c35c:	6062      	str	r2, [r4, #4]
    c35e:	2a07      	cmp	r2, #7
    c360:	dded      	ble.n	c33e <_vfiprintf_r+0x5e6>
    c362:	1c28      	adds	r0, r5, #0
    c364:	1c39      	adds	r1, r7, #0
    c366:	1c22      	adds	r2, r4, #0
    c368:	f7ff fcb6 	bl	bcd8 <__sprint_r>
    c36c:	2800      	cmp	r0, #0
    c36e:	d000      	beq.n	c372 <_vfiprintf_r+0x61a>
    c370:	e11e      	b.n	c5b0 <_vfiprintf_r+0x858>
    c372:	2295      	movs	r2, #149	; 0x95
    c374:	2394      	movs	r3, #148	; 0x94
    c376:	00d2      	lsls	r2, r2, #3
    c378:	00db      	lsls	r3, r3, #3
    c37a:	3e10      	subs	r6, #16
    c37c:	446a      	add	r2, sp
    c37e:	446b      	add	r3, sp
    c380:	2e10      	cmp	r6, #16
    c382:	dce2      	bgt.n	c34a <_vfiprintf_r+0x5f2>
    c384:	1c1d      	adds	r5, r3, #0
    c386:	1c3b      	adds	r3, r7, #0
    c388:	465f      	mov	r7, fp
    c38a:	469b      	mov	fp, r3
    c38c:	2010      	movs	r0, #16
    c38e:	1c03      	adds	r3, r0, #0
    c390:	4453      	add	r3, sl
    c392:	602b      	str	r3, [r5, #0]
    c394:	68a3      	ldr	r3, [r4, #8]
    c396:	606e      	str	r6, [r5, #4]
    c398:	18f6      	adds	r6, r6, r3
    c39a:	6863      	ldr	r3, [r4, #4]
    c39c:	3301      	adds	r3, #1
    c39e:	60a6      	str	r6, [r4, #8]
    c3a0:	6063      	str	r3, [r4, #4]
    c3a2:	2b07      	cmp	r3, #7
    c3a4:	dd00      	ble.n	c3a8 <_vfiprintf_r+0x650>
    c3a6:	e111      	b.n	c5cc <_vfiprintf_r+0x874>
    c3a8:	1c13      	adds	r3, r2, #0
    c3aa:	3308      	adds	r3, #8
    c3ac:	1c15      	adds	r5, r2, #0
    c3ae:	9a03      	ldr	r2, [sp, #12]
    c3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c3b2:	606a      	str	r2, [r5, #4]
    c3b4:	6029      	str	r1, [r5, #0]
    c3b6:	68a2      	ldr	r2, [r4, #8]
    c3b8:	9d03      	ldr	r5, [sp, #12]
    c3ba:	1952      	adds	r2, r2, r5
    c3bc:	60a2      	str	r2, [r4, #8]
    c3be:	6862      	ldr	r2, [r4, #4]
    c3c0:	3201      	adds	r2, #1
    c3c2:	6062      	str	r2, [r4, #4]
    c3c4:	2a07      	cmp	r2, #7
    c3c6:	dd00      	ble.n	c3ca <_vfiprintf_r+0x672>
    c3c8:	e0db      	b.n	c582 <_vfiprintf_r+0x82a>
    c3ca:	9800      	ldr	r0, [sp, #0]
    c3cc:	0740      	lsls	r0, r0, #29
    c3ce:	d546      	bpl.n	c45e <_vfiprintf_r+0x706>
    c3d0:	9904      	ldr	r1, [sp, #16]
    c3d2:	9a02      	ldr	r2, [sp, #8]
    c3d4:	1a8d      	subs	r5, r1, r2
    c3d6:	2d00      	cmp	r5, #0
    c3d8:	dd41      	ble.n	c45e <_vfiprintf_r+0x706>
    c3da:	2d10      	cmp	r5, #16
    c3dc:	dc00      	bgt.n	c3e0 <_vfiprintf_r+0x688>
    c3de:	e2d6      	b.n	c98e <_vfiprintf_r+0xc36>
    c3e0:	4906      	ldr	r1, [pc, #24]	; (c3fc <_vfiprintf_r+0x6a4>)
    c3e2:	46b8      	mov	r8, r7
    c3e4:	2610      	movs	r6, #16
    c3e6:	1c0f      	adds	r7, r1, #0
    c3e8:	e00d      	b.n	c406 <_vfiprintf_r+0x6ae>
    c3ea:	46c0      	nop			; (mov r8, r8)
    c3ec:	00000517 	.word	0x00000517
    c3f0:	0000ede4 	.word	0x0000ede4
    c3f4:	00000514 	.word	0x00000514
    c3f8:	0000edd0 	.word	0x0000edd0
    c3fc:	0000e958 	.word	0x0000e958
    c400:	3d10      	subs	r5, #16
    c402:	2d10      	cmp	r5, #16
    c404:	dd17      	ble.n	c436 <_vfiprintf_r+0x6de>
    c406:	68a2      	ldr	r2, [r4, #8]
    c408:	3210      	adds	r2, #16
    c40a:	601f      	str	r7, [r3, #0]
    c40c:	605e      	str	r6, [r3, #4]
    c40e:	60a2      	str	r2, [r4, #8]
    c410:	6862      	ldr	r2, [r4, #4]
    c412:	3201      	adds	r2, #1
    c414:	6062      	str	r2, [r4, #4]
    c416:	3308      	adds	r3, #8
    c418:	2a07      	cmp	r2, #7
    c41a:	ddf1      	ble.n	c400 <_vfiprintf_r+0x6a8>
    c41c:	9801      	ldr	r0, [sp, #4]
    c41e:	4659      	mov	r1, fp
    c420:	1c22      	adds	r2, r4, #0
    c422:	f7ff fc59 	bl	bcd8 <__sprint_r>
    c426:	2800      	cmp	r0, #0
    c428:	d14c      	bne.n	c4c4 <_vfiprintf_r+0x76c>
    c42a:	2394      	movs	r3, #148	; 0x94
    c42c:	00db      	lsls	r3, r3, #3
    c42e:	3d10      	subs	r5, #16
    c430:	446b      	add	r3, sp
    c432:	2d10      	cmp	r5, #16
    c434:	dce7      	bgt.n	c406 <_vfiprintf_r+0x6ae>
    c436:	46ba      	mov	sl, r7
    c438:	4647      	mov	r7, r8
    c43a:	4652      	mov	r2, sl
    c43c:	605d      	str	r5, [r3, #4]
    c43e:	601a      	str	r2, [r3, #0]
    c440:	68a3      	ldr	r3, [r4, #8]
    c442:	18ed      	adds	r5, r5, r3
    c444:	6863      	ldr	r3, [r4, #4]
    c446:	3301      	adds	r3, #1
    c448:	60a5      	str	r5, [r4, #8]
    c44a:	6063      	str	r3, [r4, #4]
    c44c:	2b07      	cmp	r3, #7
    c44e:	dd07      	ble.n	c460 <_vfiprintf_r+0x708>
    c450:	9801      	ldr	r0, [sp, #4]
    c452:	4659      	mov	r1, fp
    c454:	1c22      	adds	r2, r4, #0
    c456:	f7ff fc3f 	bl	bcd8 <__sprint_r>
    c45a:	2800      	cmp	r0, #0
    c45c:	d132      	bne.n	c4c4 <_vfiprintf_r+0x76c>
    c45e:	68a5      	ldr	r5, [r4, #8]
    c460:	9b02      	ldr	r3, [sp, #8]
    c462:	9804      	ldr	r0, [sp, #16]
    c464:	4283      	cmp	r3, r0
    c466:	da00      	bge.n	c46a <_vfiprintf_r+0x712>
    c468:	1c03      	adds	r3, r0, #0
    c46a:	9905      	ldr	r1, [sp, #20]
    c46c:	18c9      	adds	r1, r1, r3
    c46e:	9105      	str	r1, [sp, #20]
    c470:	2d00      	cmp	r5, #0
    c472:	d000      	beq.n	c476 <_vfiprintf_r+0x71e>
    c474:	e090      	b.n	c598 <_vfiprintf_r+0x840>
    c476:	2200      	movs	r2, #0
    c478:	6062      	str	r2, [r4, #4]
    c47a:	2594      	movs	r5, #148	; 0x94
    c47c:	783b      	ldrb	r3, [r7, #0]
    c47e:	00ed      	lsls	r5, r5, #3
    c480:	446d      	add	r5, sp
    c482:	2b00      	cmp	r3, #0
    c484:	d000      	beq.n	c488 <_vfiprintf_r+0x730>
    c486:	e4ac      	b.n	bde2 <_vfiprintf_r+0x8a>
    c488:	1c3e      	adds	r6, r7, #0
    c48a:	783b      	ldrb	r3, [r7, #0]
    c48c:	e4ca      	b.n	be24 <_vfiprintf_r+0xcc>
    c48e:	2b00      	cmp	r3, #0
    c490:	d000      	beq.n	c494 <_vfiprintf_r+0x73c>
    c492:	e08a      	b.n	c5aa <_vfiprintf_r+0x852>
    c494:	9900      	ldr	r1, [sp, #0]
    c496:	07c9      	lsls	r1, r1, #31
    c498:	d400      	bmi.n	c49c <_vfiprintf_r+0x744>
    c49a:	e105      	b.n	c6a8 <_vfiprintf_r+0x950>
    c49c:	229c      	movs	r2, #156	; 0x9c
    c49e:	00d2      	lsls	r2, r2, #3
    c4a0:	3327      	adds	r3, #39	; 0x27
    c4a2:	446a      	add	r2, sp
    c4a4:	2130      	movs	r1, #48	; 0x30
    c4a6:	54d1      	strb	r1, [r2, r3]
    c4a8:	4bcc      	ldr	r3, [pc, #816]	; (c7dc <_vfiprintf_r+0xa84>)
    c4aa:	446b      	add	r3, sp
    c4ac:	1ae2      	subs	r2, r4, r3
    c4ae:	9203      	str	r2, [sp, #12]
    c4b0:	930b      	str	r3, [sp, #44]	; 0x2c
    c4b2:	e5a0      	b.n	bff6 <_vfiprintf_r+0x29e>
    c4b4:	68a3      	ldr	r3, [r4, #8]
    c4b6:	2b00      	cmp	r3, #0
    c4b8:	d004      	beq.n	c4c4 <_vfiprintf_r+0x76c>
    c4ba:	9801      	ldr	r0, [sp, #4]
    c4bc:	4659      	mov	r1, fp
    c4be:	1c22      	adds	r2, r4, #0
    c4c0:	f7ff fc0a 	bl	bcd8 <__sprint_r>
    c4c4:	465d      	mov	r5, fp
    c4c6:	89ab      	ldrh	r3, [r5, #12]
    c4c8:	0658      	lsls	r0, r3, #25
    c4ca:	d502      	bpl.n	c4d2 <_vfiprintf_r+0x77a>
    c4cc:	2301      	movs	r3, #1
    c4ce:	425b      	negs	r3, r3
    c4d0:	9305      	str	r3, [sp, #20]
    c4d2:	4bc3      	ldr	r3, [pc, #780]	; (c7e0 <_vfiprintf_r+0xa88>)
    c4d4:	9805      	ldr	r0, [sp, #20]
    c4d6:	449d      	add	sp, r3
    c4d8:	bc3c      	pop	{r2, r3, r4, r5}
    c4da:	4690      	mov	r8, r2
    c4dc:	4699      	mov	r9, r3
    c4de:	46a2      	mov	sl, r4
    c4e0:	46ab      	mov	fp, r5
    c4e2:	bcf0      	pop	{r4, r5, r6, r7}
    c4e4:	bc02      	pop	{r1}
    c4e6:	4708      	bx	r1
    c4e8:	9804      	ldr	r0, [sp, #16]
    c4ea:	9902      	ldr	r1, [sp, #8]
    c4ec:	1a46      	subs	r6, r0, r1
    c4ee:	2e00      	cmp	r6, #0
    c4f0:	dc00      	bgt.n	c4f4 <_vfiprintf_r+0x79c>
    c4f2:	e1d8      	b.n	c8a6 <_vfiprintf_r+0xb4e>
    c4f4:	2e10      	cmp	r6, #16
    c4f6:	dc00      	bgt.n	c4fa <_vfiprintf_r+0x7a2>
    c4f8:	e258      	b.n	c9ac <_vfiprintf_r+0xc54>
    c4fa:	4aba      	ldr	r2, [pc, #744]	; (c7e4 <_vfiprintf_r+0xa8c>)
    c4fc:	2310      	movs	r3, #16
    c4fe:	4692      	mov	sl, r2
    c500:	4698      	mov	r8, r3
    c502:	465a      	mov	r2, fp
    c504:	4699      	mov	r9, r3
    c506:	46bb      	mov	fp, r7
    c508:	1c2b      	adds	r3, r5, #0
    c50a:	44d0      	add	r8, sl
    c50c:	9d01      	ldr	r5, [sp, #4]
    c50e:	1c17      	adds	r7, r2, #0
    c510:	e005      	b.n	c51e <_vfiprintf_r+0x7c6>
    c512:	3308      	adds	r3, #8
    c514:	1c1a      	adds	r2, r3, #0
    c516:	3e10      	subs	r6, #16
    c518:	3208      	adds	r2, #8
    c51a:	2e10      	cmp	r6, #16
    c51c:	dd1b      	ble.n	c556 <_vfiprintf_r+0x7fe>
    c51e:	68a2      	ldr	r2, [r4, #8]
    c520:	4640      	mov	r0, r8
    c522:	3210      	adds	r2, #16
    c524:	4649      	mov	r1, r9
    c526:	6018      	str	r0, [r3, #0]
    c528:	6059      	str	r1, [r3, #4]
    c52a:	60a2      	str	r2, [r4, #8]
    c52c:	6862      	ldr	r2, [r4, #4]
    c52e:	3201      	adds	r2, #1
    c530:	6062      	str	r2, [r4, #4]
    c532:	2a07      	cmp	r2, #7
    c534:	dded      	ble.n	c512 <_vfiprintf_r+0x7ba>
    c536:	1c28      	adds	r0, r5, #0
    c538:	1c39      	adds	r1, r7, #0
    c53a:	1c22      	adds	r2, r4, #0
    c53c:	f7ff fbcc 	bl	bcd8 <__sprint_r>
    c540:	2800      	cmp	r0, #0
    c542:	d135      	bne.n	c5b0 <_vfiprintf_r+0x858>
    c544:	2295      	movs	r2, #149	; 0x95
    c546:	2394      	movs	r3, #148	; 0x94
    c548:	00d2      	lsls	r2, r2, #3
    c54a:	00db      	lsls	r3, r3, #3
    c54c:	3e10      	subs	r6, #16
    c54e:	446a      	add	r2, sp
    c550:	446b      	add	r3, sp
    c552:	2e10      	cmp	r6, #16
    c554:	dce3      	bgt.n	c51e <_vfiprintf_r+0x7c6>
    c556:	1c1d      	adds	r5, r3, #0
    c558:	1c3b      	adds	r3, r7, #0
    c55a:	465f      	mov	r7, fp
    c55c:	469b      	mov	fp, r3
    c55e:	2010      	movs	r0, #16
    c560:	1c03      	adds	r3, r0, #0
    c562:	4453      	add	r3, sl
    c564:	602b      	str	r3, [r5, #0]
    c566:	68a3      	ldr	r3, [r4, #8]
    c568:	18f3      	adds	r3, r6, r3
    c56a:	606e      	str	r6, [r5, #4]
    c56c:	60a3      	str	r3, [r4, #8]
    c56e:	6863      	ldr	r3, [r4, #4]
    c570:	3301      	adds	r3, #1
    c572:	6063      	str	r3, [r4, #4]
    c574:	2b07      	cmp	r3, #7
    c576:	dd00      	ble.n	c57a <_vfiprintf_r+0x822>
    c578:	e198      	b.n	c8ac <_vfiprintf_r+0xb54>
    c57a:	1c13      	adds	r3, r2, #0
    c57c:	3308      	adds	r3, #8
    c57e:	1c15      	adds	r5, r2, #0
    c580:	e6c9      	b.n	c316 <_vfiprintf_r+0x5be>
    c582:	9801      	ldr	r0, [sp, #4]
    c584:	4659      	mov	r1, fp
    c586:	1c22      	adds	r2, r4, #0
    c588:	f7ff fba6 	bl	bcd8 <__sprint_r>
    c58c:	2800      	cmp	r0, #0
    c58e:	d199      	bne.n	c4c4 <_vfiprintf_r+0x76c>
    c590:	2394      	movs	r3, #148	; 0x94
    c592:	00db      	lsls	r3, r3, #3
    c594:	446b      	add	r3, sp
    c596:	e718      	b.n	c3ca <_vfiprintf_r+0x672>
    c598:	9801      	ldr	r0, [sp, #4]
    c59a:	4659      	mov	r1, fp
    c59c:	1c22      	adds	r2, r4, #0
    c59e:	f7ff fb9b 	bl	bcd8 <__sprint_r>
    c5a2:	2800      	cmp	r0, #0
    c5a4:	d100      	bne.n	c5a8 <_vfiprintf_r+0x850>
    c5a6:	e766      	b.n	c476 <_vfiprintf_r+0x71e>
    c5a8:	e78c      	b.n	c4c4 <_vfiprintf_r+0x76c>
    c5aa:	9103      	str	r1, [sp, #12]
    c5ac:	940b      	str	r4, [sp, #44]	; 0x2c
    c5ae:	e522      	b.n	bff6 <_vfiprintf_r+0x29e>
    c5b0:	46bb      	mov	fp, r7
    c5b2:	e787      	b.n	c4c4 <_vfiprintf_r+0x76c>
    c5b4:	9801      	ldr	r0, [sp, #4]
    c5b6:	4659      	mov	r1, fp
    c5b8:	1c22      	adds	r2, r4, #0
    c5ba:	f7ff fb8d 	bl	bcd8 <__sprint_r>
    c5be:	2800      	cmp	r0, #0
    c5c0:	d000      	beq.n	c5c4 <_vfiprintf_r+0x86c>
    c5c2:	e77f      	b.n	c4c4 <_vfiprintf_r+0x76c>
    c5c4:	2594      	movs	r5, #148	; 0x94
    c5c6:	00ed      	lsls	r5, r5, #3
    c5c8:	446d      	add	r5, sp
    c5ca:	e426      	b.n	be1a <_vfiprintf_r+0xc2>
    c5cc:	9801      	ldr	r0, [sp, #4]
    c5ce:	4659      	mov	r1, fp
    c5d0:	1c22      	adds	r2, r4, #0
    c5d2:	f7ff fb81 	bl	bcd8 <__sprint_r>
    c5d6:	2800      	cmp	r0, #0
    c5d8:	d000      	beq.n	c5dc <_vfiprintf_r+0x884>
    c5da:	e773      	b.n	c4c4 <_vfiprintf_r+0x76c>
    c5dc:	2395      	movs	r3, #149	; 0x95
    c5de:	2594      	movs	r5, #148	; 0x94
    c5e0:	00db      	lsls	r3, r3, #3
    c5e2:	00ed      	lsls	r5, r5, #3
    c5e4:	446b      	add	r3, sp
    c5e6:	446d      	add	r5, sp
    c5e8:	e6e1      	b.n	c3ae <_vfiprintf_r+0x656>
    c5ea:	9801      	ldr	r0, [sp, #4]
    c5ec:	4659      	mov	r1, fp
    c5ee:	1c22      	adds	r2, r4, #0
    c5f0:	f7ff fb72 	bl	bcd8 <__sprint_r>
    c5f4:	2800      	cmp	r0, #0
    c5f6:	d000      	beq.n	c5fa <_vfiprintf_r+0x8a2>
    c5f8:	e764      	b.n	c4c4 <_vfiprintf_r+0x76c>
    c5fa:	2395      	movs	r3, #149	; 0x95
    c5fc:	2594      	movs	r5, #148	; 0x94
    c5fe:	00db      	lsls	r3, r3, #3
    c600:	00ed      	lsls	r5, r5, #3
    c602:	446b      	add	r3, sp
    c604:	446d      	add	r5, sp
    c606:	e682      	b.n	c30e <_vfiprintf_r+0x5b6>
    c608:	9801      	ldr	r0, [sp, #4]
    c60a:	4659      	mov	r1, fp
    c60c:	1c22      	adds	r2, r4, #0
    c60e:	f7ff fb63 	bl	bcd8 <__sprint_r>
    c612:	2800      	cmp	r0, #0
    c614:	d000      	beq.n	c618 <_vfiprintf_r+0x8c0>
    c616:	e755      	b.n	c4c4 <_vfiprintf_r+0x76c>
    c618:	2395      	movs	r3, #149	; 0x95
    c61a:	2594      	movs	r5, #148	; 0x94
    c61c:	00db      	lsls	r3, r3, #3
    c61e:	00ed      	lsls	r5, r5, #3
    c620:	446b      	add	r3, sp
    c622:	446d      	add	r5, sp
    c624:	e660      	b.n	c2e8 <_vfiprintf_r+0x590>
    c626:	465b      	mov	r3, fp
    c628:	89d9      	ldrh	r1, [r3, #14]
    c62a:	040b      	lsls	r3, r1, #16
    c62c:	141b      	asrs	r3, r3, #16
    c62e:	2b00      	cmp	r3, #0
    c630:	da01      	bge.n	c636 <_vfiprintf_r+0x8de>
    c632:	f7ff fbc3 	bl	bdbc <_vfiprintf_r+0x64>
    c636:	4658      	mov	r0, fp
    c638:	2302      	movs	r3, #2
    c63a:	2487      	movs	r4, #135	; 0x87
    c63c:	439a      	bics	r2, r3
    c63e:	00e4      	lsls	r4, r4, #3
    c640:	6e43      	ldr	r3, [r0, #100]	; 0x64
    c642:	446c      	add	r4, sp
    c644:	6663      	str	r3, [r4, #100]	; 0x64
    c646:	69c3      	ldr	r3, [r0, #28]
    c648:	61e3      	str	r3, [r4, #28]
    c64a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c64c:	81a2      	strh	r2, [r4, #12]
    c64e:	81e1      	strh	r1, [r4, #14]
    c650:	6263      	str	r3, [r4, #36]	; 0x24
    c652:	2487      	movs	r4, #135	; 0x87
    c654:	00e4      	lsls	r4, r4, #3
    c656:	2380      	movs	r3, #128	; 0x80
    c658:	446c      	add	r4, sp
    c65a:	00db      	lsls	r3, r3, #3
    c65c:	a90e      	add	r1, sp, #56	; 0x38
    c65e:	60a3      	str	r3, [r4, #8]
    c660:	6163      	str	r3, [r4, #20]
    c662:	2300      	movs	r3, #0
    c664:	6021      	str	r1, [r4, #0]
    c666:	6121      	str	r1, [r4, #16]
    c668:	61a3      	str	r3, [r4, #24]
    c66a:	9801      	ldr	r0, [sp, #4]
    c66c:	1c21      	adds	r1, r4, #0
    c66e:	1c2a      	adds	r2, r5, #0
    c670:	9b07      	ldr	r3, [sp, #28]
    c672:	f7ff fb71 	bl	bd58 <_vfiprintf_r>
    c676:	9005      	str	r0, [sp, #20]
    c678:	2800      	cmp	r0, #0
    c67a:	db06      	blt.n	c68a <_vfiprintf_r+0x932>
    c67c:	9801      	ldr	r0, [sp, #4]
    c67e:	1c21      	adds	r1, r4, #0
    c680:	f7f8 f9fc 	bl	4a7c <_fflush_r>
    c684:	2800      	cmp	r0, #0
    c686:	d000      	beq.n	c68a <_vfiprintf_r+0x932>
    c688:	e198      	b.n	c9bc <_vfiprintf_r+0xc64>
    c68a:	89a2      	ldrh	r2, [r4, #12]
    c68c:	2340      	movs	r3, #64	; 0x40
    c68e:	421a      	tst	r2, r3
    c690:	d100      	bne.n	c694 <_vfiprintf_r+0x93c>
    c692:	e71e      	b.n	c4d2 <_vfiprintf_r+0x77a>
    c694:	465d      	mov	r5, fp
    c696:	89aa      	ldrh	r2, [r5, #12]
    c698:	4658      	mov	r0, fp
    c69a:	4313      	orrs	r3, r2
    c69c:	8183      	strh	r3, [r0, #12]
    c69e:	e718      	b.n	c4d2 <_vfiprintf_r+0x77a>
    c6a0:	f7f8 fae0 	bl	4c64 <__sinit>
    c6a4:	f7ff fb6b 	bl	bd7e <_vfiprintf_r+0x26>
    c6a8:	9303      	str	r3, [sp, #12]
    c6aa:	940b      	str	r4, [sp, #44]	; 0x2c
    c6ac:	e4a3      	b.n	bff6 <_vfiprintf_r+0x29e>
    c6ae:	200f      	movs	r0, #15
    c6b0:	940b      	str	r4, [sp, #44]	; 0x2c
    c6b2:	9a08      	ldr	r2, [sp, #32]
    c6b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c6b6:	4684      	mov	ip, r0
    c6b8:	1c21      	adds	r1, r4, #0
    c6ba:	46a8      	mov	r8, r5
    c6bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    c6be:	4660      	mov	r0, ip
    c6c0:	4010      	ands	r0, r2
    c6c2:	5c28      	ldrb	r0, [r5, r0]
    c6c4:	3901      	subs	r1, #1
    c6c6:	0915      	lsrs	r5, r2, #4
    c6c8:	46a9      	mov	r9, r5
    c6ca:	7008      	strb	r0, [r1, #0]
    c6cc:	0718      	lsls	r0, r3, #28
    c6ce:	1c05      	adds	r5, r0, #0
    c6d0:	4648      	mov	r0, r9
    c6d2:	4305      	orrs	r5, r0
    c6d4:	0918      	lsrs	r0, r3, #4
    c6d6:	1c2a      	adds	r2, r5, #0
    c6d8:	1c03      	adds	r3, r0, #0
    c6da:	4305      	orrs	r5, r0
    c6dc:	d1ee      	bne.n	c6bc <_vfiprintf_r+0x964>
    c6de:	1a60      	subs	r0, r4, r1
    c6e0:	910b      	str	r1, [sp, #44]	; 0x2c
    c6e2:	4645      	mov	r5, r8
    c6e4:	9208      	str	r2, [sp, #32]
    c6e6:	9309      	str	r3, [sp, #36]	; 0x24
    c6e8:	9003      	str	r0, [sp, #12]
    c6ea:	e484      	b.n	bff6 <_vfiprintf_r+0x29e>
    c6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c6ee:	2b00      	cmp	r3, #0
    c6f0:	d100      	bne.n	c6f4 <_vfiprintf_r+0x99c>
    c6f2:	e07e      	b.n	c7f2 <_vfiprintf_r+0xa9a>
    c6f4:	46a9      	mov	r9, r5
    c6f6:	46b0      	mov	r8, r6
    c6f8:	940b      	str	r4, [sp, #44]	; 0x2c
    c6fa:	9d08      	ldr	r5, [sp, #32]
    c6fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c6fe:	46ba      	mov	sl, r7
    c700:	1c27      	adds	r7, r4, #0
    c702:	1c28      	adds	r0, r5, #0
    c704:	1c31      	adds	r1, r6, #0
    c706:	220a      	movs	r2, #10
    c708:	2300      	movs	r3, #0
    c70a:	f001 fd25 	bl	e158 <____aeabi_uldivmod_from_thumb>
    c70e:	3f01      	subs	r7, #1
    c710:	3230      	adds	r2, #48	; 0x30
    c712:	703a      	strb	r2, [r7, #0]
    c714:	1c28      	adds	r0, r5, #0
    c716:	1c31      	adds	r1, r6, #0
    c718:	220a      	movs	r2, #10
    c71a:	2300      	movs	r3, #0
    c71c:	f001 fd1c 	bl	e158 <____aeabi_uldivmod_from_thumb>
    c720:	1c02      	adds	r2, r0, #0
    c722:	1c05      	adds	r5, r0, #0
    c724:	1c0e      	adds	r6, r1, #0
    c726:	430a      	orrs	r2, r1
    c728:	d1eb      	bne.n	c702 <_vfiprintf_r+0x9aa>
    c72a:	970b      	str	r7, [sp, #44]	; 0x2c
    c72c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c72e:	1ae3      	subs	r3, r4, r3
    c730:	9508      	str	r5, [sp, #32]
    c732:	9609      	str	r6, [sp, #36]	; 0x24
    c734:	4657      	mov	r7, sl
    c736:	464d      	mov	r5, r9
    c738:	4646      	mov	r6, r8
    c73a:	9303      	str	r3, [sp, #12]
    c73c:	e45b      	b.n	bff6 <_vfiprintf_r+0x29e>
    c73e:	9a00      	ldr	r2, [sp, #0]
    c740:	06d2      	lsls	r2, r2, #27
    c742:	d468      	bmi.n	c816 <_vfiprintf_r+0xabe>
    c744:	9900      	ldr	r1, [sp, #0]
    c746:	0649      	lsls	r1, r1, #25
    c748:	d565      	bpl.n	c816 <_vfiprintf_r+0xabe>
    c74a:	9a07      	ldr	r2, [sp, #28]
    c74c:	2300      	movs	r3, #0
    c74e:	5ed3      	ldrsh	r3, [r2, r3]
    c750:	9308      	str	r3, [sp, #32]
    c752:	17db      	asrs	r3, r3, #31
    c754:	9309      	str	r3, [sp, #36]	; 0x24
    c756:	9b07      	ldr	r3, [sp, #28]
    c758:	3304      	adds	r3, #4
    c75a:	9307      	str	r3, [sp, #28]
    c75c:	e46e      	b.n	c03c <_vfiprintf_r+0x2e4>
    c75e:	9800      	ldr	r0, [sp, #0]
    c760:	2310      	movs	r3, #16
    c762:	4003      	ands	r3, r0
    c764:	d000      	beq.n	c768 <_vfiprintf_r+0xa10>
    c766:	e082      	b.n	c86e <_vfiprintf_r+0xb16>
    c768:	9800      	ldr	r0, [sp, #0]
    c76a:	2240      	movs	r2, #64	; 0x40
    c76c:	4002      	ands	r2, r0
    c76e:	d100      	bne.n	c772 <_vfiprintf_r+0xa1a>
    c770:	e0b3      	b.n	c8da <_vfiprintf_r+0xb82>
    c772:	9907      	ldr	r1, [sp, #28]
    c774:	8809      	ldrh	r1, [r1, #0]
    c776:	9309      	str	r3, [sp, #36]	; 0x24
    c778:	9108      	str	r1, [sp, #32]
    c77a:	9a07      	ldr	r2, [sp, #28]
    c77c:	3204      	adds	r2, #4
    c77e:	1e4b      	subs	r3, r1, #1
    c780:	4199      	sbcs	r1, r3
    c782:	9207      	str	r2, [sp, #28]
    c784:	2301      	movs	r3, #1
    c786:	f7ff fbf1 	bl	bf6c <_vfiprintf_r+0x214>
    c78a:	9800      	ldr	r0, [sp, #0]
    c78c:	2210      	movs	r2, #16
    c78e:	4002      	ands	r2, r0
    c790:	d162      	bne.n	c858 <_vfiprintf_r+0xb00>
    c792:	9800      	ldr	r0, [sp, #0]
    c794:	2340      	movs	r3, #64	; 0x40
    c796:	4003      	ands	r3, r0
    c798:	d100      	bne.n	c79c <_vfiprintf_r+0xa44>
    c79a:	e0c1      	b.n	c920 <_vfiprintf_r+0xbc8>
    c79c:	9907      	ldr	r1, [sp, #28]
    c79e:	8809      	ldrh	r1, [r1, #0]
    c7a0:	9108      	str	r1, [sp, #32]
    c7a2:	1e4b      	subs	r3, r1, #1
    c7a4:	4199      	sbcs	r1, r3
    c7a6:	9b07      	ldr	r3, [sp, #28]
    c7a8:	3304      	adds	r3, #4
    c7aa:	9307      	str	r3, [sp, #28]
    c7ac:	9209      	str	r2, [sp, #36]	; 0x24
    c7ae:	1c13      	adds	r3, r2, #0
    c7b0:	f7ff fbdc 	bl	bf6c <_vfiprintf_r+0x214>
    c7b4:	9801      	ldr	r0, [sp, #4]
    c7b6:	4659      	mov	r1, fp
    c7b8:	1c22      	adds	r2, r4, #0
    c7ba:	f7ff fa8d 	bl	bcd8 <__sprint_r>
    c7be:	2800      	cmp	r0, #0
    c7c0:	d000      	beq.n	c7c4 <_vfiprintf_r+0xa6c>
    c7c2:	e67f      	b.n	c4c4 <_vfiprintf_r+0x76c>
    c7c4:	2395      	movs	r3, #149	; 0x95
    c7c6:	2594      	movs	r5, #148	; 0x94
    c7c8:	00db      	lsls	r3, r3, #3
    c7ca:	00ed      	lsls	r5, r5, #3
    c7cc:	446b      	add	r3, sp
    c7ce:	446d      	add	r5, sp
    c7d0:	e577      	b.n	c2c2 <_vfiprintf_r+0x56a>
    c7d2:	783b      	ldrb	r3, [r7, #0]
    c7d4:	9207      	str	r2, [sp, #28]
    c7d6:	f7ff fb3a 	bl	be4e <_vfiprintf_r+0xf6>
    c7da:	46c0      	nop			; (mov r8, r8)
    c7dc:	00000507 	.word	0x00000507
    c7e0:	0000051c 	.word	0x0000051c
    c7e4:	0000e958 	.word	0x0000e958
    c7e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c7ea:	1aa2      	subs	r2, r4, r2
    c7ec:	9203      	str	r2, [sp, #12]
    c7ee:	f7ff fc02 	bl	bff6 <_vfiprintf_r+0x29e>
    c7f2:	9808      	ldr	r0, [sp, #32]
    c7f4:	2809      	cmp	r0, #9
    c7f6:	d900      	bls.n	c7fa <_vfiprintf_r+0xaa2>
    c7f8:	e77c      	b.n	c6f4 <_vfiprintf_r+0x99c>
    c7fa:	229c      	movs	r2, #156	; 0x9c
    c7fc:	1c01      	adds	r1, r0, #0
    c7fe:	00d2      	lsls	r2, r2, #3
    c800:	3130      	adds	r1, #48	; 0x30
    c802:	3327      	adds	r3, #39	; 0x27
    c804:	446a      	add	r2, sp
    c806:	54d1      	strb	r1, [r2, r3]
    c808:	4b75      	ldr	r3, [pc, #468]	; (c9e0 <_vfiprintf_r+0xc88>)
    c80a:	446b      	add	r3, sp
    c80c:	1ae1      	subs	r1, r4, r3
    c80e:	9103      	str	r1, [sp, #12]
    c810:	930b      	str	r3, [sp, #44]	; 0x2c
    c812:	f7ff fbf0 	bl	bff6 <_vfiprintf_r+0x29e>
    c816:	9807      	ldr	r0, [sp, #28]
    c818:	6803      	ldr	r3, [r0, #0]
    c81a:	9308      	str	r3, [sp, #32]
    c81c:	17db      	asrs	r3, r3, #31
    c81e:	9309      	str	r3, [sp, #36]	; 0x24
    c820:	9909      	ldr	r1, [sp, #36]	; 0x24
    c822:	3004      	adds	r0, #4
    c824:	9007      	str	r0, [sp, #28]
    c826:	2900      	cmp	r1, #0
    c828:	db01      	blt.n	c82e <_vfiprintf_r+0xad6>
    c82a:	f7ff fc0c 	bl	c046 <_vfiprintf_r+0x2ee>
    c82e:	9a08      	ldr	r2, [sp, #32]
    c830:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c832:	2100      	movs	r1, #0
    c834:	4250      	negs	r0, r2
    c836:	4199      	sbcs	r1, r3
    c838:	9008      	str	r0, [sp, #32]
    c83a:	9109      	str	r1, [sp, #36]	; 0x24
    c83c:	4869      	ldr	r0, [pc, #420]	; (c9e4 <_vfiprintf_r+0xc8c>)
    c83e:	232d      	movs	r3, #45	; 0x2d
    c840:	4468      	add	r0, sp
    c842:	7003      	strb	r3, [r0, #0]
    c844:	f7ff fbff 	bl	c046 <_vfiprintf_r+0x2ee>
    c848:	9a07      	ldr	r2, [sp, #28]
    c84a:	9807      	ldr	r0, [sp, #28]
    c84c:	6812      	ldr	r2, [r2, #0]
    c84e:	3004      	adds	r0, #4
    c850:	9208      	str	r2, [sp, #32]
    c852:	9109      	str	r1, [sp, #36]	; 0x24
    c854:	9007      	str	r0, [sp, #28]
    c856:	e47b      	b.n	c150 <_vfiprintf_r+0x3f8>
    c858:	9907      	ldr	r1, [sp, #28]
    c85a:	6809      	ldr	r1, [r1, #0]
    c85c:	9108      	str	r1, [sp, #32]
    c85e:	1e4a      	subs	r2, r1, #1
    c860:	4191      	sbcs	r1, r2
    c862:	9a07      	ldr	r2, [sp, #28]
    c864:	3204      	adds	r2, #4
    c866:	9309      	str	r3, [sp, #36]	; 0x24
    c868:	9207      	str	r2, [sp, #28]
    c86a:	f7ff fb7f 	bl	bf6c <_vfiprintf_r+0x214>
    c86e:	9907      	ldr	r1, [sp, #28]
    c870:	6809      	ldr	r1, [r1, #0]
    c872:	9209      	str	r2, [sp, #36]	; 0x24
    c874:	9108      	str	r1, [sp, #32]
    c876:	e780      	b.n	c77a <_vfiprintf_r+0xa22>
    c878:	9807      	ldr	r0, [sp, #28]
    c87a:	9905      	ldr	r1, [sp, #20]
    c87c:	6803      	ldr	r3, [r0, #0]
    c87e:	17ca      	asrs	r2, r1, #31
    c880:	3004      	adds	r0, #4
    c882:	6019      	str	r1, [r3, #0]
    c884:	605a      	str	r2, [r3, #4]
    c886:	9007      	str	r0, [sp, #28]
    c888:	f7ff faa7 	bl	bdda <_vfiprintf_r+0x82>
    c88c:	783b      	ldrb	r3, [r7, #0]
    c88e:	f7ff fade 	bl	be4e <_vfiprintf_r+0xf6>
    c892:	9a00      	ldr	r2, [sp, #0]
    c894:	3b4c      	subs	r3, #76	; 0x4c
    c896:	431a      	orrs	r2, r3
    c898:	9200      	str	r2, [sp, #0]
    c89a:	3701      	adds	r7, #1
    c89c:	783b      	ldrb	r3, [r7, #0]
    c89e:	f7ff fad6 	bl	be4e <_vfiprintf_r+0xf6>
    c8a2:	46ab      	mov	fp, r5
    c8a4:	e60e      	b.n	c4c4 <_vfiprintf_r+0x76c>
    c8a6:	1c2b      	adds	r3, r5, #0
    c8a8:	3308      	adds	r3, #8
    c8aa:	e534      	b.n	c316 <_vfiprintf_r+0x5be>
    c8ac:	9801      	ldr	r0, [sp, #4]
    c8ae:	4659      	mov	r1, fp
    c8b0:	1c22      	adds	r2, r4, #0
    c8b2:	f7ff fa11 	bl	bcd8 <__sprint_r>
    c8b6:	2800      	cmp	r0, #0
    c8b8:	d000      	beq.n	c8bc <_vfiprintf_r+0xb64>
    c8ba:	e603      	b.n	c4c4 <_vfiprintf_r+0x76c>
    c8bc:	2395      	movs	r3, #149	; 0x95
    c8be:	2594      	movs	r5, #148	; 0x94
    c8c0:	00db      	lsls	r3, r3, #3
    c8c2:	00ed      	lsls	r5, r5, #3
    c8c4:	446b      	add	r3, sp
    c8c6:	446d      	add	r5, sp
    c8c8:	e525      	b.n	c316 <_vfiprintf_r+0x5be>
    c8ca:	1c1a      	adds	r2, r3, #0
    c8cc:	4b46      	ldr	r3, [pc, #280]	; (c9e8 <_vfiprintf_r+0xc90>)
    c8ce:	469a      	mov	sl, r3
    c8d0:	e55c      	b.n	c38c <_vfiprintf_r+0x634>
    c8d2:	2200      	movs	r2, #0
    c8d4:	9206      	str	r2, [sp, #24]
    c8d6:	f7ff fb8f 	bl	bff8 <_vfiprintf_r+0x2a0>
    c8da:	9b07      	ldr	r3, [sp, #28]
    c8dc:	9807      	ldr	r0, [sp, #28]
    c8de:	681b      	ldr	r3, [r3, #0]
    c8e0:	3004      	adds	r0, #4
    c8e2:	1c19      	adds	r1, r3, #0
    c8e4:	9308      	str	r3, [sp, #32]
    c8e6:	9209      	str	r2, [sp, #36]	; 0x24
    c8e8:	1e4b      	subs	r3, r1, #1
    c8ea:	4199      	sbcs	r1, r3
    c8ec:	9007      	str	r0, [sp, #28]
    c8ee:	2301      	movs	r3, #1
    c8f0:	f7ff fb3c 	bl	bf6c <_vfiprintf_r+0x214>
    c8f4:	9a00      	ldr	r2, [sp, #0]
    c8f6:	0652      	lsls	r2, r2, #25
    c8f8:	d530      	bpl.n	c95c <_vfiprintf_r+0xc04>
    c8fa:	9807      	ldr	r0, [sp, #28]
    c8fc:	4669      	mov	r1, sp
    c8fe:	2214      	movs	r2, #20
    c900:	6803      	ldr	r3, [r0, #0]
    c902:	5a51      	ldrh	r1, [r2, r1]
    c904:	3004      	adds	r0, #4
    c906:	8019      	strh	r1, [r3, #0]
    c908:	9007      	str	r0, [sp, #28]
    c90a:	f7ff fa66 	bl	bdda <_vfiprintf_r+0x82>
    c90e:	9807      	ldr	r0, [sp, #28]
    c910:	6800      	ldr	r0, [r0, #0]
    c912:	9109      	str	r1, [sp, #36]	; 0x24
    c914:	9907      	ldr	r1, [sp, #28]
    c916:	3104      	adds	r1, #4
    c918:	9008      	str	r0, [sp, #32]
    c91a:	9107      	str	r1, [sp, #28]
    c91c:	f7ff fc18 	bl	c150 <_vfiprintf_r+0x3f8>
    c920:	9807      	ldr	r0, [sp, #28]
    c922:	6800      	ldr	r0, [r0, #0]
    c924:	1c01      	adds	r1, r0, #0
    c926:	1e4a      	subs	r2, r1, #1
    c928:	4191      	sbcs	r1, r2
    c92a:	9a07      	ldr	r2, [sp, #28]
    c92c:	3204      	adds	r2, #4
    c92e:	9008      	str	r0, [sp, #32]
    c930:	9309      	str	r3, [sp, #36]	; 0x24
    c932:	9207      	str	r2, [sp, #28]
    c934:	f7ff fb1a 	bl	bf6c <_vfiprintf_r+0x214>
    c938:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c93a:	f7f9 f8a3 	bl	5a84 <strlen>
    c93e:	2200      	movs	r2, #0
    c940:	9003      	str	r0, [sp, #12]
    c942:	9206      	str	r2, [sp, #24]
    c944:	f7ff fb58 	bl	bff8 <_vfiprintf_r+0x2a0>
    c948:	9603      	str	r6, [sp, #12]
    c94a:	2e06      	cmp	r6, #6
    c94c:	d919      	bls.n	c982 <_vfiprintf_r+0xc2a>
    c94e:	2106      	movs	r1, #6
    c950:	9103      	str	r1, [sp, #12]
    c952:	9102      	str	r1, [sp, #8]
    c954:	4b25      	ldr	r3, [pc, #148]	; (c9ec <_vfiprintf_r+0xc94>)
    c956:	930b      	str	r3, [sp, #44]	; 0x2c
    c958:	f7ff fa8d 	bl	be76 <_vfiprintf_r+0x11e>
    c95c:	9a07      	ldr	r2, [sp, #28]
    c95e:	9805      	ldr	r0, [sp, #20]
    c960:	6813      	ldr	r3, [r2, #0]
    c962:	3204      	adds	r2, #4
    c964:	6018      	str	r0, [r3, #0]
    c966:	9207      	str	r2, [sp, #28]
    c968:	f7ff fa37 	bl	bdda <_vfiprintf_r+0x82>
    c96c:	491e      	ldr	r1, [pc, #120]	; (c9e8 <_vfiprintf_r+0xc90>)
    c96e:	1c2a      	adds	r2, r5, #0
    c970:	3208      	adds	r2, #8
    c972:	468a      	mov	sl, r1
    c974:	f7ff facb 	bl	bf0e <_vfiprintf_r+0x1b6>
    c978:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c97a:	1a20      	subs	r0, r4, r0
    c97c:	9003      	str	r0, [sp, #12]
    c97e:	f7ff fb3a 	bl	bff6 <_vfiprintf_r+0x29e>
    c982:	9a03      	ldr	r2, [sp, #12]
    c984:	43d3      	mvns	r3, r2
    c986:	17db      	asrs	r3, r3, #31
    c988:	401a      	ands	r2, r3
    c98a:	9202      	str	r2, [sp, #8]
    c98c:	e7e2      	b.n	c954 <_vfiprintf_r+0xbfc>
    c98e:	4816      	ldr	r0, [pc, #88]	; (c9e8 <_vfiprintf_r+0xc90>)
    c990:	4682      	mov	sl, r0
    c992:	e552      	b.n	c43a <_vfiprintf_r+0x6e2>
    c994:	9801      	ldr	r0, [sp, #4]
    c996:	4659      	mov	r1, fp
    c998:	f7fb ffc6 	bl	8928 <__swsetup_r>
    c99c:	2800      	cmp	r0, #0
    c99e:	d000      	beq.n	c9a2 <_vfiprintf_r+0xc4a>
    c9a0:	e594      	b.n	c4cc <_vfiprintf_r+0x774>
    c9a2:	4659      	mov	r1, fp
    c9a4:	898a      	ldrh	r2, [r1, #12]
    c9a6:	1c13      	adds	r3, r2, #0
    c9a8:	f7ff fa02 	bl	bdb0 <_vfiprintf_r+0x58>
    c9ac:	1c1a      	adds	r2, r3, #0
    c9ae:	4b0e      	ldr	r3, [pc, #56]	; (c9e8 <_vfiprintf_r+0xc90>)
    c9b0:	469a      	mov	sl, r3
    c9b2:	e5d4      	b.n	c55e <_vfiprintf_r+0x806>
    c9b4:	9603      	str	r6, [sp, #12]
    c9b6:	9006      	str	r0, [sp, #24]
    c9b8:	f7ff fb1e 	bl	bff8 <_vfiprintf_r+0x2a0>
    c9bc:	2301      	movs	r3, #1
    c9be:	425b      	negs	r3, r3
    c9c0:	9305      	str	r3, [sp, #20]
    c9c2:	e662      	b.n	c68a <_vfiprintf_r+0x932>
    c9c4:	9b07      	ldr	r3, [sp, #28]
    c9c6:	9a07      	ldr	r2, [sp, #28]
    c9c8:	681e      	ldr	r6, [r3, #0]
    c9ca:	3204      	adds	r2, #4
    c9cc:	2e00      	cmp	r6, #0
    c9ce:	db00      	blt.n	c9d2 <_vfiprintf_r+0xc7a>
    c9d0:	e6ff      	b.n	c7d2 <_vfiprintf_r+0xa7a>
    c9d2:	2601      	movs	r6, #1
    c9d4:	783b      	ldrb	r3, [r7, #0]
    c9d6:	4276      	negs	r6, r6
    c9d8:	9207      	str	r2, [sp, #28]
    c9da:	f7ff fa38 	bl	be4e <_vfiprintf_r+0xf6>
    c9de:	46c0      	nop			; (mov r8, r8)
    c9e0:	00000507 	.word	0x00000507
    c9e4:	00000517 	.word	0x00000517
    c9e8:	0000e958 	.word	0x0000e958
    c9ec:	0000edf8 	.word	0x0000edf8

0000c9f0 <vfiprintf>:
    c9f0:	b538      	push	{r3, r4, r5, lr}
    c9f2:	1c13      	adds	r3, r2, #0
    c9f4:	4a05      	ldr	r2, [pc, #20]	; (ca0c <vfiprintf+0x1c>)
    c9f6:	1c05      	adds	r5, r0, #0
    c9f8:	1c0c      	adds	r4, r1, #0
    c9fa:	6810      	ldr	r0, [r2, #0]
    c9fc:	1c29      	adds	r1, r5, #0
    c9fe:	1c22      	adds	r2, r4, #0
    ca00:	f7ff f9aa 	bl	bd58 <_vfiprintf_r>
    ca04:	bc38      	pop	{r3, r4, r5}
    ca06:	bc02      	pop	{r1}
    ca08:	4708      	bx	r1
    ca0a:	46c0      	nop			; (mov r8, r8)
    ca0c:	40000000 	.word	0x40000000

0000ca10 <_calloc_r>:
    ca10:	b510      	push	{r4, lr}
    ca12:	4351      	muls	r1, r2
    ca14:	f7f8 fbae 	bl	5174 <_malloc_r>
    ca18:	1e04      	subs	r4, r0, #0
    ca1a:	d01f      	beq.n	ca5c <_calloc_r+0x4c>
    ca1c:	1c23      	adds	r3, r4, #0
    ca1e:	3b08      	subs	r3, #8
    ca20:	685a      	ldr	r2, [r3, #4]
    ca22:	2303      	movs	r3, #3
    ca24:	439a      	bics	r2, r3
    ca26:	3a04      	subs	r2, #4
    ca28:	2a24      	cmp	r2, #36	; 0x24
    ca2a:	d81b      	bhi.n	ca64 <_calloc_r+0x54>
    ca2c:	1c23      	adds	r3, r4, #0
    ca2e:	2a13      	cmp	r2, #19
    ca30:	d90f      	bls.n	ca52 <_calloc_r+0x42>
    ca32:	2100      	movs	r1, #0
    ca34:	1c20      	adds	r0, r4, #0
    ca36:	c002      	stmia	r0!, {r1}
    ca38:	6061      	str	r1, [r4, #4]
    ca3a:	1d03      	adds	r3, r0, #4
    ca3c:	2a1b      	cmp	r2, #27
    ca3e:	d908      	bls.n	ca52 <_calloc_r+0x42>
    ca40:	6041      	str	r1, [r0, #4]
    ca42:	1d18      	adds	r0, r3, #4
    ca44:	6059      	str	r1, [r3, #4]
    ca46:	3308      	adds	r3, #8
    ca48:	2a24      	cmp	r2, #36	; 0x24
    ca4a:	d102      	bne.n	ca52 <_calloc_r+0x42>
    ca4c:	6041      	str	r1, [r0, #4]
    ca4e:	6059      	str	r1, [r3, #4]
    ca50:	3308      	adds	r3, #8
    ca52:	2100      	movs	r1, #0
    ca54:	1c1a      	adds	r2, r3, #0
    ca56:	c202      	stmia	r2!, {r1}
    ca58:	6059      	str	r1, [r3, #4]
    ca5a:	6051      	str	r1, [r2, #4]
    ca5c:	1c20      	adds	r0, r4, #0
    ca5e:	bc10      	pop	{r4}
    ca60:	bc02      	pop	{r1}
    ca62:	4708      	bx	r1
    ca64:	1c20      	adds	r0, r4, #0
    ca66:	2100      	movs	r1, #0
    ca68:	f7f8 fe88 	bl	577c <memset>
    ca6c:	e7f6      	b.n	ca5c <_calloc_r+0x4c>
    ca6e:	46c0      	nop			; (mov r8, r8)

0000ca70 <_fputwc_r>:
    ca70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca72:	464f      	mov	r7, r9
    ca74:	4646      	mov	r6, r8
    ca76:	b4c0      	push	{r6, r7}
    ca78:	1c14      	adds	r4, r2, #0
    ca7a:	2380      	movs	r3, #128	; 0x80
    ca7c:	8992      	ldrh	r2, [r2, #12]
    ca7e:	019b      	lsls	r3, r3, #6
    ca80:	b083      	sub	sp, #12
    ca82:	4681      	mov	r9, r0
    ca84:	4688      	mov	r8, r1
    ca86:	421a      	tst	r2, r3
    ca88:	d104      	bne.n	ca94 <_fputwc_r+0x24>
    ca8a:	431a      	orrs	r2, r3
    ca8c:	81a2      	strh	r2, [r4, #12]
    ca8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    ca90:	4313      	orrs	r3, r2
    ca92:	6663      	str	r3, [r4, #100]	; 0x64
    ca94:	f7fd fa14 	bl	9ec0 <__locale_mb_cur_max>
    ca98:	2801      	cmp	r0, #1
    ca9a:	d044      	beq.n	cb26 <_fputwc_r+0xb6>
    ca9c:	af01      	add	r7, sp, #4
    ca9e:	1c23      	adds	r3, r4, #0
    caa0:	335c      	adds	r3, #92	; 0x5c
    caa2:	4648      	mov	r0, r9
    caa4:	1c39      	adds	r1, r7, #0
    caa6:	4642      	mov	r2, r8
    caa8:	f000 f8fe 	bl	cca8 <_wcrtomb_r>
    caac:	1c06      	adds	r6, r0, #0
    caae:	1c43      	adds	r3, r0, #1
    cab0:	d023      	beq.n	cafa <_fputwc_r+0x8a>
    cab2:	2800      	cmp	r0, #0
    cab4:	d02c      	beq.n	cb10 <_fputwc_r+0xa0>
    cab6:	2500      	movs	r5, #0
    cab8:	e008      	b.n	cacc <_fputwc_r+0x5c>
    caba:	6823      	ldr	r3, [r4, #0]
    cabc:	5d7a      	ldrb	r2, [r7, r5]
    cabe:	701a      	strb	r2, [r3, #0]
    cac0:	6823      	ldr	r3, [r4, #0]
    cac2:	3301      	adds	r3, #1
    cac4:	6023      	str	r3, [r4, #0]
    cac6:	3501      	adds	r5, #1
    cac8:	42b5      	cmp	r5, r6
    caca:	d221      	bcs.n	cb10 <_fputwc_r+0xa0>
    cacc:	68a3      	ldr	r3, [r4, #8]
    cace:	3b01      	subs	r3, #1
    cad0:	60a3      	str	r3, [r4, #8]
    cad2:	2b00      	cmp	r3, #0
    cad4:	daf1      	bge.n	caba <_fputwc_r+0x4a>
    cad6:	69a2      	ldr	r2, [r4, #24]
    cad8:	4293      	cmp	r3, r2
    cada:	db1b      	blt.n	cb14 <_fputwc_r+0xa4>
    cadc:	6823      	ldr	r3, [r4, #0]
    cade:	5d7a      	ldrb	r2, [r7, r5]
    cae0:	701a      	strb	r2, [r3, #0]
    cae2:	6823      	ldr	r3, [r4, #0]
    cae4:	7819      	ldrb	r1, [r3, #0]
    cae6:	290a      	cmp	r1, #10
    cae8:	d015      	beq.n	cb16 <_fputwc_r+0xa6>
    caea:	3301      	adds	r3, #1
    caec:	6023      	str	r3, [r4, #0]
    caee:	2200      	movs	r2, #0
    caf0:	2a00      	cmp	r2, #0
    caf2:	d0e8      	beq.n	cac6 <_fputwc_r+0x56>
    caf4:	2001      	movs	r0, #1
    caf6:	4240      	negs	r0, r0
    caf8:	e003      	b.n	cb02 <_fputwc_r+0x92>
    cafa:	89a3      	ldrh	r3, [r4, #12]
    cafc:	2240      	movs	r2, #64	; 0x40
    cafe:	4313      	orrs	r3, r2
    cb00:	81a3      	strh	r3, [r4, #12]
    cb02:	b003      	add	sp, #12
    cb04:	bc0c      	pop	{r2, r3}
    cb06:	4690      	mov	r8, r2
    cb08:	4699      	mov	r9, r3
    cb0a:	bcf0      	pop	{r4, r5, r6, r7}
    cb0c:	bc02      	pop	{r1}
    cb0e:	4708      	bx	r1
    cb10:	4640      	mov	r0, r8
    cb12:	e7f6      	b.n	cb02 <_fputwc_r+0x92>
    cb14:	5d79      	ldrb	r1, [r7, r5]
    cb16:	1c22      	adds	r2, r4, #0
    cb18:	4648      	mov	r0, r9
    cb1a:	f7fb fe95 	bl	8848 <__swbuf_r>
    cb1e:	1c42      	adds	r2, r0, #1
    cb20:	4253      	negs	r3, r2
    cb22:	415a      	adcs	r2, r3
    cb24:	e7e4      	b.n	caf0 <_fputwc_r+0x80>
    cb26:	23ff      	movs	r3, #255	; 0xff
    cb28:	4598      	cmp	r8, r3
    cb2a:	d8b7      	bhi.n	ca9c <_fputwc_r+0x2c>
    cb2c:	3bff      	subs	r3, #255	; 0xff
    cb2e:	4598      	cmp	r8, r3
    cb30:	d0b4      	beq.n	ca9c <_fputwc_r+0x2c>
    cb32:	af01      	add	r7, sp, #4
    cb34:	4643      	mov	r3, r8
    cb36:	703b      	strb	r3, [r7, #0]
    cb38:	1c06      	adds	r6, r0, #0
    cb3a:	e7bc      	b.n	cab6 <_fputwc_r+0x46>

0000cb3c <fputwc>:
    cb3c:	b570      	push	{r4, r5, r6, lr}
    cb3e:	4c09      	ldr	r4, [pc, #36]	; (cb64 <fputwc+0x28>)
    cb40:	1c06      	adds	r6, r0, #0
    cb42:	6820      	ldr	r0, [r4, #0]
    cb44:	1c0d      	adds	r5, r1, #0
    cb46:	2800      	cmp	r0, #0
    cb48:	d005      	beq.n	cb56 <fputwc+0x1a>
    cb4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    cb4c:	2b00      	cmp	r3, #0
    cb4e:	d102      	bne.n	cb56 <fputwc+0x1a>
    cb50:	f7f8 f888 	bl	4c64 <__sinit>
    cb54:	6820      	ldr	r0, [r4, #0]
    cb56:	1c31      	adds	r1, r6, #0
    cb58:	1c2a      	adds	r2, r5, #0
    cb5a:	f7ff ff89 	bl	ca70 <_fputwc_r>
    cb5e:	bc70      	pop	{r4, r5, r6}
    cb60:	bc02      	pop	{r1}
    cb62:	4708      	bx	r1
    cb64:	40000000 	.word	0x40000000

0000cb68 <_isatty_r>:
    cb68:	b538      	push	{r3, r4, r5, lr}
    cb6a:	4c08      	ldr	r4, [pc, #32]	; (cb8c <_isatty_r+0x24>)
    cb6c:	2300      	movs	r3, #0
    cb6e:	1c05      	adds	r5, r0, #0
    cb70:	6023      	str	r3, [r4, #0]
    cb72:	1c08      	adds	r0, r1, #0
    cb74:	f7f5 fa88 	bl	2088 <_isatty>
    cb78:	1c43      	adds	r3, r0, #1
    cb7a:	d002      	beq.n	cb82 <_isatty_r+0x1a>
    cb7c:	bc38      	pop	{r3, r4, r5}
    cb7e:	bc02      	pop	{r1}
    cb80:	4708      	bx	r1
    cb82:	6823      	ldr	r3, [r4, #0]
    cb84:	2b00      	cmp	r3, #0
    cb86:	d0f9      	beq.n	cb7c <_isatty_r+0x14>
    cb88:	602b      	str	r3, [r5, #0]
    cb8a:	e7f7      	b.n	cb7c <_isatty_r+0x14>
    cb8c:	40000b8c 	.word	0x40000b8c

0000cb90 <cleanup_glue>:
    cb90:	b538      	push	{r3, r4, r5, lr}
    cb92:	1c0c      	adds	r4, r1, #0
    cb94:	6809      	ldr	r1, [r1, #0]
    cb96:	1c05      	adds	r5, r0, #0
    cb98:	2900      	cmp	r1, #0
    cb9a:	d001      	beq.n	cba0 <cleanup_glue+0x10>
    cb9c:	f7ff fff8 	bl	cb90 <cleanup_glue>
    cba0:	1c28      	adds	r0, r5, #0
    cba2:	1c21      	adds	r1, r4, #0
    cba4:	f7f8 f99c 	bl	4ee0 <_free_r>
    cba8:	bc38      	pop	{r3, r4, r5}
    cbaa:	bc01      	pop	{r0}
    cbac:	4700      	bx	r0
    cbae:	46c0      	nop			; (mov r8, r8)

0000cbb0 <_reclaim_reent>:
    cbb0:	b570      	push	{r4, r5, r6, lr}
    cbb2:	4b28      	ldr	r3, [pc, #160]	; (cc54 <_reclaim_reent+0xa4>)
    cbb4:	681b      	ldr	r3, [r3, #0]
    cbb6:	1c05      	adds	r5, r0, #0
    cbb8:	4298      	cmp	r0, r3
    cbba:	d03a      	beq.n	cc32 <_reclaim_reent+0x82>
    cbbc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d016      	beq.n	cbf0 <_reclaim_reent+0x40>
    cbc2:	2200      	movs	r2, #0
    cbc4:	1c16      	adds	r6, r2, #0
    cbc6:	0092      	lsls	r2, r2, #2
    cbc8:	5899      	ldr	r1, [r3, r2]
    cbca:	2900      	cmp	r1, #0
    cbcc:	d101      	bne.n	cbd2 <_reclaim_reent+0x22>
    cbce:	e007      	b.n	cbe0 <_reclaim_reent+0x30>
    cbd0:	1c21      	adds	r1, r4, #0
    cbd2:	680c      	ldr	r4, [r1, #0]
    cbd4:	1c28      	adds	r0, r5, #0
    cbd6:	f7f8 f983 	bl	4ee0 <_free_r>
    cbda:	2c00      	cmp	r4, #0
    cbdc:	d1f8      	bne.n	cbd0 <_reclaim_reent+0x20>
    cbde:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    cbe0:	3601      	adds	r6, #1
    cbe2:	1c32      	adds	r2, r6, #0
    cbe4:	2e20      	cmp	r6, #32
    cbe6:	d1ee      	bne.n	cbc6 <_reclaim_reent+0x16>
    cbe8:	1c28      	adds	r0, r5, #0
    cbea:	1c19      	adds	r1, r3, #0
    cbec:	f7f8 f978 	bl	4ee0 <_free_r>
    cbf0:	6c29      	ldr	r1, [r5, #64]	; 0x40
    cbf2:	2900      	cmp	r1, #0
    cbf4:	d002      	beq.n	cbfc <_reclaim_reent+0x4c>
    cbf6:	1c28      	adds	r0, r5, #0
    cbf8:	f7f8 f972 	bl	4ee0 <_free_r>
    cbfc:	23a4      	movs	r3, #164	; 0xa4
    cbfe:	005b      	lsls	r3, r3, #1
    cc00:	58e9      	ldr	r1, [r5, r3]
    cc02:	2900      	cmp	r1, #0
    cc04:	d00c      	beq.n	cc20 <_reclaim_reent+0x70>
    cc06:	1c2e      	adds	r6, r5, #0
    cc08:	364d      	adds	r6, #77	; 0x4d
    cc0a:	36ff      	adds	r6, #255	; 0xff
    cc0c:	42b1      	cmp	r1, r6
    cc0e:	d101      	bne.n	cc14 <_reclaim_reent+0x64>
    cc10:	e006      	b.n	cc20 <_reclaim_reent+0x70>
    cc12:	1c21      	adds	r1, r4, #0
    cc14:	680c      	ldr	r4, [r1, #0]
    cc16:	1c28      	adds	r0, r5, #0
    cc18:	f7f8 f962 	bl	4ee0 <_free_r>
    cc1c:	42a6      	cmp	r6, r4
    cc1e:	d1f8      	bne.n	cc12 <_reclaim_reent+0x62>
    cc20:	6d69      	ldr	r1, [r5, #84]	; 0x54
    cc22:	2900      	cmp	r1, #0
    cc24:	d002      	beq.n	cc2c <_reclaim_reent+0x7c>
    cc26:	1c28      	adds	r0, r5, #0
    cc28:	f7f8 f95a 	bl	4ee0 <_free_r>
    cc2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d102      	bne.n	cc38 <_reclaim_reent+0x88>
    cc32:	bc70      	pop	{r4, r5, r6}
    cc34:	bc01      	pop	{r0}
    cc36:	4700      	bx	r0
    cc38:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    cc3a:	1c28      	adds	r0, r5, #0
    cc3c:	f000 f832 	bl	cca4 <_wrapup_reent+0x4c>
    cc40:	23b8      	movs	r3, #184	; 0xb8
    cc42:	009b      	lsls	r3, r3, #2
    cc44:	58e9      	ldr	r1, [r5, r3]
    cc46:	2900      	cmp	r1, #0
    cc48:	d0f3      	beq.n	cc32 <_reclaim_reent+0x82>
    cc4a:	1c28      	adds	r0, r5, #0
    cc4c:	f7ff ffa0 	bl	cb90 <cleanup_glue>
    cc50:	e7ef      	b.n	cc32 <_reclaim_reent+0x82>
    cc52:	46c0      	nop			; (mov r8, r8)
    cc54:	40000000 	.word	0x40000000

0000cc58 <_wrapup_reent>:
    cc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc5a:	1e07      	subs	r7, r0, #0
    cc5c:	d01c      	beq.n	cc98 <_wrapup_reent+0x40>
    cc5e:	23a4      	movs	r3, #164	; 0xa4
    cc60:	005b      	lsls	r3, r3, #1
    cc62:	58fe      	ldr	r6, [r7, r3]
    cc64:	2e00      	cmp	r6, #0
    cc66:	d00e      	beq.n	cc86 <_wrapup_reent+0x2e>
    cc68:	6873      	ldr	r3, [r6, #4]
    cc6a:	1e5c      	subs	r4, r3, #1
    cc6c:	d408      	bmi.n	cc80 <_wrapup_reent+0x28>
    cc6e:	1c5d      	adds	r5, r3, #1
    cc70:	00ad      	lsls	r5, r5, #2
    cc72:	1975      	adds	r5, r6, r5
    cc74:	682b      	ldr	r3, [r5, #0]
    cc76:	f000 f815 	bl	cca4 <_wrapup_reent+0x4c>
    cc7a:	3d04      	subs	r5, #4
    cc7c:	3c01      	subs	r4, #1
    cc7e:	d5f9      	bpl.n	cc74 <_wrapup_reent+0x1c>
    cc80:	6836      	ldr	r6, [r6, #0]
    cc82:	2e00      	cmp	r6, #0
    cc84:	d1f0      	bne.n	cc68 <_wrapup_reent+0x10>
    cc86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    cc88:	2b00      	cmp	r3, #0
    cc8a:	d002      	beq.n	cc92 <_wrapup_reent+0x3a>
    cc8c:	1c38      	adds	r0, r7, #0
    cc8e:	f000 f809 	bl	cca4 <_wrapup_reent+0x4c>
    cc92:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cc94:	bc01      	pop	{r0}
    cc96:	4700      	bx	r0
    cc98:	4b01      	ldr	r3, [pc, #4]	; (cca0 <_wrapup_reent+0x48>)
    cc9a:	681f      	ldr	r7, [r3, #0]
    cc9c:	e7df      	b.n	cc5e <_wrapup_reent+0x6>
    cc9e:	46c0      	nop			; (mov r8, r8)
    cca0:	40000000 	.word	0x40000000
    cca4:	4718      	bx	r3
    cca6:	46c0      	nop			; (mov r8, r8)

0000cca8 <_wcrtomb_r>:
    cca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccaa:	4647      	mov	r7, r8
    ccac:	b480      	push	{r7}
    ccae:	b086      	sub	sp, #24
    ccb0:	1c05      	adds	r5, r0, #0
    ccb2:	1c0c      	adds	r4, r1, #0
    ccb4:	1c17      	adds	r7, r2, #0
    ccb6:	1c1e      	adds	r6, r3, #0
    ccb8:	2900      	cmp	r1, #0
    ccba:	d017      	beq.n	ccec <_wcrtomb_r+0x44>
    ccbc:	4b11      	ldr	r3, [pc, #68]	; (cd04 <_wcrtomb_r+0x5c>)
    ccbe:	681b      	ldr	r3, [r3, #0]
    ccc0:	4698      	mov	r8, r3
    ccc2:	f7fd f8f9 	bl	9eb8 <__locale_charset>
    ccc6:	9600      	str	r6, [sp, #0]
    ccc8:	1c03      	adds	r3, r0, #0
    ccca:	1c21      	adds	r1, r4, #0
    cccc:	1c28      	adds	r0, r5, #0
    ccce:	1c3a      	adds	r2, r7, #0
    ccd0:	f000 f855 	bl	cd7e <wcrtomb+0x76>
    ccd4:	1c43      	adds	r3, r0, #1
    ccd6:	d103      	bne.n	cce0 <_wcrtomb_r+0x38>
    ccd8:	2300      	movs	r3, #0
    ccda:	6033      	str	r3, [r6, #0]
    ccdc:	338a      	adds	r3, #138	; 0x8a
    ccde:	602b      	str	r3, [r5, #0]
    cce0:	b006      	add	sp, #24
    cce2:	bc04      	pop	{r2}
    cce4:	4690      	mov	r8, r2
    cce6:	bcf0      	pop	{r4, r5, r6, r7}
    cce8:	bc02      	pop	{r1}
    ccea:	4708      	bx	r1
    ccec:	4b05      	ldr	r3, [pc, #20]	; (cd04 <_wcrtomb_r+0x5c>)
    ccee:	681f      	ldr	r7, [r3, #0]
    ccf0:	f7fd f8e2 	bl	9eb8 <__locale_charset>
    ccf4:	9600      	str	r6, [sp, #0]
    ccf6:	1c03      	adds	r3, r0, #0
    ccf8:	a903      	add	r1, sp, #12
    ccfa:	1c28      	adds	r0, r5, #0
    ccfc:	1c22      	adds	r2, r4, #0
    ccfe:	f000 f83d 	bl	cd7c <wcrtomb+0x74>
    cd02:	e7e7      	b.n	ccd4 <_wcrtomb_r+0x2c>
    cd04:	400008bc 	.word	0x400008bc

0000cd08 <wcrtomb>:
    cd08:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd0a:	464f      	mov	r7, r9
    cd0c:	4646      	mov	r6, r8
    cd0e:	b4c0      	push	{r6, r7}
    cd10:	b087      	sub	sp, #28
    cd12:	1c04      	adds	r4, r0, #0
    cd14:	1c0f      	adds	r7, r1, #0
    cd16:	1c16      	adds	r6, r2, #0
    cd18:	2800      	cmp	r0, #0
    cd1a:	d01c      	beq.n	cd56 <wcrtomb+0x4e>
    cd1c:	4b15      	ldr	r3, [pc, #84]	; (cd74 <wcrtomb+0x6c>)
    cd1e:	4d16      	ldr	r5, [pc, #88]	; (cd78 <wcrtomb+0x70>)
    cd20:	681b      	ldr	r3, [r3, #0]
    cd22:	4699      	mov	r9, r3
    cd24:	682b      	ldr	r3, [r5, #0]
    cd26:	4698      	mov	r8, r3
    cd28:	f7fd f8c6 	bl	9eb8 <__locale_charset>
    cd2c:	9600      	str	r6, [sp, #0]
    cd2e:	1c03      	adds	r3, r0, #0
    cd30:	1c21      	adds	r1, r4, #0
    cd32:	4640      	mov	r0, r8
    cd34:	1c3a      	adds	r2, r7, #0
    cd36:	f000 f823 	bl	cd80 <wcrtomb+0x78>
    cd3a:	1c43      	adds	r3, r0, #1
    cd3c:	d104      	bne.n	cd48 <wcrtomb+0x40>
    cd3e:	2300      	movs	r3, #0
    cd40:	6033      	str	r3, [r6, #0]
    cd42:	682b      	ldr	r3, [r5, #0]
    cd44:	228a      	movs	r2, #138	; 0x8a
    cd46:	601a      	str	r2, [r3, #0]
    cd48:	b007      	add	sp, #28
    cd4a:	bc0c      	pop	{r2, r3}
    cd4c:	4690      	mov	r8, r2
    cd4e:	4699      	mov	r9, r3
    cd50:	bcf0      	pop	{r4, r5, r6, r7}
    cd52:	bc02      	pop	{r1}
    cd54:	4708      	bx	r1
    cd56:	4b07      	ldr	r3, [pc, #28]	; (cd74 <wcrtomb+0x6c>)
    cd58:	4d07      	ldr	r5, [pc, #28]	; (cd78 <wcrtomb+0x70>)
    cd5a:	681b      	ldr	r3, [r3, #0]
    cd5c:	682f      	ldr	r7, [r5, #0]
    cd5e:	4698      	mov	r8, r3
    cd60:	f7fd f8aa 	bl	9eb8 <__locale_charset>
    cd64:	9600      	str	r6, [sp, #0]
    cd66:	1c03      	adds	r3, r0, #0
    cd68:	a903      	add	r1, sp, #12
    cd6a:	1c38      	adds	r0, r7, #0
    cd6c:	1c22      	adds	r2, r4, #0
    cd6e:	f000 f806 	bl	cd7e <wcrtomb+0x76>
    cd72:	e7e2      	b.n	cd3a <wcrtomb+0x32>
    cd74:	400008bc 	.word	0x400008bc
    cd78:	40000000 	.word	0x40000000
    cd7c:	4738      	bx	r7
    cd7e:	4740      	bx	r8
    cd80:	4748      	bx	r9
    cd82:	46c0      	nop			; (mov r8, r8)

0000cd84 <__ascii_wctomb>:
    cd84:	b500      	push	{lr}
    cd86:	1c03      	adds	r3, r0, #0
    cd88:	1e08      	subs	r0, r1, #0
    cd8a:	d003      	beq.n	cd94 <__ascii_wctomb+0x10>
    cd8c:	2aff      	cmp	r2, #255	; 0xff
    cd8e:	d803      	bhi.n	cd98 <__ascii_wctomb+0x14>
    cd90:	7002      	strb	r2, [r0, #0]
    cd92:	2001      	movs	r0, #1
    cd94:	bc02      	pop	{r1}
    cd96:	4708      	bx	r1
    cd98:	228a      	movs	r2, #138	; 0x8a
    cd9a:	2001      	movs	r0, #1
    cd9c:	601a      	str	r2, [r3, #0]
    cd9e:	4240      	negs	r0, r0
    cda0:	e7f8      	b.n	cd94 <__ascii_wctomb+0x10>
    cda2:	46c0      	nop			; (mov r8, r8)

0000cda4 <_wctomb_r>:
    cda4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cda6:	4647      	mov	r7, r8
    cda8:	b480      	push	{r7}
    cdaa:	1c1e      	adds	r6, r3, #0
    cdac:	4b0a      	ldr	r3, [pc, #40]	; (cdd8 <_wctomb_r+0x34>)
    cdae:	681b      	ldr	r3, [r3, #0]
    cdb0:	b082      	sub	sp, #8
    cdb2:	4698      	mov	r8, r3
    cdb4:	1c05      	adds	r5, r0, #0
    cdb6:	1c17      	adds	r7, r2, #0
    cdb8:	1c0c      	adds	r4, r1, #0
    cdba:	f7fd f87d 	bl	9eb8 <__locale_charset>
    cdbe:	9600      	str	r6, [sp, #0]
    cdc0:	1c03      	adds	r3, r0, #0
    cdc2:	1c3a      	adds	r2, r7, #0
    cdc4:	1c28      	adds	r0, r5, #0
    cdc6:	1c21      	adds	r1, r4, #0
    cdc8:	f000 f808 	bl	cddc <_wctomb_r+0x38>
    cdcc:	b002      	add	sp, #8
    cdce:	bc04      	pop	{r2}
    cdd0:	4690      	mov	r8, r2
    cdd2:	bcf0      	pop	{r4, r5, r6, r7}
    cdd4:	bc02      	pop	{r1}
    cdd6:	4708      	bx	r1
    cdd8:	400008bc 	.word	0x400008bc
    cddc:	4740      	bx	r8
    cdde:	46c0      	nop			; (mov r8, r8)

0000cde0 <__aeabi_drsub>:
    cde0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    cde4:	ea000000 	b	cdec <__adddf3>

0000cde8 <__aeabi_dsub>:
    cde8:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

0000cdec <__adddf3>:
    cdec:	e92d4030 	push	{r4, r5, lr}
    cdf0:	e1a04081 	lsl	r4, r1, #1
    cdf4:	e1a05083 	lsl	r5, r3, #1
    cdf8:	e1340005 	teq	r4, r5
    cdfc:	01300002 	teqeq	r0, r2
    ce00:	1194c000 	orrsne	ip, r4, r0
    ce04:	1195c002 	orrsne	ip, r5, r2
    ce08:	11f0cac4 	mvnsne	ip, r4, asr #21
    ce0c:	11f0cac5 	mvnsne	ip, r5, asr #21
    ce10:	0a00008c 	beq	d048 <__adddf3+0x25c>
    ce14:	e1a04aa4 	lsr	r4, r4, #21
    ce18:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    ce1c:	b2655000 	rsblt	r5, r5, #0
    ce20:	da000006 	ble	ce40 <__adddf3+0x54>
    ce24:	e0844005 	add	r4, r4, r5
    ce28:	e0202002 	eor	r2, r0, r2
    ce2c:	e0213003 	eor	r3, r1, r3
    ce30:	e0220000 	eor	r0, r2, r0
    ce34:	e0231001 	eor	r1, r3, r1
    ce38:	e0202002 	eor	r2, r0, r2
    ce3c:	e0213003 	eor	r3, r1, r3
    ce40:	e3550036 	cmp	r5, #54	; 0x36
    ce44:	88bd4030 	pophi	{r4, r5, lr}
    ce48:	812fff1e 	bxhi	lr
    ce4c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    ce50:	e1a01601 	lsl	r1, r1, #12
    ce54:	e3a0c601 	mov	ip, #1048576	; 0x100000
    ce58:	e18c1621 	orr	r1, ip, r1, lsr #12
    ce5c:	0a000001 	beq	ce68 <__adddf3+0x7c>
    ce60:	e2700000 	rsbs	r0, r0, #0
    ce64:	e2e11000 	rsc	r1, r1, #0
    ce68:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    ce6c:	e1a03603 	lsl	r3, r3, #12
    ce70:	e18c3623 	orr	r3, ip, r3, lsr #12
    ce74:	0a000001 	beq	ce80 <__adddf3+0x94>
    ce78:	e2722000 	rsbs	r2, r2, #0
    ce7c:	e2e33000 	rsc	r3, r3, #0
    ce80:	e1340005 	teq	r4, r5
    ce84:	0a000069 	beq	d030 <__adddf3+0x244>
    ce88:	e2444001 	sub	r4, r4, #1
    ce8c:	e275e020 	rsbs	lr, r5, #32
    ce90:	ba000005 	blt	ceac <__adddf3+0xc0>
    ce94:	e1a0ce12 	lsl	ip, r2, lr
    ce98:	e0900532 	adds	r0, r0, r2, lsr r5
    ce9c:	e2a11000 	adc	r1, r1, #0
    cea0:	e0900e13 	adds	r0, r0, r3, lsl lr
    cea4:	e0b11553 	adcs	r1, r1, r3, asr r5
    cea8:	ea000006 	b	cec8 <__adddf3+0xdc>
    ceac:	e2455020 	sub	r5, r5, #32
    ceb0:	e28ee020 	add	lr, lr, #32
    ceb4:	e3520001 	cmp	r2, #1
    ceb8:	e1a0ce13 	lsl	ip, r3, lr
    cebc:	238cc002 	orrcs	ip, ip, #2
    cec0:	e0900553 	adds	r0, r0, r3, asr r5
    cec4:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    cec8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    cecc:	5a000002 	bpl	cedc <__adddf3+0xf0>
    ced0:	e27cc000 	rsbs	ip, ip, #0
    ced4:	e2f00000 	rscs	r0, r0, #0
    ced8:	e2e11000 	rsc	r1, r1, #0
    cedc:	e3510601 	cmp	r1, #1048576	; 0x100000
    cee0:	3a00000f 	bcc	cf24 <__adddf3+0x138>
    cee4:	e3510602 	cmp	r1, #2097152	; 0x200000
    cee8:	3a000006 	bcc	cf08 <__adddf3+0x11c>
    ceec:	e1b010a1 	lsrs	r1, r1, #1
    cef0:	e1b00060 	rrxs	r0, r0
    cef4:	e1a0c06c 	rrx	ip, ip
    cef8:	e2844001 	add	r4, r4, #1
    cefc:	e1a02a84 	lsl	r2, r4, #21
    cf00:	e3720501 	cmn	r2, #4194304	; 0x400000
    cf04:	2a00006b 	bcs	d0b8 <__adddf3+0x2cc>
    cf08:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    cf0c:	01b0c0a0 	lsrseq	ip, r0, #1
    cf10:	e2b00000 	adcs	r0, r0, #0
    cf14:	e0a11a04 	adc	r1, r1, r4, lsl #20
    cf18:	e1811005 	orr	r1, r1, r5
    cf1c:	e8bd4030 	pop	{r4, r5, lr}
    cf20:	e12fff1e 	bx	lr
    cf24:	e1b0c08c 	lsls	ip, ip, #1
    cf28:	e0b00000 	adcs	r0, r0, r0
    cf2c:	e0a11001 	adc	r1, r1, r1
    cf30:	e3110601 	tst	r1, #1048576	; 0x100000
    cf34:	e2444001 	sub	r4, r4, #1
    cf38:	1afffff2 	bne	cf08 <__adddf3+0x11c>
    cf3c:	e3310000 	teq	r1, #0
    cf40:	13a03014 	movne	r3, #20
    cf44:	03a03034 	moveq	r3, #52	; 0x34
    cf48:	01a01000 	moveq	r1, r0
    cf4c:	03a00000 	moveq	r0, #0
    cf50:	e1a02001 	mov	r2, r1
    cf54:	e3520801 	cmp	r2, #65536	; 0x10000
    cf58:	21a02822 	lsrcs	r2, r2, #16
    cf5c:	22433010 	subcs	r3, r3, #16
    cf60:	e3520c01 	cmp	r2, #256	; 0x100
    cf64:	21a02422 	lsrcs	r2, r2, #8
    cf68:	22433008 	subcs	r3, r3, #8
    cf6c:	e3520010 	cmp	r2, #16
    cf70:	21a02222 	lsrcs	r2, r2, #4
    cf74:	22433004 	subcs	r3, r3, #4
    cf78:	e3520004 	cmp	r2, #4
    cf7c:	22433002 	subcs	r3, r3, #2
    cf80:	304330a2 	subcc	r3, r3, r2, lsr #1
    cf84:	e04331a2 	sub	r3, r3, r2, lsr #3
    cf88:	e2532020 	subs	r2, r3, #32
    cf8c:	aa000007 	bge	cfb0 <__adddf3+0x1c4>
    cf90:	e292200c 	adds	r2, r2, #12
    cf94:	da000004 	ble	cfac <__adddf3+0x1c0>
    cf98:	e282c014 	add	ip, r2, #20
    cf9c:	e262200c 	rsb	r2, r2, #12
    cfa0:	e1a00c11 	lsl	r0, r1, ip
    cfa4:	e1a01231 	lsr	r1, r1, r2
    cfa8:	ea000004 	b	cfc0 <__adddf3+0x1d4>
    cfac:	e2822014 	add	r2, r2, #20
    cfb0:	d262c020 	rsble	ip, r2, #32
    cfb4:	e1a01211 	lsl	r1, r1, r2
    cfb8:	d1811c30 	orrle	r1, r1, r0, lsr ip
    cfbc:	d1a00210 	lslle	r0, r0, r2
    cfc0:	e0544003 	subs	r4, r4, r3
    cfc4:	a0811a04 	addge	r1, r1, r4, lsl #20
    cfc8:	a1811005 	orrge	r1, r1, r5
    cfcc:	a8bd4030 	popge	{r4, r5, lr}
    cfd0:	a12fff1e 	bxge	lr
    cfd4:	e1e04004 	mvn	r4, r4
    cfd8:	e254401f 	subs	r4, r4, #31
    cfdc:	aa00000f 	bge	d020 <__adddf3+0x234>
    cfe0:	e294400c 	adds	r4, r4, #12
    cfe4:	ca000006 	bgt	d004 <__adddf3+0x218>
    cfe8:	e2844014 	add	r4, r4, #20
    cfec:	e2642020 	rsb	r2, r4, #32
    cff0:	e1a00430 	lsr	r0, r0, r4
    cff4:	e1800211 	orr	r0, r0, r1, lsl r2
    cff8:	e1851431 	orr	r1, r5, r1, lsr r4
    cffc:	e8bd4030 	pop	{r4, r5, lr}
    d000:	e12fff1e 	bx	lr
    d004:	e264400c 	rsb	r4, r4, #12
    d008:	e2642020 	rsb	r2, r4, #32
    d00c:	e1a00230 	lsr	r0, r0, r2
    d010:	e1800411 	orr	r0, r0, r1, lsl r4
    d014:	e1a01005 	mov	r1, r5
    d018:	e8bd4030 	pop	{r4, r5, lr}
    d01c:	e12fff1e 	bx	lr
    d020:	e1a00431 	lsr	r0, r1, r4
    d024:	e1a01005 	mov	r1, r5
    d028:	e8bd4030 	pop	{r4, r5, lr}
    d02c:	e12fff1e 	bx	lr
    d030:	e3340000 	teq	r4, #0
    d034:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    d038:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    d03c:	02844001 	addeq	r4, r4, #1
    d040:	12455001 	subne	r5, r5, #1
    d044:	eaffff8f 	b	ce88 <__adddf3+0x9c>
    d048:	e1f0cac4 	mvns	ip, r4, asr #21
    d04c:	11f0cac5 	mvnsne	ip, r5, asr #21
    d050:	0a00001d 	beq	d0cc <__adddf3+0x2e0>
    d054:	e1340005 	teq	r4, r5
    d058:	01300002 	teqeq	r0, r2
    d05c:	0a000004 	beq	d074 <__adddf3+0x288>
    d060:	e194c000 	orrs	ip, r4, r0
    d064:	01a01003 	moveq	r1, r3
    d068:	01a00002 	moveq	r0, r2
    d06c:	e8bd4030 	pop	{r4, r5, lr}
    d070:	e12fff1e 	bx	lr
    d074:	e1310003 	teq	r1, r3
    d078:	13a01000 	movne	r1, #0
    d07c:	13a00000 	movne	r0, #0
    d080:	18bd4030 	popne	{r4, r5, lr}
    d084:	112fff1e 	bxne	lr
    d088:	e1b0caa4 	lsrs	ip, r4, #21
    d08c:	1a000004 	bne	d0a4 <__adddf3+0x2b8>
    d090:	e1b00080 	lsls	r0, r0, #1
    d094:	e0b11001 	adcs	r1, r1, r1
    d098:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    d09c:	e8bd4030 	pop	{r4, r5, lr}
    d0a0:	e12fff1e 	bx	lr
    d0a4:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    d0a8:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    d0ac:	38bd4030 	popcc	{r4, r5, lr}
    d0b0:	312fff1e 	bxcc	lr
    d0b4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    d0b8:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    d0bc:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    d0c0:	e3a00000 	mov	r0, #0
    d0c4:	e8bd4030 	pop	{r4, r5, lr}
    d0c8:	e12fff1e 	bx	lr
    d0cc:	e1f0cac4 	mvns	ip, r4, asr #21
    d0d0:	11a01003 	movne	r1, r3
    d0d4:	11a00002 	movne	r0, r2
    d0d8:	01f0cac5 	mvnseq	ip, r5, asr #21
    d0dc:	11a03001 	movne	r3, r1
    d0e0:	11a02000 	movne	r2, r0
    d0e4:	e1904601 	orrs	r4, r0, r1, lsl #12
    d0e8:	01925603 	orrseq	r5, r2, r3, lsl #12
    d0ec:	01310003 	teqeq	r1, r3
    d0f0:	13811702 	orrne	r1, r1, #524288	; 0x80000
    d0f4:	e8bd4030 	pop	{r4, r5, lr}
    d0f8:	e12fff1e 	bx	lr

0000d0fc <__aeabi_ui2d>:
    d0fc:	e3300000 	teq	r0, #0
    d100:	03a01000 	moveq	r1, #0
    d104:	012fff1e 	bxeq	lr
    d108:	e92d4030 	push	{r4, r5, lr}
    d10c:	e3a04b01 	mov	r4, #1024	; 0x400
    d110:	e2844032 	add	r4, r4, #50	; 0x32
    d114:	e3a05000 	mov	r5, #0
    d118:	e3a01000 	mov	r1, #0
    d11c:	eaffff86 	b	cf3c <__adddf3+0x150>

0000d120 <__aeabi_i2d>:
    d120:	e3300000 	teq	r0, #0
    d124:	03a01000 	moveq	r1, #0
    d128:	012fff1e 	bxeq	lr
    d12c:	e92d4030 	push	{r4, r5, lr}
    d130:	e3a04b01 	mov	r4, #1024	; 0x400
    d134:	e2844032 	add	r4, r4, #50	; 0x32
    d138:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    d13c:	42600000 	rsbmi	r0, r0, #0
    d140:	e3a01000 	mov	r1, #0
    d144:	eaffff7c 	b	cf3c <__adddf3+0x150>

0000d148 <__aeabi_f2d>:
    d148:	e1b02080 	lsls	r2, r0, #1
    d14c:	e1a011c2 	asr	r1, r2, #3
    d150:	e1a01061 	rrx	r1, r1
    d154:	e1a00e02 	lsl	r0, r2, #28
    d158:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    d15c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    d160:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    d164:	112fff1e 	bxne	lr
    d168:	e3320000 	teq	r2, #0
    d16c:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    d170:	012fff1e 	bxeq	lr
    d174:	e92d4030 	push	{r4, r5, lr}
    d178:	e3a04d0e 	mov	r4, #896	; 0x380
    d17c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    d180:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    d184:	eaffff6c 	b	cf3c <__adddf3+0x150>

0000d188 <__aeabi_ul2d>:
    d188:	e1902001 	orrs	r2, r0, r1
    d18c:	012fff1e 	bxeq	lr
    d190:	e92d4030 	push	{r4, r5, lr}
    d194:	e3a05000 	mov	r5, #0
    d198:	ea000006 	b	d1b8 <__aeabi_l2d+0x1c>

0000d19c <__aeabi_l2d>:
    d19c:	e1902001 	orrs	r2, r0, r1
    d1a0:	012fff1e 	bxeq	lr
    d1a4:	e92d4030 	push	{r4, r5, lr}
    d1a8:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    d1ac:	5a000001 	bpl	d1b8 <__aeabi_l2d+0x1c>
    d1b0:	e2700000 	rsbs	r0, r0, #0
    d1b4:	e2e11000 	rsc	r1, r1, #0
    d1b8:	e3a04b01 	mov	r4, #1024	; 0x400
    d1bc:	e2844032 	add	r4, r4, #50	; 0x32
    d1c0:	e1b0cb21 	lsrs	ip, r1, #22
    d1c4:	0affff44 	beq	cedc <__adddf3+0xf0>
    d1c8:	e3a02003 	mov	r2, #3
    d1cc:	e1b0c1ac 	lsrs	ip, ip, #3
    d1d0:	12822003 	addne	r2, r2, #3
    d1d4:	e1b0c1ac 	lsrs	ip, ip, #3
    d1d8:	12822003 	addne	r2, r2, #3
    d1dc:	e08221ac 	add	r2, r2, ip, lsr #3
    d1e0:	e2623020 	rsb	r3, r2, #32
    d1e4:	e1a0c310 	lsl	ip, r0, r3
    d1e8:	e1a00230 	lsr	r0, r0, r2
    d1ec:	e1800311 	orr	r0, r0, r1, lsl r3
    d1f0:	e1a01231 	lsr	r1, r1, r2
    d1f4:	e0844002 	add	r4, r4, r2
    d1f8:	eaffff37 	b	cedc <__adddf3+0xf0>

0000d1fc <__aeabi_dmul>:
    d1fc:	e92d4070 	push	{r4, r5, r6, lr}
    d200:	e3a0c0ff 	mov	ip, #255	; 0xff
    d204:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    d208:	e01c4a21 	ands	r4, ip, r1, lsr #20
    d20c:	101c5a23 	andsne	r5, ip, r3, lsr #20
    d210:	1134000c 	teqne	r4, ip
    d214:	1135000c 	teqne	r5, ip
    d218:	0b000075 	bleq	d3f4 <__aeabi_dmul+0x1f8>
    d21c:	e0844005 	add	r4, r4, r5
    d220:	e0216003 	eor	r6, r1, r3
    d224:	e1c11a8c 	bic	r1, r1, ip, lsl #21
    d228:	e1c33a8c 	bic	r3, r3, ip, lsl #21
    d22c:	e1905601 	orrs	r5, r0, r1, lsl #12
    d230:	11925603 	orrsne	r5, r2, r3, lsl #12
    d234:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    d238:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    d23c:	0a00001d 	beq	d2b8 <__aeabi_dmul+0xbc>
    d240:	e08ec290 	umull	ip, lr, r0, r2
    d244:	e3a05000 	mov	r5, #0
    d248:	e0a5e291 	umlal	lr, r5, r1, r2
    d24c:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    d250:	e0a5e390 	umlal	lr, r5, r0, r3
    d254:	e3a06000 	mov	r6, #0
    d258:	e0a65391 	umlal	r5, r6, r1, r3
    d25c:	e33c0000 	teq	ip, #0
    d260:	138ee001 	orrne	lr, lr, #1
    d264:	e24440ff 	sub	r4, r4, #255	; 0xff
    d268:	e3560c02 	cmp	r6, #512	; 0x200
    d26c:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    d270:	2a000002 	bcs	d280 <__aeabi_dmul+0x84>
    d274:	e1b0e08e 	lsls	lr, lr, #1
    d278:	e0b55005 	adcs	r5, r5, r5
    d27c:	e0a66006 	adc	r6, r6, r6
    d280:	e1821586 	orr	r1, r2, r6, lsl #11
    d284:	e1811aa5 	orr	r1, r1, r5, lsr #21
    d288:	e1a00585 	lsl	r0, r5, #11
    d28c:	e1800aae 	orr	r0, r0, lr, lsr #21
    d290:	e1a0e58e 	lsl	lr, lr, #11
    d294:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    d298:	835c0c07 	cmphi	ip, #1792	; 0x700
    d29c:	8a000011 	bhi	d2e8 <__aeabi_dmul+0xec>
    d2a0:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    d2a4:	01b0e0a0 	lsrseq	lr, r0, #1
    d2a8:	e2b00000 	adcs	r0, r0, #0
    d2ac:	e0a11a04 	adc	r1, r1, r4, lsl #20
    d2b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    d2b4:	e12fff1e 	bx	lr
    d2b8:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    d2bc:	e1861001 	orr	r1, r6, r1
    d2c0:	e1800002 	orr	r0, r0, r2
    d2c4:	e0211003 	eor	r1, r1, r3
    d2c8:	e05440ac 	subs	r4, r4, ip, lsr #1
    d2cc:	c074500c 	rsbsgt	r5, r4, ip
    d2d0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    d2d4:	c8bd4070 	popgt	{r4, r5, r6, lr}
    d2d8:	c12fff1e 	bxgt	lr
    d2dc:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    d2e0:	e3a0e000 	mov	lr, #0
    d2e4:	e2544001 	subs	r4, r4, #1
    d2e8:	ca00005d 	bgt	d464 <__aeabi_dmul+0x268>
    d2ec:	e3740036 	cmn	r4, #54	; 0x36
    d2f0:	d3a00000 	movle	r0, #0
    d2f4:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    d2f8:	d8bd4070 	pople	{r4, r5, r6, lr}
    d2fc:	d12fff1e 	bxle	lr
    d300:	e2644000 	rsb	r4, r4, #0
    d304:	e2544020 	subs	r4, r4, #32
    d308:	aa00001a 	bge	d378 <__aeabi_dmul+0x17c>
    d30c:	e294400c 	adds	r4, r4, #12
    d310:	ca00000c 	bgt	d348 <__aeabi_dmul+0x14c>
    d314:	e2844014 	add	r4, r4, #20
    d318:	e2645020 	rsb	r5, r4, #32
    d31c:	e1a03510 	lsl	r3, r0, r5
    d320:	e1a00430 	lsr	r0, r0, r4
    d324:	e1800511 	orr	r0, r0, r1, lsl r5
    d328:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    d32c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    d330:	e0900fa3 	adds	r0, r0, r3, lsr #31
    d334:	e0a21431 	adc	r1, r2, r1, lsr r4
    d338:	e19ee083 	orrs	lr, lr, r3, lsl #1
    d33c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    d340:	e8bd4070 	pop	{r4, r5, r6, lr}
    d344:	e12fff1e 	bx	lr
    d348:	e264400c 	rsb	r4, r4, #12
    d34c:	e2645020 	rsb	r5, r4, #32
    d350:	e1a03410 	lsl	r3, r0, r4
    d354:	e1a00530 	lsr	r0, r0, r5
    d358:	e1800411 	orr	r0, r0, r1, lsl r4
    d35c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    d360:	e0900fa3 	adds	r0, r0, r3, lsr #31
    d364:	e2a11000 	adc	r1, r1, #0
    d368:	e19ee083 	orrs	lr, lr, r3, lsl #1
    d36c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    d370:	e8bd4070 	pop	{r4, r5, r6, lr}
    d374:	e12fff1e 	bx	lr
    d378:	e2645020 	rsb	r5, r4, #32
    d37c:	e18ee510 	orr	lr, lr, r0, lsl r5
    d380:	e1a03430 	lsr	r3, r0, r4
    d384:	e1833511 	orr	r3, r3, r1, lsl r5
    d388:	e1a00431 	lsr	r0, r1, r4
    d38c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    d390:	e1c00431 	bic	r0, r0, r1, lsr r4
    d394:	e0800fa3 	add	r0, r0, r3, lsr #31
    d398:	e19ee083 	orrs	lr, lr, r3, lsl #1
    d39c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    d3a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    d3a4:	e12fff1e 	bx	lr
    d3a8:	e3340000 	teq	r4, #0
    d3ac:	1a000008 	bne	d3d4 <__aeabi_dmul+0x1d8>
    d3b0:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    d3b4:	e1b00080 	lsls	r0, r0, #1
    d3b8:	e0a11001 	adc	r1, r1, r1
    d3bc:	e3110601 	tst	r1, #1048576	; 0x100000
    d3c0:	02444001 	subeq	r4, r4, #1
    d3c4:	0afffffa 	beq	d3b4 <__aeabi_dmul+0x1b8>
    d3c8:	e1811006 	orr	r1, r1, r6
    d3cc:	e3350000 	teq	r5, #0
    d3d0:	112fff1e 	bxne	lr
    d3d4:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    d3d8:	e1b02082 	lsls	r2, r2, #1
    d3dc:	e0a33003 	adc	r3, r3, r3
    d3e0:	e3130601 	tst	r3, #1048576	; 0x100000
    d3e4:	02455001 	subeq	r5, r5, #1
    d3e8:	0afffffa 	beq	d3d8 <__aeabi_dmul+0x1dc>
    d3ec:	e1833006 	orr	r3, r3, r6
    d3f0:	e12fff1e 	bx	lr
    d3f4:	e134000c 	teq	r4, ip
    d3f8:	e00c5a23 	and	r5, ip, r3, lsr #20
    d3fc:	1135000c 	teqne	r5, ip
    d400:	0a000007 	beq	d424 <__aeabi_dmul+0x228>
    d404:	e1906081 	orrs	r6, r0, r1, lsl #1
    d408:	11926083 	orrsne	r6, r2, r3, lsl #1
    d40c:	1affffe5 	bne	d3a8 <__aeabi_dmul+0x1ac>
    d410:	e0211003 	eor	r1, r1, r3
    d414:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    d418:	e3a00000 	mov	r0, #0
    d41c:	e8bd4070 	pop	{r4, r5, r6, lr}
    d420:	e12fff1e 	bx	lr
    d424:	e1906081 	orrs	r6, r0, r1, lsl #1
    d428:	01a00002 	moveq	r0, r2
    d42c:	01a01003 	moveq	r1, r3
    d430:	11926083 	orrsne	r6, r2, r3, lsl #1
    d434:	0a000010 	beq	d47c <__aeabi_dmul+0x280>
    d438:	e134000c 	teq	r4, ip
    d43c:	1a000001 	bne	d448 <__aeabi_dmul+0x24c>
    d440:	e1906601 	orrs	r6, r0, r1, lsl #12
    d444:	1a00000c 	bne	d47c <__aeabi_dmul+0x280>
    d448:	e135000c 	teq	r5, ip
    d44c:	1a000003 	bne	d460 <__aeabi_dmul+0x264>
    d450:	e1926603 	orrs	r6, r2, r3, lsl #12
    d454:	11a00002 	movne	r0, r2
    d458:	11a01003 	movne	r1, r3
    d45c:	1a000006 	bne	d47c <__aeabi_dmul+0x280>
    d460:	e0211003 	eor	r1, r1, r3
    d464:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    d468:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    d46c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    d470:	e3a00000 	mov	r0, #0
    d474:	e8bd4070 	pop	{r4, r5, r6, lr}
    d478:	e12fff1e 	bx	lr
    d47c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    d480:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    d484:	e8bd4070 	pop	{r4, r5, r6, lr}
    d488:	e12fff1e 	bx	lr

0000d48c <__aeabi_ddiv>:
    d48c:	e92d4070 	push	{r4, r5, r6, lr}
    d490:	e3a0c0ff 	mov	ip, #255	; 0xff
    d494:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    d498:	e01c4a21 	ands	r4, ip, r1, lsr #20
    d49c:	101c5a23 	andsne	r5, ip, r3, lsr #20
    d4a0:	1134000c 	teqne	r4, ip
    d4a4:	1135000c 	teqne	r5, ip
    d4a8:	0b00005e 	bleq	d628 <__aeabi_ddiv+0x19c>
    d4ac:	e0444005 	sub	r4, r4, r5
    d4b0:	e021e003 	eor	lr, r1, r3
    d4b4:	e1925603 	orrs	r5, r2, r3, lsl #12
    d4b8:	e1a01601 	lsl	r1, r1, #12
    d4bc:	0a00004c 	beq	d5f4 <__aeabi_ddiv+0x168>
    d4c0:	e1a03603 	lsl	r3, r3, #12
    d4c4:	e3a05201 	mov	r5, #268435456	; 0x10000000
    d4c8:	e1853223 	orr	r3, r5, r3, lsr #4
    d4cc:	e1833c22 	orr	r3, r3, r2, lsr #24
    d4d0:	e1a02402 	lsl	r2, r2, #8
    d4d4:	e1855221 	orr	r5, r5, r1, lsr #4
    d4d8:	e1855c20 	orr	r5, r5, r0, lsr #24
    d4dc:	e1a06400 	lsl	r6, r0, #8
    d4e0:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    d4e4:	e1550003 	cmp	r5, r3
    d4e8:	01560002 	cmpeq	r6, r2
    d4ec:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    d4f0:	e2844c03 	add	r4, r4, #768	; 0x300
    d4f4:	2a000001 	bcs	d500 <__aeabi_ddiv+0x74>
    d4f8:	e1b030a3 	lsrs	r3, r3, #1
    d4fc:	e1a02062 	rrx	r2, r2
    d500:	e0566002 	subs	r6, r6, r2
    d504:	e0c55003 	sbc	r5, r5, r3
    d508:	e1b030a3 	lsrs	r3, r3, #1
    d50c:	e1a02062 	rrx	r2, r2
    d510:	e3a00601 	mov	r0, #1048576	; 0x100000
    d514:	e3a0c702 	mov	ip, #524288	; 0x80000
    d518:	e056e002 	subs	lr, r6, r2
    d51c:	e0d5e003 	sbcs	lr, r5, r3
    d520:	20466002 	subcs	r6, r6, r2
    d524:	21a0500e 	movcs	r5, lr
    d528:	2180000c 	orrcs	r0, r0, ip
    d52c:	e1b030a3 	lsrs	r3, r3, #1
    d530:	e1a02062 	rrx	r2, r2
    d534:	e056e002 	subs	lr, r6, r2
    d538:	e0d5e003 	sbcs	lr, r5, r3
    d53c:	20466002 	subcs	r6, r6, r2
    d540:	21a0500e 	movcs	r5, lr
    d544:	218000ac 	orrcs	r0, r0, ip, lsr #1
    d548:	e1b030a3 	lsrs	r3, r3, #1
    d54c:	e1a02062 	rrx	r2, r2
    d550:	e056e002 	subs	lr, r6, r2
    d554:	e0d5e003 	sbcs	lr, r5, r3
    d558:	20466002 	subcs	r6, r6, r2
    d55c:	21a0500e 	movcs	r5, lr
    d560:	2180012c 	orrcs	r0, r0, ip, lsr #2
    d564:	e1b030a3 	lsrs	r3, r3, #1
    d568:	e1a02062 	rrx	r2, r2
    d56c:	e056e002 	subs	lr, r6, r2
    d570:	e0d5e003 	sbcs	lr, r5, r3
    d574:	20466002 	subcs	r6, r6, r2
    d578:	21a0500e 	movcs	r5, lr
    d57c:	218001ac 	orrcs	r0, r0, ip, lsr #3
    d580:	e195e006 	orrs	lr, r5, r6
    d584:	0a00000d 	beq	d5c0 <__aeabi_ddiv+0x134>
    d588:	e1a05205 	lsl	r5, r5, #4
    d58c:	e1855e26 	orr	r5, r5, r6, lsr #28
    d590:	e1a06206 	lsl	r6, r6, #4
    d594:	e1a03183 	lsl	r3, r3, #3
    d598:	e1833ea2 	orr	r3, r3, r2, lsr #29
    d59c:	e1a02182 	lsl	r2, r2, #3
    d5a0:	e1b0c22c 	lsrs	ip, ip, #4
    d5a4:	1affffdb 	bne	d518 <__aeabi_ddiv+0x8c>
    d5a8:	e3110601 	tst	r1, #1048576	; 0x100000
    d5ac:	1a000006 	bne	d5cc <__aeabi_ddiv+0x140>
    d5b0:	e1811000 	orr	r1, r1, r0
    d5b4:	e3a00000 	mov	r0, #0
    d5b8:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    d5bc:	eaffffd5 	b	d518 <__aeabi_ddiv+0x8c>
    d5c0:	e3110601 	tst	r1, #1048576	; 0x100000
    d5c4:	01811000 	orreq	r1, r1, r0
    d5c8:	03a00000 	moveq	r0, #0
    d5cc:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    d5d0:	835c0c07 	cmphi	ip, #1792	; 0x700
    d5d4:	8affff43 	bhi	d2e8 <__aeabi_dmul+0xec>
    d5d8:	e055c003 	subs	ip, r5, r3
    d5dc:	0056c002 	subseq	ip, r6, r2
    d5e0:	01b0c0a0 	lsrseq	ip, r0, #1
    d5e4:	e2b00000 	adcs	r0, r0, #0
    d5e8:	e0a11a04 	adc	r1, r1, r4, lsl #20
    d5ec:	e8bd4070 	pop	{r4, r5, r6, lr}
    d5f0:	e12fff1e 	bx	lr
    d5f4:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    d5f8:	e18e1621 	orr	r1, lr, r1, lsr #12
    d5fc:	e09440ac 	adds	r4, r4, ip, lsr #1
    d600:	c074500c 	rsbsgt	r5, r4, ip
    d604:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    d608:	c8bd4070 	popgt	{r4, r5, r6, lr}
    d60c:	c12fff1e 	bxgt	lr
    d610:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    d614:	e3a0e000 	mov	lr, #0
    d618:	e2544001 	subs	r4, r4, #1
    d61c:	eaffff31 	b	d2e8 <__aeabi_dmul+0xec>
    d620:	e185e006 	orr	lr, r5, r6
    d624:	eaffff2f 	b	d2e8 <__aeabi_dmul+0xec>
    d628:	e00c5a23 	and	r5, ip, r3, lsr #20
    d62c:	e134000c 	teq	r4, ip
    d630:	0135000c 	teqeq	r5, ip
    d634:	0affff90 	beq	d47c <__aeabi_dmul+0x280>
    d638:	e134000c 	teq	r4, ip
    d63c:	1a000006 	bne	d65c <__aeabi_ddiv+0x1d0>
    d640:	e1904601 	orrs	r4, r0, r1, lsl #12
    d644:	1affff8c 	bne	d47c <__aeabi_dmul+0x280>
    d648:	e135000c 	teq	r5, ip
    d64c:	1affff83 	bne	d460 <__aeabi_dmul+0x264>
    d650:	e1a00002 	mov	r0, r2
    d654:	e1a01003 	mov	r1, r3
    d658:	eaffff87 	b	d47c <__aeabi_dmul+0x280>
    d65c:	e135000c 	teq	r5, ip
    d660:	1a000004 	bne	d678 <__aeabi_ddiv+0x1ec>
    d664:	e1925603 	orrs	r5, r2, r3, lsl #12
    d668:	0affff68 	beq	d410 <__aeabi_dmul+0x214>
    d66c:	e1a00002 	mov	r0, r2
    d670:	e1a01003 	mov	r1, r3
    d674:	eaffff80 	b	d47c <__aeabi_dmul+0x280>
    d678:	e1906081 	orrs	r6, r0, r1, lsl #1
    d67c:	11926083 	orrsne	r6, r2, r3, lsl #1
    d680:	1affff48 	bne	d3a8 <__aeabi_dmul+0x1ac>
    d684:	e1904081 	orrs	r4, r0, r1, lsl #1
    d688:	1affff74 	bne	d460 <__aeabi_dmul+0x264>
    d68c:	e1925083 	orrs	r5, r2, r3, lsl #1
    d690:	1affff5e 	bne	d410 <__aeabi_dmul+0x214>
    d694:	eaffff78 	b	d47c <__aeabi_dmul+0x280>

0000d698 <__gedf2>:
    d698:	e3e0c000 	mvn	ip, #0
    d69c:	ea000002 	b	d6ac <__cmpdf2+0x4>

0000d6a0 <__ledf2>:
    d6a0:	e3a0c001 	mov	ip, #1
    d6a4:	ea000000 	b	d6ac <__cmpdf2+0x4>

0000d6a8 <__cmpdf2>:
    d6a8:	e3a0c001 	mov	ip, #1
    d6ac:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    d6b0:	e1a0c081 	lsl	ip, r1, #1
    d6b4:	e1f0cacc 	mvns	ip, ip, asr #21
    d6b8:	e1a0c083 	lsl	ip, r3, #1
    d6bc:	11f0cacc 	mvnsne	ip, ip, asr #21
    d6c0:	0a00000e 	beq	d700 <__cmpdf2+0x58>
    d6c4:	e28dd004 	add	sp, sp, #4
    d6c8:	e190c081 	orrs	ip, r0, r1, lsl #1
    d6cc:	0192c083 	orrseq	ip, r2, r3, lsl #1
    d6d0:	11310003 	teqne	r1, r3
    d6d4:	01300002 	teqeq	r0, r2
    d6d8:	03a00000 	moveq	r0, #0
    d6dc:	012fff1e 	bxeq	lr
    d6e0:	e3700000 	cmn	r0, #0
    d6e4:	e1310003 	teq	r1, r3
    d6e8:	51510003 	cmppl	r1, r3
    d6ec:	01500002 	cmpeq	r0, r2
    d6f0:	21a00fc3 	asrcs	r0, r3, #31
    d6f4:	31e00fc3 	mvncc	r0, r3, asr #31
    d6f8:	e3800001 	orr	r0, r0, #1
    d6fc:	e12fff1e 	bx	lr
    d700:	e1a0c081 	lsl	ip, r1, #1
    d704:	e1f0cacc 	mvns	ip, ip, asr #21
    d708:	1a000001 	bne	d714 <__cmpdf2+0x6c>
    d70c:	e190c601 	orrs	ip, r0, r1, lsl #12
    d710:	1a000004 	bne	d728 <__cmpdf2+0x80>
    d714:	e1a0c083 	lsl	ip, r3, #1
    d718:	e1f0cacc 	mvns	ip, ip, asr #21
    d71c:	1affffe8 	bne	d6c4 <__cmpdf2+0x1c>
    d720:	e192c603 	orrs	ip, r2, r3, lsl #12
    d724:	0affffe6 	beq	d6c4 <__cmpdf2+0x1c>
    d728:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    d72c:	e12fff1e 	bx	lr

0000d730 <__aeabi_cdrcmple>:
    d730:	e1a0c000 	mov	ip, r0
    d734:	e1a00002 	mov	r0, r2
    d738:	e1a0200c 	mov	r2, ip
    d73c:	e1a0c001 	mov	ip, r1
    d740:	e1a01003 	mov	r1, r3
    d744:	e1a0300c 	mov	r3, ip
    d748:	eaffffff 	b	d74c <__aeabi_cdcmpeq>

0000d74c <__aeabi_cdcmpeq>:
    d74c:	e92d4001 	push	{r0, lr}
    d750:	ebffffd4 	bl	d6a8 <__cmpdf2>
    d754:	e3500000 	cmp	r0, #0
    d758:	43700000 	cmnmi	r0, #0
    d75c:	e8bd4001 	pop	{r0, lr}
    d760:	e12fff1e 	bx	lr

0000d764 <__aeabi_dcmpeq>:
    d764:	e52de008 	str	lr, [sp, #-8]!
    d768:	ebfffff7 	bl	d74c <__aeabi_cdcmpeq>
    d76c:	03a00001 	moveq	r0, #1
    d770:	13a00000 	movne	r0, #0
    d774:	e49de008 	ldr	lr, [sp], #8
    d778:	e12fff1e 	bx	lr

0000d77c <__aeabi_dcmplt>:
    d77c:	e52de008 	str	lr, [sp, #-8]!
    d780:	ebfffff1 	bl	d74c <__aeabi_cdcmpeq>
    d784:	33a00001 	movcc	r0, #1
    d788:	23a00000 	movcs	r0, #0
    d78c:	e49de008 	ldr	lr, [sp], #8
    d790:	e12fff1e 	bx	lr

0000d794 <__aeabi_dcmple>:
    d794:	e52de008 	str	lr, [sp, #-8]!
    d798:	ebffffeb 	bl	d74c <__aeabi_cdcmpeq>
    d79c:	93a00001 	movls	r0, #1
    d7a0:	83a00000 	movhi	r0, #0
    d7a4:	e49de008 	ldr	lr, [sp], #8
    d7a8:	e12fff1e 	bx	lr

0000d7ac <__aeabi_dcmpge>:
    d7ac:	e52de008 	str	lr, [sp, #-8]!
    d7b0:	ebffffde 	bl	d730 <__aeabi_cdrcmple>
    d7b4:	93a00001 	movls	r0, #1
    d7b8:	83a00000 	movhi	r0, #0
    d7bc:	e49de008 	ldr	lr, [sp], #8
    d7c0:	e12fff1e 	bx	lr

0000d7c4 <__aeabi_dcmpgt>:
    d7c4:	e52de008 	str	lr, [sp, #-8]!
    d7c8:	ebffffd8 	bl	d730 <__aeabi_cdrcmple>
    d7cc:	33a00001 	movcc	r0, #1
    d7d0:	23a00000 	movcs	r0, #0
    d7d4:	e49de008 	ldr	lr, [sp], #8
    d7d8:	e12fff1e 	bx	lr

0000d7dc <__aeabi_d2iz>:
    d7dc:	e1a02081 	lsl	r2, r1, #1
    d7e0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    d7e4:	2a00000c 	bcs	d81c <__aeabi_d2iz+0x40>
    d7e8:	5a000009 	bpl	d814 <__aeabi_d2iz+0x38>
    d7ec:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    d7f0:	e0532ac2 	subs	r2, r3, r2, asr #21
    d7f4:	9a00000a 	bls	d824 <__aeabi_d2iz+0x48>
    d7f8:	e1a03581 	lsl	r3, r1, #11
    d7fc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    d800:	e1833aa0 	orr	r3, r3, r0, lsr #21
    d804:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    d808:	e1a00233 	lsr	r0, r3, r2
    d80c:	12600000 	rsbne	r0, r0, #0
    d810:	e12fff1e 	bx	lr
    d814:	e3a00000 	mov	r0, #0
    d818:	e12fff1e 	bx	lr
    d81c:	e1900601 	orrs	r0, r0, r1, lsl #12
    d820:	1a000002 	bne	d830 <__aeabi_d2iz+0x54>
    d824:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    d828:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    d82c:	e12fff1e 	bx	lr
    d830:	e3a00000 	mov	r0, #0
    d834:	e12fff1e 	bx	lr

0000d838 <__aeabi_uldivmod>:
    d838:	e3530000 	cmp	r3, #0
    d83c:	03520000 	cmpeq	r2, #0
    d840:	1a000004 	bne	d858 <__aeabi_uldivmod+0x20>
    d844:	e3510000 	cmp	r1, #0
    d848:	03500000 	cmpeq	r0, #0
    d84c:	13e01000 	mvnne	r1, #0
    d850:	13e00000 	mvnne	r0, #0
    d854:	ea00021f 	b	e0d8 <____aeabi_ldiv0_from_arm>
    d858:	e24dd008 	sub	sp, sp, #8
    d85c:	e92d6000 	push	{sp, lr}
    d860:	eb00025d 	bl	e1dc <____gnu_uldivmod_helper_from_arm>
    d864:	e59de004 	ldr	lr, [sp, #4]
    d868:	e28dd008 	add	sp, sp, #8
    d86c:	e8bd000c 	pop	{r2, r3}
    d870:	e12fff1e 	bx	lr

0000d874 <__gnu_ldivmod_helper>:
    d874:	b5f0      	push	{r4, r5, r6, r7, lr}
    d876:	b083      	sub	sp, #12
    d878:	1c1d      	adds	r5, r3, #0
    d87a:	1c14      	adds	r4, r2, #0
    d87c:	9000      	str	r0, [sp, #0]
    d87e:	9101      	str	r1, [sp, #4]
    d880:	f000 f856 	bl	d930 <__divdi3>
    d884:	1c2b      	adds	r3, r5, #0
    d886:	1c22      	adds	r2, r4, #0
    d888:	1c06      	adds	r6, r0, #0
    d88a:	1c0f      	adds	r7, r1, #0
    d88c:	f000 f82a 	bl	d8e4 <__aeabi_lmul>
    d890:	9b00      	ldr	r3, [sp, #0]
    d892:	9c01      	ldr	r4, [sp, #4]
    d894:	9a08      	ldr	r2, [sp, #32]
    d896:	1a1b      	subs	r3, r3, r0
    d898:	418c      	sbcs	r4, r1
    d89a:	b003      	add	sp, #12
    d89c:	1c30      	adds	r0, r6, #0
    d89e:	1c39      	adds	r1, r7, #0
    d8a0:	6013      	str	r3, [r2, #0]
    d8a2:	6054      	str	r4, [r2, #4]
    d8a4:	bcf0      	pop	{r4, r5, r6, r7}
    d8a6:	bc04      	pop	{r2}
    d8a8:	4710      	bx	r2
    d8aa:	46c0      	nop			; (mov r8, r8)

0000d8ac <__gnu_uldivmod_helper>:
    d8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8ae:	b083      	sub	sp, #12
    d8b0:	1c1d      	adds	r5, r3, #0
    d8b2:	1c14      	adds	r4, r2, #0
    d8b4:	9000      	str	r0, [sp, #0]
    d8b6:	9101      	str	r1, [sp, #4]
    d8b8:	f000 fa0e 	bl	dcd8 <__udivdi3>
    d8bc:	1c2b      	adds	r3, r5, #0
    d8be:	1c22      	adds	r2, r4, #0
    d8c0:	1c06      	adds	r6, r0, #0
    d8c2:	1c0f      	adds	r7, r1, #0
    d8c4:	f000 f80e 	bl	d8e4 <__aeabi_lmul>
    d8c8:	9b00      	ldr	r3, [sp, #0]
    d8ca:	9c01      	ldr	r4, [sp, #4]
    d8cc:	9a08      	ldr	r2, [sp, #32]
    d8ce:	1a1b      	subs	r3, r3, r0
    d8d0:	418c      	sbcs	r4, r1
    d8d2:	b003      	add	sp, #12
    d8d4:	1c30      	adds	r0, r6, #0
    d8d6:	1c39      	adds	r1, r7, #0
    d8d8:	6013      	str	r3, [r2, #0]
    d8da:	6054      	str	r4, [r2, #4]
    d8dc:	bcf0      	pop	{r4, r5, r6, r7}
    d8de:	bc04      	pop	{r2}
    d8e0:	4710      	bx	r2
    d8e2:	46c0      	nop			; (mov r8, r8)

0000d8e4 <__aeabi_lmul>:
    d8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8e6:	0406      	lsls	r6, r0, #16
    d8e8:	0415      	lsls	r5, r2, #16
    d8ea:	0c2f      	lsrs	r7, r5, #16
    d8ec:	1c04      	adds	r4, r0, #0
    d8ee:	0c15      	lsrs	r5, r2, #16
    d8f0:	0c00      	lsrs	r0, r0, #16
    d8f2:	469c      	mov	ip, r3
    d8f4:	0c33      	lsrs	r3, r6, #16
    d8f6:	1c1e      	adds	r6, r3, #0
    d8f8:	437e      	muls	r6, r7
    d8fa:	436b      	muls	r3, r5
    d8fc:	4347      	muls	r7, r0
    d8fe:	4345      	muls	r5, r0
    d900:	18fb      	adds	r3, r7, r3
    d902:	0c30      	lsrs	r0, r6, #16
    d904:	1818      	adds	r0, r3, r0
    d906:	4287      	cmp	r7, r0
    d908:	d902      	bls.n	d910 <__aeabi_lmul+0x2c>
    d90a:	2380      	movs	r3, #128	; 0x80
    d90c:	025f      	lsls	r7, r3, #9
    d90e:	19ed      	adds	r5, r5, r7
    d910:	0433      	lsls	r3, r6, #16
    d912:	1c26      	adds	r6, r4, #0
    d914:	4664      	mov	r4, ip
    d916:	4374      	muls	r4, r6
    d918:	4351      	muls	r1, r2
    d91a:	0c07      	lsrs	r7, r0, #16
    d91c:	19ed      	adds	r5, r5, r7
    d91e:	1861      	adds	r1, r4, r1
    d920:	0c1f      	lsrs	r7, r3, #16
    d922:	0400      	lsls	r0, r0, #16
    d924:	19c0      	adds	r0, r0, r7
    d926:	1949      	adds	r1, r1, r5
    d928:	bcf0      	pop	{r4, r5, r6, r7}
    d92a:	bc04      	pop	{r2}
    d92c:	4710      	bx	r2
    d92e:	46c0      	nop			; (mov r8, r8)

0000d930 <__divdi3>:
    d930:	b5f0      	push	{r4, r5, r6, r7, lr}
    d932:	465f      	mov	r7, fp
    d934:	4656      	mov	r6, sl
    d936:	464d      	mov	r5, r9
    d938:	4644      	mov	r4, r8
    d93a:	b4f0      	push	{r4, r5, r6, r7}
    d93c:	1c04      	adds	r4, r0, #0
    d93e:	2000      	movs	r0, #0
    d940:	1c0d      	adds	r5, r1, #0
    d942:	4680      	mov	r8, r0
    d944:	b085      	sub	sp, #20
    d946:	1c19      	adds	r1, r3, #0
    d948:	4545      	cmp	r5, r8
    d94a:	da00      	bge.n	d94e <__divdi3+0x1e>
    d94c:	e0df      	b.n	db0e <__divdi3+0x1de>
    d94e:	2900      	cmp	r1, #0
    d950:	da00      	bge.n	d954 <__divdi3+0x24>
    d952:	e0d3      	b.n	dafc <__divdi3+0x1cc>
    d954:	46a3      	mov	fp, r4
    d956:	1c27      	adds	r7, r4, #0
    d958:	46a9      	mov	r9, r5
    d95a:	4692      	mov	sl, r2
    d95c:	1c16      	adds	r6, r2, #0
    d95e:	1c2c      	adds	r4, r5, #0
    d960:	1e1d      	subs	r5, r3, #0
    d962:	d14f      	bne.n	da04 <__divdi3+0xd4>
    d964:	454a      	cmp	r2, r9
    d966:	d800      	bhi.n	d96a <__divdi3+0x3a>
    d968:	e07a      	b.n	da60 <__divdi3+0x130>
    d96a:	1c10      	adds	r0, r2, #0
    d96c:	f000 fbaa 	bl	e0c4 <____clzsi2_from_thumb>
    d970:	2800      	cmp	r0, #0
    d972:	d007      	beq.n	d984 <__divdi3+0x54>
    d974:	2520      	movs	r5, #32
    d976:	1a2a      	subs	r2, r5, r0
    d978:	4659      	mov	r1, fp
    d97a:	4084      	lsls	r4, r0
    d97c:	40d1      	lsrs	r1, r2
    d97e:	4086      	lsls	r6, r0
    d980:	430c      	orrs	r4, r1
    d982:	4087      	lsls	r7, r0
    d984:	0c35      	lsrs	r5, r6, #16
    d986:	0430      	lsls	r0, r6, #16
    d988:	0c03      	lsrs	r3, r0, #16
    d98a:	1c29      	adds	r1, r5, #0
    d98c:	1c20      	adds	r0, r4, #0
    d98e:	469b      	mov	fp, r3
    d990:	f000 fbc4 	bl	e11c <____aeabi_uidiv_from_thumb>
    d994:	465a      	mov	r2, fp
    d996:	4342      	muls	r2, r0
    d998:	4681      	mov	r9, r0
    d99a:	1c29      	adds	r1, r5, #0
    d99c:	1c20      	adds	r0, r4, #0
    d99e:	4692      	mov	sl, r2
    d9a0:	f000 fb72 	bl	e088 <____aeabi_uidivmod_from_thumb>
    d9a4:	0c3c      	lsrs	r4, r7, #16
    d9a6:	0409      	lsls	r1, r1, #16
    d9a8:	4321      	orrs	r1, r4
    d9aa:	458a      	cmp	sl, r1
    d9ac:	d909      	bls.n	d9c2 <__divdi3+0x92>
    d9ae:	2401      	movs	r4, #1
    d9b0:	4263      	negs	r3, r4
    d9b2:	1989      	adds	r1, r1, r6
    d9b4:	4499      	add	r9, r3
    d9b6:	428e      	cmp	r6, r1
    d9b8:	d803      	bhi.n	d9c2 <__divdi3+0x92>
    d9ba:	458a      	cmp	sl, r1
    d9bc:	d901      	bls.n	d9c2 <__divdi3+0x92>
    d9be:	4499      	add	r9, r3
    d9c0:	1989      	adds	r1, r1, r6
    d9c2:	4650      	mov	r0, sl
    d9c4:	1a08      	subs	r0, r1, r0
    d9c6:	1c29      	adds	r1, r5, #0
    d9c8:	4682      	mov	sl, r0
    d9ca:	f000 fba7 	bl	e11c <____aeabi_uidiv_from_thumb>
    d9ce:	4659      	mov	r1, fp
    d9d0:	4341      	muls	r1, r0
    d9d2:	1c04      	adds	r4, r0, #0
    d9d4:	468b      	mov	fp, r1
    d9d6:	4650      	mov	r0, sl
    d9d8:	1c29      	adds	r1, r5, #0
    d9da:	f000 fb55 	bl	e088 <____aeabi_uidivmod_from_thumb>
    d9de:	043f      	lsls	r7, r7, #16
    d9e0:	0409      	lsls	r1, r1, #16
    d9e2:	0c3f      	lsrs	r7, r7, #16
    d9e4:	430f      	orrs	r7, r1
    d9e6:	45bb      	cmp	fp, r7
    d9e8:	d907      	bls.n	d9fa <__divdi3+0xca>
    d9ea:	19bf      	adds	r7, r7, r6
    d9ec:	3c01      	subs	r4, #1
    d9ee:	42be      	cmp	r6, r7
    d9f0:	d803      	bhi.n	d9fa <__divdi3+0xca>
    d9f2:	455f      	cmp	r7, fp
    d9f4:	41ad      	sbcs	r5, r5
    d9f6:	426e      	negs	r6, r5
    d9f8:	1ba4      	subs	r4, r4, r6
    d9fa:	464b      	mov	r3, r9
    d9fc:	041a      	lsls	r2, r3, #16
    d9fe:	4322      	orrs	r2, r4
    da00:	2500      	movs	r5, #0
    da02:	e003      	b.n	da0c <__divdi3+0xdc>
    da04:	454d      	cmp	r5, r9
    da06:	d916      	bls.n	da36 <__divdi3+0x106>
    da08:	2500      	movs	r5, #0
    da0a:	1c2a      	adds	r2, r5, #0
    da0c:	1c13      	adds	r3, r2, #0
    da0e:	2200      	movs	r2, #0
    da10:	1c2c      	adds	r4, r5, #0
    da12:	4590      	cmp	r8, r2
    da14:	d004      	beq.n	da20 <__divdi3+0xf0>
    da16:	1c19      	adds	r1, r3, #0
    da18:	1c2a      	adds	r2, r5, #0
    da1a:	2400      	movs	r4, #0
    da1c:	424b      	negs	r3, r1
    da1e:	4194      	sbcs	r4, r2
    da20:	b005      	add	sp, #20
    da22:	1c18      	adds	r0, r3, #0
    da24:	1c21      	adds	r1, r4, #0
    da26:	bc3c      	pop	{r2, r3, r4, r5}
    da28:	4690      	mov	r8, r2
    da2a:	4699      	mov	r9, r3
    da2c:	46a2      	mov	sl, r4
    da2e:	46ab      	mov	fp, r5
    da30:	bcf0      	pop	{r4, r5, r6, r7}
    da32:	bc04      	pop	{r2}
    da34:	4710      	bx	r2
    da36:	1c18      	adds	r0, r3, #0
    da38:	f000 fb44 	bl	e0c4 <____clzsi2_from_thumb>
    da3c:	1e04      	subs	r4, r0, #0
    da3e:	d000      	beq.n	da42 <__divdi3+0x112>
    da40:	e0c1      	b.n	dbc6 <__divdi3+0x296>
    da42:	465f      	mov	r7, fp
    da44:	4650      	mov	r0, sl
    da46:	4287      	cmp	r7, r0
    da48:	4164      	adcs	r4, r4
    da4a:	0624      	lsls	r4, r4, #24
    da4c:	2c00      	cmp	r4, #0
    da4e:	d104      	bne.n	da5a <__divdi3+0x12a>
    da50:	454d      	cmp	r5, r9
    da52:	41ad      	sbcs	r5, r5
    da54:	426d      	negs	r5, r5
    da56:	2d00      	cmp	r5, #0
    da58:	d0d7      	beq.n	da0a <__divdi3+0xda>
    da5a:	2500      	movs	r5, #0
    da5c:	2201      	movs	r2, #1
    da5e:	e7d5      	b.n	da0c <__divdi3+0xdc>
    da60:	2a00      	cmp	r2, #0
    da62:	d104      	bne.n	da6e <__divdi3+0x13e>
    da64:	2001      	movs	r0, #1
    da66:	1c11      	adds	r1, r2, #0
    da68:	f000 fb58 	bl	e11c <____aeabi_uidiv_from_thumb>
    da6c:	1c06      	adds	r6, r0, #0
    da6e:	1c30      	adds	r0, r6, #0
    da70:	f000 fb28 	bl	e0c4 <____clzsi2_from_thumb>
    da74:	2800      	cmp	r0, #0
    da76:	d153      	bne.n	db20 <__divdi3+0x1f0>
    da78:	0432      	lsls	r2, r6, #16
    da7a:	3001      	adds	r0, #1
    da7c:	1ba4      	subs	r4, r4, r6
    da7e:	0c13      	lsrs	r3, r2, #16
    da80:	9000      	str	r0, [sp, #0]
    da82:	46a3      	mov	fp, r4
    da84:	0c35      	lsrs	r5, r6, #16
    da86:	469a      	mov	sl, r3
    da88:	1c29      	adds	r1, r5, #0
    da8a:	4658      	mov	r0, fp
    da8c:	f000 fb46 	bl	e11c <____aeabi_uidiv_from_thumb>
    da90:	1c29      	adds	r1, r5, #0
    da92:	4681      	mov	r9, r0
    da94:	4654      	mov	r4, sl
    da96:	4344      	muls	r4, r0
    da98:	4658      	mov	r0, fp
    da9a:	f000 faf5 	bl	e088 <____aeabi_uidivmod_from_thumb>
    da9e:	0c3a      	lsrs	r2, r7, #16
    daa0:	0409      	lsls	r1, r1, #16
    daa2:	4311      	orrs	r1, r2
    daa4:	428c      	cmp	r4, r1
    daa6:	d908      	bls.n	daba <__divdi3+0x18a>
    daa8:	2001      	movs	r0, #1
    daaa:	4242      	negs	r2, r0
    daac:	1989      	adds	r1, r1, r6
    daae:	4491      	add	r9, r2
    dab0:	428e      	cmp	r6, r1
    dab2:	d802      	bhi.n	daba <__divdi3+0x18a>
    dab4:	428c      	cmp	r4, r1
    dab6:	d900      	bls.n	daba <__divdi3+0x18a>
    dab8:	e10a      	b.n	dcd0 <__divdi3+0x3a0>
    daba:	1b09      	subs	r1, r1, r4
    dabc:	468b      	mov	fp, r1
    dabe:	1c08      	adds	r0, r1, #0
    dac0:	1c29      	adds	r1, r5, #0
    dac2:	f000 fb2b 	bl	e11c <____aeabi_uidiv_from_thumb>
    dac6:	4653      	mov	r3, sl
    dac8:	4343      	muls	r3, r0
    daca:	1c29      	adds	r1, r5, #0
    dacc:	1c04      	adds	r4, r0, #0
    dace:	4658      	mov	r0, fp
    dad0:	469a      	mov	sl, r3
    dad2:	f000 fad9 	bl	e088 <____aeabi_uidivmod_from_thumb>
    dad6:	043f      	lsls	r7, r7, #16
    dad8:	040d      	lsls	r5, r1, #16
    dada:	0c3f      	lsrs	r7, r7, #16
    dadc:	432f      	orrs	r7, r5
    dade:	45ba      	cmp	sl, r7
    dae0:	d907      	bls.n	daf2 <__divdi3+0x1c2>
    dae2:	19bf      	adds	r7, r7, r6
    dae4:	3c01      	subs	r4, #1
    dae6:	42be      	cmp	r6, r7
    dae8:	d803      	bhi.n	daf2 <__divdi3+0x1c2>
    daea:	4557      	cmp	r7, sl
    daec:	4192      	sbcs	r2, r2
    daee:	4256      	negs	r6, r2
    daf0:	1ba4      	subs	r4, r4, r6
    daf2:	464e      	mov	r6, r9
    daf4:	0432      	lsls	r2, r6, #16
    daf6:	4322      	orrs	r2, r4
    daf8:	9d00      	ldr	r5, [sp, #0]
    dafa:	e787      	b.n	da0c <__divdi3+0xdc>
    dafc:	4647      	mov	r7, r8
    dafe:	43ff      	mvns	r7, r7
    db00:	1c10      	adds	r0, r2, #0
    db02:	1c19      	adds	r1, r3, #0
    db04:	46b8      	mov	r8, r7
    db06:	2300      	movs	r3, #0
    db08:	4242      	negs	r2, r0
    db0a:	418b      	sbcs	r3, r1
    db0c:	e722      	b.n	d954 <__divdi3+0x24>
    db0e:	3001      	adds	r0, #1
    db10:	1c26      	adds	r6, r4, #0
    db12:	1c2f      	adds	r7, r5, #0
    db14:	4240      	negs	r0, r0
    db16:	2500      	movs	r5, #0
    db18:	4274      	negs	r4, r6
    db1a:	41bd      	sbcs	r5, r7
    db1c:	4680      	mov	r8, r0
    db1e:	e716      	b.n	d94e <__divdi3+0x1e>
    db20:	2520      	movs	r5, #32
    db22:	1a2b      	subs	r3, r5, r0
    db24:	1c3a      	adds	r2, r7, #0
    db26:	40da      	lsrs	r2, r3
    db28:	1c15      	adds	r5, r2, #0
    db2a:	1c21      	adds	r1, r4, #0
    db2c:	4084      	lsls	r4, r0
    db2e:	4086      	lsls	r6, r0
    db30:	40d9      	lsrs	r1, r3
    db32:	4325      	orrs	r5, r4
    db34:	468b      	mov	fp, r1
    db36:	9500      	str	r5, [sp, #0]
    db38:	0431      	lsls	r1, r6, #16
    db3a:	0c35      	lsrs	r5, r6, #16
    db3c:	0c0b      	lsrs	r3, r1, #16
    db3e:	4087      	lsls	r7, r0
    db40:	1c29      	adds	r1, r5, #0
    db42:	4658      	mov	r0, fp
    db44:	469a      	mov	sl, r3
    db46:	f000 fae9 	bl	e11c <____aeabi_uidiv_from_thumb>
    db4a:	4653      	mov	r3, sl
    db4c:	4343      	muls	r3, r0
    db4e:	1c04      	adds	r4, r0, #0
    db50:	1c29      	adds	r1, r5, #0
    db52:	4658      	mov	r0, fp
    db54:	4699      	mov	r9, r3
    db56:	f000 fa97 	bl	e088 <____aeabi_uidivmod_from_thumb>
    db5a:	9b00      	ldr	r3, [sp, #0]
    db5c:	0409      	lsls	r1, r1, #16
    db5e:	0c18      	lsrs	r0, r3, #16
    db60:	4301      	orrs	r1, r0
    db62:	4589      	cmp	r9, r1
    db64:	d907      	bls.n	db76 <__divdi3+0x246>
    db66:	1989      	adds	r1, r1, r6
    db68:	3c01      	subs	r4, #1
    db6a:	428e      	cmp	r6, r1
    db6c:	d803      	bhi.n	db76 <__divdi3+0x246>
    db6e:	4589      	cmp	r9, r1
    db70:	d901      	bls.n	db76 <__divdi3+0x246>
    db72:	3c01      	subs	r4, #1
    db74:	1989      	adds	r1, r1, r6
    db76:	464a      	mov	r2, r9
    db78:	1a89      	subs	r1, r1, r2
    db7a:	9101      	str	r1, [sp, #4]
    db7c:	1c08      	adds	r0, r1, #0
    db7e:	1c29      	adds	r1, r5, #0
    db80:	f000 facc 	bl	e11c <____aeabi_uidiv_from_thumb>
    db84:	4653      	mov	r3, sl
    db86:	4343      	muls	r3, r0
    db88:	4681      	mov	r9, r0
    db8a:	1c29      	adds	r1, r5, #0
    db8c:	9801      	ldr	r0, [sp, #4]
    db8e:	469b      	mov	fp, r3
    db90:	f000 fa7a 	bl	e088 <____aeabi_uidivmod_from_thumb>
    db94:	9b00      	ldr	r3, [sp, #0]
    db96:	041a      	lsls	r2, r3, #16
    db98:	0409      	lsls	r1, r1, #16
    db9a:	0c10      	lsrs	r0, r2, #16
    db9c:	4301      	orrs	r1, r0
    db9e:	458b      	cmp	fp, r1
    dba0:	d909      	bls.n	dbb6 <__divdi3+0x286>
    dba2:	2001      	movs	r0, #1
    dba4:	4242      	negs	r2, r0
    dba6:	1989      	adds	r1, r1, r6
    dba8:	4491      	add	r9, r2
    dbaa:	428e      	cmp	r6, r1
    dbac:	d803      	bhi.n	dbb6 <__divdi3+0x286>
    dbae:	458b      	cmp	fp, r1
    dbb0:	d901      	bls.n	dbb6 <__divdi3+0x286>
    dbb2:	4491      	add	r9, r2
    dbb4:	1989      	adds	r1, r1, r6
    dbb6:	465b      	mov	r3, fp
    dbb8:	0424      	lsls	r4, r4, #16
    dbba:	4648      	mov	r0, r9
    dbbc:	1acb      	subs	r3, r1, r3
    dbbe:	4320      	orrs	r0, r4
    dbc0:	469b      	mov	fp, r3
    dbc2:	9000      	str	r0, [sp, #0]
    dbc4:	e760      	b.n	da88 <__divdi3+0x158>
    dbc6:	2620      	movs	r6, #32
    dbc8:	1b33      	subs	r3, r6, r4
    dbca:	4656      	mov	r6, sl
    dbcc:	40a5      	lsls	r5, r4
    dbce:	40de      	lsrs	r6, r3
    dbd0:	4651      	mov	r1, sl
    dbd2:	1c38      	adds	r0, r7, #0
    dbd4:	432e      	orrs	r6, r5
    dbd6:	40d8      	lsrs	r0, r3
    dbd8:	40a1      	lsls	r1, r4
    dbda:	464a      	mov	r2, r9
    dbdc:	464d      	mov	r5, r9
    dbde:	40da      	lsrs	r2, r3
    dbe0:	9100      	str	r1, [sp, #0]
    dbe2:	40a5      	lsls	r5, r4
    dbe4:	1c01      	adds	r1, r0, #0
    dbe6:	4693      	mov	fp, r2
    dbe8:	4329      	orrs	r1, r5
    dbea:	0432      	lsls	r2, r6, #16
    dbec:	0c35      	lsrs	r5, r6, #16
    dbee:	0c13      	lsrs	r3, r2, #16
    dbf0:	9101      	str	r1, [sp, #4]
    dbf2:	4658      	mov	r0, fp
    dbf4:	1c29      	adds	r1, r5, #0
    dbf6:	9302      	str	r3, [sp, #8]
    dbf8:	f000 fa90 	bl	e11c <____aeabi_uidiv_from_thumb>
    dbfc:	4682      	mov	sl, r0
    dbfe:	9802      	ldr	r0, [sp, #8]
    dc00:	4651      	mov	r1, sl
    dc02:	4341      	muls	r1, r0
    dc04:	4658      	mov	r0, fp
    dc06:	4689      	mov	r9, r1
    dc08:	1c29      	adds	r1, r5, #0
    dc0a:	f000 fa3d 	bl	e088 <____aeabi_uidivmod_from_thumb>
    dc0e:	9a01      	ldr	r2, [sp, #4]
    dc10:	0409      	lsls	r1, r1, #16
    dc12:	0c13      	lsrs	r3, r2, #16
    dc14:	4319      	orrs	r1, r3
    dc16:	4589      	cmp	r9, r1
    dc18:	d909      	bls.n	dc2e <__divdi3+0x2fe>
    dc1a:	2001      	movs	r0, #1
    dc1c:	4242      	negs	r2, r0
    dc1e:	1989      	adds	r1, r1, r6
    dc20:	4492      	add	sl, r2
    dc22:	428e      	cmp	r6, r1
    dc24:	d803      	bhi.n	dc2e <__divdi3+0x2fe>
    dc26:	4589      	cmp	r9, r1
    dc28:	d901      	bls.n	dc2e <__divdi3+0x2fe>
    dc2a:	4492      	add	sl, r2
    dc2c:	1989      	adds	r1, r1, r6
    dc2e:	464b      	mov	r3, r9
    dc30:	1acb      	subs	r3, r1, r3
    dc32:	1c18      	adds	r0, r3, #0
    dc34:	1c29      	adds	r1, r5, #0
    dc36:	9303      	str	r3, [sp, #12]
    dc38:	f000 fa70 	bl	e11c <____aeabi_uidiv_from_thumb>
    dc3c:	9902      	ldr	r1, [sp, #8]
    dc3e:	4683      	mov	fp, r0
    dc40:	4658      	mov	r0, fp
    dc42:	4348      	muls	r0, r1
    dc44:	1c29      	adds	r1, r5, #0
    dc46:	4681      	mov	r9, r0
    dc48:	9803      	ldr	r0, [sp, #12]
    dc4a:	f000 fa1d 	bl	e088 <____aeabi_uidivmod_from_thumb>
    dc4e:	9a01      	ldr	r2, [sp, #4]
    dc50:	0413      	lsls	r3, r2, #16
    dc52:	0409      	lsls	r1, r1, #16
    dc54:	0c1d      	lsrs	r5, r3, #16
    dc56:	4329      	orrs	r1, r5
    dc58:	4589      	cmp	r9, r1
    dc5a:	d905      	bls.n	dc68 <__divdi3+0x338>
    dc5c:	2501      	movs	r5, #1
    dc5e:	426b      	negs	r3, r5
    dc60:	1989      	adds	r1, r1, r6
    dc62:	449b      	add	fp, r3
    dc64:	428e      	cmp	r6, r1
    dc66:	d92e      	bls.n	dcc6 <__divdi3+0x396>
    dc68:	464e      	mov	r6, r9
    dc6a:	4650      	mov	r0, sl
    dc6c:	1b8e      	subs	r6, r1, r6
    dc6e:	0402      	lsls	r2, r0, #16
    dc70:	4659      	mov	r1, fp
    dc72:	430a      	orrs	r2, r1
    dc74:	9900      	ldr	r1, [sp, #0]
    dc76:	0415      	lsls	r5, r2, #16
    dc78:	0408      	lsls	r0, r1, #16
    dc7a:	0c2b      	lsrs	r3, r5, #16
    dc7c:	0c00      	lsrs	r0, r0, #16
    dc7e:	0c15      	lsrs	r5, r2, #16
    dc80:	46b1      	mov	r9, r6
    dc82:	0c0e      	lsrs	r6, r1, #16
    dc84:	1c01      	adds	r1, r0, #0
    dc86:	4359      	muls	r1, r3
    dc88:	4373      	muls	r3, r6
    dc8a:	4368      	muls	r0, r5
    dc8c:	4375      	muls	r5, r6
    dc8e:	18c3      	adds	r3, r0, r3
    dc90:	0c0e      	lsrs	r6, r1, #16
    dc92:	199b      	adds	r3, r3, r6
    dc94:	468c      	mov	ip, r1
    dc96:	4298      	cmp	r0, r3
    dc98:	d902      	bls.n	dca0 <__divdi3+0x370>
    dc9a:	2080      	movs	r0, #128	; 0x80
    dc9c:	0241      	lsls	r1, r0, #9
    dc9e:	186d      	adds	r5, r5, r1
    dca0:	0c1e      	lsrs	r6, r3, #16
    dca2:	19ad      	adds	r5, r5, r6
    dca4:	45a9      	cmp	r9, r5
    dca6:	d30b      	bcc.n	dcc0 <__divdi3+0x390>
    dca8:	d001      	beq.n	dcae <__divdi3+0x37e>
    dcaa:	2500      	movs	r5, #0
    dcac:	e6ae      	b.n	da0c <__divdi3+0xdc>
    dcae:	40a7      	lsls	r7, r4
    dcb0:	1c3c      	adds	r4, r7, #0
    dcb2:	4667      	mov	r7, ip
    dcb4:	0439      	lsls	r1, r7, #16
    dcb6:	041d      	lsls	r5, r3, #16
    dcb8:	0c0f      	lsrs	r7, r1, #16
    dcba:	19eb      	adds	r3, r5, r7
    dcbc:	429c      	cmp	r4, r3
    dcbe:	d2f4      	bcs.n	dcaa <__divdi3+0x37a>
    dcc0:	3a01      	subs	r2, #1
    dcc2:	2500      	movs	r5, #0
    dcc4:	e6a2      	b.n	da0c <__divdi3+0xdc>
    dcc6:	4589      	cmp	r9, r1
    dcc8:	d9ce      	bls.n	dc68 <__divdi3+0x338>
    dcca:	449b      	add	fp, r3
    dccc:	1989      	adds	r1, r1, r6
    dcce:	e7cb      	b.n	dc68 <__divdi3+0x338>
    dcd0:	4491      	add	r9, r2
    dcd2:	1989      	adds	r1, r1, r6
    dcd4:	e6f1      	b.n	daba <__divdi3+0x18a>
    dcd6:	46c0      	nop			; (mov r8, r8)

0000dcd8 <__udivdi3>:
    dcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcda:	465f      	mov	r7, fp
    dcdc:	4656      	mov	r6, sl
    dcde:	464d      	mov	r5, r9
    dce0:	4644      	mov	r4, r8
    dce2:	b4f0      	push	{r4, r5, r6, r7}
    dce4:	b083      	sub	sp, #12
    dce6:	4680      	mov	r8, r0
    dce8:	1c0d      	adds	r5, r1, #0
    dcea:	1c17      	adds	r7, r2, #0
    dcec:	1c1e      	adds	r6, r3, #0
    dcee:	1c14      	adds	r4, r2, #0
    dcf0:	4681      	mov	r9, r0
    dcf2:	468a      	mov	sl, r1
    dcf4:	2b00      	cmp	r3, #0
    dcf6:	d15b      	bne.n	ddb0 <__udivdi3+0xd8>
    dcf8:	4552      	cmp	r2, sl
    dcfa:	d96e      	bls.n	ddda <__udivdi3+0x102>
    dcfc:	1c10      	adds	r0, r2, #0
    dcfe:	f000 f9e1 	bl	e0c4 <____clzsi2_from_thumb>
    dd02:	2800      	cmp	r0, #0
    dd04:	d00c      	beq.n	dd20 <__udivdi3+0x48>
    dd06:	2620      	movs	r6, #32
    dd08:	1c2b      	adds	r3, r5, #0
    dd0a:	4641      	mov	r1, r8
    dd0c:	1a35      	subs	r5, r6, r0
    dd0e:	40e9      	lsrs	r1, r5
    dd10:	4083      	lsls	r3, r0
    dd12:	1c0a      	adds	r2, r1, #0
    dd14:	431a      	orrs	r2, r3
    dd16:	4692      	mov	sl, r2
    dd18:	4642      	mov	r2, r8
    dd1a:	4082      	lsls	r2, r0
    dd1c:	4084      	lsls	r4, r0
    dd1e:	4691      	mov	r9, r2
    dd20:	0c25      	lsrs	r5, r4, #16
    dd22:	0427      	lsls	r7, r4, #16
    dd24:	0c3b      	lsrs	r3, r7, #16
    dd26:	1c29      	adds	r1, r5, #0
    dd28:	4650      	mov	r0, sl
    dd2a:	469b      	mov	fp, r3
    dd2c:	f000 f9f6 	bl	e11c <____aeabi_uidiv_from_thumb>
    dd30:	1c29      	adds	r1, r5, #0
    dd32:	1c07      	adds	r7, r0, #0
    dd34:	465e      	mov	r6, fp
    dd36:	4346      	muls	r6, r0
    dd38:	4650      	mov	r0, sl
    dd3a:	f000 f9a5 	bl	e088 <____aeabi_uidivmod_from_thumb>
    dd3e:	464a      	mov	r2, r9
    dd40:	0409      	lsls	r1, r1, #16
    dd42:	0c10      	lsrs	r0, r2, #16
    dd44:	4301      	orrs	r1, r0
    dd46:	428e      	cmp	r6, r1
    dd48:	d907      	bls.n	dd5a <__udivdi3+0x82>
    dd4a:	1909      	adds	r1, r1, r4
    dd4c:	3f01      	subs	r7, #1
    dd4e:	428c      	cmp	r4, r1
    dd50:	d803      	bhi.n	dd5a <__udivdi3+0x82>
    dd52:	428e      	cmp	r6, r1
    dd54:	d901      	bls.n	dd5a <__udivdi3+0x82>
    dd56:	3f01      	subs	r7, #1
    dd58:	1909      	adds	r1, r1, r4
    dd5a:	1b89      	subs	r1, r1, r6
    dd5c:	4688      	mov	r8, r1
    dd5e:	1c08      	adds	r0, r1, #0
    dd60:	1c29      	adds	r1, r5, #0
    dd62:	f000 f9db 	bl	e11c <____aeabi_uidiv_from_thumb>
    dd66:	465b      	mov	r3, fp
    dd68:	4343      	muls	r3, r0
    dd6a:	1c29      	adds	r1, r5, #0
    dd6c:	1c06      	adds	r6, r0, #0
    dd6e:	4640      	mov	r0, r8
    dd70:	469b      	mov	fp, r3
    dd72:	f000 f989 	bl	e088 <____aeabi_uidivmod_from_thumb>
    dd76:	464d      	mov	r5, r9
    dd78:	0428      	lsls	r0, r5, #16
    dd7a:	0409      	lsls	r1, r1, #16
    dd7c:	0c05      	lsrs	r5, r0, #16
    dd7e:	4329      	orrs	r1, r5
    dd80:	458b      	cmp	fp, r1
    dd82:	d907      	bls.n	dd94 <__udivdi3+0xbc>
    dd84:	1909      	adds	r1, r1, r4
    dd86:	3e01      	subs	r6, #1
    dd88:	428c      	cmp	r4, r1
    dd8a:	d803      	bhi.n	dd94 <__udivdi3+0xbc>
    dd8c:	4559      	cmp	r1, fp
    dd8e:	4192      	sbcs	r2, r2
    dd90:	4254      	negs	r4, r2
    dd92:	1b36      	subs	r6, r6, r4
    dd94:	043f      	lsls	r7, r7, #16
    dd96:	433e      	orrs	r6, r7
    dd98:	2300      	movs	r3, #0
    dd9a:	b003      	add	sp, #12
    dd9c:	1c30      	adds	r0, r6, #0
    dd9e:	1c19      	adds	r1, r3, #0
    dda0:	bc3c      	pop	{r2, r3, r4, r5}
    dda2:	4690      	mov	r8, r2
    dda4:	4699      	mov	r9, r3
    dda6:	46a2      	mov	sl, r4
    dda8:	46ab      	mov	fp, r5
    ddaa:	bcf0      	pop	{r4, r5, r6, r7}
    ddac:	bc04      	pop	{r2}
    ddae:	4710      	bx	r2
    ddb0:	42ab      	cmp	r3, r5
    ddb2:	d860      	bhi.n	de76 <__udivdi3+0x19e>
    ddb4:	1c18      	adds	r0, r3, #0
    ddb6:	f000 f985 	bl	e0c4 <____clzsi2_from_thumb>
    ddba:	1e04      	subs	r4, r0, #0
    ddbc:	d15e      	bne.n	de7c <__udivdi3+0x1a4>
    ddbe:	4643      	mov	r3, r8
    ddc0:	42bb      	cmp	r3, r7
    ddc2:	4164      	adcs	r4, r4
    ddc4:	0627      	lsls	r7, r4, #24
    ddc6:	2f00      	cmp	r7, #0
    ddc8:	d104      	bne.n	ddd4 <__udivdi3+0xfc>
    ddca:	42ae      	cmp	r6, r5
    ddcc:	41ad      	sbcs	r5, r5
    ddce:	426b      	negs	r3, r5
    ddd0:	2b00      	cmp	r3, #0
    ddd2:	d051      	beq.n	de78 <__udivdi3+0x1a0>
    ddd4:	2300      	movs	r3, #0
    ddd6:	2601      	movs	r6, #1
    ddd8:	e7df      	b.n	dd9a <__udivdi3+0xc2>
    ddda:	2a00      	cmp	r2, #0
    dddc:	d104      	bne.n	dde8 <__udivdi3+0x110>
    ddde:	2001      	movs	r0, #1
    dde0:	1c11      	adds	r1, r2, #0
    dde2:	f000 f99b 	bl	e11c <____aeabi_uidiv_from_thumb>
    dde6:	1c04      	adds	r4, r0, #0
    dde8:	1c20      	adds	r0, r4, #0
    ddea:	f000 f96b 	bl	e0c4 <____clzsi2_from_thumb>
    ddee:	2800      	cmp	r0, #0
    ddf0:	d000      	beq.n	ddf4 <__udivdi3+0x11c>
    ddf2:	e0b8      	b.n	df66 <__udivdi3+0x28e>
    ddf4:	0426      	lsls	r6, r4, #16
    ddf6:	1b2d      	subs	r5, r5, r4
    ddf8:	0c33      	lsrs	r3, r6, #16
    ddfa:	2101      	movs	r1, #1
    ddfc:	46aa      	mov	sl, r5
    ddfe:	0c27      	lsrs	r7, r4, #16
    de00:	4698      	mov	r8, r3
    de02:	468b      	mov	fp, r1
    de04:	1c39      	adds	r1, r7, #0
    de06:	4650      	mov	r0, sl
    de08:	f000 f988 	bl	e11c <____aeabi_uidiv_from_thumb>
    de0c:	1c39      	adds	r1, r7, #0
    de0e:	1c06      	adds	r6, r0, #0
    de10:	4645      	mov	r5, r8
    de12:	4345      	muls	r5, r0
    de14:	4650      	mov	r0, sl
    de16:	f000 f937 	bl	e088 <____aeabi_uidivmod_from_thumb>
    de1a:	464a      	mov	r2, r9
    de1c:	0409      	lsls	r1, r1, #16
    de1e:	0c10      	lsrs	r0, r2, #16
    de20:	4301      	orrs	r1, r0
    de22:	428d      	cmp	r5, r1
    de24:	d906      	bls.n	de34 <__udivdi3+0x15c>
    de26:	1909      	adds	r1, r1, r4
    de28:	3e01      	subs	r6, #1
    de2a:	428c      	cmp	r4, r1
    de2c:	d802      	bhi.n	de34 <__udivdi3+0x15c>
    de2e:	428d      	cmp	r5, r1
    de30:	d900      	bls.n	de34 <__udivdi3+0x15c>
    de32:	e0ed      	b.n	e010 <__udivdi3+0x338>
    de34:	1b49      	subs	r1, r1, r5
    de36:	468a      	mov	sl, r1
    de38:	1c08      	adds	r0, r1, #0
    de3a:	1c39      	adds	r1, r7, #0
    de3c:	f000 f96e 	bl	e11c <____aeabi_uidiv_from_thumb>
    de40:	4643      	mov	r3, r8
    de42:	4343      	muls	r3, r0
    de44:	1c39      	adds	r1, r7, #0
    de46:	1c05      	adds	r5, r0, #0
    de48:	4650      	mov	r0, sl
    de4a:	4698      	mov	r8, r3
    de4c:	f000 f91c 	bl	e088 <____aeabi_uidivmod_from_thumb>
    de50:	464a      	mov	r2, r9
    de52:	0413      	lsls	r3, r2, #16
    de54:	0409      	lsls	r1, r1, #16
    de56:	0c1f      	lsrs	r7, r3, #16
    de58:	4339      	orrs	r1, r7
    de5a:	4588      	cmp	r8, r1
    de5c:	d907      	bls.n	de6e <__udivdi3+0x196>
    de5e:	1909      	adds	r1, r1, r4
    de60:	3d01      	subs	r5, #1
    de62:	428c      	cmp	r4, r1
    de64:	d803      	bhi.n	de6e <__udivdi3+0x196>
    de66:	4541      	cmp	r1, r8
    de68:	4180      	sbcs	r0, r0
    de6a:	4244      	negs	r4, r0
    de6c:	1b2d      	subs	r5, r5, r4
    de6e:	0436      	lsls	r6, r6, #16
    de70:	432e      	orrs	r6, r5
    de72:	465b      	mov	r3, fp
    de74:	e791      	b.n	dd9a <__udivdi3+0xc2>
    de76:	2300      	movs	r3, #0
    de78:	1c1e      	adds	r6, r3, #0
    de7a:	e78e      	b.n	dd9a <__udivdi3+0xc2>
    de7c:	2220      	movs	r2, #32
    de7e:	1b10      	subs	r0, r2, r4
    de80:	1c3b      	adds	r3, r7, #0
    de82:	4642      	mov	r2, r8
    de84:	40c2      	lsrs	r2, r0
    de86:	40c3      	lsrs	r3, r0
    de88:	40a7      	lsls	r7, r4
    de8a:	1c29      	adds	r1, r5, #0
    de8c:	40a6      	lsls	r6, r4
    de8e:	431e      	orrs	r6, r3
    de90:	40c1      	lsrs	r1, r0
    de92:	9700      	str	r7, [sp, #0]
    de94:	40a5      	lsls	r5, r4
    de96:	1c17      	adds	r7, r2, #0
    de98:	468b      	mov	fp, r1
    de9a:	432f      	orrs	r7, r5
    de9c:	0431      	lsls	r1, r6, #16
    de9e:	0c35      	lsrs	r5, r6, #16
    dea0:	0c0b      	lsrs	r3, r1, #16
    dea2:	4658      	mov	r0, fp
    dea4:	1c29      	adds	r1, r5, #0
    dea6:	9701      	str	r7, [sp, #4]
    dea8:	469a      	mov	sl, r3
    deaa:	f000 f937 	bl	e11c <____aeabi_uidiv_from_thumb>
    deae:	4653      	mov	r3, sl
    deb0:	4343      	muls	r3, r0
    deb2:	1c07      	adds	r7, r0, #0
    deb4:	1c29      	adds	r1, r5, #0
    deb6:	4658      	mov	r0, fp
    deb8:	4699      	mov	r9, r3
    deba:	f000 f8e5 	bl	e088 <____aeabi_uidivmod_from_thumb>
    debe:	9801      	ldr	r0, [sp, #4]
    dec0:	0409      	lsls	r1, r1, #16
    dec2:	0c02      	lsrs	r2, r0, #16
    dec4:	4311      	orrs	r1, r2
    dec6:	4589      	cmp	r9, r1
    dec8:	d907      	bls.n	deda <__udivdi3+0x202>
    deca:	1989      	adds	r1, r1, r6
    decc:	3f01      	subs	r7, #1
    dece:	428e      	cmp	r6, r1
    ded0:	d803      	bhi.n	deda <__udivdi3+0x202>
    ded2:	4589      	cmp	r9, r1
    ded4:	d901      	bls.n	deda <__udivdi3+0x202>
    ded6:	3f01      	subs	r7, #1
    ded8:	1989      	adds	r1, r1, r6
    deda:	464b      	mov	r3, r9
    dedc:	1acb      	subs	r3, r1, r3
    dede:	1c18      	adds	r0, r3, #0
    dee0:	1c29      	adds	r1, r5, #0
    dee2:	469b      	mov	fp, r3
    dee4:	f000 f91a 	bl	e11c <____aeabi_uidiv_from_thumb>
    dee8:	4651      	mov	r1, sl
    deea:	4341      	muls	r1, r0
    deec:	4681      	mov	r9, r0
    deee:	468a      	mov	sl, r1
    def0:	4658      	mov	r0, fp
    def2:	1c29      	adds	r1, r5, #0
    def4:	f000 f8c8 	bl	e088 <____aeabi_uidivmod_from_thumb>
    def8:	9b01      	ldr	r3, [sp, #4]
    defa:	0418      	lsls	r0, r3, #16
    defc:	0409      	lsls	r1, r1, #16
    defe:	0c05      	lsrs	r5, r0, #16
    df00:	4329      	orrs	r1, r5
    df02:	458a      	cmp	sl, r1
    df04:	d905      	bls.n	df12 <__udivdi3+0x23a>
    df06:	2201      	movs	r2, #1
    df08:	4253      	negs	r3, r2
    df0a:	1989      	adds	r1, r1, r6
    df0c:	4499      	add	r9, r3
    df0e:	428e      	cmp	r6, r1
    df10:	d979      	bls.n	e006 <__udivdi3+0x32e>
    df12:	043e      	lsls	r6, r7, #16
    df14:	464a      	mov	r2, r9
    df16:	9f00      	ldr	r7, [sp, #0]
    df18:	4655      	mov	r5, sl
    df1a:	4316      	orrs	r6, r2
    df1c:	0432      	lsls	r2, r6, #16
    df1e:	1b49      	subs	r1, r1, r5
    df20:	043d      	lsls	r5, r7, #16
    df22:	0c13      	lsrs	r3, r2, #16
    df24:	0c30      	lsrs	r0, r6, #16
    df26:	0c2a      	lsrs	r2, r5, #16
    df28:	0c3f      	lsrs	r7, r7, #16
    df2a:	1c15      	adds	r5, r2, #0
    df2c:	435d      	muls	r5, r3
    df2e:	437b      	muls	r3, r7
    df30:	4342      	muls	r2, r0
    df32:	4347      	muls	r7, r0
    df34:	18d3      	adds	r3, r2, r3
    df36:	0c28      	lsrs	r0, r5, #16
    df38:	181b      	adds	r3, r3, r0
    df3a:	429a      	cmp	r2, r3
    df3c:	d902      	bls.n	df44 <__udivdi3+0x26c>
    df3e:	2280      	movs	r2, #128	; 0x80
    df40:	0250      	lsls	r0, r2, #9
    df42:	183f      	adds	r7, r7, r0
    df44:	0c18      	lsrs	r0, r3, #16
    df46:	183f      	adds	r7, r7, r0
    df48:	42b9      	cmp	r1, r7
    df4a:	d309      	bcc.n	df60 <__udivdi3+0x288>
    df4c:	d109      	bne.n	df62 <__udivdi3+0x28a>
    df4e:	4641      	mov	r1, r8
    df50:	40a1      	lsls	r1, r4
    df52:	042d      	lsls	r5, r5, #16
    df54:	1c0c      	adds	r4, r1, #0
    df56:	0c2f      	lsrs	r7, r5, #16
    df58:	0419      	lsls	r1, r3, #16
    df5a:	19cb      	adds	r3, r1, r7
    df5c:	429c      	cmp	r4, r3
    df5e:	d200      	bcs.n	df62 <__udivdi3+0x28a>
    df60:	3e01      	subs	r6, #1
    df62:	2300      	movs	r3, #0
    df64:	e719      	b.n	dd9a <__udivdi3+0xc2>
    df66:	2320      	movs	r3, #32
    df68:	1a1e      	subs	r6, r3, r0
    df6a:	4641      	mov	r1, r8
    df6c:	40f1      	lsrs	r1, r6
    df6e:	1c2a      	adds	r2, r5, #0
    df70:	1c0f      	adds	r7, r1, #0
    df72:	4085      	lsls	r5, r0
    df74:	4084      	lsls	r4, r0
    df76:	40f2      	lsrs	r2, r6
    df78:	432f      	orrs	r7, r5
    df7a:	4692      	mov	sl, r2
    df7c:	9700      	str	r7, [sp, #0]
    df7e:	4642      	mov	r2, r8
    df80:	0c27      	lsrs	r7, r4, #16
    df82:	0421      	lsls	r1, r4, #16
    df84:	4082      	lsls	r2, r0
    df86:	0c0b      	lsrs	r3, r1, #16
    df88:	4650      	mov	r0, sl
    df8a:	1c39      	adds	r1, r7, #0
    df8c:	4691      	mov	r9, r2
    df8e:	4698      	mov	r8, r3
    df90:	f000 f8c4 	bl	e11c <____aeabi_uidiv_from_thumb>
    df94:	1c39      	adds	r1, r7, #0
    df96:	1c06      	adds	r6, r0, #0
    df98:	4645      	mov	r5, r8
    df9a:	4345      	muls	r5, r0
    df9c:	4650      	mov	r0, sl
    df9e:	f000 f873 	bl	e088 <____aeabi_uidivmod_from_thumb>
    dfa2:	9a00      	ldr	r2, [sp, #0]
    dfa4:	0409      	lsls	r1, r1, #16
    dfa6:	0c10      	lsrs	r0, r2, #16
    dfa8:	4301      	orrs	r1, r0
    dfaa:	428d      	cmp	r5, r1
    dfac:	d907      	bls.n	dfbe <__udivdi3+0x2e6>
    dfae:	1909      	adds	r1, r1, r4
    dfb0:	3e01      	subs	r6, #1
    dfb2:	428c      	cmp	r4, r1
    dfb4:	d803      	bhi.n	dfbe <__udivdi3+0x2e6>
    dfb6:	428d      	cmp	r5, r1
    dfb8:	d901      	bls.n	dfbe <__udivdi3+0x2e6>
    dfba:	3e01      	subs	r6, #1
    dfbc:	1909      	adds	r1, r1, r4
    dfbe:	1b49      	subs	r1, r1, r5
    dfc0:	468a      	mov	sl, r1
    dfc2:	1c08      	adds	r0, r1, #0
    dfc4:	1c39      	adds	r1, r7, #0
    dfc6:	f000 f8a9 	bl	e11c <____aeabi_uidiv_from_thumb>
    dfca:	4643      	mov	r3, r8
    dfcc:	4343      	muls	r3, r0
    dfce:	1c05      	adds	r5, r0, #0
    dfd0:	1c39      	adds	r1, r7, #0
    dfd2:	4650      	mov	r0, sl
    dfd4:	469b      	mov	fp, r3
    dfd6:	f000 f857 	bl	e088 <____aeabi_uidivmod_from_thumb>
    dfda:	9b00      	ldr	r3, [sp, #0]
    dfdc:	041a      	lsls	r2, r3, #16
    dfde:	0409      	lsls	r1, r1, #16
    dfe0:	0c10      	lsrs	r0, r2, #16
    dfe2:	4301      	orrs	r1, r0
    dfe4:	458b      	cmp	fp, r1
    dfe6:	d907      	bls.n	dff8 <__udivdi3+0x320>
    dfe8:	1909      	adds	r1, r1, r4
    dfea:	3d01      	subs	r5, #1
    dfec:	428c      	cmp	r4, r1
    dfee:	d803      	bhi.n	dff8 <__udivdi3+0x320>
    dff0:	458b      	cmp	fp, r1
    dff2:	d901      	bls.n	dff8 <__udivdi3+0x320>
    dff4:	3d01      	subs	r5, #1
    dff6:	1909      	adds	r1, r1, r4
    dff8:	465b      	mov	r3, fp
    dffa:	0436      	lsls	r6, r6, #16
    dffc:	1acb      	subs	r3, r1, r3
    dffe:	4335      	orrs	r5, r6
    e000:	469a      	mov	sl, r3
    e002:	46ab      	mov	fp, r5
    e004:	e6fe      	b.n	de04 <__udivdi3+0x12c>
    e006:	458a      	cmp	sl, r1
    e008:	d983      	bls.n	df12 <__udivdi3+0x23a>
    e00a:	4499      	add	r9, r3
    e00c:	1989      	adds	r1, r1, r6
    e00e:	e780      	b.n	df12 <__udivdi3+0x23a>
    e010:	3e01      	subs	r6, #1
    e012:	1909      	adds	r1, r1, r4
    e014:	e70e      	b.n	de34 <__udivdi3+0x15c>
    e016:	46c0      	nop			; (mov r8, r8)

0000e018 <__clzsi2>:
    e018:	e3a0101c 	mov	r1, #28
    e01c:	e3500801 	cmp	r0, #65536	; 0x10000
    e020:	21a00820 	lsrcs	r0, r0, #16
    e024:	22411010 	subcs	r1, r1, #16
    e028:	e3500c01 	cmp	r0, #256	; 0x100
    e02c:	21a00420 	lsrcs	r0, r0, #8
    e030:	22411008 	subcs	r1, r1, #8
    e034:	e3500010 	cmp	r0, #16
    e038:	21a00220 	lsrcs	r0, r0, #4
    e03c:	22411004 	subcs	r1, r1, #4
    e040:	e28f2008 	add	r2, pc, #8
    e044:	e7d20000 	ldrb	r0, [r2, r0]
    e048:	e0800001 	add	r0, r0, r1
    e04c:	e12fff1e 	bx	lr
    e050:	02020304 	.word	0x02020304
    e054:	01010101 	.word	0x01010101
	...

0000e060 <____aeabi_i2d_from_thumb>:
    e060:	4778      	bx	pc
    e062:	46c0      	nop			; (mov r8, r8)
    e064:	eafffc2d 	b	d120 <__aeabi_i2d>

0000e068 <__puts_from_arm>:
    e068:	e59fc000 	ldr	ip, [pc]	; e070 <__puts_from_arm+0x8>
    e06c:	e12fff1c 	bx	ip
    e070:	000058e5 	.word	0x000058e5

0000e074 <__putchar_from_arm>:
    e074:	e59fc000 	ldr	ip, [pc]	; e07c <__putchar_from_arm+0x8>
    e078:	e12fff1c 	bx	ip
    e07c:	00005861 	.word	0x00005861

0000e080 <____aeabi_dmul_from_thumb>:
    e080:	4778      	bx	pc
    e082:	46c0      	nop			; (mov r8, r8)
    e084:	eafffc5c 	b	d1fc <__aeabi_dmul>

0000e088 <____aeabi_uidivmod_from_thumb>:
    e088:	4778      	bx	pc
    e08a:	46c0      	nop			; (mov r8, r8)
    e08c:	eaffda1d 	b	4908 <__aeabi_uidivmod>

0000e090 <__vPortEnterCritical_from_thumb>:
    e090:	4778      	bx	pc
    e092:	46c0      	nop			; (mov r8, r8)
    e094:	eaffc868 	b	23c <vPortEnterCritical>

0000e098 <__vTaskStartScheduler_from_arm>:
    e098:	e59fc000 	ldr	ip, [pc]	; e0a0 <__vTaskStartScheduler_from_arm+0x8>
    e09c:	e12fff1c 	bx	ip
    e0a0:	00003d51 	.word	0x00003d51

0000e0a4 <____aeabi_ddiv_from_thumb>:
    e0a4:	4778      	bx	pc
    e0a6:	46c0      	nop			; (mov r8, r8)
    e0a8:	eafffcf7 	b	d48c <__aeabi_ddiv>

0000e0ac <__xTaskGenericCreate_from_arm>:
    e0ac:	e59fc000 	ldr	ip, [pc]	; e0b4 <__xTaskGenericCreate_from_arm+0x8>
    e0b0:	e12fff1c 	bx	ip
    e0b4:	00003915 	.word	0x00003915

0000e0b8 <__xQueueCreateMutex_from_arm>:
    e0b8:	e59fc000 	ldr	ip, [pc]	; e0c0 <__xQueueCreateMutex_from_arm+0x8>
    e0bc:	e12fff1c 	bx	ip
    e0c0:	000035d1 	.word	0x000035d1

0000e0c4 <____clzsi2_from_thumb>:
    e0c4:	4778      	bx	pc
    e0c6:	46c0      	nop			; (mov r8, r8)
    e0c8:	eaffffd2 	b	e018 <__clzsi2>

0000e0cc <____aeabi_idiv0_from_arm>:
    e0cc:	e59fc000 	ldr	ip, [pc]	; e0d4 <____aeabi_idiv0_from_arm+0x8>
    e0d0:	e12fff1c 	bx	ip
    e0d4:	00004a79 	.word	0x00004a79

0000e0d8 <____aeabi_ldiv0_from_arm>:
    e0d8:	e59fc000 	ldr	ip, [pc]	; e0e0 <____aeabi_ldiv0_from_arm+0x8>
    e0dc:	e12fff1c 	bx	ip
    e0e0:	00004a79 	.word	0x00004a79

0000e0e4 <____aeabi_idiv_from_thumb>:
    e0e4:	4778      	bx	pc
    e0e6:	46c0      	nop			; (mov r8, r8)
    e0e8:	eaffda0e 	b	4928 <__aeabi_idiv>

0000e0ec <__i2enable_from_thumb>:
    e0ec:	4778      	bx	pc
    e0ee:	46c0      	nop			; (mov r8, r8)
    e0f0:	eaffc86d 	b	2ac <i2enable>

0000e0f4 <____aeabi_idivmod_from_thumb>:
    e0f4:	4778      	bx	pc
    e0f6:	46c0      	nop			; (mov r8, r8)
    e0f8:	eaffda56 	b	4a58 <__aeabi_idivmod>

0000e0fc <____aeabi_dsub_from_thumb>:
    e0fc:	4778      	bx	pc
    e0fe:	46c0      	nop			; (mov r8, r8)
    e100:	eafffb38 	b	cde8 <__aeabi_dsub>

0000e104 <__TargetResetInit_from_arm>:
    e104:	e59fc000 	ldr	ip, [pc]	; e10c <__TargetResetInit_from_arm+0x8>
    e108:	e12fff1c 	bx	ip
    e10c:	00001ee5 	.word	0x00001ee5

0000e110 <__vTaskSwitchContext_from_arm>:
    e110:	e59fc000 	ldr	ip, [pc]	; e118 <__vTaskSwitchContext_from_arm+0x8>
    e114:	e12fff1c 	bx	ip
    e118:	00004291 	.word	0x00004291

0000e11c <____aeabi_uidiv_from_thumb>:
    e11c:	4778      	bx	pc
    e11e:	46c0      	nop			; (mov r8, r8)
    e120:	eaffd9b9 	b	480c <__aeabi_uidiv>

0000e124 <__vTaskDelay_from_arm>:
    e124:	e59fc000 	ldr	ip, [pc]	; e12c <__vTaskDelay_from_arm+0x8>
    e128:	e12fff1c 	bx	ip
    e12c:	000041a9 	.word	0x000041a9

0000e130 <____aeabi_dadd_from_thumb>:
    e130:	4778      	bx	pc
    e132:	46c0      	nop			; (mov r8, r8)
    e134:	eafffb2c 	b	cdec <__adddf3>

0000e138 <__vPortISRStartFirstTask_from_thumb>:
    e138:	4778      	bx	pc
    e13a:	46c0      	nop			; (mov r8, r8)
    e13c:	eaffc7c0 	b	44 <vPortISRStartFirstTask>

0000e140 <__GPIOInit_from_arm>:
    e140:	e59fc000 	ldr	ip, [pc]	; e148 <__GPIOInit_from_arm+0x8>
    e144:	e12fff1c 	bx	ip
    e148:	00001991 	.word	0x00001991

0000e14c <__GPIOResetInit_from_arm>:
    e14c:	e59fc000 	ldr	ip, [pc]	; e154 <__GPIOResetInit_from_arm+0x8>
    e150:	e12fff1c 	bx	ip
    e154:	00001d9d 	.word	0x00001d9d

0000e158 <____aeabi_uldivmod_from_thumb>:
    e158:	4778      	bx	pc
    e15a:	46c0      	nop			; (mov r8, r8)
    e15c:	eafffdb5 	b	d838 <__aeabi_uldivmod>

0000e160 <__vApplicationTickHook_from_thumb>:
    e160:	4778      	bx	pc
    e162:	46c0      	nop			; (mov r8, r8)
    e164:	eaffcc2d 	b	1220 <vApplicationTickHook>

0000e168 <__printf_from_arm>:
    e168:	e59fc000 	ldr	ip, [pc]	; e170 <__printf_from_arm+0x8>
    e16c:	e12fff1c 	bx	ip
    e170:	0000582d 	.word	0x0000582d

0000e174 <__vPortDisableInterruptsFromThumb_from_thumb>:
    e174:	4778      	bx	pc
    e176:	46c0      	nop			; (mov r8, r8)
    e178:	eaffc823 	b	20c <vPortDisableInterruptsFromThumb>

0000e17c <__fflush_from_arm>:
    e17c:	e59fc000 	ldr	ip, [pc]	; e184 <__fflush_from_arm+0x8>
    e180:	e12fff1c 	bx	ip
    e184:	00004bd9 	.word	0x00004bd9

0000e188 <____aeabi_dcmpge_from_thumb>:
    e188:	4778      	bx	pc
    e18a:	46c0      	nop			; (mov r8, r8)
    e18c:	eafffd86 	b	d7ac <__aeabi_dcmpge>

0000e190 <____aeabi_dcmpgt_from_thumb>:
    e190:	4778      	bx	pc
    e192:	46c0      	nop			; (mov r8, r8)
    e194:	eafffd8a 	b	d7c4 <__aeabi_dcmpgt>

0000e198 <__xQueueGenericReceive_from_arm>:
    e198:	e59fc000 	ldr	ip, [pc]	; e1a0 <__xQueueGenericReceive_from_arm+0x8>
    e19c:	e12fff1c 	bx	ip
    e1a0:	00003661 	.word	0x00003661

0000e1a4 <__vTaskIncrementTick_from_arm>:
    e1a4:	e59fc000 	ldr	ip, [pc]	; e1ac <__vTaskIncrementTick_from_arm+0x8>
    e1a8:	e12fff1c 	bx	ip
    e1ac:	00003e65 	.word	0x00003e65

0000e1b0 <____aeabi_d2iz_from_thumb>:
    e1b0:	4778      	bx	pc
    e1b2:	46c0      	nop			; (mov r8, r8)
    e1b4:	eafffd88 	b	d7dc <__aeabi_d2iz>

0000e1b8 <____aeabi_dcmplt_from_thumb>:
    e1b8:	4778      	bx	pc
    e1ba:	46c0      	nop			; (mov r8, r8)
    e1bc:	eafffd6e 	b	d77c <__aeabi_dcmplt>

0000e1c0 <____aeabi_dcmpeq_from_thumb>:
    e1c0:	4778      	bx	pc
    e1c2:	46c0      	nop			; (mov r8, r8)
    e1c4:	eafffd66 	b	d764 <__aeabi_dcmpeq>

0000e1c8 <____aeabi_ui2d_from_thumb>:
    e1c8:	4778      	bx	pc
    e1ca:	46c0      	nop			; (mov r8, r8)
    e1cc:	eafffbca 	b	d0fc <__aeabi_ui2d>

0000e1d0 <__xQueueGenericSend_from_arm>:
    e1d0:	e59fc000 	ldr	ip, [pc]	; e1d8 <__xQueueGenericSend_from_arm+0x8>
    e1d4:	e12fff1c 	bx	ip
    e1d8:	000034c1 	.word	0x000034c1

0000e1dc <____gnu_uldivmod_helper_from_arm>:
    e1dc:	e59fc000 	ldr	ip, [pc]	; e1e4 <____gnu_uldivmod_helper_from_arm+0x8>
    e1e0:	e12fff1c 	bx	ip
    e1e4:	0000d8ad 	.word	0x0000d8ad

0000e1e8 <__vPortExitCritical_from_thumb>:
    e1e8:	4778      	bx	pc
    e1ea:	46c0      	nop			; (mov r8, r8)
    e1ec:	eaffc81d 	b	268 <vPortExitCritical>
	...

0000e238 <_global_impure_ptr>:
    e238:	40000008 0000617c 00005bd6 00005bd6     ...@|a...[...[..
    e248:	0000618c 00005bd6 00005bd6 00005bd6     .a...[...[...[..
    e258:	00005bd6 00005bd6 00005bd6 00006126     .[...[...[..&a..
    e268:	0000613c 00005bd6 00005e40 000060ca     <a...[..@^...`..
    e278:	00005bd6 00006146 00006152 00006152     .[..Fa..Ra..Ra..
    e288:	00006152 00006152 00006152 00006152     Ra..Ra..Ra..Ra..
    e298:	00006152 00006152 00006152 00005bd6     Ra..Ra..Ra...[..
    e2a8:	00005bd6 00005bd6 00005bd6 00005bd6     .[...[...[...[..
    e2b8:	00005bd6 00005bd6 00005bd6 00005bd6     .[...[...[...[..
    e2c8:	00005bd6 00005e9c 00005f74 00005bd6     .[...^..t_...[..
    e2d8:	00005f74 00005bd6 00005bd6 00005bd6     t_...[...[...[..
    e2e8:	00005bd6 00005fe8 00005bd6 00005bd6     .[..._...[...[..
    e2f8:	00005ff4 00005bd6 00005bd6 00005bd6     ._...[...[...[..
    e308:	00005bd6 00005bd6 00006034 00005bd6     .[...[..4`...[..
    e318:	00005bd6 0000606e 00005bd6 00005bd6     .[..n`...[...[..
    e328:	00005bd6 00005bd6 00005bd6 00005bd6     .[...[...[...[..
    e338:	00005bd6 00005bd6 00005bd6 00005bd6     .[...[...[...[..
    e348:	00006198 000062b6 00005f74 00005f74     .a...b..t_..t_..
    e358:	00005f74 0000611a 000062b6 00005bd6     t_...a...b...[..
    e368:	00005bd6 00006284 00005bd6 00006298     .[...b...[...b..
    e378:	000062c6 000061c0 000061f4 00005bd6     .b...a...a...[..
    e388:	000061fe 00005bd6 000062be 00005bd6     .a...[...b...[..
    e398:	00005bd6 00006256                       .[..Vb..

0000e3a0 <blanks.3930>:
    e3a0:	20202020 20202020 20202020 20202020                     

0000e3b0 <zeroes.3931>:
    e3b0:	30303030 30303030 30303030 30303030     0000000000000000
    e3c0:	000077e2 0000716e 0000716e 000077f6     .w..nq..nq...w..
    e3d0:	0000716e 0000716e 0000716e 0000716e     nq..nq..nq..nq..
    e3e0:	0000716e 0000716e 00007780 00007798     nq..nq...w...w..
    e3f0:	0000716e 00007418 0000773a 0000716e     nq...t..:w..nq..
    e400:	000077a4 000077b2 000077b2 000077b2     .w...w...w...w..
    e410:	000077b2 000077b2 000077b2 000077b2     .w...w...w...w..
    e420:	000077b2 000077b2 0000716e 0000716e     .w...w..nq..nq..
    e430:	0000716e 0000716e 0000716e 0000716e     nq..nq..nq..nq..
    e440:	0000716e 0000716e 0000716e 0000716e     nq..nq..nq..nq..
    e450:	000074e8 000075b2 0000716e 000075b2     .t...u..nq...u..
    e460:	0000716e 0000716e 0000716e 0000716e     nq..nq..nq..nq..
    e470:	00007622 0000716e 0000716e 000076a8     "v..nq..nq...v..
    e480:	0000716e 0000716e 0000716e 0000716e     nq..nq..nq..nq..
    e490:	0000716e 00007704 0000716e 0000716e     nq...w..nq..nq..
    e4a0:	00007630 0000716e 0000716e 0000716e     0v..nq..nq..nq..
    e4b0:	0000716e 0000716e 0000716e 0000716e     nq..nq..nq..nq..
    e4c0:	0000716e 0000716e 0000716e 0000768e     nq..nq..nq...v..
    e4d0:	00007906 000075b2 000075b2 000075b2     .y...u...u...u..
    e4e0:	000078f8 00007906 0000716e 0000716e     .x...y..nq..nq..
    e4f0:	000078c2 0000716e 000078d8 0000790a     .x..nq...x...y..
    e500:	00007804 00007836 0000716e 00007842     .x..6x..nq..Bx..
    e510:	0000716e 0000790e 0000716e 0000716e     nq...y..nq..nq..
    e520:	00007896                                .x..

0000e524 <blanks.3945>:
    e524:	20202020 20202020 20202020 20202020                     

0000e534 <zeroes.3946>:
    e534:	30303030 30303030 30303030 30303030     0000000000000000
    e544:	00000000                                ....

0000e548 <p05.2452>:
    e548:	00000005 00000019 0000007d 00000000     ........}.......

0000e558 <__mprec_tens>:
    e558:	00000000 3ff00000 00000000 40240000     .......?......$@
    e568:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    e578:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    e588:	00000000 412e8480 00000000 416312d0     .......A......cA
    e598:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    e5a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    e5b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    e5c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    e5d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    e5e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    e5f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    e608:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    e618:	79d99db4 44ea7843                       ...yCx.D

0000e620 <__mprec_bigtens>:
    e620:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    e630:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    e640:	7f73bf3c 75154fdd                       <.s..O.u

0000e648 <__mprec_tinytens>:
    e648:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    e658:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    e668:	64ac6f43 0ac80628 0000b622 0000b262     Co.d(..."...b...
    e678:	0000b262 0000b616 0000b262 0000b262     b.......b...b...
    e688:	0000b262 0000b262 0000b262 0000b262     b...b...b...b...
    e698:	0000b47e 0000b60a 0000b262 0000b496     ~.......b.......
    e6a8:	0000b66a 0000b262 0000b65e 0000b636     j...b...^...6...
    e6b8:	0000b636 0000b636 0000b636 0000b636     6...6...6...6...
    e6c8:	0000b636 0000b636 0000b636 0000b636     6...6...6...6...
    e6d8:	0000b262 0000b262 0000b262 0000b262     b...b...b...b...
    e6e8:	0000b262 0000b262 0000b262 0000b262     b...b...b...b...
    e6f8:	0000b262 0000b262 0000b442 0000b262     b...b...B...b...
    e708:	0000b262 0000b262 0000b262 0000b262     b...b...b...b...
    e718:	0000b262 0000b262 0000b262 0000b262     b...b...b...b...
    e728:	0000b262 0000b40e 0000b262 0000b262     b.......b...b...
    e738:	0000b262 0000b262 0000b262 0000b332     b...b...b...2...
    e748:	0000b262 0000b262 0000b59c 0000b262     b...b.......b...
    e758:	0000b262 0000b262 0000b262 0000b262     b...b...b...b...
    e768:	0000b262 0000b262 0000b262 0000b262     b...b...b...b...
    e778:	0000b262 0000b5ea 0000b44a 0000b262     b.......J...b...
    e788:	0000b262 0000b262 0000b5de 0000b44a     b...b.......J...
    e798:	0000b262 0000b262 0000b5cc 0000b262     b...b.......b...
    e7a8:	0000b4a2 0000b416 0000b4cc 0000b4c0     ................
    e7b8:	0000b262 0000b54a 0000b262 0000b33a     b...J...b...:...
    e7c8:	0000b262 0000b262 0000b4fa              b...b.......

0000e7d4 <blanks.3874>:
    e7d4:	20202020 20202020 20202020 20202020                     

0000e7e4 <zeroes.3875>:
    e7e4:	30303030 30303030 30303030 30303030     0000000000000000
    e7f4:	0000c240 0000be58 0000be58 0000c234     @...X...X...4...
    e804:	0000be58 0000be58 0000be58 0000be58     X...X...X...X...
    e814:	0000be58 0000be58 0000c088 0000c228     X...X.......(...
    e824:	0000be58 0000c0a0 0000c288 0000be58     X...........X...
    e834:	0000c27c 0000c254 0000c254 0000c254     |...T...T...T...
    e844:	0000c254 0000c254 0000c254 0000c254     T...T...T...T...
    e854:	0000c254 0000c254 0000be58 0000be58     T...T...X...X...
    e864:	0000be58 0000be58 0000be58 0000be58     X...X...X...X...
    e874:	0000be58 0000be58 0000be58 0000be58     X...X...X...X...
    e884:	0000c016 0000be58 0000be58 0000be58     ....X...X...X...
    e894:	0000be58 0000be58 0000be58 0000be58     X...X...X...X...
    e8a4:	0000be58 0000be58 0000be58 0000c054     X...X...X...T...
    e8b4:	0000be58 0000be58 0000be58 0000be58     X...X...X...X...
    e8c4:	0000be58 0000bf36 0000be58 0000be58     X...6...X...X...
    e8d4:	0000c1f8 0000be58 0000be58 0000be58     ....X...X...X...
    e8e4:	0000be58 0000be58 0000be58 0000be58     X...X...X...X...
    e8f4:	0000be58 0000be58 0000be58 0000c0c0     X...X...X.......
    e904:	0000c01e 0000be58 0000be58 0000be58     ....X...X...X...
    e914:	0000c1ec 0000c01e 0000be58 0000be58     ........X...X...
    e924:	0000c1da 0000be58 0000c1bc 0000c05c     ....X.......\...
    e934:	0000c18c 0000c180 0000be58 0000c0e4     ........X.......
    e944:	0000be58 0000bf3e 0000be58 0000be58     X...>...X...X...
    e954:	0000c12e                                ....

0000e958 <blanks.3888>:
    e958:	20202020 20202020 20202020 20202020                     

0000e968 <zeroes.3889>:
    e968:	30303030 30303030 30303030 30303030     0000000000000000
    e978:	74736572 65747261 65722072 74726f70     restarter report
    e988:	252e2e2e 00000078 73206f4e 20686375     ...%x...No such 
    e998:	69766564 34256563 00000a78 61206f6e     device%4x...no a
    e9a8:	6f6e6b63 67656c77 78252865 00000a29     cknowlege(%x)...
    e9b8:	64616572 2e676e69 0020202e 74696157     reading..  .Wait
    e9c8:	00000009 65727825 78250967 00000000     ....%xreg.%x....
    e9d8:	74617453 69207375 78252073 0000000a     Status is %x....
    e9e8:	64616552 67656220 3e5b6e69 00002020     Read begin[>  ..
    e9f8:	3d080808 0063253e 656e6f64 2e2e2e2e     ...=>%c.done....
    ea08:	0000002e 61746166 0000006c 75626544     ....fatal...Debu
    ea18:	67313333 00000000 69676552 72657473     331g....Register
    ea28:	73655220 00007465 75746553 65622070      Reset..Setup be
    ea38:	5b6e6967 0000203e 7461440d 72742061     gin[> ...Data tr
    ea48:	6d736e61 6f697469 6e45206e 00002164     ansmition End!..
    ea58:	616d6553 65766967 00000000              Semagive....

0000ea64 <OV7670>:
    ea64:	00001204 000040d0 00008c02 0000703a     .....@......:p..
    ea74:	00007211 000040d0 00008c02 0000703a     .r...@......:p..
    ea84:	00007135 00007211 000073f0 0000a202     5q...r...s......
    ea94:	00001500 00007a20 00007b10 00007c1e     .... z...{...|..
    eaa4:	00007d35 00007e5a 00007f69 00008076     5}..Z~..i...v...
    eab4:	00008180 00008288 0000838f 00008496     ................
    eac4:	000085a3 000086af 000087c4 000088d7     ................
    ead4:	000089e8 000013e0 00000000 00001000     ................
    eae4:	00000d40 00001418 0000a505 0000ab07     @...............
    eaf4:	00002495 00002533 000026e3 00009f78     .$..3%...&..x...
    eb04:	0000a068 0000a103 0000a6d8 0000a7d8     h...............
    eb14:	0000a8f0 0000a990 0000aa94 000013e5     ................
    eb24:	00000e61 00000f4b 00001602 00001e07     a...K...........
    eb34:	00002102 00002291 00002907 0000330b     .!..."...)...3..
    eb44:	0000350b 0000371d 00003871 0000392a     .5...7..q8..*9..
    eb54:	00003c78 00004d34 00004e20 00006900     x<..4M.. N...i..
    eb64:	00006b0a 00007410 00008d4f 00008e00     .k...t..O.......
    eb74:	00008f00 00009000 00009100 00009600     ................
    eb84:	00009a00 0000b084 0000b10c 0000b20e     ................
    eb94:	0000b382 0000b80a 0000430a 000044f0     .........C...D..
    eba4:	00004534 0000483a 00005999 00005a88     4E..:H...Y...Z..
    ebb4:	00005b44 00005c67 00005d49 00005e0e     D[..g\..I]...^..
    ebc4:	00006c0a 00006d55 00006e11 00006f9f     .l..Um...n...o..
    ebd4:	00006a40 00000140 00000260 000013e7     @j..@...`.......
    ebe4:	00004f80 00005080 00005100 00005222     .O...P...Q.."R..
    ebf4:	0000535e 00005480 0000589e 00004108     ^S...T...X...A..
    ec04:	00003f00 00007505 000076e1 00004c00     .?...u...v...L..
    ec14:	00007701 00003dc3 00004b09 0000c960     .w...=...K..`...
    ec24:	00004138 00005640 00003411 00003b12     8A..@V...4...;..
    ec34:	0000a488 00009600 00009730 00009820     ........0... ...
    ec44:	00009930 00009a84 00009b29 00009c03     0.......).......
    ec54:	00009d4c 00009e3f 00007804 00007901     L...?....x...y..
    ec64:	0000c8f0 00783425 6c6c6548 00002c6f     ....%4x.Hello,..
    ec74:	726f7720 0021646c 72737369 00000000      world!.issr....
    ec84:	0000444c 72617473 53492074 63204953     LD..start ISSI c
    ec94:	656e6e6f 6f697463 0000006e 3d767270     onnection...prv=
    eca4:	00007825 253d7243 00000064 0964252d     %x..Cr=%d...-%d.
    ecb4:	000a6425 6967696d 00000000 6f757974     %d..migi....tyuo
    ecc4:	00000075 78252020 2e2e2e2e 09783425     u...  %x....%4x.
    ecd4:	00000000 00096425 58383025 00000000     ....%d..%08X....
    ece4:	32302520 00000058 6e6f4351 00314273      %02X...QConsB1.
    ecf4:	6f725051 00324264 6f725051 00334264     QProdB2.QProdB3.
    ed04:	6e6f4351 00344273 6f725051 00354264     QConsB4.QProdB5.
    ed14:	6e6f4351 00364273 73655442 00003174     QConsB6.BTest1..
    ed24:	73655442 00003274 4d746e49 00687461     BTest2..IntMath.
    ed34:	516e6547 00000000 6f4c754d 00000077     GenQ....MuLow...
    ed44:	654d754d 00000064 6948754d 00006867     MuMed...MuHigh..
    ed54:	6b656550 0000004c 6b656550 0000004d     PeekL...PeekM...
    ed64:	6b656550 00003148 6b656550 00003248     PeekH1..PeekH2..
    ed74:	5f544e43 00434e49 5f4d494c 00434e49     CNT_INC.LIM_INC.
    ed84:	54435f43 00004c52 50535553 0058545f     C_CTRL..SUSP_TX.
    ed94:	50535553 0058525f 09097325 25096325     SUSP_RX.%s..%c.%
    eda4:	75250975 0d752509 0000000a 454c4449     u.%u.%u.....IDLE
    edb4:	00000000 00000a0d 00000043 00464e49     ........C...INF.
    edc4:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
    edd4:	37363534 42413938 46454443 00000000     456789ABCDEF....
    ede4:	33323130 37363534 62613938 66656463     0123456789abcdef
    edf4:	00000000 6c756e28 0000296c 00000030     ....(null)..0...
    ee04:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
    ee14:	49534f50 00000058                       POSIX...
