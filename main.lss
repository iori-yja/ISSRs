
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e954  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000e954  0000e954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         000008c8  40000000  0000e95c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002c8  400008c8  0000f224  000188c8  2**2
                  ALLOC
  4 .ARM.attributes 00000032  00000000  00000000  000188c8  2**0
                  CONTENTS, READONLY
  5 .comment      0000002a  00000000  00000000  000188fa  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006f0  00000000  00000000  00018928  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000c93  00000000  00000000  00019018  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000061ed  00000000  00000000  00019cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001b50  00000000  00000000  0001fe98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002b23  00000000  00000000  000219e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002330  00000000  00000000  0002450c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001faa  00000000  00000000  0002683c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003ed2  00000000  00000000  000287e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000008ff  00000000  00000000  0002c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_undf-0x20>:

.section .startup,"ax"
         .code 32
         .align 0

	b     _start						/* reset - _start			*/
       0:	ea0010a5 	b	429c <_startup>
	ldr   pc, _undf						/* undefined - _undf		*/
       4:	e59ff014 	ldr	pc, [pc, #20]	; 20 <_undf>
	ldr   pc, _swi						/* SWI - _swi				*/
       8:	e59ff014 	ldr	pc, [pc, #20]	; 24 <_swi>
	ldr   pc, _pabt						/* program abort - _pabt	*/
       c:	e59ff014 	ldr	pc, [pc, #20]	; 28 <_pabt>
	ldr   pc, _dabt						/* data abort - _dabt		*/
      10:	e59ff014 	ldr	pc, [pc, #20]	; 2c <_dabt>
	nop									/* reserved					*/
      14:	e1a00000 	nop			; (mov r0, r0)
	ldr   pc, [pc,#-0x120]				/* IRQ - read the VIC		*/
      18:	e51ff120 	ldr	pc, [pc, #-288]	; ffffff00 <__batteryram_start+0x1ff7bf00>
	ldr   pc, _fiq						/* FIQ - _fiq				*/
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <_fiq>

00000020 <_undf>:
      20:	00000034 	.word	0x00000034

00000024 <_swi>:
      24:	00000098 	.word	0x00000098

00000028 <_pabt>:
      28:	00000038 	.word	0x00000038

0000002c <_dabt>:
      2c:	0000003c 	.word	0x0000003c

00000030 <_fiq>:
      30:	00000040 	.word	0x00000040

00000034 <__undf>:
_swi:   .word vPortYieldProcessor       /* SWI						*/
_pabt:  .word __pabt                    /* program abort			*/
_dabt:  .word __dabt                    /* data abort				*/
_fiq:   .word __fiq                     /* FIQ						*/

__undf: b     .                         /* undefined				*/
      34:	eafffffe 	b	34 <__undf>

00000038 <__pabt>:
__pabt: b     .                         /* program abort			*/
      38:	eafffffe 	b	38 <__pabt>

0000003c <__dabt>:
__dabt: b     .                         /* data abort				*/
      3c:	eafffffe 	b	3c <__dabt>

00000040 <__fiq>:
__fiq:  b     .                         /* FIQ						*/
      40:	eafffffe 	b	40 <__fiq>

00000044 <vPortISRStartFirstTask>:

void vPortISRStartFirstTask( void )
{
	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
      44:	e59f0044 	ldr	r0, [pc, #68]	; 90 <I_BIT+0x10>
      48:	e5900000 	ldr	r0, [r0]
      4c:	e590e000 	ldr	lr, [r0]
      50:	e59f003c 	ldr	r0, [pc, #60]	; 94 <I_BIT+0x14>
      54:	e8be0002 	ldm	lr!, {r1}
      58:	e5801000 	str	r1, [r0]
      5c:	e8be0001 	ldm	lr!, {r0}
      60:	e169f000 	msr	SPSR_fc, r0
      64:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
      68:	e1a00000 	nop			; (mov r0, r0)
      6c:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
      70:	e25ef004 	subs	pc, lr, #4
      74:	e59f000c 	ldr	r0, [pc, #12]	; 88 <I_BIT+0x8>
      78:	e5903000 	ldr	r3, [r0]
      7c:	e59f3008 	ldr	r3, [pc, #8]	; 8c <I_BIT+0xc>
      80:	e5933000 	ldr	r3, [r3]
}
      84:	e12fff1e 	bx	lr
      88:	400008c0 	.word	0x400008c0
      8c:	40000afc 	.word	0x40000afc
      90:	40000afc 	.word	0x40000afc
      94:	400008c0 	.word	0x400008c0

00000098 <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
      98:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
      9c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
      a0:	e94d2000 	stmdb	sp, {sp}^
      a4:	e1a00000 	nop			; (mov r0, r0)
      a8:	e24dd004 	sub	sp, sp, #4
      ac:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
      b0:	e9204000 	stmdb	r0!, {lr}
      b4:	e1a0e000 	mov	lr, r0
      b8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
      bc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
      c0:	e1a00000 	nop			; (mov r0, r0)
      c4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
      c8:	e14f0000 	mrs	r0, SPSR
      cc:	e92e0001 	stmdb	lr!, {r0}
      d0:	e59f0064 	ldr	r0, [pc, #100]	; 13c <IRQ_STACK_SIZE+0x3c>
      d4:	e5900000 	ldr	r0, [r0]
      d8:	e92e0001 	stmdb	lr!, {r0}
      dc:	e59f005c 	ldr	r0, [pc, #92]	; 140 <IRQ_STACK_SIZE+0x40>
      e0:	e5900000 	ldr	r0, [r0]
      e4:	e580e000 	str	lr, [r0]
      e8:	e59f2044 	ldr	r2, [pc, #68]	; 134 <IRQ_STACK_SIZE+0x34>
      ec:	e59f3044 	ldr	r3, [pc, #68]	; 138 <IRQ_STACK_SIZE+0x38>
      f0:	e5921000 	ldr	r1, [r2]
      f4:	e5931000 	ldr	r1, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile( "bl			vTaskSwitchContext" );
      f8:	eb0036fe 	bl	dcf8 <__vTaskSwitchContext_from_arm>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
      fc:	e59f003c 	ldr	r0, [pc, #60]	; 140 <IRQ_STACK_SIZE+0x40>
     100:	e5900000 	ldr	r0, [r0]
     104:	e590e000 	ldr	lr, [r0]
     108:	e59f002c 	ldr	r0, [pc, #44]	; 13c <IRQ_STACK_SIZE+0x3c>
     10c:	e8be0002 	ldm	lr!, {r1}
     110:	e5801000 	str	r1, [r0]
     114:	e8be0001 	ldm	lr!, {r0}
     118:	e169f000 	msr	SPSR_fc, r0
     11c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
     120:	e1a00000 	nop			; (mov r0, r0)
     124:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
     128:	e25ef004 	subs	pc, lr, #4
     12c:	e5922000 	ldr	r2, [r2]
     130:	e5933000 	ldr	r3, [r3]
     134:	400008c0 	.word	0x400008c0
     138:	40000afc 	.word	0x40000afc
     13c:	400008c0 	.word	0x400008c0
     140:	40000afc 	.word	0x40000afc

00000144 <vPreemptiveTick>:
	saved on entry as part of the context switch. */
	void vPreemptiveTick( void ) __attribute__((naked));
	void vPreemptiveTick( void )
	{
		/* Save the context of the interrupted task. */
		portSAVE_CONTEXT();	
     144:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     148:	e94d2000 	stmdb	sp, {sp}^
     14c:	e1a00000 	nop			; (mov r0, r0)
     150:	e24dd004 	sub	sp, sp, #4
     154:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     158:	e9204000 	stmdb	r0!, {lr}
     15c:	e1a0e000 	mov	lr, r0
     160:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     164:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
     168:	e1a00000 	nop			; (mov r0, r0)
     16c:	e24ee03c 	sub	lr, lr, #60	; 0x3c
     170:	e14f0000 	mrs	r0, SPSR
     174:	e92e0001 	stmdb	lr!, {r0}
     178:	e59f0084 	ldr	r0, [pc, #132]	; 204 <vPreemptiveTick+0xc0>
     17c:	e5900000 	ldr	r0, [r0]
     180:	e92e0001 	stmdb	lr!, {r0}
     184:	e59f007c 	ldr	r0, [pc, #124]	; 208 <vPreemptiveTick+0xc4>
     188:	e5900000 	ldr	r0, [r0]
     18c:	e580e000 	str	lr, [r0]
     190:	e59f2060 	ldr	r2, [pc, #96]	; 1f8 <vPreemptiveTick+0xb4>
     194:	e59f3060 	ldr	r3, [pc, #96]	; 1fc <vPreemptiveTick+0xb8>
     198:	e5921000 	ldr	r1, [r2]
     19c:	e5931000 	ldr	r1, [r3]

		/* Increment the RTOS tick count, then look for the highest priority 
		task that is ready to run. */
		__asm volatile( "bl vTaskIncrementTick" );
     1a0:	eb0036a9 	bl	dc4c <__vTaskIncrementTick_from_arm>
		__asm volatile( "bl vTaskSwitchContext" );
     1a4:	eb0036d3 	bl	dcf8 <__vTaskSwitchContext_from_arm>

		/* Ready for the next interrupt. */
		T0IR = 2;
     1a8:	e59f0050 	ldr	r0, [pc, #80]	; 200 <vPreemptiveTick+0xbc>
     1ac:	e3a0c002 	mov	ip, #2
     1b0:	e580c000 	str	ip, [r0]
		VICVectAddr = portCLEAR_VIC_INTERRUPT;
     1b4:	e3e01000 	mvn	r1, #0
     1b8:	e3a00000 	mov	r0, #0
     1bc:	e50100ff 	str	r0, [r1, #-255]	; 0xffffff01
		
		/* Restore the context of the new task. */
		portRESTORE_CONTEXT();
     1c0:	e59f0040 	ldr	r0, [pc, #64]	; 208 <vPreemptiveTick+0xc4>
     1c4:	e5900000 	ldr	r0, [r0]
     1c8:	e590e000 	ldr	lr, [r0]
     1cc:	e59f0030 	ldr	r0, [pc, #48]	; 204 <vPreemptiveTick+0xc0>
     1d0:	e8be0002 	ldm	lr!, {r1}
     1d4:	e5801000 	str	r1, [r0]
     1d8:	e8be0001 	ldm	lr!, {r0}
     1dc:	e169f000 	msr	SPSR_fc, r0
     1e0:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
     1e4:	e1a00000 	nop			; (mov r0, r0)
     1e8:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
     1ec:	e25ef004 	subs	pc, lr, #4
     1f0:	e5922000 	ldr	r2, [r2]
     1f4:	e5933000 	ldr	r3, [r3]
     1f8:	400008c0 	.word	0x400008c0
     1fc:	40000afc 	.word	0x40000afc
     200:	e0004000 	.word	0xe0004000
     204:	400008c0 	.word	0x400008c0
     208:	40000afc 	.word	0x40000afc

0000020c <vPortDisableInterruptsFromThumb>:
	void vPortDisableInterruptsFromThumb( void ) __attribute__ ((naked));
	void vPortEnableInterruptsFromThumb( void ) __attribute__ ((naked));

	void vPortDisableInterruptsFromThumb( void )
	{
		__asm volatile ( 
     20c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     210:	e10f0000 	mrs	r0, CPSR
     214:	e38000c0 	orr	r0, r0, #192	; 0xc0
     218:	e129f000 	msr	CPSR_fc, r0
     21c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     220:	e12fff1e 	bx	lr

00000224 <vPortEnableInterruptsFromThumb>:
			"BX		R14" );					/* Return back to thumb.					*/
	}
			
	void vPortEnableInterruptsFromThumb( void )
	{
		__asm volatile ( 
     224:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     228:	e10f0000 	mrs	r0, CPSR
     22c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
     230:	e129f000 	msr	CPSR_fc, r0
     234:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     238:	e12fff1e 	bx	lr

0000023c <vPortEnterCritical>:
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
     23c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     240:	e10f0000 	mrs	r0, CPSR
     244:	e38000c0 	orr	r0, r0, #192	; 0xc0
     248:	e129f000 	msr	CPSR_fc, r0
     24c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
     250:	e59f300c 	ldr	r3, [pc, #12]	; 264 <vPortEnterCritical+0x28>
     254:	e5930000 	ldr	r0, [r3]
     258:	e2802001 	add	r2, r0, #1
     25c:	e5832000 	str	r2, [r3]
}
     260:	e12fff1e 	bx	lr
     264:	400008c0 	.word	0x400008c0

00000268 <vPortExitCritical>:

void vPortExitCritical( void )
{
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
     268:	e59f3038 	ldr	r3, [pc, #56]	; 2a8 <vPortExitCritical+0x40>
     26c:	e5932000 	ldr	r2, [r3]
     270:	e3520000 	cmp	r2, #0
     274:	012fff1e 	bxeq	lr
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
     278:	e5931000 	ldr	r1, [r3]
     27c:	e2410001 	sub	r0, r1, #1
     280:	e5830000 	str	r0, [r3]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
     284:	e5933000 	ldr	r3, [r3]
     288:	e3530000 	cmp	r3, #0
     28c:	112fff1e 	bxne	lr
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
     290:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     294:	e10f0000 	mrs	r0, CPSR
     298:	e3c000c0 	bic	r0, r0, #192	; 0xc0
     29c:	e129f000 	msr	CPSR_fc, r0
     2a0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     2a4:	e12fff1e 	bx	lr
     2a8:	400008c0 	.word	0x400008c0

000002ac <i2enable>:
function name	:i2enable
about function:as name.
Problem	:
****************************************************************************/
void i2enable(){
	PINMODE0 = 0x00000000;
     2ac:	e59f3008 	ldr	r3, [pc, #8]	; 2bc <i2enable+0x10>
     2b0:	e3a02000 	mov	r2, #0
     2b4:	e5832040 	str	r2, [r3, #64]	; 0x40
}
     2b8:	e12fff1e 	bx	lr
     2bc:	e002c000 	.word	0xe002c000

000002c0 <i2cmasterset>:
/****************************************************************************
function name	:i2cmasterset
discribe	:the i2c periphrals which given number will be master
****************************************************************************/ 
int i2cmasterset(int a){
	switch(a){
     2c0:	e3500001 	cmp	r0, #1
     2c4:	0a00000e 	beq	304 <i2cmasterset+0x44>
     2c8:	e3500002 	cmp	r0, #2
     2cc:	0a000007 	beq	2f0 <i2cmasterset+0x30>
     2d0:	e3500000 	cmp	r0, #0
     2d4:	1a000003 	bne	2e8 <i2cmasterset+0x28>
	case 0:
		I20CONSET = 0x40;
     2d8:	e59f3038 	ldr	r3, [pc, #56]	; 318 <i2cmasterset+0x58>
     2dc:	e3a02040 	mov	r2, #64	; 0x40
     2e0:	e5832000 	str	r2, [r3]
		return 0;
     2e4:	e12fff1e 	bx	lr
	case 2:
		I22CONSET = 0x40;
		return 0;
		break;
	default:
		return 1;
     2e8:	e3a00001 	mov	r0, #1
	}
}
     2ec:	e12fff1e 	bx	lr
	case 1:
		I21CONSET = 0x40;
		return 0;
		break;
	case 2:
		I22CONSET = 0x40;
     2f0:	e59f2024 	ldr	r2, [pc, #36]	; 31c <i2cmasterset+0x5c>
     2f4:	e3a0c040 	mov	ip, #64	; 0x40
     2f8:	e582c000 	str	ip, [r2]
		return 0;
     2fc:	e3a00000 	mov	r0, #0
     300:	e12fff1e 	bx	lr
	case 0:
		I20CONSET = 0x40;
		return 0;
		break;
	case 1:
		I21CONSET = 0x40;
     304:	e59f1014 	ldr	r1, [pc, #20]	; 320 <i2cmasterset+0x60>
     308:	e3a00040 	mov	r0, #64	; 0x40
     30c:	e5810000 	str	r0, [r1]
		return 0;
     310:	e3a00000 	mov	r0, #0
     314:	e12fff1e 	bx	lr
     318:	e001c000 	.word	0xe001c000
     31c:	e0080000 	.word	0xe0080000
     320:	e005c000 	.word	0xe005c000

00000324 <i2cstart>:
/****************************************************************************
function name	:i2cstart
discribe	:the i2c will start
****************************************************************************/ 
int i2cstart(int a){
	switch(a){
     324:	e3500001 	cmp	r0, #1
     328:	0a000015 	beq	384 <i2cstart+0x60>
     32c:	e3500002 	cmp	r0, #2
     330:	0a00000b 	beq	364 <i2cstart+0x40>
     334:	e3500000 	cmp	r0, #0
     338:	1a000007 	bne	35c <i2cstart+0x38>
	case 0:
		I20CONSET = 0x60;
     33c:	e59f2060 	ldr	r2, [pc, #96]	; 3a4 <i2cstart+0x80>
     340:	e3a03060 	mov	r3, #96	; 0x60
     344:	e5823000 	str	r3, [r2]
		while(I20STAT != 0x08);
     348:	e5920004 	ldr	r0, [r2, #4]
     34c:	e3500008 	cmp	r0, #8
     350:	1afffffc 	bne	348 <i2cstart+0x24>
		break;
	case 2:
		I22CONSET = 0x60;
		while(I22STAT != 0x08);
//		printf("I2C now started\n");
		return 0;
     354:	e3a00000 	mov	r0, #0
     358:	e12fff1e 	bx	lr
		break;
	default:
		return 1;
     35c:	e3a00001 	mov	r0, #1
	}
	}
     360:	e12fff1e 	bx	lr
		I21CONSET = 0x60;
		while(I21STAT != 0x08);
		return 0;
		break;
	case 2:
		I22CONSET = 0x60;
     364:	e59f203c 	ldr	r2, [pc, #60]	; 3a8 <i2cstart+0x84>
     368:	e3a03060 	mov	r3, #96	; 0x60
     36c:	e5823000 	str	r3, [r2]
		while(I22STAT != 0x08);
     370:	e5920004 	ldr	r0, [r2, #4]
     374:	e3500008 	cmp	r0, #8
     378:	1afffffc 	bne	370 <i2cstart+0x4c>
//		printf("I2C now started\n");
		return 0;
     37c:	e3a00000 	mov	r0, #0
     380:	e12fff1e 	bx	lr
		I20CONSET = 0x60;
		while(I20STAT != 0x08);
		return 0;
		break;
	case 1:
		I21CONSET = 0x60;
     384:	e59f2020 	ldr	r2, [pc, #32]	; 3ac <i2cstart+0x88>
     388:	e3a01060 	mov	r1, #96	; 0x60
     38c:	e5821000 	str	r1, [r2]
		while(I21STAT != 0x08);
     390:	e592c004 	ldr	ip, [r2, #4]
     394:	e35c0008 	cmp	ip, #8
     398:	1afffffc 	bne	390 <i2cstart+0x6c>
		break;
	case 2:
		I22CONSET = 0x60;
		while(I22STAT != 0x08);
//		printf("I2C now started\n");
		return 0;
     39c:	e3a00000 	mov	r0, #0
     3a0:	e12fff1e 	bx	lr
     3a4:	e001c000 	.word	0xe001c000
     3a8:	e0080000 	.word	0xe0080000
     3ac:	e005c000 	.word	0xe005c000

000003b0 <i2crestart>:
/****************************************************************************
function name	:i2crestart
discribe	:the i2c will restart
****************************************************************************/ 
int i2crestart(int a){
	switch(a){
     3b0:	e3500001 	cmp	r0, #1
	}
/****************************************************************************
function name	:i2crestart
discribe	:the i2c will restart
****************************************************************************/ 
int i2crestart(int a){
     3b4:	e92d4008 	push	{r3, lr}
	switch(a){
     3b8:	0a00002d 	beq	474 <i2crestart+0xc4>
     3bc:	e3500002 	cmp	r0, #2
     3c0:	0a000017 	beq	424 <i2crestart+0x74>
     3c4:	e3500000 	cmp	r0, #0
		while((I22STAT != 0x10)&&(I22STAT != 0x08));
		printf("restarter report...%x",I22STAT);
		return 0;
		break;
	default:
		return 1;
     3c8:	13a00001 	movne	r0, #1
/****************************************************************************
function name	:i2crestart
discribe	:the i2c will restart
****************************************************************************/ 
int i2crestart(int a){
	switch(a){
     3cc:	1a000012 	bne	41c <i2crestart+0x6c>
	case 0:
		I20CONSET = 0x14;
     3d0:	e59f30ec 	ldr	r3, [pc, #236]	; 4c4 <i2crestart+0x114>
     3d4:	e3a01014 	mov	r1, #20
		I20CONCLR = 0x08;
     3d8:	e3a00008 	mov	r0, #8
		I20CONSET = 0x60;
     3dc:	e3a02060 	mov	r2, #96	; 0x60
discribe	:the i2c will restart
****************************************************************************/ 
int i2crestart(int a){
	switch(a){
	case 0:
		I20CONSET = 0x14;
     3e0:	e5831000 	str	r1, [r3]
		I20CONCLR = 0x08;
     3e4:	e5830018 	str	r0, [r3, #24]
		I20CONSET = 0x60;
     3e8:	e5832000 	str	r2, [r3]
		while((I20STAT != 0x10)&&(I20STAT != 0x08));
     3ec:	ea000002 	b	3fc <i2crestart+0x4c>
     3f0:	e593e004 	ldr	lr, [r3, #4]
     3f4:	e35e0008 	cmp	lr, #8
     3f8:	0a000002 	beq	408 <i2crestart+0x58>
     3fc:	e593c004 	ldr	ip, [r3, #4]
     400:	e35c0010 	cmp	ip, #16
     404:	1afffff9 	bne	3f0 <i2crestart+0x40>
		printf("restarter report...%x",I20STAT);
     408:	e59f30b4 	ldr	r3, [pc, #180]	; 4c4 <i2crestart+0x114>
     40c:	e59f00b4 	ldr	r0, [pc, #180]	; 4c8 <i2crestart+0x118>
     410:	e5931004 	ldr	r1, [r3, #4]
     414:	eb0035ea 	bl	dbc4 <__printf_from_arm>
		return 0;
     418:	e3a00000 	mov	r0, #0
		return 0;
		break;
	default:
		return 1;
	}
	}
     41c:	e8bd4008 	pop	{r3, lr}
     420:	e12fff1e 	bx	lr
		while((I21STAT != 0x10)&&(I21STAT != 0x08));
		printf("restarter report...%x",I21STAT);
		return 0;		
		break;
	case 2:
		I22CONSET = 0x14;
     424:	e59f30a0 	ldr	r3, [pc, #160]	; 4cc <i2crestart+0x11c>
     428:	e3a01014 	mov	r1, #20
		I22CONCLR = 0x08;
     42c:	e3a00008 	mov	r0, #8
		I22CONSET = 0x60;
     430:	e3a02060 	mov	r2, #96	; 0x60
		while((I21STAT != 0x10)&&(I21STAT != 0x08));
		printf("restarter report...%x",I21STAT);
		return 0;		
		break;
	case 2:
		I22CONSET = 0x14;
     434:	e5831000 	str	r1, [r3]
		I22CONCLR = 0x08;
     438:	e5830018 	str	r0, [r3, #24]
		I22CONSET = 0x60;
     43c:	e5832000 	str	r2, [r3]
		while((I22STAT != 0x10)&&(I22STAT != 0x08));
     440:	ea000002 	b	450 <i2crestart+0xa0>
     444:	e593e004 	ldr	lr, [r3, #4]
     448:	e35e0008 	cmp	lr, #8
     44c:	0a000002 	beq	45c <i2crestart+0xac>
     450:	e593c004 	ldr	ip, [r3, #4]
     454:	e35c0010 	cmp	ip, #16
     458:	1afffff9 	bne	444 <i2crestart+0x94>
		printf("restarter report...%x",I22STAT);
     45c:	e59f3068 	ldr	r3, [pc, #104]	; 4cc <i2crestart+0x11c>
     460:	e59f0060 	ldr	r0, [pc, #96]	; 4c8 <i2crestart+0x118>
     464:	e5931004 	ldr	r1, [r3, #4]
     468:	eb0035d5 	bl	dbc4 <__printf_from_arm>
		return 0;
     46c:	e3a00000 	mov	r0, #0
     470:	eaffffe9 	b	41c <i2crestart+0x6c>
		while((I20STAT != 0x10)&&(I20STAT != 0x08));
		printf("restarter report...%x",I20STAT);
		return 0;
		break;
	case 1:
		I21CONSET = 0x14;
     474:	e59f3054 	ldr	r3, [pc, #84]	; 4d0 <i2crestart+0x120>
     478:	e3a01014 	mov	r1, #20
		I21CONCLR = 0x08;
     47c:	e3a00008 	mov	r0, #8
		I21CONSET = 0x60;
     480:	e3a02060 	mov	r2, #96	; 0x60
		while((I20STAT != 0x10)&&(I20STAT != 0x08));
		printf("restarter report...%x",I20STAT);
		return 0;
		break;
	case 1:
		I21CONSET = 0x14;
     484:	e5831000 	str	r1, [r3]
		I21CONCLR = 0x08;
     488:	e5830018 	str	r0, [r3, #24]
		I21CONSET = 0x60;
     48c:	e5832000 	str	r2, [r3]
		while((I21STAT != 0x10)&&(I21STAT != 0x08));
     490:	ea000002 	b	4a0 <i2crestart+0xf0>
     494:	e593e004 	ldr	lr, [r3, #4]
     498:	e35e0008 	cmp	lr, #8
     49c:	0a000002 	beq	4ac <i2crestart+0xfc>
     4a0:	e593c004 	ldr	ip, [r3, #4]
     4a4:	e35c0010 	cmp	ip, #16
     4a8:	1afffff9 	bne	494 <i2crestart+0xe4>
		printf("restarter report...%x",I21STAT);
     4ac:	e59f301c 	ldr	r3, [pc, #28]	; 4d0 <i2crestart+0x120>
     4b0:	e59f0010 	ldr	r0, [pc, #16]	; 4c8 <i2crestart+0x118>
     4b4:	e5931004 	ldr	r1, [r3, #4]
     4b8:	eb0035c1 	bl	dbc4 <__printf_from_arm>
		return 0;		
     4bc:	e3a00000 	mov	r0, #0
     4c0:	eaffffd5 	b	41c <i2crestart+0x6c>
     4c4:	e001c000 	.word	0xe001c000
     4c8:	0000e478 	.word	0x0000e478
     4cc:	e0080000 	.word	0xe0080000
     4d0:	e005c000 	.word	0xe005c000

000004d4 <i2cstop>:
/****************************************************************************
function name	:i2stop
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
     4d4:	e3500002 	cmp	r0, #2
     4d8:	1a000004 	bne	4f0 <i2cstop+0x1c>
	case 2:
		I22CONSET = 0x50;
     4dc:	e59f3014 	ldr	r3, [pc, #20]	; 4f8 <i2cstop+0x24>
     4e0:	e3a00050 	mov	r0, #80	; 0x50
		I22CONCLR = 0x2C;
     4e4:	e3a0202c 	mov	r2, #44	; 0x2c
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     4e8:	e5830000 	str	r0, [r3]
		I22CONCLR = 0x2C;
     4ec:	e5832018 	str	r2, [r3, #24]
//		printf("I2C stopped\n");
		break;
	default:
		return 1;
	}
}
     4f0:	e3a00001 	mov	r0, #1
     4f4:	e12fff1e 	bx	lr
     4f8:	e0080000 	.word	0xe0080000

000004fc <i2csender>:
parameter 	:bus_num,data
return value	:void
*****************************************************************************/
void i2csender(int Continue, unsigned int Data, int Keta){
//int i2cStatus;
			if(Continue==0){
     4fc:	e3500000 	cmp	r0, #0
function name	:i2csender
dscribe		:i2c data and adress
parameter 	:bus_num,data
return value	:void
*****************************************************************************/
void i2csender(int Continue, unsigned int Data, int Keta){
     500:	e92d4008 	push	{r3, lr}
//int i2cStatus;
			if(Continue==0){
     504:	0a00000d 	beq	540 <i2csender+0x44>
					printf("No such device%4x\n",Data);
					i2cErr = 0x22;
					return;
					}
			}else {
				for(;Keta != 0;Keta-=8){
     508:	e3520000 	cmp	r2, #0
					I22DAT = (Data & 0xFF);
     50c:	159f0098 	ldrne	r0, [pc, #152]	; 5ac <i2csender+0xb0>
					I22CONCLR  = 0x28;
     510:	13a0c028 	movne	ip, #40	; 0x28
					printf("No such device%4x\n",Data);
					i2cErr = 0x22;
					return;
					}
			}else {
				for(;Keta != 0;Keta-=8){
     514:	0a000022 	beq	5a4 <i2csender+0xa8>
					I22DAT = (Data & 0xFF);
     518:	e20130ff 	and	r3, r1, #255	; 0xff
     51c:	e5803008 	str	r3, [r0, #8]
					I22CONCLR  = 0x28;
     520:	e580c018 	str	ip, [r0, #24]
				while(I22STAT!=0x28);
     524:	e5903004 	ldr	r3, [r0, #4]
     528:	e3530028 	cmp	r3, #40	; 0x28
     52c:	1afffffc 	bne	524 <i2csender+0x28>
					printf("No such device%4x\n",Data);
					i2cErr = 0x22;
					return;
					}
			}else {
				for(;Keta != 0;Keta-=8){
     530:	e2522008 	subs	r2, r2, #8
     534:	0a00001a 	beq	5a4 <i2csender+0xa8>
					I22DAT = (Data & 0xFF);
					I22CONCLR  = 0x28;
				while(I22STAT!=0x28);
//				printf("Data%4x::::\n",Data);
					Data = Data >> 8;
     538:	e1a01421 	lsr	r1, r1, #8
     53c:	eafffff5 	b	518 <i2csender+0x1c>
return value	:void
*****************************************************************************/
void i2csender(int Continue, unsigned int Data, int Keta){
//int i2cStatus;
			if(Continue==0){
				I22DAT = Data;
     540:	e59f3064 	ldr	r3, [pc, #100]	; 5ac <i2csender+0xb0>
     544:	e5831008 	str	r1, [r3, #8]
				I22CONSET |= 0x04;
     548:	e593c000 	ldr	ip, [r3]
				I22CONCLR  = 0x08;
     54c:	e3a02008 	mov	r2, #8
*****************************************************************************/
void i2csender(int Continue, unsigned int Data, int Keta){
//int i2cStatus;
			if(Continue==0){
				I22DAT = Data;
				I22CONSET |= 0x04;
     550:	e38c0004 	orr	r0, ip, #4
     554:	e5830000 	str	r0, [r3]
				I22CONCLR  = 0x08;
     558:	e5832018 	str	r2, [r3, #24]
//				printf("requesting%x",Data);
				while(I22STAT!=0x18 && I22STAT!=0x20);
     55c:	e5932004 	ldr	r2, [r3, #4]
     560:	e3520018 	cmp	r2, #24
     564:	0a000002 	beq	574 <i2csender+0x78>
     568:	e5930004 	ldr	r0, [r3, #4]
     56c:	e3500020 	cmp	r0, #32
     570:	1afffff9 	bne	55c <i2csender+0x60>
	FIO2PIN1 = 0x2;
     574:	e59f0034 	ldr	r0, [pc, #52]	; 5b0 <i2csender+0xb4>
     578:	e3a02002 	mov	r2, #2
     57c:	e54020aa 	strb	r2, [r0, #-170]	; 0xffffff56
				if(I22STAT==0x20){
     580:	e59fc024 	ldr	ip, [pc, #36]	; 5ac <i2csender+0xb0>
     584:	e59c3004 	ldr	r3, [ip, #4]
     588:	e3530020 	cmp	r3, #32
     58c:	1a000004 	bne	5a4 <i2csender+0xa8>
					printf("No such device%4x\n",Data);
     590:	e59f001c 	ldr	r0, [pc, #28]	; 5b4 <i2csender+0xb8>
     594:	eb00358a 	bl	dbc4 <__printf_from_arm>
					i2cErr = 0x22;
     598:	e59f3018 	ldr	r3, [pc, #24]	; 5b8 <i2csender+0xbc>
     59c:	e3a01022 	mov	r1, #34	; 0x22
     5a0:	e5831000 	str	r1, [r3]
				}
//				if(I22STAT==0x28)i2cErr = 0;
//				break;
		}
//	return i2cErr;
}
     5a4:	e8bd4008 	pop	{r3, lr}
     5a8:	e12fff1e 	bx	lr
     5ac:	e0080000 	.word	0xe0080000
     5b0:	3fffc0ff 	.word	0x3fffc0ff
     5b4:	0000e490 	.word	0x0000e490
     5b8:	40000924 	.word	0x40000924

000005bc <novorvisesender>:
void novorvisesender(int Continue, unsigned int Data, int Keta){
			if(Continue==0){
     5bc:	e3500000 	cmp	r0, #0
//				if(I22STAT==0x28)i2cErr = 0;
//				break;
		}
//	return i2cErr;
}
void novorvisesender(int Continue, unsigned int Data, int Keta){
     5c0:	e92d4038 	push	{r3, r4, r5, lr}
     5c4:	e1a04001 	mov	r4, r1
			if(Continue==0){
     5c8:	0a000021 	beq	654 <novorvisesender+0x98>
					printf("No such device%4x\n",Data);
					i2cErr = 0x22;
					return;
					}
			}else {
				for(;Keta != 0;Keta-=8){
     5cc:	e3520000 	cmp	r2, #0
					I22DAT = (Data & 0xFF);
     5d0:	159f10a8 	ldrne	r1, [pc, #168]	; 680 <novorvisesender+0xc4>
					I22CONCLR  = 0x28;
     5d4:	13a00028 	movne	r0, #40	; 0x28
					printf("No such device%4x\n",Data);
					i2cErr = 0x22;
					return;
					}
			}else {
				for(;Keta != 0;Keta-=8){
     5d8:	0a00001b 	beq	64c <novorvisesender+0x90>
					I22DAT = (Data & 0xFF);
     5dc:	e20430ff 	and	r3, r4, #255	; 0xff
     5e0:	e5813008 	str	r3, [r1, #8]
					I22CONCLR  = 0x28;
     5e4:	e5810018 	str	r0, [r1, #24]
				while(I22STAT!=0x28);
     5e8:	e591c004 	ldr	ip, [r1, #4]
     5ec:	e35c0028 	cmp	ip, #40	; 0x28
     5f0:	1afffffc 	bne	5e8 <novorvisesender+0x2c>
					printf("No such device%4x\n",Data);
					i2cErr = 0x22;
					return;
					}
			}else {
				for(;Keta != 0;Keta-=8){
     5f4:	e2522008 	subs	r2, r2, #8
     5f8:	0a000013 	beq	64c <novorvisesender+0x90>
					I22DAT = (Data & 0xFF);
					I22CONCLR  = 0x28;
				while(I22STAT!=0x28);
					Data = Data >> 8;
     5fc:	e1a04424 	lsr	r4, r4, #8
     600:	eafffff5 	b	5dc <novorvisesender+0x20>
void novorvisesender(int Continue, unsigned int Data, int Keta){
			if(Continue==0){
				I22DAT = Data;
				I22CONSET |= 0x04;
				I22CONCLR  = 0x08;
				while(I22STAT!=0x18 && I22STAT!=0x20)printf(".");
     604:	e3a0002e 	mov	r0, #46	; 0x2e
     608:	eb0035af 	bl	dccc <__putchar_from_arm>
     60c:	e5953004 	ldr	r3, [r5, #4]
     610:	e3530018 	cmp	r3, #24
     614:	0a000002 	beq	624 <novorvisesender+0x68>
     618:	e595c004 	ldr	ip, [r5, #4]
     61c:	e35c0020 	cmp	ip, #32
     620:	1afffff7 	bne	604 <novorvisesender+0x48>
				if(I22STAT==0x20){
     624:	e59f1054 	ldr	r1, [pc, #84]	; 680 <novorvisesender+0xc4>
     628:	e5910004 	ldr	r0, [r1, #4]
     62c:	e3500020 	cmp	r0, #32
     630:	1a000005 	bne	64c <novorvisesender+0x90>
					printf("No such device%4x\n",Data);
     634:	e59f0048 	ldr	r0, [pc, #72]	; 684 <novorvisesender+0xc8>
     638:	e1a01004 	mov	r1, r4
     63c:	eb003560 	bl	dbc4 <__printf_from_arm>
					i2cErr = 0x22;
     640:	e59fc040 	ldr	ip, [pc, #64]	; 688 <novorvisesender+0xcc>
     644:	e3a02022 	mov	r2, #34	; 0x22
     648:	e58c2000 	str	r2, [ip]
				}
//				if(I22STAT==0x28)i2cErr = 0;
//				break;
		}
//	return i2cErr;
}
     64c:	e8bd4038 	pop	{r3, r4, r5, lr}
     650:	e12fff1e 	bx	lr
		}
//	return i2cErr;
}
void novorvisesender(int Continue, unsigned int Data, int Keta){
			if(Continue==0){
				I22DAT = Data;
     654:	e59f5024 	ldr	r5, [pc, #36]	; 680 <novorvisesender+0xc4>
     658:	e5851008 	str	r1, [r5, #8]
				I22CONSET |= 0x04;
     65c:	e5952000 	ldr	r2, [r5]
				I22CONCLR  = 0x08;
     660:	e3a00008 	mov	r0, #8
//	return i2cErr;
}
void novorvisesender(int Continue, unsigned int Data, int Keta){
			if(Continue==0){
				I22DAT = Data;
				I22CONSET |= 0x04;
     664:	e3821004 	orr	r1, r2, #4
     668:	e5851000 	str	r1, [r5]
				I22CONCLR  = 0x08;
     66c:	e5850018 	str	r0, [r5, #24]
				while(I22STAT!=0x18 && I22STAT!=0x20)printf(".");
     670:	e5953004 	ldr	r3, [r5, #4]
     674:	e3530018 	cmp	r3, #24
     678:	1affffe6 	bne	618 <novorvisesender+0x5c>
     67c:	eaffffe8 	b	624 <novorvisesender+0x68>
     680:	e0080000 	.word	0xe0080000
     684:	0000e490 	.word	0x0000e490
     688:	40000924 	.word	0x40000924

0000068c <tinyreader>:
//	return i2cErr;
}

/***********************************************************************************************************************************
*/
int tinyreader(int Keta, int Adr, int registernumber){
     68c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
upper:
				I22DAT = (Adr + 1);
     690:	e59f40e4 	ldr	r4, [pc, #228]	; 77c <tinyreader+0xf0>
//	return i2cErr;
}

/***********************************************************************************************************************************
*/
int tinyreader(int Keta, int Adr, int registernumber){
     694:	e1a06000 	mov	r6, r0
     698:	e1a05002 	mov	r5, r2
					printf("reading..  ");
					I22CONSET |= 0x04;
					I22CONCLR  = 0x28;
					printf("Wait\t");
					while(I22STAT != 0x50 );
					printf("%xreg\t%x",registernumber++,I22DAT);
     69c:	e2818001 	add	r8, r1, #1
*/
int tinyreader(int Keta, int Adr, int registernumber){
upper:
				I22DAT = (Adr + 1);
				I22CONSET |= 0x04;
				I22CONCLR  = 0x08;
     6a0:	e3a07008 	mov	r7, #8

/***********************************************************************************************************************************
*/
int tinyreader(int Keta, int Adr, int registernumber){
upper:
				I22DAT = (Adr + 1);
     6a4:	e5848008 	str	r8, [r4, #8]
				I22CONSET |= 0x04;
     6a8:	e5940000 	ldr	r0, [r4]
     6ac:	e3803004 	orr	r3, r0, #4
     6b0:	e5843000 	str	r3, [r4]
				I22CONCLR  = 0x08;
     6b4:	e5847018 	str	r7, [r4, #24]
				while(I22STAT!=0x40 && I22STAT!=0x48);
     6b8:	e5941004 	ldr	r1, [r4, #4]
     6bc:	e3510040 	cmp	r1, #64	; 0x40
     6c0:	0a000002 	beq	6d0 <tinyreader+0x44>
     6c4:	e5942004 	ldr	r2, [r4, #4]
     6c8:	e3520048 	cmp	r2, #72	; 0x48
     6cc:	1afffff9 	bne	6b8 <tinyreader+0x2c>
				if(I22STAT==0x48){
     6d0:	e594c004 	ldr	ip, [r4, #4]
     6d4:	e35c0048 	cmp	ip, #72	; 0x48
     6d8:	e59f309c 	ldr	r3, [pc, #156]	; 77c <tinyreader+0xf0>
     6dc:	1a000005 	bne	6f8 <tinyreader+0x6c>
					printf("no acknowlege(%x)\n",I22STAT);
     6e0:	e5941004 	ldr	r1, [r4, #4]
     6e4:	e59f0094 	ldr	r0, [pc, #148]	; 780 <tinyreader+0xf4>
     6e8:	eb003535 	bl	dbc4 <__printf_from_arm>
					i2crestart(2);
     6ec:	e3a00002 	mov	r0, #2
     6f0:	ebffff2e 	bl	3b0 <i2crestart>
					goto upper;
     6f4:	eaffffea 	b	6a4 <tinyreader+0x18>
					}
				if(I22STAT==0x40);
				while(registernumber!=(Keta+1)){
     6f8:	e2866001 	add	r6, r6, #1
     6fc:	e1550006 	cmp	r5, r6
				if(I22STAT==0x48){
					printf("no acknowlege(%x)\n",I22STAT);
					i2crestart(2);
					goto upper;
					}
				if(I22STAT==0x40);
     700:	e5932004 	ldr	r2, [r3, #4]
				while(registernumber!=(Keta+1)){
     704:	0a000016 	beq	764 <tinyreader+0xd8>
					printf("reading..  ");
					I22CONSET |= 0x04;
     708:	e1a04003 	mov	r4, r3
					I22CONCLR  = 0x28;
     70c:	e3a08028 	mov	r8, #40	; 0x28
					printf("Wait\t");
					while(I22STAT != 0x50 );
     710:	e1a07003 	mov	r7, r3
					i2crestart(2);
					goto upper;
					}
				if(I22STAT==0x40);
				while(registernumber!=(Keta+1)){
					printf("reading..  ");
     714:	e59f0068 	ldr	r0, [pc, #104]	; 784 <tinyreader+0xf8>
     718:	eb003529 	bl	dbc4 <__printf_from_arm>
					I22CONSET |= 0x04;
     71c:	e5941000 	ldr	r1, [r4]
     720:	e3813004 	orr	r3, r1, #4
     724:	e5843000 	str	r3, [r4]
					I22CONCLR  = 0x28;
					printf("Wait\t");
     728:	e59f0058 	ldr	r0, [pc, #88]	; 788 <tinyreader+0xfc>
					}
				if(I22STAT==0x40);
				while(registernumber!=(Keta+1)){
					printf("reading..  ");
					I22CONSET |= 0x04;
					I22CONCLR  = 0x28;
     72c:	e5848018 	str	r8, [r4, #24]
					printf("Wait\t");
     730:	eb003523 	bl	dbc4 <__printf_from_arm>
					while(I22STAT != 0x50 );
     734:	e594e004 	ldr	lr, [r4, #4]
     738:	e35e0050 	cmp	lr, #80	; 0x50
     73c:	1afffffc 	bne	734 <tinyreader+0xa8>
					printf("%xreg\t%x",registernumber++,I22DAT);
     740:	e1a01005 	mov	r1, r5
     744:	e5972008 	ldr	r2, [r7, #8]
     748:	e59f003c 	ldr	r0, [pc, #60]	; 78c <tinyreader+0x100>
     74c:	eb00351c 	bl	dbc4 <__printf_from_arm>
     750:	e2855001 	add	r5, r5, #1
					vTaskDelay(10 / portTICK_RATE_MS);
     754:	e3a0000a 	mov	r0, #10
     758:	eb003516 	bl	dbb8 <__vTaskDelay_from_arm>
					printf("no acknowlege(%x)\n",I22STAT);
					i2crestart(2);
					goto upper;
					}
				if(I22STAT==0x40);
				while(registernumber!=(Keta+1)){
     75c:	e1550006 	cmp	r5, r6
     760:	1affffeb 	bne	714 <tinyreader+0x88>
					vTaskDelay(10 / portTICK_RATE_MS);

//					if(a==32)return;
				}
				
				I22CONCLR = 0x0C;
     764:	e59f2010 	ldr	r2, [pc, #16]	; 77c <tinyreader+0xf0>
     768:	e3a0000c 	mov	r0, #12
     76c:	e5820018 	str	r0, [r2, #24]
//	return i2cErr;
}
     770:	e3a00000 	mov	r0, #0
     774:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     778:	e12fff1e 	bx	lr
     77c:	e0080000 	.word	0xe0080000
     780:	0000e4a4 	.word	0x0000e4a4
     784:	0000e4b8 	.word	0x0000e4b8
     788:	0000e4c4 	.word	0x0000e4c4
     78c:	0000e4cc 	.word	0x0000e4cc

00000790 <i2creader>:

int i2creader(int Keta, int Adr, int registernumber){
     790:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
char Loopy;
upper:
				I22DAT = (Adr + 1);
     794:	e59f4190 	ldr	r4, [pc, #400]	; 92c <i2creader+0x19c>
				
				I22CONCLR = 0x0C;
//	return i2cErr;
}

int i2creader(int Keta, int Adr, int registernumber){
     798:	e1a06000 	mov	r6, r0
     79c:	e1a07002 	mov	r7, r2
					break;
					case 2:
					Loopy='-';
					break;
					case 3:
					Loopy='\\';
     7a0:	e281a001 	add	sl, r1, #1
int i2creader(int Keta, int Adr, int registernumber){
char Loopy;
upper:
				I22DAT = (Adr + 1);
				I22CONSET |= 0x04;
				I22CONCLR  = 0x08;
     7a4:	e3a08008 	mov	r8, #8
}

int i2creader(int Keta, int Adr, int registernumber){
char Loopy;
upper:
				I22DAT = (Adr + 1);
     7a8:	e584a008 	str	sl, [r4, #8]
				I22CONSET |= 0x04;
     7ac:	e5941000 	ldr	r1, [r4]
     7b0:	e3810004 	orr	r0, r1, #4
     7b4:	e5840000 	str	r0, [r4]
				I22CONCLR  = 0x08;
     7b8:	e5848018 	str	r8, [r4, #24]
				printf("Status is %x\n",I22STAT);
     7bc:	e59f016c 	ldr	r0, [pc, #364]	; 930 <i2creader+0x1a0>
     7c0:	e5941004 	ldr	r1, [r4, #4]
     7c4:	eb0034fe 	bl	dbc4 <__printf_from_arm>
				while(I22STAT!=0x40 && I22STAT!=0x48)printf(".");
     7c8:	e5943004 	ldr	r3, [r4, #4]
     7cc:	e3530040 	cmp	r3, #64	; 0x40
     7d0:	1a000005 	bne	7ec <i2creader+0x5c>
     7d4:	ea000007 	b	7f8 <i2creader+0x68>
     7d8:	e3a0002e 	mov	r0, #46	; 0x2e
     7dc:	eb00353a 	bl	dccc <__putchar_from_arm>
     7e0:	e5949004 	ldr	r9, [r4, #4]
     7e4:	e3590040 	cmp	r9, #64	; 0x40
     7e8:	0a000002 	beq	7f8 <i2creader+0x68>
     7ec:	e5942004 	ldr	r2, [r4, #4]
     7f0:	e3520048 	cmp	r2, #72	; 0x48
     7f4:	1afffff7 	bne	7d8 <i2creader+0x48>
				if(I22STAT==0x48){
     7f8:	e594c004 	ldr	ip, [r4, #4]
     7fc:	e35c0048 	cmp	ip, #72	; 0x48
     800:	e59f9124 	ldr	r9, [pc, #292]	; 92c <i2creader+0x19c>
     804:	1a000005 	bne	820 <i2creader+0x90>
					printf("no acknowlege(%x)\n",I22STAT);
     808:	e5941004 	ldr	r1, [r4, #4]
     80c:	e59f0120 	ldr	r0, [pc, #288]	; 934 <i2creader+0x1a4>
     810:	eb0034eb 	bl	dbc4 <__printf_from_arm>
					i2crestart(2);
     814:	e3a00002 	mov	r0, #2
     818:	ebfffee4 	bl	3b0 <i2crestart>
					goto upper;
     81c:	eaffffe1 	b	7a8 <i2creader+0x18>
					}
				if(I22STAT==0x40);
				printf("Read begin[>  ");
     820:	e59f0110 	ldr	r0, [pc, #272]	; 938 <i2creader+0x1a8>
				while(registernumber++!=(Keta+1)){
     824:	e2866001 	add	r6, r6, #1
				if(I22STAT==0x48){
					printf("no acknowlege(%x)\n",I22STAT);
					i2crestart(2);
					goto upper;
					}
				if(I22STAT==0x40);
     828:	e5993004 	ldr	r3, [r9, #4]
				printf("Read begin[>  ");
     82c:	eb0034e4 	bl	dbc4 <__printf_from_arm>
				while(registernumber++!=(Keta+1)){
     830:	e1570006 	cmp	r7, r6
     834:	059f8100 	ldreq	r8, [pc, #256]	; 93c <i2creader+0x1ac>
     838:	0a000030 	beq	900 <i2creader+0x170>
     83c:	e59f80f8 	ldr	r8, [pc, #248]	; 93c <i2creader+0x1ac>
     840:	e2877001 	add	r7, r7, #1
					I22CONSET |= 0x04;
     844:	e1a04009 	mov	r4, r9
					I22CONCLR  = 0x28;
     848:	e3a0a028 	mov	sl, #40	; 0x28
					goto upper;
					}
				if(I22STAT==0x40);
				printf("Read begin[>  ");
				while(registernumber++!=(Keta+1)){
					I22CONSET |= 0x04;
     84c:	e5943000 	ldr	r3, [r4]
     850:	e383e004 	orr	lr, r3, #4
     854:	e584e000 	str	lr, [r4]
					I22CONCLR  = 0x28;
     858:	e584a018 	str	sl, [r4, #24]
					while(I22STAT != 0x50 );
     85c:	e5940004 	ldr	r0, [r4, #4]
     860:	e3500050 	cmp	r0, #80	; 0x50
     864:	1afffffc 	bne	85c <i2creader+0xcc>
					vTaskDelay(10 / portTICK_RATE_MS);
     868:	e3a0000a 	mov	r0, #10
     86c:	eb0034d1 	bl	dbb8 <__vTaskDelay_from_arm>
				switch (registernumber%4){
     870:	e1a00fc7 	asr	r0, r7, #31
     874:	e1a02f20 	lsr	r2, r0, #30
     878:	e0873002 	add	r3, r7, r2
     87c:	e203c003 	and	ip, r3, #3
     880:	e062100c 	rsb	r1, r2, ip
     884:	e3510003 	cmp	r1, #3
     888:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
     88c:	ea000019 	b	8f8 <i2creader+0x168>
     890:	000008ec 	.word	0x000008ec
     894:	000008e0 	.word	0x000008e0
     898:	000008d4 	.word	0x000008d4
     89c:	000008a0 	.word	0x000008a0
					case 2:
					Loopy='-';
					break;
					case 3:
					Loopy='\\';
					break;
     8a0:	e3a0105c 	mov	r1, #92	; 0x5c
					break;
					case 2:
					Loopy='-';
					break;
					case 3:
					Loopy='\\';
     8a4:	e1a05001 	mov	r5, r1
					break;
					}
				printf("\b\b\b=>%c",Loopy);
     8a8:	e59f0090 	ldr	r0, [pc, #144]	; 940 <i2creader+0x1b0>
     8ac:	eb0034c4 	bl	dbc4 <__printf_from_arm>
				fflush(stdout);
     8b0:	e5981000 	ldr	r1, [r8]
     8b4:	e5910008 	ldr	r0, [r1, #8]
     8b8:	eb0034fc 	bl	dcb0 <__fflush_from_arm>
				vTaskDelay(10 / portTICK_RATE_MS);		
     8bc:	e3a0000a 	mov	r0, #10
     8c0:	eb0034bc 	bl	dbb8 <__vTaskDelay_from_arm>
					i2crestart(2);
					goto upper;
					}
				if(I22STAT==0x40);
				printf("Read begin[>  ");
				while(registernumber++!=(Keta+1)){
     8c4:	e1560007 	cmp	r6, r7
     8c8:	0a00000c 	beq	900 <i2creader+0x170>
     8cc:	e2877001 	add	r7, r7, #1
     8d0:	eaffffdd 	b	84c <i2creader+0xbc>
					case 1:
					Loopy='/';
					break;
					case 2:
					Loopy='-';
					break;
     8d4:	e3a0102d 	mov	r1, #45	; 0x2d
					break;
					case 1:
					Loopy='/';
					break;
					case 2:
					Loopy='-';
     8d8:	e1a05001 	mov	r5, r1
					break;
     8dc:	eafffff1 	b	8a8 <i2creader+0x118>
					case 0:
					Loopy='|';
					break;
					case 1:
					Loopy='/';
					break;
     8e0:	e3a0102f 	mov	r1, #47	; 0x2f
				switch (registernumber%4){
					case 0:
					Loopy='|';
					break;
					case 1:
					Loopy='/';
     8e4:	e1a05001 	mov	r5, r1
					break;
     8e8:	eaffffee 	b	8a8 <i2creader+0x118>
				while(registernumber++!=(Keta+1)){
					I22CONSET |= 0x04;
					I22CONCLR  = 0x28;
					while(I22STAT != 0x50 );
					vTaskDelay(10 / portTICK_RATE_MS);
				switch (registernumber%4){
     8ec:	e3a0107c 	mov	r1, #124	; 0x7c
					case 0:
					Loopy='|';
     8f0:	e1a05001 	mov	r5, r1
     8f4:	eaffffeb 	b	8a8 <i2creader+0x118>
				while(registernumber++!=(Keta+1)){
					I22CONSET |= 0x04;
					I22CONCLR  = 0x28;
					while(I22STAT != 0x50 );
					vTaskDelay(10 / portTICK_RATE_MS);
				switch (registernumber%4){
     8f8:	e1a01005 	mov	r1, r5
     8fc:	eaffffe9 	b	8a8 <i2creader+0x118>
				printf("\b\b\b=>%c",Loopy);
				fflush(stdout);
				vTaskDelay(10 / portTICK_RATE_MS);		
//					if(a==32)return;
				}
				printf("done.....");
     900:	e59f003c 	ldr	r0, [pc, #60]	; 944 <i2creader+0x1b4>
     904:	eb0034ae 	bl	dbc4 <__printf_from_arm>
				fflush(stdout);
     908:	e5983000 	ldr	r3, [r8]
     90c:	e5930008 	ldr	r0, [r3, #8]
     910:	eb0034e6 	bl	dcb0 <__fflush_from_arm>
				I22CONCLR = 0x0C;
     914:	e59f2010 	ldr	r2, [pc, #16]	; 92c <i2creader+0x19c>
     918:	e3a0c00c 	mov	ip, #12
     91c:	e582c018 	str	ip, [r2, #24]
//	return i2cErr;
}
     920:	e3a00000 	mov	r0, #0
     924:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
     928:	e12fff1e 	bx	lr
     92c:	e0080000 	.word	0xe0080000
     930:	0000e4d8 	.word	0x0000e4d8
     934:	0000e4a4 	.word	0x0000e4a4
     938:	0000e4e8 	.word	0x0000e4e8
     93c:	40000000 	.word	0x40000000
     940:	0000e4f8 	.word	0x0000e4f8
     944:	0000e500 	.word	0x0000e500

00000948 <tinyread>:

/**************************************************************************************************************************************
*************************************************************************************************************************************/
void tinyread(int subadr, int size, int NumByte){
     948:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     94c:	e1a07000 	mov	r7, r0
	i2cstart(2);
     950:	e3a00002 	mov	r0, #2
//	return i2cErr;
}

/**************************************************************************************************************************************
*************************************************************************************************************************************/
void tinyread(int subadr, int size, int NumByte){
     954:	e1a06001 	mov	r6, r1
     958:	e1a05002 	mov	r5, r2
	i2cstart(2);
	i2cErr = 0;			//i want to read!b So, start.
     95c:	e59f407c 	ldr	r4, [pc, #124]	; 9e0 <tinyread+0x98>
}

/**************************************************************************************************************************************
*************************************************************************************************************************************/
void tinyread(int subadr, int size, int NumByte){
	i2cstart(2);
     960:	ebfffe6f 	bl	324 <i2cstart>
	i2cErr = 0;			//i want to read!b So, start.
     964:	e3a0c000 	mov	ip, #0
	novorvisesender(0,0x42,8);	//Hey, ?
     968:	e1a0000c 	mov	r0, ip
     96c:	e3a01042 	mov	r1, #66	; 0x42
     970:	e3a02008 	mov	r2, #8

/**************************************************************************************************************************************
*************************************************************************************************************************************/
void tinyread(int subadr, int size, int NumByte){
	i2cstart(2);
	i2cErr = 0;			//i want to read!b So, start.
     974:	e584c000 	str	ip, [r4]
	novorvisesender(0,0x42,8);	//Hey, ?
     978:	ebffff0f 	bl	5bc <novorvisesender>
	if(i2cErr==0x22){
     97c:	e5943000 	ldr	r3, [r4]
     980:	e3530022 	cmp	r3, #34	; 0x22
     984:	0a000012 	beq	9d4 <tinyread+0x8c>
		printf("fatal");
		i2cstop(2);
		return;
	}
	i2csender(1,subadr,8);
     988:	e1a01007 	mov	r1, r7
     98c:	e3a02008 	mov	r2, #8
     990:	e3a00001 	mov	r0, #1
     994:	ebfffed8 	bl	4fc <i2csender>
	i2crestart(2);			//if you understand, restart,please.
     998:	e3a00002 	mov	r0, #2
     99c:	ebfffe83 	bl	3b0 <i2crestart>
	tinyreader(size,0x42,NumByte);			//
     9a0:	e1a00006 	mov	r0, r6
     9a4:	e3a01042 	mov	r1, #66	; 0x42
     9a8:	e1a02005 	mov	r2, r5
     9ac:	ebffff36 	bl	68c <tinyreader>
	vTaskDelay(30 / portTICK_RATE_MS);
     9b0:	e3a0001e 	mov	r0, #30
     9b4:	eb00347f 	bl	dbb8 <__vTaskDelay_from_arm>
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     9b8:	e59f0024 	ldr	r0, [pc, #36]	; 9e4 <tinyread+0x9c>
     9bc:	e3a01050 	mov	r1, #80	; 0x50
		I22CONCLR = 0x2C;
     9c0:	e3a0202c 	mov	r2, #44	; 0x2c
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     9c4:	e5801000 	str	r1, [r0]
		I22CONCLR = 0x2C;
     9c8:	e5802018 	str	r2, [r0, #24]
	i2csender(1,subadr,8);
	i2crestart(2);			//if you understand, restart,please.
	tinyreader(size,0x42,NumByte);			//
	vTaskDelay(30 / portTICK_RATE_MS);
	i2cstop(2);
}
     9cc:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     9d0:	e12fff1e 	bx	lr
void tinyread(int subadr, int size, int NumByte){
	i2cstart(2);
	i2cErr = 0;			//i want to read!b So, start.
	novorvisesender(0,0x42,8);	//Hey, ?
	if(i2cErr==0x22){
		printf("fatal");
     9d4:	e59f000c 	ldr	r0, [pc, #12]	; 9e8 <tinyread+0xa0>
     9d8:	eb003479 	bl	dbc4 <__printf_from_arm>
     9dc:	eafffff5 	b	9b8 <tinyread+0x70>
     9e0:	40000924 	.word	0x40000924
     9e4:	e0080000 	.word	0xe0080000
     9e8:	0000e50c 	.word	0x0000e50c

000009ec <SCCBread>:
	i2crestart(2);			//if you understand, restart,please.
	tinyreader(size,0x42,NumByte);			//
	vTaskDelay(30 / portTICK_RATE_MS);
	i2cstop(2);
}
void SCCBread(int subadr, int size, int NumByte){
     9ec:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     9f0:	e1a07000 	mov	r7, r0
	i2cstart(2);
     9f4:	e3a00002 	mov	r0, #2
	i2crestart(2);			//if you understand, restart,please.
	tinyreader(size,0x42,NumByte);			//
	vTaskDelay(30 / portTICK_RATE_MS);
	i2cstop(2);
}
void SCCBread(int subadr, int size, int NumByte){
     9f8:	e1a06001 	mov	r6, r1
     9fc:	e1a05002 	mov	r5, r2
	i2cstart(2);
//	vTaskDelay(300 / portTICK_RATE_MS);
	i2cErr = 0;			//i want to read!b So, start.
     a00:	e59f4090 	ldr	r4, [pc, #144]	; a98 <SCCBread+0xac>
	tinyreader(size,0x42,NumByte);			//
	vTaskDelay(30 / portTICK_RATE_MS);
	i2cstop(2);
}
void SCCBread(int subadr, int size, int NumByte){
	i2cstart(2);
     a04:	ebfffe46 	bl	324 <i2cstart>
//	vTaskDelay(300 / portTICK_RATE_MS);
	i2cErr = 0;			//i want to read!b So, start.
     a08:	e3a0c000 	mov	ip, #0
	i2csender(0,0x42,8);	//Hey, ?
     a0c:	e1a0000c 	mov	r0, ip
     a10:	e3a01042 	mov	r1, #66	; 0x42
     a14:	e3a02008 	mov	r2, #8
	i2cstop(2);
}
void SCCBread(int subadr, int size, int NumByte){
	i2cstart(2);
//	vTaskDelay(300 / portTICK_RATE_MS);
	i2cErr = 0;			//i want to read!b So, start.
     a18:	e584c000 	str	ip, [r4]
	i2csender(0,0x42,8);	//Hey, ?
     a1c:	ebfffeb6 	bl	4fc <i2csender>
	if(i2cErr==0x22){
     a20:	e5943000 	ldr	r3, [r4]
     a24:	e3530022 	cmp	r3, #34	; 0x22
     a28:	0a000012 	beq	a78 <SCCBread+0x8c>
		printf("fatal");
		i2cstop(2);
		return;
	}
	i2csender(1,subadr,8);
     a2c:	e1a01007 	mov	r1, r7
     a30:	e3a02008 	mov	r2, #8
     a34:	e3a00001 	mov	r0, #1
     a38:	ebfffeaf 	bl	4fc <i2csender>
//	printf("Adress read request at%4x OK\n\n", subadr);	//0x03byte? 
	i2crestart(2);			//if you understand, restart,please.
     a3c:	e3a00002 	mov	r0, #2
     a40:	ebfffe5a 	bl	3b0 <i2crestart>
	i2creader(size,0x42,NumByte);			//
     a44:	e1a02005 	mov	r2, r5
     a48:	e1a00006 	mov	r0, r6
     a4c:	e3a01042 	mov	r1, #66	; 0x42
     a50:	ebffff4e 	bl	790 <i2creader>
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     a54:	e59f3040 	ldr	r3, [pc, #64]	; a9c <SCCBread+0xb0>
     a58:	e3a02050 	mov	r2, #80	; 0x50
		I22CONCLR = 0x2C;
     a5c:	e3a0c02c 	mov	ip, #44	; 0x2c
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     a60:	e5832000 	str	r2, [r3]
	i2csender(1,subadr,8);
//	printf("Adress read request at%4x OK\n\n", subadr);	//0x03byte? 
	i2crestart(2);			//if you understand, restart,please.
	i2creader(size,0x42,NumByte);			//
	i2cstop(2);
	printf("Debu331g\n");
     a64:	e59f0034 	ldr	r0, [pc, #52]	; aa0 <SCCBread+0xb4>
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
		I22CONCLR = 0x2C;
     a68:	e583c018 	str	ip, [r3, #24]
	i2csender(1,subadr,8);
//	printf("Adress read request at%4x OK\n\n", subadr);	//0x03byte? 
	i2crestart(2);			//if you understand, restart,please.
	i2creader(size,0x42,NumByte);			//
	i2cstop(2);
	printf("Debu331g\n");
     a6c:	eb003488 	bl	dc94 <__puts_from_arm>
}
     a70:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
     a74:	e12fff1e 	bx	lr
	i2cstart(2);
//	vTaskDelay(300 / portTICK_RATE_MS);
	i2cErr = 0;			//i want to read!b So, start.
	i2csender(0,0x42,8);	//Hey, ?
	if(i2cErr==0x22){
		printf("fatal");
     a78:	e59f0024 	ldr	r0, [pc, #36]	; aa4 <SCCBread+0xb8>
     a7c:	eb003450 	bl	dbc4 <__printf_from_arm>
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     a80:	e59f0014 	ldr	r0, [pc, #20]	; a9c <SCCBread+0xb0>
     a84:	e3a01050 	mov	r1, #80	; 0x50
		I22CONCLR = 0x2C;
     a88:	e3a0202c 	mov	r2, #44	; 0x2c
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     a8c:	e5801000 	str	r1, [r0]
		I22CONCLR = 0x2C;
     a90:	e5802018 	str	r2, [r0, #24]
     a94:	eafffff5 	b	a70 <SCCBread+0x84>
     a98:	40000924 	.word	0x40000924
     a9c:	e0080000 	.word	0xe0080000
     aa0:	0000e514 	.word	0x0000e514
     aa4:	0000e50c 	.word	0x0000e50c

00000aa8 <SCCBwrite>:
	i2crestart(2);			//if you understand, restart,please.
	i2creader(size,0x42,NumByte);			//
	i2cstop(2);
	printf("Debu331g\n");
}
int SCCBwrite(int subadr, int size, int Data ){
     aa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	i2cstart(2);
//	vTaskDelay(1 / portTICK_RATE_MS);
	i2cErr = 0;
     aac:	e59f5098 	ldr	r5, [pc, #152]	; b4c <SCCBwrite+0xa4>
     ab0:	e3a04000 	mov	r4, #0
	i2crestart(2);			//if you understand, restart,please.
	i2creader(size,0x42,NumByte);			//
	i2cstop(2);
	printf("Debu331g\n");
}
int SCCBwrite(int subadr, int size, int Data ){
     ab4:	e1a08000 	mov	r8, r0
	i2cstart(2);
     ab8:	e3a00002 	mov	r0, #2
	i2crestart(2);			//if you understand, restart,please.
	i2creader(size,0x42,NumByte);			//
	i2cstop(2);
	printf("Debu331g\n");
}
int SCCBwrite(int subadr, int size, int Data ){
     abc:	e1a06001 	mov	r6, r1
     ac0:	e1a07002 	mov	r7, r2
	i2cstart(2);
     ac4:	ebfffe16 	bl	324 <i2cstart>
//	vTaskDelay(1 / portTICK_RATE_MS);
	i2cErr = 0;
	i2csender(0,0x42,8);	//Hey, ?
     ac8:	e1a00004 	mov	r0, r4
     acc:	e3a01042 	mov	r1, #66	; 0x42
     ad0:	e3a02008 	mov	r2, #8
	printf("Debu331g\n");
}
int SCCBwrite(int subadr, int size, int Data ){
	i2cstart(2);
//	vTaskDelay(1 / portTICK_RATE_MS);
	i2cErr = 0;
     ad4:	e5854000 	str	r4, [r5]
	i2csender(0,0x42,8);	//Hey, ?
     ad8:	ebfffe87 	bl	4fc <i2csender>
	if(i2cErr==0x22){
     adc:	e5953000 	ldr	r3, [r5]
     ae0:	e3530022 	cmp	r3, #34	; 0x22
     ae4:	0a00000f 	beq	b28 <SCCBwrite+0x80>
		printf("fatal");
		i2cstop(2);
		return -1;
	}
	i2csender(1,subadr,8);	//3byte? 
     ae8:	e3a00001 	mov	r0, #1
     aec:	e1a01008 	mov	r1, r8
     af0:	e3a02008 	mov	r2, #8
     af4:	ebfffe80 	bl	4fc <i2csender>
	i2csender(1,Data,size);
     af8:	e3a00001 	mov	r0, #1
     afc:	e1a02006 	mov	r2, r6
     b00:	e1a01007 	mov	r1, r7
     b04:	ebfffe7c 	bl	4fc <i2csender>
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     b08:	e59f3040 	ldr	r3, [pc, #64]	; b50 <SCCBwrite+0xa8>
     b0c:	e3a02050 	mov	r2, #80	; 0x50
		I22CONCLR = 0x2C;
     b10:	e3a0c02c 	mov	ip, #44	; 0x2c
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     b14:	e5832000 	str	r2, [r3]
		I22CONCLR = 0x2C;
     b18:	e583c018 	str	ip, [r3, #24]
		return -1;
	}
	i2csender(1,subadr,8);	//3byte? 
	i2csender(1,Data,size);
	i2cstop(2);
	return 0;
     b1c:	e1a00004 	mov	r0, r4
}
     b20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     b24:	e12fff1e 	bx	lr
	i2cstart(2);
//	vTaskDelay(1 / portTICK_RATE_MS);
	i2cErr = 0;
	i2csender(0,0x42,8);	//Hey, ?
	if(i2cErr==0x22){
		printf("fatal");
     b28:	e59f0024 	ldr	r0, [pc, #36]	; b54 <SCCBwrite+0xac>
     b2c:	eb003424 	bl	dbc4 <__printf_from_arm>
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     b30:	e59f1018 	ldr	r1, [pc, #24]	; b50 <SCCBwrite+0xa8>
     b34:	e3a00050 	mov	r0, #80	; 0x50
		I22CONCLR = 0x2C;
     b38:	e3a0202c 	mov	r2, #44	; 0x2c
discribe	:the i2c will stop
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
     b3c:	e5810000 	str	r0, [r1]
	i2cErr = 0;
	i2csender(0,0x42,8);	//Hey, ?
	if(i2cErr==0x22){
		printf("fatal");
		i2cstop(2);
		return -1;
     b40:	e3e00000 	mvn	r0, #0
****************************************************************************/ 
int i2cstop(int a){
	switch(a){
	case 2:
		I22CONSET = 0x50;
		I22CONCLR = 0x2C;
     b44:	e5812018 	str	r2, [r1, #24]
	i2cErr = 0;
	i2csender(0,0x42,8);	//Hey, ?
	if(i2cErr==0x22){
		printf("fatal");
		i2cstop(2);
		return -1;
     b48:	eafffff4 	b	b20 <SCCBwrite+0x78>
     b4c:	40000924 	.word	0x40000924
     b50:	e0080000 	.word	0xe0080000
     b54:	0000e50c 	.word	0x0000e50c

00000b58 <SCCBByteWrite>:
	return 0;
}
int SCCBByteWrite(int inp)
{
//	printf("%x,%x,%x",inp >> 8, 8, inp & 0xFF);
	return SCCBwrite( (inp >> 8 & 0xFF),8, (inp & 0xFF) );
     b58:	e1a03420 	lsr	r3, r0, #8
     b5c:	e20020ff 	and	r2, r0, #255	; 0xff
     b60:	e3a01008 	mov	r1, #8
     b64:	e20300ff 	and	r0, r3, #255	; 0xff
     b68:	eaffffce 	b	aa8 <SCCBwrite>

00000b6c <vi2c>:
}
void vi2c( void *pvParameters )
{
     b6c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}

	int regpointer;
	char Loopy;
	xSemaphoreTake(Mutex, portMAX_DELAY );
     b70:	e59f4138 	ldr	r4, [pc, #312]	; cb0 <vi2c+0x144>
     b74:	e3a01000 	mov	r1, #0
     b78:	e1a03001 	mov	r3, r1
	case 1:
		I21CONSET = 0x40;
		return 0;
		break;
	case 2:
		I22CONSET = 0x40;
     b7c:	e3a07040 	mov	r7, #64	; 0x40
void vi2c( void *pvParameters )
{

	int regpointer;
	char Loopy;
	xSemaphoreTake(Mutex, portMAX_DELAY );
     b80:	e3e02000 	mvn	r2, #0
     b84:	e5940000 	ldr	r0, [r4]
     b88:	eb003429 	bl	dc34 <__xQueueGenericReceive_from_arm>
	i2cmasterset(2);
	I22SCLH = 80;
     b8c:	e2875010 	add	r5, r7, #16
	case 1:
		I21CONSET = 0x40;
		return 0;
		break;
	case 2:
		I22CONSET = 0x40;
     b90:	e59f111c 	ldr	r1, [pc, #284]	; cb4 <vi2c+0x148>
	int regpointer;
	char Loopy;
	xSemaphoreTake(Mutex, portMAX_DELAY );
	i2cmasterset(2);
	I22SCLH = 80;
	I22SCLL = 180;
     b94:	e2852064 	add	r2, r5, #100	; 0x64
	case 1:
		I21CONSET = 0x40;
		return 0;
		break;
	case 2:
		I22CONSET = 0x40;
     b98:	e5817000 	str	r7, [r1]
	char Loopy;
	xSemaphoreTake(Mutex, portMAX_DELAY );
	i2cmasterset(2);
	I22SCLH = 80;
	I22SCLL = 180;
	vTaskDelay(300 / portTICK_RATE_MS);
     b9c:	e3a00f4b 	mov	r0, #300	; 0x12c

	int regpointer;
	char Loopy;
	xSemaphoreTake(Mutex, portMAX_DELAY );
	i2cmasterset(2);
	I22SCLH = 80;
     ba0:	e5815010 	str	r5, [r1, #16]
	I22SCLL = 180;
	vTaskDelay(300 / portTICK_RATE_MS);
	printf("Register Reset\n");
	fflush(stdout);
     ba4:	e59f610c 	ldr	r6, [pc, #268]	; cb8 <vi2c+0x14c>
	int regpointer;
	char Loopy;
	xSemaphoreTake(Mutex, portMAX_DELAY );
	i2cmasterset(2);
	I22SCLH = 80;
	I22SCLL = 180;
     ba8:	e5812014 	str	r2, [r1, #20]
	vTaskDelay(300 / portTICK_RATE_MS);
     bac:	eb003401 	bl	dbb8 <__vTaskDelay_from_arm>
	printf("Register Reset\n");
     bb0:	e59f0104 	ldr	r0, [pc, #260]	; cbc <vi2c+0x150>
     bb4:	eb003436 	bl	dc94 <__puts_from_arm>
	fflush(stdout);
     bb8:	e5960000 	ldr	r0, [r6]
     bbc:	e5900008 	ldr	r0, [r0, #8]
     bc0:	eb00343a 	bl	dcb0 <__fflush_from_arm>
	RESETREG
     bc4:	e3a00d4a 	mov	r0, #4736	; 0x1280
     bc8:	ebffffe2 	bl	b58 <SCCBByteWrite>
	vTaskDelay(200 / portTICK_RATE_MS);
     bcc:	e3a000c8 	mov	r0, #200	; 0xc8
     bd0:	eb0033f8 	bl	dbb8 <__vTaskDelay_from_arm>
//	fflush(stdout);
	printf("Setup begin[>  ");
     bd4:	e59f00e4 	ldr	r0, [pc, #228]	; cc0 <vi2c+0x154>
     bd8:	eb0033f9 	bl	dbc4 <__printf_from_arm>
	fflush(stdout);
     bdc:	e5963000 	ldr	r3, [r6]
     be0:	e5930008 	ldr	r0, [r3, #8]
     be4:	eb003431 	bl	dcb0 <__fflush_from_arm>
     be8:	e59f70d4 	ldr	r7, [pc, #212]	; cc4 <vi2c+0x158>
	for(regpointer=0;regpointer!=129;){
     bec:	e3a05000 	mov	r5, #0
		if(SCCBByteWrite(OV7670[regpointer])==-1)continue;
     bf0:	e7970105 	ldr	r0, [r7, r5, lsl #2]
     bf4:	ebffffd7 	bl	b58 <SCCBByteWrite>
     bf8:	e3700001 	cmn	r0, #1
     bfc:	0a000028 	beq	ca4 <vi2c+0x138>
		regpointer++;
     c00:	e2855001 	add	r5, r5, #1
		switch (regpointer%4){
     c04:	e2051003 	and	r1, r5, #3
     c08:	e3510002 	cmp	r1, #2
			break;
			case 1:
			Loopy='/';
			break;
			case 2:
			Loopy='-';
     c0c:	03a0102d 	moveq	r1, #45	; 0x2d
	printf("Setup begin[>  ");
	fflush(stdout);
	for(regpointer=0;regpointer!=129;){
		if(SCCBByteWrite(OV7670[regpointer])==-1)continue;
		regpointer++;
		switch (regpointer%4){
     c10:	0a000005 	beq	c2c <vi2c+0xc0>
     c14:	e3510003 	cmp	r1, #3
			break;
			case 2:
			Loopy='-';
			break;
			case 3:
			Loopy='\\';
     c18:	03a0105c 	moveq	r1, #92	; 0x5c
	printf("Setup begin[>  ");
	fflush(stdout);
	for(regpointer=0;regpointer!=129;){
		if(SCCBByteWrite(OV7670[regpointer])==-1)continue;
		regpointer++;
		switch (regpointer%4){
     c1c:	0a000002 	beq	c2c <vi2c+0xc0>
			case 0:
			Loopy='|';
     c20:	e3510001 	cmp	r1, #1
     c24:	03a0102f 	moveq	r1, #47	; 0x2f
     c28:	13a0107c 	movne	r1, #124	; 0x7c
			break;
			case 3:
			Loopy='\\';
			break;
			}
		printf("\b\b\b=>%c",Loopy);
     c2c:	e59f0094 	ldr	r0, [pc, #148]	; cc8 <vi2c+0x15c>
     c30:	eb0033e3 	bl	dbc4 <__printf_from_arm>
		fflush(stdout);
     c34:	e596c000 	ldr	ip, [r6]
     c38:	e59c0008 	ldr	r0, [ip, #8]
     c3c:	eb00341b 	bl	dcb0 <__fflush_from_arm>
		vTaskDelay(10 / portTICK_RATE_MS);
     c40:	e3a0000a 	mov	r0, #10
     c44:	eb0033db 	bl	dbb8 <__vTaskDelay_from_arm>
	RESETREG
	vTaskDelay(200 / portTICK_RATE_MS);
//	fflush(stdout);
	printf("Setup begin[>  ");
	fflush(stdout);
	for(regpointer=0;regpointer!=129;){
     c48:	e3550081 	cmp	r5, #129	; 0x81
     c4c:	1affffe7 	bne	bf0 <vi2c+0x84>
			}
		printf("\b\b\b=>%c",Loopy);
		fflush(stdout);
		vTaskDelay(10 / portTICK_RATE_MS);
		}
	printf("\rData transmition End!\n");
     c50:	e59f0074 	ldr	r0, [pc, #116]	; ccc <vi2c+0x160>
     c54:	eb00340e 	bl	dc94 <__puts_from_arm>
	fflush(stdout);
     c58:	e5963000 	ldr	r3, [r6]
     c5c:	e5930008 	ldr	r0, [r3, #8]
     c60:	eb003412 	bl	dcb0 <__fflush_from_arm>
	SCCBread(0x00,0xca,0);
     c64:	e3a00000 	mov	r0, #0
     c68:	e1a02000 	mov	r2, r0
     c6c:	e3a010ca 	mov	r1, #202	; 0xca
     c70:	ebffff5d 	bl	9ec <SCCBread>
	vTaskDelay(200/portTICK_RATE_MS);
     c74:	e3a000c8 	mov	r0, #200	; 0xc8
     c78:	eb0033ce 	bl	dbb8 <__vTaskDelay_from_arm>
	if(xSemaphoreGive( Mutex ))FIO2PIN1 = 0x2;
     c7c:	e3a01000 	mov	r1, #0
     c80:	e5940000 	ldr	r0, [r4]
     c84:	e1a02001 	mov	r2, r1
     c88:	e1a03001 	mov	r3, r1
     c8c:	eb0033d3 	bl	dbe0 <__xQueueGenericSend_from_arm>
     c90:	e3500000 	cmp	r0, #0
     c94:	159f6034 	ldrne	r6, [pc, #52]	; cd0 <vi2c+0x164>
     c98:	13a04002 	movne	r4, #2
     c9c:	154640aa 	strbne	r4, [r6, #-170]	; 0xffffff56
     ca0:	eafffffe 	b	ca0 <vi2c+0x134>
	RESETREG
	vTaskDelay(200 / portTICK_RATE_MS);
//	fflush(stdout);
	printf("Setup begin[>  ");
	fflush(stdout);
	for(regpointer=0;regpointer!=129;){
     ca4:	e3550081 	cmp	r5, #129	; 0x81
     ca8:	1affffd0 	bne	bf0 <vi2c+0x84>
     cac:	eaffffe7 	b	c50 <vi2c+0xe4>
     cb0:	40000944 	.word	0x40000944
     cb4:	e0080000 	.word	0xe0080000
     cb8:	40000000 	.word	0x40000000
     cbc:	0000e520 	.word	0x0000e520
     cc0:	0000e530 	.word	0x0000e530
     cc4:	0000e558 	.word	0x0000e558
     cc8:	0000e4f8 	.word	0x0000e4f8
     ccc:	0000e540 	.word	0x0000e540
     cd0:	3fffc0ff 	.word	0x3fffc0ff

00000cd4 <vLedTask>:
}
}
//**           **GPIO TASK**          **
/*-----------------------------------------------------------*/
void vLedTask( void *pvParameters )
{
     cd4:	b538      	push	{r3, r4, r5, lr}
	GPIOInit(1, FAST_PORT, DIR_OUT, LED1_MASK );
     cd6:	2001      	movs	r0, #1
     cd8:	2380      	movs	r3, #128	; 0x80
     cda:	1c01      	adds	r1, r0, #0
     cdc:	1c02      	adds	r2, r0, #0
     cde:	02db      	lsls	r3, r3, #11
     ce0:	f000 fc00 	bl	14e4 <GPIOInit>
	
	for(;;)
	{
		FIO1PIN ^= LED1_MASK;
     ce4:	2580      	movs	r5, #128	; 0x80
     ce6:	4c06      	ldr	r4, [pc, #24]	; (d00 <vLedTask+0x2c>)
     ce8:	02ed      	lsls	r5, r5, #11
     cea:	6820      	ldr	r0, [r4, #0]
     cec:	4068      	eors	r0, r5
     cee:	6020      	str	r0, [r4, #0]
		vTaskDelay(207 / portTICK_RATE_MS);
     cf0:	20cf      	movs	r0, #207	; 0xcf
     cf2:	f003 f803 	bl	3cfc <vTaskDelay>
			vTaskSuspend(NULL);
     cf6:	2000      	movs	r0, #0
     cf8:	f003 f8d8 	bl	3eac <vTaskSuspend>
     cfc:	e7f5      	b.n	cea <vLedTask+0x16>
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	3fffc034 	.word	0x3fffc034

00000d04 <ADC_Read>:
int left;
int right;
xSemaphoreHandle Mutex;

unsigned int ADC_Read (unsigned int ch )
{
     d04:	b5f0      	push	{r4, r5, r6, r7, lr}
  unsigned int i;
    AD0CR  = (0x00200400 | ( 1 << ch ));	// Init ADC (Pclk = 18MHz) and select channel. Sampling rate = 4.5MHz
     d06:	4a18      	ldr	r2, [pc, #96]	; (d68 <ADC_Read+0x64>)
     d08:	2101      	movs	r1, #1
     d0a:	4e18      	ldr	r6, [pc, #96]	; (d6c <ADC_Read+0x68>)
     d0c:	4081      	lsls	r1, r0
     d0e:	4311      	orrs	r1, r2
     d10:	6031      	str	r1, [r6, #0]
    AD0CR |= 0x01000000;		// Start A/D Conversion
     d12:	2780      	movs	r7, #128	; 0x80
     d14:	6834      	ldr	r4, [r6, #0]
     d16:	047d      	lsls	r5, r7, #17
    do
    {
    switch(ch)
     d18:	4a15      	ldr	r2, [pc, #84]	; (d70 <ADC_Read+0x6c>)

unsigned int ADC_Read (unsigned int ch )
{
  unsigned int i;
    AD0CR  = (0x00200400 | ( 1 << ch ));	// Init ADC (Pclk = 18MHz) and select channel. Sampling rate = 4.5MHz
    AD0CR |= 0x01000000;		// Start A/D Conversion
     d1a:	4325      	orrs	r5, r4
    do
    {
    switch(ch)
     d1c:	0081      	lsls	r1, r0, #2

unsigned int ADC_Read (unsigned int ch )
{
  unsigned int i;
    AD0CR  = (0x00200400 | ( 1 << ch ));	// Init ADC (Pclk = 18MHz) and select channel. Sampling rate = 4.5MHz
    AD0CR |= 0x01000000;		// Start A/D Conversion
     d1e:	6035      	str	r5, [r6, #0]
    do
    {
    switch(ch)
     d20:	188a      	adds	r2, r1, r2
	break;
    case 6:
    	i = AD0DR6;
	break;
    case 7:
    	i = AD0DR7;
     d22:	4f14      	ldr	r7, [pc, #80]	; (d74 <ADC_Read+0x70>)
	break;
    case 5:
    	i = AD0DR5;
	break;
    case 6:
    	i = AD0DR6;
     d24:	4e14      	ldr	r6, [pc, #80]	; (d78 <ADC_Read+0x74>)
	break;
    case 4:
    	i = AD0DR4;
	break;
    case 5:
    	i = AD0DR5;
     d26:	4d15      	ldr	r5, [pc, #84]	; (d7c <ADC_Read+0x78>)
	break;
    case 3:
    	i = AD0DR3;
	break;
    case 4:
    	i = AD0DR4;
     d28:	4c15      	ldr	r4, [pc, #84]	; (d80 <ADC_Read+0x7c>)
	break;
    case 2:
    	i = AD0DR2;
	break;
    case 3:
    	i = AD0DR3;
     d2a:	4916      	ldr	r1, [pc, #88]	; (d84 <ADC_Read+0x80>)
  unsigned int i;
    AD0CR  = (0x00200400 | ( 1 << ch ));	// Init ADC (Pclk = 18MHz) and select channel. Sampling rate = 4.5MHz
    AD0CR |= 0x01000000;		// Start A/D Conversion
    do
    {
    switch(ch)
     d2c:	2807      	cmp	r0, #7
     d2e:	d802      	bhi.n	d36 <ADC_Read+0x32>
     d30:	6813      	ldr	r3, [r2, #0]
     d32:	469f      	mov	pc, r3
	break;
    case 5:
    	i = AD0DR5;
	break;
    case 6:
    	i = AD0DR6;
     d34:	6833      	ldr	r3, [r6, #0]
    case 7:
    	i = AD0DR7;
    	break;
    	}
    	
       } while ((i & 0x80000000) == 0);	// Wait for end of A/D Conversion
     d36:	2b00      	cmp	r3, #0
     d38:	daf8      	bge.n	d2c <ADC_Read+0x28>
    return (i >> 6) & 0x03FF;		// bit 6:15 is 10 bit AD value
     d3a:	0418      	lsls	r0, r3, #16
     d3c:	0d80      	lsrs	r0, r0, #22
}
     d3e:	bcf0      	pop	{r4, r5, r6, r7}
     d40:	bc02      	pop	{r1}
     d42:	4708      	bx	r1
	break;
    case 4:
    	i = AD0DR4;
	break;
    case 5:
    	i = AD0DR5;
     d44:	682b      	ldr	r3, [r5, #0]
	break;
     d46:	e7f6      	b.n	d36 <ADC_Read+0x32>
	break;
    case 3:
    	i = AD0DR3;
	break;
    case 4:
    	i = AD0DR4;
     d48:	6823      	ldr	r3, [r4, #0]
	break;
     d4a:	e7f4      	b.n	d36 <ADC_Read+0x32>
	break;
    case 2:
    	i = AD0DR2;
	break;
    case 3:
    	i = AD0DR3;
     d4c:	680b      	ldr	r3, [r1, #0]
	break;
     d4e:	e7f2      	b.n	d36 <ADC_Read+0x32>
 	break;
    case 1:
    	i = AD0DR1;
	break;
    case 2:
    	i = AD0DR2;
     d50:	4b0d      	ldr	r3, [pc, #52]	; (d88 <ADC_Read+0x84>)
     d52:	681b      	ldr	r3, [r3, #0]
	break;
     d54:	e7ef      	b.n	d36 <ADC_Read+0x32>
    {
    case 0:
        i = AD0DR0;	// Read A/D Data Register
 	break;
    case 1:
    	i = AD0DR1;
     d56:	4b0d      	ldr	r3, [pc, #52]	; (d8c <ADC_Read+0x88>)
     d58:	681b      	ldr	r3, [r3, #0]
	break;
     d5a:	e7ec      	b.n	d36 <ADC_Read+0x32>
	break;
    case 6:
    	i = AD0DR6;
	break;
    case 7:
    	i = AD0DR7;
     d5c:	683b      	ldr	r3, [r7, #0]
    	break;
     d5e:	e7ea      	b.n	d36 <ADC_Read+0x32>
    do
    {
    switch(ch)
    {
    case 0:
        i = AD0DR0;	// Read A/D Data Register
     d60:	4b0b      	ldr	r3, [pc, #44]	; (d90 <ADC_Read+0x8c>)
     d62:	681b      	ldr	r3, [r3, #0]
 	break;
     d64:	e7e7      	b.n	d36 <ADC_Read+0x32>
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	00200400 	.word	0x00200400
     d6c:	e0034000 	.word	0xe0034000
     d70:	0000e75c 	.word	0x0000e75c
     d74:	e003402c 	.word	0xe003402c
     d78:	e0034028 	.word	0xe0034028
     d7c:	e0034024 	.word	0xe0034024
     d80:	e0034020 	.word	0xe0034020
     d84:	e003401c 	.word	0xe003401c
     d88:	e0034018 	.word	0xe0034018
     d8c:	e0034014 	.word	0xe0034014
     d90:	e0034010 	.word	0xe0034010

00000d94 <main>:
    return (i >> 6) & 0x03FF;		// bit 6:15 is 10 bit AD value
}

/*-----------------------------------------------------------*/
int main( void )
{
     d94:	b5f0      	push	{r4, r5, r6, r7, lr}
     d96:	b085      	sub	sp, #20
/*******UART initialize***************/
void UARTint( void )
{
	DWORD Fdiv,i=0;

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
     d98:	4f25      	ldr	r7, [pc, #148]	; (e30 <main+0x9c>)
}

/*-----------------------------------------------------------*/
int main( void )
{
	TargetResetInit();//
     d9a:	f000 fe4d 	bl	1a38 <TargetResetInit>
/*******UART initialize***************/
void UARTint( void )
{
	DWORD Fdiv,i=0;

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
     d9e:	2483      	movs	r4, #131	; 0x83

/*-----------------------------------------------------------*/
int main( void )
{
	TargetResetInit();//
	GPIOResetInit();
     da0:	f000 fda6 	bl	18f0 <GPIOResetInit>
{
	DWORD Fdiv,i=0;

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / UART_BAUD ;	/*baud rate */
    	U0DLM = Fdiv / 256;
     da4:	4b23      	ldr	r3, [pc, #140]	; (e34 <main+0xa0>)
/*******UART initialize***************/
void UARTint( void )
{
	DWORD Fdiv,i=0;

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
     da6:	603c      	str	r4, [r7, #0]
    	Fdiv = ( Fpclk / 16 ) / UART_BAUD ;	/*baud rate */
    	U0DLM = Fdiv / 256;
     da8:	2400      	movs	r4, #0
     daa:	601c      	str	r4, [r3, #0]
    	U0DLL = Fdiv % 256;
     dac:	2513      	movs	r5, #19
     dae:	3b04      	subs	r3, #4
     db0:	601d      	str	r5, [r3, #0]
		U0LCR = 0x03;		/* DLAB = 0 */
     db2:	2503      	movs	r5, #3
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
     db4:	2107      	movs	r1, #7

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / UART_BAUD ;	/*baud rate */
    	U0DLM = Fdiv / 256;
    	U0DLL = Fdiv % 256;
		U0LCR = 0x03;		/* DLAB = 0 */
     db6:	603d      	str	r5, [r7, #0]
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
     db8:	3f04      	subs	r7, #4
     dba:	6039      	str	r1, [r7, #0]
	
	printf("Hello,");
     dbc:	481e      	ldr	r0, [pc, #120]	; (e38 <main+0xa4>)
     dbe:	f004 fadf 	bl	5380 <printf>
int main( void )
{
	TargetResetInit();//
	GPIOResetInit();
	UARTint();
	FIO2PIN1 = 0x2;
     dc2:	481e      	ldr	r0, [pc, #120]	; (e3c <main+0xa8>)
     dc4:	2702      	movs	r7, #2
     dc6:	7007      	strb	r7, [r0, #0]
	Mutex = xSemaphoreCreateMutex();
     dc8:	f002 f9ac 	bl	3124 <xQueueCreateMutex>
     dcc:	4e1c      	ldr	r6, [pc, #112]	; (e40 <main+0xac>)
 	printf(" world!%d:%d\n",pdTRUE,pdFALSE);
     dce:	2101      	movs	r1, #1
{
	TargetResetInit();//
	GPIOResetInit();
	UARTint();
	FIO2PIN1 = 0x2;
	Mutex = xSemaphoreCreateMutex();
     dd0:	6030      	str	r0, [r6, #0]
 	printf(" world!%d:%d\n",pdTRUE,pdFALSE);
     dd2:	1c22      	adds	r2, r4, #0
     dd4:	481b      	ldr	r0, [pc, #108]	; (e44 <main+0xb0>)
     dd6:	f004 fad3 	bl	5380 <printf>
	 if( Mutex != NULL ){
     dda:	6833      	ldr	r3, [r6, #0]
     ddc:	42a3      	cmp	r3, r4
     dde:	d023      	beq.n	e28 <main+0x94>
		xTaskCreate( vLedTask,  ( signed portCHAR * )"LED" , configMINIMAL_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY-1, NULL );
     de0:	4919      	ldr	r1, [pc, #100]	; (e48 <main+0xb4>)
     de2:	2268      	movs	r2, #104	; 0x68
     de4:	1c23      	adds	r3, r4, #0
     de6:	4819      	ldr	r0, [pc, #100]	; (e4c <main+0xb8>)
     de8:	9700      	str	r7, [sp, #0]
     dea:	9401      	str	r4, [sp, #4]
     dec:	9402      	str	r4, [sp, #8]
     dee:	9403      	str	r4, [sp, #12]
     df0:	f002 fb3a 	bl	3468 <xTaskGenericCreate>
		/* Start2csender the tasks defined within this file/specific to this demo. */
		xTaskCreate( vi2c,  ( signed portCHAR * )"LD" , configMINIMAL_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL );
     df4:	4916      	ldr	r1, [pc, #88]	; (e50 <main+0xbc>)
     df6:	2268      	movs	r2, #104	; 0x68
     df8:	1c23      	adds	r3, r4, #0
     dfa:	4816      	ldr	r0, [pc, #88]	; (e54 <main+0xc0>)
     dfc:	9500      	str	r5, [sp, #0]
     dfe:	9401      	str	r4, [sp, #4]
     e00:	9402      	str	r4, [sp, #8]
     e02:	9403      	str	r4, [sp, #12]
     e04:	f002 fb30 	bl	3468 <xTaskGenericCreate>
		xTaskCreate( ISSR,  ( signed portCHAR * )"ITS" , configMINIMAL_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL );
     e08:	2268      	movs	r2, #104	; 0x68
     e0a:	4813      	ldr	r0, [pc, #76]	; (e58 <main+0xc4>)
     e0c:	4913      	ldr	r1, [pc, #76]	; (e5c <main+0xc8>)
     e0e:	1c23      	adds	r3, r4, #0
     e10:	9500      	str	r5, [sp, #0]
     e12:	9401      	str	r4, [sp, #4]
     e14:	9402      	str	r4, [sp, #8]
     e16:	9403      	str	r4, [sp, #12]
     e18:	f002 fb26 	bl	3468 <xTaskGenericCreate>
		FIO2CLR1 = 0xFF;
     e1c:	4a10      	ldr	r2, [pc, #64]	; (e60 <main+0xcc>)
     e1e:	26ff      	movs	r6, #255	; 0xff
     e20:	7016      	strb	r6, [r2, #0]
		vTaskStartScheduler();
     e22:	f002 fd3f 	bl	38a4 <vTaskStartScheduler>
     e26:	e7fe      	b.n	e26 <main+0x92>
		}
	else printf("F");
     e28:	2046      	movs	r0, #70	; 0x46
     e2a:	f004 fac3 	bl	53b4 <putchar>
     e2e:	e7fa      	b.n	e26 <main+0x92>
     e30:	e000c00c 	.word	0xe000c00c
     e34:	e000c004 	.word	0xe000c004
     e38:	0000e77c 	.word	0x0000e77c
     e3c:	3fffc055 	.word	0x3fffc055
     e40:	40000944 	.word	0x40000944
     e44:	0000e784 	.word	0x0000e784
     e48:	0000e794 	.word	0x0000e794
     e4c:	00000cd5 	.word	0x00000cd5
     e50:	0000e798 	.word	0x0000e798
     e54:	00000b6c 	.word	0x00000b6c
     e58:	00000f19 	.word	0x00000f19
     e5c:	0000e79c 	.word	0x0000e79c
     e60:	3fffc05d 	.word	0x3fffc05d
     e64:	00000000 	.word	0x00000000

00000e68 <getISSI>:
/*-----------------------------------------------------------*/

//*******************************************************************************************************
//      ----------------------------------- Routines -------------------------------
void getISSI( void )
{
     e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e6a:	465f      	mov	r7, fp
     e6c:	4656      	mov	r6, sl
     e6e:	464d      	mov	r5, r9
     e70:	4644      	mov	r4, r8
     e72:	b4f0      	push	{r4, r5, r6, r7}
int bitshift=0;
int il=0;
int prv;
int crr;
vTaskDelay( 1 / portTICK_RATE_MS );
     e74:	2001      	movs	r0, #1
     e76:	f002 ff41 	bl	3cfc <vTaskDelay>
	printf("start ISSI connection\n");
     e7a:	481d      	ldr	r0, [pc, #116]	; (ef0 <getISSI+0x88>)
     e7c:	f004 fadc 	bl	5438 <puts>
     e80:	4a1c      	ldr	r2, [pc, #112]	; (ef4 <getISSI+0x8c>)
     e82:	4b1d      	ldr	r3, [pc, #116]	; (ef8 <getISSI+0x90>)
     e84:	4690      	mov	r8, r2
     e86:	4699      	mov	r9, r3
     e88:	4a1c      	ldr	r2, [pc, #112]	; (efc <getISSI+0x94>)
     e8a:	4b1d      	ldr	r3, [pc, #116]	; (f00 <getISSI+0x98>)
     e8c:	4692      	mov	sl, r2
     e8e:	469b      	mov	fp, r3

	while(1){
		printf("HandShake");
		il++;
		FIO2SET0 = 1;
     e90:	2701      	movs	r7, #1
int crr;
vTaskDelay( 1 / portTICK_RATE_MS );
	printf("start ISSI connection\n");

	while(1){
		printf("HandShake");
     e92:	4640      	mov	r0, r8
     e94:	f004 fa74 	bl	5380 <printf>
		il++;
		FIO2SET0 = 1;
     e98:	4c1a      	ldr	r4, [pc, #104]	; (f04 <getISSI+0x9c>)
		FIO2SET1 = 0x2;
     e9a:	4a1b      	ldr	r2, [pc, #108]	; (f08 <getISSI+0xa0>)
     e9c:	2602      	movs	r6, #2
	printf("start ISSI connection\n");

	while(1){
		printf("HandShake");
		il++;
		FIO2SET0 = 1;
     e9e:	7027      	strb	r7, [r4, #0]
		FIO2SET1 = 0x2;
     ea0:	7016      	strb	r6, [r2, #0]
		prv=FIO2PIN0&3;
     ea2:	3a05      	subs	r2, #5
     ea4:	7815      	ldrb	r5, [r2, #0]
     ea6:	2403      	movs	r4, #3
     ea8:	4025      	ands	r5, r4
		printf("up\t%x\n",prv);
     eaa:	1c29      	adds	r1, r5, #0
     eac:	4648      	mov	r0, r9
     eae:	f004 fa67 	bl	5380 <printf>
		bitshift = (bitshift<<1)+(prv&2)>>1;
		vTaskDelay(1 / portTICK_RATE_MS);
     eb2:	2001      	movs	r0, #1
     eb4:	f002 ff22 	bl	3cfc <vTaskDelay>
		FIO2CLR0 = 1;
     eb8:	4914      	ldr	r1, [pc, #80]	; (f0c <getISSI+0xa4>)
		FIO2CLR1 = 0x2;
		printf("prv=%x",prv);
     eba:	4650      	mov	r0, sl
		FIO2SET1 = 0x2;
		prv=FIO2PIN0&3;
		printf("up\t%x\n",prv);
		bitshift = (bitshift<<1)+(prv&2)>>1;
		vTaskDelay(1 / portTICK_RATE_MS);
		FIO2CLR0 = 1;
     ebc:	700f      	strb	r7, [r1, #0]
		FIO2CLR1 = 0x2;
     ebe:	704e      	strb	r6, [r1, #1]
		printf("prv=%x",prv);
     ec0:	1c29      	adds	r1, r5, #0
     ec2:	f004 fa5d 	bl	5380 <printf>
		crr = FIO0PIN&3;
     ec6:	4812      	ldr	r0, [pc, #72]	; (f10 <getISSI+0xa8>)
     ec8:	6801      	ldr	r1, [r0, #0]
		printf("Cr=%d",crr);
     eca:	4658      	mov	r0, fp
		bitshift = (bitshift<<1)+(prv&2)>>1;
		vTaskDelay(1 / portTICK_RATE_MS);
		FIO2CLR0 = 1;
		FIO2CLR1 = 0x2;
		printf("prv=%x",prv);
		crr = FIO0PIN&3;
     ecc:	4021      	ands	r1, r4
		printf("Cr=%d",crr);
     ece:	f004 fa57 	bl	5380 <printf>
		if(crr&2!=prv&2){
			printf("-%d\t%d\n",crr,il);
			break;
			}
		vTaskDelay(1 / portTICK_RATE_MS);
     ed2:	2001      	movs	r0, #1
     ed4:	f002 ff12 	bl	3cfc <vTaskDelay>
		printf("Delaying%d",0.01 / portTICK_RATE_MS);
     ed8:	4b04      	ldr	r3, [pc, #16]	; (eec <getISSI+0x84>)
     eda:	4a03      	ldr	r2, [pc, #12]	; (ee8 <getISSI+0x80>)
     edc:	480d      	ldr	r0, [pc, #52]	; (f14 <getISSI+0xac>)
     ede:	f004 fa4f 	bl	5380 <printf>
		}
     ee2:	e7d6      	b.n	e92 <getISSI+0x2a>
     ee4:	46c0      	nop			; (mov r8, r8)
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	47ae147b 	.word	0x47ae147b
     eec:	3f847ae1 	.word	0x3f847ae1
     ef0:	0000e7a0 	.word	0x0000e7a0
     ef4:	0000e7b8 	.word	0x0000e7b8
     ef8:	0000e7c4 	.word	0x0000e7c4
     efc:	0000e7cc 	.word	0x0000e7cc
     f00:	0000e7d4 	.word	0x0000e7d4
     f04:	3fffc058 	.word	0x3fffc058
     f08:	3fffc059 	.word	0x3fffc059
     f0c:	3fffc05c 	.word	0x3fffc05c
     f10:	3fffc014 	.word	0x3fffc014
     f14:	0000e7e4 	.word	0x0000e7e4

00000f18 <ISSR>:
		vTaskDelay(30 / portTICK_RATE_MS);
		}
}
/*-----------------------------------------------------------*/
void ISSR( void *pvParameters )
{
     f18:	b510      	push	{r4, lr}
unsigned int tmpData;
	vTaskDelay(30 / portTICK_RATE_MS);
     f1a:	201e      	movs	r0, #30
     f1c:	f002 feee 	bl	3cfc <vTaskDelay>
     f20:	4c0a      	ldr	r4, [pc, #40]	; (f4c <ISSR+0x34>)
	while(!xSemaphoreTake( Mutex, 301 / portTICK_RATE_MS ));
     f22:	2100      	movs	r1, #0
     f24:	6820      	ldr	r0, [r4, #0]
     f26:	4a0a      	ldr	r2, [pc, #40]	; (f50 <ISSR+0x38>)
     f28:	1c0b      	adds	r3, r1, #0
     f2a:	f002 f943 	bl	31b4 <xQueueGenericReceive>
     f2e:	2800      	cmp	r0, #0
     f30:	d0f7      	beq.n	f22 <ISSR+0xa>
	vTaskDelay(30 / portTICK_RATE_MS);
     f32:	201e      	movs	r0, #30
     f34:	f002 fee2 	bl	3cfc <vTaskDelay>
	FIO2CLR1 = 0xFF;
     f38:	4b06      	ldr	r3, [pc, #24]	; (f54 <ISSR+0x3c>)
     f3a:	22ff      	movs	r2, #255	; 0xff
     f3c:	701a      	strb	r2, [r3, #0]
	while(1){
		getISSI();
     f3e:	f7ff ff93 	bl	e68 <getISSI>
		vTaskDelay(300 / portTICK_RATE_MS);
     f42:	2096      	movs	r0, #150	; 0x96
     f44:	0040      	lsls	r0, r0, #1
     f46:	f002 fed9 	bl	3cfc <vTaskDelay>
     f4a:	e7f8      	b.n	f3e <ISSR+0x26>
     f4c:	40000944 	.word	0x40000944
     f50:	0000012d 	.word	0x0000012d
     f54:	3fffc05d 	.word	0x3fffc05d

00000f58 <vApplicationTickHook>:
//	-----------------------------------T A S K s.-------------------------------^^

void vApplicationTickHook( void )
{

}
     f58:	4770      	bx	lr
     f5a:	46c0      	nop			; (mov r8, r8)

00000f5c <vValueTask>:
/*-----------------------------------------------------------*/
unsigned int res[5];
int white, black;
//-----------------
void vValueTask( void *pvParameters )
{
     f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f5e:	4647      	mov	r7, r8
     f60:	b480      	push	{r7}
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
     f62:	201e      	movs	r0, #30
     f64:	f002 feca 	bl	3cfc <vTaskDelay>
	for(white = 0, black = 0, i = 1;i <= 20; i++){
     f68:	4e40      	ldr	r6, [pc, #256]	; (106c <vValueTask+0x110>)
     f6a:	4f41      	ldr	r7, [pc, #260]	; (1070 <vValueTask+0x114>)
     f6c:	2300      	movs	r3, #0
     f6e:	6033      	str	r3, [r6, #0]
     f70:	603b      	str	r3, [r7, #0]
     f72:	4c40      	ldr	r4, [pc, #256]	; (1074 <vValueTask+0x118>)
     f74:	3314      	adds	r3, #20
     f76:	4d40      	ldr	r5, [pc, #256]	; (1078 <vValueTask+0x11c>)
     f78:	4698      	mov	r8, r3
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     f7a:	2000      	movs	r0, #0
     f7c:	f7ff fec2 	bl	d04 <ADC_Read>
		printf("  %x....%4x\t", a, res[a] );
     f80:	2100      	movs	r1, #0
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     f82:	1c02      	adds	r2, r0, #0
     f84:	6020      	str	r0, [r4, #0]
		printf("  %x....%4x\t", a, res[a] );
     f86:	1c28      	adds	r0, r5, #0
     f88:	f004 f9fa 	bl	5380 <printf>
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     f8c:	2001      	movs	r0, #1
     f8e:	f7ff feb9 	bl	d04 <ADC_Read>
		printf("  %x....%4x\t", a, res[a] );
     f92:	2101      	movs	r1, #1
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     f94:	1c02      	adds	r2, r0, #0
     f96:	6060      	str	r0, [r4, #4]
		printf("  %x....%4x\t", a, res[a] );
     f98:	1c28      	adds	r0, r5, #0
     f9a:	f004 f9f1 	bl	5380 <printf>
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     f9e:	2002      	movs	r0, #2
     fa0:	f7ff feb0 	bl	d04 <ADC_Read>
		printf("  %x....%4x\t", a, res[a] );
     fa4:	2102      	movs	r1, #2
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     fa6:	1c02      	adds	r2, r0, #0
     fa8:	60a0      	str	r0, [r4, #8]
		printf("  %x....%4x\t", a, res[a] );
     faa:	1c28      	adds	r0, r5, #0
     fac:	f004 f9e8 	bl	5380 <printf>
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     fb0:	2003      	movs	r0, #3
     fb2:	f7ff fea7 	bl	d04 <ADC_Read>
		printf("  %x....%4x\t", a, res[a] );
     fb6:	2103      	movs	r1, #3
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     fb8:	1c02      	adds	r2, r0, #0
     fba:	60e0      	str	r0, [r4, #12]
		printf("  %x....%4x\t", a, res[a] );
     fbc:	1c28      	adds	r0, r5, #0
     fbe:	f004 f9df 	bl	5380 <printf>
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     fc2:	2004      	movs	r0, #4
     fc4:	f7ff fe9e 	bl	d04 <ADC_Read>
		printf("  %x....%4x\t", a, res[a] );
     fc8:	2104      	movs	r1, #4
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     fca:	1c02      	adds	r2, r0, #0
     fcc:	6120      	str	r0, [r4, #16]
		printf("  %x....%4x\t", a, res[a] );
     fce:	1c28      	adds	r0, r5, #0
     fd0:	f004 f9d6 	bl	5380 <printf>
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     fd4:	2005      	movs	r0, #5
     fd6:	f7ff fe95 	bl	d04 <ADC_Read>
		printf("  %x....%4x\t", a, res[a] );
     fda:	2105      	movs	r1, #5
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     fdc:	1c02      	adds	r2, r0, #0
     fde:	6160      	str	r0, [r4, #20]
		printf("  %x....%4x\t", a, res[a] );
     fe0:	1c28      	adds	r0, r5, #0
     fe2:	f004 f9cd 	bl	5380 <printf>
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     fe6:	2006      	movs	r0, #6
     fe8:	f7ff fe8c 	bl	d04 <ADC_Read>
		printf("  %x....%4x\t", a, res[a] );
     fec:	2106      	movs	r1, #6
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     fee:	1c02      	adds	r2, r0, #0
     ff0:	61a0      	str	r0, [r4, #24]
		printf("  %x....%4x\t", a, res[a] );
     ff2:	1c28      	adds	r0, r5, #0
     ff4:	f004 f9c4 	bl	5380 <printf>
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
     ff8:	2007      	movs	r0, #7
     ffa:	f7ff fe83 	bl	d04 <ADC_Read>
		printf("  %x....%4x\t", a, res[a] );
     ffe:	2107      	movs	r1, #7
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
    1000:	1c02      	adds	r2, r0, #0
    1002:	61e0      	str	r0, [r4, #28]
		printf("  %x....%4x\t", a, res[a] );
    1004:	1c28      	adds	r0, r5, #0
    1006:	f004 f9bb 	bl	5380 <printf>
	}
	printf("\n");
    100a:	200a      	movs	r0, #10
    100c:	f004 f9d2 	bl	53b4 <putchar>
	white += ((res[1]+res[3]+res[4])/3);
    1010:	6862      	ldr	r2, [r4, #4]
    1012:	68e1      	ldr	r1, [r4, #12]
    1014:	6923      	ldr	r3, [r4, #16]
    1016:	1888      	adds	r0, r1, r2
    1018:	18c0      	adds	r0, r0, r3
    101a:	2103      	movs	r1, #3
    101c:	f00c fe22 	bl	dc64 <____aeabi_uidiv_from_thumb>
    1020:	6832      	ldr	r2, [r6, #0]
	black += (res[2]);
    1022:	68a3      	ldr	r3, [r4, #8]
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
		printf("  %x....%4x\t", a, res[a] );
	}
	printf("\n");
	white += ((res[1]+res[3]+res[4])/3);
    1024:	1881      	adds	r1, r0, r2
	black += (res[2]);
    1026:	6838      	ldr	r0, [r7, #0]
	for(a = 0; a <= 7; a++){
		res[a] = ADC_Read(a);
		printf("  %x....%4x\t", a, res[a] );
	}
	printf("\n");
	white += ((res[1]+res[3]+res[4])/3);
    1028:	6031      	str	r1, [r6, #0]
	black += (res[2]);
    102a:	2101      	movs	r1, #1
    102c:	18c2      	adds	r2, r0, r3
    102e:	4248      	negs	r0, r1
    1030:	4480      	add	r8, r0
void vValueTask( void *pvParameters )
{
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
    1032:	3001      	adds	r0, #1
		res[a] = ADC_Read(a);
		printf("  %x....%4x\t", a, res[a] );
	}
	printf("\n");
	white += ((res[1]+res[3]+res[4])/3);
	black += (res[2]);
    1034:	603a      	str	r2, [r7, #0]
void vValueTask( void *pvParameters )
{
int i;
unsigned int a, t;
	vTaskDelay(30 / portTICK_RATE_MS);
	for(white = 0, black = 0, i = 1;i <= 20; i++){
    1036:	4580      	cmp	r8, r0
    1038:	d19f      	bne.n	f7a <vValueTask+0x1e>
    103a:	4645      	mov	r5, r8
    103c:	4e0f      	ldr	r6, [pc, #60]	; (107c <vValueTask+0x120>)
//	black = (black / 20);
//	printf("white %x, black %x", white, black);
//	write_ROM(0x1A, 32, white);		//(int subadr, int size, int Data)
//	write_ROM(0x2A, 32, black);		//(int subadr, int size, int Data)
	while(1){
		for(a = 0; a <= 4; a++){
    103e:	2d04      	cmp	r5, #4
    1040:	d903      	bls.n	104a <vValueTask+0xee>
			res[a] = ADC_Read(a);
			printf("%d\t", res[a]);
			vTaskDelay(3 / portTICK_RATE_MS);
		}
		printf("\n");
    1042:	200a      	movs	r0, #10
    1044:	f004 f9b6 	bl	53b4 <putchar>
//	black = (black / 20);
//	printf("white %x, black %x", white, black);
//	write_ROM(0x1A, 32, white);		//(int subadr, int size, int Data)
//	write_ROM(0x2A, 32, black);		//(int subadr, int size, int Data)
	while(1){
		for(a = 0; a <= 4; a++){
    1048:	2500      	movs	r5, #0
			res[a] = ADC_Read(a);
    104a:	1c28      	adds	r0, r5, #0
    104c:	f7ff fe5a 	bl	d04 <ADC_Read>
    1050:	00af      	lsls	r7, r5, #2
    1052:	1c01      	adds	r1, r0, #0
    1054:	51e0      	str	r0, [r4, r7]
			printf("%d\t", res[a]);
    1056:	1c30      	adds	r0, r6, #0
    1058:	f004 f992 	bl	5380 <printf>
//	black = (black / 20);
//	printf("white %x, black %x", white, black);
//	write_ROM(0x1A, 32, white);		//(int subadr, int size, int Data)
//	write_ROM(0x2A, 32, black);		//(int subadr, int size, int Data)
	while(1){
		for(a = 0; a <= 4; a++){
    105c:	3501      	adds	r5, #1
			res[a] = ADC_Read(a);
			printf("%d\t", res[a]);
			vTaskDelay(3 / portTICK_RATE_MS);
    105e:	2003      	movs	r0, #3
    1060:	f002 fe4c 	bl	3cfc <vTaskDelay>
//	black = (black / 20);
//	printf("white %x, black %x", white, black);
//	write_ROM(0x1A, 32, white);		//(int subadr, int size, int Data)
//	write_ROM(0x2A, 32, black);		//(int subadr, int size, int Data)
	while(1){
		for(a = 0; a <= 4; a++){
    1064:	2d04      	cmp	r5, #4
    1066:	d8ec      	bhi.n	1042 <vValueTask+0xe6>
    1068:	e7ef      	b.n	104a <vValueTask+0xee>
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	40000908 	.word	0x40000908
    1070:	40000948 	.word	0x40000948
    1074:	40000910 	.word	0x40000910
    1078:	0000e7f0 	.word	0x0000e7f0
    107c:	0000e800 	.word	0x0000e800

00001080 <vtrsTask>:
		}
		printf("\n");
	}
}

void vtrsTask( void *pvParameters ){
    1080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1082:	465f      	mov	r7, fp
    1084:	4656      	mov	r6, sl
    1086:	464d      	mov	r5, r9
    1088:	4644      	mov	r4, r8
    108a:	b4f0      	push	{r4, r5, r6, r7}
	vTaskDelay(300 / portTICK_RATE_MS);
    108c:	2096      	movs	r0, #150	; 0x96
    108e:	0040      	lsls	r0, r0, #1
    1090:	f002 fe34 	bl	3cfc <vTaskDelay>
    1094:	4924      	ldr	r1, [pc, #144]	; (1128 <vtrsTask+0xa8>)
    1096:	4a25      	ldr	r2, [pc, #148]	; (112c <vtrsTask+0xac>)
    1098:	4b25      	ldr	r3, [pc, #148]	; (1130 <vtrsTask+0xb0>)
    109a:	468a      	mov	sl, r1
    109c:	4e25      	ldr	r6, [pc, #148]	; (1134 <vtrsTask+0xb4>)
	for(;;){
	if((2*res[6])<=(white+black)){
	printf("migi");
	left = 	0;
	right = 10;
    109e:	210a      	movs	r1, #10
    10a0:	4d25      	ldr	r5, [pc, #148]	; (1138 <vtrsTask+0xb8>)
    10a2:	4c26      	ldr	r4, [pc, #152]	; (113c <vtrsTask+0xbc>)
    10a4:	4f26      	ldr	r7, [pc, #152]	; (1140 <vtrsTask+0xc0>)
    10a6:	4690      	mov	r8, r2
    10a8:	469b      	mov	fp, r3
    10aa:	4689      	mov	r9, r1
		printf("\n");
	}
}

void vtrsTask( void *pvParameters ){
	vTaskDelay(300 / portTICK_RATE_MS);
    10ac:	6832      	ldr	r2, [r6, #0]
    10ae:	682b      	ldr	r3, [r5, #0]
    10b0:	18d3      	adds	r3, r2, r3
    10b2:	e003      	b.n	10bc <vtrsTask+0x3c>
	right = 10;
	while((2*res[2])<=(white+black)||((2*res[3])<=(white+black))||((2*res[4])<=(white+black)));
	left = 10;
	right = 10;
}
	if((2*res[4])<=((white+black))){
    10b4:	6921      	ldr	r1, [r4, #16]
    10b6:	0048      	lsls	r0, r1, #1
    10b8:	4298      	cmp	r0, r3
    10ba:	d91b      	bls.n	10f4 <vtrsTask+0x74>
}

void vtrsTask( void *pvParameters ){
	vTaskDelay(300 / portTICK_RATE_MS);
	for(;;){
	if((2*res[6])<=(white+black)){
    10bc:	69a0      	ldr	r0, [r4, #24]
    10be:	0041      	lsls	r1, r0, #1
    10c0:	4299      	cmp	r1, r3
    10c2:	d8f7      	bhi.n	10b4 <vtrsTask+0x34>
	printf("migi");
    10c4:	4650      	mov	r0, sl
    10c6:	f004 f95b 	bl	5380 <printf>
	left = 	0;
	right = 10;
    10ca:	6828      	ldr	r0, [r5, #0]
    10cc:	6833      	ldr	r3, [r6, #0]
    10ce:	464a      	mov	r2, r9
    10d0:	603a      	str	r2, [r7, #0]
    10d2:	68a1      	ldr	r1, [r4, #8]
    10d4:	18c3      	adds	r3, r0, r3
    10d6:	68e2      	ldr	r2, [r4, #12]
    10d8:	6920      	ldr	r0, [r4, #16]
    10da:	0049      	lsls	r1, r1, #1
    10dc:	0052      	lsls	r2, r2, #1
    10de:	0040      	lsls	r0, r0, #1
	while((2*res[2])<=(white+black)||((2*res[3])<=(white+black))||((2*res[4])<=(white+black)));
    10e0:	4299      	cmp	r1, r3
    10e2:	d920      	bls.n	1126 <vtrsTask+0xa6>
    10e4:	4293      	cmp	r3, r2
    10e6:	d2fb      	bcs.n	10e0 <vtrsTask+0x60>
    10e8:	4283      	cmp	r3, r0
    10ea:	d2f9      	bcs.n	10e0 <vtrsTask+0x60>
	left = 10;
    10ec:	4649      	mov	r1, r9
    10ee:	4642      	mov	r2, r8
    10f0:	6011      	str	r1, [r2, #0]
    10f2:	e7df      	b.n	10b4 <vtrsTask+0x34>
	right = 10;
}
	if((2*res[4])<=((white+black))){
	printf("tyuou");
    10f4:	4658      	mov	r0, fp
    10f6:	f004 f943 	bl	5380 <printf>
	left = 10;
    10fa:	464b      	mov	r3, r9
    10fc:	4641      	mov	r1, r8
    10fe:	600b      	str	r3, [r1, #0]
    1100:	6828      	ldr	r0, [r5, #0]
    1102:	6833      	ldr	r3, [r6, #0]
    1104:	68a1      	ldr	r1, [r4, #8]
    1106:	18c3      	adds	r3, r0, r3
    1108:	68e2      	ldr	r2, [r4, #12]
    110a:	6920      	ldr	r0, [r4, #16]
    110c:	0049      	lsls	r1, r1, #1
    110e:	0052      	lsls	r2, r2, #1
    1110:	0040      	lsls	r0, r0, #1
	right = 0;
	while(((2*res[2])<=(white+black))||((2*res[3])<=(white+black))||((2*res[4])<=(white+black)));
    1112:	4299      	cmp	r1, r3
    1114:	d906      	bls.n	1124 <vtrsTask+0xa4>
    1116:	4293      	cmp	r3, r2
    1118:	d2fb      	bcs.n	1112 <vtrsTask+0x92>
    111a:	4283      	cmp	r3, r0
    111c:	d2f9      	bcs.n	1112 <vtrsTask+0x92>
	left = 10;
	right = 10;
    111e:	464a      	mov	r2, r9
    1120:	603a      	str	r2, [r7, #0]
    1122:	e7c3      	b.n	10ac <vtrsTask+0x2c>
    1124:	e7fe      	b.n	1124 <vtrsTask+0xa4>
    1126:	e7fe      	b.n	1126 <vtrsTask+0xa6>
    1128:	0000e804 	.word	0x0000e804
    112c:	40000940 	.word	0x40000940
    1130:	0000e80c 	.word	0x0000e80c
    1134:	40000908 	.word	0x40000908
    1138:	40000948 	.word	0x40000948
    113c:	40000910 	.word	0x40000910
    1140:	4000090c 	.word	0x4000090c

00001144 <init_VIC>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void init_VIC(void) 
{
    1144:	b570      	push	{r4, r5, r6, lr}
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    1146:	480d      	ldr	r0, [pc, #52]	; (117c <init_VIC+0x38>)
    VICVectAddr = 0;
    1148:	4b0d      	ldr	r3, [pc, #52]	; (1180 <init_VIC+0x3c>)
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    114a:	2101      	movs	r1, #1
    VICVectAddr = 0;
    114c:	2500      	movs	r5, #0
{
    DWORD i = 0;
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    114e:	424a      	negs	r2, r1
    1150:	6002      	str	r2, [r0, #0]
    VICVectAddr = 0;
    1152:	601d      	str	r5, [r3, #0]
    VICIntSelect = 0;
    1154:	4b0b      	ldr	r3, [pc, #44]	; (1184 <init_VIC+0x40>)
    1156:	480c      	ldr	r0, [pc, #48]	; (1188 <init_VIC+0x44>)

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    1158:	4e0c      	ldr	r6, [pc, #48]	; (118c <init_VIC+0x48>)
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;
    115a:	601d      	str	r5, [r3, #0]
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
		*vect_cntl = 0xF;
    115c:	240f      	movs	r4, #15
    DWORD *vect_addr, *vect_cntl;
   	
    /* initialize VIC*/
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;
    115e:	33f4      	adds	r3, #244	; 0xf4
    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
    1160:	1c19      	adds	r1, r3, #0
    1162:	c120      	stmia	r1!, {r5}
		*vect_cntl = 0xF;
    1164:	1c02      	adds	r2, r0, #0
    1166:	c210      	stmia	r2!, {r4}
    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    {
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + i*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
    1168:	605d      	str	r5, [r3, #4]
    116a:	1d0b      	adds	r3, r1, #4
		*vect_cntl = 0xF;
    116c:	6044      	str	r4, [r0, #4]
    116e:	1d10      	adds	r0, r2, #4
    VICIntEnClr = 0xffffffff;
    VICVectAddr = 0;
    VICIntSelect = 0;

    /* set all the vector and vector control register to 0 */
    for ( i = 0; i < VIC_SIZE; i++ )
    1170:	42b3      	cmp	r3, r6
    1172:	d1f5      	bne.n	1160 <init_VIC+0x1c>
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + i*4);
		*vect_addr = 0x0;
		*vect_cntl = 0xF;
    }
    return;
}
    1174:	bc70      	pop	{r4, r5, r6}
    1176:	bc01      	pop	{r0}
    1178:	4700      	bx	r0
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	fffff014 	.word	0xfffff014
    1180:	ffffff00 	.word	0xffffff00
    1184:	fffff00c 	.word	0xfffff00c
    1188:	fffff200 	.word	0xfffff200
    118c:	fffff180 	.word	0xfffff180

00001190 <install_irq>:
**						interrupt priority
** Returned value:		true or false, return false if IntNum is out of range
** 
******************************************************************************/
DWORD install_irq( DWORD IntNumber, void *HandlerAddr, DWORD Priority )
{
    1190:	b570      	push	{r4, r5, r6, lr}
    DWORD *vect_addr;
    DWORD *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    1192:	2401      	movs	r4, #1
    1194:	4b0a      	ldr	r3, [pc, #40]	; (11c0 <install_irq+0x30>)
    1196:	1c25      	adds	r5, r4, #0
    1198:	4085      	lsls	r5, r0
    119a:	601d      	str	r5, [r3, #0]
    if ( IntNumber >= VIC_SIZE )
    {
		return ( FALSE );
    119c:	2300      	movs	r3, #0
{
    DWORD *vect_addr;
    DWORD *vect_cntl;
      
    VICIntEnClr = 1 << IntNumber;	/* Disable Interrupt */
    if ( IntNumber >= VIC_SIZE )
    119e:	281f      	cmp	r0, #31
    11a0:	d80a      	bhi.n	11b8 <install_irq+0x28>
		return ( FALSE );
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
    11a2:	4e08      	ldr	r6, [pc, #32]	; (11c4 <install_irq+0x34>)
    11a4:	1983      	adds	r3, r0, r6
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
    11a6:	009e      	lsls	r6, r3, #2
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
    11a8:	4b07      	ldr	r3, [pc, #28]	; (11c8 <install_irq+0x38>)
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
    11aa:	6031      	str	r1, [r6, #0]
    }
    else
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
    11ac:	18c6      	adds	r6, r0, r3
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
		*vect_cntl = Priority;
		VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    11ae:	4807      	ldr	r0, [pc, #28]	; (11cc <install_irq+0x3c>)
    {
		/* find first un-assigned VIC address for the handler */
		vect_addr = (DWORD *)(VIC_BASE_ADDR + VECT_ADDR_INDEX + IntNumber*4);
		vect_cntl = (DWORD *)(VIC_BASE_ADDR + VECT_CNTL_INDEX + IntNumber*4);
		*vect_addr = (DWORD)HandlerAddr;	/* set interrupt vector */
		*vect_cntl = Priority;
    11b0:	00b1      	lsls	r1, r6, #2
    11b2:	600a      	str	r2, [r1, #0]
		VICIntEnable = 1 << IntNumber;	/* Enable Interrupt */
    11b4:	6005      	str	r5, [r0, #0]
		return( TRUE );
    11b6:	1c23      	adds	r3, r4, #0
    }
}
    11b8:	1c18      	adds	r0, r3, #0
    11ba:	bc70      	pop	{r4, r5, r6}
    11bc:	bc02      	pop	{r1}
    11be:	4708      	bx	r1
    11c0:	fffff014 	.word	0xfffff014
    11c4:	3ffffc40 	.word	0x3ffffc40
    11c8:	3ffffc80 	.word	0x3ffffc80
    11cc:	fffff010 	.word	0xfffff010

000011d0 <RTCInit>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
DWORD RTCInit( void )
{
    11d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11d2:	4657      	mov	r7, sl
    11d4:	464e      	mov	r6, r9
    11d6:	4645      	mov	r5, r8
    11d8:	b4e0      	push	{r5, r6, r7}
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
    11da:	4d2d      	ldr	r5, [pc, #180]	; (1290 <RTCInit+0xc0>)
    11dc:	2200      	movs	r2, #0
    11de:	602a      	str	r2, [r5, #0]
	RTC_CIIR = 0;
	RTC_CCR = 0;
	RTC_CCR = CCR_CLKSRC ;
	RTC_PREINT = PREINT_RTC;
    11e0:	21e4      	movs	r1, #228	; 0xe4
*****************************************************************************/
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
    11e2:	3d04      	subs	r5, #4
	RTC_CCR = 0;
	RTC_CCR = CCR_CLKSRC ;
	RTC_PREINT = PREINT_RTC;
    11e4:	4e2b      	ldr	r6, [pc, #172]	; (1294 <RTCInit+0xc4>)
	RTC_PREFRAC = PREFRAC_RTC;
    11e6:	4f2c      	ldr	r7, [pc, #176]	; (1298 <RTCInit+0xc8>)
*****************************************************************************/
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
    11e8:	602a      	str	r2, [r5, #0]
	RTC_CCR = 0;
	RTC_CCR = CCR_CLKSRC ;
	RTC_PREINT = PREINT_RTC;
    11ea:	004b      	lsls	r3, r1, #1
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
	RTC_CCR = 0;
    11ec:	3d04      	subs	r5, #4
	RTC_CCR = CCR_CLKSRC ;
    11ee:	2410      	movs	r4, #16
DWORD RTCInit( void )
{
	/*--- Initialize registers ---*/    
	RTC_AMR = 0;
	RTC_CIIR = 0;
	RTC_CCR = 0;
    11f0:	602a      	str	r2, [r5, #0]
	RTC_CCR = CCR_CLKSRC ;
    11f2:	602c      	str	r4, [r5, #0]
	RTC_PREINT = PREINT_RTC;
    11f4:	6033      	str	r3, [r6, #0]
	RTC_PREFRAC = PREFRAC_RTC;
    11f6:	6077      	str	r7, [r6, #4]
** 
*****************************************************************************/
void RTCStart( void ) 
{
  /*--- Start RTC counters ---*/
  RTC_CCR |= CCR_CLKEN;
    11f8:	6828      	ldr	r0, [r5, #0]
    11fa:	2401      	movs	r4, #1
    11fc:	4320      	orrs	r0, r4
    11fe:	6028      	str	r0, [r5, #0]
  RTC_ILR = ILR_RTCCIF;
    1200:	3d08      	subs	r5, #8
    1202:	602c      	str	r4, [r5, #0]
	RTC_PREINT = PREINT_RTC;
	RTC_PREFRAC = PREFRAC_RTC;

	RTCStart(); 

	if(RTC_CONF_STAT != CONF_COMPLETED){
    1204:	4825      	ldr	r0, [pc, #148]	; (129c <RTCInit+0xcc>)
    1206:	4926      	ldr	r1, [pc, #152]	; (12a0 <RTCInit+0xd0>)
    1208:	6803      	ldr	r3, [r0, #0]
    120a:	468a      	mov	sl, r1
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
DWORD RTCInit( void )
{
    120c:	b088      	sub	sp, #32
	RTC_PREINT = PREINT_RTC;
	RTC_PREFRAC = PREFRAC_RTC;

	RTCStart(); 

	if(RTC_CONF_STAT != CONF_COMPLETED){
    120e:	4553      	cmp	r3, sl
    1210:	d034      	beq.n	127c <RTCInit+0xac>
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
    1212:	4f24      	ldr	r7, [pc, #144]	; (12a4 <RTCInit+0xd4>)
		RTC_MIN   = 43;
    1214:	4e24      	ldr	r6, [pc, #144]	; (12a8 <RTCInit+0xd8>)
    1216:	232b      	movs	r3, #43	; 0x2b
		RTC_HOUR  = 23;
    1218:	4d24      	ldr	r5, [pc, #144]	; (12ac <RTCInit+0xdc>)
	RTCStart(); 

	if(RTC_CONF_STAT != CONF_COMPLETED){
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
    121a:	603a      	str	r2, [r7, #0]
		RTC_MIN   = 43;
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
    121c:	4924      	ldr	r1, [pc, #144]	; (12b0 <RTCInit+0xe0>)

	if(RTC_CONF_STAT != CONF_COMPLETED){
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
		RTC_MIN   = 43;
    121e:	6033      	str	r3, [r6, #0]
		RTC_HOUR  = 23;
    1220:	3b14      	subs	r3, #20
    1222:	602b      	str	r3, [r5, #0]
		RTC_DOM   = 29;
		RTC_MONTH = 7;
    1224:	4a23      	ldr	r2, [pc, #140]	; (12b4 <RTCInit+0xe4>)
		/* if RTC was not cofigured then set to 
		    2009/07/29 23:43:00 */
		RTC_SEC   = 0;
		RTC_MIN   = 43;
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
    1226:	3306      	adds	r3, #6
    1228:	600b      	str	r3, [r1, #0]
		RTC_MONTH = 7;
    122a:	3b16      	subs	r3, #22
    122c:	6013      	str	r3, [r2, #0]
		RTC_YEAR  = 2009;    
    122e:	4c22      	ldr	r4, [pc, #136]	; (12b8 <RTCInit+0xe8>)
    1230:	4b22      	ldr	r3, [pc, #136]	; (12bc <RTCInit+0xec>)
    1232:	601c      	str	r4, [r3, #0]
*****************************************************************************/
RTCTime RTCGetTime( void ) 
{
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
    1234:	683f      	ldr	r7, [r7, #0]
  LocalTime.RTC_Min = RTC_MIN;
    1236:	6836      	ldr	r6, [r6, #0]
  LocalTime.RTC_Hour = RTC_HOUR;
    1238:	682d      	ldr	r5, [r5, #0]
  LocalTime.RTC_Mday = RTC_DOM;
    123a:	6809      	ldr	r1, [r1, #0]
    123c:	4689      	mov	r9, r1
  LocalTime.RTC_Wday = RTC_DOW;
    123e:	4920      	ldr	r1, [pc, #128]	; (12c0 <RTCInit+0xf0>)
RTCTime RTCGetTime( void ) 
{
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
  LocalTime.RTC_Min = RTC_MIN;
    1240:	46b4      	mov	ip, r6
  LocalTime.RTC_Hour = RTC_HOUR;
    1242:	46a8      	mov	r8, r5
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
  LocalTime.RTC_Year = RTC_YEAR;
    1244:	4664      	mov	r4, ip
    
  LocalTime.RTC_Sec = RTC_SEC;
  LocalTime.RTC_Min = RTC_MIN;
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
    1246:	680d      	ldr	r5, [r1, #0]
  LocalTime.RTC_Yday = RTC_DOY;
    1248:	3104      	adds	r1, #4
    124a:	6809      	ldr	r1, [r1, #0]
  LocalTime.RTC_Mon = RTC_MONTH;
    124c:	6816      	ldr	r6, [r2, #0]
  LocalTime.RTC_Year = RTC_YEAR;
    124e:	681a      	ldr	r2, [r3, #0]
    1250:	9401      	str	r4, [sp, #4]
    1252:	4644      	mov	r4, r8
    1254:	9402      	str	r4, [sp, #8]
    1256:	9506      	str	r5, [sp, #24]
    1258:	464c      	mov	r4, r9
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    125a:	4d1a      	ldr	r5, [pc, #104]	; (12c4 <RTCInit+0xf4>)
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
  LocalTime.RTC_Year = RTC_YEAR;
    125c:	9700      	str	r7, [sp, #0]
    125e:	9604      	str	r6, [sp, #16]
    1260:	9205      	str	r2, [sp, #20]
    1262:	9107      	str	r1, [sp, #28]
    1264:	9403      	str	r4, [sp, #12]
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    1266:	1c2f      	adds	r7, r5, #0
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
  LocalTime.RTC_Year = RTC_YEAR;
    1268:	466b      	mov	r3, sp
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    126a:	cb70      	ldmia	r3!, {r4, r5, r6}
    126c:	c770      	stmia	r7!, {r4, r5, r6}
    126e:	1c3a      	adds	r2, r7, #0
    1270:	cb70      	ldmia	r3!, {r4, r5, r6}
    1272:	c270      	stmia	r2!, {r4, r5, r6}
		
		RTC_CONF_STAT = CONF_COMPLETED;
    1274:	4651      	mov	r1, sl
		RTC_HOUR  = 23;
		RTC_DOM   = 29;
		RTC_MONTH = 7;
		RTC_YEAR  = 2009;    
		
		local_time = RTCGetTime();
    1276:	cb60      	ldmia	r3!, {r5, r6}
    1278:	c260      	stmia	r2!, {r5, r6}
		
		RTC_CONF_STAT = CONF_COMPLETED;
    127a:	6001      	str	r1, [r0, #0]
	}

	return (TRUE);
}
    127c:	b008      	add	sp, #32
    127e:	2001      	movs	r0, #1
    1280:	bc1c      	pop	{r2, r3, r4}
    1282:	4690      	mov	r8, r2
    1284:	4699      	mov	r9, r3
    1286:	46a2      	mov	sl, r4
    1288:	bcf0      	pop	{r4, r5, r6, r7}
    128a:	bc02      	pop	{r1}
    128c:	4708      	bx	r1
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	e0024010 	.word	0xe0024010
    1294:	e0024080 	.word	0xe0024080
    1298:	000061c0 	.word	0x000061c0
    129c:	e0084004 	.word	0xe0084004
    12a0:	a5a5a5a5 	.word	0xa5a5a5a5
    12a4:	e0024020 	.word	0xe0024020
    12a8:	e0024024 	.word	0xe0024024
    12ac:	e0024028 	.word	0xe0024028
    12b0:	e002402c 	.word	0xe002402c
    12b4:	e0024038 	.word	0xe0024038
    12b8:	000007d9 	.word	0x000007d9
    12bc:	e002403c 	.word	0xe002403c
    12c0:	e0024030 	.word	0xe0024030
    12c4:	4000098c 	.word	0x4000098c

000012c8 <RTCStart>:
** 
*****************************************************************************/
void RTCStart( void ) 
{
  /*--- Start RTC counters ---*/
  RTC_CCR |= CCR_CLKEN;
    12c8:	4a03      	ldr	r2, [pc, #12]	; (12d8 <RTCStart+0x10>)
    12ca:	6811      	ldr	r1, [r2, #0]
    12cc:	2301      	movs	r3, #1
    12ce:	4319      	orrs	r1, r3
    12d0:	6011      	str	r1, [r2, #0]
  RTC_ILR = ILR_RTCCIF;
    12d2:	3a08      	subs	r2, #8
    12d4:	6013      	str	r3, [r2, #0]
  return;
}
    12d6:	4770      	bx	lr
    12d8:	e0024008 	.word	0xe0024008

000012dc <RTCStop>:
** 
*****************************************************************************/
void RTCStop( void )
{   
  /*--- Stop RTC counters ---*/
  RTC_CCR &= ~CCR_CLKEN;
    12dc:	4b02      	ldr	r3, [pc, #8]	; (12e8 <RTCStop+0xc>)
    12de:	681a      	ldr	r2, [r3, #0]
    12e0:	2101      	movs	r1, #1
    12e2:	438a      	bics	r2, r1
    12e4:	601a      	str	r2, [r3, #0]
  return;
} 
    12e6:	4770      	bx	lr
    12e8:	e0024008 	.word	0xe0024008

000012ec <RTC_CTCReset>:
** 
*****************************************************************************/
void RTC_CTCReset( void )
{   
  /*--- Reset CTC ---*/
  RTC_CCR |= CCR_CTCRST;
    12ec:	4b02      	ldr	r3, [pc, #8]	; (12f8 <RTC_CTCReset+0xc>)
    12ee:	681a      	ldr	r2, [r3, #0]
    12f0:	2102      	movs	r1, #2
    12f2:	430a      	orrs	r2, r1
    12f4:	601a      	str	r2, [r3, #0]
  return;
}
    12f6:	4770      	bx	lr
    12f8:	e0024008 	.word	0xe0024008

000012fc <RTCSetTime>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetTime( RTCTime Time ) 
{
    12fc:	b084      	sub	sp, #16
    12fe:	b510      	push	{r4, lr}
    1300:	9305      	str	r3, [sp, #20]
  RTC_SEC   = Time.RTC_Sec;
    1302:	4b0b      	ldr	r3, [pc, #44]	; (1330 <RTCSetTime+0x34>)
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetTime( RTCTime Time ) 
{
    1304:	9204      	str	r2, [sp, #16]
    1306:	9002      	str	r0, [sp, #8]
    1308:	9103      	str	r1, [sp, #12]
  RTC_SEC   = Time.RTC_Sec;
    130a:	6018      	str	r0, [r3, #0]
  RTC_MIN   = Time.RTC_Min;
    130c:	9903      	ldr	r1, [sp, #12]
    130e:	6059      	str	r1, [r3, #4]
  RTC_HOUR  = Time.RTC_Hour;
    1310:	9804      	ldr	r0, [sp, #16]
    1312:	6098      	str	r0, [r3, #8]
  RTC_DOM   = Time.RTC_Mday;
    1314:	9a05      	ldr	r2, [sp, #20]
    1316:	60da      	str	r2, [r3, #12]
  RTC_DOW   = Time.RTC_Wday;
    1318:	9c08      	ldr	r4, [sp, #32]
    131a:	611c      	str	r4, [r3, #16]
  RTC_DOY   = Time.RTC_Yday;
    131c:	9909      	ldr	r1, [sp, #36]	; 0x24
    131e:	6159      	str	r1, [r3, #20]
  RTC_MONTH = Time.RTC_Mon;
    1320:	9806      	ldr	r0, [sp, #24]
    1322:	6198      	str	r0, [r3, #24]
  RTC_YEAR  = Time.RTC_Year;    
    1324:	9a07      	ldr	r2, [sp, #28]
    1326:	61da      	str	r2, [r3, #28]
  return;
}
    1328:	bc10      	pop	{r4}
    132a:	bc08      	pop	{r3}
    132c:	b004      	add	sp, #16
    132e:	4718      	bx	r3
    1330:	e0024020 	.word	0xe0024020

00001334 <RTCSetAlarm>:
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetAlarm( RTCTime Alarm ) 
{   
    1334:	b084      	sub	sp, #16
    1336:	b510      	push	{r4, lr}
    1338:	9305      	str	r3, [sp, #20]
  RTC_ALSEC  = Alarm.RTC_Sec;
    133a:	4b0b      	ldr	r3, [pc, #44]	; (1368 <RTCSetAlarm+0x34>)
** parameters:			None
** Returned value:		None
** 
*****************************************************************************/
void RTCSetAlarm( RTCTime Alarm ) 
{   
    133c:	9204      	str	r2, [sp, #16]
    133e:	9002      	str	r0, [sp, #8]
    1340:	9103      	str	r1, [sp, #12]
  RTC_ALSEC  = Alarm.RTC_Sec;
    1342:	6018      	str	r0, [r3, #0]
  RTC_ALMIN  = Alarm.RTC_Min;
    1344:	9903      	ldr	r1, [sp, #12]
    1346:	6059      	str	r1, [r3, #4]
  RTC_ALHOUR = Alarm.RTC_Hour;
    1348:	9804      	ldr	r0, [sp, #16]
    134a:	6098      	str	r0, [r3, #8]
  RTC_ALDOM  = Alarm.RTC_Mday;
    134c:	9a05      	ldr	r2, [sp, #20]
    134e:	60da      	str	r2, [r3, #12]
  RTC_ALDOW  = Alarm.RTC_Wday;
    1350:	9c08      	ldr	r4, [sp, #32]
    1352:	611c      	str	r4, [r3, #16]
  RTC_ALDOY  = Alarm.RTC_Yday;
    1354:	9909      	ldr	r1, [sp, #36]	; 0x24
    1356:	6159      	str	r1, [r3, #20]
  RTC_ALMON  = Alarm.RTC_Mon;
    1358:	9806      	ldr	r0, [sp, #24]
    135a:	6198      	str	r0, [r3, #24]
  RTC_ALYEAR = Alarm.RTC_Year;    
    135c:	9a07      	ldr	r2, [sp, #28]
    135e:	61da      	str	r2, [r3, #28]
  return;
}
    1360:	bc10      	pop	{r4}
    1362:	bc08      	pop	{r3}
    1364:	b004      	add	sp, #16
    1366:	4718      	bx	r3
    1368:	e0024060 	.word	0xe0024060

0000136c <RTCGetTime>:
** parameters:			None
** Returned value:		The data structure of the RTC time table
** 
*****************************************************************************/
RTCTime RTCGetTime( void ) 
{
    136c:	b5f0      	push	{r4, r5, r6, r7, lr}
    136e:	4647      	mov	r7, r8
    1370:	b480      	push	{r7}
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
    1372:	4a0f      	ldr	r2, [pc, #60]	; (13b0 <RTCGetTime+0x44>)
    1374:	6813      	ldr	r3, [r2, #0]
    1376:	469c      	mov	ip, r3
  LocalTime.RTC_Min = RTC_MIN;
    1378:	4b0e      	ldr	r3, [pc, #56]	; (13b4 <RTCGetTime+0x48>)
  LocalTime.RTC_Hour = RTC_HOUR;
  LocalTime.RTC_Mday = RTC_DOM;
  LocalTime.RTC_Wday = RTC_DOW;
  LocalTime.RTC_Yday = RTC_DOY;
  LocalTime.RTC_Mon = RTC_MONTH;
    137a:	490f      	ldr	r1, [pc, #60]	; (13b8 <RTCGetTime+0x4c>)
RTCTime RTCGetTime( void ) 
{
  RTCTime LocalTime;
    
  LocalTime.RTC_Sec = RTC_SEC;
  LocalTime.RTC_Min = RTC_MIN;
    137c:	681f      	ldr	r7, [r3, #0]
  LocalTime.RTC_Hour = RTC_HOUR;
    137e:	685e      	ldr	r6, [r3, #4]
  LocalTime.RTC_Mday = RTC_DOM;
    1380:	689d      	ldr	r5, [r3, #8]
  LocalTime.RTC_Wday = RTC_DOW;
    1382:	68da      	ldr	r2, [r3, #12]
  LocalTime.RTC_Yday = RTC_DOY;
    1384:	3310      	adds	r3, #16
    1386:	681b      	ldr	r3, [r3, #0]
  LocalTime.RTC_Mon = RTC_MONTH;
    1388:	680c      	ldr	r4, [r1, #0]
  LocalTime.RTC_Year = RTC_YEAR;
    138a:	3104      	adds	r1, #4
    138c:	6809      	ldr	r1, [r1, #0]
    138e:	4688      	mov	r8, r1
    1390:	4661      	mov	r1, ip
    1392:	6001      	str	r1, [r0, #0]
    1394:	4641      	mov	r1, r8
    1396:	6047      	str	r7, [r0, #4]
    1398:	6086      	str	r6, [r0, #8]
    139a:	60c5      	str	r5, [r0, #12]
    139c:	6104      	str	r4, [r0, #16]
    139e:	6141      	str	r1, [r0, #20]
    13a0:	6182      	str	r2, [r0, #24]
    13a2:	61c3      	str	r3, [r0, #28]
  return ( LocalTime );    
}
    13a4:	bc04      	pop	{r2}
    13a6:	4690      	mov	r8, r2
    13a8:	bcf0      	pop	{r4, r5, r6, r7}
    13aa:	bc02      	pop	{r1}
    13ac:	4708      	bx	r1
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	e0024020 	.word	0xe0024020
    13b4:	e0024024 	.word	0xe0024024
    13b8:	e0024038 	.word	0xe0024038

000013bc <RTCSetAlarmMask>:
** 
*****************************************************************************/
void RTCSetAlarmMask( DWORD AlarmMask ) 
{
  /*--- Set alarm mask ---*/    
  RTC_AMR = AlarmMask;
    13bc:	4b01      	ldr	r3, [pc, #4]	; (13c4 <RTCSetAlarmMask+0x8>)
    13be:	6018      	str	r0, [r3, #0]
  return;
}
    13c0:	4770      	bx	lr
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	e0024010 	.word	0xe0024010

000013c8 <UARTInit>:
**						interrupt handler can't be installed to the 
**						VIC table
** 
*****************************************************************************/
DWORD UARTInit( DWORD PortNum, DWORD baudrate )
{
    13c8:	b538      	push	{r3, r4, r5, lr}
    DWORD Fdiv;

	if ( PortNum == 0 )
    13ca:	1e04      	subs	r4, r0, #0
    13cc:	d022      	beq.n	1414 <UARTInit+0x4c>
    	}
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
	}
	return( FALSE ); 
    13ce:	2000      	movs	r0, #0
    	}
    	U0IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
	}
	else if ( PortNum == 1 )
    13d0:	2c01      	cmp	r4, #1
    13d2:	d002      	beq.n	13da <UARTInit+0x12>
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
	}
	return( FALSE ); 
}
    13d4:	bc38      	pop	{r3, r4, r5}
    13d6:	bc02      	pop	{r1}
    13d8:	4708      	bx	r1
	else if ( PortNum == 1 )
	{
#if EA_BOARD_LPC24XX
		PINSEL7 |= 0x0000000F;	/* P3.16 TXD1, P3.17 RXD1 */
#else							/* Default is Keil MCB2300 board */							
		PINSEL0 |= 0x40000000;	/* Enable TxD1 P0.15 */
    13da:	4b1a      	ldr	r3, [pc, #104]	; (1444 <UARTInit+0x7c>)
    13dc:	2580      	movs	r5, #128	; 0x80
    13de:	6818      	ldr	r0, [r3, #0]
    13e0:	05ea      	lsls	r2, r5, #23
    13e2:	4302      	orrs	r2, r0
    13e4:	601a      	str	r2, [r3, #0]
		PINSEL1 |= 0x00000001;	/* Enable RxD1 P0.16 */
    13e6:	685d      	ldr	r5, [r3, #4]
    13e8:	4325      	orrs	r5, r4
    13ea:	605d      	str	r5, [r3, #4]
#endif
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    13ec:	4d16      	ldr	r5, [pc, #88]	; (1448 <UARTInit+0x80>)
    13ee:	2083      	movs	r0, #131	; 0x83
    13f0:	6028      	str	r0, [r5, #0]
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    13f2:	4816      	ldr	r0, [pc, #88]	; (144c <UARTInit+0x84>)
    13f4:	f00c fc36 	bl	dc64 <____aeabi_uidiv_from_thumb>
    	U1DLM = Fdiv / 256;							
    13f8:	4b15      	ldr	r3, [pc, #84]	; (1450 <UARTInit+0x88>)
    13fa:	0a01      	lsrs	r1, r0, #8
    13fc:	6019      	str	r1, [r3, #0]
    	U1DLL = Fdiv % 256;
    13fe:	22ff      	movs	r2, #255	; 0xff
    1400:	4914      	ldr	r1, [pc, #80]	; (1454 <UARTInit+0x8c>)
    1402:	4010      	ands	r0, r2
		U1LCR = 0x03;		/* DLAB = 0 */
    	U1FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    1404:	4a14      	ldr	r2, [pc, #80]	; (1458 <UARTInit+0x90>)
		PINSEL1 |= 0x00000001;	/* Enable RxD1 P0.16 */
#endif
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U1DLM = Fdiv / 256;							
    	U1DLL = Fdiv % 256;
    1406:	6008      	str	r0, [r1, #0]
		U1LCR = 0x03;		/* DLAB = 0 */
    1408:	2303      	movs	r3, #3
    	U1FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    140a:	2107      	movs	r1, #7
#endif
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U1DLM = Fdiv / 256;							
    	U1DLL = Fdiv % 256;
		U1LCR = 0x03;		/* DLAB = 0 */
    140c:	602b      	str	r3, [r5, #0]
    	{
			return (FALSE);
    	}
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
    140e:	1c20      	adds	r0, r4, #0
    	U1LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U1DLM = Fdiv / 256;							
    	U1DLL = Fdiv % 256;
		U1LCR = 0x03;		/* DLAB = 0 */
    	U1FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    1410:	6011      	str	r1, [r2, #0]
    	{
			return (FALSE);
    	}
    	U1IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
    1412:	e7df      	b.n	13d4 <UARTInit+0xc>
{
    DWORD Fdiv;

	if ( PortNum == 0 )
	{
		PINSEL0 = 0x00000050;       /* RxD0 and TxD0 */
    1414:	4d0b      	ldr	r5, [pc, #44]	; (1444 <UARTInit+0x7c>)
    1416:	2450      	movs	r4, #80	; 0x50
    1418:	602c      	str	r4, [r5, #0]

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    141a:	4c10      	ldr	r4, [pc, #64]	; (145c <UARTInit+0x94>)
    141c:	2083      	movs	r0, #131	; 0x83
    141e:	6020      	str	r0, [r4, #0]
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    1420:	480a      	ldr	r0, [pc, #40]	; (144c <UARTInit+0x84>)
    1422:	f00c fc1f 	bl	dc64 <____aeabi_uidiv_from_thumb>
    	U0DLM = Fdiv / 256;							
    1426:	4b0e      	ldr	r3, [pc, #56]	; (1460 <UARTInit+0x98>)
    1428:	0a02      	lsrs	r2, r0, #8
    	U0DLL = Fdiv % 256;
    142a:	25ff      	movs	r5, #255	; 0xff
    142c:	490d      	ldr	r1, [pc, #52]	; (1464 <UARTInit+0x9c>)
	{
		PINSEL0 = 0x00000050;       /* RxD0 and TxD0 */

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U0DLM = Fdiv / 256;							
    142e:	601a      	str	r2, [r3, #0]
    	U0DLL = Fdiv % 256;
    1430:	4028      	ands	r0, r5
		U0LCR = 0x03;		/* DLAB = 0 */
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    1432:	4b0d      	ldr	r3, [pc, #52]	; (1468 <UARTInit+0xa0>)
		PINSEL0 = 0x00000050;       /* RxD0 and TxD0 */

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U0DLM = Fdiv / 256;							
    	U0DLL = Fdiv % 256;
    1434:	6008      	str	r0, [r1, #0]
		U0LCR = 0x03;		/* DLAB = 0 */
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    1436:	2207      	movs	r2, #7

    	U0LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
    	Fdiv = ( Fpclk / 16 ) / baudrate ;	/*baud rate */
    	U0DLM = Fdiv / 256;							
    	U0DLL = Fdiv % 256;
		U0LCR = 0x03;		/* DLAB = 0 */
    1438:	2003      	movs	r0, #3
    143a:	6020      	str	r0, [r4, #0]
    	U0FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
    143c:	601a      	str	r2, [r3, #0]
    	{
			return (FALSE);
    	}
    	U0IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
#endif
    	return (TRUE);
    143e:	2001      	movs	r0, #1
    1440:	e7c8      	b.n	13d4 <UARTInit+0xc>
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	e002c000 	.word	0xe002c000
    1448:	e001000c 	.word	0xe001000c
    144c:	00225510 	.word	0x00225510
    1450:	e0010004 	.word	0xe0010004
    1454:	e0010000 	.word	0xe0010000
    1458:	e0010008 	.word	0xe0010008
    145c:	e000c00c 	.word	0xe000c00c
    1460:	e000c004 	.word	0xe000c004
    1464:	e000c000 	.word	0xe000c000
    1468:	e000c008 	.word	0xe000c008

0000146c <UARTPutch>:
** parameters:			portNum, charactor
** Returned value:		None
** 
*****************************************************************************/
void UARTPutch( DWORD portNum, BYTE charactor)
{
    146c:	b500      	push	{lr}
	if ( portNum == 0 )
    146e:	2800      	cmp	r0, #0
    1470:	d108      	bne.n	1484 <UARTPutch+0x18>
		if (charactor== '\n') {
		while (!(U0LSR & 0x20));
		U0THR = '\r';
		}
*/
		while (!(U0LSR & 0x20));
    1472:	4808      	ldr	r0, [pc, #32]	; (1494 <UARTPutch+0x28>)
    1474:	2220      	movs	r2, #32
    1476:	6803      	ldr	r3, [r0, #0]
    1478:	4213      	tst	r3, r2
    147a:	d0fc      	beq.n	1476 <UARTPutch+0xa>
		U0THR = charactor;
    147c:	4806      	ldr	r0, [pc, #24]	; (1498 <UARTPutch+0x2c>)
    147e:	6001      	str	r1, [r0, #0]
		while (!(U1LSR & 0x20));
		U1THR = charactor;
#endif
	}
    return;
}
    1480:	bc01      	pop	{r0}
    1482:	4700      	bx	r0
		if (charactor== '\n') {
		while (!(U1LSR & 0x20));
		U1THR = '\r';
		}
*/
		while (!(U1LSR & 0x20));
    1484:	4805      	ldr	r0, [pc, #20]	; (149c <UARTPutch+0x30>)
    1486:	2220      	movs	r2, #32
    1488:	6803      	ldr	r3, [r0, #0]
    148a:	4213      	tst	r3, r2
    148c:	d0fc      	beq.n	1488 <UARTPutch+0x1c>
		U1THR = charactor;
    148e:	4a04      	ldr	r2, [pc, #16]	; (14a0 <UARTPutch+0x34>)
    1490:	6011      	str	r1, [r2, #0]
    1492:	e7f5      	b.n	1480 <UARTPutch+0x14>
    1494:	e000c014 	.word	0xe000c014
    1498:	e000c000 	.word	0xe000c000
    149c:	e0010014 	.word	0xe0010014
    14a0:	e0010000 	.word	0xe0010000

000014a4 <UARTGetch>:
** parameters:			portNum, charactor
** Returned value:		None
** 
*****************************************************************************/
char UARTGetch (DWORD portNum)
{
    14a4:	b500      	push	{lr}
#ifdef BUFFERING_UART
    int c;
#endif
	if ( portNum == 0 )
    14a6:	2800      	cmp	r0, #0
    14a8:	d10a      	bne.n	14c0 <UARTGetch+0x1c>
		}
		else {
			return FALSE;
		}
#else
		while (!(U0LSR & 0x01));
    14aa:	490a      	ldr	r1, [pc, #40]	; (14d4 <UARTGetch+0x30>)
    14ac:	2201      	movs	r2, #1
    14ae:	680b      	ldr	r3, [r1, #0]
    14b0:	4213      	tst	r3, r2
    14b2:	d0fc      	beq.n	14ae <UARTGetch+0xa>
		return (U0RBR);
    14b4:	4a08      	ldr	r2, [pc, #32]	; (14d8 <UARTGetch+0x34>)
    14b6:	6811      	ldr	r1, [r2, #0]
    14b8:	0608      	lsls	r0, r1, #24
    14ba:	0e00      	lsrs	r0, r0, #24
#else
		while (!(U1LSR & 0x01));
		return (U1RBR);
#endif
	}
}
    14bc:	bc02      	pop	{r1}
    14be:	4708      	bx	r1
		}
		else {
			return FALSE;
		}
#else
		while (!(U1LSR & 0x01));
    14c0:	4906      	ldr	r1, [pc, #24]	; (14dc <UARTGetch+0x38>)
    14c2:	2201      	movs	r2, #1
    14c4:	680b      	ldr	r3, [r1, #0]
    14c6:	4213      	tst	r3, r2
    14c8:	d0fc      	beq.n	14c4 <UARTGetch+0x20>
		return (U1RBR);
    14ca:	4a05      	ldr	r2, [pc, #20]	; (14e0 <UARTGetch+0x3c>)
    14cc:	6811      	ldr	r1, [r2, #0]
    14ce:	0608      	lsls	r0, r1, #24
    14d0:	0e00      	lsrs	r0, r0, #24
    14d2:	e7f3      	b.n	14bc <UARTGetch+0x18>
    14d4:	e000c014 	.word	0xe000c014
    14d8:	e000c000 	.word	0xe000c000
    14dc:	e0010014 	.word	0xe0010014
    14e0:	e0010000 	.word	0xe0010000

000014e4 <GPIOInit>:
**                  regular GPIO, direction, Mask
** Returned value:  None
**
*****************************************************************************/
void GPIOInit( DWORD PortNum, DWORD PortType, DWORD PortDir, DWORD Mask )
{
    14e4:	b530      	push	{r4, r5, lr}
	if ( (PortType == REGULAR_PORT) && ((PortNum == 0) || (PortNum == 1)) )
    14e6:	2501      	movs	r5, #1
    14e8:	2400      	movs	r4, #0
    14ea:	4285      	cmp	r5, r0
    14ec:	4164      	adcs	r4, r4
    14ee:	2902      	cmp	r1, #2
    14f0:	d110      	bne.n	1514 <GPIOInit+0x30>
    14f2:	2c00      	cmp	r4, #0
    14f4:	d00e      	beq.n	1514 <GPIOInit+0x30>
	{
		SCS &= ~GPIOM;    /* set GPIOx to use regular I/O */
    14f6:	4917      	ldr	r1, [pc, #92]	; (1554 <GPIOInit+0x70>)
    14f8:	680c      	ldr	r4, [r1, #0]
    14fa:	43ac      	bics	r4, r5
    14fc:	600c      	str	r4, [r1, #0]
		if ( PortDir == DIR_OUT )
    14fe:	42aa      	cmp	r2, r5
    1500:	d015      	beq.n	152e <GPIOInit+0x4a>
				+ PortNum * REGULAR_PORT_DIR_INDEX)) |= Mask;
		}
		else
		{
			(*(volatile unsigned long *)(REGULAR_PORT_DIR_BASE
				+ PortNum * REGULAR_PORT_DIR_INDEX)) &= ~Mask;
    1502:	4a15      	ldr	r2, [pc, #84]	; (1558 <GPIOInit+0x74>)
    1504:	0105      	lsls	r5, r0, #4
    1506:	18ac      	adds	r4, r5, r2
    1508:	6820      	ldr	r0, [r4, #0]
    150a:	4398      	bics	r0, r3
    150c:	6020      	str	r0, [r4, #0]
			(*(volatile unsigned long *)(HS_PORT_DIR_BASE
				+ PortNum * HS_PORT_DIR_INDEX)) &= ~Mask;
		}
	}
	return;
}
    150e:	bc30      	pop	{r4, r5}
    1510:	bc01      	pop	{r0}
    1512:	4700      	bx	r0
		{
			(*(volatile unsigned long *)(REGULAR_PORT_DIR_BASE
				+ PortNum * REGULAR_PORT_DIR_INDEX)) &= ~Mask;
		}
	}
	else if ( PortType == FAST_PORT )
    1514:	2901      	cmp	r1, #1
    1516:	d1fa      	bne.n	150e <GPIOInit+0x2a>
	{
		if ( (PortNum == 0) || (PortNum == 1) )
    1518:	2c00      	cmp	r4, #0
    151a:	d10f      	bne.n	153c <GPIOInit+0x58>
		{
			SCS |= GPIOM; /* set GPIOx to use Fast I/O */
		}
		if ( PortDir == DIR_OUT )
    151c:	2a01      	cmp	r2, #1
    151e:	d012      	beq.n	1546 <GPIOInit+0x62>
				+ PortNum * HS_PORT_DIR_INDEX)) |= Mask;
		}
		else
		{
			(*(volatile unsigned long *)(HS_PORT_DIR_BASE
				+ PortNum * HS_PORT_DIR_INDEX)) &= ~Mask;
    1520:	4a0e      	ldr	r2, [pc, #56]	; (155c <GPIOInit+0x78>)
    1522:	1880      	adds	r0, r0, r2
    1524:	0145      	lsls	r5, r0, #5
    1526:	6829      	ldr	r1, [r5, #0]
    1528:	4399      	bics	r1, r3
    152a:	6029      	str	r1, [r5, #0]
    152c:	e7ef      	b.n	150e <GPIOInit+0x2a>
	{
		SCS &= ~GPIOM;    /* set GPIOx to use regular I/O */
		if ( PortDir == DIR_OUT )
		{
			(*(volatile unsigned long *)(REGULAR_PORT_DIR_BASE
				+ PortNum * REGULAR_PORT_DIR_INDEX)) |= Mask;
    152e:	490a      	ldr	r1, [pc, #40]	; (1558 <GPIOInit+0x74>)
    1530:	0105      	lsls	r5, r0, #4
    1532:	1868      	adds	r0, r5, r1
    1534:	6802      	ldr	r2, [r0, #0]
    1536:	4313      	orrs	r3, r2
    1538:	6003      	str	r3, [r0, #0]
    153a:	e7e8      	b.n	150e <GPIOInit+0x2a>
	}
	else if ( PortType == FAST_PORT )
	{
		if ( (PortNum == 0) || (PortNum == 1) )
		{
			SCS |= GPIOM; /* set GPIOx to use Fast I/O */
    153c:	4c05      	ldr	r4, [pc, #20]	; (1554 <GPIOInit+0x70>)
    153e:	6825      	ldr	r5, [r4, #0]
    1540:	4329      	orrs	r1, r5
    1542:	6021      	str	r1, [r4, #0]
    1544:	e7ea      	b.n	151c <GPIOInit+0x38>
		}
		if ( PortDir == DIR_OUT )
		{
			(*(volatile unsigned long *)(HS_PORT_DIR_BASE
				+ PortNum * HS_PORT_DIR_INDEX)) |= Mask;
    1546:	4c05      	ldr	r4, [pc, #20]	; (155c <GPIOInit+0x78>)
    1548:	1902      	adds	r2, r0, r4
    154a:	0151      	lsls	r1, r2, #5
    154c:	6808      	ldr	r0, [r1, #0]
    154e:	4303      	orrs	r3, r0
    1550:	600b      	str	r3, [r1, #0]
    1552:	e7dc      	b.n	150e <GPIOInit+0x2a>
    1554:	e01fc1a0 	.word	0xe01fc1a0
    1558:	e0028008 	.word	0xe0028008
    155c:	01fffe00 	.word	0x01fffe00

00001560 <__NOP>:
/*-----------------------------------------
		   Common Basis Functions
-------------------------------------------*/
inline void __NOP(void)
{
	__asm__ __volatile__("nop"); 
    1560:	46c0      	nop			; (mov r8, r8)
}
    1562:	4770      	bx	lr

00001564 <time_waste>:

void time_waste(volatile uint32_t dv)
{
    1564:	b500      	push	{lr}
    1566:	b085      	sub	sp, #20
    1568:	9001      	str	r0, [sp, #4]
	volatile uint32_t cnt;
	for (cnt=0; cnt<dv ; cnt++ ) { ; }
    156a:	2000      	movs	r0, #0
    156c:	9003      	str	r0, [sp, #12]
    156e:	9a03      	ldr	r2, [sp, #12]
    1570:	9b01      	ldr	r3, [sp, #4]
    1572:	429a      	cmp	r2, r3
    1574:	d206      	bcs.n	1584 <time_waste+0x20>
    1576:	9a03      	ldr	r2, [sp, #12]
    1578:	3201      	adds	r2, #1
    157a:	9203      	str	r2, [sp, #12]
    157c:	9903      	ldr	r1, [sp, #12]
    157e:	9b01      	ldr	r3, [sp, #4]
    1580:	4299      	cmp	r1, r3
    1582:	d3f8      	bcc.n	1576 <time_waste+0x12>
}
    1584:	b005      	add	sp, #20
    1586:	bc01      	pop	{r0}
    1588:	4700      	bx	r0
    158a:	46c0      	nop			; (mov r8, r8)

0000158c <_delay_us>:

void _delay_us(volatile uint32_t us)
{
    158c:	b500      	push	{lr}
    158e:	b083      	sub	sp, #12
    1590:	9001      	str	r0, [sp, #4]
    1592:	e005      	b.n	15a0 <_delay_us+0x14>
/*-----------------------------------------
		   Common Basis Functions
-------------------------------------------*/
inline void __NOP(void)
{
	__asm__ __volatile__("nop"); 
    1594:	46c0      	nop			; (mov r8, r8)
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	46c0      	nop			; (mov r8, r8)
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	46c0      	nop			; (mov r8, r8)
    159e:	46c0      	nop			; (mov r8, r8)
	for (cnt=0; cnt<dv ; cnt++ ) { ; }
}

void _delay_us(volatile uint32_t us)
{
	while(--us) { __NOP();__NOP();__NOP();__NOP();__NOP();__NOP();}
    15a0:	9801      	ldr	r0, [sp, #4]
    15a2:	3801      	subs	r0, #1
    15a4:	9001      	str	r0, [sp, #4]
    15a6:	9b01      	ldr	r3, [sp, #4]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d1f3      	bne.n	1594 <_delay_us+0x8>
}
    15ac:	b003      	add	sp, #12
    15ae:	bc01      	pop	{r0}
    15b0:	4700      	bx	r0
    15b2:	46c0      	nop			; (mov r8, r8)

000015b4 <dump>:

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
{
    15b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b6:	465f      	mov	r7, fp
    15b8:	4656      	mov	r6, sl
    15ba:	464d      	mov	r5, r9
    15bc:	4644      	mov	r4, r8
    15be:	b4f0      	push	{r4, r5, r6, r7}
    15c0:	b087      	sub	sp, #28
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
    15c2:	090a      	lsrs	r2, r1, #4

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
{
    15c4:	1c04      	adds	r4, r0, #0
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
    15c6:	9201      	str	r2, [sp, #4]
    15c8:	070b      	lsls	r3, r1, #28
    15ca:	d001      	beq.n	15d0 <dump+0x1c>
    15cc:	3201      	adds	r2, #1
    15ce:	9201      	str	r2, [sp, #4]
	DBG_print("\n");
    15d0:	200a      	movs	r0, #10
    15d2:	f003 feef 	bl	53b4 <putchar>
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
    15d6:	9a01      	ldr	r2, [sp, #4]
    15d8:	2a00      	cmp	r2, #0
    15da:	dc00      	bgt.n	15de <dump+0x2a>
    15dc:	e0f9      	b.n	17d2 <dump+0x21e>
    15de:	2300      	movs	r3, #0
    15e0:	4ab9      	ldr	r2, [pc, #740]	; (18c8 <dump+0x314>)
    15e2:	9300      	str	r3, [sp, #0]
#endif

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
    15e4:	3318      	adds	r3, #24
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
    15e6:	46a0      	mov	r8, r4
    15e8:	4691      	mov	r9, r2
#endif

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
    15ea:	446b      	add	r3, sp
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    15ec:	222e      	movs	r2, #46	; 0x2e
    15ee:	4cb7      	ldr	r4, [pc, #732]	; (18cc <dump+0x318>)
    15f0:	af02      	add	r7, sp, #8
#endif

/*-----------------------------------------
		Support Functions via STDIO
-------------------------------------------*/
void dump(uint32_t adr,uint32_t size)
    15f2:	469a      	mov	sl, r3
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    15f4:	4693      	mov	fp, r2
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
    15f6:	4641      	mov	r1, r8
    15f8:	48b5      	ldr	r0, [pc, #724]	; (18d0 <dump+0x31c>)
    15fa:	f003 fec1 	bl	5380 <printf>
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
    15fe:	4643      	mov	r3, r8
    1600:	7819      	ldrb	r1, [r3, #0]
    1602:	4648      	mov	r0, r9
    1604:	7039      	strb	r1, [r7, #0]
    1606:	f003 febb 	bl	5380 <printf>
    160a:	4642      	mov	r2, r8
    160c:	7851      	ldrb	r1, [r2, #1]
    160e:	4648      	mov	r0, r9
    1610:	7079      	strb	r1, [r7, #1]
    1612:	f003 feb5 	bl	5380 <printf>
    1616:	4643      	mov	r3, r8
    1618:	7899      	ldrb	r1, [r3, #2]
    161a:	4648      	mov	r0, r9
    161c:	70b9      	strb	r1, [r7, #2]
    161e:	f003 feaf 	bl	5380 <printf>
    1622:	4642      	mov	r2, r8
    1624:	78d1      	ldrb	r1, [r2, #3]
    1626:	4648      	mov	r0, r9
    1628:	70f9      	strb	r1, [r7, #3]
    162a:	f003 fea9 	bl	5380 <printf>
    162e:	4643      	mov	r3, r8
    1630:	7919      	ldrb	r1, [r3, #4]
    1632:	4648      	mov	r0, r9
    1634:	7139      	strb	r1, [r7, #4]
    1636:	f003 fea3 	bl	5380 <printf>
    163a:	4642      	mov	r2, r8
    163c:	7951      	ldrb	r1, [r2, #5]
    163e:	4648      	mov	r0, r9
    1640:	7179      	strb	r1, [r7, #5]
    1642:	f003 fe9d 	bl	5380 <printf>
    1646:	4643      	mov	r3, r8
    1648:	7999      	ldrb	r1, [r3, #6]
    164a:	4648      	mov	r0, r9
    164c:	71b9      	strb	r1, [r7, #6]
    164e:	f003 fe97 	bl	5380 <printf>
    1652:	4642      	mov	r2, r8
    1654:	79d1      	ldrb	r1, [r2, #7]
    1656:	4648      	mov	r0, r9
    1658:	71f9      	strb	r1, [r7, #7]
    165a:	f003 fe91 	bl	5380 <printf>
    165e:	4643      	mov	r3, r8
    1660:	7a19      	ldrb	r1, [r3, #8]
    1662:	4648      	mov	r0, r9
    1664:	7239      	strb	r1, [r7, #8]
    1666:	f003 fe8b 	bl	5380 <printf>
    166a:	4642      	mov	r2, r8
    166c:	7a51      	ldrb	r1, [r2, #9]
    166e:	4648      	mov	r0, r9
    1670:	7279      	strb	r1, [r7, #9]
    1672:	f003 fe85 	bl	5380 <printf>
    1676:	4643      	mov	r3, r8
    1678:	7a99      	ldrb	r1, [r3, #10]
    167a:	4648      	mov	r0, r9
    167c:	72b9      	strb	r1, [r7, #10]
    167e:	f003 fe7f 	bl	5380 <printf>
    1682:	4642      	mov	r2, r8
    1684:	7ad1      	ldrb	r1, [r2, #11]
    1686:	4648      	mov	r0, r9
    1688:	72f9      	strb	r1, [r7, #11]
    168a:	f003 fe79 	bl	5380 <printf>
    168e:	4643      	mov	r3, r8
    1690:	7b19      	ldrb	r1, [r3, #12]
    1692:	4648      	mov	r0, r9
    1694:	7339      	strb	r1, [r7, #12]
    1696:	f003 fe73 	bl	5380 <printf>
    169a:	4642      	mov	r2, r8
    169c:	7b51      	ldrb	r1, [r2, #13]
    169e:	4648      	mov	r0, r9
    16a0:	7379      	strb	r1, [r7, #13]
    16a2:	f003 fe6d 	bl	5380 <printf>
    16a6:	4643      	mov	r3, r8
    16a8:	7b99      	ldrb	r1, [r3, #14]
    16aa:	4648      	mov	r0, r9
    16ac:	73b9      	strb	r1, [r7, #14]
    16ae:	f003 fe67 	bl	5380 <printf>
    16b2:	4642      	mov	r2, r8
    16b4:	7bd1      	ldrb	r1, [r2, #15]
    16b6:	4648      	mov	r0, r9
    16b8:	73f9      	strb	r1, [r7, #15]
    16ba:	f003 fe61 	bl	5380 <printf>
    16be:	2010      	movs	r0, #16
    16c0:	4480      	add	r8, r0
		DBG_putch(' ');
    16c2:	6820      	ldr	r0, [r4, #0]
    16c4:	6882      	ldr	r2, [r0, #8]
    16c6:	6893      	ldr	r3, [r2, #8]
    16c8:	3b01      	subs	r3, #1
    16ca:	6093      	str	r3, [r2, #8]
    16cc:	2b00      	cmp	r3, #0
    16ce:	da00      	bge.n	16d2 <dump+0x11e>
    16d0:	e0c4      	b.n	185c <dump+0x2a8>
    16d2:	6812      	ldr	r2, [r2, #0]
    16d4:	2020      	movs	r0, #32
    16d6:	7010      	strb	r0, [r2, #0]
    16d8:	6820      	ldr	r0, [r4, #0]
    16da:	6882      	ldr	r2, [r0, #8]
    16dc:	6811      	ldr	r1, [r2, #0]
    16de:	3101      	adds	r1, #1
    16e0:	6011      	str	r1, [r2, #0]
    16e2:	2301      	movs	r3, #1
    16e4:	1c3d      	adds	r5, r7, #0
    16e6:	43bb      	bics	r3, r7
    16e8:	d040      	beq.n	176c <dump+0x1b8>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    16ea:	7839      	ldrb	r1, [r7, #0]
    16ec:	1c0b      	adds	r3, r1, #0
    16ee:	3b20      	subs	r3, #32
    16f0:	061d      	lsls	r5, r3, #24
    16f2:	0e2e      	lsrs	r6, r5, #24
    16f4:	2e5f      	cmp	r6, #95	; 0x5f
    16f6:	d800      	bhi.n	16fa <dump+0x146>
    16f8:	e0a0      	b.n	183c <dump+0x288>
    16fa:	6893      	ldr	r3, [r2, #8]
    16fc:	3b01      	subs	r3, #1
    16fe:	6093      	str	r3, [r2, #8]
    1700:	2b00      	cmp	r3, #0
    1702:	da00      	bge.n	1706 <dump+0x152>
    1704:	e0c7      	b.n	1896 <dump+0x2e2>
    1706:	6812      	ldr	r2, [r2, #0]
    1708:	4658      	mov	r0, fp
    170a:	7010      	strb	r0, [r2, #0]
    170c:	6821      	ldr	r1, [r4, #0]
    170e:	688a      	ldr	r2, [r1, #8]
    1710:	6810      	ldr	r0, [r2, #0]
    1712:	3001      	adds	r0, #1
    1714:	6010      	str	r0, [r2, #0]
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1716:	6820      	ldr	r0, [r4, #0]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1718:	1c7d      	adds	r5, r7, #1
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    171a:	6882      	ldr	r2, [r0, #8]
    171c:	e026      	b.n	176c <dump+0x1b8>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    171e:	6893      	ldr	r3, [r2, #8]
    1720:	3b01      	subs	r3, #1
    1722:	6093      	str	r3, [r2, #8]
    1724:	2b00      	cmp	r3, #0
    1726:	db3a      	blt.n	179e <dump+0x1ea>
    1728:	6812      	ldr	r2, [r2, #0]
    172a:	7011      	strb	r1, [r2, #0]
    172c:	6823      	ldr	r3, [r4, #0]
    172e:	689e      	ldr	r6, [r3, #8]
    1730:	6831      	ldr	r1, [r6, #0]
    1732:	3101      	adds	r1, #1
    1734:	6031      	str	r1, [r6, #0]
    1736:	1c6e      	adds	r6, r5, #1
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
    1738:	45b2      	cmp	sl, r6
    173a:	d040      	beq.n	17be <dump+0x20a>
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    173c:	7869      	ldrb	r1, [r5, #1]
    173e:	1c0d      	adds	r5, r1, #0
    1740:	3d20      	subs	r5, #32
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1742:	6820      	ldr	r0, [r4, #0]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    1744:	062b      	lsls	r3, r5, #24
    1746:	0e1d      	lsrs	r5, r3, #24
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1748:	6882      	ldr	r2, [r0, #8]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    174a:	2d5f      	cmp	r5, #95	; 0x5f
    174c:	d81e      	bhi.n	178c <dump+0x1d8>
    174e:	6893      	ldr	r3, [r2, #8]
    1750:	3b01      	subs	r3, #1
    1752:	6093      	str	r3, [r2, #8]
    1754:	2b00      	cmp	r3, #0
    1756:	db63      	blt.n	1820 <dump+0x26c>
    1758:	6810      	ldr	r0, [r2, #0]
    175a:	7001      	strb	r1, [r0, #0]
    175c:	6822      	ldr	r2, [r4, #0]
    175e:	6893      	ldr	r3, [r2, #8]
    1760:	6819      	ldr	r1, [r3, #0]
    1762:	3101      	adds	r1, #1
    1764:	6019      	str	r1, [r3, #0]
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    1766:	6820      	ldr	r0, [r4, #0]
    1768:	6882      	ldr	r2, [r0, #8]
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    176a:	1c75      	adds	r5, r6, #1
    176c:	7829      	ldrb	r1, [r5, #0]
    176e:	1c0e      	adds	r6, r1, #0
    1770:	3e20      	subs	r6, #32
    1772:	0633      	lsls	r3, r6, #24
    1774:	0e1e      	lsrs	r6, r3, #24
    1776:	2e5f      	cmp	r6, #95	; 0x5f
    1778:	d9d1      	bls.n	171e <dump+0x16a>
    177a:	6893      	ldr	r3, [r2, #8]
    177c:	3b01      	subs	r3, #1
    177e:	6093      	str	r3, [r2, #8]
    1780:	2b00      	cmp	r3, #0
    1782:	db2f      	blt.n	17e4 <dump+0x230>
    1784:	6812      	ldr	r2, [r2, #0]
    1786:	4658      	mov	r0, fp
    1788:	7010      	strb	r0, [r2, #0]
    178a:	e7cf      	b.n	172c <dump+0x178>
    178c:	6893      	ldr	r3, [r2, #8]
    178e:	3b01      	subs	r3, #1
    1790:	6093      	str	r3, [r2, #8]
    1792:	2b00      	cmp	r3, #0
    1794:	db35      	blt.n	1802 <dump+0x24e>
    1796:	6813      	ldr	r3, [r2, #0]
    1798:	4658      	mov	r0, fp
    179a:	7018      	strb	r0, [r3, #0]
    179c:	e7de      	b.n	175c <dump+0x1a8>
    179e:	6996      	ldr	r6, [r2, #24]
    17a0:	42b3      	cmp	r3, r6
    17a2:	db2b      	blt.n	17fc <dump+0x248>
    17a4:	6810      	ldr	r0, [r2, #0]
    17a6:	7001      	strb	r1, [r0, #0]
    17a8:	6820      	ldr	r0, [r4, #0]
    17aa:	6882      	ldr	r2, [r0, #8]
    17ac:	6813      	ldr	r3, [r2, #0]
    17ae:	7819      	ldrb	r1, [r3, #0]
    17b0:	290a      	cmp	r1, #10
    17b2:	d023      	beq.n	17fc <dump+0x248>
    17b4:	3301      	adds	r3, #1
    17b6:	1c6e      	adds	r6, r5, #1
    17b8:	6013      	str	r3, [r2, #0]
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
    17ba:	45b2      	cmp	sl, r6
    17bc:	d1be      	bne.n	173c <dump+0x188>
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
		}
        DBG_print("\n");
    17be:	200a      	movs	r0, #10
    17c0:	f003 fdf8 	bl	53b4 <putchar>
	uint8_t *ad,data[16];
	int	i,j,k;

	(size%16)?(k=size/16+1):(k=size/16);
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
    17c4:	9b00      	ldr	r3, [sp, #0]
    17c6:	9d01      	ldr	r5, [sp, #4]
    17c8:	3301      	adds	r3, #1
    17ca:	9300      	str	r3, [sp, #0]
    17cc:	429d      	cmp	r5, r3
    17ce:	dd00      	ble.n	17d2 <dump+0x21e>
    17d0:	e711      	b.n	15f6 <dump+0x42>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
		}
        DBG_print("\n");
	}
}
    17d2:	b007      	add	sp, #28
    17d4:	bc3c      	pop	{r2, r3, r4, r5}
    17d6:	4690      	mov	r8, r2
    17d8:	4699      	mov	r9, r3
    17da:	46a2      	mov	sl, r4
    17dc:	46ab      	mov	fp, r5
    17de:	bcf0      	pop	{r4, r5, r6, r7}
    17e0:	bc01      	pop	{r0}
    17e2:	4700      	bx	r0
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    17e4:	6991      	ldr	r1, [r2, #24]
    17e6:	428b      	cmp	r3, r1
    17e8:	db30      	blt.n	184c <dump+0x298>
    17ea:	6813      	ldr	r3, [r2, #0]
    17ec:	465e      	mov	r6, fp
    17ee:	701e      	strb	r6, [r3, #0]
    17f0:	6820      	ldr	r0, [r4, #0]
    17f2:	6882      	ldr	r2, [r0, #8]
    17f4:	6813      	ldr	r3, [r2, #0]
    17f6:	7819      	ldrb	r1, [r3, #0]
    17f8:	290a      	cmp	r1, #10
    17fa:	d1db      	bne.n	17b4 <dump+0x200>
    17fc:	f006 fdd0 	bl	83a0 <__swbuf_r>
    1800:	e799      	b.n	1736 <dump+0x182>
    1802:	6991      	ldr	r1, [r2, #24]
    1804:	428b      	cmp	r3, r1
    1806:	db25      	blt.n	1854 <dump+0x2a0>
    1808:	6815      	ldr	r5, [r2, #0]
    180a:	465a      	mov	r2, fp
    180c:	702a      	strb	r2, [r5, #0]
    180e:	6820      	ldr	r0, [r4, #0]
    1810:	6882      	ldr	r2, [r0, #8]
    1812:	6813      	ldr	r3, [r2, #0]
    1814:	7819      	ldrb	r1, [r3, #0]
    1816:	290a      	cmp	r1, #10
    1818:	d00d      	beq.n	1836 <dump+0x282>
    181a:	3301      	adds	r3, #1
    181c:	6013      	str	r3, [r2, #0]
    181e:	e7a2      	b.n	1766 <dump+0x1b2>
    1820:	6995      	ldr	r5, [r2, #24]
    1822:	42ab      	cmp	r3, r5
    1824:	db07      	blt.n	1836 <dump+0x282>
    1826:	6810      	ldr	r0, [r2, #0]
    1828:	7001      	strb	r1, [r0, #0]
    182a:	6820      	ldr	r0, [r4, #0]
    182c:	6882      	ldr	r2, [r0, #8]
    182e:	6813      	ldr	r3, [r2, #0]
    1830:	7819      	ldrb	r1, [r3, #0]
    1832:	290a      	cmp	r1, #10
    1834:	d1f1      	bne.n	181a <dump+0x266>
    1836:	f006 fdb3 	bl	83a0 <__swbuf_r>
    183a:	e794      	b.n	1766 <dump+0x1b2>
    183c:	6893      	ldr	r3, [r2, #8]
    183e:	3b01      	subs	r3, #1
    1840:	6093      	str	r3, [r2, #8]
    1842:	2b00      	cmp	r3, #0
    1844:	db19      	blt.n	187a <dump+0x2c6>
    1846:	6813      	ldr	r3, [r2, #0]
    1848:	7019      	strb	r1, [r3, #0]
    184a:	e75f      	b.n	170c <dump+0x158>
    184c:	212e      	movs	r1, #46	; 0x2e
    184e:	f006 fda7 	bl	83a0 <__swbuf_r>
    1852:	e770      	b.n	1736 <dump+0x182>
    1854:	212e      	movs	r1, #46	; 0x2e
    1856:	f006 fda3 	bl	83a0 <__swbuf_r>
    185a:	e784      	b.n	1766 <dump+0x1b2>
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    185c:	6991      	ldr	r1, [r2, #24]
    185e:	428b      	cmp	r3, r1
    1860:	db28      	blt.n	18b4 <dump+0x300>
    1862:	6816      	ldr	r6, [r2, #0]
    1864:	2520      	movs	r5, #32
    1866:	7035      	strb	r5, [r6, #0]
    1868:	6820      	ldr	r0, [r4, #0]
    186a:	6882      	ldr	r2, [r0, #8]
    186c:	6813      	ldr	r3, [r2, #0]
    186e:	7819      	ldrb	r1, [r3, #0]
    1870:	290a      	cmp	r1, #10
    1872:	d020      	beq.n	18b6 <dump+0x302>
    1874:	3301      	adds	r3, #1
    1876:	6013      	str	r3, [r2, #0]
    1878:	e733      	b.n	16e2 <dump+0x12e>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    187a:	6995      	ldr	r5, [r2, #24]
    187c:	42ab      	cmp	r3, r5
    187e:	db16      	blt.n	18ae <dump+0x2fa>
    1880:	6816      	ldr	r6, [r2, #0]
    1882:	7031      	strb	r1, [r6, #0]
    1884:	6820      	ldr	r0, [r4, #0]
    1886:	6882      	ldr	r2, [r0, #8]
    1888:	6813      	ldr	r3, [r2, #0]
    188a:	7819      	ldrb	r1, [r3, #0]
    188c:	290a      	cmp	r1, #10
    188e:	d00e      	beq.n	18ae <dump+0x2fa>
    1890:	3301      	adds	r3, #1
    1892:	6013      	str	r3, [r2, #0]
    1894:	e73f      	b.n	1716 <dump+0x162>
    1896:	6991      	ldr	r1, [r2, #24]
    1898:	428b      	cmp	r3, r1
    189a:	db11      	blt.n	18c0 <dump+0x30c>
    189c:	6815      	ldr	r5, [r2, #0]
    189e:	465e      	mov	r6, fp
    18a0:	702e      	strb	r6, [r5, #0]
    18a2:	6820      	ldr	r0, [r4, #0]
    18a4:	6882      	ldr	r2, [r0, #8]
    18a6:	6813      	ldr	r3, [r2, #0]
    18a8:	7819      	ldrb	r1, [r3, #0]
    18aa:	290a      	cmp	r1, #10
    18ac:	d1f0      	bne.n	1890 <dump+0x2dc>
    18ae:	f006 fd77 	bl	83a0 <__swbuf_r>
    18b2:	e730      	b.n	1716 <dump+0x162>
	DBG_print("\n");
	for(j=0,ad=(uint8_t*)adr;j<k;j++){
		DBG_print("%08X",(unsigned int)ad);
		for(i=0;i<16;i++,ad++)
			DBG_print(" %02X",data[i]=*ad);
		DBG_putch(' ');
    18b4:	2120      	movs	r1, #32
    18b6:	f006 fd73 	bl	83a0 <__swbuf_r>
    18ba:	6820      	ldr	r0, [r4, #0]
    18bc:	6882      	ldr	r2, [r0, #8]
    18be:	e710      	b.n	16e2 <dump+0x12e>
		for(i=0;i<16;i++){
			(data[i]>=0x20 && data[i]<0x80)?DBG_putch(data[i]):DBG_putch('.');
    18c0:	212e      	movs	r1, #46	; 0x2e
    18c2:	f006 fd6d 	bl	83a0 <__swbuf_r>
    18c6:	e726      	b.n	1716 <dump+0x162>
    18c8:	0000e81c 	.word	0x0000e81c
    18cc:	40000000 	.word	0x40000000
    18d0:	0000e814 	.word	0x0000e814

000018d4 <TargetInit>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void TargetInit(void)
{
    18d4:	b508      	push	{r3, lr}
    /* Add your codes here */
    i2enable();
    18d6:	f00c f9e3 	bl	dca0 <__i2enable_from_thumb>
    PCONP |= 0x00001000;
    18da:	4b04      	ldr	r3, [pc, #16]	; (18ec <TargetInit+0x18>)
    18dc:	2080      	movs	r0, #128	; 0x80
    18de:	6819      	ldr	r1, [r3, #0]
    18e0:	0142      	lsls	r2, r0, #5
    18e2:	430a      	orrs	r2, r1
    18e4:	601a      	str	r2, [r3, #0]
    return;
}
    18e6:	bc08      	pop	{r3}
    18e8:	bc01      	pop	{r0}
    18ea:	4700      	bx	r0
    18ec:	e01fc0c4 	.word	0xe01fc0c4

000018f0 <GPIOResetInit>:
** 
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    18f0:	4b1c      	ldr	r3, [pc, #112]	; (1964 <GPIOResetInit+0x74>)
    18f2:	4a1d      	ldr	r2, [pc, #116]	; (1968 <GPIOResetInit+0x78>)
    PINSEL1 = 0x00154000;
    18f4:	21aa      	movs	r1, #170	; 0xaa
** 
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    18f6:	601a      	str	r2, [r3, #0]
    PINSEL1 = 0x00154000;
    18f8:	0348      	lsls	r0, r1, #13
    PINSEL2 = 0x00000000;
    PINSEL3 = 0xF0000000;
    18fa:	22f0      	movs	r2, #240	; 0xf0
******************************************************************************/
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    18fc:	6058      	str	r0, [r3, #4]
    PINSEL2 = 0x00000000;
    PINSEL3 = 0xF0000000;
    18fe:	0611      	lsls	r1, r2, #24
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    PINSEL2 = 0x00000000;
    1900:	481a      	ldr	r0, [pc, #104]	; (196c <GPIOResetInit+0x7c>)
    PINSEL7 = 0x00000000;
    PINSEL8 = 0x00000000;
    PINSEL9 = 0x00000000;
   PINSEL10 = 0x00000000;
    
     IODIR0 = 0x00000000;
    1902:	4a1b      	ldr	r2, [pc, #108]	; (1970 <GPIOResetInit+0x80>)
void GPIOResetInit( void )
{
	/* Reset all GPIO pins to default: primary function */
    PINSEL0 = 0x0FA00050;
    PINSEL1 = 0x00154000;
    PINSEL2 = 0x00000000;
    1904:	2300      	movs	r3, #0
    1906:	6003      	str	r3, [r0, #0]
    PINSEL3 = 0xF0000000;
    1908:	6041      	str	r1, [r0, #4]
    PINSEL4 = 0x00000000;
    190a:	6083      	str	r3, [r0, #8]
    PINSEL5 = 0x00000000;
    190c:	60c3      	str	r3, [r0, #12]
    PINSEL6 = 0x00000000;
    190e:	6103      	str	r3, [r0, #16]
    PINSEL7 = 0x00000000;
    1910:	6143      	str	r3, [r0, #20]
    PINSEL8 = 0x00000000;
    1912:	6183      	str	r3, [r0, #24]
    PINSEL9 = 0x00000000;
    1914:	61c3      	str	r3, [r0, #28]
   PINSEL10 = 0x00000000;
    1916:	6203      	str	r3, [r0, #32]
    
     IODIR0 = 0x00000000;
    1918:	6013      	str	r3, [r2, #0]
     IODIR1 = 0x00000000;
    191a:	6113      	str	r3, [r2, #16]
     IOSET0 = 0x00000000;
    191c:	3a04      	subs	r2, #4
    191e:	6013      	str	r3, [r2, #0]
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    FIO1DIR = 0x00000000;
    FIO2DIR = 0x00000201;
    1920:	4814      	ldr	r0, [pc, #80]	; (1974 <GPIOResetInit+0x84>)
   PINSEL10 = 0x00000000;
    
     IODIR0 = 0x00000000;
     IODIR1 = 0x00000000;
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    1922:	6113      	str	r3, [r2, #16]
    
    FIO0DIR = 0x00000000;
    1924:	4a14      	ldr	r2, [pc, #80]	; (1978 <GPIOResetInit+0x88>)
    FIO1DIR = 0x00000000;
    FIO2DIR = 0x00000201;
    FIO3DIR = 0x00000000;
    FIO4DIR = 0x0000FFFF;
    1926:	4915      	ldr	r1, [pc, #84]	; (197c <GPIOResetInit+0x8c>)
     IODIR0 = 0x00000000;
     IODIR1 = 0x00000000;
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    1928:	6013      	str	r3, [r2, #0]
    FIO1DIR = 0x00000000;
    192a:	6213      	str	r3, [r2, #32]
    FIO2DIR = 0x00000201;
    192c:	6410      	str	r0, [r2, #64]	; 0x40
    FIO3DIR = 0x00000000;
    192e:	6613      	str	r3, [r2, #96]	; 0x60
     IODIR1 = 0x00000000;
     IOSET0 = 0x00000000;
     IOSET1 = 0x00000000;
    
    FIO0DIR = 0x00000000;
    FIO1DIR = 0x00000000;
    1930:	3220      	adds	r2, #32
    FIO2DIR = 0x00000201;
    FIO3DIR = 0x00000000;
    FIO4DIR = 0x0000FFFF;
    1932:	6611      	str	r1, [r2, #96]	; 0x60
    
	FIO0MASK = 0x00000000;
    1934:	3a10      	subs	r2, #16
    1936:	6013      	str	r3, [r2, #0]
	FIO0PIN = 0x00000000;
    1938:	6053      	str	r3, [r2, #4]
	FIO0SET = 0x00000000;
    193a:	6093      	str	r3, [r2, #8]
	FIO0CLR = 0x00000000;
    193c:	60d3      	str	r3, [r2, #12]
	
	FIO1MASK = 0x00000000;
    193e:	3220      	adds	r2, #32
    1940:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0x00000000;
    1942:	6053      	str	r3, [r2, #4]
	FIO1SET = 0x00000000;
    1944:	6093      	str	r3, [r2, #8]
	FIO1CLR = 0x00000000;
    1946:	60d3      	str	r3, [r2, #12]
	
	FIO2MASK = 0x00000000;
    1948:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0x00000000;
    194a:	6253      	str	r3, [r2, #36]	; 0x24
	FIO2SET = 0x00000000;
    194c:	6293      	str	r3, [r2, #40]	; 0x28
	FIO2CLR = 0x00000000;
    194e:	62d3      	str	r3, [r2, #44]	; 0x2c

	FIO3MASK = 0x00000000;
    1950:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0x00000000;
    1952:	6453      	str	r3, [r2, #68]	; 0x44
	FIO3SET = 0x00000000;
    1954:	6493      	str	r3, [r2, #72]	; 0x48
	FIO3CLR = 0x00000000;
    1956:	64d3      	str	r3, [r2, #76]	; 0x4c
	
	FIO4MASK = 0x00000000;
    1958:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0x00000000;
    195a:	6653      	str	r3, [r2, #100]	; 0x64
	FIO4SET = 0x00000000;
    195c:	6693      	str	r3, [r2, #104]	; 0x68
	FIO4CLR = 0x00000000;
    195e:	66d3      	str	r3, [r2, #108]	; 0x6c
	
    return;        
}
    1960:	4770      	bx	lr
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	e002c000 	.word	0xe002c000
    1968:	0fa00050 	.word	0x0fa00050
    196c:	e002c008 	.word	0xe002c008
    1970:	e0028008 	.word	0xe0028008
    1974:	00000201 	.word	0x00000201
    1978:	3fffc000 	.word	0x3fffc000
    197c:	0000ffff 	.word	0x0000ffff

00001980 <ConfigurePLL>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void ConfigurePLL ( void )
{
    1980:	b510      	push	{r4, lr}
	DWORD MValue, NValue;

	if ( PLLSTAT & (1 << 25) )
    1982:	4829      	ldr	r0, [pc, #164]	; (1a28 <ConfigurePLL+0xa8>)
    1984:	6803      	ldr	r3, [r0, #0]
    1986:	019a      	lsls	r2, r3, #6
    1988:	d506      	bpl.n	1998 <ConfigurePLL+0x18>
    {
		PLLCON = 1;			/* Enable PLL, disconnected */
    198a:	4928      	ldr	r1, [pc, #160]	; (1a2c <ConfigurePLL+0xac>)
    198c:	2201      	movs	r2, #1
    198e:	600a      	str	r2, [r1, #0]
	 	PLLFEED = 0xaa;
    1990:	32a9      	adds	r2, #169	; 0xa9
    1992:	60ca      	str	r2, [r1, #12]
		PLLFEED = 0x55;
    1994:	3a55      	subs	r2, #85	; 0x55
    1996:	60ca      	str	r2, [r1, #12]
    }

    PLLCON = 0;				/* Disable PLL, disconnected */
    1998:	4b24      	ldr	r3, [pc, #144]	; (1a2c <ConfigurePLL+0xac>)
    199a:	2200      	movs	r2, #0
    199c:	601a      	str	r2, [r3, #0]
    PLLFEED = 0xaa;
    199e:	32aa      	adds	r2, #170	; 0xaa
    19a0:	60da      	str	r2, [r3, #12]
    PLLFEED = 0x55;
    19a2:	3a55      	subs	r2, #85	; 0x55
    19a4:	60da      	str	r2, [r3, #12]
    
	SCS |= 0x20;			/* Enable main OSC */
    19a6:	4922      	ldr	r1, [pc, #136]	; (1a30 <ConfigurePLL+0xb0>)
    19a8:	680c      	ldr	r4, [r1, #0]
    19aa:	3a35      	subs	r2, #53	; 0x35
    19ac:	4314      	orrs	r4, r2
    19ae:	600c      	str	r4, [r1, #0]
    while( !(SCS & 0x40) );	/* Wait until main OSC is usable */
    19b0:	3220      	adds	r2, #32
    19b2:	6808      	ldr	r0, [r1, #0]
    19b4:	4210      	tst	r0, r2
    19b6:	d0fc      	beq.n	19b2 <ConfigurePLL+0x32>

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
    19b8:	4b1e      	ldr	r3, [pc, #120]	; (1a34 <ConfigurePLL+0xb4>)
    19ba:	2001      	movs	r0, #1
    19bc:	6018      	str	r0, [r3, #0]
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
    19be:	220b      	movs	r2, #11
    19c0:	3b88      	subs	r3, #136	; 0x88
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	PLLCON = 1;				/* Enable PLL */
    19c2:	4c1a      	ldr	r4, [pc, #104]	; (1a2c <ConfigurePLL+0xac>)
    while( !(SCS & 0x40) );	/* Wait until main OSC is usable */

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
    19c4:	601a      	str	r2, [r3, #0]
	PLLFEED = 0xAA;
    19c6:	21aa      	movs	r1, #170	; 0xaa
	PLLFEED = 0x55;
    19c8:	324a      	adds	r2, #74	; 0x4a

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
	PLLFEED = 0xAA;
    19ca:	6099      	str	r1, [r3, #8]
	PLLFEED = 0x55;
    19cc:	609a      	str	r2, [r3, #8]
	PLLCON = 1;				/* Enable PLL */
    19ce:	6020      	str	r0, [r4, #0]
	PLLFEED = 0xAA;
    19d0:	6099      	str	r1, [r3, #8]
	PLLFEED = 0x55;
    19d2:	609a      	str	r2, [r3, #8]

    CLKSRCSEL = 0x1;		/* select main OSC, 12MHz, as the PLL clock source */
	
		  
	PLLCFG = (PLL_NValue << 16) | PLL_MValue ;
	PLLFEED = 0xAA;
    19d4:	3308      	adds	r3, #8
	PLLCON = 1;				/* Enable PLL */
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	

    CCLKCFG = CCLKDivValue;	        /* Fcore = 72 MHz */
    19d6:	3a52      	subs	r2, #82	; 0x52
    19d8:	679a      	str	r2, [r3, #120]	; 0x78
#if USE_USB
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
    19da:	3202      	adds	r2, #2
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    19dc:	392a      	subs	r1, #42	; 0x2a
	PLLFEED = 0x55;
	

    CCLKCFG = CCLKDivValue;	        /* Fcore = 72 MHz */
#if USE_USB
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
    19de:	67da      	str	r2, [r3, #124]	; 0x7c
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    19e0:	4811      	ldr	r0, [pc, #68]	; (1a28 <ConfigurePLL+0xa8>)
    19e2:	04c9      	lsls	r1, r1, #19
    19e4:	6803      	ldr	r3, [r0, #0]
    19e6:	4a10      	ldr	r2, [pc, #64]	; (1a28 <ConfigurePLL+0xa8>)
    19e8:	420b      	tst	r3, r1
    19ea:	d0fb      	beq.n	19e4 <ConfigurePLL+0x64>
    
    MValue = PLLSTAT & 0x00007FFF;
    19ec:	6813      	ldr	r3, [r2, #0]
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
    19ee:	6814      	ldr	r4, [r2, #0]
    USBCLKCFG = USBCLKDivValue;		/* usbclk = 48 MHz */
#endif

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    
    MValue = PLLSTAT & 0x00007FFF;
    19f0:	045a      	lsls	r2, r3, #17
    19f2:	0c52      	lsrs	r2, r2, #17
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
    19f4:	3a0b      	subs	r2, #11
    19f6:	0220      	lsls	r0, r4, #8
    19f8:	1e51      	subs	r1, r2, #1
    19fa:	418a      	sbcs	r2, r1
    19fc:	0e01      	lsrs	r1, r0, #24
    while ((MValue != PLL_MValue) && ( NValue != PLL_NValue) );
    19fe:	2900      	cmp	r1, #0
    1a00:	d10f      	bne.n	1a22 <ConfigurePLL+0xa2>

    PLLCON = 3;				/* enable and connect */
    1a02:	490a      	ldr	r1, [pc, #40]	; (1a2c <ConfigurePLL+0xac>)
    1a04:	2003      	movs	r0, #3
    1a06:	6008      	str	r0, [r1, #0]
    PLLFEED = 0xaa;
    1a08:	30a7      	adds	r0, #167	; 0xa7
    1a0a:	60c8      	str	r0, [r1, #12]
    PLLFEED = 0x55;
    1a0c:	3855      	subs	r0, #85	; 0x55
    1a0e:	60c8      	str	r0, [r1, #12]
	while ( ((PLLSTAT & (1 << 25)) == 0) );	/* Check connect bit status */
    1a10:	302b      	adds	r0, #43	; 0x2b
    1a12:	4905      	ldr	r1, [pc, #20]	; (1a28 <ConfigurePLL+0xa8>)
    1a14:	0482      	lsls	r2, r0, #18
    1a16:	680c      	ldr	r4, [r1, #0]
    1a18:	4214      	tst	r4, r2
    1a1a:	d0fc      	beq.n	1a16 <ConfigurePLL+0x96>


	return;
}
    1a1c:	bc10      	pop	{r4}
    1a1e:	bc01      	pop	{r0}
    1a20:	4700      	bx	r0

    while ( ((PLLSTAT & (1 << 26)) == 0) );	/* Check lock bit status */
    
    MValue = PLLSTAT & 0x00007FFF;
    NValue = (PLLSTAT & 0x00FF0000) >> 16;
    while ((MValue != PLL_MValue) && ( NValue != PLL_NValue) );
    1a22:	2a00      	cmp	r2, #0
    1a24:	d0ed      	beq.n	1a02 <ConfigurePLL+0x82>
    1a26:	e7fe      	b.n	1a26 <ConfigurePLL+0xa6>
    1a28:	e01fc088 	.word	0xe01fc088
    1a2c:	e01fc080 	.word	0xe01fc080
    1a30:	e01fc1a0 	.word	0xe01fc1a0
    1a34:	e01fc10c 	.word	0xe01fc10c

00001a38 <TargetResetInit>:
** parameters:			None
** Returned value:		None
** 
******************************************************************************/
void TargetResetInit(void)
{
    1a38:	b508      	push	{r3, lr}
#endif

#ifdef __DEBUG_RAM    
    MEMMAP = 0x2;			/* remap to internal RAM */
#else
    MEMMAP = 0x1;			/* remap to internal flash */
    1a3a:	4b0f      	ldr	r3, [pc, #60]	; (1a78 <TargetResetInit+0x40>)
    1a3c:	2201      	movs	r2, #1
    1a3e:	601a      	str	r2, [r3, #0]
#endif 


#if USE_USB
	PCONP |= 0x80000000;		/* Turn On USB PCLK */
    1a40:	3384      	adds	r3, #132	; 0x84
    1a42:	6819      	ldr	r1, [r3, #0]
    1a44:	327f      	adds	r2, #127	; 0x7f
    1a46:	0610      	lsls	r0, r2, #24
    1a48:	4308      	orrs	r0, r1
    1a4a:	6018      	str	r0, [r3, #0]
#endif
	/* Configure PLL, switch from IRC to Main OSC */
	ConfigurePLL();
    1a4c:	f7ff ff98 	bl	1980 <ConfigurePLL>
#if (Fpclk / (Fcclk / 4)) == 1
    PCLKSEL0 = 0x00000000;	/* PCLK is 1/4 CCLK */
    PCLKSEL1 = 0x00000000;
#endif
#if (Fpclk / (Fcclk / 4)) == 2
    PCLKSEL0 = 0xAAAAAAAA;	/* PCLK is 1/2 CCLK */
    1a50:	4b0a      	ldr	r3, [pc, #40]	; (1a7c <TargetResetInit+0x44>)
    1a52:	490b      	ldr	r1, [pc, #44]	; (1a80 <TargetResetInit+0x48>)
    1a54:	600b      	str	r3, [r1, #0]
    PCLKSEL1 = 0xAAAAAAAA;	 
    1a56:	604b      	str	r3, [r1, #4]
    PCLKSEL0 = 0x55555555;	/* PCLK is the same as CCLK */
    PCLKSEL1 = 0x55555555;	
#endif

    /* Set memory accelerater module*/
    MAMCR = 0;
    1a58:	4b0a      	ldr	r3, [pc, #40]	; (1a84 <TargetResetInit+0x4c>)
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
    1a5a:	480b      	ldr	r0, [pc, #44]	; (1a88 <TargetResetInit+0x50>)
    PCLKSEL0 = 0x55555555;	/* PCLK is the same as CCLK */
    PCLKSEL1 = 0x55555555;	
#endif

    /* Set memory accelerater module*/
    MAMCR = 0;
    1a5c:	2200      	movs	r2, #0
    1a5e:	601a      	str	r2, [r3, #0]
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
    1a60:	2103      	movs	r1, #3
#endif
#endif
    MAMCR = 2;
    1a62:	2202      	movs	r2, #2
    MAMTIM = 1;
#else
#if Fcclk < 40000000
    MAMTIM = 2;
#else
    MAMTIM = 3;
    1a64:	6001      	str	r1, [r0, #0]
#endif
#endif
    MAMCR = 2;
    1a66:	601a      	str	r2, [r3, #0]
	
	init_VIC();
    1a68:	f7ff fb6c 	bl	1144 <init_VIC>
	
	TargetInit();
    1a6c:	f7ff ff32 	bl	18d4 <TargetInit>
	
    return;
}
    1a70:	bc08      	pop	{r3}
    1a72:	bc01      	pop	{r0}
    1a74:	4700      	bx	r0
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	e01fc040 	.word	0xe01fc040
    1a7c:	aaaaaaaa 	.word	0xaaaaaaaa
    1a80:	e01fc1a8 	.word	0xe01fc1a8
    1a84:	e01fc000 	.word	0xe01fc000
    1a88:	e01fc004 	.word	0xe01fc004

00001a8c <_read_r>:
	#define TRUE  1
#endif

/* new code for _read_r provided by Alexey Shusharin - Thanks */
_ssize_t _read_r(struct _reent *r, int file, void *ptr, size_t len)
{
    1a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a8e:	4647      	mov	r7, r8
    1a90:	b480      	push	{r7}
    1a92:	1c1f      	adds	r7, r3, #0
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
    1a94:	1e1c      	subs	r4, r3, #0
    1a96:	d011      	beq.n	1abc <_read_r+0x30>
    1a98:	2600      	movs	r6, #0
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1a9a:	3b02      	subs	r3, #2
{
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
    1a9c:	1c15      	adds	r5, r2, #0
  for (i = 0; i < len; i++)
    1a9e:	1c34      	adds	r4, r6, #0
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1aa0:	4698      	mov	r8, r3
  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
  {
	/* 20090521Nemui */
	do{		
		c = getch();
    1aa2:	2000      	movs	r0, #0
    1aa4:	f7ff fcfe 	bl	14a4 <UARTGetch>
	}while(c == FALSE);
    1aa8:	2800      	cmp	r0, #0
    1aaa:	d0fa      	beq.n	1aa2 <_read_r+0x16>
	/* 20090521Nemui */
	
    *p++ = c;
    1aac:	7028      	strb	r0, [r5, #0]
    1aae:	3501      	adds	r5, #1
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1ab0:	280d      	cmp	r0, #13
    1ab2:	d009      	beq.n	1ac8 <_read_r+0x3c>
  char c;
  int  i;
  unsigned char *p;

  p = (unsigned char*)ptr;
  for (i = 0; i < len; i++)
    1ab4:	3401      	adds	r4, #1
    1ab6:	1c26      	adds	r6, r4, #0
    1ab8:	42a7      	cmp	r7, r4
    1aba:	d8f2      	bhi.n	1aa2 <_read_r+0x16>
	  #endif
      return i + 2;
    }
  }
  return i;
}
    1abc:	1c20      	adds	r0, r4, #0
    1abe:	bc04      	pop	{r2}
    1ac0:	4690      	mov	r8, r2
    1ac2:	bcf0      	pop	{r4, r5, r6, r7}
    1ac4:	bc02      	pop	{r1}
    1ac6:	4708      	bx	r1
    *p++ = c;
	#ifdef ECHOBACK 
		putch(c);
	#endif
	
    if (c == '\r' && i <= (len - 2)) /* 0x0D */
    1ac8:	45b0      	cmp	r8, r6
    1aca:	d3f3      	bcc.n	1ab4 <_read_r+0x28>
    {
      *p = '\n';					 /* 0x0A */
    1acc:	200a      	movs	r0, #10
    1ace:	7028      	strb	r0, [r5, #0]
	  #ifdef ECHOBACK 
		putch('\n');				 /* 0x0A */
	  #endif
      return i + 2;
    1ad0:	3402      	adds	r4, #2
    1ad2:	e7f3      	b.n	1abc <_read_r+0x30>

00001ad4 <_write_r>:
_ssize_t _write_r (
    struct _reent *r, 
    int file, 
    const void *ptr, 
    size_t len)
{
    1ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ad6:	1c15      	adds	r5, r2, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1ad8:	1e1e      	subs	r6, r3, #0
    1ada:	d02b      	beq.n	1b34 <_write_r+0x60>
		if (*p == '\n' ) putch('\r');
    1adc:	7811      	ldrb	r1, [r2, #0]
    1ade:	1e77      	subs	r7, r6, #1
    1ae0:	2301      	movs	r3, #1
    1ae2:	401f      	ands	r7, r3
    1ae4:	290a      	cmp	r1, #10
    1ae6:	d02f      	beq.n	1b48 <_write_r+0x74>
		putch(*p++);
    1ae8:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1aea:	2401      	movs	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1aec:	f7ff fcbe 	bl	146c <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1af0:	42b4      	cmp	r4, r6
    1af2:	d21f      	bcs.n	1b34 <_write_r+0x60>
    1af4:	2f00      	cmp	r7, #0
    1af6:	d008      	beq.n	1b0a <_write_r+0x36>
		if (*p == '\n' ) putch('\r');
    1af8:	5d29      	ldrb	r1, [r5, r4]
    1afa:	290a      	cmp	r1, #10
    1afc:	d02a      	beq.n	1b54 <_write_r+0x80>
		putch(*p++);
    1afe:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b00:	3401      	adds	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1b02:	f7ff fcb3 	bl	146c <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b06:	42b4      	cmp	r4, r6
    1b08:	d214      	bcs.n	1b34 <_write_r+0x60>
		if (*p == '\n' ) putch('\r');
    1b0a:	5d29      	ldrb	r1, [r5, r4]
    1b0c:	290a      	cmp	r1, #10
    1b0e:	d015      	beq.n	1b3c <_write_r+0x68>
		putch(*p++);
    1b10:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b12:	3401      	adds	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1b14:	f7ff fcaa 	bl	146c <UARTPutch>
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
		if (*p == '\n' ) putch('\r');
    1b18:	5d29      	ldrb	r1, [r5, r4]
    1b1a:	290a      	cmp	r1, #10
    1b1c:	d1ef      	bne.n	1afe <_write_r+0x2a>
    1b1e:	2000      	movs	r0, #0
    1b20:	210d      	movs	r1, #13
    1b22:	f7ff fca3 	bl	146c <UARTPutch>
    1b26:	5d29      	ldrb	r1, [r5, r4]
		putch(*p++);
    1b28:	2000      	movs	r0, #0
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b2a:	3401      	adds	r4, #1
		if (*p == '\n' ) putch('\r');
		putch(*p++);
    1b2c:	f7ff fc9e 	bl	146c <UARTPutch>
	int i;
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
    1b30:	42b4      	cmp	r4, r6
    1b32:	d3ea      	bcc.n	1b0a <_write_r+0x36>
		if (*p == '\n' ) putch('\r');
		putch(*p++);
	}
	
	return len;
}
    1b34:	1c30      	adds	r0, r6, #0
    1b36:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1b38:	bc02      	pop	{r1}
    1b3a:	4708      	bx	r1
	const unsigned char *p;
	
	p = (const unsigned char*) ptr;
	
	for (i = 0; i < len; i++) {
		if (*p == '\n' ) putch('\r');
    1b3c:	3103      	adds	r1, #3
    1b3e:	2000      	movs	r0, #0
    1b40:	f7ff fc94 	bl	146c <UARTPutch>
    1b44:	5d29      	ldrb	r1, [r5, r4]
    1b46:	e7e3      	b.n	1b10 <_write_r+0x3c>
    1b48:	210d      	movs	r1, #13
    1b4a:	2000      	movs	r0, #0
    1b4c:	f7ff fc8e 	bl	146c <UARTPutch>
    1b50:	7829      	ldrb	r1, [r5, #0]
    1b52:	e7c9      	b.n	1ae8 <_write_r+0x14>
    1b54:	3103      	adds	r1, #3
    1b56:	2000      	movs	r0, #0
    1b58:	f7ff fc88 	bl	146c <UARTPutch>
    1b5c:	5d29      	ldrb	r1, [r5, r4]
    1b5e:	e7ce      	b.n	1afe <_write_r+0x2a>

00001b60 <_close_r>:
int _close_r(
    struct _reent *r, 
    int file)
{
	return 0;
}
    1b60:	2000      	movs	r0, #0
    1b62:	4770      	bx	lr

00001b64 <_lseek_r>:
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
}
    1b64:	2000      	movs	r0, #0
    1b66:	4770      	bx	lr

00001b68 <_fstat_r>:
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
    1b68:	2080      	movs	r0, #128	; 0x80
    1b6a:	0183      	lsls	r3, r0, #6
    1b6c:	6053      	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
}
    1b6e:	2000      	movs	r0, #0
    1b70:	4770      	bx	lr
    1b72:	46c0      	nop			; (mov r8, r8)

00001b74 <isatty>:
int isatty(int file); /* avoid warning */
#endif
int isatty(int file)
{
	return 1;
}
    1b74:	2001      	movs	r0, #1
    1b76:	4770      	bx	lr

00001b78 <_exit>:


void _exit(int n) {
    1b78:	b500      	push	{lr}
    1b7a:	e7fe      	b.n	1b7a <_exit+0x2>

00001b7c <_getpid>:
}

int _getpid(int file)
{
	return 1;
}
    1b7c:	2001      	movs	r0, #1
    1b7e:	4770      	bx	lr

00001b80 <_kill>:

int _kill(int file)
{
	return 1;
}
    1b80:	2001      	movs	r0, #1
    1b82:	4770      	bx	lr

00001b84 <_sbrk_r>:
/* messages must be suppressed.											*/

void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
    1b84:	b500      	push	{lr}
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
    1b86:	4b05      	ldr	r3, [pc, #20]	; (1b9c <_sbrk_r+0x18>)
    1b88:	6818      	ldr	r0, [r3, #0]
    1b8a:	2800      	cmp	r0, #0
    1b8c:	d003      	beq.n	1b96 <_sbrk_r+0x12>
		heap_ptr = end;
	}
	base = heap_ptr;	/*  Point to end of heap.					*/
	heap_ptr += nbytes;	/*  Increase heap.							*/
    1b8e:	1841      	adds	r1, r0, r1
    1b90:	6019      	str	r1, [r3, #0]
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
    1b92:	bc02      	pop	{r1}
    1b94:	4708      	bx	r1
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
    1b96:	4802      	ldr	r0, [pc, #8]	; (1ba0 <_sbrk_r+0x1c>)
    1b98:	e7f9      	b.n	1b8e <_sbrk_r+0xa>
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	400009b4 	.word	0x400009b4
    1ba0:	40000b90 	.word	0x40000b90

00001ba4 <_sbrk>:
}



void * _sbrk(ptrdiff_t incr)
{
    1ba4:	b500      	push	{lr}
  char  *base;

/* Initialize if first time through. */

  if (!heap_ptr) heap_ptr = end;
    1ba6:	4a05      	ldr	r2, [pc, #20]	; (1bbc <_sbrk+0x18>)
    1ba8:	6813      	ldr	r3, [r2, #0]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d004      	beq.n	1bb8 <_sbrk+0x14>

  base = heap_ptr;      /*  Point to end of heap.                       */
  heap_ptr += incr;     /*  Increase heap.                              */
    1bae:	1818      	adds	r0, r3, r0
    1bb0:	6010      	str	r0, [r2, #0]

  return base;          /*  Return pointer to start of new heap area.   */
}
    1bb2:	1c18      	adds	r0, r3, #0
    1bb4:	bc02      	pop	{r1}
    1bb6:	4708      	bx	r1
{
  char  *base;

/* Initialize if first time through. */

  if (!heap_ptr) heap_ptr = end;
    1bb8:	4b01      	ldr	r3, [pc, #4]	; (1bc0 <_sbrk+0x1c>)
    1bba:	e7f8      	b.n	1bae <_sbrk+0xa>
    1bbc:	400009b4 	.word	0x400009b4
    1bc0:	40000b90 	.word	0x40000b90

00001bc4 <_open>:

  return base;          /*  Return pointer to start of new heap area.   */
}

int _open(const char *path, int flags, ...)
{
    1bc4:	b40e      	push	{r1, r2, r3}
  return 1;
}
    1bc6:	2001      	movs	r0, #1
    1bc8:	b003      	add	sp, #12
    1bca:	4770      	bx	lr

00001bcc <_close>:

int _close(int fd)
{
  return 0;
}
    1bcc:	2000      	movs	r0, #0
    1bce:	4770      	bx	lr

00001bd0 <_fstat>:

int _fstat(int fd, struct stat *st)
{
  st->st_mode = S_IFCHR;
    1bd0:	2080      	movs	r0, #128	; 0x80
    1bd2:	0183      	lsls	r3, r0, #6
    1bd4:	604b      	str	r3, [r1, #4]
  return 0;
}
    1bd6:	2000      	movs	r0, #0
    1bd8:	4770      	bx	lr
    1bda:	46c0      	nop			; (mov r8, r8)

00001bdc <_isatty>:

int _isatty(int fd)
{
  return 1;
}
    1bdc:	2001      	movs	r0, #1
    1bde:	4770      	bx	lr

00001be0 <_lseek>:


int _lseek(int fd, off_t pos, int whence)
{
  return 0;
}
    1be0:	2000      	movs	r0, #0
    1be2:	4770      	bx	lr

00001be4 <_read>:

int _read(int fd, char *buf, size_t cnt)
{
    1be4:	b510      	push	{r4, lr}
  *buf = getch();
    1be6:	2000      	movs	r0, #0
{
  return 0;
}

int _read(int fd, char *buf, size_t cnt)
{
    1be8:	1c0c      	adds	r4, r1, #0
  *buf = getch();
    1bea:	f7ff fc5b 	bl	14a4 <UARTGetch>
    1bee:	7020      	strb	r0, [r4, #0]

  return 1;
}
    1bf0:	2001      	movs	r0, #1
    1bf2:	bc10      	pop	{r4}
    1bf4:	bc02      	pop	{r1}
    1bf6:	4708      	bx	r1

00001bf8 <_write>:

int _write(int fd, const char *buf, size_t cnt)
{
    1bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bfa:	1c0d      	adds	r5, r1, #0
  int i;

  for (i = 0; i < cnt; i++)
    1bfc:	1e16      	subs	r6, r2, #0
    1bfe:	d020      	beq.n	1c42 <_write+0x4a>
    1c00:	2401      	movs	r4, #1
    putch(buf[i]);
    1c02:	7809      	ldrb	r1, [r1, #0]
    1c04:	2000      	movs	r0, #0
    1c06:	1e77      	subs	r7, r6, #1
    1c08:	f7ff fc30 	bl	146c <UARTPutch>

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c0c:	1c23      	adds	r3, r4, #0
    1c0e:	4027      	ands	r7, r4
    1c10:	429e      	cmp	r6, r3
    1c12:	d916      	bls.n	1c42 <_write+0x4a>
    1c14:	2f00      	cmp	r7, #0
    1c16:	d007      	beq.n	1c28 <_write+0x30>
    putch(buf[i]);
    1c18:	7869      	ldrb	r1, [r5, #1]
    1c1a:	2000      	movs	r0, #0

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c1c:	2402      	movs	r4, #2
    putch(buf[i]);
    1c1e:	f7ff fc25 	bl	146c <UARTPutch>

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c22:	1c23      	adds	r3, r4, #0
    1c24:	42a6      	cmp	r6, r4
    1c26:	d90c      	bls.n	1c42 <_write+0x4a>
    putch(buf[i]);
    1c28:	5ce9      	ldrb	r1, [r5, r3]
    1c2a:	2000      	movs	r0, #0

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c2c:	3401      	adds	r4, #1
    putch(buf[i]);
    1c2e:	f7ff fc1d 	bl	146c <UARTPutch>
    1c32:	5d29      	ldrb	r1, [r5, r4]
    1c34:	2000      	movs	r0, #0

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c36:	3401      	adds	r4, #1
    putch(buf[i]);
    1c38:	f7ff fc18 	bl	146c <UARTPutch>

int _write(int fd, const char *buf, size_t cnt)
{
  int i;

  for (i = 0; i < cnt; i++)
    1c3c:	1c23      	adds	r3, r4, #0
    1c3e:	42a6      	cmp	r6, r4
    1c40:	d8f2      	bhi.n	1c28 <_write+0x30>
    putch(buf[i]);

  return cnt;
}
    1c42:	1c30      	adds	r0, r6, #0
    1c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c46:	bc02      	pop	{r1}
    1c48:	4708      	bx	r1
    1c4a:	46c0      	nop			; (mov r8, r8)

00001c4c <vBlockingQueueProducer>:
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
    1c4c:	b570      	push	{r4, r5, r6, lr}
    1c4e:	b082      	sub	sp, #8
unsigned short usValue = 0;
    1c50:	466d      	mov	r5, sp
    1c52:	3506      	adds	r5, #6
    1c54:	2600      	movs	r6, #0
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
    1c56:	1c04      	adds	r4, r0, #0
unsigned short usValue = 0;
    1c58:	802e      	strh	r6, [r5, #0]
    1c5a:	e000      	b.n	1c5e <vBlockingQueueProducer+0x12>

	for( ;; )
	{		
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
		{
			sErrorEverOccurred = pdTRUE;
    1c5c:	2601      	movs	r6, #1

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;

	for( ;; )
	{		
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
    1c5e:	6820      	ldr	r0, [r4, #0]
    1c60:	6862      	ldr	r2, [r4, #4]
    1c62:	1c29      	adds	r1, r5, #0
    1c64:	2300      	movs	r3, #0
    1c66:	f001 f9d5 	bl	3014 <xQueueGenericSend>
    1c6a:	2801      	cmp	r0, #1
    1c6c:	d1f6      	bne.n	1c5c <vBlockingQueueProducer+0x10>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
    1c6e:	2e00      	cmp	r6, #0
    1c70:	d105      	bne.n	1c7e <vBlockingQueueProducer+0x32>
			{
				( *pxQueueParameters->psCheckVariable )++;
    1c72:	68a3      	ldr	r3, [r4, #8]
    1c74:	8819      	ldrh	r1, [r3, #0]
    1c76:	3101      	adds	r1, #1
    1c78:	0408      	lsls	r0, r1, #16
    1c7a:	0c02      	lsrs	r2, r0, #16
    1c7c:	801a      	strh	r2, [r3, #0]
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
    1c7e:	882a      	ldrh	r2, [r5, #0]
    1c80:	3201      	adds	r2, #1
    1c82:	802a      	strh	r2, [r5, #0]
    1c84:	e7eb      	b.n	1c5e <vBlockingQueueProducer+0x12>
    1c86:	46c0      	nop			; (mov r8, r8)

00001c88 <vBlockingQueueConsumer>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
    1c88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c8a:	b083      	sub	sp, #12
unsigned short usData, usExpectedValue = 0;
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
    1c8c:	2700      	movs	r7, #0
    1c8e:	466d      	mov	r5, sp
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
    1c90:	1c04      	adds	r4, r0, #0
unsigned short usData, usExpectedValue = 0;
    1c92:	1c3e      	adds	r6, r7, #0
    1c94:	3506      	adds	r5, #6

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;

	for( ;; )
	{	
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
    1c96:	6820      	ldr	r0, [r4, #0]
    1c98:	6862      	ldr	r2, [r4, #4]
    1c9a:	1c29      	adds	r1, r5, #0
    1c9c:	2300      	movs	r3, #0
    1c9e:	f001 fa89 	bl	31b4 <xQueueGenericReceive>
    1ca2:	2801      	cmp	r0, #1
    1ca4:	d1f7      	bne.n	1c96 <vBlockingQueueConsumer+0xe>
		{
			if( usData != usExpectedValue )
    1ca6:	882b      	ldrh	r3, [r5, #0]
    1ca8:	42b3      	cmp	r3, r6
    1caa:	d002      	beq.n	1cb2 <vBlockingQueueConsumer+0x2a>
    1cac:	1c1e      	adds	r6, r3, #0
			{
				/* Catch-up. */
				usExpectedValue = usData;

				sErrorEverOccurred = pdTRUE;
    1cae:	1c07      	adds	r7, r0, #0
    1cb0:	e7f1      	b.n	1c96 <vBlockingQueueConsumer+0xe>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */	
				if( sErrorEverOccurred == pdFALSE )
    1cb2:	2f00      	cmp	r7, #0
    1cb4:	d105      	bne.n	1cc2 <vBlockingQueueConsumer+0x3a>
				{
					( *pxQueueParameters->psCheckVariable )++;
    1cb6:	68a2      	ldr	r2, [r4, #8]
    1cb8:	8816      	ldrh	r6, [r2, #0]
    1cba:	3601      	adds	r6, #1
    1cbc:	0430      	lsls	r0, r6, #16
    1cbe:	0c01      	lsrs	r1, r0, #16
    1cc0:	8011      	strh	r1, [r2, #0]
				}
							
				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
    1cc2:	1c59      	adds	r1, r3, #1
    1cc4:	040b      	lsls	r3, r1, #16
    1cc6:	0c1e      	lsrs	r6, r3, #16
    1cc8:	e7e5      	b.n	1c96 <vBlockingQueueConsumer+0xe>
    1cca:	46c0      	nop			; (mov r8, r8)

00001ccc <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( unsigned short ) 0, ( unsigned short ) 0, ( unsigned short ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( unsigned portBASE_TYPE uxPriority )
{
    1ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cce:	465f      	mov	r7, fp
    1cd0:	4656      	mov	r6, sl
    1cd2:	464d      	mov	r5, r9
    1cd4:	4644      	mov	r4, r8
    1cd6:	b4f0      	push	{r4, r5, r6, r7}
    1cd8:	b087      	sub	sp, #28
    1cda:	9005      	str	r0, [sp, #20]
const portTickType xDontBlock = ( portTickType ) 0;

	/* Create the first two tasks as described at the top of the file. */
	
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1cdc:	200c      	movs	r0, #12
    1cde:	f002 fac1 	bl	4264 <pvPortMalloc>

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1ce2:	2102      	movs	r1, #2
const portTickType xDontBlock = ( portTickType ) 0;

	/* Create the first two tasks as described at the top of the file. */
	
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1ce4:	1c05      	adds	r5, r0, #0

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1ce6:	2001      	movs	r0, #1
    1ce8:	f001 f958 	bl	2f9c <xQueueCreate>

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
    1cec:	27fa      	movs	r7, #250	; 0xfa

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    1cee:	4a47      	ldr	r2, [pc, #284]	; (1e0c <vStartBlockingQueueTasks+0x140>)
	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
    1cf0:	00bf      	lsls	r7, r7, #2
    1cf2:	606f      	str	r7, [r5, #4]
	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1cf4:	6028      	str	r0, [r5, #0]
	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    1cf6:	60aa      	str	r2, [r5, #8]
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1cf8:	200c      	movs	r0, #12
	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
    1cfa:	4692      	mov	sl, r2
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1cfc:	f002 fab2 	bl	4264 <pvPortMalloc>
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
    1d00:	4b43      	ldr	r3, [pc, #268]	; (1e10 <vStartBlockingQueueTasks+0x144>)
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
    1d02:	682c      	ldr	r4, [r5, #0]
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
    1d04:	6083      	str	r3, [r0, #8]
    1d06:	4698      	mov	r8, r3


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    1d08:	4a42      	ldr	r2, [pc, #264]	; (1e14 <vStartBlockingQueueTasks+0x148>)
    1d0a:	9b05      	ldr	r3, [sp, #20]
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
    1d0c:	6004      	str	r4, [r0, #0]

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
    1d0e:	2400      	movs	r4, #0
    1d10:	6044      	str	r4, [r0, #4]
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    1d12:	4693      	mov	fp, r2
	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
		
	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d14:	1c06      	adds	r6, r0, #0
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
    1d16:	9300      	str	r3, [sp, #0]
    1d18:	1c10      	adds	r0, r2, #0
    1d1a:	1c2b      	adds	r3, r5, #0
    1d1c:	493e      	ldr	r1, [pc, #248]	; (1e18 <vStartBlockingQueueTasks+0x14c>)
    1d1e:	2268      	movs	r2, #104	; 0x68
    1d20:	9401      	str	r4, [sp, #4]
    1d22:	9402      	str	r4, [sp, #8]
    1d24:	9403      	str	r4, [sp, #12]
    1d26:	f001 fb9f 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueProducer, ( signed char * ) "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
    1d2a:	4a3c      	ldr	r2, [pc, #240]	; (1e1c <vStartBlockingQueueTasks+0x150>)
    1d2c:	1c33      	adds	r3, r6, #0
    1d2e:	4691      	mov	r9, r2
    1d30:	493b      	ldr	r1, [pc, #236]	; (1e20 <vStartBlockingQueueTasks+0x154>)
    1d32:	1c10      	adds	r0, r2, #0
    1d34:	2268      	movs	r2, #104	; 0x68
    1d36:	9400      	str	r4, [sp, #0]
    1d38:	9401      	str	r4, [sp, #4]
    1d3a:	9402      	str	r4, [sp, #8]
    1d3c:	9403      	str	r4, [sp, #12]
    1d3e:	f001 fb93 	bl	3468 <xTaskGenericCreate>
	

	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d42:	200c      	movs	r0, #12
    1d44:	f002 fa8e 	bl	4264 <pvPortMalloc>
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1d48:	2102      	movs	r1, #2
	

	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d4a:	1c05      	adds	r5, r0, #0
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1d4c:	2001      	movs	r0, #1
    1d4e:	f001 f925 	bl	2f9c <xQueueCreate>
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
    1d52:	2202      	movs	r2, #2
    1d54:	1c11      	adds	r1, r2, #0
    1d56:	4441      	add	r1, r8

	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1d58:	6028      	str	r0, [r5, #0]
	pxQueueParameters3->xBlockTime = xDontBlock;
    1d5a:	606c      	str	r4, [r5, #4]
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
    1d5c:	60a9      	str	r1, [r5, #8]

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d5e:	200c      	movs	r0, #12
    1d60:	f002 fa80 	bl	4264 <pvPortMalloc>
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    1d64:	2202      	movs	r2, #2
	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d66:	1c06      	adds	r6, r0, #0
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    1d68:	1c13      	adds	r3, r2, #0
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
    1d6a:	6828      	ldr	r0, [r5, #0]
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    1d6c:	4453      	add	r3, sl
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
	pxQueueParameters4->xBlockTime = xBlockTime;
    1d6e:	6077      	str	r7, [r6, #4]
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters3->xBlockTime = xDontBlock;
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
    1d70:	6030      	str	r0, [r6, #0]
	pxQueueParameters4->xBlockTime = xBlockTime;
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
    1d72:	60b3      	str	r3, [r6, #8]

	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QProdB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
    1d74:	4658      	mov	r0, fp
    1d76:	1c2b      	adds	r3, r5, #0
    1d78:	492a      	ldr	r1, [pc, #168]	; (1e24 <vStartBlockingQueueTasks+0x158>)
    1d7a:	3266      	adds	r2, #102	; 0x66
    1d7c:	9400      	str	r4, [sp, #0]
    1d7e:	9401      	str	r4, [sp, #4]
    1d80:	9402      	str	r4, [sp, #8]
    1d82:	9403      	str	r4, [sp, #12]
    1d84:	f001 fb70 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueProducer, ( signed char * ) "QConsB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
    1d88:	9d05      	ldr	r5, [sp, #20]
    1d8a:	1c33      	adds	r3, r6, #0
    1d8c:	2268      	movs	r2, #104	; 0x68
    1d8e:	4648      	mov	r0, r9
    1d90:	4925      	ldr	r1, [pc, #148]	; (1e28 <vStartBlockingQueueTasks+0x15c>)
    1d92:	9500      	str	r5, [sp, #0]
    1d94:	9401      	str	r4, [sp, #4]
    1d96:	9402      	str	r4, [sp, #8]
    1d98:	9403      	str	r4, [sp, #12]
    1d9a:	f001 fb65 	bl	3468 <xTaskGenericCreate>



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1d9e:	200c      	movs	r0, #12
    1da0:	f002 fa60 	bl	4264 <pvPortMalloc>
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1da4:	2102      	movs	r1, #2



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1da6:	1c05      	adds	r5, r0, #0
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1da8:	2005      	movs	r0, #5
    1daa:	f001 f8f7 	bl	2f9c <xQueueCreate>
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
    1dae:	2204      	movs	r2, #4
    1db0:	1c11      	adds	r1, r2, #0
    1db2:	4441      	add	r1, r8


	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
    1db4:	6028      	str	r0, [r5, #0]
	pxQueueParameters5->xBlockTime = xBlockTime;
    1db6:	606f      	str	r7, [r5, #4]
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
    1db8:	60a9      	str	r1, [r5, #8]

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1dba:	200c      	movs	r0, #12
    1dbc:	f002 fa52 	bl	4264 <pvPortMalloc>
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
	pxQueueParameters6->xBlockTime = xBlockTime;
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    1dc0:	2204      	movs	r2, #4
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
    1dc2:	1c06      	adds	r6, r0, #0
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
	pxQueueParameters6->xBlockTime = xBlockTime;
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    1dc4:	1c13      	adds	r3, r2, #0
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
    1dc6:	6828      	ldr	r0, [r5, #0]
	pxQueueParameters6->xBlockTime = xBlockTime;
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    1dc8:	4453      	add	r3, sl
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( unsigned portBASE_TYPE ) sizeof( unsigned short ) );
	pxQueueParameters5->xBlockTime = xBlockTime;
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
    1dca:	6030      	str	r0, [r6, #0]
	pxQueueParameters6->xBlockTime = xBlockTime;
    1dcc:	6077      	str	r7, [r6, #4]
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );	
    1dce:	60b3      	str	r3, [r6, #8]

	xTaskCreate( vBlockingQueueProducer, ( signed char * ) "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
    1dd0:	4648      	mov	r0, r9
    1dd2:	1c2b      	adds	r3, r5, #0
    1dd4:	4915      	ldr	r1, [pc, #84]	; (1e2c <vStartBlockingQueueTasks+0x160>)
    1dd6:	3264      	adds	r2, #100	; 0x64
    1dd8:	9400      	str	r4, [sp, #0]
    1dda:	9401      	str	r4, [sp, #4]
    1ddc:	9402      	str	r4, [sp, #8]
    1dde:	9403      	str	r4, [sp, #12]
    1de0:	f001 fb42 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( vBlockingQueueConsumer, ( signed char * ) "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
    1de4:	4658      	mov	r0, fp
    1de6:	1c33      	adds	r3, r6, #0
    1de8:	4911      	ldr	r1, [pc, #68]	; (1e30 <vStartBlockingQueueTasks+0x164>)
    1dea:	2268      	movs	r2, #104	; 0x68
    1dec:	9400      	str	r4, [sp, #0]
    1dee:	9401      	str	r4, [sp, #4]
    1df0:	9402      	str	r4, [sp, #8]
    1df2:	9403      	str	r4, [sp, #12]
    1df4:	f001 fb38 	bl	3468 <xTaskGenericCreate>
}
    1df8:	b007      	add	sp, #28
    1dfa:	bc3c      	pop	{r2, r3, r4, r5}
    1dfc:	4690      	mov	r8, r2
    1dfe:	4699      	mov	r9, r3
    1e00:	46a2      	mov	sl, r4
    1e02:	46ab      	mov	fp, r5
    1e04:	bcf0      	pop	{r4, r5, r6, r7}
    1e06:	bc01      	pop	{r0}
    1e08:	4700      	bx	r0
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	400009d0 	.word	0x400009d0
    1e10:	400009c0 	.word	0x400009c0
    1e14:	00001c89 	.word	0x00001c89
    1e18:	0000e824 	.word	0x0000e824
    1e1c:	00001c4d 	.word	0x00001c4d
    1e20:	0000e82c 	.word	0x0000e82c
    1e24:	0000e834 	.word	0x0000e834
    1e28:	0000e83c 	.word	0x0000e83c
    1e2c:	0000e844 	.word	0x0000e844
    1e30:	0000e84c 	.word	0x0000e84c

00001e34 <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreBlockingQueuesStillRunning( void )
{
    1e34:	b5f0      	push	{r4, r5, r6, r7, lr}
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1e36:	4c27      	ldr	r4, [pc, #156]	; (1ed4 <xAreBlockingQueuesStillRunning+0xa0>)
    1e38:	4927      	ldr	r1, [pc, #156]	; (1ed8 <xAreBlockingQueuesStillRunning+0xa4>)
    1e3a:	8825      	ldrh	r5, [r4, #0]
	}
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreBlockingQueuesStillRunning( void )
    1e3c:	2200      	movs	r2, #0
    1e3e:	5e8e      	ldrsh	r6, [r1, r2]
    1e40:	042f      	lsls	r7, r5, #16
    1e42:	143a      	asrs	r2, r7, #16
    1e44:	1ab6      	subs	r6, r6, r2
    1e46:	1e73      	subs	r3, r6, #1
    1e48:	419e      	sbcs	r6, r3
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    1e4a:	8823      	ldrh	r3, [r4, #0]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1e4c:	4a23      	ldr	r2, [pc, #140]	; (1edc <xAreBlockingQueuesStillRunning+0xa8>)
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    1e4e:	800b      	strh	r3, [r1, #0]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1e50:	4b23      	ldr	r3, [pc, #140]	; (1ee0 <xAreBlockingQueuesStillRunning+0xac>)
    1e52:	8810      	ldrh	r0, [r2, #0]
    1e54:	2700      	movs	r7, #0
    1e56:	5fdd      	ldrsh	r5, [r3, r7]
    1e58:	0400      	lsls	r0, r0, #16
    1e5a:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    1e5c:	1be8      	subs	r0, r5, r7
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    1e5e:	8817      	ldrh	r7, [r2, #0]
    1e60:	801f      	strh	r7, [r3, #0]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1e62:	1e45      	subs	r5, r0, #1
    1e64:	41a8      	sbcs	r0, r5
    1e66:	4245      	negs	r5, r0
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1e68:	8860      	ldrh	r0, [r4, #2]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1e6a:	402e      	ands	r6, r5
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1e6c:	0400      	lsls	r0, r0, #16
    1e6e:	2702      	movs	r7, #2
    1e70:	5fcd      	ldrsh	r5, [r1, r7]
    1e72:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    1e74:	1be8      	subs	r0, r5, r7
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    1e76:	8867      	ldrh	r7, [r4, #2]
    1e78:	804f      	strh	r7, [r1, #2]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1e7a:	1e45      	subs	r5, r0, #1
    1e7c:	41a8      	sbcs	r0, r5
    1e7e:	4245      	negs	r5, r0
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1e80:	8850      	ldrh	r0, [r2, #2]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1e82:	402e      	ands	r6, r5
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1e84:	0400      	lsls	r0, r0, #16
    1e86:	2702      	movs	r7, #2
    1e88:	5fdd      	ldrsh	r5, [r3, r7]
    1e8a:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    1e8c:	1be8      	subs	r0, r5, r7
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    1e8e:	8857      	ldrh	r7, [r2, #2]
    1e90:	805f      	strh	r7, [r3, #2]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1e92:	1e45      	subs	r5, r0, #1
    1e94:	41a8      	sbcs	r0, r5
    1e96:	4245      	negs	r5, r0
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1e98:	88a0      	ldrh	r0, [r4, #4]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1e9a:	402e      	ands	r6, r5
	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
    1e9c:	0400      	lsls	r0, r0, #16
    1e9e:	2704      	movs	r7, #4
    1ea0:	5fcd      	ldrsh	r5, [r1, r7]
    1ea2:	1407      	asrs	r7, r0, #16
		{
			xReturn = pdFALSE;
    1ea4:	1be8      	subs	r0, r5, r7
    1ea6:	1e45      	subs	r5, r0, #1
    1ea8:	41a8      	sbcs	r0, r5
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
    1eaa:	88a5      	ldrh	r5, [r4, #4]
    1eac:	808d      	strh	r5, [r1, #4]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1eae:	8891      	ldrh	r1, [r2, #4]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1eb0:	4247      	negs	r7, r0
    1eb2:	1c30      	adds	r0, r6, #0
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1eb4:	2504      	movs	r5, #4
    1eb6:	5f5c      	ldrsh	r4, [r3, r5]

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1eb8:	4038      	ands	r0, r7
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
    1eba:	040f      	lsls	r7, r1, #16
    1ebc:	143e      	asrs	r6, r7, #16
		{
			xReturn = pdFALSE;
    1ebe:	1ba5      	subs	r5, r4, r6
    1ec0:	1e6c      	subs	r4, r5, #1
    1ec2:	41a5      	sbcs	r5, r4
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    1ec4:	8892      	ldrh	r2, [r2, #4]
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
		{
			xReturn = pdFALSE;
    1ec6:	4269      	negs	r1, r5
    1ec8:	4008      	ands	r0, r1
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
    1eca:	809a      	strh	r2, [r3, #4]
	}

	return xReturn;
}
    1ecc:	bcf0      	pop	{r4, r5, r6, r7}
    1ece:	bc02      	pop	{r1}
    1ed0:	4708      	bx	r1
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	400009d0 	.word	0x400009d0
    1ed8:	400009c8 	.word	0x400009c8
    1edc:	400009c0 	.word	0x400009c0
    1ee0:	400009b8 	.word	0x400009b8

00001ee4 <vSecondaryBlockTimeTestTask>:
	}
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
    1ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ee6:	4657      	mov	r7, sl
    1ee8:	464e      	mov	r6, r9
    1eea:	4645      	mov	r5, r8
    1eec:	b4e0      	push	{r5, r6, r7}
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
    1eee:	2300      	movs	r3, #0
    1ef0:	469a      	mov	sl, r3
    1ef2:	4c24      	ldr	r4, [pc, #144]	; (1f84 <vSecondaryBlockTimeTestTask+0xa0>)
		xTimeWhenBlocking = xTaskGetTickCount();

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
		xRunIndicator = bktRUN_INDICATOR;
    1ef4:	3355      	adds	r3, #85	; 0x55
    1ef6:	4e24      	ldr	r6, [pc, #144]	; (1f88 <vSecondaryBlockTimeTestTask+0xa4>)
    1ef8:	4d24      	ldr	r5, [pc, #144]	; (1f8c <vSecondaryBlockTimeTestTask+0xa8>)
    1efa:	4f25      	ldr	r7, [pc, #148]	; (1f90 <vSecondaryBlockTimeTestTask+0xac>)
	}
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
    1efc:	b082      	sub	sp, #8
		xTimeWhenBlocking = xTaskGetTickCount();

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
		xRunIndicator = bktRUN_INDICATOR;
    1efe:	4698      	mov	r8, r3
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
    1f00:	2000      	movs	r0, #0
    1f02:	f001 ffd3 	bl	3eac <vTaskSuspend>
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
    1f06:	f001 fd09 	bl	391c <xTaskGetTickCount>

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
    1f0a:	4653      	mov	r3, sl
    1f0c:	9301      	str	r3, [sp, #4]
		xRunIndicator = bktRUN_INDICATOR;
    1f0e:	4643      	mov	r3, r8
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
    1f10:	4681      	mov	r9, r0

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
		xRunIndicator = bktRUN_INDICATOR;
    1f12:	6023      	str	r3, [r4, #0]
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
    1f14:	6830      	ldr	r0, [r6, #0]
    1f16:	a901      	add	r1, sp, #4
    1f18:	22af      	movs	r2, #175	; 0xaf
    1f1a:	4653      	mov	r3, sl
    1f1c:	f001 f87a 	bl	3014 <xQueueGenericSend>
    1f20:	2800      	cmp	r0, #0
    1f22:	d001      	beq.n	1f28 <vSecondaryBlockTimeTestTask+0x44>
		{
			xErrorOccurred = pdTRUE;
    1f24:	2001      	movs	r0, #1
    1f26:	6028      	str	r0, [r5, #0]
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    1f28:	f001 fcf8 	bl	391c <xTaskGetTickCount>
    1f2c:	464b      	mov	r3, r9
    1f2e:	1ac0      	subs	r0, r0, r3

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
    1f30:	28ae      	cmp	r0, #174	; 0xae
    1f32:	d901      	bls.n	1f38 <vSecondaryBlockTimeTestTask+0x54>
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
    1f34:	28be      	cmp	r0, #190	; 0xbe
    1f36:	d901      	bls.n	1f3c <vSecondaryBlockTimeTestTask+0x58>
		{
			xErrorOccurred = pdTRUE;
    1f38:	2101      	movs	r1, #1
    1f3a:	6029      	str	r1, [r5, #0]
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
    1f3c:	4643      	mov	r3, r8
    1f3e:	6023      	str	r3, [r4, #0]
		vTaskSuspend( NULL );
    1f40:	2000      	movs	r0, #0
    1f42:	f001 ffb3 	bl	3eac <vTaskSuspend>

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
    1f46:	f001 fce9 	bl	391c <xTaskGetTickCount>

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
    1f4a:	4643      	mov	r3, r8

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
    1f4c:	4681      	mov	r9, r0

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
    1f4e:	6023      	str	r3, [r4, #0]
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
    1f50:	6830      	ldr	r0, [r6, #0]
    1f52:	a901      	add	r1, sp, #4
    1f54:	22af      	movs	r2, #175	; 0xaf
    1f56:	2300      	movs	r3, #0
    1f58:	f001 f92c 	bl	31b4 <xQueueGenericReceive>
    1f5c:	2800      	cmp	r0, #0
    1f5e:	d001      	beq.n	1f64 <vSecondaryBlockTimeTestTask+0x80>
		{
			xErrorOccurred = pdTRUE;
    1f60:	2201      	movs	r2, #1
    1f62:	602a      	str	r2, [r5, #0]
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    1f64:	f001 fcda 	bl	391c <xTaskGetTickCount>
    1f68:	464b      	mov	r3, r9
    1f6a:	1ac0      	subs	r0, r0, r3

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
    1f6c:	28ae      	cmp	r0, #174	; 0xae
    1f6e:	d901      	bls.n	1f74 <vSecondaryBlockTimeTestTask+0x90>
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
    1f70:	28be      	cmp	r0, #190	; 0xbe
    1f72:	d901      	bls.n	1f78 <vSecondaryBlockTimeTestTask+0x94>
		{
			xErrorOccurred = pdTRUE;
    1f74:	2001      	movs	r0, #1
    1f76:	6028      	str	r0, [r5, #0]
		}

		xRunIndicator = bktRUN_INDICATOR;
    1f78:	4643      	mov	r3, r8
    1f7a:	6023      	str	r3, [r4, #0]

		xSecondaryCycles++;
    1f7c:	6839      	ldr	r1, [r7, #0]
    1f7e:	3101      	adds	r1, #1
    1f80:	6039      	str	r1, [r7, #0]
	}
    1f82:	e7bd      	b.n	1f00 <vSecondaryBlockTimeTestTask+0x1c>
    1f84:	400009e0 	.word	0x400009e0
    1f88:	400009e8 	.word	0x400009e8
    1f8c:	400009ec 	.word	0x400009ec
    1f90:	400009f4 	.word	0x400009f4

00001f94 <vPrimaryBlockTimeTestTask>:
	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed char * )"BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
}
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
    1f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f96:	465f      	mov	r7, fp
    1f98:	4656      	mov	r6, sl
    1f9a:	464d      	mov	r5, r9
    1f9c:	4644      	mov	r4, r8
    1f9e:	b4f0      	push	{r4, r5, r6, r7}
        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    1fa0:	220a      	movs	r2, #10

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
			{
				xErrorOccurred = pdTRUE;
    1fa2:	2301      	movs	r3, #1
    1fa4:	4e8e      	ldr	r6, [pc, #568]	; (21e0 <vPrimaryBlockTimeTestTask+0x24c>)
    1fa6:	4d8f      	ldr	r5, [pc, #572]	; (21e4 <vPrimaryBlockTimeTestTask+0x250>)
    1fa8:	4c8f      	ldr	r4, [pc, #572]	; (21e8 <vPrimaryBlockTimeTestTask+0x254>)
    1faa:	4f90      	ldr	r7, [pc, #576]	; (21ec <vPrimaryBlockTimeTestTask+0x258>)
	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed char * )"BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
}
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
    1fac:	b083      	sub	sp, #12
        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    1fae:	4693      	mov	fp, r2

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
			{
				xErrorOccurred = pdTRUE;
    1fb0:	4698      	mov	r8, r3
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    1fb2:	2000      	movs	r0, #0
    1fb4:	9001      	str	r0, [sp, #4]
    1fb6:	1c03      	adds	r3, r0, #0
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    1fb8:	465a      	mov	r2, fp
    1fba:	409a      	lsls	r2, r3
    1fbc:	4691      	mov	r9, r2

			xTimeWhenBlocking = xTaskGetTickCount();
    1fbe:	f001 fcad 	bl	391c <xTaskGetTickCount>

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
    1fc2:	4669      	mov	r1, sp
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;

			xTimeWhenBlocking = xTaskGetTickCount();
    1fc4:	4682      	mov	sl, r0

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
    1fc6:	464a      	mov	r2, r9
    1fc8:	6830      	ldr	r0, [r6, #0]
    1fca:	2300      	movs	r3, #0
    1fcc:	f001 f8f2 	bl	31b4 <xQueueGenericReceive>
    1fd0:	2800      	cmp	r0, #0
    1fd2:	d001      	beq.n	1fd8 <vPrimaryBlockTimeTestTask+0x44>
			{
				xErrorOccurred = pdTRUE;
    1fd4:	4643      	mov	r3, r8
    1fd6:	602b      	str	r3, [r5, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    1fd8:	f001 fca0 	bl	391c <xTaskGetTickCount>
    1fdc:	4652      	mov	r2, sl
    1fde:	1a80      	subs	r0, r0, r2

			if( xBlockedTime < xTimeToBlock )
    1fe0:	4581      	cmp	r9, r0
    1fe2:	d901      	bls.n	1fe8 <vPrimaryBlockTimeTestTask+0x54>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
    1fe4:	4643      	mov	r3, r8
    1fe6:	602b      	str	r3, [r5, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    1fe8:	210f      	movs	r1, #15
    1fea:	1c0b      	adds	r3, r1, #0
    1fec:	444b      	add	r3, r9
    1fee:	4298      	cmp	r0, r3
    1ff0:	d901      	bls.n	1ff6 <vPrimaryBlockTimeTestTask+0x62>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
    1ff2:	4643      	mov	r3, r8
    1ff4:	602b      	str	r3, [r5, #0]
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    1ff6:	9b01      	ldr	r3, [sp, #4]
    1ff8:	3301      	adds	r3, #1
    1ffa:	9301      	str	r3, [sp, #4]
    1ffc:	2b04      	cmp	r3, #4
    1ffe:	dddb      	ble.n	1fb8 <vPrimaryBlockTimeTestTask+0x24>
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2000:	2000      	movs	r0, #0
    2002:	9001      	str	r0, [sp, #4]
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    2004:	2200      	movs	r2, #0
    2006:	6830      	ldr	r0, [r6, #0]
    2008:	a901      	add	r1, sp, #4
    200a:	1c13      	adds	r3, r2, #0
    200c:	f001 f802 	bl	3014 <xQueueGenericSend>
    2010:	2801      	cmp	r0, #1
    2012:	d001      	beq.n	2018 <vPrimaryBlockTimeTestTask+0x84>
			{
				xErrorOccurred = pdTRUE;
    2014:	4643      	mov	r3, r8
    2016:	602b      	str	r3, [r5, #0]
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2018:	9a01      	ldr	r2, [sp, #4]
    201a:	3201      	adds	r2, #1
    201c:	9201      	str	r2, [sp, #4]
    201e:	2a04      	cmp	r2, #4
    2020:	ddf0      	ble.n	2004 <vPrimaryBlockTimeTestTask+0x70>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2022:	2100      	movs	r1, #0
    2024:	9101      	str	r1, [sp, #4]
    2026:	1c0b      	adds	r3, r1, #0
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    2028:	465a      	mov	r2, fp
    202a:	409a      	lsls	r2, r3
    202c:	4691      	mov	r9, r2

			xTimeWhenBlocking = xTaskGetTickCount();
    202e:	f001 fc75 	bl	391c <xTaskGetTickCount>

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
    2032:	a901      	add	r1, sp, #4
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;

			xTimeWhenBlocking = xTaskGetTickCount();
    2034:	4682      	mov	sl, r0

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
    2036:	464a      	mov	r2, r9
    2038:	6830      	ldr	r0, [r6, #0]
    203a:	2300      	movs	r3, #0
    203c:	f000 ffea 	bl	3014 <xQueueGenericSend>
    2040:	2800      	cmp	r0, #0
    2042:	d001      	beq.n	2048 <vPrimaryBlockTimeTestTask+0xb4>
			{
				xErrorOccurred = pdTRUE;
    2044:	4643      	mov	r3, r8
    2046:	602b      	str	r3, [r5, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    2048:	f001 fc68 	bl	391c <xTaskGetTickCount>
    204c:	4652      	mov	r2, sl
    204e:	1a80      	subs	r0, r0, r2

			if( xBlockedTime < xTimeToBlock )
    2050:	4581      	cmp	r9, r0
    2052:	d901      	bls.n	2058 <vPrimaryBlockTimeTestTask+0xc4>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
    2054:	4643      	mov	r3, r8
    2056:	602b      	str	r3, [r5, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    2058:	210f      	movs	r1, #15
    205a:	1c0b      	adds	r3, r1, #0
    205c:	444b      	add	r3, r9
    205e:	4298      	cmp	r0, r3
    2060:	d901      	bls.n	2066 <vPrimaryBlockTimeTestTask+0xd2>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
    2062:	4643      	mov	r3, r8
    2064:	602b      	str	r3, [r5, #0]
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2066:	9b01      	ldr	r3, [sp, #4]
    2068:	3301      	adds	r3, #1
    206a:	9301      	str	r3, [sp, #4]
    206c:	2b04      	cmp	r3, #4
    206e:	dddb      	ble.n	2028 <vPrimaryBlockTimeTestTask+0x94>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
    2070:	2200      	movs	r2, #0
		vTaskResume( xSecondary );
    2072:	6838      	ldr	r0, [r7, #0]
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
    2074:	6022      	str	r2, [r4, #0]
		vTaskResume( xSecondary );
    2076:	f001 fb99 	bl	37ac <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    207a:	6820      	ldr	r0, [r4, #0]
    207c:	2855      	cmp	r0, #85	; 0x55
    207e:	d005      	beq.n	208c <vPrimaryBlockTimeTestTask+0xf8>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
    2080:	2014      	movs	r0, #20
    2082:	f001 fe3b 	bl	3cfc <vTaskDelay>
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    2086:	6821      	ldr	r1, [r4, #0]
    2088:	2955      	cmp	r1, #85	; 0x55
    208a:	d1f9      	bne.n	2080 <vPrimaryBlockTimeTestTask+0xec>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
    208c:	2014      	movs	r0, #20
    208e:	f001 fe35 	bl	3cfc <vTaskDelay>
		xRunIndicator = 0;
    2092:	2300      	movs	r3, #0
    2094:	6023      	str	r3, [r4, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2096:	9301      	str	r3, [sp, #4]
    2098:	e00f      	b.n	20ba <vPrimaryBlockTimeTestTask+0x126>
				xErrorOccurred = pdTRUE;
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    209a:	2105      	movs	r1, #5
    209c:	6838      	ldr	r0, [r7, #0]
    209e:	f001 fb23 	bl	36e8 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    20a2:	6821      	ldr	r1, [r4, #0]
    20a4:	2955      	cmp	r1, #85	; 0x55
    20a6:	d028      	beq.n	20fa <vPrimaryBlockTimeTestTask+0x166>
				queue function. */
				xErrorOccurred = pdTRUE;
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
    20a8:	6838      	ldr	r0, [r7, #0]
    20aa:	2102      	movs	r1, #2
    20ac:	f001 fb1c 	bl	36e8 <vTaskPrioritySet>
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    20b0:	9801      	ldr	r0, [sp, #4]
    20b2:	3001      	adds	r0, #1
    20b4:	9001      	str	r0, [sp, #4]
    20b6:	2804      	cmp	r0, #4
    20b8:	dc25      	bgt.n	2106 <vPrimaryBlockTimeTestTask+0x172>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    20ba:	2200      	movs	r2, #0
    20bc:	6830      	ldr	r0, [r6, #0]
    20be:	4669      	mov	r1, sp
    20c0:	1c13      	adds	r3, r2, #0
    20c2:	f001 f877 	bl	31b4 <xQueueGenericReceive>
    20c6:	2801      	cmp	r0, #1
    20c8:	d001      	beq.n	20ce <vPrimaryBlockTimeTestTask+0x13a>
			{
				xErrorOccurred = pdTRUE;
    20ca:	4642      	mov	r2, r8
    20cc:	602a      	str	r2, [r5, #0]
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    20ce:	2200      	movs	r2, #0
    20d0:	6830      	ldr	r0, [r6, #0]
    20d2:	a901      	add	r1, sp, #4
    20d4:	1c13      	adds	r3, r2, #0
    20d6:	f000 ff9d 	bl	3014 <xQueueGenericSend>
    20da:	2801      	cmp	r0, #1
    20dc:	d001      	beq.n	20e2 <vPrimaryBlockTimeTestTask+0x14e>
			{
				xErrorOccurred = pdTRUE;
    20de:	4643      	mov	r3, r8
    20e0:	602b      	str	r3, [r5, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
    20e2:	6820      	ldr	r0, [r4, #0]
    20e4:	2855      	cmp	r0, #85	; 0x55
    20e6:	d1d8      	bne.n	209a <vPrimaryBlockTimeTestTask+0x106>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    20e8:	4642      	mov	r2, r8
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    20ea:	2105      	movs	r1, #5
			}

			if( xRunIndicator == bktRUN_INDICATOR )
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    20ec:	602a      	str	r2, [r5, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    20ee:	6838      	ldr	r0, [r7, #0]
    20f0:	f001 fafa 	bl	36e8 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    20f4:	6821      	ldr	r1, [r4, #0]
    20f6:	2955      	cmp	r1, #85	; 0x55
    20f8:	d1d6      	bne.n	20a8 <vPrimaryBlockTimeTestTask+0x114>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
    20fa:	4643      	mov	r3, r8
    20fc:	602b      	str	r3, [r5, #0]
    20fe:	e7d3      	b.n	20a8 <vPrimaryBlockTimeTestTask+0x114>

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
		{
			vTaskDelay( bktSHORT_WAIT );
    2100:	2014      	movs	r0, #20
    2102:	f001 fdfb 	bl	3cfc <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
    2106:	6822      	ldr	r2, [r4, #0]
    2108:	2a55      	cmp	r2, #85	; 0x55
    210a:	d1f9      	bne.n	2100 <vPrimaryBlockTimeTestTask+0x16c>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
    210c:	2014      	movs	r0, #20
    210e:	f001 fdf5 	bl	3cfc <vTaskDelay>
		xRunIndicator = 0;
    2112:	2100      	movs	r1, #0
    2114:	6021      	str	r1, [r4, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2116:	9101      	str	r1, [sp, #4]
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    2118:	2200      	movs	r2, #0
    211a:	6830      	ldr	r0, [r6, #0]
    211c:	4669      	mov	r1, sp
    211e:	1c13      	adds	r3, r2, #0
    2120:	f001 f848 	bl	31b4 <xQueueGenericReceive>
    2124:	2801      	cmp	r0, #1
    2126:	d001      	beq.n	212c <vPrimaryBlockTimeTestTask+0x198>
			{
				xErrorOccurred = pdTRUE;
    2128:	4643      	mov	r3, r8
    212a:	602b      	str	r3, [r5, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    212c:	9801      	ldr	r0, [sp, #4]
    212e:	3001      	adds	r0, #1
    2130:	9001      	str	r0, [sp, #4]
    2132:	2804      	cmp	r0, #4
    2134:	ddf0      	ble.n	2118 <vPrimaryBlockTimeTestTask+0x184>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
    2136:	6838      	ldr	r0, [r7, #0]
    2138:	f001 fb38 	bl	37ac <vTaskResume>

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    213c:	6822      	ldr	r2, [r4, #0]
    213e:	2a55      	cmp	r2, #85	; 0x55
    2140:	d005      	beq.n	214e <vPrimaryBlockTimeTestTask+0x1ba>
		{
			vTaskDelay( bktSHORT_WAIT );
    2142:	2014      	movs	r0, #20
    2144:	f001 fdda 	bl	3cfc <vTaskDelay>
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
    2148:	6821      	ldr	r1, [r4, #0]
    214a:	2955      	cmp	r1, #85	; 0x55
    214c:	d1f9      	bne.n	2142 <vPrimaryBlockTimeTestTask+0x1ae>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
    214e:	2014      	movs	r0, #20
    2150:	f001 fdd4 	bl	3cfc <vTaskDelay>
		xRunIndicator = 0;
    2154:	2300      	movs	r3, #0
    2156:	6023      	str	r3, [r4, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2158:	9301      	str	r3, [sp, #4]
    215a:	e00f      	b.n	217c <vPrimaryBlockTimeTestTask+0x1e8>
				xErrorOccurred = pdTRUE;
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    215c:	2105      	movs	r1, #5
    215e:	6838      	ldr	r0, [r7, #0]
    2160:	f001 fac2 	bl	36e8 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    2164:	6821      	ldr	r1, [r4, #0]
    2166:	2955      	cmp	r1, #85	; 0x55
    2168:	d028      	beq.n	21bc <vPrimaryBlockTimeTestTask+0x228>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
    216a:	6838      	ldr	r0, [r7, #0]
    216c:	2102      	movs	r1, #2
    216e:	f001 fabb 	bl	36e8 <vTaskPrioritySet>
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    2172:	9801      	ldr	r0, [sp, #4]
    2174:	3001      	adds	r0, #1
    2176:	9001      	str	r0, [sp, #4]
    2178:	2804      	cmp	r0, #4
    217a:	dc25      	bgt.n	21c8 <vPrimaryBlockTimeTestTask+0x234>
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    217c:	2200      	movs	r2, #0
    217e:	6830      	ldr	r0, [r6, #0]
    2180:	a901      	add	r1, sp, #4
    2182:	1c13      	adds	r3, r2, #0
    2184:	f000 ff46 	bl	3014 <xQueueGenericSend>
    2188:	2801      	cmp	r0, #1
    218a:	d001      	beq.n	2190 <vPrimaryBlockTimeTestTask+0x1fc>
			{
				xErrorOccurred = pdTRUE;
    218c:	4643      	mov	r3, r8
    218e:	602b      	str	r3, [r5, #0]
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    2190:	2200      	movs	r2, #0
    2192:	6830      	ldr	r0, [r6, #0]
    2194:	4669      	mov	r1, sp
    2196:	1c13      	adds	r3, r2, #0
    2198:	f001 f80c 	bl	31b4 <xQueueGenericReceive>
    219c:	2801      	cmp	r0, #1
    219e:	d001      	beq.n	21a4 <vPrimaryBlockTimeTestTask+0x210>
			{
				xErrorOccurred = pdTRUE;
    21a0:	4642      	mov	r2, r8
    21a2:	602a      	str	r2, [r5, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
    21a4:	6820      	ldr	r0, [r4, #0]
    21a6:	2855      	cmp	r0, #85	; 0x55
    21a8:	d1d8      	bne.n	215c <vPrimaryBlockTimeTestTask+0x1c8>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    21aa:	4643      	mov	r3, r8
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    21ac:	2105      	movs	r1, #5
			}

			if( xRunIndicator == bktRUN_INDICATOR )
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
    21ae:	602b      	str	r3, [r5, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    21b0:	6838      	ldr	r0, [r7, #0]
    21b2:	f001 fa99 	bl	36e8 <vTaskPrioritySet>

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
    21b6:	6821      	ldr	r1, [r4, #0]
    21b8:	2955      	cmp	r1, #85	; 0x55
    21ba:	d1d6      	bne.n	216a <vPrimaryBlockTimeTestTask+0x1d6>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
    21bc:	4642      	mov	r2, r8
    21be:	602a      	str	r2, [r5, #0]
    21c0:	e7d3      	b.n	216a <vPrimaryBlockTimeTestTask+0x1d6>

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
		{
			vTaskDelay( bktSHORT_WAIT );
    21c2:	2014      	movs	r0, #20
    21c4:	f001 fd9a 	bl	3cfc <vTaskDelay>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
    21c8:	6823      	ldr	r3, [r4, #0]
    21ca:	2b55      	cmp	r3, #85	; 0x55
    21cc:	d1f9      	bne.n	21c2 <vPrimaryBlockTimeTestTask+0x22e>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
    21ce:	2014      	movs	r0, #20
    21d0:	f001 fd94 	bl	3cfc <vTaskDelay>

		xPrimaryCycles++;
    21d4:	4906      	ldr	r1, [pc, #24]	; (21f0 <vPrimaryBlockTimeTestTask+0x25c>)
    21d6:	680a      	ldr	r2, [r1, #0]
    21d8:	3201      	adds	r2, #1
    21da:	600a      	str	r2, [r1, #0]
	}
    21dc:	e6e9      	b.n	1fb2 <vPrimaryBlockTimeTestTask+0x1e>
    21de:	46c0      	nop			; (mov r8, r8)
    21e0:	400009e8 	.word	0x400009e8
    21e4:	400009ec 	.word	0x400009ec
    21e8:	400009e0 	.word	0x400009e0
    21ec:	400009e4 	.word	0x400009e4
    21f0:	400009dc 	.word	0x400009dc

000021f4 <vCreateBlockTimeTasks>:
static void vSecondaryBlockTimeTestTask( void *pvParameters );

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
    21f4:	b510      	push	{r4, lr}
    21f6:	b084      	sub	sp, #16
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( portBASE_TYPE ) );
    21f8:	2104      	movs	r1, #4
    21fa:	2005      	movs	r0, #5
    21fc:	f000 fece 	bl	2f9c <xQueueCreate>
    2200:	4a0e      	ldr	r2, [pc, #56]	; (223c <vCreateBlockTimeTasks+0x48>)
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, ( signed char * ) "Block_Time_Queue" );

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, ( signed char * )"BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
    2202:	2400      	movs	r4, #0
    2204:	2103      	movs	r1, #3
/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( portBASE_TYPE ) );
    2206:	6010      	str	r0, [r2, #0]
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, ( signed char * ) "Block_Time_Queue" );

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, ( signed char * )"BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
    2208:	1c23      	adds	r3, r4, #0
    220a:	9100      	str	r1, [sp, #0]
    220c:	2268      	movs	r2, #104	; 0x68
    220e:	490c      	ldr	r1, [pc, #48]	; (2240 <vCreateBlockTimeTasks+0x4c>)
    2210:	480c      	ldr	r0, [pc, #48]	; (2244 <vCreateBlockTimeTasks+0x50>)
    2212:	9401      	str	r4, [sp, #4]
    2214:	9402      	str	r4, [sp, #8]
    2216:	9403      	str	r4, [sp, #12]
    2218:	f001 f926 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed char * )"BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
    221c:	4b0a      	ldr	r3, [pc, #40]	; (2248 <vCreateBlockTimeTasks+0x54>)
    221e:	2002      	movs	r0, #2
    2220:	9000      	str	r0, [sp, #0]
    2222:	9301      	str	r3, [sp, #4]
    2224:	4909      	ldr	r1, [pc, #36]	; (224c <vCreateBlockTimeTasks+0x58>)
    2226:	2268      	movs	r2, #104	; 0x68
    2228:	1c23      	adds	r3, r4, #0
    222a:	4809      	ldr	r0, [pc, #36]	; (2250 <vCreateBlockTimeTasks+0x5c>)
    222c:	9402      	str	r4, [sp, #8]
    222e:	9403      	str	r4, [sp, #12]
    2230:	f001 f91a 	bl	3468 <xTaskGenericCreate>
}
    2234:	b004      	add	sp, #16
    2236:	bc10      	pop	{r4}
    2238:	bc01      	pop	{r0}
    223a:	4700      	bx	r0
    223c:	400009e8 	.word	0x400009e8
    2240:	0000e854 	.word	0x0000e854
    2244:	00001f95 	.word	0x00001f95
    2248:	400009e4 	.word	0x400009e4
    224c:	0000e85c 	.word	0x0000e85c
    2250:	00001ee5 	.word	0x00001ee5

00002254 <xAreBlockTimeTestTasksStillRunning>:
	}
}
/*-----------------------------------------------------------*/

portBASE_TYPE xAreBlockTimeTestTasksStillRunning( void )
{
    2254:	b5f0      	push	{r4, r5, r6, r7, lr}
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    2256:	4a0f      	ldr	r2, [pc, #60]	; (2294 <xAreBlockTimeTestTasksStillRunning+0x40>)
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2258:	4c0f      	ldr	r4, [pc, #60]	; (2298 <xAreBlockTimeTestTasksStillRunning+0x44>)
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    225a:	6813      	ldr	r3, [r2, #0]
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    225c:	490f      	ldr	r1, [pc, #60]	; (229c <xAreBlockTimeTestTasksStillRunning+0x48>)
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    225e:	469c      	mov	ip, r3
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2260:	6826      	ldr	r6, [r4, #0]
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    2262:	4b0f      	ldr	r3, [pc, #60]	; (22a0 <xAreBlockTimeTestTasksStillRunning+0x4c>)
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    2264:	680d      	ldr	r5, [r1, #0]
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
    2266:	681f      	ldr	r7, [r3, #0]
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
	{
		xReturn = pdFAIL;
    2268:	2000      	movs	r0, #0
	if( xPrimaryCycles == xLastPrimaryCycleCount )
	{
		xReturn = pdFAIL;
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
    226a:	42ae      	cmp	r6, r5
    226c:	d003      	beq.n	2276 <xAreBlockTimeTestTasksStillRunning+0x22>
/*-----------------------------------------------------------*/

portBASE_TYPE xAreBlockTimeTestTasksStillRunning( void )
{
static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
portBASE_TYPE xReturn = pdPASS;
    226e:	4665      	mov	r5, ip
    2270:	1be8      	subs	r0, r5, r7
    2272:	1e47      	subs	r7, r0, #1
    2274:	41b8      	sbcs	r0, r7
	if( xSecondaryCycles == xLastSecondaryCycleCount )
	{
		xReturn = pdFAIL;
	}

	if( xErrorOccurred == pdTRUE )
    2276:	4e0b      	ldr	r6, [pc, #44]	; (22a4 <xAreBlockTimeTestTasksStillRunning+0x50>)
    2278:	6835      	ldr	r5, [r6, #0]
	{
		xReturn = pdFAIL;
    227a:	3d01      	subs	r5, #1
    227c:	1e6e      	subs	r6, r5, #1
    227e:	41b5      	sbcs	r5, r6
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
    2280:	6824      	ldr	r4, [r4, #0]
	xLastPrimaryCycleCount = xPrimaryCycles;
    2282:	6812      	ldr	r2, [r2, #0]
		xReturn = pdFAIL;
	}

	if( xErrorOccurred == pdTRUE )
	{
		xReturn = pdFAIL;
    2284:	426f      	negs	r7, r5
    2286:	4038      	ands	r0, r7
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
    2288:	600c      	str	r4, [r1, #0]
	xLastPrimaryCycleCount = xPrimaryCycles;
    228a:	601a      	str	r2, [r3, #0]

	return xReturn;
}
    228c:	bcf0      	pop	{r4, r5, r6, r7}
    228e:	bc02      	pop	{r1}
    2290:	4708      	bx	r1
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	400009dc 	.word	0x400009dc
    2298:	400009f4 	.word	0x400009f4
    229c:	400009d8 	.word	0x400009d8
    22a0:	400009f0 	.word	0x400009f0
    22a4:	400009ec 	.word	0x400009ec

000022a8 <vCompeteingIntMathTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    22a8:	b5f0      	push	{r4, r5, r6, r7, lr}
		lValue /= intgCONST4;

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    22aa:	4f10      	ldr	r7, [pc, #64]	; (22ec <vCompeteingIntMathTask+0x44>)
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    22ac:	b083      	sub	sp, #12
    22ae:	1c06      	adds	r6, r0, #0
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
    22b0:	2400      	movs	r4, #0
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    22b2:	257b      	movs	r5, #123	; 0x7b
    22b4:	9501      	str	r5, [sp, #4]
		lValue += intgCONST2;
    22b6:	9801      	ldr	r0, [sp, #4]
    22b8:	490d      	ldr	r1, [pc, #52]	; (22f0 <vCompeteingIntMathTask+0x48>)
    22ba:	1843      	adds	r3, r0, r1
    22bc:	9301      	str	r3, [sp, #4]
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
    22be:	9901      	ldr	r1, [sp, #4]
    22c0:	008a      	lsls	r2, r1, #2
    22c2:	1a88      	subs	r0, r1, r2
    22c4:	9001      	str	r0, [sp, #4]
		lValue /= intgCONST4;
    22c6:	9801      	ldr	r0, [sp, #4]
    22c8:	2107      	movs	r1, #7
    22ca:	f00b fc95 	bl	dbf8 <____aeabi_idiv_from_thumb>
    22ce:	9001      	str	r0, [sp, #4]

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    22d0:	9b01      	ldr	r3, [sp, #4]
    22d2:	42bb      	cmp	r3, r7
    22d4:	d001      	beq.n	22da <vCompeteingIntMathTask+0x32>
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    22d6:	2401      	movs	r4, #1
    22d8:	e7ec      	b.n	22b4 <vCompeteingIntMathTask+0xc>
    22da:	2c00      	cmp	r4, #0
    22dc:	d1fb      	bne.n	22d6 <vCompeteingIntMathTask+0x2e>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
    22de:	f00b fca5 	bl	dc2c <__vPortEnterCritical_from_thumb>
				*pxTaskHasExecuted = pdTRUE;
    22e2:	2201      	movs	r2, #1
    22e4:	6032      	str	r2, [r6, #0]
			portEXIT_CRITICAL();
    22e6:	f00b fc9d 	bl	dc24 <__vPortExitCritical_from_thumb>
    22ea:	e7e3      	b.n	22b4 <vCompeteingIntMathTask+0xc>
    22ec:	fffe771b 	.word	0xfffe771b
    22f0:	00039447 	.word	0x00039447

000022f4 <vStartIntegerMathTasks>:
static volatile signed portBASE_TYPE xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( signed portBASE_TYPE ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( unsigned portBASE_TYPE uxPriority )
{
    22f4:	b500      	push	{lr}
    22f6:	b085      	sub	sp, #20
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		xTaskCreate( vCompeteingIntMathTask, ( signed char * ) "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( xTaskHandle * ) NULL );
    22f8:	2300      	movs	r3, #0
    22fa:	9000      	str	r0, [sp, #0]
    22fc:	9301      	str	r3, [sp, #4]
    22fe:	9302      	str	r3, [sp, #8]
    2300:	9303      	str	r3, [sp, #12]
    2302:	4804      	ldr	r0, [pc, #16]	; (2314 <vStartIntegerMathTasks+0x20>)
    2304:	4904      	ldr	r1, [pc, #16]	; (2318 <vStartIntegerMathTasks+0x24>)
    2306:	2268      	movs	r2, #104	; 0x68
    2308:	4b04      	ldr	r3, [pc, #16]	; (231c <vStartIntegerMathTasks+0x28>)
    230a:	f001 f8ad 	bl	3468 <xTaskGenericCreate>
	}
}
    230e:	b005      	add	sp, #20
    2310:	bc01      	pop	{r0}
    2312:	4700      	bx	r0
    2314:	000022a9 	.word	0x000022a9
    2318:	0000e864 	.word	0x0000e864
    231c:	400009f8 	.word	0x400009f8

00002320 <xAreIntegerMathsTaskStillRunning>:

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
    2320:	4b03      	ldr	r3, [pc, #12]	; (2330 <xAreIntegerMathsTaskStillRunning+0x10>)
    2322:	6818      	ldr	r0, [r3, #0]
			xReturn = pdFALSE;
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
    2324:	2200      	movs	r2, #0
    2326:	601a      	str	r2, [r3, #0]
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreIntegerMathsTaskStillRunning( void )
{
portBASE_TYPE xReturn = pdTRUE;
    2328:	1e43      	subs	r3, r0, #1
    232a:	4198      	sbcs	r0, r3
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
}
    232c:	4770      	bx	lr
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	400009f8 	.word	0x400009f8

00002334 <prvMediumPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
    2334:	b510      	push	{r4, lr}
    2336:	4c04      	ldr	r4, [pc, #16]	; (2348 <prvMediumPriorityMutexTask+0x14>)

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
    2338:	2000      	movs	r0, #0
    233a:	f001 fdb7 	bl	3eac <vTaskSuspend>

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
    233e:	6823      	ldr	r3, [r4, #0]
    2340:	3301      	adds	r3, #1
    2342:	6023      	str	r3, [r4, #0]
    2344:	e7f8      	b.n	2338 <prvMediumPriorityMutexTask+0x4>
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	40000a0c 	.word	0x40000a0c

0000234c <prvHighPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
    234c:	b570      	push	{r4, r5, r6, lr}
    234e:	4e0d      	ldr	r6, [pc, #52]	; (2384 <prvHighPriorityMutexTask+0x38>)
    2350:	1c04      	adds	r4, r0, #0
		/* When this task unsuspends all it does is attempt to obtain
		the mutex.  It should find the mutex is not available so a
		block time is specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
		{
			xErrorDetected = pdTRUE;
    2352:	2501      	movs	r5, #1

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
    2354:	2000      	movs	r0, #0
    2356:	f001 fda9 	bl	3eac <vTaskSuspend>

		/* When this task unsuspends all it does is attempt to obtain
		the mutex.  It should find the mutex is not available so a
		block time is specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
    235a:	2100      	movs	r1, #0
    235c:	2201      	movs	r2, #1
    235e:	1c20      	adds	r0, r4, #0
    2360:	4252      	negs	r2, r2
    2362:	1c0b      	adds	r3, r1, #0
    2364:	f000 ff26 	bl	31b4 <xQueueGenericReceive>
    2368:	2801      	cmp	r0, #1
    236a:	d000      	beq.n	236e <prvHighPriorityMutexTask+0x22>
		{
			xErrorDetected = pdTRUE;
    236c:	6035      	str	r5, [r6, #0]
		}

		/* When we eventually obtain the mutex we just give it back then
		return to suspend ready for the next test. */
		if( xSemaphoreGive( xMutex ) != pdPASS )
    236e:	2100      	movs	r1, #0
    2370:	1c20      	adds	r0, r4, #0
    2372:	1c0a      	adds	r2, r1, #0
    2374:	1c0b      	adds	r3, r1, #0
    2376:	f000 fe4d 	bl	3014 <xQueueGenericSend>
    237a:	2801      	cmp	r0, #1
    237c:	d0ea      	beq.n	2354 <prvHighPriorityMutexTask+0x8>
		{
			xErrorDetected = pdTRUE;
    237e:	6035      	str	r5, [r6, #0]
    2380:	e7e8      	b.n	2354 <prvHighPriorityMutexTask+0x8>
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	40000a14 	.word	0x40000a14

00002388 <prvLowPriorityMutexTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
    2388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    238a:	465f      	mov	r7, fp
    238c:	4656      	mov	r6, sl
    238e:	464d      	mov	r5, r9
    2390:	4644      	mov	r4, r8
    2392:	b4f0      	push	{r4, r5, r6, r7}
    2394:	4a29      	ldr	r2, [pc, #164]	; (243c <prvLowPriorityMutexTask+0xb4>)
    2396:	4b2a      	ldr	r3, [pc, #168]	; (2440 <prvLowPriorityMutexTask+0xb8>)
    2398:	4690      	mov	r8, r2
    239a:	4d2a      	ldr	r5, [pc, #168]	; (2444 <prvLowPriorityMutexTask+0xbc>)
	#endif

	for( ;; )
	{
		/* Take the mutex.  It should be available now. */
		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
    239c:	2200      	movs	r2, #0
    239e:	4e2a      	ldr	r6, [pc, #168]	; (2448 <prvLowPriorityMutexTask+0xc0>)
    23a0:	4f2a      	ldr	r7, [pc, #168]	; (244c <prvLowPriorityMutexTask+0xc4>)
	}
}
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
    23a2:	4682      	mov	sl, r0
    23a4:	4699      	mov	r9, r3
	#endif

	for( ;; )
	{
		/* Take the mutex.  It should be available now. */
		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
    23a6:	4693      	mov	fp, r2
		{
			xErrorDetected = pdTRUE;
    23a8:	2401      	movs	r4, #1
	#endif

	for( ;; )
	{
		/* Take the mutex.  It should be available now. */
		if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
    23aa:	2100      	movs	r1, #0
    23ac:	4650      	mov	r0, sl
    23ae:	1c0a      	adds	r2, r1, #0
    23b0:	1c0b      	adds	r3, r1, #0
    23b2:	f000 feff 	bl	31b4 <xQueueGenericReceive>
    23b6:	2801      	cmp	r0, #1
    23b8:	d000      	beq.n	23bc <prvLowPriorityMutexTask+0x34>
		{
			xErrorDetected = pdTRUE;
    23ba:	602c      	str	r4, [r5, #0]
		}

		/* Set our guarded variable to a known start value. */
		ulGuardedVariable = 0;
    23bc:	465b      	mov	r3, fp
    23be:	6033      	str	r3, [r6, #0]

		/* Our priority should be as per that assigned when the task was
		created. */
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
    23c0:	2000      	movs	r0, #0
    23c2:	f001 f97f 	bl	36c4 <uxTaskPriorityGet>
    23c6:	2800      	cmp	r0, #0
    23c8:	d000      	beq.n	23cc <prvLowPriorityMutexTask+0x44>
		{
			xErrorDetected = pdTRUE;
    23ca:	602c      	str	r4, [r5, #0]
		}

		/* Now unsuspend the high priority task.  This will attempt to take the
		mutex, and block when it finds it cannot obtain it. */
		vTaskResume( xHighPriorityMutexTask );
    23cc:	6838      	ldr	r0, [r7, #0]
    23ce:	f001 f9ed 	bl	37ac <vTaskResume>

		/* We should now have inherited the prioritoy of the high priority task,
		as by now it will have attempted to get the mutex. */
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
    23d2:	2000      	movs	r0, #0
    23d4:	f001 f976 	bl	36c4 <uxTaskPriorityGet>
    23d8:	2803      	cmp	r0, #3
    23da:	d000      	beq.n	23de <prvLowPriorityMutexTask+0x56>
		{
			xErrorDetected = pdTRUE;
    23dc:	602c      	str	r4, [r5, #0]
		}

		/* We can attempt to set our priority to the test priority - between the
		idle priority and the medium/high test priorities, but our actual
		prioroity should remain at the high priority. */
		vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
    23de:	2000      	movs	r0, #0
    23e0:	2101      	movs	r1, #1
    23e2:	f001 f981 	bl	36e8 <vTaskPrioritySet>
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
    23e6:	2000      	movs	r0, #0
    23e8:	f001 f96c 	bl	36c4 <uxTaskPriorityGet>
    23ec:	2803      	cmp	r0, #3
    23ee:	d000      	beq.n	23f2 <prvLowPriorityMutexTask+0x6a>
		{
			xErrorDetected = pdTRUE;
    23f0:	602c      	str	r4, [r5, #0]
		}

		/* Now unsuspend the medium priority task.  This should not run as our
		inherited priority is above that of the medium priority task. */
		vTaskResume( xMediumPriorityMutexTask );
    23f2:	4642      	mov	r2, r8
    23f4:	6810      	ldr	r0, [r2, #0]
    23f6:	f001 f9d9 	bl	37ac <vTaskResume>

		/* If the did run then it will have incremented our guarded variable. */
		if( ulGuardedVariable != 0 )
    23fa:	6830      	ldr	r0, [r6, #0]
    23fc:	2800      	cmp	r0, #0
    23fe:	d000      	beq.n	2402 <prvLowPriorityMutexTask+0x7a>
		{
			xErrorDetected = pdTRUE;
    2400:	602c      	str	r4, [r5, #0]
		/* When we give back the semaphore our priority should be disinherited
		back to the priority to which we attempted to set ourselves.  This means
		that when the high priority task next blocks, the medium priority task
		should execute and increment the guarded variable.   When we next run
		both the high and medium priority tasks will have been suspended again. */
		if( xSemaphoreGive( xMutex ) != pdPASS )
    2402:	2100      	movs	r1, #0
    2404:	4650      	mov	r0, sl
    2406:	1c0a      	adds	r2, r1, #0
    2408:	1c0b      	adds	r3, r1, #0
    240a:	f000 fe03 	bl	3014 <xQueueGenericSend>
    240e:	2801      	cmp	r0, #1
    2410:	d000      	beq.n	2414 <prvLowPriorityMutexTask+0x8c>
		{
			xErrorDetected = pdTRUE;
    2412:	602c      	str	r4, [r5, #0]
		}

		/* Check that the guarded variable did indeed increment... */
		if( ulGuardedVariable != 1 )
    2414:	6831      	ldr	r1, [r6, #0]
    2416:	2901      	cmp	r1, #1
    2418:	d000      	beq.n	241c <prvLowPriorityMutexTask+0x94>
		{
			xErrorDetected = pdTRUE;
    241a:	602c      	str	r4, [r5, #0]
		}

		/* ... and that our priority has been disinherited to
		genqMUTEX_TEST_PRIORITY. */
		if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
    241c:	2000      	movs	r0, #0
    241e:	f001 f951 	bl	36c4 <uxTaskPriorityGet>
    2422:	2801      	cmp	r0, #1
    2424:	d000      	beq.n	2428 <prvLowPriorityMutexTask+0xa0>
		{
			xErrorDetected = pdTRUE;
    2426:	602c      	str	r4, [r5, #0]
		}

		/* Set our priority back to our original priority ready for the next
		loop around this test. */
		vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
    2428:	2000      	movs	r0, #0
    242a:	1c01      	adds	r1, r0, #0
    242c:	f001 f95c 	bl	36e8 <vTaskPrioritySet>

		/* Just to show we are still running. */
		ulLoopCounter2++;
    2430:	464a      	mov	r2, r9
    2432:	6813      	ldr	r3, [r2, #0]
    2434:	3301      	adds	r3, #1
    2436:	6013      	str	r3, [r2, #0]

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif		
	}
    2438:	e7b7      	b.n	23aa <prvLowPriorityMutexTask+0x22>
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	40000a10 	.word	0x40000a10
    2440:	400009fc 	.word	0x400009fc
    2444:	40000a14 	.word	0x40000a14
    2448:	40000a0c 	.word	0x40000a0c
    244c:	40000a00 	.word	0x40000a00

00002450 <prvSendFrontAndBackTest>:
	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
}
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
    2450:	b5f0      	push	{r4, r5, r6, r7, lr}
    2452:	464f      	mov	r7, r9
    2454:	4646      	mov	r6, r8
    2456:	b4c0      	push	{r6, r7}
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    2458:	2300      	movs	r3, #0
    245a:	4698      	mov	r8, r3
    245c:	4f87      	ldr	r7, [pc, #540]	; (267c <prvSendFrontAndBackTest+0x22c>)
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    245e:	3302      	adds	r3, #2
    2460:	4e87      	ldr	r6, [pc, #540]	; (2680 <prvSendFrontAndBackTest+0x230>)
	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
}
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
    2462:	b083      	sub	sp, #12
    2464:	1c04      	adds	r4, r0, #0
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    2466:	2501      	movs	r5, #1
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    2468:	4699      	mov	r9, r3
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    246a:	1c20      	adds	r0, r4, #0
    246c:	1c39      	adds	r1, r7, #0
    246e:	2200      	movs	r2, #0
    2470:	2301      	movs	r3, #1
    2472:	f000 fdcf 	bl	3014 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    2476:	1c20      	adds	r0, r4, #0
    2478:	f000 ff80 	bl	337c <uxQueueMessagesWaiting>
    247c:	2801      	cmp	r0, #1
    247e:	d000      	beq.n	2482 <prvSendFrontAndBackTest+0x32>
		{
			xErrorDetected = pdTRUE;
    2480:	6035      	str	r5, [r6, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
    2482:	2200      	movs	r2, #0
    2484:	1c20      	adds	r0, r4, #0
    2486:	a901      	add	r1, sp, #4
    2488:	1c13      	adds	r3, r2, #0
    248a:	f000 fe93 	bl	31b4 <xQueueGenericReceive>
    248e:	2801      	cmp	r0, #1
    2490:	d000      	beq.n	2494 <prvSendFrontAndBackTest+0x44>
		{
			xErrorDetected = pdTRUE;
    2492:	6035      	str	r5, [r6, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
    2494:	683a      	ldr	r2, [r7, #0]
    2496:	9b01      	ldr	r3, [sp, #4]
    2498:	429a      	cmp	r2, r3
    249a:	d000      	beq.n	249e <prvSendFrontAndBackTest+0x4e>
		{
			xErrorDetected = pdTRUE;
    249c:	6035      	str	r5, [r6, #0]
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    249e:	1c20      	adds	r0, r4, #0
    24a0:	f000 ff6c 	bl	337c <uxQueueMessagesWaiting>
    24a4:	2800      	cmp	r0, #0
    24a6:	d000      	beq.n	24aa <prvSendFrontAndBackTest+0x5a>
		{
			xErrorDetected = pdTRUE;
    24a8:	6035      	str	r5, [r6, #0]
		}

		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
    24aa:	2200      	movs	r2, #0
    24ac:	1c20      	adds	r0, r4, #0
    24ae:	1c39      	adds	r1, r7, #0
    24b0:	1c13      	adds	r3, r2, #0
    24b2:	f000 fdaf 	bl	3014 <xQueueGenericSend>

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    24b6:	1c20      	adds	r0, r4, #0
    24b8:	f000 ff60 	bl	337c <uxQueueMessagesWaiting>
    24bc:	2801      	cmp	r0, #1
    24be:	d000      	beq.n	24c2 <prvSendFrontAndBackTest+0x72>
		{
			xErrorDetected = pdTRUE;
    24c0:	6035      	str	r5, [r6, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
    24c2:	2200      	movs	r2, #0
    24c4:	1c20      	adds	r0, r4, #0
    24c6:	a901      	add	r1, sp, #4
    24c8:	1c13      	adds	r3, r2, #0
    24ca:	f000 fe73 	bl	31b4 <xQueueGenericReceive>
    24ce:	2801      	cmp	r0, #1
    24d0:	d000      	beq.n	24d4 <prvSendFrontAndBackTest+0x84>
		{
			xErrorDetected = pdTRUE;
    24d2:	6035      	str	r5, [r6, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    24d4:	1c20      	adds	r0, r4, #0
    24d6:	f000 ff51 	bl	337c <uxQueueMessagesWaiting>
    24da:	2800      	cmp	r0, #0
    24dc:	d000      	beq.n	24e0 <prvSendFrontAndBackTest+0x90>
		{
			xErrorDetected = pdTRUE;
    24de:	6035      	str	r5, [r6, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
    24e0:	6838      	ldr	r0, [r7, #0]
    24e2:	9b01      	ldr	r3, [sp, #4]
    24e4:	4298      	cmp	r0, r3
    24e6:	d000      	beq.n	24ea <prvSendFrontAndBackTest+0x9a>
		{
			xErrorDetected = pdTRUE;
    24e8:	6035      	str	r5, [r6, #0]
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    24ea:	464b      	mov	r3, r9
    24ec:	9301      	str	r3, [sp, #4]
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    24ee:	2200      	movs	r2, #0
    24f0:	a901      	add	r1, sp, #4
    24f2:	1c20      	adds	r0, r4, #0
    24f4:	1c13      	adds	r3, r2, #0
    24f6:	f000 fd8d 	bl	3014 <xQueueGenericSend>
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
    24fa:	9901      	ldr	r1, [sp, #4]
    24fc:	3101      	adds	r1, #1
    24fe:	9101      	str	r1, [sp, #4]
    2500:	2904      	cmp	r1, #4
    2502:	d9f4      	bls.n	24ee <prvSendFrontAndBackTest+0x9e>
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
    2504:	1c20      	adds	r0, r4, #0
    2506:	f000 ff39 	bl	337c <uxQueueMessagesWaiting>
    250a:	2803      	cmp	r0, #3
    250c:	d000      	beq.n	2510 <prvSendFrontAndBackTest+0xc0>
		{
			xErrorDetected = pdTRUE;
    250e:	6035      	str	r5, [r6, #0]
		}
		ulData = 1;
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    2510:	a901      	add	r1, sp, #4
    2512:	2200      	movs	r2, #0
    2514:	1c2b      	adds	r3, r5, #0
    2516:	1c20      	adds	r0, r4, #0
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
		{
			xErrorDetected = pdTRUE;
		}
		ulData = 1;
    2518:	9501      	str	r5, [sp, #4]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    251a:	f000 fd7b 	bl	3014 <xQueueGenericSend>
		ulData = 0;
    251e:	4643      	mov	r3, r8
    2520:	9301      	str	r3, [sp, #4]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
    2522:	1c20      	adds	r0, r4, #0
    2524:	a901      	add	r1, sp, #4
    2526:	4642      	mov	r2, r8
    2528:	1c2b      	adds	r3, r5, #0
    252a:	f000 fd73 	bl	3014 <xQueueGenericSend>

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
    252e:	1c20      	adds	r0, r4, #0
    2530:	f000 ff24 	bl	337c <uxQueueMessagesWaiting>
    2534:	2805      	cmp	r0, #5
    2536:	d000      	beq.n	253a <prvSendFrontAndBackTest+0xea>
		{
			xErrorDetected = pdTRUE;
    2538:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    253a:	1c20      	adds	r0, r4, #0
    253c:	a901      	add	r1, sp, #4
    253e:	2200      	movs	r2, #0
    2540:	2301      	movs	r3, #1
    2542:	f000 fd67 	bl	3014 <xQueueGenericSend>
    2546:	2800      	cmp	r0, #0
    2548:	d000      	beq.n	254c <prvSendFrontAndBackTest+0xfc>
		{
			xErrorDetected = pdTRUE;
    254a:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    254c:	2200      	movs	r2, #0
    254e:	1c20      	adds	r0, r4, #0
    2550:	a901      	add	r1, sp, #4
    2552:	1c13      	adds	r3, r2, #0
    2554:	f000 fd5e 	bl	3014 <xQueueGenericSend>
    2558:	2800      	cmp	r0, #0
    255a:	d100      	bne.n	255e <prvSendFrontAndBackTest+0x10e>
    255c:	e08c      	b.n	2678 <prvSendFrontAndBackTest+0x228>
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    255e:	4643      	mov	r3, r8
			xErrorDetected = pdTRUE;
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
		{
			xErrorDetected = pdTRUE;
    2560:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    2562:	9301      	str	r3, [sp, #4]
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2564:	1c20      	adds	r0, r4, #0
    2566:	4669      	mov	r1, sp
    2568:	2200      	movs	r2, #0
    256a:	2301      	movs	r3, #1
    256c:	f000 fe22 	bl	31b4 <xQueueGenericReceive>
    2570:	2801      	cmp	r0, #1
    2572:	d000      	beq.n	2576 <prvSendFrontAndBackTest+0x126>
			{
				xErrorDetected = pdTRUE;
    2574:	6035      	str	r5, [r6, #0]
			}

			if( ulData != ulData2 )
    2576:	9b00      	ldr	r3, [sp, #0]
    2578:	9a01      	ldr	r2, [sp, #4]
    257a:	429a      	cmp	r2, r3
    257c:	d000      	beq.n	2580 <prvSendFrontAndBackTest+0x130>
			{
				xErrorDetected = pdTRUE;
    257e:	6035      	str	r5, [r6, #0]
			}
			

			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
    2580:	43d8      	mvns	r0, r3
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2582:	2200      	movs	r2, #0
			}
			

			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
    2584:	9000      	str	r0, [sp, #0]
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2586:	4669      	mov	r1, sp
    2588:	1c20      	adds	r0, r4, #0
    258a:	1c13      	adds	r3, r2, #0
    258c:	f000 fe12 	bl	31b4 <xQueueGenericReceive>
    2590:	2801      	cmp	r0, #1
    2592:	d000      	beq.n	2596 <prvSendFrontAndBackTest+0x146>
			{
				xErrorDetected = pdTRUE;
    2594:	6035      	str	r5, [r6, #0]
			}

			if( ulData != ulData2 )
    2596:	9b01      	ldr	r3, [sp, #4]
    2598:	9a00      	ldr	r2, [sp, #0]
    259a:	4293      	cmp	r3, r2
    259c:	d000      	beq.n	25a0 <prvSendFrontAndBackTest+0x150>
			{
				xErrorDetected = pdTRUE;
    259e:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    25a0:	3301      	adds	r3, #1
    25a2:	9301      	str	r3, [sp, #4]
    25a4:	2b04      	cmp	r3, #4
    25a6:	d9dd      	bls.n	2564 <prvSendFrontAndBackTest+0x114>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    25a8:	1c20      	adds	r0, r4, #0
    25aa:	f000 fee7 	bl	337c <uxQueueMessagesWaiting>
    25ae:	2800      	cmp	r0, #0
    25b0:	d000      	beq.n	25b4 <prvSendFrontAndBackTest+0x164>
		{
			xErrorDetected = pdTRUE;
    25b2:	6035      	str	r5, [r6, #0]
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
    25b4:	210a      	movs	r1, #10
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    25b6:	2200      	movs	r2, #0
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
    25b8:	9101      	str	r1, [sp, #4]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    25ba:	1c20      	adds	r0, r4, #0
    25bc:	a901      	add	r1, sp, #4
    25be:	1c13      	adds	r3, r2, #0
    25c0:	f000 fd28 	bl	3014 <xQueueGenericSend>
    25c4:	2801      	cmp	r0, #1
    25c6:	d000      	beq.n	25ca <prvSendFrontAndBackTest+0x17a>
		{
			xErrorDetected = pdTRUE;
    25c8:	6035      	str	r5, [r6, #0]
		}
		ulData = 11;
    25ca:	230b      	movs	r3, #11
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    25cc:	2200      	movs	r2, #0
		ulData = 10;
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
		{
			xErrorDetected = pdTRUE;
		}
		ulData = 11;
    25ce:	9301      	str	r3, [sp, #4]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
    25d0:	1c20      	adds	r0, r4, #0
    25d2:	a901      	add	r1, sp, #4
    25d4:	1c13      	adds	r3, r2, #0
    25d6:	f000 fd1d 	bl	3014 <xQueueGenericSend>
    25da:	2801      	cmp	r0, #1
    25dc:	d000      	beq.n	25e0 <prvSendFrontAndBackTest+0x190>
		{
			xErrorDetected = pdTRUE;
    25de:	6035      	str	r5, [r6, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
    25e0:	1c20      	adds	r0, r4, #0
    25e2:	f000 fecb 	bl	337c <uxQueueMessagesWaiting>
    25e6:	2802      	cmp	r0, #2
    25e8:	d000      	beq.n	25ec <prvSendFrontAndBackTest+0x19c>
		{
			xErrorDetected = pdTRUE;
    25ea:	6035      	str	r5, [r6, #0]
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
    25ec:	2009      	movs	r0, #9
    25ee:	9001      	str	r0, [sp, #4]
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
    25f0:	1c20      	adds	r0, r4, #0
    25f2:	a901      	add	r1, sp, #4
    25f4:	2200      	movs	r2, #0
    25f6:	2301      	movs	r3, #1
    25f8:	f000 fd0c 	bl	3014 <xQueueGenericSend>
    25fc:	2801      	cmp	r0, #1
    25fe:	d000      	beq.n	2602 <prvSendFrontAndBackTest+0x1b2>
			{
				xErrorDetected = pdTRUE;
    2600:	6035      	str	r5, [r6, #0]
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
    2602:	9a01      	ldr	r2, [sp, #4]
    2604:	3a01      	subs	r2, #1
    2606:	9201      	str	r2, [sp, #4]
    2608:	2a06      	cmp	r2, #6
    260a:	d8f1      	bhi.n	25f0 <prvSendFrontAndBackTest+0x1a0>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
    260c:	1c20      	adds	r0, r4, #0
    260e:	f000 feb5 	bl	337c <uxQueueMessagesWaiting>
    2612:	2805      	cmp	r0, #5
    2614:	d000      	beq.n	2618 <prvSendFrontAndBackTest+0x1c8>
		{
			xErrorDetected = pdTRUE;
    2616:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    2618:	1c20      	adds	r0, r4, #0
    261a:	a901      	add	r1, sp, #4
    261c:	2200      	movs	r2, #0
    261e:	2301      	movs	r3, #1
    2620:	f000 fcf8 	bl	3014 <xQueueGenericSend>
    2624:	2800      	cmp	r0, #0
    2626:	d000      	beq.n	262a <prvSendFrontAndBackTest+0x1da>
		{
			xErrorDetected = pdTRUE;
    2628:	6035      	str	r5, [r6, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
    262a:	2200      	movs	r2, #0
    262c:	1c20      	adds	r0, r4, #0
    262e:	a901      	add	r1, sp, #4
    2630:	1c13      	adds	r3, r2, #0
    2632:	f000 fcef 	bl	3014 <xQueueGenericSend>
    2636:	2800      	cmp	r0, #0
    2638:	d000      	beq.n	263c <prvSendFrontAndBackTest+0x1ec>
		{
			xErrorDetected = pdTRUE;
    263a:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
    263c:	2107      	movs	r1, #7
    263e:	9101      	str	r1, [sp, #4]
		{
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
    2640:	2200      	movs	r2, #0
    2642:	1c20      	adds	r0, r4, #0
    2644:	4669      	mov	r1, sp
    2646:	1c13      	adds	r3, r2, #0
    2648:	f000 fdb4 	bl	31b4 <xQueueGenericReceive>
    264c:	2801      	cmp	r0, #1
    264e:	d000      	beq.n	2652 <prvSendFrontAndBackTest+0x202>
			{
				xErrorDetected = pdTRUE;
    2650:	6035      	str	r5, [r6, #0]
			}

			if( ulData != ulData2 )
    2652:	9b01      	ldr	r3, [sp, #4]
    2654:	9a00      	ldr	r2, [sp, #0]
    2656:	4293      	cmp	r3, r2
    2658:	d000      	beq.n	265c <prvSendFrontAndBackTest+0x20c>
			{
				xErrorDetected = pdTRUE;
    265a:	6035      	str	r5, [r6, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
    265c:	3301      	adds	r3, #1
    265e:	9301      	str	r3, [sp, #4]
    2660:	2b0b      	cmp	r3, #11
    2662:	d9ed      	bls.n	2640 <prvSendFrontAndBackTest+0x1f0>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    2664:	1c20      	adds	r0, r4, #0
    2666:	f000 fe89 	bl	337c <uxQueueMessagesWaiting>
    266a:	2800      	cmp	r0, #0
    266c:	d000      	beq.n	2670 <prvSendFrontAndBackTest+0x220>
		{
			xErrorDetected = pdTRUE;
    266e:	6035      	str	r5, [r6, #0]
		}

		ulLoopCounter++;
    2670:	683b      	ldr	r3, [r7, #0]
    2672:	3301      	adds	r3, #1
    2674:	603b      	str	r3, [r7, #0]
	}
    2676:	e6f8      	b.n	246a <prvSendFrontAndBackTest+0x1a>
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
    2678:	9001      	str	r0, [sp, #4]
    267a:	e773      	b.n	2564 <prvSendFrontAndBackTest+0x114>
    267c:	40000a18 	.word	0x40000a18
    2680:	40000a14 	.word	0x40000a14

00002684 <vStartGenericQueueTasks>:
static xTaskHandle xHighPriorityMutexTask, xMediumPriorityMutexTask;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( unsigned portBASE_TYPE uxPriority )
{
    2684:	b530      	push	{r4, r5, lr}
    2686:	b085      	sub	sp, #20
    2688:	1c05      	adds	r5, r0, #0
xQueueHandle xQueue;
xSemaphoreHandle xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
    268a:	2104      	movs	r1, #4
    268c:	2005      	movs	r0, #5
    268e:	f000 fc85 	bl	2f9c <xQueueCreate>
	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "Gen_Queue_Test" );

	/* Create the demo task and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is
	declared on the stack here. */
	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * )"GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
    2692:	2400      	movs	r4, #0
xQueueHandle xQueue;
xSemaphoreHandle xMutex;

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( unsigned portLONG ) );
    2694:	1c03      	adds	r3, r0, #0
	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "Gen_Queue_Test" );

	/* Create the demo task and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is
	declared on the stack here. */
	xTaskCreate( prvSendFrontAndBackTest, ( signed portCHAR * )"GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
    2696:	4919      	ldr	r1, [pc, #100]	; (26fc <vStartGenericQueueTasks+0x78>)
    2698:	2268      	movs	r2, #104	; 0x68
    269a:	4819      	ldr	r0, [pc, #100]	; (2700 <vStartGenericQueueTasks+0x7c>)
    269c:	9500      	str	r5, [sp, #0]
    269e:	9401      	str	r4, [sp, #4]
    26a0:	9402      	str	r4, [sp, #8]
    26a2:	9403      	str	r4, [sp, #12]
    26a4:	f000 fee0 	bl	3468 <xTaskGenericCreate>

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
    26a8:	f000 fd3c 	bl	3124 <xQueueCreateMutex>
    26ac:	1c05      	adds	r5, r0, #0
	vQueueAddToRegistry( ( xQueueHandle ) xMutex, ( signed portCHAR * ) "Gen_Queue_Mutex" );

	/* Create the mutex demo tasks and pass it the mutex just created.  We are
	passing the mutex handle by value so it does not matter that it is declared
	on the stack here. */
	xTaskCreate( prvLowPriorityMutexTask, ( signed portCHAR * )"MuLow", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
    26ae:	1c2b      	adds	r3, r5, #0
    26b0:	4914      	ldr	r1, [pc, #80]	; (2704 <vStartGenericQueueTasks+0x80>)
    26b2:	2268      	movs	r2, #104	; 0x68
    26b4:	4814      	ldr	r0, [pc, #80]	; (2708 <vStartGenericQueueTasks+0x84>)
    26b6:	9400      	str	r4, [sp, #0]
    26b8:	9401      	str	r4, [sp, #4]
    26ba:	9402      	str	r4, [sp, #8]
    26bc:	9403      	str	r4, [sp, #12]
    26be:	f000 fed3 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( prvMediumPriorityMutexTask, ( signed portCHAR * )"MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
    26c2:	4912      	ldr	r1, [pc, #72]	; (270c <vStartGenericQueueTasks+0x88>)
    26c4:	2202      	movs	r2, #2
    26c6:	9200      	str	r2, [sp, #0]
    26c8:	9101      	str	r1, [sp, #4]
    26ca:	1c23      	adds	r3, r4, #0
    26cc:	4910      	ldr	r1, [pc, #64]	; (2710 <vStartGenericQueueTasks+0x8c>)
    26ce:	2268      	movs	r2, #104	; 0x68
    26d0:	4810      	ldr	r0, [pc, #64]	; (2714 <vStartGenericQueueTasks+0x90>)
    26d2:	9402      	str	r4, [sp, #8]
    26d4:	9403      	str	r4, [sp, #12]
    26d6:	f000 fec7 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( prvHighPriorityMutexTask, ( signed portCHAR * )"MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
    26da:	4b0f      	ldr	r3, [pc, #60]	; (2718 <vStartGenericQueueTasks+0x94>)
    26dc:	2003      	movs	r0, #3
    26de:	9000      	str	r0, [sp, #0]
    26e0:	9301      	str	r3, [sp, #4]
    26e2:	490e      	ldr	r1, [pc, #56]	; (271c <vStartGenericQueueTasks+0x98>)
    26e4:	1c2b      	adds	r3, r5, #0
    26e6:	2268      	movs	r2, #104	; 0x68
    26e8:	480d      	ldr	r0, [pc, #52]	; (2720 <vStartGenericQueueTasks+0x9c>)
    26ea:	9402      	str	r4, [sp, #8]
    26ec:	9403      	str	r4, [sp, #12]
    26ee:	f000 febb 	bl	3468 <xTaskGenericCreate>
}
    26f2:	b005      	add	sp, #20
    26f4:	bc30      	pop	{r4, r5}
    26f6:	bc01      	pop	{r0}
    26f8:	4700      	bx	r0
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	0000e86c 	.word	0x0000e86c
    2700:	00002451 	.word	0x00002451
    2704:	0000e874 	.word	0x0000e874
    2708:	00002389 	.word	0x00002389
    270c:	40000a10 	.word	0x40000a10
    2710:	0000e87c 	.word	0x0000e87c
    2714:	00002335 	.word	0x00002335
    2718:	40000a00 	.word	0x40000a00
    271c:	0000e884 	.word	0x0000e884
    2720:	0000234d 	.word	0x0000234d

00002724 <xAreGenericQueueTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreGenericQueueTasksStillRunning( void )
{
    2724:	b570      	push	{r4, r5, r6, lr}
static unsigned portLONG ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loopcounters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
    2726:	4c0f      	ldr	r4, [pc, #60]	; (2764 <xAreGenericQueueTasksStillRunning+0x40>)
    2728:	490f      	ldr	r1, [pc, #60]	; (2768 <xAreGenericQueueTasksStillRunning+0x44>)
    272a:	6823      	ldr	r3, [r4, #0]
    272c:	680a      	ldr	r2, [r1, #0]
    272e:	429a      	cmp	r2, r3
    2730:	d014      	beq.n	275c <xAreGenericQueueTasksStillRunning+0x38>
    2732:	480e      	ldr	r0, [pc, #56]	; (276c <xAreGenericQueueTasksStillRunning+0x48>)
	{
		xErrorDetected = pdTRUE;
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
    2734:	4a0e      	ldr	r2, [pc, #56]	; (2770 <xAreGenericQueueTasksStillRunning+0x4c>)
    2736:	4b0f      	ldr	r3, [pc, #60]	; (2774 <xAreGenericQueueTasksStillRunning+0x50>)
    2738:	6815      	ldr	r5, [r2, #0]
    273a:	681e      	ldr	r6, [r3, #0]
    273c:	42ae      	cmp	r6, r5
    273e:	d009      	beq.n	2754 <xAreGenericQueueTasksStillRunning+0x30>
    2740:	6800      	ldr	r0, [r0, #0]
    2742:	4245      	negs	r5, r0
    2744:	4168      	adcs	r0, r5
	{
		xErrorDetected = pdTRUE;
	}

	ulLastLoopCounter = ulLoopCounter;
    2746:	6824      	ldr	r4, [r4, #0]
    2748:	600c      	str	r4, [r1, #0]
	ulLastLoopCounter2 = ulLoopCounter2;	
    274a:	6811      	ldr	r1, [r2, #0]
    274c:	6019      	str	r1, [r3, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return !xErrorDetected;
}
    274e:	bc70      	pop	{r4, r5, r6}
    2750:	bc02      	pop	{r1}
    2752:	4708      	bx	r1
		xErrorDetected = pdTRUE;
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
	{
		xErrorDetected = pdTRUE;
    2754:	2501      	movs	r5, #1
    2756:	6005      	str	r5, [r0, #0]
    2758:	2000      	movs	r0, #0
    275a:	e7f4      	b.n	2746 <xAreGenericQueueTasksStillRunning+0x22>

	/* If the demo task is still running then we expect the loopcounters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
	{
		xErrorDetected = pdTRUE;
    275c:	4803      	ldr	r0, [pc, #12]	; (276c <xAreGenericQueueTasksStillRunning+0x48>)
    275e:	2501      	movs	r5, #1
    2760:	6005      	str	r5, [r0, #0]
    2762:	e7e7      	b.n	2734 <xAreGenericQueueTasksStillRunning+0x10>
    2764:	40000a18 	.word	0x40000a18
    2768:	40000a08 	.word	0x40000a08
    276c:	40000a14 	.word	0x40000a14
    2770:	400009fc 	.word	0x400009fc
    2774:	40000a04 	.word	0x40000a04

00002778 <prvHighestPriorityPeekTask>:
	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
}
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
    2778:	b5f0      	push	{r4, r5, r6, r7, lr}
    277a:	4d29      	ldr	r5, [pc, #164]	; (2820 <prvHighestPriorityPeekTask+0xa8>)
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
    277c:	4f29      	ldr	r7, [pc, #164]	; (2824 <prvHighestPriorityPeekTask+0xac>)
	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
}
/*-----------------------------------------------------------*/

static void prvHighestPriorityPeekTask( void *pvParameters )
{
    277e:	b083      	sub	sp, #12
    2780:	1c06      	adds	r6, r0, #0

	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the high priority task to execute. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    2782:	2401      	movs	r4, #1
    2784:	2201      	movs	r2, #1
    2786:	1c30      	adds	r0, r6, #0
    2788:	a901      	add	r1, sp, #4
    278a:	4252      	negs	r2, r2
    278c:	2301      	movs	r3, #1
    278e:	f000 fd11 	bl	31b4 <xQueueGenericReceive>
    2792:	2801      	cmp	r0, #1
    2794:	d000      	beq.n	2798 <prvHighestPriorityPeekTask+0x20>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    2796:	602c      	str	r4, [r5, #0]
		be blocked on the queue.  We unblocked because the low priority task
		wrote a value to the queue, which we should have peeked.  Peeking the
		data (rather than receiving it) will leave the data on the queue, so
		the high priority task should then have also been unblocked, but not
		yet executed. */
		if( ulValue != 0x11223344 )
    2798:	9b01      	ldr	r3, [sp, #4]
    279a:	42bb      	cmp	r3, r7
    279c:	d000      	beq.n	27a0 <prvHighestPriorityPeekTask+0x28>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    279e:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    27a0:	1c30      	adds	r0, r6, #0
    27a2:	f000 fdeb 	bl	337c <uxQueueMessagesWaiting>
    27a6:	2801      	cmp	r0, #1
    27a8:	d000      	beq.n	27ac <prvHighestPriorityPeekTask+0x34>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    27aa:	602c      	str	r4, [r5, #0]
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
    27ac:	2300      	movs	r3, #0
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    27ae:	1c30      	adds	r0, r6, #0
    27b0:	a901      	add	r1, sp, #4
    27b2:	1c1a      	adds	r2, r3, #0
		}

		/* Now we are going to actually receive the data, so when the high
		priority task runs it will find the queue empty and return to the
		blocked state. */
		ulValue = 0;
    27b4:	9301      	str	r3, [sp, #4]
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    27b6:	f000 fcfd 	bl	31b4 <xQueueGenericReceive>
    27ba:	2801      	cmp	r0, #1
    27bc:	d000      	beq.n	27c0 <prvHighestPriorityPeekTask+0x48>
		{
			/* We expected to receive the value. */
			xErrorDetected = pdTRUE;
    27be:	602c      	str	r4, [r5, #0]
		}

		if( ulValue != 0x11223344 )
    27c0:	9801      	ldr	r0, [sp, #4]
    27c2:	42b8      	cmp	r0, r7
    27c4:	d000      	beq.n	27c8 <prvHighestPriorityPeekTask+0x50>
		{
			/* We did not receive the expected value - which should have been
			the same value as was peeked. */
			xErrorDetected = pdTRUE;
    27c6:	602c      	str	r4, [r5, #0]
		}

		/* Now we will block again as the queue is once more empty.  The low 
		priority task can then execute again. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    27c8:	2201      	movs	r2, #1
    27ca:	1c30      	adds	r0, r6, #0
    27cc:	a901      	add	r1, sp, #4
    27ce:	4252      	negs	r2, r2
    27d0:	2301      	movs	r3, #1
    27d2:	f000 fcef 	bl	31b4 <xQueueGenericReceive>
    27d6:	2801      	cmp	r0, #1
    27d8:	d000      	beq.n	27dc <prvHighestPriorityPeekTask+0x64>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    27da:	602c      	str	r4, [r5, #0]
		}

		/* When we get here the low priority task should have again written to the
		queue. */
		if( ulValue != 0x01234567 )
    27dc:	9901      	ldr	r1, [sp, #4]
    27de:	4b12      	ldr	r3, [pc, #72]	; (2828 <prvHighestPriorityPeekTask+0xb0>)
    27e0:	4299      	cmp	r1, r3
    27e2:	d000      	beq.n	27e6 <prvHighestPriorityPeekTask+0x6e>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    27e4:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    27e6:	1c30      	adds	r0, r6, #0
    27e8:	f000 fdc8 	bl	337c <uxQueueMessagesWaiting>
    27ec:	2801      	cmp	r0, #1
    27ee:	d000      	beq.n	27f2 <prvHighestPriorityPeekTask+0x7a>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    27f0:	602c      	str	r4, [r5, #0]

		/* We only peeked the data, so suspending ourselves now should enable
		the high priority task to also peek the data.  The high priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
    27f2:	2000      	movs	r0, #0
    27f4:	f001 fb5a 	bl	3eac <vTaskSuspend>


		/* This time we are going to do the same as the above test, but the
		high priority task is going to receive the data, rather than peek it.
		This means that the medium priority task should never peek the value. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    27f8:	2201      	movs	r2, #1
    27fa:	1c30      	adds	r0, r6, #0
    27fc:	a901      	add	r1, sp, #4
    27fe:	4252      	negs	r2, r2
    2800:	2301      	movs	r3, #1
    2802:	f000 fcd7 	bl	31b4 <xQueueGenericReceive>
    2806:	2801      	cmp	r0, #1
    2808:	d000      	beq.n	280c <prvHighestPriorityPeekTask+0x94>
		{
			xErrorDetected = pdTRUE;
    280a:	602c      	str	r4, [r5, #0]
		}

		if( ulValue != 0xaabbaabb )
    280c:	9801      	ldr	r0, [sp, #4]
    280e:	4b07      	ldr	r3, [pc, #28]	; (282c <prvHighestPriorityPeekTask+0xb4>)
    2810:	4298      	cmp	r0, r3
    2812:	d000      	beq.n	2816 <prvHighestPriorityPeekTask+0x9e>
		{
			xErrorDetected = pdTRUE;
    2814:	602c      	str	r4, [r5, #0]
		}

		vTaskSuspend( NULL );		
    2816:	2000      	movs	r0, #0
    2818:	f001 fb48 	bl	3eac <vTaskSuspend>
	}
    281c:	e7b2      	b.n	2784 <prvHighestPriorityPeekTask+0xc>
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	40000a28 	.word	0x40000a28
    2824:	11223344 	.word	0x11223344
    2828:	01234567 	.word	0x01234567
    282c:	aabbaabb 	.word	0xaabbaabb

00002830 <prvHighPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
    2830:	b5f0      	push	{r4, r5, r6, r7, lr}
    2832:	4d17      	ldr	r5, [pc, #92]	; (2890 <prvHighPriorityPeekTask+0x60>)
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    2834:	4f17      	ldr	r7, [pc, #92]	; (2894 <prvHighPriorityPeekTask+0x64>)
	}
}
/*-----------------------------------------------------------*/

static void prvHighPriorityPeekTask( void *pvParameters )
{
    2836:	b083      	sub	sp, #12
    2838:	1c06      	adds	r6, r0, #0
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the medium priority task to execute.  Both the high
		and highest priority tasks will then be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    283a:	2401      	movs	r4, #1
    283c:	2201      	movs	r2, #1
    283e:	1c30      	adds	r0, r6, #0
    2840:	a901      	add	r1, sp, #4
    2842:	4252      	negs	r2, r2
    2844:	2301      	movs	r3, #1
    2846:	f000 fcb5 	bl	31b4 <xQueueGenericReceive>
    284a:	2801      	cmp	r0, #1
    284c:	d000      	beq.n	2850 <prvHighPriorityPeekTask+0x20>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    284e:	602c      	str	r4, [r5, #0]
		}

		/* When we get here the highest priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    2850:	9b01      	ldr	r3, [sp, #4]
    2852:	42bb      	cmp	r3, r7
    2854:	d000      	beq.n	2858 <prvHighPriorityPeekTask+0x28>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    2856:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    2858:	1c30      	adds	r0, r6, #0
    285a:	f000 fd8f 	bl	337c <uxQueueMessagesWaiting>
    285e:	2801      	cmp	r0, #1
    2860:	d000      	beq.n	2864 <prvHighPriorityPeekTask+0x34>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    2862:	602c      	str	r4, [r5, #0]

		/* We only peeked the data, so suspending ourselves now should enable
		the medium priority task to also peek the data.  The medium priority task
		will have been unblocked when we peeked the data as we left the data
		in the queue. */
		vTaskSuspend( NULL );
    2864:	2000      	movs	r0, #0
    2866:	f001 fb21 	bl	3eac <vTaskSuspend>


		/* This time we are going actually receive the value, so the medium
		priority task will never peek the data - we removed it from the queue. */
		if( xQueueReceive( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    286a:	2201      	movs	r2, #1
    286c:	1c30      	adds	r0, r6, #0
    286e:	a901      	add	r1, sp, #4
    2870:	4252      	negs	r2, r2
    2872:	2300      	movs	r3, #0
    2874:	f000 fc9e 	bl	31b4 <xQueueGenericReceive>
    2878:	2801      	cmp	r0, #1
    287a:	d000      	beq.n	287e <prvHighPriorityPeekTask+0x4e>
		{
			xErrorDetected = pdTRUE;
    287c:	602c      	str	r4, [r5, #0]
		}

		if( ulValue != 0xaabbaabb )
    287e:	9801      	ldr	r0, [sp, #4]
    2880:	4b05      	ldr	r3, [pc, #20]	; (2898 <prvHighPriorityPeekTask+0x68>)
    2882:	4298      	cmp	r0, r3
    2884:	d000      	beq.n	2888 <prvHighPriorityPeekTask+0x58>
		{
			xErrorDetected = pdTRUE;
    2886:	602c      	str	r4, [r5, #0]
		}

		vTaskSuspend( NULL );				
    2888:	2000      	movs	r0, #0
    288a:	f001 fb0f 	bl	3eac <vTaskSuspend>
	}
    288e:	e7d5      	b.n	283c <prvHighPriorityPeekTask+0xc>
    2890:	40000a28 	.word	0x40000a28
    2894:	01234567 	.word	0x01234567
    2898:	aabbaabb 	.word	0xaabbaabb

0000289c <prvMediumPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
    289c:	b5f0      	push	{r4, r5, r6, r7, lr}
    289e:	4647      	mov	r7, r8
    28a0:	b480      	push	{r7}
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    28a2:	4b11      	ldr	r3, [pc, #68]	; (28e8 <prvMediumPriorityPeekTask+0x4c>)
    28a4:	4d11      	ldr	r5, [pc, #68]	; (28ec <prvMediumPriorityPeekTask+0x50>)
    28a6:	4e12      	ldr	r6, [pc, #72]	; (28f0 <prvMediumPriorityPeekTask+0x54>)
	}
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityPeekTask( void *pvParameters )
{
    28a8:	b082      	sub	sp, #8
    28aa:	1c07      	adds	r7, r0, #0
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    28ac:	2401      	movs	r4, #1
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    28ae:	4698      	mov	r8, r3
	for( ;; )
	{
		/* Try peeking from the queue.  The queue should be empty so we will
		block, allowing the low priority task to execute.  The highest, high
		and medium priority tasks will then all be blocked on the queue. */
		if( xQueuePeek( xQueue, &ulValue, portMAX_DELAY ) != pdPASS )
    28b0:	2201      	movs	r2, #1
    28b2:	1c38      	adds	r0, r7, #0
    28b4:	a901      	add	r1, sp, #4
    28b6:	4252      	negs	r2, r2
    28b8:	2301      	movs	r3, #1
    28ba:	f000 fc7b 	bl	31b4 <xQueueGenericReceive>
    28be:	2801      	cmp	r0, #1
    28c0:	d000      	beq.n	28c4 <prvMediumPriorityPeekTask+0x28>
		{
			/* We expected to have received something by the time we unblock. */
			xErrorDetected = pdTRUE;
    28c2:	602c      	str	r4, [r5, #0]
		}

		/* When we get here the high priority task should have peeked the data
		(unblocking this task) then suspended (allowing this task to also peek
		the data). */
		if( ulValue != 0x01234567 )
    28c4:	9801      	ldr	r0, [sp, #4]
    28c6:	4540      	cmp	r0, r8
    28c8:	d000      	beq.n	28cc <prvMediumPriorityPeekTask+0x30>
		{
			/* We did not receive the expected value. */
			xErrorDetected = pdTRUE;
    28ca:	602c      	str	r4, [r5, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
    28cc:	1c38      	adds	r0, r7, #0
    28ce:	f000 fd55 	bl	337c <uxQueueMessagesWaiting>
    28d2:	2801      	cmp	r0, #1
    28d4:	d000      	beq.n	28d8 <prvMediumPriorityPeekTask+0x3c>
		{
			/* The message should have been left on the queue. */
			xErrorDetected = pdTRUE;
    28d6:	602c      	str	r4, [r5, #0]
		}

		/* Just so we know the test is still running. */
		ulLoopCounter++;
    28d8:	6831      	ldr	r1, [r6, #0]
    28da:	3101      	adds	r1, #1
    28dc:	6031      	str	r1, [r6, #0]

		/* Now we can suspend ourselves so the low priority task can execute
		again. */
		vTaskSuspend( NULL );
    28de:	2000      	movs	r0, #0
    28e0:	f001 fae4 	bl	3eac <vTaskSuspend>
	}
    28e4:	e7e4      	b.n	28b0 <prvMediumPriorityPeekTask+0x14>
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	01234567 	.word	0x01234567
    28ec:	40000a28 	.word	0x40000a28
    28f0:	40000a2c 	.word	0x40000a2c

000028f4 <prvLowPriorityPeekTask>:
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
    28f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f6:	465f      	mov	r7, fp
    28f8:	4656      	mov	r6, sl
    28fa:	464d      	mov	r5, r9
    28fc:	4644      	mov	r4, r8
    28fe:	b4f0      	push	{r4, r5, r6, r7}
    2900:	4b31      	ldr	r3, [pc, #196]	; (29c8 <prvLowPriorityPeekTask+0xd4>)
    2902:	4698      	mov	r8, r3

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest 
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
    2904:	4b31      	ldr	r3, [pc, #196]	; (29cc <prvLowPriorityPeekTask+0xd8>)
    2906:	469b      	mov	fp, r3
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2908:	2300      	movs	r3, #0
    290a:	469a      	mov	sl, r3
    290c:	4c30      	ldr	r4, [pc, #192]	; (29d0 <prvLowPriorityPeekTask+0xdc>)
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    290e:	3301      	adds	r3, #1
    2910:	4e30      	ldr	r6, [pc, #192]	; (29d4 <prvLowPriorityPeekTask+0xe0>)
    2912:	4d31      	ldr	r5, [pc, #196]	; (29d8 <prvLowPriorityPeekTask+0xe4>)
	}
}
/*-----------------------------------------------------------*/

static void prvLowPriorityPeekTask( void *pvParameters )
{
    2914:	b083      	sub	sp, #12
    2916:	1c07      	adds	r7, r0, #0
		ulValue = 0x11223344;
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2918:	4699      	mov	r9, r3

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest 
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
    291a:	465b      	mov	r3, fp
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    291c:	2200      	movs	r2, #0

	for( ;; )
	{
		/* Write some data to the queue.  This should unblock the highest 
		priority task that is waiting to peek data from the queue. */
		ulValue = 0x11223344;
    291e:	9301      	str	r3, [sp, #4]
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2920:	1c38      	adds	r0, r7, #0
    2922:	a901      	add	r1, sp, #4
    2924:	1c13      	adds	r3, r2, #0
    2926:	f000 fb75 	bl	3014 <xQueueGenericSend>
    292a:	2801      	cmp	r0, #1
    292c:	d001      	beq.n	2932 <prvLowPriorityPeekTask+0x3e>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    292e:	464b      	mov	r3, r9
    2930:	6023      	str	r3, [r4, #0]
		}

		/* By the time we get here the data should have been removed from
		the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
    2932:	1c38      	adds	r0, r7, #0
    2934:	f000 fd22 	bl	337c <uxQueueMessagesWaiting>
    2938:	2800      	cmp	r0, #0
    293a:	d001      	beq.n	2940 <prvLowPriorityPeekTask+0x4c>
		{
			xErrorDetected = pdTRUE;
    293c:	464b      	mov	r3, r9
    293e:	6023      	str	r3, [r4, #0]
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
    2940:	4826      	ldr	r0, [pc, #152]	; (29dc <prvLowPriorityPeekTask+0xe8>)
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2942:	2200      	movs	r2, #0
			xErrorDetected = pdTRUE;
		}

		/* Write another value to the queue, again waking the highest priority
		task that is blocked on the queue. */
		ulValue = 0x01234567;
    2944:	9001      	str	r0, [sp, #4]
		if( xQueueSendToBack( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2946:	a901      	add	r1, sp, #4
    2948:	1c38      	adds	r0, r7, #0
    294a:	1c13      	adds	r3, r2, #0
    294c:	f000 fb62 	bl	3014 <xQueueGenericSend>
    2950:	2801      	cmp	r0, #1
    2952:	d001      	beq.n	2958 <prvLowPriorityPeekTask+0x64>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    2954:	464b      	mov	r3, r9
    2956:	6023      	str	r3, [r4, #0]
		}

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
    2958:	4653      	mov	r3, sl
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    295a:	1c38      	adds	r0, r7, #0
    295c:	a901      	add	r1, sp, #4
    295e:	4652      	mov	r2, sl
			xErrorDetected = pdTRUE;
		}

		/* All the other tasks should now have successfully peeked the data.
		The data is still in the queue so we should be able to receive it. */
		ulValue = 0;
    2960:	9301      	str	r3, [sp, #4]
		if( xQueueReceive( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    2962:	f000 fc27 	bl	31b4 <xQueueGenericReceive>
    2966:	2801      	cmp	r0, #1
    2968:	d001      	beq.n	296e <prvLowPriorityPeekTask+0x7a>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
    296a:	464b      	mov	r3, r9
    296c:	6023      	str	r3, [r4, #0]
			/* We did not receive the expected value. */
		}
		
		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
    296e:	200a      	movs	r0, #10
    2970:	f001 f9c4 	bl	3cfc <vTaskDelay>
		/* Unsuspend the other tasks so we can repeat the test - this time
		however not all the other tasks will peek the data as the high
		priority task is actually going to remove it from the queue.  Send
		to front is used just to be different.  As the queue is empty it
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
    2974:	4643      	mov	r3, r8
    2976:	6818      	ldr	r0, [r3, #0]
    2978:	f000 ff18 	bl	37ac <vTaskResume>
		vTaskResume( xHighPriorityTask );
    297c:	6830      	ldr	r0, [r6, #0]
    297e:	f000 ff15 	bl	37ac <vTaskResume>
		vTaskResume( xHighestPriorityTask );
    2982:	6828      	ldr	r0, [r5, #0]
    2984:	f000 ff12 	bl	37ac <vTaskResume>

		ulValue = 0xaabbaabb;
    2988:	4915      	ldr	r1, [pc, #84]	; (29e0 <prvLowPriorityPeekTask+0xec>)
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    298a:	1c38      	adds	r0, r7, #0
		makes no difference to the result. */
		vTaskResume( xMediumPriorityTask );
		vTaskResume( xHighPriorityTask );
		vTaskResume( xHighestPriorityTask );

		ulValue = 0xaabbaabb;
    298c:	9101      	str	r1, [sp, #4]
		if( xQueueSendToFront( xQueue, &ulValue, qpeekNO_BLOCK ) != pdPASS )
    298e:	2200      	movs	r2, #0
    2990:	a901      	add	r1, sp, #4
    2992:	2301      	movs	r3, #1
    2994:	f000 fb3e 	bl	3014 <xQueueGenericSend>
    2998:	2801      	cmp	r0, #1
    299a:	d001      	beq.n	29a0 <prvLowPriorityPeekTask+0xac>
		{
			/* We were expecting the queue to be empty so we should not of
			had a problem writing to the queue. */
			xErrorDetected = pdTRUE;
    299c:	464b      	mov	r3, r9
    299e:	6023      	str	r3, [r4, #0]
		}

		/* This time we should find that the queue is empty.  The high priority
		task actually removed the data rather than just peeking it. */
		if( xQueuePeek( xQueue, &ulValue, qpeekNO_BLOCK ) != errQUEUE_EMPTY )
    29a0:	1c38      	adds	r0, r7, #0
    29a2:	a901      	add	r1, sp, #4
    29a4:	2200      	movs	r2, #0
    29a6:	2301      	movs	r3, #1
    29a8:	f000 fc04 	bl	31b4 <xQueueGenericReceive>
    29ac:	2800      	cmp	r0, #0
    29ae:	d001      	beq.n	29b4 <prvLowPriorityPeekTask+0xc0>
		{
			/* We expected to receive the data. */
			xErrorDetected = pdTRUE;
    29b0:	464b      	mov	r3, r9
    29b2:	6023      	str	r3, [r4, #0]
		}

		/* Unsuspend the highest and high priority tasks so we can go back
		and repeat the whole thing.  The medium priority task should not be
		suspended as it was not able to peek the data in this last case. */
		vTaskResume( xHighPriorityTask );
    29b4:	6830      	ldr	r0, [r6, #0]
    29b6:	f000 fef9 	bl	37ac <vTaskResume>
		vTaskResume( xHighestPriorityTask );		
    29ba:	6828      	ldr	r0, [r5, #0]
    29bc:	f000 fef6 	bl	37ac <vTaskResume>

		/* Lets just delay a while as this is an intensive test as we don't
		want to starve other tests of processing time. */
		vTaskDelay( qpeekSHORT_DELAY );
    29c0:	200a      	movs	r0, #10
    29c2:	f001 f99b 	bl	3cfc <vTaskDelay>
	}
    29c6:	e7a8      	b.n	291a <prvLowPriorityPeekTask+0x26>
    29c8:	40000a30 	.word	0x40000a30
    29cc:	11223344 	.word	0x11223344
    29d0:	40000a28 	.word	0x40000a28
    29d4:	40000a24 	.word	0x40000a24
    29d8:	40000a20 	.word	0x40000a20
    29dc:	01234567 	.word	0x01234567
    29e0:	aabbaabb 	.word	0xaabbaabb

000029e4 <vStartQueuePeekTasks>:
/* Handles to the test tasks. */
xTaskHandle xMediumPriorityTask, xHighPriorityTask, xHighestPriorityTask;
/*-----------------------------------------------------------*/

void vStartQueuePeekTasks( void )
{
    29e4:	b530      	push	{r4, r5, lr}
    29e6:	b085      	sub	sp, #20
xQueueHandle xQueue;

	/* Create the queue that we are going to use for the test/demo. */
	xQueue = xQueueCreate( qpeekQUEUE_LENGTH, sizeof( unsigned portLONG ) );
    29e8:	2104      	movs	r1, #4
    29ea:	2005      	movs	r0, #5
    29ec:	f000 fad6 	bl	2f9c <xQueueCreate>
    29f0:	1c05      	adds	r5, r0, #0
	vQueueAddToRegistry( xQueue, ( signed portCHAR * ) "QPeek_Test_Queue" );

	/* Create the demo tasks and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is declared
	on the stack here. */
	xTaskCreate( prvLowPriorityPeekTask, ( signed portCHAR * )"PeekL", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekLOW_PRIORITY, NULL );
    29f2:	2400      	movs	r4, #0
    29f4:	1c2b      	adds	r3, r5, #0
    29f6:	4918      	ldr	r1, [pc, #96]	; (2a58 <vStartQueuePeekTasks+0x74>)
    29f8:	2268      	movs	r2, #104	; 0x68
    29fa:	4818      	ldr	r0, [pc, #96]	; (2a5c <vStartQueuePeekTasks+0x78>)
    29fc:	9400      	str	r4, [sp, #0]
    29fe:	9401      	str	r4, [sp, #4]
    2a00:	9402      	str	r4, [sp, #8]
    2a02:	9403      	str	r4, [sp, #12]
    2a04:	f000 fd30 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( prvMediumPriorityPeekTask, ( signed portCHAR * )"PeekM", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekMEDIUM_PRIORITY, &xMediumPriorityTask );
    2a08:	4b15      	ldr	r3, [pc, #84]	; (2a60 <vStartQueuePeekTasks+0x7c>)
    2a0a:	2001      	movs	r0, #1
    2a0c:	9000      	str	r0, [sp, #0]
    2a0e:	9301      	str	r3, [sp, #4]
    2a10:	4914      	ldr	r1, [pc, #80]	; (2a64 <vStartQueuePeekTasks+0x80>)
    2a12:	1c2b      	adds	r3, r5, #0
    2a14:	2268      	movs	r2, #104	; 0x68
    2a16:	4814      	ldr	r0, [pc, #80]	; (2a68 <vStartQueuePeekTasks+0x84>)
    2a18:	9402      	str	r4, [sp, #8]
    2a1a:	9403      	str	r4, [sp, #12]
    2a1c:	f000 fd24 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( prvHighPriorityPeekTask, ( signed portCHAR * )"PeekH1", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGH_PRIORITY, &xHighPriorityTask );
    2a20:	4912      	ldr	r1, [pc, #72]	; (2a6c <vStartQueuePeekTasks+0x88>)
    2a22:	2202      	movs	r2, #2
    2a24:	1c2b      	adds	r3, r5, #0
    2a26:	9200      	str	r2, [sp, #0]
    2a28:	9101      	str	r1, [sp, #4]
    2a2a:	2268      	movs	r2, #104	; 0x68
    2a2c:	4910      	ldr	r1, [pc, #64]	; (2a70 <vStartQueuePeekTasks+0x8c>)
    2a2e:	4811      	ldr	r0, [pc, #68]	; (2a74 <vStartQueuePeekTasks+0x90>)
    2a30:	9402      	str	r4, [sp, #8]
    2a32:	9403      	str	r4, [sp, #12]
    2a34:	f000 fd18 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( prvHighestPriorityPeekTask, ( signed portCHAR * )"PeekH2", configMINIMAL_STACK_SIZE, ( void * ) xQueue, qpeekHIGHEST_PRIORITY, &xHighestPriorityTask );
    2a38:	4b0f      	ldr	r3, [pc, #60]	; (2a78 <vStartQueuePeekTasks+0x94>)
    2a3a:	2003      	movs	r0, #3
    2a3c:	9000      	str	r0, [sp, #0]
    2a3e:	9301      	str	r3, [sp, #4]
    2a40:	490e      	ldr	r1, [pc, #56]	; (2a7c <vStartQueuePeekTasks+0x98>)
    2a42:	1c2b      	adds	r3, r5, #0
    2a44:	2268      	movs	r2, #104	; 0x68
    2a46:	480e      	ldr	r0, [pc, #56]	; (2a80 <vStartQueuePeekTasks+0x9c>)
    2a48:	9402      	str	r4, [sp, #8]
    2a4a:	9403      	str	r4, [sp, #12]
    2a4c:	f000 fd0c 	bl	3468 <xTaskGenericCreate>
}
    2a50:	b005      	add	sp, #20
    2a52:	bc30      	pop	{r4, r5}
    2a54:	bc01      	pop	{r0}
    2a56:	4700      	bx	r0
    2a58:	0000e88c 	.word	0x0000e88c
    2a5c:	000028f5 	.word	0x000028f5
    2a60:	40000a30 	.word	0x40000a30
    2a64:	0000e894 	.word	0x0000e894
    2a68:	0000289d 	.word	0x0000289d
    2a6c:	40000a24 	.word	0x40000a24
    2a70:	0000e89c 	.word	0x0000e89c
    2a74:	00002831 	.word	0x00002831
    2a78:	40000a20 	.word	0x40000a20
    2a7c:	0000e8a4 	.word	0x0000e8a4
    2a80:	00002779 	.word	0x00002779

00002a84 <xAreQueuePeekTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
portBASE_TYPE xAreQueuePeekTasksStillRunning( void )
{
    2a84:	b500      	push	{lr}
static unsigned portLONG ulLastLoopCounter = 0;

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
    2a86:	4a09      	ldr	r2, [pc, #36]	; (2aac <xAreQueuePeekTasksStillRunning+0x28>)
    2a88:	4b09      	ldr	r3, [pc, #36]	; (2ab0 <xAreQueuePeekTasksStillRunning+0x2c>)
    2a8a:	6811      	ldr	r1, [r2, #0]
    2a8c:	6818      	ldr	r0, [r3, #0]
    2a8e:	4288      	cmp	r0, r1
    2a90:	d007      	beq.n	2aa2 <xAreQueuePeekTasksStillRunning+0x1e>
    2a92:	4908      	ldr	r1, [pc, #32]	; (2ab4 <xAreQueuePeekTasksStillRunning+0x30>)
	{
		xErrorDetected = pdTRUE;
	}

	ulLastLoopCounter = ulLoopCounter;
    2a94:	6812      	ldr	r2, [r2, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return !xErrorDetected;
    2a96:	6808      	ldr	r0, [r1, #0]
	if( ulLastLoopCounter == ulLoopCounter )
	{
		xErrorDetected = pdTRUE;
	}

	ulLastLoopCounter = ulLoopCounter;
    2a98:	601a      	str	r2, [r3, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return !xErrorDetected;
    2a9a:	4243      	negs	r3, r0
    2a9c:	4158      	adcs	r0, r3
}
    2a9e:	bc02      	pop	{r1}
    2aa0:	4708      	bx	r1

	/* If the demo task is still running then we expect the loopcounter to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
	{
		xErrorDetected = pdTRUE;
    2aa2:	4904      	ldr	r1, [pc, #16]	; (2ab4 <xAreQueuePeekTasksStillRunning+0x30>)
    2aa4:	2001      	movs	r0, #1
    2aa6:	6008      	str	r0, [r1, #0]
    2aa8:	e7f4      	b.n	2a94 <xAreQueuePeekTasksStillRunning+0x10>
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	40000a2c 	.word	0x40000a2c
    2ab0:	40000a1c 	.word	0x40000a1c
    2ab4:	40000a28 	.word	0x40000a28

00002ab8 <vQueueReceiveWhenSuspendedTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
    2ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aba:	464f      	mov	r7, r9
    2abc:	4646      	mov	r6, r8
    2abe:	b4c0      	push	{r6, r7}
    2ac0:	4a13      	ldr	r2, [pc, #76]	; (2b10 <vQueueReceiveWhenSuspendedTask+0x58>)
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
				}
				if( xTaskResumeAll() )
				{
					xSuspendedQueueReceiveError = pdTRUE;
    2ac2:	2301      	movs	r3, #1
    2ac4:	4e13      	ldr	r6, [pc, #76]	; (2b14 <vQueueReceiveWhenSuspendedTask+0x5c>)
    2ac6:	4d14      	ldr	r5, [pc, #80]	; (2b18 <vQueueReceiveWhenSuspendedTask+0x60>)
    2ac8:	4f14      	ldr	r7, [pc, #80]	; (2b1c <vQueueReceiveWhenSuspendedTask+0x64>)
    2aca:	4691      	mov	r9, r2
    2acc:	4698      	mov	r8, r3
			/* Suspending the scheduler here is fairly pointless and 
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
    2ace:	f000 ff1d 	bl	390c <vTaskSuspendAll>
			{
				vTaskSuspendAll();
    2ad2:	f000 ff1b 	bl	390c <vTaskSuspendAll>
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
    2ad6:	2200      	movs	r2, #0
    2ad8:	6830      	ldr	r0, [r6, #0]
    2ada:	1c29      	adds	r1, r5, #0
    2adc:	1c13      	adds	r3, r2, #0
    2ade:	f000 fb69 	bl	31b4 <xQueueGenericReceive>
    2ae2:	1c04      	adds	r4, r0, #0
				}
				if( xTaskResumeAll() )
    2ae4:	f000 ffd0 	bl	3a88 <xTaskResumeAll>
    2ae8:	2800      	cmp	r0, #0
    2aea:	d001      	beq.n	2af0 <vQueueReceiveWhenSuspendedTask+0x38>
				{
					xSuspendedQueueReceiveError = pdTRUE;
    2aec:	4642      	mov	r2, r8
    2aee:	603a      	str	r2, [r7, #0]
				}
			}
			xTaskResumeAll();
    2af0:	f000 ffca 	bl	3a88 <xTaskResumeAll>
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
    2af4:	2c00      	cmp	r4, #0
    2af6:	d0ea      	beq.n	2ace <vQueueReceiveWhenSuspendedTask+0x16>

		if( ulReceivedValue != ulExpectedValue )
    2af8:	464a      	mov	r2, r9
    2afa:	6813      	ldr	r3, [r2, #0]
    2afc:	6828      	ldr	r0, [r5, #0]
    2afe:	4298      	cmp	r0, r3
    2b00:	d001      	beq.n	2b06 <vQueueReceiveWhenSuspendedTask+0x4e>
		{
			xSuspendedQueueReceiveError = pdTRUE;
    2b02:	4642      	mov	r2, r8
    2b04:	603a      	str	r2, [r7, #0]
		}

		++ulExpectedValue;
    2b06:	3301      	adds	r3, #1
    2b08:	464a      	mov	r2, r9
    2b0a:	6013      	str	r3, [r2, #0]
    2b0c:	e7df      	b.n	2ace <vQueueReceiveWhenSuspendedTask+0x16>
    2b0e:	46c0      	nop			; (mov r8, r8)
    2b10:	40000a54 	.word	0x40000a54
    2b14:	40000a34 	.word	0x40000a34
    2b18:	40000a58 	.word	0x40000a58
    2b1c:	40000a48 	.word	0x40000a48

00002b20 <vQueueSendWhenSuspendedTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
    2b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b22:	4d0c      	ldr	r5, [pc, #48]	; (2b54 <vQueueSendWhenSuspendedTask+0x34>)
    2b24:	4c0c      	ldr	r4, [pc, #48]	; (2b58 <vQueueSendWhenSuspendedTask+0x38>)
    2b26:	4e0d      	ldr	r6, [pc, #52]	; (2b5c <vQueueSendWhenSuspendedTask+0x3c>)
		vTaskSuspendAll();
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
			{
				xSuspendedQueueSendError = pdTRUE;
    2b28:	2701      	movs	r7, #1
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
    2b2a:	f000 feef 	bl	390c <vTaskSuspendAll>
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
    2b2e:	2200      	movs	r2, #0
    2b30:	6828      	ldr	r0, [r5, #0]
    2b32:	1c21      	adds	r1, r4, #0
    2b34:	1c13      	adds	r3, r2, #0
    2b36:	f000 fa6d 	bl	3014 <xQueueGenericSend>
    2b3a:	2801      	cmp	r0, #1
    2b3c:	d000      	beq.n	2b40 <vQueueSendWhenSuspendedTask+0x20>
			{
				xSuspendedQueueSendError = pdTRUE;
    2b3e:	6037      	str	r7, [r6, #0]
			}
		}
		xTaskResumeAll();
    2b40:	f000 ffa2 	bl	3a88 <xTaskResumeAll>

		vTaskDelay( priSLEEP_TIME );
    2b44:	2080      	movs	r0, #128	; 0x80
    2b46:	f001 f8d9 	bl	3cfc <vTaskDelay>

		++ulValueToSend;
    2b4a:	6823      	ldr	r3, [r4, #0]
    2b4c:	3301      	adds	r3, #1
    2b4e:	6023      	str	r3, [r4, #0]
	}
    2b50:	e7eb      	b.n	2b2a <vQueueSendWhenSuspendedTask+0xa>
    2b52:	46c0      	nop			; (mov r8, r8)
    2b54:	40000a34 	.word	0x40000a34
    2b58:	40000a4c 	.word	0x40000a4c
    2b5c:	40000a40 	.word	0x40000a40

00002b60 <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself. 
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
    2b60:	b510      	push	{r4, lr}
    2b62:	1c04      	adds	r4, r0, #0
	the task. */
	pulCounter = ( unsigned long * ) pvParameters;

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
    2b64:	2000      	movs	r0, #0
    2b66:	f001 f9a1 	bl	3eac <vTaskSuspend>
    2b6a:	6823      	ldr	r3, [r4, #0]
    2b6c:	2201      	movs	r2, #1
    2b6e:	401a      	ands	r2, r3

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
    2b70:	3301      	adds	r3, #1
		
		if( *pulCounter >= priMAX_COUNT )
    2b72:	2bfe      	cmp	r3, #254	; 0xfe
    2b74:	d807      	bhi.n	2b86 <vLimitedIncrementTask+0x26>
    2b76:	2a00      	cmp	r2, #0
    2b78:	d002      	beq.n	2b80 <vLimitedIncrementTask+0x20>
	vTaskSuspend( NULL );

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
    2b7a:	3301      	adds	r3, #1
		
		if( *pulCounter >= priMAX_COUNT )
    2b7c:	2bfe      	cmp	r3, #254	; 0xfe
    2b7e:	d802      	bhi.n	2b86 <vLimitedIncrementTask+0x26>
	vTaskSuspend( NULL );

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;	
    2b80:	3302      	adds	r3, #2
		
		if( *pulCounter >= priMAX_COUNT )
    2b82:	2bfe      	cmp	r3, #254	; 0xfe
    2b84:	d9fc      	bls.n	2b80 <vLimitedIncrementTask+0x20>
    2b86:	6023      	str	r3, [r4, #0]
		{
			vTaskSuspend( NULL );
    2b88:	2000      	movs	r0, #0
    2b8a:	f001 f98f 	bl	3eac <vTaskSuspend>
    2b8e:	e7ec      	b.n	2b6a <vLimitedIncrementTask+0xa>

00002b90 <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
    2b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b92:	4657      	mov	r7, sl
    2b94:	464e      	mov	r6, r9
    2b96:	4645      	mov	r5, r8
    2b98:	b4e0      	push	{r5, r6, r7}
    2b9a:	4b48      	ldr	r3, [pc, #288]	; (2cbc <vCounterControlTask+0x12c>)
unsigned long ulLastCounter;
short sLoops;
short sError = pdFALSE;
    2b9c:	2200      	movs	r2, #0
    2b9e:	4690      	mov	r8, r2
    2ba0:	4c47      	ldr	r4, [pc, #284]	; (2cc0 <vCounterControlTask+0x130>)
    2ba2:	4d48      	ldr	r5, [pc, #288]	; (2cc4 <vCounterControlTask+0x134>)
    2ba4:	4e48      	ldr	r6, [pc, #288]	; (2cc8 <vCounterControlTask+0x138>)
    2ba6:	469a      	mov	sl, r3
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( unsigned long ) 0;
    2ba8:	4691      	mov	r9, r2
    2baa:	e055      	b.n	2c58 <vCounterControlTask+0xc8>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2bac:	f000 ff6c 	bl	3a88 <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2bb0:	6828      	ldr	r0, [r5, #0]
    2bb2:	f001 f97b 	bl	3eac <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2bb6:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2bb8:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2bba:	f000 fdf7 	bl	37ac <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2bbe:	2080      	movs	r0, #128	; 0x80
    2bc0:	f001 f89c 	bl	3cfc <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2bc4:	f000 fea2 	bl	390c <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2bc8:	6823      	ldr	r3, [r4, #0]
    2bca:	429f      	cmp	r7, r3
    2bcc:	d06c      	beq.n	2ca8 <vCounterControlTask+0x118>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2bce:	f000 ff5b 	bl	3a88 <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2bd2:	6828      	ldr	r0, [r5, #0]
    2bd4:	f001 f96a 	bl	3eac <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2bd8:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2bda:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2bdc:	f000 fde6 	bl	37ac <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2be0:	2080      	movs	r0, #128	; 0x80
    2be2:	f001 f88b 	bl	3cfc <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2be6:	f000 fe91 	bl	390c <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2bea:	6823      	ldr	r3, [r4, #0]
    2bec:	429f      	cmp	r7, r3
    2bee:	d058      	beq.n	2ca2 <vCounterControlTask+0x112>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2bf0:	f000 ff4a 	bl	3a88 <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2bf4:	6828      	ldr	r0, [r5, #0]
    2bf6:	f001 f959 	bl	3eac <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2bfa:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2bfc:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2bfe:	f000 fdd5 	bl	37ac <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2c02:	2080      	movs	r0, #128	; 0x80
    2c04:	f001 f87a 	bl	3cfc <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2c08:	f000 fe80 	bl	390c <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2c0c:	6823      	ldr	r3, [r4, #0]
    2c0e:	429f      	cmp	r7, r3
    2c10:	d04d      	beq.n	2cae <vCounterControlTask+0x11e>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2c12:	f000 ff39 	bl	3a88 <xTaskResumeAll>
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2c16:	6828      	ldr	r0, [r5, #0]
    2c18:	f001 f948 	bl	3eac <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2c1c:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2c1e:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2c20:	f000 fdc4 	bl	37ac <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2c24:	2080      	movs	r0, #128	; 0x80
    2c26:	f001 f869 	bl	3cfc <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2c2a:	f000 fe6f 	bl	390c <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2c2e:	6823      	ldr	r3, [r4, #0]
    2c30:	429f      	cmp	r7, r3
    2c32:	d033      	beq.n	2c9c <vCounterControlTask+0x10c>
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
				}
			}
			xTaskResumeAll();
    2c34:	f000 ff28 	bl	3a88 <xTaskResumeAll>


		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared variable. */
		vTaskSuspend( xContinousIncrementHandle );
    2c38:	6828      	ldr	r0, [r5, #0]
    2c3a:	f001 f937 	bl	3eac <vTaskSuspend>

		/* Reset the variable. */
		ulCounter = ( unsigned long ) 0;
    2c3e:	464a      	mov	r2, r9
    2c40:	6022      	str	r2, [r4, #0]

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
    2c42:	6830      	ldr	r0, [r6, #0]
    2c44:	f000 fdb2 	bl	37ac <vTaskResume>

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
    2c48:	6823      	ldr	r3, [r4, #0]
    2c4a:	2bff      	cmp	r3, #255	; 0xff
    2c4c:	d018      	beq.n	2c80 <vCounterControlTask+0xf0>
		{
			sError = pdTRUE;
    2c4e:	2301      	movs	r3, #1
    2c50:	4698      	mov	r8, r3
				usCheckVariable++;
			portEXIT_CRITICAL();
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinousIncrementHandle );
    2c52:	6828      	ldr	r0, [r5, #0]
    2c54:	f000 fdaa 	bl	37ac <vTaskResume>
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( unsigned long ) 0;
    2c58:	464a      	mov	r2, r9
    2c5a:	6022      	str	r2, [r4, #0]
		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
    2c5c:	6828      	ldr	r0, [r5, #0]
    2c5e:	f001 f925 	bl	3eac <vTaskSuspend>
				ulLastCounter = ulCounter;
			vTaskResume( xContinousIncrementHandle );
    2c62:	6828      	ldr	r0, [r5, #0]
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption. */
			vTaskSuspend( xContinousIncrementHandle );
				ulLastCounter = ulCounter;
    2c64:	6827      	ldr	r7, [r4, #0]
			vTaskResume( xContinousIncrementHandle );
    2c66:	f000 fda1 	bl	37ac <vTaskResume>
			
			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
    2c6a:	2080      	movs	r0, #128	; 0x80
    2c6c:	f001 f846 	bl	3cfc <vTaskDelay>

			/* Check the shared variable again.  This time to ensure mutual 
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
    2c70:	f000 fe4c 	bl	390c <vTaskSuspendAll>
			{
				if( ulLastCounter == ulCounter )
    2c74:	6823      	ldr	r3, [r4, #0]
    2c76:	429f      	cmp	r7, r3
    2c78:	d198      	bne.n	2bac <vCounterControlTask+0x1c>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
    2c7a:	2301      	movs	r3, #1
    2c7c:	4698      	mov	r8, r3
    2c7e:	e795      	b.n	2bac <vCounterControlTask+0x1c>
		if( ulCounter != priMAX_COUNT )
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    2c80:	3bff      	subs	r3, #255	; 0xff
    2c82:	4598      	cmp	r8, r3
    2c84:	d116      	bne.n	2cb4 <vCounterControlTask+0x124>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
    2c86:	f00a ffd1 	bl	dc2c <__vPortEnterCritical_from_thumb>
				usCheckVariable++;
    2c8a:	4652      	mov	r2, sl
    2c8c:	8817      	ldrh	r7, [r2, #0]
    2c8e:	3701      	adds	r7, #1
    2c90:	0439      	lsls	r1, r7, #16
    2c92:	0c08      	lsrs	r0, r1, #16
    2c94:	8010      	strh	r0, [r2, #0]
			portEXIT_CRITICAL();
    2c96:	f00a ffc5 	bl	dc24 <__vPortExitCritical_from_thumb>
    2c9a:	e7da      	b.n	2c52 <vCounterControlTask+0xc2>
			{
				if( ulLastCounter == ulCounter )
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
    2c9c:	2301      	movs	r3, #1
    2c9e:	4698      	mov	r8, r3
    2ca0:	e7c8      	b.n	2c34 <vCounterControlTask+0xa4>
    2ca2:	2301      	movs	r3, #1
    2ca4:	4698      	mov	r8, r3
    2ca6:	e7a3      	b.n	2bf0 <vCounterControlTask+0x60>
    2ca8:	2201      	movs	r2, #1
    2caa:	4690      	mov	r8, r2
    2cac:	e78f      	b.n	2bce <vCounterControlTask+0x3e>
    2cae:	2201      	movs	r2, #1
    2cb0:	4690      	mov	r8, r2
    2cb2:	e7ae      	b.n	2c12 <vCounterControlTask+0x82>
		if( ulCounter != priMAX_COUNT )
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    2cb4:	2201      	movs	r2, #1
    2cb6:	4690      	mov	r8, r2
    2cb8:	e7cb      	b.n	2c52 <vCounterControlTask+0xc2>
    2cba:	46c0      	nop			; (mov r8, r8)
    2cbc:	40000a38 	.word	0x40000a38
    2cc0:	40000a44 	.word	0x40000a44
    2cc4:	40000a50 	.word	0x40000a50
    2cc8:	40000a3c 	.word	0x40000a3c

00002ccc <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
    2ccc:	b570      	push	{r4, r5, r6, lr}
    2cce:	1c04      	adds	r4, r0, #0
	the task. */
	pulCounter = ( unsigned long * ) pvParameters;

	/* Query our priority so we can raise it when exclusive access to the 
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
    2cd0:	2000      	movs	r0, #0
    2cd2:	f000 fcf7 	bl	36c4 <uxTaskPriorityGet>
    2cd6:	1c05      	adds	r5, r0, #0
    2cd8:	1c46      	adds	r6, r0, #1

	for( ;; )
	{
		/* Raise our priority above the controller task to ensure a context
		switch does not occur while we are accessing this variable. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
    2cda:	1c31      	adds	r1, r6, #0
    2cdc:	2000      	movs	r0, #0
    2cde:	f000 fd03 	bl	36e8 <vTaskPrioritySet>
			( *pulCounter )++;		
    2ce2:	6823      	ldr	r3, [r4, #0]
    2ce4:	3301      	adds	r3, #1
    2ce6:	6023      	str	r3, [r4, #0]
		vTaskPrioritySet( NULL, uxOurPriority );
    2ce8:	2000      	movs	r0, #0
    2cea:	1c29      	adds	r1, r5, #0
    2cec:	f000 fcfc 	bl	36e8 <vTaskPrioritySet>
    2cf0:	e7f3      	b.n	2cda <vContinuousIncrementTask+0xe>
    2cf2:	46c0      	nop			; (mov r8, r8)

00002cf4 <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
    2cf4:	b530      	push	{r4, r5, lr}
    2cf6:	b085      	sub	sp, #20
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
    2cf8:	2104      	movs	r1, #4
    2cfa:	2001      	movs	r0, #1
    2cfc:	f000 f94e 	bl	2f9c <xQueueCreate>
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinousIncrementHandle );
    2d00:	4d1e      	ldr	r5, [pc, #120]	; (2d7c <vStartDynamicPriorityTasks+0x88>)
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
    2d02:	4a1f      	ldr	r2, [pc, #124]	; (2d80 <vStartDynamicPriorityTasks+0x8c>)
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinousIncrementHandle );
    2d04:	491f      	ldr	r1, [pc, #124]	; (2d84 <vStartDynamicPriorityTasks+0x90>)
    2d06:	2400      	movs	r4, #0
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( unsigned long ) );
    2d08:	6010      	str	r0, [r2, #0]
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, ( signed char * ) "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, ( signed char * ) "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinousIncrementHandle );
    2d0a:	1c2b      	adds	r3, r5, #0
    2d0c:	9101      	str	r1, [sp, #4]
    2d0e:	2268      	movs	r2, #104	; 0x68
    2d10:	491d      	ldr	r1, [pc, #116]	; (2d88 <vStartDynamicPriorityTasks+0x94>)
    2d12:	481e      	ldr	r0, [pc, #120]	; (2d8c <vStartDynamicPriorityTasks+0x98>)
    2d14:	9400      	str	r4, [sp, #0]
    2d16:	9402      	str	r4, [sp, #8]
    2d18:	9403      	str	r4, [sp, #12]
    2d1a:	f000 fba5 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( vLimitedIncrementTask, ( signed char * ) "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
    2d1e:	4b1c      	ldr	r3, [pc, #112]	; (2d90 <vStartDynamicPriorityTasks+0x9c>)
    2d20:	2001      	movs	r0, #1
    2d22:	9000      	str	r0, [sp, #0]
    2d24:	9301      	str	r3, [sp, #4]
    2d26:	491b      	ldr	r1, [pc, #108]	; (2d94 <vStartDynamicPriorityTasks+0xa0>)
    2d28:	1c2b      	adds	r3, r5, #0
    2d2a:	2268      	movs	r2, #104	; 0x68
    2d2c:	481a      	ldr	r0, [pc, #104]	; (2d98 <vStartDynamicPriorityTasks+0xa4>)
    2d2e:	9402      	str	r4, [sp, #8]
    2d30:	9403      	str	r4, [sp, #12]
    2d32:	f000 fb99 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( vCounterControlTask, ( signed char * ) "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    2d36:	1c23      	adds	r3, r4, #0
    2d38:	4918      	ldr	r1, [pc, #96]	; (2d9c <vStartDynamicPriorityTasks+0xa8>)
    2d3a:	2268      	movs	r2, #104	; 0x68
    2d3c:	4818      	ldr	r0, [pc, #96]	; (2da0 <vStartDynamicPriorityTasks+0xac>)
    2d3e:	9400      	str	r4, [sp, #0]
    2d40:	9401      	str	r4, [sp, #4]
    2d42:	9402      	str	r4, [sp, #8]
    2d44:	9403      	str	r4, [sp, #12]
    2d46:	f000 fb8f 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( vQueueSendWhenSuspendedTask, ( signed char * ) "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    2d4a:	1c23      	adds	r3, r4, #0
    2d4c:	4915      	ldr	r1, [pc, #84]	; (2da4 <vStartDynamicPriorityTasks+0xb0>)
    2d4e:	2268      	movs	r2, #104	; 0x68
    2d50:	4815      	ldr	r0, [pc, #84]	; (2da8 <vStartDynamicPriorityTasks+0xb4>)
    2d52:	9400      	str	r4, [sp, #0]
    2d54:	9401      	str	r4, [sp, #4]
    2d56:	9402      	str	r4, [sp, #8]
    2d58:	9403      	str	r4, [sp, #12]
    2d5a:	f000 fb85 	bl	3468 <xTaskGenericCreate>
	xTaskCreate( vQueueReceiveWhenSuspendedTask, ( signed char * ) "SUSP_RX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
    2d5e:	4913      	ldr	r1, [pc, #76]	; (2dac <vStartDynamicPriorityTasks+0xb8>)
    2d60:	2268      	movs	r2, #104	; 0x68
    2d62:	1c23      	adds	r3, r4, #0
    2d64:	4812      	ldr	r0, [pc, #72]	; (2db0 <vStartDynamicPriorityTasks+0xbc>)
    2d66:	9400      	str	r4, [sp, #0]
    2d68:	9401      	str	r4, [sp, #4]
    2d6a:	9402      	str	r4, [sp, #8]
    2d6c:	9403      	str	r4, [sp, #12]
    2d6e:	f000 fb7b 	bl	3468 <xTaskGenericCreate>
}
    2d72:	b005      	add	sp, #20
    2d74:	bc30      	pop	{r4, r5}
    2d76:	bc01      	pop	{r0}
    2d78:	4700      	bx	r0
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	40000a44 	.word	0x40000a44
    2d80:	40000a34 	.word	0x40000a34
    2d84:	40000a50 	.word	0x40000a50
    2d88:	0000e8ac 	.word	0x0000e8ac
    2d8c:	00002ccd 	.word	0x00002ccd
    2d90:	40000a3c 	.word	0x40000a3c
    2d94:	0000e8b4 	.word	0x0000e8b4
    2d98:	00002b61 	.word	0x00002b61
    2d9c:	0000e8bc 	.word	0x0000e8bc
    2da0:	00002b91 	.word	0x00002b91
    2da4:	0000e8c4 	.word	0x0000e8c4
    2da8:	00002b21 	.word	0x00002b21
    2dac:	0000e8cc 	.word	0x0000e8cc
    2db0:	00002ab9 	.word	0x00002ab9

00002db4 <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )
{
    2db4:	b530      	push	{r4, r5, lr}
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    2db6:	4a0c      	ldr	r2, [pc, #48]	; (2de8 <xAreDynamicPriorityTasksStillRunning+0x34>)
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
    2db8:	490c      	ldr	r1, [pc, #48]	; (2dec <xAreDynamicPriorityTasksStillRunning+0x38>)
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    2dba:	8813      	ldrh	r3, [r2, #0]
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
    2dbc:	6808      	ldr	r0, [r1, #0]
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    2dbe:	1c1d      	adds	r5, r3, #0
    2dc0:	4b0b      	ldr	r3, [pc, #44]	; (2df0 <xAreDynamicPriorityTasksStillRunning+0x3c>)
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
	{
		xReturn = pdFALSE;
    2dc2:	2100      	movs	r1, #0
portBASE_TYPE xReturn = pdTRUE;

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
    2dc4:	881c      	ldrh	r4, [r3, #0]
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueSendError == pdTRUE )
    2dc6:	2801      	cmp	r0, #1
    2dc8:	d002      	beq.n	2dd0 <xAreDynamicPriorityTasksStillRunning+0x1c>
portBASE_TYPE xAreDynamicPriorityTasksStillRunning( void )
{
/* Keep a history of the check variables so we know if it has been incremented 
since the last call. */
static unsigned short usLastTaskCheck = ( unsigned short ) 0;
portBASE_TYPE xReturn = pdTRUE;
    2dca:	1b29      	subs	r1, r5, r4
    2dcc:	1e4c      	subs	r4, r1, #1
    2dce:	41a1      	sbcs	r1, r4
	if( xSuspendedQueueSendError == pdTRUE )
	{
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
    2dd0:	4c08      	ldr	r4, [pc, #32]	; (2df4 <xAreDynamicPriorityTasksStillRunning+0x40>)
    2dd2:	6825      	ldr	r5, [r4, #0]
	{
		xReturn = pdFALSE;
    2dd4:	3d01      	subs	r5, #1
    2dd6:	1e6c      	subs	r4, r5, #1
    2dd8:	41a5      	sbcs	r5, r4
	}

	usLastTaskCheck = usCheckVariable;
    2dda:	8812      	ldrh	r2, [r2, #0]
		xReturn = pdFALSE;
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
	{
		xReturn = pdFALSE;
    2ddc:	4268      	negs	r0, r5
    2dde:	4008      	ands	r0, r1
	}

	usLastTaskCheck = usCheckVariable;
    2de0:	801a      	strh	r2, [r3, #0]
	return xReturn;
}
    2de2:	bc30      	pop	{r4, r5}
    2de4:	bc02      	pop	{r1}
    2de6:	4708      	bx	r1
    2de8:	40000a38 	.word	0x40000a38
    2dec:	40000a40 	.word	0x40000a40
    2df0:	40000a3a 	.word	0x40000a3a
    2df4:	40000a48 	.word	0x40000a48

00002df8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2df8:	1c01      	adds	r1, r0, #0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2dfa:	2301      	movs	r3, #1
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2dfc:	3108      	adds	r1, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2dfe:	425a      	negs	r2, r3
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );

	pxList->uxNumberOfItems = 0;
    2e00:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2e02:	6082      	str	r2, [r0, #8]
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2e04:	6041      	str	r1, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2e06:	60c1      	str	r1, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2e08:	6101      	str	r1, [r0, #16]

	pxList->uxNumberOfItems = 0;
    2e0a:	6003      	str	r3, [r0, #0]
}
    2e0c:	4770      	bx	lr
    2e0e:	46c0      	nop			; (mov r8, r8)

00002e10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2e10:	2300      	movs	r3, #0
    2e12:	6103      	str	r3, [r0, #16]
}
    2e14:	4770      	bx	lr
    2e16:	46c0      	nop			; (mov r8, r8)

00002e18 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2e18:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2e1a:	685a      	ldr	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2e1c:	608b      	str	r3, [r1, #8]
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;

	pxNewListItem->pxNext = pxIndex->pxNext;
    2e1e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e20:	685a      	ldr	r2, [r3, #4]
    2e22:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e24:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2e26:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2e28:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2e2a:	6803      	ldr	r3, [r0, #0]
    2e2c:	3301      	adds	r3, #1
    2e2e:	6003      	str	r3, [r0, #0]
}
    2e30:	4770      	bx	lr
    2e32:	46c0      	nop			; (mov r8, r8)

00002e34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2e34:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2e36:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as 
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2e38:	1c63      	adds	r3, r4, #1
    2e3a:	d016      	beq.n	2e6a <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips. 
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2e3c:	1c03      	adds	r3, r0, #0
    2e3e:	3308      	adds	r3, #8
    2e40:	685a      	ldr	r2, [r3, #4]
    2e42:	6812      	ldr	r2, [r2, #0]
    2e44:	4294      	cmp	r4, r2
    2e46:	d304      	bcc.n	2e52 <vListInsert+0x1e>
    2e48:	685b      	ldr	r3, [r3, #4]
    2e4a:	685a      	ldr	r2, [r3, #4]
    2e4c:	6812      	ldr	r2, [r2, #0]
    2e4e:	4294      	cmp	r4, r2
    2e50:	d2fa      	bcs.n	2e48 <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2e52:	685c      	ldr	r4, [r3, #4]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2e54:	6108      	str	r0, [r1, #16]
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e56:	60a1      	str	r1, [r4, #8]
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2e58:	604c      	str	r4, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
	pxNewListItem->pxPrevious = pxIterator;
    2e5a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e5c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
    2e5e:	6803      	ldr	r3, [r0, #0]
    2e60:	3301      	adds	r3, #1
    2e62:	6003      	str	r3, [r0, #0]
}
    2e64:	bc10      	pop	{r4}
    2e66:	bc01      	pop	{r0}
    2e68:	4700      	bx	r0
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the 
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2e6a:	6903      	ldr	r3, [r0, #16]
    2e6c:	e7f1      	b.n	2e52 <vListInsert+0x1e>
    2e6e:	46c0      	nop			; (mov r8, r8)

00002e70 <vListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2e70:	b500      	push	{lr}
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2e72:	6843      	ldr	r3, [r0, #4]
    2e74:	6882      	ldr	r2, [r0, #8]
    2e76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2e78:	6882      	ldr	r2, [r0, #8]
    2e7a:	6053      	str	r3, [r2, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2e7c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2e7e:	6859      	ldr	r1, [r3, #4]
    2e80:	4281      	cmp	r1, r0
    2e82:	d006      	beq.n	2e92 <vListRemove+0x22>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
	}

	pxItemToRemove->pvContainer = NULL;
    2e84:	2100      	movs	r1, #0
    2e86:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
    2e88:	6818      	ldr	r0, [r3, #0]
    2e8a:	3801      	subs	r0, #1
    2e8c:	6018      	str	r0, [r3, #0]
}
    2e8e:	bc01      	pop	{r0}
    2e90:	4700      	bx	r0
	pxList = ( xList * ) pxItemToRemove->pvContainer;

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2e92:	605a      	str	r2, [r3, #4]
    2e94:	e7f6      	b.n	2e84 <vListRemove+0x14>
    2e96:	46c0      	nop			; (mov r8, r8)

00002e98 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    2e98:	b538      	push	{r3, r4, r5, lr}
    2e9a:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    2e9c:	f00a fec6 	bl	dc2c <__vPortEnterCritical_from_thumb>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2ea0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	dd19      	ble.n	2eda <prvUnlockQueue+0x42>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    2ea6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2ea8:	1c25      	adds	r5, r4, #0
    2eaa:	3524      	adds	r5, #36	; 0x24
    2eac:	2800      	cmp	r0, #0
    2eae:	d108      	bne.n	2ec2 <prvUnlockQueue+0x2a>
    2eb0:	e013      	b.n	2eda <prvUnlockQueue+0x42>
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
				}

				--( pxQueue->xTxLock );
    2eb2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2eb4:	3a01      	subs	r2, #1
    2eb6:	64a2      	str	r2, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2eb8:	2a00      	cmp	r2, #0
    2eba:	dd0e      	ble.n	2eda <prvUnlockQueue+0x42>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    2ebc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2ebe:	2900      	cmp	r1, #0
    2ec0:	d00b      	beq.n	2eda <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2ec2:	1c28      	adds	r0, r5, #0
    2ec4:	f001 f862 	bl	3f8c <xTaskRemoveFromEventList>
    2ec8:	2800      	cmp	r0, #0
    2eca:	d0f2      	beq.n	2eb2 <prvUnlockQueue+0x1a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    2ecc:	f001 f8da 	bl	4084 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    2ed0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2ed2:	3a01      	subs	r2, #1
    2ed4:	64a2      	str	r2, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    2ed6:	2a00      	cmp	r2, #0
    2ed8:	dcf0      	bgt.n	2ebc <prvUnlockQueue+0x24>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2eda:	2001      	movs	r0, #1
    2edc:	4243      	negs	r3, r0
    2ede:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    2ee0:	f00a fea0 	bl	dc24 <__vPortExitCritical_from_thumb>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    2ee4:	f00a fea2 	bl	dc2c <__vPortEnterCritical_from_thumb>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2ee8:	6c65      	ldr	r5, [r4, #68]	; 0x44
    2eea:	2d00      	cmp	r5, #0
    2eec:	dd19      	ble.n	2f22 <prvUnlockQueue+0x8a>
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    2eee:	6921      	ldr	r1, [r4, #16]
    2ef0:	1c25      	adds	r5, r4, #0
    2ef2:	3510      	adds	r5, #16
    2ef4:	2900      	cmp	r1, #0
    2ef6:	d108      	bne.n	2f0a <prvUnlockQueue+0x72>
    2ef8:	e013      	b.n	2f22 <prvUnlockQueue+0x8a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
				{
					vTaskMissedYield();
				}

				--( pxQueue->xRxLock );
    2efa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2efc:	3b01      	subs	r3, #1
    2efe:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2f00:	2b00      	cmp	r3, #0
    2f02:	dd0e      	ble.n	2f22 <prvUnlockQueue+0x8a>
		{
			if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    2f04:	6922      	ldr	r2, [r4, #16]
    2f06:	2a00      	cmp	r2, #0
    2f08:	d00b      	beq.n	2f22 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2f0a:	1c28      	adds	r0, r5, #0
    2f0c:	f001 f83e 	bl	3f8c <xTaskRemoveFromEventList>
    2f10:	2800      	cmp	r0, #0
    2f12:	d0f2      	beq.n	2efa <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
    2f14:	f001 f8b6 	bl	4084 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    2f18:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f1a:	3b01      	subs	r3, #1
    2f1c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    2f1e:	2b00      	cmp	r3, #0
    2f20:	dcf0      	bgt.n	2f04 <prvUnlockQueue+0x6c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2f22:	2001      	movs	r0, #1
    2f24:	4245      	negs	r5, r0
    2f26:	6465      	str	r5, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    2f28:	f00a fe7c 	bl	dc24 <__vPortExitCritical_from_thumb>
}
    2f2c:	bc38      	pop	{r3, r4, r5}
    2f2e:	bc01      	pop	{r0}
    2f30:	4700      	bx	r0
    2f32:	46c0      	nop			; (mov r8, r8)

00002f34 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    2f34:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2f36:	6c03      	ldr	r3, [r0, #64]	; 0x40
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    2f38:	1c04      	adds	r4, r0, #0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d108      	bne.n	2f50 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    2f3e:	6805      	ldr	r5, [r0, #0]
    2f40:	2d00      	cmp	r5, #0
    2f42:	d025      	beq.n	2f90 <prvCopyDataToQueue+0x5c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2f44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2f46:	3301      	adds	r3, #1
    2f48:	63a3      	str	r3, [r4, #56]	; 0x38
}
    2f4a:	bc38      	pop	{r3, r4, r5}
    2f4c:	bc01      	pop	{r0}
    2f4e:	4700      	bx	r0
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    2f50:	2a00      	cmp	r2, #0
    2f52:	d10d      	bne.n	2f70 <prvCopyDataToQueue+0x3c>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2f54:	1c1a      	adds	r2, r3, #0
    2f56:	6880      	ldr	r0, [r0, #8]
    2f58:	f002 f93c 	bl	51d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2f5c:	68a1      	ldr	r1, [r4, #8]
    2f5e:	6c20      	ldr	r0, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2f60:	6862      	ldr	r2, [r4, #4]
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2f62:	180b      	adds	r3, r1, r0
    2f64:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2f66:	4293      	cmp	r3, r2
    2f68:	d3ec      	bcc.n	2f44 <prvCopyDataToQueue+0x10>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2f6a:	6825      	ldr	r5, [r4, #0]
    2f6c:	60a5      	str	r5, [r4, #8]
    2f6e:	e7e9      	b.n	2f44 <prvCopyDataToQueue+0x10>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2f70:	1c1a      	adds	r2, r3, #0
    2f72:	68c0      	ldr	r0, [r0, #12]
    2f74:	f002 f92e 	bl	51d4 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    2f78:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2f7a:	68e0      	ldr	r0, [r4, #12]
    2f7c:	4252      	negs	r2, r2
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    2f7e:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    2f80:	1883      	adds	r3, r0, r2
    2f82:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    2f84:	428b      	cmp	r3, r1
    2f86:	d2dd      	bcs.n	2f44 <prvCopyDataToQueue+0x10>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2f88:	6861      	ldr	r1, [r4, #4]
    2f8a:	188d      	adds	r5, r1, r2
    2f8c:	60e5      	str	r5, [r4, #12]
    2f8e:	e7d9      	b.n	2f44 <prvCopyDataToQueue+0x10>
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    2f90:	6840      	ldr	r0, [r0, #4]
    2f92:	f001 f8b9 	bl	4108 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    2f96:	6065      	str	r5, [r4, #4]
    2f98:	e7d4      	b.n	2f44 <prvCopyDataToQueue+0x10>
    2f9a:	46c0      	nop			; (mov r8, r8)

00002f9c <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    2f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f9e:	4647      	mov	r7, r8
    2fa0:	b480      	push	{r7}
    2fa2:	1c04      	adds	r4, r0, #0
    2fa4:	1c0e      	adds	r6, r1, #0
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2fa6:	1e05      	subs	r5, r0, #0
    2fa8:	d105      	bne.n	2fb6 <xQueueCreate+0x1a>
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
}
    2faa:	1c28      	adds	r0, r5, #0
    2fac:	bc04      	pop	{r2}
    2fae:	4690      	mov	r8, r2
    2fb0:	bcf0      	pop	{r4, r5, r6, r7}
    2fb2:	bc02      	pop	{r1}
    2fb4:	4708      	bx	r1
size_t xQueueSizeInBytes;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2fb6:	204c      	movs	r0, #76	; 0x4c
    2fb8:	f001 f954 	bl	4264 <pvPortMalloc>
		if( pxNewQueue != NULL )
    2fbc:	1e05      	subs	r5, r0, #0
    2fbe:	d0f4      	beq.n	2faa <xQueueCreate+0xe>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2fc0:	1c23      	adds	r3, r4, #0
    2fc2:	4373      	muls	r3, r6
    2fc4:	4698      	mov	r8, r3
    2fc6:	2301      	movs	r3, #1
    2fc8:	1c18      	adds	r0, r3, #0
    2fca:	4440      	add	r0, r8

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2fcc:	f001 f94a 	bl	4264 <pvPortMalloc>
    2fd0:	1c07      	adds	r7, r0, #0
    2fd2:	6028      	str	r0, [r5, #0]
			if( pxNewQueue->pcHead != NULL )
    2fd4:	2800      	cmp	r0, #0
    2fd6:	d017      	beq.n	3008 <xQueueCreate+0x6c>
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    2fd8:	1e62      	subs	r2, r4, #1
    2fda:	4372      	muls	r2, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    2fdc:	4440      	add	r0, r8
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
    2fde:	2101      	movs	r1, #1
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    2fe0:	6068      	str	r0, [r5, #4]
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
    2fe2:	4248      	negs	r0, r1
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
    2fe4:	2300      	movs	r3, #0
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    2fe6:	60af      	str	r7, [r5, #8]
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
    2fe8:	6468      	str	r0, [r5, #68]	; 0x44
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    2fea:	18bf      	adds	r7, r7, r2
				pxNewQueue->uxLength = uxQueueLength;
				pxNewQueue->uxItemSize = uxItemSize;
				pxNewQueue->xRxLock = queueUNLOCKED;
				pxNewQueue->xTxLock = queueUNLOCKED;
    2fec:	64a8      	str	r0, [r5, #72]	; 0x48

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2fee:	1c28      	adds	r0, r5, #0
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
				pxNewQueue->uxMessagesWaiting = 0;
    2ff0:	63ab      	str	r3, [r5, #56]	; 0x38
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - 1 ) * uxItemSize );
    2ff2:	60ef      	str	r7, [r5, #12]
				pxNewQueue->uxLength = uxQueueLength;
    2ff4:	63ec      	str	r4, [r5, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2ff6:	642e      	str	r6, [r5, #64]	; 0x40
				pxNewQueue->xRxLock = queueUNLOCKED;
				pxNewQueue->xTxLock = queueUNLOCKED;

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2ff8:	3010      	adds	r0, #16
    2ffa:	f7ff fefd 	bl	2df8 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2ffe:	1c28      	adds	r0, r5, #0
    3000:	3024      	adds	r0, #36	; 0x24
    3002:	f7ff fef9 	bl	2df8 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				return  pxNewQueue;
    3006:	e7d0      	b.n	2faa <xQueueCreate+0xe>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    3008:	1c28      	adds	r0, r5, #0
    300a:	f001 f939 	bl	4280 <vPortFree>
		}
	}

	/* Will only reach here if we could not allocate enough memory or no memory
	was required. */
	return NULL;
    300e:	1c3d      	adds	r5, r7, #0
    3010:	e7cb      	b.n	2faa <xQueueCreate+0xe>
    3012:	46c0      	nop			; (mov r8, r8)

00003014 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3014:	b5f0      	push	{r4, r5, r6, r7, lr}
    3016:	4657      	mov	r7, sl
    3018:	464e      	mov	r6, r9
    301a:	4645      	mov	r5, r8
    301c:	b4e0      	push	{r5, r6, r7}
    301e:	1c04      	adds	r4, r0, #0
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3020:	2010      	movs	r0, #16

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3022:	b084      	sub	sp, #16
    3024:	469a      	mov	sl, r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3026:	1903      	adds	r3, r0, r4

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3028:	9201      	str	r2, [sp, #4]
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    302a:	4698      	mov	r8, r3

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    302c:	4689      	mov	r9, r1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    302e:	f00a fdfd 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3032:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3036:	2500      	movs	r5, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    3038:	1c2f      	adds	r7, r5, #0
	{
		taskENTER_CRITICAL();
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    303a:	429a      	cmp	r2, r3
    303c:	d32c      	bcc.n	3098 <xQueueGenericSend+0x84>
				function. */
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    303e:	9e01      	ldr	r6, [sp, #4]
    3040:	2e00      	cmp	r6, #0
    3042:	d062      	beq.n	310a <xQueueGenericSend+0xf6>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    3044:	2d00      	cmp	r5, #0
    3046:	d03a      	beq.n	30be <xQueueGenericSend+0xaa>
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    3048:	f00a fdec 	bl	dc24 <__vPortExitCritical_from_thumb>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    304c:	f000 fc5e 	bl	390c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3050:	f00a fdec 	bl	dc2c <__vPortEnterCritical_from_thumb>
    3054:	6c65      	ldr	r5, [r4, #68]	; 0x44
    3056:	1c6b      	adds	r3, r5, #1
    3058:	d035      	beq.n	30c6 <xQueueGenericSend+0xb2>
    305a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    305c:	1c73      	adds	r3, r6, #1
    305e:	d036      	beq.n	30ce <xQueueGenericSend+0xba>
    3060:	f00a fde0 	bl	dc24 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3064:	a802      	add	r0, sp, #8
    3066:	a901      	add	r1, sp, #4
    3068:	f000 ffd8 	bl	401c <xTaskCheckForTimeOut>
    306c:	2800      	cmp	r0, #0
    306e:	d137      	bne.n	30e0 <xQueueGenericSend+0xcc>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3070:	f00a fddc 	bl	dc2c <__vPortEnterCritical_from_thumb>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3074:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    3076:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3078:	f00a fdd4 	bl	dc24 <__vPortExitCritical_from_thumb>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
    307c:	42ae      	cmp	r6, r5
    307e:	d036      	beq.n	30ee <xQueueGenericSend+0xda>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3080:	1c20      	adds	r0, r4, #0
    3082:	f7ff ff09 	bl	2e98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3086:	f000 fcff 	bl	3a88 <xTaskResumeAll>
			( void ) xTaskResumeAll();

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    308a:	2501      	movs	r5, #1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    308c:	f00a fdce 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3090:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3092:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3094:	429a      	cmp	r2, r3
    3096:	d2d2      	bcs.n	303e <xQueueGenericSend+0x2a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3098:	4649      	mov	r1, r9
    309a:	1c20      	adds	r0, r4, #0
    309c:	4652      	mov	r2, sl
    309e:	f7ff ff49 	bl	2f34 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    30a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    30a4:	2900      	cmp	r1, #0
    30a6:	d134      	bne.n	3112 <xQueueGenericSend+0xfe>
						takes care of that. */
						portYIELD_WITHIN_API();
					}
				}

				taskEXIT_CRITICAL();
    30a8:	f00a fdbc 	bl	dc24 <__vPortExitCritical_from_thumb>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    30ac:	2001      	movs	r0, #1
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    30ae:	b004      	add	sp, #16
    30b0:	bc1c      	pop	{r2, r3, r4}
    30b2:	4690      	mov	r8, r2
    30b4:	4699      	mov	r9, r3
    30b6:	46a2      	mov	sl, r4
    30b8:	bcf0      	pop	{r4, r5, r6, r7}
    30ba:	bc02      	pop	{r1}
    30bc:	4708      	bx	r1
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    30be:	a802      	add	r0, sp, #8
    30c0:	f000 ffa0 	bl	4004 <vTaskSetTimeOutState>
    30c4:	e7c0      	b.n	3048 <xQueueGenericSend+0x34>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    30c6:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    30c8:	6467      	str	r7, [r4, #68]	; 0x44
    30ca:	1c73      	adds	r3, r6, #1
    30cc:	d1c8      	bne.n	3060 <xQueueGenericSend+0x4c>
    30ce:	64a7      	str	r7, [r4, #72]	; 0x48
    30d0:	f00a fda8 	bl	dc24 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    30d4:	a802      	add	r0, sp, #8
    30d6:	a901      	add	r1, sp, #4
    30d8:	f000 ffa0 	bl	401c <xTaskCheckForTimeOut>
    30dc:	2800      	cmp	r0, #0
    30de:	d0c7      	beq.n	3070 <xQueueGenericSend+0x5c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    30e0:	1c20      	adds	r0, r4, #0
    30e2:	f7ff fed9 	bl	2e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    30e6:	f000 fccf 	bl	3a88 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    30ea:	2000      	movs	r0, #0
    30ec:	e7df      	b.n	30ae <xQueueGenericSend+0x9a>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    30ee:	4640      	mov	r0, r8
    30f0:	9901      	ldr	r1, [sp, #4]
    30f2:	f000 ff15 	bl	3f20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    30f6:	1c20      	adds	r0, r4, #0
    30f8:	f7ff fece 	bl	2e98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
    30fc:	f000 fcc4 	bl	3a88 <xTaskResumeAll>
    3100:	2800      	cmp	r0, #0
    3102:	d1c2      	bne.n	308a <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
    3104:	df00      	svc	0
			( void ) xTaskResumeAll();

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3106:	2501      	movs	r5, #1
    3108:	e7c0      	b.n	308c <xQueueGenericSend+0x78>
			{
				if( xTicksToWait == ( portTickType ) 0 )
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    310a:	f00a fd8b 	bl	dc24 <__vPortExitCritical_from_thumb>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    310e:	1c30      	adds	r0, r6, #0
    3110:	e7cd      	b.n	30ae <xQueueGenericSend+0x9a>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3112:	1c20      	adds	r0, r4, #0
    3114:	3024      	adds	r0, #36	; 0x24
    3116:	f000 ff39 	bl	3f8c <xTaskRemoveFromEventList>
    311a:	2801      	cmp	r0, #1
    311c:	d1c4      	bne.n	30a8 <xQueueGenericSend+0x94>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    311e:	df00      	svc	0
    3120:	e7c2      	b.n	30a8 <xQueueGenericSend+0x94>
    3122:	46c0      	nop			; (mov r8, r8)

00003124 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
    3124:	b538      	push	{r3, r4, r5, lr}
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3126:	204c      	movs	r0, #76	; 0x4c
    3128:	f001 f89c 	bl	4264 <pvPortMalloc>
		if( pxNewQueue != NULL )
    312c:	1e04      	subs	r4, r0, #0
    312e:	d018      	beq.n	3162 <xQueueCreateMutex+0x3e>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
			pxNewQueue->uxLength = 1;
    3130:	2101      	movs	r1, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    3132:	2500      	movs	r5, #0
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
			pxNewQueue->uxLength = 1;
			pxNewQueue->uxItemSize = 0;
			pxNewQueue->xRxLock = queueUNLOCKED;
    3134:	424b      	negs	r3, r1

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
			pxNewQueue->uxLength = 1;
    3136:	63e1      	str	r1, [r4, #60]	; 0x3c
			pxNewQueue->uxItemSize = 0;
			pxNewQueue->xRxLock = queueUNLOCKED;
    3138:	6463      	str	r3, [r4, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    313a:	64a3      	str	r3, [r4, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    313c:	3010      	adds	r0, #16
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    313e:	6065      	str	r5, [r4, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    3140:	6025      	str	r5, [r4, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    3142:	60a5      	str	r5, [r4, #8]
			pxNewQueue->pcReadFrom = NULL;
    3144:	60e5      	str	r5, [r4, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = 0;
    3146:	63a5      	str	r5, [r4, #56]	; 0x38
			pxNewQueue->uxLength = 1;
			pxNewQueue->uxItemSize = 0;
    3148:	6425      	str	r5, [r4, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    314a:	f7ff fe55 	bl	2df8 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    314e:	1c20      	adds	r0, r4, #0
    3150:	3024      	adds	r0, #36	; 0x24
    3152:	f7ff fe51 	bl	2df8 <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, 0, queueSEND_TO_BACK );
    3156:	1c20      	adds	r0, r4, #0
    3158:	1c29      	adds	r1, r5, #0
    315a:	1c2a      	adds	r2, r5, #0
    315c:	1c2b      	adds	r3, r5, #0
    315e:	f7ff ff59 	bl	3014 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
    3162:	1c20      	adds	r0, r4, #0
    3164:	bc38      	pop	{r3, r4, r5}
    3166:	bc02      	pop	{r1}
    3168:	4708      	bx	r1
    316a:	46c0      	nop			; (mov r8, r8)

0000316c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    316c:	b570      	push	{r4, r5, r6, lr}
    316e:	1c04      	adds	r4, r0, #0
    3170:	1c16      	adds	r6, r2, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3172:	6b80      	ldr	r0, [r0, #56]	; 0x38
    3174:	6be2      	ldr	r2, [r4, #60]	; 0x3c
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3176:	2500      	movs	r5, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3178:	4290      	cmp	r0, r2
    317a:	d303      	bcc.n	3184 <xQueueGenericSendFromISR+0x18>
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    317c:	1c28      	adds	r0, r5, #0
    317e:	bc70      	pop	{r4, r5, r6}
    3180:	bc02      	pop	{r1}
    3182:	4708      	bx	r1
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3184:	1c1a      	adds	r2, r3, #0
    3186:	1c20      	adds	r0, r4, #0
    3188:	f7ff fed4 	bl	2f34 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    318c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    318e:	1c5a      	adds	r2, r3, #1
    3190:	d003      	beq.n	319a <xQueueGenericSendFromISR+0x2e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3192:	3301      	adds	r3, #1
    3194:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    3196:	2501      	movs	r5, #1
    3198:	e7f0      	b.n	317c <xQueueGenericSendFromISR+0x10>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    319a:	6a63      	ldr	r3, [r4, #36]	; 0x24
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    319c:	3501      	adds	r5, #1

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    319e:	2b00      	cmp	r3, #0
    31a0:	d0ec      	beq.n	317c <xQueueGenericSendFromISR+0x10>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31a2:	1c20      	adds	r0, r4, #0
    31a4:	3024      	adds	r0, #36	; 0x24
    31a6:	f000 fef1 	bl	3f8c <xTaskRemoveFromEventList>
    31aa:	2800      	cmp	r0, #0
    31ac:	d0e6      	beq.n	317c <xQueueGenericSendFromISR+0x10>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    31ae:	6035      	str	r5, [r6, #0]
    31b0:	e7e4      	b.n	317c <xQueueGenericSendFromISR+0x10>
    31b2:	46c0      	nop			; (mov r8, r8)

000031b4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    31b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31b6:	4657      	mov	r7, sl
    31b8:	464e      	mov	r6, r9
    31ba:	4645      	mov	r5, r8
    31bc:	b4e0      	push	{r5, r6, r7}
    31be:	b084      	sub	sp, #16
    31c0:	1c04      	adds	r4, r0, #0
    31c2:	4699      	mov	r9, r3
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    31c4:	1c07      	adds	r7, r0, #0
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    31c6:	468a      	mov	sl, r1
    31c8:	9201      	str	r2, [sp, #4]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    31ca:	f00a fd2f 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    31ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    31d0:	2500      	movs	r5, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    31d2:	46a8      	mov	r8, r5
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    31d4:	3724      	adds	r7, #36	; 0x24
	{
		taskENTER_CRITICAL();
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    31d6:	2b00      	cmp	r3, #0
    31d8:	d134      	bne.n	3244 <xQueueGenericReceive+0x90>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    31da:	9e01      	ldr	r6, [sp, #4]
    31dc:	2e00      	cmp	r6, #0
    31de:	d07b      	beq.n	32d8 <xQueueGenericReceive+0x124>
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    31e0:	2d00      	cmp	r5, #0
    31e2:	d050      	beq.n	3286 <xQueueGenericReceive+0xd2>
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
    31e4:	f00a fd1e 	bl	dc24 <__vPortExitCritical_from_thumb>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    31e8:	f000 fb90 	bl	390c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    31ec:	f00a fd1e 	bl	dc2c <__vPortEnterCritical_from_thumb>
    31f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    31f2:	3301      	adds	r3, #1
    31f4:	d052      	beq.n	329c <xQueueGenericReceive+0xe8>
    31f6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    31f8:	1c43      	adds	r3, r0, #1
    31fa:	d054      	beq.n	32a6 <xQueueGenericReceive+0xf2>
    31fc:	f00a fd12 	bl	dc24 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3200:	a802      	add	r0, sp, #8
    3202:	a901      	add	r1, sp, #4
    3204:	f000 ff0a 	bl	401c <xTaskCheckForTimeOut>
    3208:	2800      	cmp	r0, #0
    320a:	d156      	bne.n	32ba <xQueueGenericReceive+0x106>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    320c:	f00a fd0e 	bl	dc2c <__vPortEnterCritical_from_thumb>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3210:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    3212:	f00a fd07 	bl	dc24 <__vPortExitCritical_from_thumb>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) )
    3216:	2d00      	cmp	r5, #0
    3218:	d139      	bne.n	328e <xQueueGenericReceive+0xda>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    321a:	6821      	ldr	r1, [r4, #0]
    321c:	2900      	cmp	r1, #0
    321e:	d053      	beq.n	32c8 <xQueueGenericReceive+0x114>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3220:	1c38      	adds	r0, r7, #0
    3222:	9901      	ldr	r1, [sp, #4]
    3224:	f000 fe7c 	bl	3f20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3228:	1c20      	adds	r0, r4, #0
    322a:	f7ff fe35 	bl	2e98 <prvUnlockQueue>
				if( !xTaskResumeAll() )
    322e:	f000 fc2b 	bl	3a88 <xTaskResumeAll>
    3232:	2800      	cmp	r0, #0
    3234:	d100      	bne.n	3238 <xQueueGenericReceive+0x84>
				{
					portYIELD_WITHIN_API();
    3236:	df00      	svc	0
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3238:	2501      	movs	r5, #1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    323a:	f00a fcf7 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    323e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3240:	2b00      	cmp	r3, #0
    3242:	d0ca      	beq.n	31da <xQueueGenericReceive+0x26>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3244:	6823      	ldr	r3, [r4, #0]
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    3246:	68e5      	ldr	r5, [r4, #12]
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3248:	2b00      	cmp	r3, #0
    324a:	d008      	beq.n	325e <xQueueGenericReceive+0xaa>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    324c:	6c22      	ldr	r2, [r4, #64]	; 0x40
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    324e:	6860      	ldr	r0, [r4, #4]

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3250:	18a9      	adds	r1, r5, r2
    3252:	60e1      	str	r1, [r4, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3254:	4281      	cmp	r1, r0
    3256:	d252      	bcs.n	32fe <xQueueGenericReceive+0x14a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3258:	4650      	mov	r0, sl
    325a:	f001 ffbb 	bl	51d4 <memcpy>
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );

				if( xJustPeeking == pdFALSE )
    325e:	2100      	movs	r1, #0
    3260:	4589      	cmp	r9, r1
    3262:	d144      	bne.n	32ee <xQueueGenericReceive+0x13a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3264:	6ba5      	ldr	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3266:	6822      	ldr	r2, [r4, #0]
				if( xJustPeeking == pdFALSE )
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3268:	3d01      	subs	r5, #1
    326a:	63a5      	str	r5, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    326c:	2a00      	cmp	r2, #0
    326e:	d051      	beq.n	3314 <xQueueGenericReceive+0x160>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3270:	6926      	ldr	r6, [r4, #16]
    3272:	2e00      	cmp	r6, #0
    3274:	d03f      	beq.n	32f6 <xQueueGenericReceive+0x142>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3276:	1c20      	adds	r0, r4, #0
    3278:	3010      	adds	r0, #16
    327a:	f000 fe87 	bl	3f8c <xTaskRemoveFromEventList>
    327e:	2801      	cmp	r0, #1
    3280:	d139      	bne.n	32f6 <xQueueGenericReceive+0x142>
						{
							portYIELD_WITHIN_API();
    3282:	df00      	svc	0
    3284:	e037      	b.n	32f6 <xQueueGenericReceive+0x142>
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3286:	a802      	add	r0, sp, #8
    3288:	f000 febc 	bl	4004 <vTaskSetTimeOutState>
    328c:	e7aa      	b.n	31e4 <xQueueGenericReceive+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    328e:	1c20      	adds	r0, r4, #0
    3290:	f7ff fe02 	bl	2e98 <prvUnlockQueue>
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3294:	2501      	movs	r5, #1
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
				( void ) xTaskResumeAll();
    3296:	f000 fbf7 	bl	3a88 <xTaskResumeAll>
    329a:	e7ce      	b.n	323a <xQueueGenericReceive+0x86>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
    329c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    329e:	4643      	mov	r3, r8
    32a0:	6463      	str	r3, [r4, #68]	; 0x44
    32a2:	1c43      	adds	r3, r0, #1
    32a4:	d1aa      	bne.n	31fc <xQueueGenericReceive+0x48>
    32a6:	4643      	mov	r3, r8
    32a8:	64a3      	str	r3, [r4, #72]	; 0x48
    32aa:	f00a fcbb 	bl	dc24 <__vPortExitCritical_from_thumb>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    32ae:	a802      	add	r0, sp, #8
    32b0:	a901      	add	r1, sp, #4
    32b2:	f000 feb3 	bl	401c <xTaskCheckForTimeOut>
    32b6:	2800      	cmp	r0, #0
    32b8:	d0a8      	beq.n	320c <xQueueGenericReceive+0x58>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    32ba:	1c20      	adds	r0, r4, #0
    32bc:	f7ff fdec 	bl	2e98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    32c0:	f000 fbe2 	bl	3a88 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    32c4:	2000      	movs	r0, #0
    32c6:	e00a      	b.n	32de <xQueueGenericReceive+0x12a>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
					{
						portENTER_CRITICAL();
    32c8:	f00a fcb0 	bl	dc2c <__vPortEnterCritical_from_thumb>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    32cc:	6860      	ldr	r0, [r4, #4]
    32ce:	f000 fee5 	bl	409c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    32d2:	f00a fca7 	bl	dc24 <__vPortExitCritical_from_thumb>
    32d6:	e7a3      	b.n	3220 <xQueueGenericReceive+0x6c>
			{
				if( xTicksToWait == ( portTickType ) 0 )
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    32d8:	f00a fca4 	bl	dc24 <__vPortExitCritical_from_thumb>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    32dc:	1c30      	adds	r0, r6, #0
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
}
    32de:	b004      	add	sp, #16
    32e0:	bc1c      	pop	{r2, r3, r4}
    32e2:	4690      	mov	r8, r2
    32e4:	4699      	mov	r9, r3
    32e6:	46a2      	mov	sl, r4
    32e8:	bcf0      	pop	{r4, r5, r6, r7}
    32ea:	bc02      	pop	{r1}
    32ec:	4708      	bx	r1
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    32ee:	6a67      	ldr	r7, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    32f0:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
    32f2:	2f00      	cmp	r7, #0
    32f4:	d106      	bne.n	3304 <xQueueGenericReceive+0x150>
						}
					}

				}

				taskEXIT_CRITICAL();
    32f6:	f00a fc95 	bl	dc24 <__vPortExitCritical_from_thumb>
				return pdPASS;
    32fa:	2001      	movs	r0, #1
    32fc:	e7ef      	b.n	32de <xQueueGenericReceive+0x12a>
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    32fe:	60e3      	str	r3, [r4, #12]
    3300:	1c19      	adds	r1, r3, #0
    3302:	e7a9      	b.n	3258 <xQueueGenericReceive+0xa4>
					any other tasks waiting for the data. */
					if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) )
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3304:	1c20      	adds	r0, r4, #0
    3306:	3024      	adds	r0, #36	; 0x24
    3308:	f000 fe40 	bl	3f8c <xTaskRemoveFromEventList>
    330c:	2800      	cmp	r0, #0
    330e:	d0f2      	beq.n	32f6 <xQueueGenericReceive+0x142>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    3310:	df00      	svc	0
    3312:	e7f0      	b.n	32f6 <xQueueGenericReceive+0x142>
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    3314:	f000 febc 	bl	4090 <xTaskGetCurrentTaskHandle>
    3318:	6060      	str	r0, [r4, #4]
    331a:	e7a9      	b.n	3270 <xQueueGenericReceive+0xbc>

0000331c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    331c:	b570      	push	{r4, r5, r6, lr}
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    331e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3320:	1c04      	adds	r4, r0, #0
    3322:	1c16      	adds	r6, r2, #0
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3324:	2d00      	cmp	r5, #0
    3326:	d016      	beq.n	3356 <xQueueReceiveFromISR+0x3a>
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3328:	6800      	ldr	r0, [r0, #0]
    332a:	2800      	cmp	r0, #0
    332c:	d00a      	beq.n	3344 <xQueueReceiveFromISR+0x28>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    332e:	68e3      	ldr	r3, [r4, #12]
    3330:	6c22      	ldr	r2, [r4, #64]	; 0x40
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3332:	6865      	ldr	r5, [r4, #4]

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3334:	189b      	adds	r3, r3, r2
    3336:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3338:	42ab      	cmp	r3, r5
    333a:	d210      	bcs.n	335e <xQueueReceiveFromISR+0x42>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    333c:	1c08      	adds	r0, r1, #0
    333e:	1c19      	adds	r1, r3, #0
    3340:	f001 ff48 	bl	51d4 <memcpy>
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    3344:	6ba0      	ldr	r0, [r4, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3346:	6c63      	ldr	r3, [r4, #68]	; 0x44
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
			--( pxQueue->uxMessagesWaiting );
    3348:	3801      	subs	r0, #1
    334a:	63a0      	str	r0, [r4, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    334c:	1c5a      	adds	r2, r3, #1
    334e:	d009      	beq.n	3364 <xQueueReceiveFromISR+0x48>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3350:	3301      	adds	r3, #1
    3352:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
    3354:	2501      	movs	r5, #1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    3356:	1c28      	adds	r0, r5, #0
    3358:	bc70      	pop	{r4, r5, r6}
    335a:	bc02      	pop	{r1}
    335c:	4708      	bx	r1
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    335e:	60e0      	str	r0, [r4, #12]
    3360:	1c03      	adds	r3, r0, #0
    3362:	e7eb      	b.n	333c <xQueueReceiveFromISR+0x20>
			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    3364:	6921      	ldr	r1, [r4, #16]
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    3366:	2501      	movs	r5, #1
			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
			{
				if( !listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) )
    3368:	2900      	cmp	r1, #0
    336a:	d0f4      	beq.n	3356 <xQueueReceiveFromISR+0x3a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    336c:	1c20      	adds	r0, r4, #0
    336e:	3010      	adds	r0, #16
    3370:	f000 fe0c 	bl	3f8c <xTaskRemoveFromEventList>
    3374:	2800      	cmp	r0, #0
    3376:	d0ee      	beq.n	3356 <xQueueReceiveFromISR+0x3a>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3378:	6035      	str	r5, [r6, #0]
    337a:	e7ec      	b.n	3356 <xQueueReceiveFromISR+0x3a>

0000337c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    337c:	b510      	push	{r4, lr}
    337e:	1c04      	adds	r4, r0, #0
unsigned portBASE_TYPE uxReturn;

	taskENTER_CRITICAL();
    3380:	f00a fc54 	bl	dc2c <__vPortEnterCritical_from_thumb>
		uxReturn = pxQueue->uxMessagesWaiting;
    3384:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    3386:	f00a fc4d 	bl	dc24 <__vPortExitCritical_from_thumb>

	return uxReturn;
}
    338a:	1c20      	adds	r0, r4, #0
    338c:	bc10      	pop	{r4}
    338e:	bc02      	pop	{r1}
    3390:	4708      	bx	r1
    3392:	46c0      	nop			; (mov r8, r8)

00003394 <uxQueueMessagesWaitingFromISR>:

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
unsigned portBASE_TYPE uxReturn;

	uxReturn = pxQueue->uxMessagesWaiting;
    3394:	6b80      	ldr	r0, [r0, #56]	; 0x38

	return uxReturn;
}
    3396:	4770      	bx	lr

00003398 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3398:	b510      	push	{r4, lr}
    339a:	1c04      	adds	r4, r0, #0
	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    339c:	6800      	ldr	r0, [r0, #0]
    339e:	f000 ff6f 	bl	4280 <vPortFree>
	vPortFree( pxQueue );
    33a2:	1c20      	adds	r0, r4, #0
    33a4:	f000 ff6c 	bl	4280 <vPortFree>
}
    33a8:	bc10      	pop	{r4}
    33aa:	bc01      	pop	{r0}
    33ac:	4700      	bx	r0
    33ae:	46c0      	nop			; (mov r8, r8)

000033b0 <xQueueIsQueueEmptyFromISR>:

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    33b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
    33b2:	4243      	negs	r3, r0
    33b4:	4158      	adcs	r0, r3

	return xReturn;
}
    33b6:	4770      	bx	lr

000033b8 <xQueueIsQueueFullFromISR>:

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    33b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    33ba:	6b82      	ldr	r2, [r0, #56]	; 0x38
    33bc:	1ad0      	subs	r0, r2, r3
    33be:	4243      	negs	r3, r0
    33c0:	4158      	adcs	r0, r3

	return xReturn;
}
    33c2:	4770      	bx	lr

000033c4 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    33c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33c6:	465f      	mov	r7, fp
    33c8:	4656      	mov	r6, sl
    33ca:	464d      	mov	r5, r9
    33cc:	4644      	mov	r4, r8
    33ce:	b4f0      	push	{r4, r5, r6, r7}
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    33d0:	684b      	ldr	r3, [r1, #4]
    33d2:	1c0f      	adds	r7, r1, #0
    33d4:	685b      	ldr	r3, [r3, #4]
    33d6:	3708      	adds	r7, #8
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    33d8:	b085      	sub	sp, #20
    33da:	4681      	mov	r9, r0
    33dc:	1c0d      	adds	r5, r1, #0
    33de:	4690      	mov	r8, r2
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    33e0:	604b      	str	r3, [r1, #4]
    33e2:	42bb      	cmp	r3, r7
    33e4:	d039      	beq.n	345a <prvListTaskWithinSingleList+0x96>
    33e6:	68da      	ldr	r2, [r3, #12]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    33e8:	685b      	ldr	r3, [r3, #4]
	{
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    33ea:	4692      	mov	sl, r2
    33ec:	4a1c      	ldr	r2, [pc, #112]	; (3460 <prvListTaskWithinSingleList+0x9c>)
    33ee:	4e1d      	ldr	r6, [pc, #116]	; (3464 <prvListTaskWithinSingleList+0xa0>)
    33f0:	4693      	mov	fp, r2
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    33f2:	606b      	str	r3, [r5, #4]
    33f4:	42bb      	cmp	r3, r7
    33f6:	d024      	beq.n	3442 <prvListTaskWithinSingleList+0x7e>
    33f8:	68dc      	ldr	r4, [r3, #12]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
    33fa:	6b23      	ldr	r3, [r4, #48]	; 0x30

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    33fc:	7818      	ldrb	r0, [r3, #0]
    33fe:	2100      	movs	r1, #0
    3400:	28a5      	cmp	r0, #165	; 0xa5
    3402:	d107      	bne.n	3414 <prvListTaskWithinSingleList+0x50>
		{
			pucStackByte -= portSTACK_GROWTH;
    3404:	3301      	adds	r3, #1
			usCount++;
    3406:	3101      	adds	r1, #1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    3408:	7818      	ldrb	r0, [r3, #0]
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    340a:	040a      	lsls	r2, r1, #16
    340c:	0c11      	lsrs	r1, r2, #16

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    340e:	28a5      	cmp	r0, #165	; 0xa5
    3410:	d0f8      	beq.n	3404 <prvListTaskWithinSingleList+0x40>
    3412:	0c91      	lsrs	r1, r2, #18
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
			}
			#endif			
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
    3414:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3416:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3418:	1c22      	adds	r2, r4, #0
    341a:	9000      	str	r0, [sp, #0]
    341c:	9101      	str	r1, [sp, #4]
    341e:	9302      	str	r3, [sp, #8]
    3420:	4659      	mov	r1, fp
    3422:	3234      	adds	r2, #52	; 0x34
    3424:	1c30      	adds	r0, r6, #0
    3426:	4643      	mov	r3, r8
    3428:	f002 f832 	bl	5490 <sprintf>
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
    342c:	4648      	mov	r0, r9
    342e:	1c31      	adds	r1, r6, #0
    3430:	f002 f8a6 	bl	5580 <strcat>

		} while( pxNextTCB != pxFirstTCB );
    3434:	4554      	cmp	r4, sl
    3436:	d007      	beq.n	3448 <prvListTaskWithinSingleList+0x84>
    3438:	686b      	ldr	r3, [r5, #4]

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    343a:	685b      	ldr	r3, [r3, #4]
    343c:	606b      	str	r3, [r5, #4]
    343e:	42bb      	cmp	r3, r7
    3440:	d1da      	bne.n	33f8 <prvListTaskWithinSingleList+0x34>
    3442:	687b      	ldr	r3, [r7, #4]
    3444:	606b      	str	r3, [r5, #4]
    3446:	e7d7      	b.n	33f8 <prvListTaskWithinSingleList+0x34>
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );

		} while( pxNextTCB != pxFirstTCB );
	}
    3448:	b005      	add	sp, #20
    344a:	bc3c      	pop	{r2, r3, r4, r5}
    344c:	4690      	mov	r8, r2
    344e:	4699      	mov	r9, r3
    3450:	46a2      	mov	sl, r4
    3452:	46ab      	mov	fp, r5
    3454:	bcf0      	pop	{r4, r5, r6, r7}
    3456:	bc01      	pop	{r0}
    3458:	4700      	bx	r0
	{
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    345a:	685b      	ldr	r3, [r3, #4]
    345c:	e7c3      	b.n	33e6 <prvListTaskWithinSingleList+0x22>
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	0000e8d4 	.word	0x0000e8d4
    3464:	40000b00 	.word	0x40000b00

00003468 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    346a:	465f      	mov	r7, fp
    346c:	4656      	mov	r6, sl
    346e:	464d      	mov	r5, r9
    3470:	4644      	mov	r4, r8
    3472:	b4f0      	push	{r4, r5, r6, r7}
    3474:	1c16      	adds	r6, r2, #0
    3476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3478:	4683      	mov	fp, r0
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    347a:	2048      	movs	r0, #72	; 0x48
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    347c:	4688      	mov	r8, r1
    347e:	469a      	mov	sl, r3
    3480:	4691      	mov	r9, r2
    3482:	9d0c      	ldr	r5, [sp, #48]	; 0x30
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    3484:	f000 feee 	bl	4264 <pvPortMalloc>

	if( pxNewTCB != NULL )
    3488:	1e04      	subs	r4, r0, #0
    348a:	d100      	bne.n	348e <xTaskGenericCreate+0x26>
    348c:	e07b      	b.n	3586 <xTaskGenericCreate+0x11e>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    348e:	2d00      	cmp	r5, #0
    3490:	d100      	bne.n	3494 <xTaskGenericCreate+0x2c>
    3492:	e083      	b.n	359c <xTaskGenericCreate+0x134>
    3494:	6325      	str	r5, [r4, #48]	; 0x30
    3496:	00b7      	lsls	r7, r6, #2
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
    3498:	1c3a      	adds	r2, r7, #0
    349a:	1c28      	adds	r0, r5, #0
    349c:	21a5      	movs	r1, #165	; 0xa5
    349e:	f001 ff17 	bl	52d0 <memset>
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    34a2:	1c20      	adds	r0, r4, #0
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    34a4:	6b27      	ldr	r7, [r4, #48]	; 0x30
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    34a6:	4641      	mov	r1, r8
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    34a8:	3e01      	subs	r6, #1
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    34aa:	3034      	adds	r0, #52	; 0x34
    34ac:	220a      	movs	r2, #10
    34ae:	f002 f89b 	bl	55e8 <strncpy>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    34b2:	00b6      	lsls	r6, r6, #2
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    34b4:	2100      	movs	r1, #0
    34b6:	233d      	movs	r3, #61	; 0x3d
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
    34b8:	2507      	movs	r5, #7
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
    34ba:	19be      	adds	r6, r7, r6
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    34bc:	54e1      	strb	r1, [r4, r3]
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
    34be:	43ae      	bics	r6, r5
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    34c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    34c2:	2d03      	cmp	r5, #3
    34c4:	d854      	bhi.n	3570 <xTaskGenericCreate+0x108>
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    34c6:	1d27      	adds	r7, r4, #4
    34c8:	1c38      	adds	r0, r7, #0
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - 1;
	}

	pxTCB->uxPriority = uxPriority;
    34ca:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    34cc:	6465      	str	r5, [r4, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    34ce:	f7ff fc9f 	bl	2e10 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    34d2:	1c20      	adds	r0, r4, #0
    34d4:	3018      	adds	r0, #24
    34d6:	f7ff fc9b 	bl	2e10 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    34da:	2104      	movs	r1, #4
    34dc:	1b48      	subs	r0, r1, r5
    34de:	61a0      	str	r0, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    34e0:	4652      	mov	r2, sl
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    34e2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    34e4:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    34e6:	1c30      	adds	r0, r6, #0
    34e8:	4659      	mov	r1, fp
    34ea:	f000 fe33 	bl	4154 <pxPortInitialiseStack>
		}
		#endif

		if( ( void * ) pxCreatedTask != NULL )
    34ee:	2200      	movs	r2, #0
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    34f0:	6020      	str	r0, [r4, #0]
		}
		#endif

		if( ( void * ) pxCreatedTask != NULL )
    34f2:	4591      	cmp	r9, r2
    34f4:	d001      	beq.n	34fa <xTaskGenericCreate+0x92>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    34f6:	464a      	mov	r2, r9
    34f8:	6014      	str	r4, [r2, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		portENTER_CRITICAL();
    34fa:	f00a fb97 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			uxCurrentNumberOfTasks++;
    34fe:	4b45      	ldr	r3, [pc, #276]	; (3614 <xTaskGenericCreate+0x1ac>)
    3500:	681d      	ldr	r5, [r3, #0]
    3502:	3501      	adds	r5, #1
    3504:	601d      	str	r5, [r3, #0]
			if( pxCurrentTCB == NULL )
    3506:	4d44      	ldr	r5, [pc, #272]	; (3618 <xTaskGenericCreate+0x1b0>)
    3508:	682e      	ldr	r6, [r5, #0]
    350a:	2e00      	cmp	r6, #0
    350c:	d03e      	beq.n	358c <xTaskGenericCreate+0x124>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    350e:	4e43      	ldr	r6, [pc, #268]	; (361c <xTaskGenericCreate+0x1b4>)
    3510:	6833      	ldr	r3, [r6, #0]
    3512:	2b00      	cmp	r3, #0
    3514:	d02e      	beq.n	3574 <xTaskGenericCreate+0x10c>
    3516:	4b42      	ldr	r3, [pc, #264]	; (3620 <xTaskGenericCreate+0x1b8>)
    3518:	4698      	mov	r8, r3
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    351a:	4a42      	ldr	r2, [pc, #264]	; (3624 <xTaskGenericCreate+0x1bc>)
    351c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    351e:	6811      	ldr	r1, [r2, #0]
    3520:	428b      	cmp	r3, r1
    3522:	d900      	bls.n	3526 <xTaskGenericCreate+0xbe>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3524:	6013      	str	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    3526:	4a40      	ldr	r2, [pc, #256]	; (3628 <xTaskGenericCreate+0x1c0>)
    3528:	6810      	ldr	r0, [r2, #0]
    352a:	6420      	str	r0, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
    352c:	3001      	adds	r0, #1
    352e:	6010      	str	r0, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    3530:	4a3e      	ldr	r2, [pc, #248]	; (362c <xTaskGenericCreate+0x1c4>)
    3532:	6811      	ldr	r1, [r2, #0]
    3534:	428b      	cmp	r3, r1
    3536:	d900      	bls.n	353a <xTaskGenericCreate+0xd2>
    3538:	6013      	str	r3, [r2, #0]
    353a:	0099      	lsls	r1, r3, #2
    353c:	18cb      	adds	r3, r1, r3
    353e:	0098      	lsls	r0, r3, #2
    3540:	4440      	add	r0, r8
    3542:	1c39      	adds	r1, r7, #0
    3544:	f7ff fc68 	bl	2e18 <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		portEXIT_CRITICAL();
    3548:	f00a fb6c 	bl	dc24 <__vPortExitCritical_from_thumb>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    354c:	6834      	ldr	r4, [r6, #0]
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
    354e:	2001      	movs	r0, #1
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    3550:	2c00      	cmp	r4, #0
    3552:	d005      	beq.n	3560 <xTaskGenericCreate+0xf8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3554:	682d      	ldr	r5, [r5, #0]
    3556:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    3558:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    355a:	429f      	cmp	r7, r3
    355c:	d900      	bls.n	3560 <xTaskGenericCreate+0xf8>
			{
				portYIELD_WITHIN_API();
    355e:	df00      	svc	0
			}
		}
	}

	return xReturn;
}
    3560:	bc3c      	pop	{r2, r3, r4, r5}
    3562:	4690      	mov	r8, r2
    3564:	4699      	mov	r9, r3
    3566:	46a2      	mov	sl, r4
    3568:	46ab      	mov	fp, r5
    356a:	bcf8      	pop	{r3, r4, r5, r6, r7}
    356c:	bc02      	pop	{r1}
    356e:	4708      	bx	r1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = '\0';
    3570:	2503      	movs	r5, #3
    3572:	e7a8      	b.n	34c6 <xTaskGenericCreate+0x5e>
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3574:	6829      	ldr	r1, [r5, #0]
    3576:	980a      	ldr	r0, [sp, #40]	; 0x28
    3578:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    357a:	4298      	cmp	r0, r3
    357c:	d3cb      	bcc.n	3516 <xTaskGenericCreate+0xae>
    357e:	4a28      	ldr	r2, [pc, #160]	; (3620 <xTaskGenericCreate+0x1b8>)
					{
						pxCurrentTCB = pxNewTCB;
    3580:	602c      	str	r4, [r5, #0]
    3582:	4690      	mov	r8, r2
    3584:	e7c9      	b.n	351a <xTaskGenericCreate+0xb2>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3586:	2601      	movs	r6, #1
    3588:	4270      	negs	r0, r6
    358a:	e7e9      	b.n	3560 <xTaskGenericCreate+0xf8>
			uxCurrentNumberOfTasks++;
			if( pxCurrentTCB == NULL )
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    358c:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    358e:	681b      	ldr	r3, [r3, #0]
    3590:	2b01      	cmp	r3, #1
    3592:	d012      	beq.n	35ba <xTaskGenericCreate+0x152>
    3594:	4b22      	ldr	r3, [pc, #136]	; (3620 <xTaskGenericCreate+0x1b8>)
    3596:	4e21      	ldr	r6, [pc, #132]	; (361c <xTaskGenericCreate+0x1b4>)
    3598:	4698      	mov	r8, r3
    359a:	e7be      	b.n	351a <xTaskGenericCreate+0xb2>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    359c:	00b7      	lsls	r7, r6, #2
    359e:	1c38      	adds	r0, r7, #0
    35a0:	f000 fe60 	bl	4264 <pvPortMalloc>
    35a4:	1c05      	adds	r5, r0, #0
    35a6:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    35a8:	2800      	cmp	r0, #0
    35aa:	d000      	beq.n	35ae <xTaskGenericCreate+0x146>
    35ac:	e774      	b.n	3498 <xTaskGenericCreate+0x30>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    35ae:	1c20      	adds	r0, r4, #0
    35b0:	f000 fe66 	bl	4280 <vPortFree>
		}
		portEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    35b4:	2001      	movs	r0, #1
    35b6:	4240      	negs	r0, r0
    35b8:	e7d2      	b.n	3560 <xTaskGenericCreate+0xf8>
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    35ba:	4a19      	ldr	r2, [pc, #100]	; (3620 <xTaskGenericCreate+0x1b8>)
    35bc:	1c10      	adds	r0, r2, #0
    35be:	4690      	mov	r8, r2
    35c0:	f7ff fc1a 	bl	2df8 <vListInitialise>
    35c4:	2114      	movs	r1, #20
    35c6:	1c08      	adds	r0, r1, #0
    35c8:	4440      	add	r0, r8
    35ca:	f7ff fc15 	bl	2df8 <vListInitialise>
    35ce:	2028      	movs	r0, #40	; 0x28
    35d0:	4440      	add	r0, r8
    35d2:	f7ff fc11 	bl	2df8 <vListInitialise>
    35d6:	233c      	movs	r3, #60	; 0x3c
    35d8:	1c18      	adds	r0, r3, #0
    35da:	4440      	add	r0, r8
    35dc:	f7ff fc0c 	bl	2df8 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    35e0:	4e13      	ldr	r6, [pc, #76]	; (3630 <xTaskGenericCreate+0x1c8>)
    35e2:	1c30      	adds	r0, r6, #0
    35e4:	f7ff fc08 	bl	2df8 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    35e8:	4a12      	ldr	r2, [pc, #72]	; (3634 <xTaskGenericCreate+0x1cc>)
    35ea:	1c10      	adds	r0, r2, #0
    35ec:	4691      	mov	r9, r2
    35ee:	f7ff fc03 	bl	2df8 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    35f2:	4811      	ldr	r0, [pc, #68]	; (3638 <xTaskGenericCreate+0x1d0>)
    35f4:	f7ff fc00 	bl	2df8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    35f8:	4810      	ldr	r0, [pc, #64]	; (363c <xTaskGenericCreate+0x1d4>)
    35fa:	f7ff fbfd 	bl	2df8 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    35fe:	4810      	ldr	r0, [pc, #64]	; (3640 <xTaskGenericCreate+0x1d8>)
    3600:	f7ff fbfa 	bl	2df8 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3604:	490f      	ldr	r1, [pc, #60]	; (3644 <xTaskGenericCreate+0x1dc>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3606:	4810      	ldr	r0, [pc, #64]	; (3648 <xTaskGenericCreate+0x1e0>)
    3608:	464a      	mov	r2, r9
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    360a:	600e      	str	r6, [r1, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    360c:	6002      	str	r2, [r0, #0]
    360e:	4e03      	ldr	r6, [pc, #12]	; (361c <xTaskGenericCreate+0x1b4>)
    3610:	e783      	b.n	351a <xTaskGenericCreate+0xb2>
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	40000b48 	.word	0x40000b48
    3618:	40000afc 	.word	0x40000afc
    361c:	40000aec 	.word	0x40000aec
    3620:	40000a68 	.word	0x40000a68
    3624:	40000b88 	.word	0x40000b88
    3628:	40000af4 	.word	0x40000af4
    362c:	40000a5c 	.word	0x40000a5c
    3630:	40000b4c 	.word	0x40000b4c
    3634:	40000b60 	.word	0x40000b60
    3638:	40000ad8 	.word	0x40000ad8
    363c:	40000abc 	.word	0x40000abc
    3640:	40000b34 	.word	0x40000b34
    3644:	40000ad4 	.word	0x40000ad4
    3648:	40000ab8 	.word	0x40000ab8

0000364c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    364c:	b570      	push	{r4, r5, r6, lr}
    364e:	1c04      	adds	r4, r0, #0
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    3650:	f00a faec 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3654:	4b16      	ldr	r3, [pc, #88]	; (36b0 <vTaskDelete+0x64>)
    3656:	681a      	ldr	r2, [r3, #0]
    3658:	4294      	cmp	r4, r2
    365a:	d025      	beq.n	36a8 <vTaskDelete+0x5c>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    365c:	1e25      	subs	r5, r4, #0
    365e:	d023      	beq.n	36a8 <vTaskDelete+0x5c>

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3660:	1d2e      	adds	r6, r5, #4
    3662:	1c30      	adds	r0, r6, #0
    3664:	f7ff fc04 	bl	2e70 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    3668:	6aab      	ldr	r3, [r5, #40]	; 0x28
    366a:	2b00      	cmp	r3, #0
    366c:	d003      	beq.n	3676 <vTaskDelete+0x2a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    366e:	1c28      	adds	r0, r5, #0
    3670:	3018      	adds	r0, #24
    3672:	f7ff fbfd 	bl	2e70 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3676:	1c31      	adds	r1, r6, #0
    3678:	480e      	ldr	r0, [pc, #56]	; (36b4 <vTaskDelete+0x68>)
    367a:	f7ff fbcd 	bl	2e18 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    367e:	4b0e      	ldr	r3, [pc, #56]	; (36b8 <vTaskDelete+0x6c>)

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3680:	4e0e      	ldr	r6, [pc, #56]	; (36bc <vTaskDelete+0x70>)
			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3682:	681a      	ldr	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3684:	6835      	ldr	r5, [r6, #0]
			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3686:	3201      	adds	r2, #1

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3688:	3501      	adds	r5, #1
			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    368a:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    368c:	6035      	str	r5, [r6, #0]

			traceTASK_DELETE( pxTCB );
		}
		portEXIT_CRITICAL();
    368e:	f00a fac9 	bl	dc24 <__vPortExitCritical_from_thumb>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3692:	490b      	ldr	r1, [pc, #44]	; (36c0 <vTaskDelete+0x74>)
    3694:	6808      	ldr	r0, [r1, #0]
    3696:	2800      	cmp	r0, #0
    3698:	d001      	beq.n	369e <vTaskDelete+0x52>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    369a:	2c00      	cmp	r4, #0
    369c:	d002      	beq.n	36a4 <vTaskDelete+0x58>
			{
				portYIELD_WITHIN_API();
			}
		}
	}
    369e:	bc70      	pop	{r4, r5, r6}
    36a0:	bc01      	pop	{r0}
    36a2:	4700      	bx	r0
		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
		{
			if( ( void * ) pxTaskToDelete == NULL )
			{
				portYIELD_WITHIN_API();
    36a4:	df00      	svc	0
    36a6:	e7fa      	b.n	369e <vTaskDelete+0x52>
			{
				pxTaskToDelete = NULL;
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    36a8:	681d      	ldr	r5, [r3, #0]
    36aa:	2400      	movs	r4, #0
    36ac:	e7d8      	b.n	3660 <vTaskDelete+0x14>
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	40000afc 	.word	0x40000afc
    36b4:	40000abc 	.word	0x40000abc
    36b8:	40000a60 	.word	0x40000a60
    36bc:	40000af4 	.word	0x40000af4
    36c0:	40000aec 	.word	0x40000aec

000036c4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    36c4:	b510      	push	{r4, lr}
    36c6:	1c04      	adds	r4, r0, #0
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		portENTER_CRITICAL();
    36c8:	f00a fab0 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36cc:	2c00      	cmp	r4, #0
    36ce:	d006      	beq.n	36de <uxTaskPriorityGet+0x1a>
			uxReturn = pxTCB->uxPriority;
    36d0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		}
		portEXIT_CRITICAL();
    36d2:	f00a faa7 	bl	dc24 <__vPortExitCritical_from_thumb>

		return uxReturn;
	}
    36d6:	1c20      	adds	r0, r4, #0
    36d8:	bc10      	pop	{r4}
    36da:	bc02      	pop	{r1}
    36dc:	4708      	bx	r1

		portENTER_CRITICAL();
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36de:	4b01      	ldr	r3, [pc, #4]	; (36e4 <uxTaskPriorityGet+0x20>)
    36e0:	681c      	ldr	r4, [r3, #0]
    36e2:	e7f5      	b.n	36d0 <uxTaskPriorityGet+0xc>
    36e4:	40000afc 	.word	0x40000afc

000036e8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    36e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ea:	1c06      	adds	r6, r0, #0
    36ec:	1c0d      	adds	r5, r1, #0
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    36ee:	2903      	cmp	r1, #3
    36f0:	d900      	bls.n	36f4 <vTaskPrioritySet+0xc>
    36f2:	2503      	movs	r5, #3
		if( uxNewPriority >= configMAX_PRIORITIES )
		{
			uxNewPriority = configMAX_PRIORITIES - 1;
		}

		portENTER_CRITICAL();
    36f4:	f00a fa9a 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			if( pxTask == pxCurrentTCB )
    36f8:	4b1f      	ldr	r3, [pc, #124]	; (3778 <vTaskPrioritySet+0x90>)
    36fa:	681a      	ldr	r2, [r3, #0]
    36fc:	4296      	cmp	r6, r2
    36fe:	d025      	beq.n	374c <vTaskPrioritySet+0x64>
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3700:	1e34      	subs	r4, r6, #0
    3702:	d023      	beq.n	374c <vTaskPrioritySet+0x64>

			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3704:	6c63      	ldr	r3, [r4, #68]	; 0x44
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3706:	42ab      	cmp	r3, r5
    3708:	d014      	beq.n	3734 <vTaskPrioritySet+0x4c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    370a:	d318      	bcc.n	373e <vTaskPrioritySet+0x56>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    370c:	4272      	negs	r2, r6
    370e:	4156      	adcs	r6, r2

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3710:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3712:	4293      	cmp	r3, r2
    3714:	d018      	beq.n	3748 <vTaskPrioritySet+0x60>
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3716:	2004      	movs	r0, #4

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3718:	009a      	lsls	r2, r3, #2
					{
						pxTCB->uxPriority = uxNewPriority;
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    371a:	6465      	str	r5, [r4, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    371c:	1b45      	subs	r5, r0, r5

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    371e:	18d7      	adds	r7, r2, r3
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3720:	61a5      	str	r5, [r4, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3722:	4d16      	ldr	r5, [pc, #88]	; (377c <vTaskPrioritySet+0x94>)
    3724:	00b9      	lsls	r1, r7, #2
    3726:	6960      	ldr	r0, [r4, #20]
    3728:	186b      	adds	r3, r5, r1
    372a:	4298      	cmp	r0, r3
    372c:	d011      	beq.n	3752 <vTaskPrioritySet+0x6a>
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
				}

				if( xYieldRequired == pdTRUE )
    372e:	2e01      	cmp	r6, #1
    3730:	d100      	bne.n	3734 <vTaskPrioritySet+0x4c>
				{
					portYIELD_WITHIN_API();
    3732:	df00      	svc	0
				}
			}
		}
		portEXIT_CRITICAL();
    3734:	f00a fa76 	bl	dc24 <__vPortExitCritical_from_thumb>
	}
    3738:	bcf8      	pop	{r3, r4, r5, r6, r7}
    373a:	bc01      	pop	{r0}
    373c:	4700      	bx	r0
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    373e:	1e72      	subs	r2, r6, #1
    3740:	4196      	sbcs	r6, r2

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3742:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3744:	4293      	cmp	r3, r2
    3746:	d1e6      	bne.n	3716 <vTaskPrioritySet+0x2e>
					{
						pxTCB->uxPriority = uxNewPriority;
    3748:	62e5      	str	r5, [r4, #44]	; 0x2c
    374a:	e7e4      	b.n	3716 <vTaskPrioritySet+0x2e>
				pxTask = NULL;
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    374c:	681c      	ldr	r4, [r3, #0]
    374e:	2600      	movs	r6, #0
    3750:	e7d8      	b.n	3704 <vTaskPrioritySet+0x1c>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3752:	1d27      	adds	r7, r4, #4
    3754:	1c38      	adds	r0, r7, #0
    3756:	f7ff fb8b 	bl	2e70 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    375a:	4a09      	ldr	r2, [pc, #36]	; (3780 <vTaskPrioritySet+0x98>)
    375c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    375e:	6811      	ldr	r1, [r2, #0]
    3760:	428b      	cmp	r3, r1
    3762:	d900      	bls.n	3766 <vTaskPrioritySet+0x7e>
    3764:	6013      	str	r3, [r2, #0]
    3766:	009a      	lsls	r2, r3, #2
    3768:	18d3      	adds	r3, r2, r3
    376a:	009c      	lsls	r4, r3, #2
    376c:	1928      	adds	r0, r5, r4
    376e:	1c39      	adds	r1, r7, #0
    3770:	f7ff fb52 	bl	2e18 <vListInsertEnd>
    3774:	e7db      	b.n	372e <vTaskPrioritySet+0x46>
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	40000afc 	.word	0x40000afc
    377c:	40000a68 	.word	0x40000a68
    3780:	40000a5c 	.word	0x40000a5c

00003784 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3784:	b500      	push	{lr}
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3786:	6941      	ldr	r1, [r0, #20]
    3788:	4a06      	ldr	r2, [pc, #24]	; (37a4 <xTaskIsTaskSuspended+0x20>)
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    378a:	1c03      	adds	r3, r0, #0
	portBASE_TYPE xReturn = pdFALSE;
    378c:	2000      	movs	r0, #0
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    378e:	4291      	cmp	r1, r2
    3790:	d001      	beq.n	3796 <xTaskIsTaskSuspended+0x12>
				}
			}
		}

		return xReturn;
	}
    3792:	bc02      	pop	{r1}
    3794:	4708      	bx	r1
		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3798:	4a03      	ldr	r2, [pc, #12]	; (37a8 <xTaskIsTaskSuspended+0x24>)
    379a:	4293      	cmp	r3, r2
    379c:	d0f9      	beq.n	3792 <xTaskIsTaskSuspended+0xe>

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
    379e:	4258      	negs	r0, r3
    37a0:	4158      	adcs	r0, r3
    37a2:	e7f6      	b.n	3792 <xTaskIsTaskSuspended+0xe>
    37a4:	40000b34 	.word	0x40000b34
    37a8:	40000ad8 	.word	0x40000ad8

000037ac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    37ac:	b570      	push	{r4, r5, r6, lr}
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    37ae:	1e04      	subs	r4, r0, #0
    37b0:	d00b      	beq.n	37ca <vTaskResume+0x1e>
    37b2:	4d17      	ldr	r5, [pc, #92]	; (3810 <vTaskResume+0x64>)
    37b4:	682b      	ldr	r3, [r5, #0]
    37b6:	429c      	cmp	r4, r3
    37b8:	d007      	beq.n	37ca <vTaskResume+0x1e>
		{
			portENTER_CRITICAL();
    37ba:	f00a fa37 	bl	dc2c <__vPortEnterCritical_from_thumb>
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    37be:	6962      	ldr	r2, [r4, #20]
    37c0:	4b14      	ldr	r3, [pc, #80]	; (3814 <vTaskResume+0x68>)
    37c2:	429a      	cmp	r2, r3
    37c4:	d004      	beq.n	37d0 <vTaskResume+0x24>
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
					}
				}
			}
			portEXIT_CRITICAL();
    37c6:	f00a fa2d 	bl	dc24 <__vPortExitCritical_from_thumb>
		}
	}
    37ca:	bc70      	pop	{r4, r5, r6}
    37cc:	bc01      	pop	{r0}
    37ce:	4700      	bx	r0
		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    37d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    37d2:	4a11      	ldr	r2, [pc, #68]	; (3818 <vTaskResume+0x6c>)
    37d4:	4293      	cmp	r3, r2
    37d6:	d0f6      	beq.n	37c6 <vTaskResume+0x1a>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    37d8:	2b00      	cmp	r3, #0
    37da:	d1f4      	bne.n	37c6 <vTaskResume+0x1a>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    37dc:	1d26      	adds	r6, r4, #4
    37de:	1c30      	adds	r0, r6, #0
    37e0:	f7ff fb46 	bl	2e70 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    37e4:	4a0d      	ldr	r2, [pc, #52]	; (381c <vTaskResume+0x70>)
    37e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    37e8:	6811      	ldr	r1, [r2, #0]
    37ea:	428b      	cmp	r3, r1
    37ec:	d900      	bls.n	37f0 <vTaskResume+0x44>
    37ee:	6013      	str	r3, [r2, #0]
    37f0:	0099      	lsls	r1, r3, #2
    37f2:	18cb      	adds	r3, r1, r3
    37f4:	4a0a      	ldr	r2, [pc, #40]	; (3820 <vTaskResume+0x74>)
    37f6:	0098      	lsls	r0, r3, #2
    37f8:	1810      	adds	r0, r2, r0
    37fa:	1c31      	adds	r1, r6, #0
    37fc:	f7ff fb0c 	bl	2e18 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3800:	6829      	ldr	r1, [r5, #0]
    3802:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3804:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    3806:	4298      	cmp	r0, r3
    3808:	d3dd      	bcc.n	37c6 <vTaskResume+0x1a>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    380a:	df00      	svc	0
    380c:	e7db      	b.n	37c6 <vTaskResume+0x1a>
    380e:	46c0      	nop			; (mov r8, r8)
    3810:	40000afc 	.word	0x40000afc
    3814:	40000b34 	.word	0x40000b34
    3818:	40000ad8 	.word	0x40000ad8
    381c:	40000a5c 	.word	0x40000a5c
    3820:	40000a68 	.word	0x40000a68

00003824 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3824:	b570      	push	{r4, r5, r6, lr}
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3826:	6942      	ldr	r2, [r0, #20]
    3828:	4b18      	ldr	r3, [pc, #96]	; (388c <xTaskResumeFromISR+0x68>)
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    382a:	1c04      	adds	r4, r0, #0
	portBASE_TYPE xYieldRequired = pdFALSE;
    382c:	2500      	movs	r5, #0
	portBASE_TYPE xReturn = pdFALSE;
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    382e:	429a      	cmp	r2, r3
    3830:	d003      	beq.n	383a <xTaskResumeFromISR+0x16>
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
			}
		}

		return xYieldRequired;
	}
    3832:	1c28      	adds	r0, r5, #0
    3834:	bc70      	pop	{r4, r5, r6}
    3836:	bc02      	pop	{r1}
    3838:	4708      	bx	r1
		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    383a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    383c:	4814      	ldr	r0, [pc, #80]	; (3890 <xTaskResumeFromISR+0x6c>)
    383e:	4283      	cmp	r3, r0
    3840:	d0f7      	beq.n	3832 <xTaskResumeFromISR+0xe>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3842:	42ab      	cmp	r3, r5
    3844:	d1f5      	bne.n	3832 <xTaskResumeFromISR+0xe>

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3846:	4b13      	ldr	r3, [pc, #76]	; (3894 <xTaskResumeFromISR+0x70>)
    3848:	681e      	ldr	r6, [r3, #0]
    384a:	2e00      	cmp	r6, #0
    384c:	d118      	bne.n	3880 <xTaskResumeFromISR+0x5c>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    384e:	4b12      	ldr	r3, [pc, #72]	; (3898 <xTaskResumeFromISR+0x74>)
    3850:	681a      	ldr	r2, [r3, #0]
    3852:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3854:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
    3856:	42b0      	cmp	r0, r6
    3858:	416d      	adcs	r5, r5
				vListRemove(  &( pxTCB->xGenericListItem ) );
    385a:	1d26      	adds	r6, r4, #4
    385c:	1c30      	adds	r0, r6, #0
    385e:	f7ff fb07 	bl	2e70 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    3862:	4a0e      	ldr	r2, [pc, #56]	; (389c <xTaskResumeFromISR+0x78>)
    3864:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3866:	6811      	ldr	r1, [r2, #0]
    3868:	428b      	cmp	r3, r1
    386a:	d900      	bls.n	386e <xTaskResumeFromISR+0x4a>
    386c:	6013      	str	r3, [r2, #0]
    386e:	009a      	lsls	r2, r3, #2
    3870:	18d0      	adds	r0, r2, r3
    3872:	4c0b      	ldr	r4, [pc, #44]	; (38a0 <xTaskResumeFromISR+0x7c>)
    3874:	0081      	lsls	r1, r0, #2
    3876:	1860      	adds	r0, r4, r1
    3878:	1c31      	adds	r1, r6, #0
    387a:	f7ff facd 	bl	2e18 <vListInsertEnd>
    387e:	e7d8      	b.n	3832 <xTaskResumeFromISR+0xe>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3880:	1c21      	adds	r1, r4, #0
    3882:	3118      	adds	r1, #24
    3884:	f7ff fac8 	bl	2e18 <vListInsertEnd>
    3888:	e7d3      	b.n	3832 <xTaskResumeFromISR+0xe>
    388a:	46c0      	nop			; (mov r8, r8)
    388c:	40000b34 	.word	0x40000b34
    3890:	40000ad8 	.word	0x40000ad8
    3894:	40000b74 	.word	0x40000b74
    3898:	40000afc 	.word	0x40000afc
    389c:	40000a5c 	.word	0x40000a5c
    38a0:	40000a68 	.word	0x40000a68

000038a4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    38a4:	b530      	push	{r4, r5, lr}
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    38a6:	2400      	movs	r4, #0
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    38a8:	b085      	sub	sp, #20
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
    38aa:	480d      	ldr	r0, [pc, #52]	; (38e0 <vTaskStartScheduler+0x3c>)
    38ac:	490d      	ldr	r1, [pc, #52]	; (38e4 <vTaskStartScheduler+0x40>)
    38ae:	2268      	movs	r2, #104	; 0x68
    38b0:	1c23      	adds	r3, r4, #0
    38b2:	9400      	str	r4, [sp, #0]
    38b4:	9401      	str	r4, [sp, #4]
    38b6:	9402      	str	r4, [sp, #8]
    38b8:	9403      	str	r4, [sp, #12]
    38ba:	f7ff fdd5 	bl	3468 <xTaskGenericCreate>
    38be:	1c05      	adds	r5, r0, #0

	if( xReturn == pdPASS )
    38c0:	2801      	cmp	r0, #1
    38c2:	d003      	beq.n	38cc <vTaskStartScheduler+0x28>
		else
		{
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}
}
    38c4:	b005      	add	sp, #20
    38c6:	bc30      	pop	{r4, r5}
    38c8:	bc01      	pop	{r0}
    38ca:	4700      	bx	r0
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    38cc:	f00a f9f6 	bl	dcbc <__vPortDisableInterruptsFromThumb_from_thumb>

		xSchedulerRunning = pdTRUE;
		xTickCount = ( portTickType ) 0;
    38d0:	4b05      	ldr	r3, [pc, #20]	; (38e8 <vTaskStartScheduler+0x44>)

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();

		xSchedulerRunning = pdTRUE;
    38d2:	4806      	ldr	r0, [pc, #24]	; (38ec <vTaskStartScheduler+0x48>)
    38d4:	6005      	str	r5, [r0, #0]
		xTickCount = ( portTickType ) 0;
    38d6:	601c      	str	r4, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
    38d8:	f000 fc8e 	bl	41f8 <xPortStartScheduler>
    38dc:	e7f2      	b.n	38c4 <vTaskStartScheduler+0x20>
    38de:	46c0      	nop			; (mov r8, r8)
    38e0:	00003c75 	.word	0x00003c75
    38e4:	0000e8e8 	.word	0x0000e8e8
    38e8:	40000a64 	.word	0x40000a64
    38ec:	40000aec 	.word	0x40000aec

000038f0 <vTaskEndScheduler>:
	}
}
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    38f0:	b508      	push	{r3, lr}
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    38f2:	f00a f9e3 	bl	dcbc <__vPortDisableInterruptsFromThumb_from_thumb>
	xSchedulerRunning = pdFALSE;
    38f6:	4b04      	ldr	r3, [pc, #16]	; (3908 <vTaskEndScheduler+0x18>)
    38f8:	2200      	movs	r2, #0
    38fa:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    38fc:	f000 fcb0 	bl	4260 <vPortEndScheduler>
}
    3900:	bc08      	pop	{r3}
    3902:	bc01      	pop	{r0}
    3904:	4700      	bx	r0
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	40000aec 	.word	0x40000aec

0000390c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    390c:	4b02      	ldr	r3, [pc, #8]	; (3918 <vTaskSuspendAll+0xc>)
    390e:	681a      	ldr	r2, [r3, #0]
    3910:	3201      	adds	r2, #1
    3912:	601a      	str	r2, [r3, #0]
}
    3914:	4770      	bx	lr
    3916:	46c0      	nop			; (mov r8, r8)
    3918:	40000b74 	.word	0x40000b74

0000391c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    391c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portENTER_CRITICAL();
    391e:	f00a f985 	bl	dc2c <__vPortEnterCritical_from_thumb>
	{
		xTicks = xTickCount;
    3922:	4b04      	ldr	r3, [pc, #16]	; (3934 <xTaskGetTickCount+0x18>)
    3924:	681c      	ldr	r4, [r3, #0]
	}
	portEXIT_CRITICAL();
    3926:	f00a f97d 	bl	dc24 <__vPortExitCritical_from_thumb>

	return xTicks;
}
    392a:	1c20      	adds	r0, r4, #0
    392c:	bc10      	pop	{r4}
    392e:	bc02      	pop	{r1}
    3930:	4708      	bx	r1
    3932:	46c0      	nop			; (mov r8, r8)
    3934:	40000a64 	.word	0x40000a64

00003938 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
	return xTickCount;
    3938:	4b01      	ldr	r3, [pc, #4]	; (3940 <xTaskGetTickCountFromISR+0x8>)
    393a:	6818      	ldr	r0, [r3, #0]
}
    393c:	4770      	bx	lr
    393e:	46c0      	nop			; (mov r8, r8)
    3940:	40000a64 	.word	0x40000a64

00003944 <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3944:	4b01      	ldr	r3, [pc, #4]	; (394c <uxTaskGetNumberOfTasks+0x8>)
    3946:	6818      	ldr	r0, [r3, #0]
}
    3948:	4770      	bx	lr
    394a:	46c0      	nop			; (mov r8, r8)
    394c:	40000b48 	.word	0x40000b48

00003950 <vTaskStartTrace>:
/*----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
	{
    3950:	b538      	push	{r3, r4, r5, lr}
    3952:	1c04      	adds	r4, r0, #0
    3954:	1c0d      	adds	r5, r1, #0
		portENTER_CRITICAL();
    3956:	f00a f969 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			pcTraceBuffer = ( signed char * )pcBuffer;
    395a:	4a08      	ldr	r2, [pc, #32]	; (397c <vTaskStartTrace+0x2c>)
			pcTraceBufferStart = pcBuffer;
    395c:	4908      	ldr	r1, [pc, #32]	; (3980 <vTaskStartTrace+0x30>)
			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
    395e:	3d08      	subs	r5, #8
    3960:	4808      	ldr	r0, [pc, #32]	; (3984 <vTaskStartTrace+0x34>)
			xTracing = pdTRUE;
    3962:	4b09      	ldr	r3, [pc, #36]	; (3988 <vTaskStartTrace+0x38>)

	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
	{
		portENTER_CRITICAL();
		{
			pcTraceBuffer = ( signed char * )pcBuffer;
    3964:	6014      	str	r4, [r2, #0]
			pcTraceBufferStart = pcBuffer;
    3966:	600c      	str	r4, [r1, #0]
			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
			xTracing = pdTRUE;
    3968:	2201      	movs	r2, #1
	{
		portENTER_CRITICAL();
		{
			pcTraceBuffer = ( signed char * )pcBuffer;
			pcTraceBufferStart = pcBuffer;
			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
    396a:	1964      	adds	r4, r4, r5
    396c:	6004      	str	r4, [r0, #0]
			xTracing = pdTRUE;
    396e:	601a      	str	r2, [r3, #0]
		}
		portEXIT_CRITICAL();
    3970:	f00a f958 	bl	dc24 <__vPortExitCritical_from_thumb>
	}
    3974:	bc38      	pop	{r3, r4, r5}
    3976:	bc01      	pop	{r0}
    3978:	4700      	bx	r0
    397a:	46c0      	nop			; (mov r8, r8)
    397c:	40000af8 	.word	0x40000af8
    3980:	40000b7c 	.word	0x40000b7c
    3984:	40000b80 	.word	0x40000b80
    3988:	40000ad0 	.word	0x40000ad0

0000398c <ulTaskEndTrace>:
/*----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned long ulTaskEndTrace( void )
	{
    398c:	b508      	push	{r3, lr}
	unsigned long ulBufferLength;

		portENTER_CRITICAL();
    398e:	f00a f94d 	bl	dc2c <__vPortEnterCritical_from_thumb>
			xTracing = pdFALSE;
    3992:	4b06      	ldr	r3, [pc, #24]	; (39ac <ulTaskEndTrace+0x20>)
    3994:	2000      	movs	r0, #0
    3996:	6018      	str	r0, [r3, #0]
		portEXIT_CRITICAL();
    3998:	f00a f944 	bl	dc24 <__vPortExitCritical_from_thumb>

		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
    399c:	4a04      	ldr	r2, [pc, #16]	; (39b0 <ulTaskEndTrace+0x24>)
    399e:	4905      	ldr	r1, [pc, #20]	; (39b4 <ulTaskEndTrace+0x28>)
    39a0:	6810      	ldr	r0, [r2, #0]
    39a2:	680b      	ldr	r3, [r1, #0]
    39a4:	1ac0      	subs	r0, r0, r3

		return ulBufferLength;
	}
    39a6:	bc08      	pop	{r3}
    39a8:	bc02      	pop	{r1}
    39aa:	4708      	bx	r1
    39ac:	40000ad0 	.word	0x40000ad0
    39b0:	40000af8 	.word	0x40000af8
    39b4:	40000b7c 	.word	0x40000b7c

000039b8 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
    39b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39ba:	464f      	mov	r7, r9
    39bc:	4646      	mov	r6, r8
    39be:	b4c0      	push	{r6, r7}
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    39c0:	4829      	ldr	r0, [pc, #164]	; (3a68 <vTaskIncrementTick+0xb0>)
    39c2:	6803      	ldr	r3, [r0, #0]
    39c4:	2b00      	cmp	r3, #0
    39c6:	d148      	bne.n	3a5a <vTaskIncrementTick+0xa2>
	{
		++xTickCount;
    39c8:	4a28      	ldr	r2, [pc, #160]	; (3a6c <vTaskIncrementTick+0xb4>)
    39ca:	6814      	ldr	r4, [r2, #0]
    39cc:	3401      	adds	r4, #1
    39ce:	6014      	str	r4, [r2, #0]
		if( xTickCount == ( portTickType ) 0 )
    39d0:	6811      	ldr	r1, [r2, #0]
	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
	{
		++xTickCount;
    39d2:	4690      	mov	r8, r2
		if( xTickCount == ( portTickType ) 0 )
    39d4:	2900      	cmp	r1, #0
    39d6:	d035      	beq.n	3a44 <vTaskIncrementTick+0x8c>
    39d8:	4d25      	ldr	r5, [pc, #148]	; (3a70 <vTaskIncrementTick+0xb8>)
			pxOverflowDelayedTaskList = pxTemp;
			xNumOfOverflows++;
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    39da:	4b26      	ldr	r3, [pc, #152]	; (3a74 <vTaskIncrementTick+0xbc>)
    39dc:	4e26      	ldr	r6, [pc, #152]	; (3a78 <vTaskIncrementTick+0xc0>)
    39de:	4699      	mov	r9, r3
    39e0:	e020      	b.n	3a24 <vTaskIncrementTick+0x6c>
    39e2:	682c      	ldr	r4, [r5, #0]
    39e4:	68e2      	ldr	r2, [r4, #12]
    39e6:	68d4      	ldr	r4, [r2, #12]
    39e8:	2c00      	cmp	r4, #0
    39ea:	d01f      	beq.n	3a2c <vTaskIncrementTick+0x74>
    39ec:	4642      	mov	r2, r8
    39ee:	6813      	ldr	r3, [r2, #0]
    39f0:	6862      	ldr	r2, [r4, #4]
    39f2:	429a      	cmp	r2, r3
    39f4:	d81a      	bhi.n	3a2c <vTaskIncrementTick+0x74>
    39f6:	1d27      	adds	r7, r4, #4
    39f8:	1c38      	adds	r0, r7, #0
    39fa:	f7ff fa39 	bl	2e70 <vListRemove>
    39fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3a00:	2800      	cmp	r0, #0
    3a02:	d003      	beq.n	3a0c <vTaskIncrementTick+0x54>
    3a04:	1c20      	adds	r0, r4, #0
    3a06:	3018      	adds	r0, #24
    3a08:	f7ff fa32 	bl	2e70 <vListRemove>
    3a0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3a0e:	6832      	ldr	r2, [r6, #0]
    3a10:	4293      	cmp	r3, r2
    3a12:	d900      	bls.n	3a16 <vTaskIncrementTick+0x5e>
    3a14:	6033      	str	r3, [r6, #0]
    3a16:	0099      	lsls	r1, r3, #2
    3a18:	18cc      	adds	r4, r1, r3
    3a1a:	00a0      	lsls	r0, r4, #2
    3a1c:	4448      	add	r0, r9
    3a1e:	1c39      	adds	r1, r7, #0
    3a20:	f7ff f9fa 	bl	2e18 <vListInsertEnd>
    3a24:	6828      	ldr	r0, [r5, #0]
    3a26:	6807      	ldr	r7, [r0, #0]
    3a28:	2f00      	cmp	r7, #0
    3a2a:	d1da      	bne.n	39e2 <vTaskIncrementTick+0x2a>
    3a2c:	4c13      	ldr	r4, [pc, #76]	; (3a7c <vTaskIncrementTick+0xc4>)
	{
		extern void vApplicationTickHook( void );

		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == 0 )
    3a2e:	6826      	ldr	r6, [r4, #0]
    3a30:	2e00      	cmp	r6, #0
    3a32:	d101      	bne.n	3a38 <vTaskIncrementTick+0x80>
		{
			vApplicationTickHook();
    3a34:	f7fd fa90 	bl	f58 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3a38:	bc0c      	pop	{r2, r3}
    3a3a:	4690      	mov	r8, r2
    3a3c:	4699      	mov	r9, r3
    3a3e:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3a40:	bc01      	pop	{r0}
    3a42:	4700      	bx	r0
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
    3a44:	4d0a      	ldr	r5, [pc, #40]	; (3a70 <vTaskIncrementTick+0xb8>)
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3a46:	4b0e      	ldr	r3, [pc, #56]	; (3a80 <vTaskIncrementTick+0xc8>)
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
    3a48:	6828      	ldr	r0, [r5, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3a4a:	6819      	ldr	r1, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
			xNumOfOverflows++;
    3a4c:	4f0d      	ldr	r7, [pc, #52]	; (3a84 <vTaskIncrementTick+0xcc>)

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			pxTemp = pxDelayedTaskList;
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3a4e:	6029      	str	r1, [r5, #0]
			pxOverflowDelayedTaskList = pxTemp;
    3a50:	6018      	str	r0, [r3, #0]
			xNumOfOverflows++;
    3a52:	683e      	ldr	r6, [r7, #0]
    3a54:	3601      	adds	r6, #1
    3a56:	603e      	str	r6, [r7, #0]
    3a58:	e7bf      	b.n	39da <vTaskIncrementTick+0x22>
		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
	}
	else
	{
		++uxMissedTicks;
    3a5a:	4c08      	ldr	r4, [pc, #32]	; (3a7c <vTaskIncrementTick+0xc4>)
    3a5c:	6825      	ldr	r5, [r4, #0]
    3a5e:	3501      	adds	r5, #1
    3a60:	6025      	str	r5, [r4, #0]
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			extern void vApplicationTickHook( void );

			vApplicationTickHook();
    3a62:	f7fd fa79 	bl	f58 <vApplicationTickHook>
    3a66:	e7e2      	b.n	3a2e <vTaskIncrementTick+0x76>
    3a68:	40000b74 	.word	0x40000b74
    3a6c:	40000a64 	.word	0x40000a64
    3a70:	40000ad4 	.word	0x40000ad4
    3a74:	40000a68 	.word	0x40000a68
    3a78:	40000a5c 	.word	0x40000a5c
    3a7c:	40000b78 	.word	0x40000b78
    3a80:	40000ab8 	.word	0x40000ab8
    3a84:	40000b84 	.word	0x40000b84

00003a88 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a8a:	4657      	mov	r7, sl
    3a8c:	464e      	mov	r6, r9
    3a8e:	4645      	mov	r5, r8
    3a90:	b4e0      	push	{r5, r6, r7}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
    3a92:	f00a f8cb 	bl	dc2c <__vPortEnterCritical_from_thumb>
	{
		--uxSchedulerSuspended;
    3a96:	4b2d      	ldr	r3, [pc, #180]	; (3b4c <xTaskResumeAll+0xc4>)
    3a98:	681a      	ldr	r2, [r3, #0]
    3a9a:	3a01      	subs	r2, #1
    3a9c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3a9e:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3aa0:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	portENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3aa2:	42a3      	cmp	r3, r4
    3aa4:	d119      	bne.n	3ada <xTaskResumeAll+0x52>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
    3aa6:	482a      	ldr	r0, [pc, #168]	; (3b50 <xTaskResumeAll+0xc8>)
    3aa8:	6804      	ldr	r4, [r0, #0]
    3aaa:	2c00      	cmp	r4, #0
    3aac:	d015      	beq.n	3ada <xTaskResumeAll+0x52>
    3aae:	469a      	mov	sl, r3
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3ab0:	4a28      	ldr	r2, [pc, #160]	; (3b54 <xTaskResumeAll+0xcc>)

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3ab2:	4b29      	ldr	r3, [pc, #164]	; (3b58 <xTaskResumeAll+0xd0>)
    3ab4:	4d29      	ldr	r5, [pc, #164]	; (3b5c <xTaskResumeAll+0xd4>)
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
    3ab6:	4e2a      	ldr	r6, [pc, #168]	; (3b60 <xTaskResumeAll+0xd8>)
    3ab8:	4691      	mov	r9, r2

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3aba:	4698      	mov	r8, r3
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
    3abc:	682c      	ldr	r4, [r5, #0]
    3abe:	2c00      	cmp	r4, #0
    3ac0:	d123      	bne.n	3b0a <xTaskResumeAll+0x82>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    3ac2:	4c28      	ldr	r4, [pc, #160]	; (3b64 <xTaskResumeAll+0xdc>)
    3ac4:	6823      	ldr	r3, [r4, #0]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d116      	bne.n	3af8 <xTaskResumeAll+0x70>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3aca:	2201      	movs	r2, #1
    3acc:	4592      	cmp	sl, r2
    3ace:	d016      	beq.n	3afe <xTaskResumeAll+0x76>
    3ad0:	4a25      	ldr	r2, [pc, #148]	; (3b68 <xTaskResumeAll+0xe0>)
    3ad2:	6810      	ldr	r0, [r2, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3ad4:	1c1c      	adds	r4, r3, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3ad6:	2801      	cmp	r0, #1
    3ad8:	d012      	beq.n	3b00 <xTaskResumeAll+0x78>
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	portEXIT_CRITICAL();
    3ada:	f00a f8a3 	bl	dc24 <__vPortExitCritical_from_thumb>

	return xAlreadyYielded;
}
    3ade:	1c20      	adds	r0, r4, #0
    3ae0:	bc1c      	pop	{r2, r3, r4}
    3ae2:	4690      	mov	r8, r2
    3ae4:	4699      	mov	r9, r3
    3ae6:	46a2      	mov	sl, r4
    3ae8:	bcf0      	pop	{r4, r5, r6, r7}
    3aea:	bc02      	pop	{r1}
    3aec:	4708      	bx	r1
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
					{
						vTaskIncrementTick();
    3aee:	f7ff ff63 	bl	39b8 <vTaskIncrementTick>
						--uxMissedTicks;
    3af2:	6825      	ldr	r5, [r4, #0]
    3af4:	3d01      	subs	r5, #1
    3af6:	6025      	str	r5, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
    3af8:	6826      	ldr	r6, [r4, #0]
    3afa:	2e00      	cmp	r6, #0
    3afc:	d1f7      	bne.n	3aee <xTaskResumeAll+0x66>
    3afe:	4a1a      	ldr	r2, [pc, #104]	; (3b68 <xTaskResumeAll+0xe0>)
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    3b00:	2100      	movs	r1, #0
    3b02:	6011      	str	r1, [r2, #0]
					portYIELD_WITHIN_API();
    3b04:	df00      	svc	0
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    3b06:	2401      	movs	r4, #1
    3b08:	e7e7      	b.n	3ada <xTaskResumeAll+0x52>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
    3b0a:	68ef      	ldr	r7, [r5, #12]
    3b0c:	68fc      	ldr	r4, [r7, #12]
    3b0e:	2c00      	cmp	r4, #0
    3b10:	d0d7      	beq.n	3ac2 <xTaskResumeAll+0x3a>
				{
					vListRemove( &( pxTCB->xEventListItem ) );
    3b12:	1c20      	adds	r0, r4, #0
    3b14:	3018      	adds	r0, #24
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b16:	1d27      	adds	r7, r4, #4

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( ( pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) ) ) != NULL )
				{
					vListRemove( &( pxTCB->xEventListItem ) );
    3b18:	f7ff f9aa 	bl	2e70 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b1c:	1c38      	adds	r0, r7, #0
    3b1e:	f7ff f9a7 	bl	2e70 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3b24:	6832      	ldr	r2, [r6, #0]
    3b26:	4293      	cmp	r3, r2
    3b28:	d900      	bls.n	3b2c <xTaskResumeAll+0xa4>
    3b2a:	6033      	str	r3, [r6, #0]
    3b2c:	0099      	lsls	r1, r3, #2
    3b2e:	18c8      	adds	r0, r1, r3
    3b30:	0080      	lsls	r0, r0, #2
    3b32:	1c39      	adds	r1, r7, #0
    3b34:	4448      	add	r0, r9
    3b36:	f7ff f96f 	bl	2e18 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b3a:	4642      	mov	r2, r8
    3b3c:	6817      	ldr	r7, [r2, #0]
    3b3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    3b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b42:	4299      	cmp	r1, r3
    3b44:	d3ba      	bcc.n	3abc <xTaskResumeAll+0x34>
					{
						xYieldRequired = pdTRUE;
    3b46:	2301      	movs	r3, #1
    3b48:	469a      	mov	sl, r3
    3b4a:	e7b7      	b.n	3abc <xTaskResumeAll+0x34>
    3b4c:	40000b74 	.word	0x40000b74
    3b50:	40000b48 	.word	0x40000b48
    3b54:	40000a68 	.word	0x40000a68
    3b58:	40000afc 	.word	0x40000afc
    3b5c:	40000ad8 	.word	0x40000ad8
    3b60:	40000a5c 	.word	0x40000a5c
    3b64:	40000b78 	.word	0x40000b78
    3b68:	40000af0 	.word	0x40000af0

00003b6c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    3b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3b6e:	4f39      	ldr	r7, [pc, #228]	; (3c54 <vTaskList+0xe8>)
    3b70:	683e      	ldr	r6, [r7, #0]
		vTaskSuspendAll();
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
    3b72:	2400      	movs	r4, #0

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3b74:	3601      	adds	r6, #1
    3b76:	603e      	str	r6, [r7, #0]
		vTaskSuspendAll();
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
    3b78:	7004      	strb	r4, [r0, #0]
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    3b7a:	1c05      	adds	r5, r0, #0
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			pcWriteBuffer[ 0 ] = ( signed char ) 0x00;
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    3b7c:	f001 fd2c 	bl	55d8 <strlen>
    3b80:	4935      	ldr	r1, [pc, #212]	; (3c58 <vTaskList+0xec>)
    3b82:	2203      	movs	r2, #3
    3b84:	1828      	adds	r0, r5, r0
    3b86:	f001 fb25 	bl	51d4 <memcpy>

			uxQueue = uxTopUsedPriority + 1;
    3b8a:	4a34      	ldr	r2, [pc, #208]	; (3c5c <vTaskList+0xf0>)
    3b8c:	6814      	ldr	r4, [r2, #0]

			do
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3b8e:	00a0      	lsls	r0, r4, #2
    3b90:	4e33      	ldr	r6, [pc, #204]	; (3c60 <vTaskList+0xf4>)
    3b92:	1901      	adds	r1, r0, r4
    3b94:	0089      	lsls	r1, r1, #2
    3b96:	5873      	ldr	r3, [r6, r1]
    3b98:	2701      	movs	r7, #1
    3b9a:	4027      	ands	r7, r4
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d146      	bne.n	3c2e <vTaskList+0xc2>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    3ba0:	2c00      	cmp	r4, #0
    3ba2:	d024      	beq.n	3bee <vTaskList+0x82>
    3ba4:	2f00      	cmp	r7, #0
    3ba6:	d008      	beq.n	3bba <vTaskList+0x4e>

			uxQueue = uxTopUsedPriority + 1;

			do
			{
				uxQueue--;
    3ba8:	3c01      	subs	r4, #1

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3baa:	00a7      	lsls	r7, r4, #2
    3bac:	1939      	adds	r1, r7, r4
    3bae:	0089      	lsls	r1, r1, #2
    3bb0:	5872      	ldr	r2, [r6, r1]
    3bb2:	2a00      	cmp	r2, #0
    3bb4:	d114      	bne.n	3be0 <vTaskList+0x74>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    3bb6:	2c00      	cmp	r4, #0
    3bb8:	d019      	beq.n	3bee <vTaskList+0x82>

			uxQueue = uxTopUsedPriority + 1;

			do
			{
				uxQueue--;
    3bba:	3c01      	subs	r4, #1

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3bbc:	00a0      	lsls	r0, r4, #2
    3bbe:	1901      	adds	r1, r0, r4
    3bc0:	0089      	lsls	r1, r1, #2
    3bc2:	5873      	ldr	r3, [r6, r1]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d0ef      	beq.n	3ba8 <vTaskList+0x3c>

			uxQueue = uxTopUsedPriority + 1;

			do
			{
				uxQueue--;
    3bc8:	3c01      	subs	r4, #1

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    3bca:	1871      	adds	r1, r6, r1
    3bcc:	2252      	movs	r2, #82	; 0x52
    3bce:	1c28      	adds	r0, r5, #0

			do
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3bd0:	00a7      	lsls	r7, r4, #2
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    3bd2:	f7ff fbf7 	bl	33c4 <prvListTaskWithinSingleList>

			do
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
    3bd6:	1939      	adds	r1, r7, r4
    3bd8:	0089      	lsls	r1, r1, #2
    3bda:	5872      	ldr	r2, [r6, r1]
    3bdc:	2a00      	cmp	r2, #0
    3bde:	d0ea      	beq.n	3bb6 <vTaskList+0x4a>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    3be0:	1871      	adds	r1, r6, r1
    3be2:	1c28      	adds	r0, r5, #0
    3be4:	2252      	movs	r2, #82	; 0x52
    3be6:	f7ff fbed 	bl	33c4 <prvListTaskWithinSingleList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    3bea:	2c00      	cmp	r4, #0
    3bec:	d1e5      	bne.n	3bba <vTaskList+0x4e>

			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
    3bee:	4b1d      	ldr	r3, [pc, #116]	; (3c64 <vTaskList+0xf8>)
    3bf0:	681c      	ldr	r4, [r3, #0]
    3bf2:	6822      	ldr	r2, [r4, #0]
    3bf4:	2a00      	cmp	r2, #0
    3bf6:	d126      	bne.n	3c46 <vTaskList+0xda>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
			}

			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
    3bf8:	4b1b      	ldr	r3, [pc, #108]	; (3c68 <vTaskList+0xfc>)
    3bfa:	681f      	ldr	r7, [r3, #0]
    3bfc:	683e      	ldr	r6, [r7, #0]
    3bfe:	2e00      	cmp	r6, #0
    3c00:	d11b      	bne.n	3c3a <vTaskList+0xce>
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
    3c02:	491a      	ldr	r1, [pc, #104]	; (3c6c <vTaskList+0x100>)
    3c04:	680b      	ldr	r3, [r1, #0]
    3c06:	2b00      	cmp	r3, #0
    3c08:	d10c      	bne.n	3c24 <vTaskList+0xb8>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( !listLIST_IS_EMPTY( &xSuspendedTaskList ) )
    3c0a:	4919      	ldr	r1, [pc, #100]	; (3c70 <vTaskList+0x104>)
    3c0c:	6808      	ldr	r0, [r1, #0]
    3c0e:	2800      	cmp	r0, #0
    3c10:	d003      	beq.n	3c1a <vTaskList+0xae>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xSuspendedTaskList, tskSUSPENDED_CHAR );
    3c12:	1c28      	adds	r0, r5, #0
    3c14:	2253      	movs	r2, #83	; 0x53
    3c16:	f7ff fbd5 	bl	33c4 <prvListTaskWithinSingleList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    3c1a:	f7ff ff35 	bl	3a88 <xTaskResumeAll>
	}
    3c1e:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c20:	bc01      	pop	{r0}
    3c22:	4700      	bx	r0

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( !listLIST_IS_EMPTY( &xTasksWaitingTermination ) )
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &xTasksWaitingTermination, tskDELETED_CHAR );
    3c24:	1c28      	adds	r0, r5, #0
    3c26:	2244      	movs	r2, #68	; 0x44
    3c28:	f7ff fbcc 	bl	33c4 <prvListTaskWithinSingleList>
    3c2c:	e7ed      	b.n	3c0a <vTaskList+0x9e>
			{
				uxQueue--;

				if( !listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) )
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    3c2e:	1871      	adds	r1, r6, r1
    3c30:	1c28      	adds	r0, r5, #0
    3c32:	2252      	movs	r2, #82	; 0x52
    3c34:	f7ff fbc6 	bl	33c4 <prvListTaskWithinSingleList>
    3c38:	e7b2      	b.n	3ba0 <vTaskList+0x34>
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
			}

			if( !listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) )
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
    3c3a:	6819      	ldr	r1, [r3, #0]
    3c3c:	1c28      	adds	r0, r5, #0
    3c3e:	2242      	movs	r2, #66	; 0x42
    3c40:	f7ff fbc0 	bl	33c4 <prvListTaskWithinSingleList>
    3c44:	e7dd      	b.n	3c02 <vTaskList+0x96>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );

			if( !listLIST_IS_EMPTY( pxDelayedTaskList ) )
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
    3c46:	6819      	ldr	r1, [r3, #0]
    3c48:	1c28      	adds	r0, r5, #0
    3c4a:	2242      	movs	r2, #66	; 0x42
    3c4c:	f7ff fbba 	bl	33c4 <prvListTaskWithinSingleList>
    3c50:	e7d2      	b.n	3bf8 <vTaskList+0x8c>
    3c52:	46c0      	nop			; (mov r8, r8)
    3c54:	40000b74 	.word	0x40000b74
    3c58:	0000e8f0 	.word	0x0000e8f0
    3c5c:	40000b88 	.word	0x40000b88
    3c60:	40000a68 	.word	0x40000a68
    3c64:	40000ad4 	.word	0x40000ad4
    3c68:	40000ab8 	.word	0x40000ab8
    3c6c:	40000abc 	.word	0x40000abc
    3c70:	40000b34 	.word	0x40000b34

00003c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c76:	464f      	mov	r7, r9
    3c78:	4646      	mov	r6, r8
    3c7a:	b4c0      	push	{r6, r7}
    3c7c:	4a1a      	ldr	r2, [pc, #104]	; (3ce8 <prvIdleTask+0x74>)
    3c7e:	4b1b      	ldr	r3, [pc, #108]	; (3cec <prvIdleTask+0x78>)
    3c80:	4c1b      	ldr	r4, [pc, #108]	; (3cf0 <prvIdleTask+0x7c>)
    3c82:	4f1c      	ldr	r7, [pc, #112]	; (3cf4 <prvIdleTask+0x80>)
    3c84:	4d1c      	ldr	r5, [pc, #112]	; (3cf8 <prvIdleTask+0x84>)
    3c86:	4690      	mov	r8, r2
    3c88:	4699      	mov	r9, r3
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    3c8a:	6820      	ldr	r0, [r4, #0]
    3c8c:	2800      	cmp	r0, #0
    3c8e:	d106      	bne.n	3c9e <prvIdleTask+0x2a>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    3c90:	682e      	ldr	r6, [r5, #0]
    3c92:	2e01      	cmp	r6, #1
    3c94:	d9f9      	bls.n	3c8a <prvIdleTask+0x16>
			{
				taskYIELD();
    3c96:	df00      	svc	0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
    3c98:	6820      	ldr	r0, [r4, #0]
    3c9a:	2800      	cmp	r0, #0
    3c9c:	d0f8      	beq.n	3c90 <prvIdleTask+0x1c>

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3c9e:	6839      	ldr	r1, [r7, #0]
    3ca0:	3101      	adds	r1, #1
    3ca2:	6039      	str	r1, [r7, #0]
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3ca4:	4642      	mov	r2, r8
    3ca6:	6816      	ldr	r6, [r2, #0]
			xTaskResumeAll();
    3ca8:	f7ff feee 	bl	3a88 <xTaskResumeAll>

			if( !xListIsEmpty )
    3cac:	2e00      	cmp	r6, #0
    3cae:	d0ef      	beq.n	3c90 <prvIdleTask+0x1c>
			{
				tskTCB *pxTCB;

				portENTER_CRITICAL();
    3cb0:	f009 ffbc 	bl	dc2c <__vPortEnterCritical_from_thumb>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    3cb4:	4643      	mov	r3, r8
    3cb6:	681e      	ldr	r6, [r3, #0]
    3cb8:	2e00      	cmp	r6, #0
    3cba:	d001      	beq.n	3cc0 <prvIdleTask+0x4c>
    3cbc:	68db      	ldr	r3, [r3, #12]
    3cbe:	68de      	ldr	r6, [r3, #12]
					vListRemove( &( pxTCB->xGenericListItem ) );
    3cc0:	1d30      	adds	r0, r6, #4
    3cc2:	f7ff f8d5 	bl	2e70 <vListRemove>
					--uxCurrentNumberOfTasks;
    3cc6:	464a      	mov	r2, r9
    3cc8:	6811      	ldr	r1, [r2, #0]
    3cca:	3901      	subs	r1, #1
    3ccc:	6011      	str	r1, [r2, #0]
					--uxTasksDeleted;
    3cce:	6820      	ldr	r0, [r4, #0]
    3cd0:	3801      	subs	r0, #1
    3cd2:	6020      	str	r0, [r4, #0]
				}
				portEXIT_CRITICAL();
    3cd4:	f009 ffa6 	bl	dc24 <__vPortExitCritical_from_thumb>

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    3cd8:	6b30      	ldr	r0, [r6, #48]	; 0x30
    3cda:	f000 fad1 	bl	4280 <vPortFree>
		vPortFree( pxTCB );
    3cde:	1c30      	adds	r0, r6, #0
    3ce0:	f000 face 	bl	4280 <vPortFree>
    3ce4:	e7d4      	b.n	3c90 <prvIdleTask+0x1c>
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	40000abc 	.word	0x40000abc
    3cec:	40000b48 	.word	0x40000b48
    3cf0:	40000a60 	.word	0x40000a60
    3cf4:	40000b74 	.word	0x40000b74
    3cf8:	40000a68 	.word	0x40000a68

00003cfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3cfc:	b570      	push	{r4, r5, r6, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
    3cfe:	2800      	cmp	r0, #0
    3d00:	d103      	bne.n	3d0a <vTaskDelay+0xe>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
		{
			portYIELD_WITHIN_API();
    3d02:	df00      	svc	0
		}
	}
    3d04:	bc70      	pop	{r4, r5, r6}
    3d06:	bc01      	pop	{r0}
    3d08:	4700      	bx	r0

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3d0a:	4c11      	ldr	r4, [pc, #68]	; (3d50 <vTaskDelay+0x54>)
    3d0c:	6822      	ldr	r2, [r4, #0]
    3d0e:	3201      	adds	r2, #1
    3d10:	6022      	str	r2, [r4, #0]
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3d12:	4e10      	ldr	r6, [pc, #64]	; (3d54 <vTaskDelay+0x58>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d14:	4c10      	ldr	r4, [pc, #64]	; (3d58 <vTaskDelay+0x5c>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3d16:	6831      	ldr	r1, [r6, #0]
    3d18:	1845      	adds	r5, r0, r1

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d1a:	6820      	ldr	r0, [r4, #0]
    3d1c:	3004      	adds	r0, #4
    3d1e:	f7ff f8a7 	bl	2e70 <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3d22:	6820      	ldr	r0, [r4, #0]

				if( xTimeToWake < xTickCount )
    3d24:	6833      	ldr	r3, [r6, #0]
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3d26:	6045      	str	r5, [r0, #4]

				if( xTimeToWake < xTickCount )
    3d28:	429d      	cmp	r5, r3
    3d2a:	d30a      	bcc.n	3d42 <vTaskDelay+0x46>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d2c:	4d0b      	ldr	r5, [pc, #44]	; (3d5c <vTaskDelay+0x60>)
    3d2e:	6828      	ldr	r0, [r5, #0]
    3d30:	6821      	ldr	r1, [r4, #0]
    3d32:	3104      	adds	r1, #4
    3d34:	f7ff f87e 	bl	2e34 <vListInsert>
				}
			}
			xAlreadyYielded = xTaskResumeAll();
    3d38:	f7ff fea6 	bl	3a88 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    3d3c:	2800      	cmp	r0, #0
    3d3e:	d1e1      	bne.n	3d04 <vTaskDelay+0x8>
    3d40:	e7df      	b.n	3d02 <vTaskDelay+0x6>

				if( xTimeToWake < xTickCount )
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d42:	4b07      	ldr	r3, [pc, #28]	; (3d60 <vTaskDelay+0x64>)
    3d44:	6818      	ldr	r0, [r3, #0]
    3d46:	6821      	ldr	r1, [r4, #0]
    3d48:	3104      	adds	r1, #4
    3d4a:	f7ff f873 	bl	2e34 <vListInsert>
    3d4e:	e7f3      	b.n	3d38 <vTaskDelay+0x3c>
    3d50:	40000b74 	.word	0x40000b74
    3d54:	40000a64 	.word	0x40000a64
    3d58:	40000afc 	.word	0x40000afc
    3d5c:	40000ad4 	.word	0x40000ad4
    3d60:	40000ab8 	.word	0x40000ab8

00003d64 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3d64:	b570      	push	{r4, r5, r6, lr}

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3d66:	4b1a      	ldr	r3, [pc, #104]	; (3dd0 <vTaskDelayUntil+0x6c>)
    3d68:	681c      	ldr	r4, [r3, #0]
    3d6a:	3401      	adds	r4, #1
    3d6c:	601c      	str	r4, [r3, #0]
		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;

			if( xTickCount < *pxPreviousWakeTime )
    3d6e:	4d19      	ldr	r5, [pc, #100]	; (3dd4 <vTaskDelayUntil+0x70>)
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3d70:	6803      	ldr	r3, [r0, #0]

			if( xTickCount < *pxPreviousWakeTime )
    3d72:	682a      	ldr	r2, [r5, #0]
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		vTaskSuspendAll();
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3d74:	18cc      	adds	r4, r1, r3

			if( xTickCount < *pxPreviousWakeTime )
    3d76:	4293      	cmp	r3, r2
    3d78:	d91d      	bls.n	3db6 <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3d7a:	42a3      	cmp	r3, r4
    3d7c:	d925      	bls.n	3dca <vTaskDelayUntil+0x66>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3d7e:	682b      	ldr	r3, [r5, #0]
    3d80:	429c      	cmp	r4, r3
    3d82:	d922      	bls.n	3dca <vTaskDelayUntil+0x66>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d84:	4e14      	ldr	r6, [pc, #80]	; (3dd8 <vTaskDelayUntil+0x74>)
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3d86:	6004      	str	r4, [r0, #0]
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d88:	6830      	ldr	r0, [r6, #0]
    3d8a:	3004      	adds	r0, #4
    3d8c:	f7ff f870 	bl	2e70 <vListRemove>

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3d90:	6832      	ldr	r2, [r6, #0]

				if( xTimeToWake < xTickCount )
    3d92:	682b      	ldr	r3, [r5, #0]
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );

				/* The list item will be inserted in wake time order. */
				listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3d94:	6054      	str	r4, [r2, #4]

				if( xTimeToWake < xTickCount )
    3d96:	429c      	cmp	r4, r3
    3d98:	d310      	bcc.n	3dbc <vTaskDelayUntil+0x58>
				}
				else
				{
					/* The wake time has not overflowed, so we can use the
					current block list. */
					vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3d9a:	4910      	ldr	r1, [pc, #64]	; (3ddc <vTaskDelayUntil+0x78>)
    3d9c:	6808      	ldr	r0, [r1, #0]
    3d9e:	6831      	ldr	r1, [r6, #0]
    3da0:	3104      	adds	r1, #4
    3da2:	f7ff f847 	bl	2e34 <vListInsert>
				}
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3da6:	f7ff fe6f 	bl	3a88 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
    3daa:	2800      	cmp	r0, #0
    3dac:	d100      	bne.n	3db0 <vTaskDelayUntil+0x4c>
		{
			portYIELD_WITHIN_API();
    3dae:	df00      	svc	0
		}
	}
    3db0:	bc70      	pop	{r4, r5, r6}
    3db2:	bc01      	pop	{r0}
    3db4:	4700      	bx	r0
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3db6:	42a3      	cmp	r3, r4
    3db8:	d8e4      	bhi.n	3d84 <vTaskDelayUntil+0x20>
    3dba:	e7e0      	b.n	3d7e <vTaskDelayUntil+0x1a>

				if( xTimeToWake < xTickCount )
				{
					/* Wake time has overflowed.  Place this item in the
					overflow list. */
					vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3dbc:	4808      	ldr	r0, [pc, #32]	; (3de0 <vTaskDelayUntil+0x7c>)
    3dbe:	6800      	ldr	r0, [r0, #0]
    3dc0:	6831      	ldr	r1, [r6, #0]
    3dc2:	3104      	adds	r1, #4
    3dc4:	f7ff f836 	bl	2e34 <vListInsert>
    3dc8:	e7ed      	b.n	3da6 <vTaskDelayUntil+0x42>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3dca:	6004      	str	r4, [r0, #0]
    3dcc:	e7eb      	b.n	3da6 <vTaskDelayUntil+0x42>
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	40000b74 	.word	0x40000b74
    3dd4:	40000a64 	.word	0x40000a64
    3dd8:	40000afc 	.word	0x40000afc
    3ddc:	40000ad4 	.word	0x40000ad4
    3de0:	40000ab8 	.word	0x40000ab8

00003de4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3de4:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3de6:	4827      	ldr	r0, [pc, #156]	; (3e84 <vTaskSwitchContext+0xa0>)
    3de8:	6803      	ldr	r3, [r0, #0]
    3dea:	2b00      	cmp	r3, #0
    3dec:	d132      	bne.n	3e54 <vTaskSwitchContext+0x70>

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3dee:	4b26      	ldr	r3, [pc, #152]	; (3e88 <vTaskSwitchContext+0xa4>)
    3df0:	4826      	ldr	r0, [pc, #152]	; (3e8c <vTaskSwitchContext+0xa8>)
    3df2:	681a      	ldr	r2, [r3, #0]
    3df4:	e003      	b.n	3dfe <vTaskSwitchContext+0x1a>
	{
		--uxTopReadyPriority;
    3df6:	681c      	ldr	r4, [r3, #0]
    3df8:	3c01      	subs	r4, #1
    3dfa:	601c      	str	r4, [r3, #0]

	taskFIRST_CHECK_FOR_STACK_OVERFLOW();
	taskSECOND_CHECK_FOR_STACK_OVERFLOW();

	/* Find the highest priority queue that contains ready tasks. */
	while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3dfc:	681a      	ldr	r2, [r3, #0]
    3dfe:	0094      	lsls	r4, r2, #2
    3e00:	18a1      	adds	r1, r4, r2
    3e02:	008a      	lsls	r2, r1, #2
    3e04:	5885      	ldr	r5, [r0, r2]
    3e06:	2d00      	cmp	r5, #0
    3e08:	d0f5      	beq.n	3df6 <vTaskSwitchContext+0x12>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3e0a:	681c      	ldr	r4, [r3, #0]
    3e0c:	00a1      	lsls	r1, r4, #2
    3e0e:	190a      	adds	r2, r1, r4
    3e10:	0095      	lsls	r5, r2, #2
    3e12:	1942      	adds	r2, r0, r5
    3e14:	6853      	ldr	r3, [r2, #4]
    3e16:	3508      	adds	r5, #8
    3e18:	685b      	ldr	r3, [r3, #4]
    3e1a:	1940      	adds	r0, r0, r5
    3e1c:	6053      	str	r3, [r2, #4]
    3e1e:	4283      	cmp	r3, r0
    3e20:	d02c      	beq.n	3e7c <vTaskSwitchContext+0x98>

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    3e22:	4a1b      	ldr	r2, [pc, #108]	; (3e90 <vTaskSwitchContext+0xac>)
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3e24:	68dd      	ldr	r5, [r3, #12]

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    3e26:	6810      	ldr	r0, [r2, #0]
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3e28:	4b1a      	ldr	r3, [pc, #104]	; (3e94 <vTaskSwitchContext+0xb0>)
    3e2a:	601d      	str	r5, [r3, #0]

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    3e2c:	2800      	cmp	r0, #0
    3e2e:	d00e      	beq.n	3e4e <vTaskSwitchContext+0x6a>
    3e30:	681d      	ldr	r5, [r3, #0]
    3e32:	4819      	ldr	r0, [pc, #100]	; (3e98 <vTaskSwitchContext+0xb4>)
    3e34:	6c2c      	ldr	r4, [r5, #64]	; 0x40
    3e36:	6801      	ldr	r1, [r0, #0]
    3e38:	428c      	cmp	r4, r1
    3e3a:	d008      	beq.n	3e4e <vTaskSwitchContext+0x6a>
    3e3c:	4917      	ldr	r1, [pc, #92]	; (3e9c <vTaskSwitchContext+0xb8>)
    3e3e:	4d18      	ldr	r5, [pc, #96]	; (3ea0 <vTaskSwitchContext+0xbc>)
    3e40:	680c      	ldr	r4, [r1, #0]
    3e42:	682d      	ldr	r5, [r5, #0]
    3e44:	3408      	adds	r4, #8
    3e46:	42a5      	cmp	r5, r4
    3e48:	d808      	bhi.n	3e5c <vTaskSwitchContext+0x78>
    3e4a:	2100      	movs	r1, #0
    3e4c:	6011      	str	r1, [r2, #0]
}
    3e4e:	bc30      	pop	{r4, r5}
    3e50:	bc01      	pop	{r0}
    3e52:	4700      	bx	r0
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3e54:	4913      	ldr	r1, [pc, #76]	; (3ea4 <vTaskSwitchContext+0xc0>)
    3e56:	2201      	movs	r2, #1
    3e58:	600a      	str	r2, [r1, #0]
		return;
    3e5a:	e7f8      	b.n	3e4e <vTaskSwitchContext+0x6a>
	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );

	traceTASK_SWITCHED_IN();
	vWriteTraceToBuffer();
    3e5c:	681c      	ldr	r4, [r3, #0]
    3e5e:	4a12      	ldr	r2, [pc, #72]	; (3ea8 <vTaskSwitchContext+0xc4>)
    3e60:	6c24      	ldr	r4, [r4, #64]	; 0x40
    3e62:	680b      	ldr	r3, [r1, #0]
    3e64:	6004      	str	r4, [r0, #0]
    3e66:	6815      	ldr	r5, [r2, #0]
    3e68:	6808      	ldr	r0, [r1, #0]
    3e6a:	3004      	adds	r0, #4
    3e6c:	601d      	str	r5, [r3, #0]
    3e6e:	6008      	str	r0, [r1, #0]
    3e70:	680a      	ldr	r2, [r1, #0]
    3e72:	680b      	ldr	r3, [r1, #0]
    3e74:	3304      	adds	r3, #4
    3e76:	6014      	str	r4, [r2, #0]
    3e78:	600b      	str	r3, [r1, #0]
    3e7a:	e7e8      	b.n	3e4e <vTaskSwitchContext+0x6a>
		--uxTopReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3e7c:	685b      	ldr	r3, [r3, #4]
    3e7e:	6053      	str	r3, [r2, #4]
    3e80:	e7cf      	b.n	3e22 <vTaskSwitchContext+0x3e>
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	40000b74 	.word	0x40000b74
    3e88:	40000a5c 	.word	0x40000a5c
    3e8c:	40000a68 	.word	0x40000a68
    3e90:	40000ad0 	.word	0x40000ad0
    3e94:	40000afc 	.word	0x40000afc
    3e98:	400008c4 	.word	0x400008c4
    3e9c:	40000af8 	.word	0x40000af8
    3ea0:	40000b80 	.word	0x40000b80
    3ea4:	40000af0 	.word	0x40000af0
    3ea8:	40000a64 	.word	0x40000a64

00003eac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    3eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eae:	1c04      	adds	r4, r0, #0
	tskTCB *pxTCB;

		portENTER_CRITICAL();
    3eb0:	f009 febc 	bl	dc2c <__vPortEnterCritical_from_thumb>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    3eb4:	4e16      	ldr	r6, [pc, #88]	; (3f10 <vTaskSuspend+0x64>)
    3eb6:	6833      	ldr	r3, [r6, #0]
    3eb8:	429c      	cmp	r4, r3
    3eba:	d024      	beq.n	3f06 <vTaskSuspend+0x5a>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3ebc:	1e25      	subs	r5, r4, #0
    3ebe:	d022      	beq.n	3f06 <vTaskSuspend+0x5a>

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3ec0:	1d2f      	adds	r7, r5, #4
    3ec2:	1c38      	adds	r0, r7, #0
    3ec4:	f7fe ffd4 	bl	2e70 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer )
    3ec8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    3eca:	2800      	cmp	r0, #0
    3ecc:	d003      	beq.n	3ed6 <vTaskSuspend+0x2a>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3ece:	1c28      	adds	r0, r5, #0
    3ed0:	3018      	adds	r0, #24
    3ed2:	f7fe ffcd 	bl	2e70 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3ed6:	480f      	ldr	r0, [pc, #60]	; (3f14 <vTaskSuspend+0x68>)
    3ed8:	1c39      	adds	r1, r7, #0
    3eda:	f7fe ff9d 	bl	2e18 <vListInsertEnd>
		}
		portEXIT_CRITICAL();
    3ede:	f009 fea1 	bl	dc24 <__vPortExitCritical_from_thumb>

		if( ( void * ) pxTaskToSuspend == NULL )
    3ee2:	2c00      	cmp	r4, #0
    3ee4:	d002      	beq.n	3eec <vTaskSuspend+0x40>
				{
					vTaskSwitchContext();
				}
			}
		}
	}
    3ee6:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3ee8:	bc01      	pop	{r0}
    3eea:	4700      	bx	r0
		}
		portEXIT_CRITICAL();

		if( ( void * ) pxTaskToSuspend == NULL )
		{
			if( xSchedulerRunning != pdFALSE )
    3eec:	4a0a      	ldr	r2, [pc, #40]	; (3f18 <vTaskSuspend+0x6c>)
    3eee:	6811      	ldr	r1, [r2, #0]
    3ef0:	2900      	cmp	r1, #0
    3ef2:	d106      	bne.n	3f02 <vTaskSuspend+0x56>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( uxCurrentNumberOfTasks == 1 )
    3ef4:	4f09      	ldr	r7, [pc, #36]	; (3f1c <vTaskSuspend+0x70>)
    3ef6:	683d      	ldr	r5, [r7, #0]
    3ef8:	2d01      	cmp	r5, #1
    3efa:	d007      	beq.n	3f0c <vTaskSuspend+0x60>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
    3efc:	f7ff ff72 	bl	3de4 <vTaskSwitchContext>
    3f00:	e7f1      	b.n	3ee6 <vTaskSuspend+0x3a>
		if( ( void * ) pxTaskToSuspend == NULL )
		{
			if( xSchedulerRunning != pdFALSE )
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3f02:	df00      	svc	0
    3f04:	e7ef      	b.n	3ee6 <vTaskSuspend+0x3a>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3f06:	6835      	ldr	r5, [r6, #0]
    3f08:	2400      	movs	r4, #0
    3f0a:	e7d9      	b.n	3ec0 <vTaskSuspend+0x14>
				{
					/* No other tasks are defined, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3f0c:	6034      	str	r4, [r6, #0]
    3f0e:	e7ea      	b.n	3ee6 <vTaskSuspend+0x3a>
    3f10:	40000afc 	.word	0x40000afc
    3f14:	40000b34 	.word	0x40000b34
    3f18:	40000aec 	.word	0x40000aec
    3f1c:	40000b48 	.word	0x40000b48

00003f20 <vTaskPlaceOnEventList>:
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3f20:	b538      	push	{r3, r4, r5, lr}
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3f22:	4c15      	ldr	r4, [pc, #84]	; (3f78 <vTaskPlaceOnEventList+0x58>)
	vWriteTraceToBuffer();
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    3f24:	1c0d      	adds	r5, r1, #0
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    3f26:	6821      	ldr	r1, [r4, #0]
    3f28:	3118      	adds	r1, #24
    3f2a:	f7fe ff83 	bl	2e34 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f2e:	6820      	ldr	r0, [r4, #0]
    3f30:	3004      	adds	r0, #4
    3f32:	f7fe ff9d 	bl	2e70 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    3f36:	1c6b      	adds	r3, r5, #1
    3f38:	d017      	beq.n	3f6a <vTaskPlaceOnEventList+0x4a>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3f3a:	4810      	ldr	r0, [pc, #64]	; (3f7c <vTaskPlaceOnEventList+0x5c>)
    3f3c:	6801      	ldr	r1, [r0, #0]

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3f3e:	6822      	ldr	r2, [r4, #0]

			if( xTimeToWake < xTickCount )
    3f40:	6803      	ldr	r3, [r0, #0]
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    3f42:	186d      	adds	r5, r5, r1

			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    3f44:	6055      	str	r5, [r2, #4]

			if( xTimeToWake < xTickCount )
    3f46:	429d      	cmp	r5, r3
    3f48:	d308      	bcc.n	3f5c <vTaskPlaceOnEventList+0x3c>
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
			}
			else
			{
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f4a:	4d0d      	ldr	r5, [pc, #52]	; (3f80 <vTaskPlaceOnEventList+0x60>)
    3f4c:	6828      	ldr	r0, [r5, #0]
    3f4e:	6821      	ldr	r1, [r4, #0]
    3f50:	3104      	adds	r1, #4
    3f52:	f7fe ff6f 	bl	2e34 <vListInsert>
				/* The wake time has not overflowed, so we can use the current block list. */
				vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
			}
	}
	#endif
}
    3f56:	bc38      	pop	{r3, r4, r5}
    3f58:	bc01      	pop	{r0}
    3f5a:	4700      	bx	r0
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

			if( xTimeToWake < xTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow list. */
				vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f5c:	4b09      	ldr	r3, [pc, #36]	; (3f84 <vTaskPlaceOnEventList+0x64>)
    3f5e:	6818      	ldr	r0, [r3, #0]
    3f60:	6821      	ldr	r1, [r4, #0]
    3f62:	3104      	adds	r1, #4
    3f64:	f7fe ff66 	bl	2e34 <vListInsert>
    3f68:	e7f5      	b.n	3f56 <vTaskPlaceOnEventList+0x36>
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3f6a:	6821      	ldr	r1, [r4, #0]
    3f6c:	4806      	ldr	r0, [pc, #24]	; (3f88 <vTaskPlaceOnEventList+0x68>)
    3f6e:	3104      	adds	r1, #4
    3f70:	f7fe ff52 	bl	2e18 <vListInsertEnd>
    3f74:	e7ef      	b.n	3f56 <vTaskPlaceOnEventList+0x36>
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	40000afc 	.word	0x40000afc
    3f7c:	40000a64 	.word	0x40000a64
    3f80:	40000ad4 	.word	0x40000ad4
    3f84:	40000ab8 	.word	0x40000ab8
    3f88:	40000b34 	.word	0x40000b34

00003f8c <xTaskRemoveFromEventList>:
	#endif
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    3f8c:	b538      	push	{r3, r4, r5, lr}
	it to the ready list.

	If an event is for a queue that is locked then this function will never
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3f8e:	6804      	ldr	r4, [r0, #0]
    3f90:	2c00      	cmp	r4, #0
    3f92:	d001      	beq.n	3f98 <xTaskRemoveFromEventList+0xc>
    3f94:	68c3      	ldr	r3, [r0, #12]
    3f96:	68dc      	ldr	r4, [r3, #12]
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3f98:	1c25      	adds	r5, r4, #0
    3f9a:	3518      	adds	r5, #24
    3f9c:	1c28      	adds	r0, r5, #0
    3f9e:	f7fe ff67 	bl	2e70 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3fa2:	4913      	ldr	r1, [pc, #76]	; (3ff0 <xTaskRemoveFromEventList+0x64>)
    3fa4:	6808      	ldr	r0, [r1, #0]
    3fa6:	2800      	cmp	r0, #0
    3fa8:	d11a      	bne.n	3fe0 <xTaskRemoveFromEventList+0x54>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    3faa:	1d25      	adds	r5, r4, #4
    3fac:	1c28      	adds	r0, r5, #0
    3fae:	f7fe ff5f 	bl	2e70 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3fb2:	4a10      	ldr	r2, [pc, #64]	; (3ff4 <xTaskRemoveFromEventList+0x68>)
    3fb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3fb6:	6811      	ldr	r1, [r2, #0]
    3fb8:	428b      	cmp	r3, r1
    3fba:	d816      	bhi.n	3fea <xTaskRemoveFromEventList+0x5e>
    3fbc:	0099      	lsls	r1, r3, #2
    3fbe:	18c8      	adds	r0, r1, r3
    3fc0:	4a0d      	ldr	r2, [pc, #52]	; (3ff8 <xTaskRemoveFromEventList+0x6c>)
    3fc2:	0083      	lsls	r3, r0, #2
    3fc4:	18d0      	adds	r0, r2, r3
    3fc6:	1c29      	adds	r1, r5, #0
    3fc8:	f7fe ff26 	bl	2e18 <vListInsertEnd>
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3fcc:	4b0b      	ldr	r3, [pc, #44]	; (3ffc <xTaskRemoveFromEventList+0x70>)
    3fce:	681a      	ldr	r2, [r3, #0]
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    3fd0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    3fd2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    3fd4:	2000      	movs	r0, #0
    3fd6:	42ac      	cmp	r4, r5
    3fd8:	4140      	adcs	r0, r0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    3fda:	bc38      	pop	{r3, r4, r5}
    3fdc:	bc02      	pop	{r1}
    3fde:	4708      	bx	r1
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3fe0:	4807      	ldr	r0, [pc, #28]	; (4000 <xTaskRemoveFromEventList+0x74>)
    3fe2:	1c29      	adds	r1, r5, #0
    3fe4:	f7fe ff18 	bl	2e18 <vListInsertEnd>
    3fe8:	e7f0      	b.n	3fcc <xTaskRemoveFromEventList+0x40>
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    3fea:	6013      	str	r3, [r2, #0]
    3fec:	e7e6      	b.n	3fbc <xTaskRemoveFromEventList+0x30>
    3fee:	46c0      	nop			; (mov r8, r8)
    3ff0:	40000b74 	.word	0x40000b74
    3ff4:	40000a5c 	.word	0x40000a5c
    3ff8:	40000a68 	.word	0x40000a68
    3ffc:	40000afc 	.word	0x40000afc
    4000:	40000ad8 	.word	0x40000ad8

00004004 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4004:	4b03      	ldr	r3, [pc, #12]	; (4014 <vTaskSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
    4006:	4904      	ldr	r1, [pc, #16]	; (4018 <vTaskSetTimeOutState+0x14>)
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4008:	681a      	ldr	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    400a:	680b      	ldr	r3, [r1, #0]
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    400c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    400e:	6043      	str	r3, [r0, #4]
}
    4010:	4770      	bx	lr
    4012:	46c0      	nop			; (mov r8, r8)
    4014:	40000b84 	.word	0x40000b84
    4018:	40000a64 	.word	0x40000a64

0000401c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    401e:	1c0e      	adds	r6, r1, #0
    4020:	1c05      	adds	r5, r0, #0
portBASE_TYPE xReturn;

	portENTER_CRITICAL();
    4022:	f009 fe03 	bl	dc2c <__vPortEnterCritical_from_thumb>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4026:	6833      	ldr	r3, [r6, #0]
			{
				xReturn = pdFALSE;
    4028:	2400      	movs	r4, #0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    402a:	1c5a      	adds	r2, r3, #1
    402c:	d018      	beq.n	4060 <xTaskCheckForTimeOut+0x44>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    402e:	4813      	ldr	r0, [pc, #76]	; (407c <xTaskCheckForTimeOut+0x60>)
    4030:	6829      	ldr	r1, [r5, #0]
    4032:	6802      	ldr	r2, [r0, #0]
    4034:	4291      	cmp	r1, r2
    4036:	d019      	beq.n	406c <xTaskCheckForTimeOut+0x50>
    4038:	4a11      	ldr	r2, [pc, #68]	; (4080 <xTaskCheckForTimeOut+0x64>)
    403a:	6869      	ldr	r1, [r5, #4]
    403c:	6817      	ldr	r7, [r2, #0]
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    403e:	2401      	movs	r4, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4040:	42b9      	cmp	r1, r7
    4042:	d90d      	bls.n	4060 <xTaskCheckForTimeOut+0x44>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4044:	6814      	ldr	r4, [r2, #0]
    4046:	1a67      	subs	r7, r4, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    4048:	2401      	movs	r4, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    404a:	42bb      	cmp	r3, r7
    404c:	d908      	bls.n	4060 <xTaskCheckForTimeOut+0x44>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    404e:	6814      	ldr	r4, [r2, #0]
    4050:	1b1f      	subs	r7, r3, r4
    4052:	1879      	adds	r1, r7, r1
    4054:	6031      	str	r1, [r6, #0]
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4056:	6800      	ldr	r0, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4058:	6813      	ldr	r3, [r2, #0]
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    405a:	6028      	str	r0, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    405c:	606b      	str	r3, [r5, #4]
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
    405e:	2400      	movs	r4, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	portEXIT_CRITICAL();
    4060:	f009 fde0 	bl	dc24 <__vPortExitCritical_from_thumb>

	return xReturn;
}
    4064:	1c20      	adds	r0, r4, #0
    4066:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4068:	bc02      	pop	{r1}
    406a:	4708      	bx	r1
    406c:	4a04      	ldr	r2, [pc, #16]	; (4080 <xTaskCheckForTimeOut+0x64>)
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    406e:	6869      	ldr	r1, [r5, #4]
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4070:	6814      	ldr	r4, [r2, #0]
    4072:	1a67      	subs	r7, r4, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    4074:	2401      	movs	r4, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4076:	42bb      	cmp	r3, r7
    4078:	d8e9      	bhi.n	404e <xTaskCheckForTimeOut+0x32>
    407a:	e7f1      	b.n	4060 <xTaskCheckForTimeOut+0x44>
    407c:	40000b84 	.word	0x40000b84
    4080:	40000a64 	.word	0x40000a64

00004084 <vTaskMissedYield>:
}
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    4084:	4b01      	ldr	r3, [pc, #4]	; (408c <vTaskMissedYield+0x8>)
    4086:	2201      	movs	r2, #1
    4088:	601a      	str	r2, [r3, #0]
}
    408a:	4770      	bx	lr
    408c:	40000af0 	.word	0x40000af0

00004090 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4090:	4b01      	ldr	r3, [pc, #4]	; (4098 <xTaskGetCurrentTaskHandle+0x8>)
    4092:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    4094:	4770      	bx	lr
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	40000afc 	.word	0x40000afc

0000409c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    409e:	4d17      	ldr	r5, [pc, #92]	; (40fc <vTaskPriorityInherit+0x60>)
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    40a0:	1c04      	adds	r4, r0, #0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    40a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    40a4:	6828      	ldr	r0, [r5, #0]
    40a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    40a8:	4293      	cmp	r3, r2
    40aa:	d20f      	bcs.n	40cc <vTaskPriorityInherit+0x30>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    40ac:	6829      	ldr	r1, [r5, #0]
    40ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    40b0:	2104      	movs	r1, #4
    40b2:	1a8e      	subs	r6, r1, r2

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
    40b4:	009f      	lsls	r7, r3, #2
    40b6:	18f8      	adds	r0, r7, r3
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    40b8:	61a6      	str	r6, [r4, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
    40ba:	4e11      	ldr	r6, [pc, #68]	; (4100 <vTaskPriorityInherit+0x64>)
    40bc:	0082      	lsls	r2, r0, #2
    40be:	6967      	ldr	r7, [r4, #20]
    40c0:	18b3      	adds	r3, r6, r2
    40c2:	429f      	cmp	r7, r3
    40c4:	d005      	beq.n	40d2 <vTaskPriorityInherit+0x36>
				prvAddTaskToReadyQueue( pxTCB );
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    40c6:	682e      	ldr	r6, [r5, #0]
    40c8:	6af7      	ldr	r7, [r6, #44]	; 0x2c
    40ca:	62e7      	str	r7, [r4, #44]	; 0x2c
			}
		}
	}
    40cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    40ce:	bc01      	pop	{r0}
    40d0:	4700      	bx	r0

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    40d2:	1867      	adds	r7, r4, r1
    40d4:	1c38      	adds	r0, r7, #0
    40d6:	f7fe fecb 	bl	2e70 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    40da:	682d      	ldr	r5, [r5, #0]
				prvAddTaskToReadyQueue( pxTCB );
    40dc:	4a09      	ldr	r2, [pc, #36]	; (4104 <vTaskPriorityInherit+0x68>)
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    40de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    40e0:	6811      	ldr	r1, [r2, #0]
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
			{
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    40e2:	62e3      	str	r3, [r4, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    40e4:	428b      	cmp	r3, r1
    40e6:	d900      	bls.n	40ea <vTaskPriorityInherit+0x4e>
    40e8:	6013      	str	r3, [r2, #0]
    40ea:	0098      	lsls	r0, r3, #2
    40ec:	18c3      	adds	r3, r0, r3
    40ee:	009c      	lsls	r4, r3, #2
    40f0:	1930      	adds	r0, r6, r4
    40f2:	1c39      	adds	r1, r7, #0
    40f4:	f7fe fe90 	bl	2e18 <vListInsertEnd>
    40f8:	e7e8      	b.n	40cc <vTaskPriorityInherit+0x30>
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	40000afc 	.word	0x40000afc
    4100:	40000a68 	.word	0x40000a68
    4104:	40000a5c 	.word	0x40000a5c

00004108 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    4108:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    410a:	1e04      	subs	r4, r0, #0
    410c:	d018      	beq.n	4140 <vTaskPriorityDisinherit+0x38>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    410e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4110:	6c63      	ldr	r3, [r4, #68]	; 0x44
    4112:	429a      	cmp	r2, r3
    4114:	d014      	beq.n	4140 <vTaskPriorityDisinherit+0x38>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    4116:	1d25      	adds	r5, r4, #4
    4118:	1c28      	adds	r0, r5, #0
    411a:	f7fe fea9 	bl	2e70 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    411e:	6c63      	ldr	r3, [r4, #68]	; 0x44
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4120:	2204      	movs	r2, #4
    4122:	1ad0      	subs	r0, r2, r3
				prvAddTaskToReadyQueue( pxTCB );
    4124:	4a09      	ldr	r2, [pc, #36]	; (414c <vTaskPriorityDisinherit+0x44>)
    4126:	6811      	ldr	r1, [r2, #0]
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4128:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    412a:	61a0      	str	r0, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
    412c:	428b      	cmp	r3, r1
    412e:	d80a      	bhi.n	4146 <vTaskPriorityDisinherit+0x3e>
    4130:	0098      	lsls	r0, r3, #2
    4132:	18c1      	adds	r1, r0, r3
    4134:	4c06      	ldr	r4, [pc, #24]	; (4150 <vTaskPriorityDisinherit+0x48>)
    4136:	008b      	lsls	r3, r1, #2
    4138:	18e0      	adds	r0, r4, r3
    413a:	1c29      	adds	r1, r5, #0
    413c:	f7fe fe6c 	bl	2e18 <vListInsertEnd>
			}
		}
	}
    4140:	bc38      	pop	{r3, r4, r5}
    4142:	bc01      	pop	{r0}
    4144:	4700      	bx	r0

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
				prvAddTaskToReadyQueue( pxTCB );
    4146:	6013      	str	r3, [r2, #0]
    4148:	e7f2      	b.n	4130 <vTaskPriorityDisinherit+0x28>
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	40000a5c 	.word	0x40000a5c
    4150:	40000a68 	.word	0x40000a68

00004154 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4154:	b510      	push	{r4, lr}
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
    4156:	1d0b      	adds	r3, r1, #4
    4158:	6003      	str	r3, [r0, #0]
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
    415a:	2400      	movs	r4, #0

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
	pxTopOfStack--;
    415c:	1f03      	subs	r3, r0, #4

	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
    415e:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
    4160:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
    4162:	4c19      	ldr	r4, [pc, #100]	; (41c8 <pxPortInitialiseStack+0x74>)
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
    4164:	6018      	str	r0, [r3, #0]
	pxTopOfStack--;
    4166:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
    4168:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
    416a:	4c18      	ldr	r4, [pc, #96]	; (41cc <pxPortInitialiseStack+0x78>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00000000;	/* R14 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
	pxTopOfStack--;	
    416c:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
    416e:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
    4170:	4c17      	ldr	r4, [pc, #92]	; (41d0 <pxPortInitialiseStack+0x7c>)
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
	pxTopOfStack--;	
    4172:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
    4174:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
    4176:	4c17      	ldr	r4, [pc, #92]	; (41d4 <pxPortInitialiseStack+0x80>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
	pxTopOfStack--;	
    4178:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
    417a:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
    417c:	4c16      	ldr	r4, [pc, #88]	; (41d8 <pxPortInitialiseStack+0x84>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
	pxTopOfStack--;	
    417e:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
    4180:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
    4182:	4c16      	ldr	r4, [pc, #88]	; (41dc <pxPortInitialiseStack+0x88>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
	pxTopOfStack--;	
    4184:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
    4186:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
    4188:	4c15      	ldr	r4, [pc, #84]	; (41e0 <pxPortInitialiseStack+0x8c>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
	pxTopOfStack--;	
    418a:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
    418c:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
    418e:	4c15      	ldr	r4, [pc, #84]	; (41e4 <pxPortInitialiseStack+0x90>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
	pxTopOfStack--;	
    4190:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
    4192:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
    4194:	4c14      	ldr	r4, [pc, #80]	; (41e8 <pxPortInitialiseStack+0x94>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
	pxTopOfStack--;	
    4196:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
    4198:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
    419a:	4c14      	ldr	r4, [pc, #80]	; (41ec <pxPortInitialiseStack+0x98>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
	pxTopOfStack--;	
    419c:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
    419e:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
    41a0:	4c13      	ldr	r4, [pc, #76]	; (41f0 <pxPortInitialiseStack+0x9c>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
	pxTopOfStack--;	
    41a2:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
    41a4:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
    41a6:	4c13      	ldr	r4, [pc, #76]	; (41f4 <pxPortInitialiseStack+0xa0>)
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
	pxTopOfStack--;	
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
	pxTopOfStack--;	
    41a8:	3b04      	subs	r3, #4
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
    41aa:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;	
    41ac:	3b04      	subs	r3, #4

	/* When the task starts is will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
    41ae:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    41b0:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
    41b2:	231f      	movs	r3, #31

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
    41b4:	07ca      	lsls	r2, r1, #31
    41b6:	d500      	bpl.n	41ba <pxPortInitialiseStack+0x66>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
    41b8:	3320      	adds	r3, #32

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
    41ba:	6003      	str	r3, [r0, #0]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
    41bc:	2100      	movs	r1, #0
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
	}

	pxTopOfStack--;
    41be:	3804      	subs	r0, #4

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
    41c0:	6001      	str	r1, [r0, #0]

	return pxTopOfStack;
}
    41c2:	bc10      	pop	{r4}
    41c4:	bc02      	pop	{r1}
    41c6:	4708      	bx	r1
    41c8:	12121212 	.word	0x12121212
    41cc:	11111111 	.word	0x11111111
    41d0:	10101010 	.word	0x10101010
    41d4:	09090909 	.word	0x09090909
    41d8:	08080808 	.word	0x08080808
    41dc:	07070707 	.word	0x07070707
    41e0:	06060606 	.word	0x06060606
    41e4:	05050505 	.word	0x05050505
    41e8:	04040404 	.word	0x04040404
    41ec:	03030303 	.word	0x03030303
    41f0:	02020202 	.word	0x02020202
    41f4:	01010101 	.word	0x01010101

000041f8 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    41f8:	b510      	push	{r4, lr}
 */
static void prvSetupTimerInterrupt( void )
{
unsigned portLONG ulCompareMatch;

	PCLKSEL0 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
    41fa:	4b12      	ldr	r3, [pc, #72]	; (4244 <xPortStartScheduler+0x4c>)
    41fc:	6818      	ldr	r0, [r3, #0]
    41fe:	210c      	movs	r1, #12
    4200:	4388      	bics	r0, r1
    4202:	3908      	subs	r1, #8
    4204:	4308      	orrs	r0, r1
    4206:	6018      	str	r0, [r3, #0]
	T0TCR  = 2;         /* Stop and reset the timer */
    4208:	4b0f      	ldr	r3, [pc, #60]	; (4248 <xPortStartScheduler+0x50>)
    420a:	2402      	movs	r4, #2
	T0CTCR = 0;         /* Timer mode               */
    420c:	480f      	ldr	r0, [pc, #60]	; (424c <xPortStartScheduler+0x54>)
static void prvSetupTimerInterrupt( void )
{
unsigned portLONG ulCompareMatch;

	PCLKSEL0 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
	T0TCR  = 2;         /* Stop and reset the timer */
    420e:	601c      	str	r4, [r3, #0]
	#if portPRESCALE_VALUE != 0
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif
	T0MR1 = ulCompareMatch;
    4210:	4a0f      	ldr	r2, [pc, #60]	; (4250 <xPortStartScheduler+0x58>)
{
unsigned portLONG ulCompareMatch;

	PCLKSEL0 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);
	T0TCR  = 2;         /* Stop and reset the timer */
	T0CTCR = 0;         /* Timer mode               */
    4212:	2400      	movs	r4, #0
    4214:	6004      	str	r4, [r0, #0]
	
	/* A 1ms tick does not require the use of the timer prescale.  This is
	defaulted to zero but can be used if necessary. */
	T0PR = portPRESCALE_VALUE;
    4216:	3864      	subs	r0, #100	; 0x64
    4218:	6004      	str	r4, [r0, #0]
	}
	#endif
	T0MR1 = ulCompareMatch;

	/* Generate tick with timer 0 compare match. */
	T0MCR  = (3 << 3);  /* Reset timer on match and generate interrupt */
    421a:	2118      	movs	r1, #24
	#if portPRESCALE_VALUE != 0
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif
	T0MR1 = ulCompareMatch;
    421c:	6102      	str	r2, [r0, #16]

	/* Generate tick with timer 0 compare match. */
	T0MCR  = (3 << 3);  /* Reset timer on match and generate interrupt */
    421e:	3008      	adds	r0, #8

	/* Setup the VIC for the timer. */
	VICIntEnable = 0x00000010;
    4220:	4a0c      	ldr	r2, [pc, #48]	; (4254 <xPortStartScheduler+0x5c>)
	}
	#endif
	T0MR1 = ulCompareMatch;

	/* Generate tick with timer 0 compare match. */
	T0MCR  = (3 << 3);  /* Reset timer on match and generate interrupt */
    4222:	6001      	str	r1, [r0, #0]

	/* Setup the VIC for the timer. */
	VICIntEnable = 0x00000010;
    4224:	3908      	subs	r1, #8
    4226:	6011      	str	r1, [r2, #0]
	/* The ISR installed depends on whether the preemptive or cooperative
	scheduler is being used. */
	#if configUSE_PREEMPTION == 1
	{
		extern void ( vPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vPreemptiveTick;
    4228:	480b      	ldr	r0, [pc, #44]	; (4258 <xPortStartScheduler+0x60>)
    422a:	3201      	adds	r2, #1
		extern void ( vNonPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vNonPreemptiveTick;
	}
	#endif

	VICVectCntl4 = 1;
    422c:	490b      	ldr	r1, [pc, #44]	; (425c <xPortStartScheduler+0x64>)
	/* The ISR installed depends on whether the preemptive or cooperative
	scheduler is being used. */
	#if configUSE_PREEMPTION == 1
	{
		extern void ( vPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vPreemptiveTick;
    422e:	32ff      	adds	r2, #255	; 0xff
    4230:	6010      	str	r0, [r2, #0]
		extern void ( vNonPreemptiveTick )( void );
		VICVectAddr4 = ( portLONG ) vNonPreemptiveTick;
	}
	#endif

	VICVectCntl4 = 1;
    4232:	2201      	movs	r2, #1
    4234:	600a      	str	r2, [r1, #0]

	/* Start the timer - interrupts are disabled when this function is called
	so it is okay to do this here. */
	T0TCR = portENABLE_TIMER;
    4236:	601a      	str	r2, [r3, #0]
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Start the first task. */
	vPortISRStartFirstTask();	
    4238:	f009 fd5a 	bl	dcf0 <__vPortISRStartFirstTask_from_thumb>

	/* Should not get here! */
	return 0;
}
    423c:	1c20      	adds	r0, r4, #0
    423e:	bc10      	pop	{r4}
    4240:	bc02      	pop	{r1}
    4242:	4708      	bx	r1
    4244:	e01fc1a8 	.word	0xe01fc1a8
    4248:	e0004004 	.word	0xe0004004
    424c:	e0004070 	.word	0xe0004070
    4250:	00011940 	.word	0x00011940
    4254:	fffff010 	.word	0xfffff010
    4258:	00000144 	.word	0x00000144
    425c:	fffff210 	.word	0xfffff210

00004260 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
    4260:	4770      	bx	lr
    4262:	46c0      	nop			; (mov r8, r8)

00004264 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4264:	b510      	push	{r4, lr}
    4266:	1c04      	adds	r4, r0, #0
void *pvReturn;

	vTaskSuspendAll();
    4268:	f7ff fb50 	bl	390c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
    426c:	1c20      	adds	r0, r4, #0
    426e:	f000 fd13 	bl	4c98 <malloc>
    4272:	1c04      	adds	r4, r0, #0
	}
	xTaskResumeAll();
    4274:	f7ff fc08 	bl	3a88 <xTaskResumeAll>
		}
	}
	#endif
	
	return pvReturn;
}
    4278:	1c20      	adds	r0, r4, #0
    427a:	bc10      	pop	{r4}
    427c:	bc02      	pop	{r1}
    427e:	4708      	bx	r1

00004280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4280:	b510      	push	{r4, lr}
	if( pv )
    4282:	1e04      	subs	r4, r0, #0
    4284:	d006      	beq.n	4294 <vPortFree+0x14>
	{
		vTaskSuspendAll();
    4286:	f7ff fb41 	bl	390c <vTaskSuspendAll>
		{
			free( pv );
    428a:	1c20      	adds	r0, r4, #0
    428c:	f000 fd10 	bl	4cb0 <free>
		}
		xTaskResumeAll();
    4290:	f7ff fbfa 	bl	3a88 <xTaskResumeAll>
	}
}
    4294:	bc10      	pop	{r4}
    4296:	bc01      	pop	{r0}
    4298:	4700      	bx	r0
    429a:	46c0      	nop			; (mov r8, r8)

0000429c <_startup>:
_mainCRTStartup:

	/* Setup a stack for each mode - note that this only sets up a usable stack
	for system/user, SWI and IRQ modes.   Also each mode is setup with
	interrupts initially disabled. */
    ldr   r0, .LC6
    429c:	e59f00b8 	ldr	r0, [pc, #184]	; 435c <endless_loop+0x18>
    msr   CPSR_c, #MODE_UND|I_BIT|F_BIT /* Undefined Instruction Mode */
    42a0:	e321f0db 	msr	CPSR_c, #219	; 0xdb
    mov   sp, r0
    42a4:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #UND_STACK_SIZE
    42a8:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_ABT|I_BIT|F_BIT /* Abort Mode */
    42ac:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
    mov   sp, r0
    42b0:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #ABT_STACK_SIZE
    42b4:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_FIQ|I_BIT|F_BIT /* FIQ Mode */
    42b8:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
    mov   sp, r0
    42bc:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #FIQ_STACK_SIZE
    42c0:	e2400004 	sub	r0, r0, #4
    msr   CPSR_c, #MODE_IRQ|I_BIT|F_BIT /* IRQ Mode */
    42c4:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
    mov   sp, r0
    42c8:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #IRQ_STACK_SIZE
    42cc:	e2400c01 	sub	r0, r0, #256	; 0x100
    msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT /* Supervisor Mode */
    42d0:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
    mov   sp, r0
    42d4:	e1a0d000 	mov	sp, r0
    sub   r0, r0, #SVC_STACK_SIZE
    42d8:	e2400c01 	sub	r0, r0, #256	; 0x100
    msr   CPSR_c, #MODE_SYS|I_BIT|F_BIT /* System Mode */
    42dc:	e321f0df 	msr	CPSR_c, #223	; 0xdf
    mov   sp, r0
    42e0:	e1a0d000 	mov	sp, r0

	/* We want to start in supervisor mode.  Operation will switch to system
	mode when the first task starts. */
	msr   CPSR_c, #MODE_SVC|I_BIT|F_BIT
    42e4:	e321f0d3 	msr	CPSR_c, #211	; 0xd3

	/* Clear BSS. */

	mov     a2, #0			/* Fill value */
    42e8:	e3a01000 	mov	r1, #0
	mov		fp, a2			/* Null frame pointer */
    42ec:	e1a0b001 	mov	fp, r1
	mov		r7, a2			/* Null frame pointer for Thumb */
    42f0:	e1a07001 	mov	r7, r1

	ldr		r1, .LC1		/* Start of memory block */
    42f4:	e59f104c 	ldr	r1, [pc, #76]	; 4348 <endless_loop+0x4>
	ldr		r3, .LC2		/* End of memory block */
    42f8:	e59f304c 	ldr	r3, [pc, #76]	; 434c <endless_loop+0x8>
	subs	r3, r3, r1      /* Length of block */
    42fc:	e0533001 	subs	r3, r3, r1
	beq		.end_clear_loop
    4300:	0a000003 	beq	4314 <.end_clear_loop>
	mov		r2, #0
    4304:	e3a02000 	mov	r2, #0

00004308 <.clear_loop>:

.clear_loop:
	strb	r2, [r1], #1
    4308:	e4c12001 	strb	r2, [r1], #1
	subs	r3, r3, #1
    430c:	e2533001 	subs	r3, r3, #1
	bgt		.clear_loop
    4310:	cafffffc 	bgt	4308 <.clear_loop>

00004314 <.end_clear_loop>:

.end_clear_loop:

	/* Initialise data. */

	ldr		r1, .LC3		/* Start of memory block */
    4314:	e59f1034 	ldr	r1, [pc, #52]	; 4350 <endless_loop+0xc>
	ldr		r2, .LC4		/* End of memory block */
    4318:	e59f2034 	ldr	r2, [pc, #52]	; 4354 <endless_loop+0x10>
	ldr		r3, .LC5
    431c:	e59f3034 	ldr	r3, [pc, #52]	; 4358 <endless_loop+0x14>
	subs	r3, r3, r1		/* Length of block */
    4320:	e0533001 	subs	r3, r3, r1
	beq		.end_set_loop
    4324:	0a000003 	beq	4338 <.end_set_loop>

00004328 <.set_loop>:

.set_loop:
	ldrb	r4, [r2], #1
    4328:	e4d24001 	ldrb	r4, [r2], #1
	strb	r4, [r1], #1
    432c:	e4c14001 	strb	r4, [r1], #1
	subs	r3, r3, #1
    4330:	e2533001 	subs	r3, r3, #1
	bgt		.set_loop
    4334:	cafffffb 	bgt	4328 <.set_loop>

00004338 <.end_set_loop>:

.end_set_loop:

	mov		r0, #0          /* no arguments  */
    4338:	e3a00000 	mov	r0, #0
	mov		r1, #0          /* no argv either */
    433c:	e3a01000 	mov	r1, #0

	bl		main
    4340:	eb00263e 	bl	dc40 <__main_from_arm>

00004344 <endless_loop>:

endless_loop:
	b               endless_loop
    4344:	eafffffe 	b	4344 <endless_loop>
    4348:	400008c8 	.word	0x400008c8
    434c:	40000b90 	.word	0x40000b90
    4350:	40000000 	.word	0x40000000
    4354:	0000e95c 	.word	0x0000e95c
    4358:	400008c8 	.word	0x400008c8
    435c:	4000ffdc 	.word	0x4000ffdc

00004360 <__aeabi_uidiv>:
    4360:	e2512001 	subs	r2, r1, #1
    4364:	012fff1e 	bxeq	lr
    4368:	3a000036 	bcc	4448 <__aeabi_uidiv+0xe8>
    436c:	e1500001 	cmp	r0, r1
    4370:	9a000022 	bls	4400 <__aeabi_uidiv+0xa0>
    4374:	e1110002 	tst	r1, r2
    4378:	0a000023 	beq	440c <__aeabi_uidiv+0xac>
    437c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    4380:	01a01181 	lsleq	r1, r1, #3
    4384:	03a03008 	moveq	r3, #8
    4388:	13a03001 	movne	r3, #1
    438c:	e3510201 	cmp	r1, #268435456	; 0x10000000
    4390:	31510000 	cmpcc	r1, r0
    4394:	31a01201 	lslcc	r1, r1, #4
    4398:	31a03203 	lslcc	r3, r3, #4
    439c:	3afffffa 	bcc	438c <__aeabi_uidiv+0x2c>
    43a0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    43a4:	31510000 	cmpcc	r1, r0
    43a8:	31a01081 	lslcc	r1, r1, #1
    43ac:	31a03083 	lslcc	r3, r3, #1
    43b0:	3afffffa 	bcc	43a0 <__aeabi_uidiv+0x40>
    43b4:	e3a02000 	mov	r2, #0
    43b8:	e1500001 	cmp	r0, r1
    43bc:	20400001 	subcs	r0, r0, r1
    43c0:	21822003 	orrcs	r2, r2, r3
    43c4:	e15000a1 	cmp	r0, r1, lsr #1
    43c8:	204000a1 	subcs	r0, r0, r1, lsr #1
    43cc:	218220a3 	orrcs	r2, r2, r3, lsr #1
    43d0:	e1500121 	cmp	r0, r1, lsr #2
    43d4:	20400121 	subcs	r0, r0, r1, lsr #2
    43d8:	21822123 	orrcs	r2, r2, r3, lsr #2
    43dc:	e15001a1 	cmp	r0, r1, lsr #3
    43e0:	204001a1 	subcs	r0, r0, r1, lsr #3
    43e4:	218221a3 	orrcs	r2, r2, r3, lsr #3
    43e8:	e3500000 	cmp	r0, #0
    43ec:	11b03223 	lsrsne	r3, r3, #4
    43f0:	11a01221 	lsrne	r1, r1, #4
    43f4:	1affffef 	bne	43b8 <__aeabi_uidiv+0x58>
    43f8:	e1a00002 	mov	r0, r2
    43fc:	e12fff1e 	bx	lr
    4400:	03a00001 	moveq	r0, #1
    4404:	13a00000 	movne	r0, #0
    4408:	e12fff1e 	bx	lr
    440c:	e3510801 	cmp	r1, #65536	; 0x10000
    4410:	21a01821 	lsrcs	r1, r1, #16
    4414:	23a02010 	movcs	r2, #16
    4418:	33a02000 	movcc	r2, #0
    441c:	e3510c01 	cmp	r1, #256	; 0x100
    4420:	21a01421 	lsrcs	r1, r1, #8
    4424:	22822008 	addcs	r2, r2, #8
    4428:	e3510010 	cmp	r1, #16
    442c:	21a01221 	lsrcs	r1, r1, #4
    4430:	22822004 	addcs	r2, r2, #4
    4434:	e3510004 	cmp	r1, #4
    4438:	82822003 	addhi	r2, r2, #3
    443c:	908220a1 	addls	r2, r2, r1, lsr #1
    4440:	e1a00230 	lsr	r0, r0, r2
    4444:	e12fff1e 	bx	lr
    4448:	e12fff1f 	bx	pc
    444c:	e1a00000 	nop			; (mov r0, r0)
    4450:	e3500000 	cmp	r0, #0
    4454:	13e00000 	mvnne	r0, #0
    4458:	ea0025e3 	b	dbec <____aeabi_idiv0_from_arm>

0000445c <__aeabi_uidivmod>:
    445c:	e3510000 	cmp	r1, #0
    4460:	0afffff8 	beq	4448 <__aeabi_uidiv+0xe8>
    4464:	e92d4003 	push	{r0, r1, lr}
    4468:	ebffffbc 	bl	4360 <__aeabi_uidiv>
    446c:	e8bd4006 	pop	{r1, r2, lr}
    4470:	e0030092 	mul	r3, r2, r0
    4474:	e0411003 	sub	r1, r1, r3
    4478:	e12fff1e 	bx	lr

0000447c <__aeabi_idiv>:
    447c:	e3510000 	cmp	r1, #0
    4480:	0a000043 	beq	4594 <.divsi3_skip_div0_test+0x110>

00004484 <.divsi3_skip_div0_test>:
    4484:	e020c001 	eor	ip, r0, r1
    4488:	42611000 	rsbmi	r1, r1, #0
    448c:	e2512001 	subs	r2, r1, #1
    4490:	0a000027 	beq	4534 <.divsi3_skip_div0_test+0xb0>
    4494:	e1b03000 	movs	r3, r0
    4498:	42603000 	rsbmi	r3, r0, #0
    449c:	e1530001 	cmp	r3, r1
    44a0:	9a000026 	bls	4540 <.divsi3_skip_div0_test+0xbc>
    44a4:	e1110002 	tst	r1, r2
    44a8:	0a000028 	beq	4550 <.divsi3_skip_div0_test+0xcc>
    44ac:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    44b0:	01a01181 	lsleq	r1, r1, #3
    44b4:	03a02008 	moveq	r2, #8
    44b8:	13a02001 	movne	r2, #1
    44bc:	e3510201 	cmp	r1, #268435456	; 0x10000000
    44c0:	31510003 	cmpcc	r1, r3
    44c4:	31a01201 	lslcc	r1, r1, #4
    44c8:	31a02202 	lslcc	r2, r2, #4
    44cc:	3afffffa 	bcc	44bc <.divsi3_skip_div0_test+0x38>
    44d0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    44d4:	31510003 	cmpcc	r1, r3
    44d8:	31a01081 	lslcc	r1, r1, #1
    44dc:	31a02082 	lslcc	r2, r2, #1
    44e0:	3afffffa 	bcc	44d0 <.divsi3_skip_div0_test+0x4c>
    44e4:	e3a00000 	mov	r0, #0
    44e8:	e1530001 	cmp	r3, r1
    44ec:	20433001 	subcs	r3, r3, r1
    44f0:	21800002 	orrcs	r0, r0, r2
    44f4:	e15300a1 	cmp	r3, r1, lsr #1
    44f8:	204330a1 	subcs	r3, r3, r1, lsr #1
    44fc:	218000a2 	orrcs	r0, r0, r2, lsr #1
    4500:	e1530121 	cmp	r3, r1, lsr #2
    4504:	20433121 	subcs	r3, r3, r1, lsr #2
    4508:	21800122 	orrcs	r0, r0, r2, lsr #2
    450c:	e15301a1 	cmp	r3, r1, lsr #3
    4510:	204331a1 	subcs	r3, r3, r1, lsr #3
    4514:	218001a2 	orrcs	r0, r0, r2, lsr #3
    4518:	e3530000 	cmp	r3, #0
    451c:	11b02222 	lsrsne	r2, r2, #4
    4520:	11a01221 	lsrne	r1, r1, #4
    4524:	1affffef 	bne	44e8 <.divsi3_skip_div0_test+0x64>
    4528:	e35c0000 	cmp	ip, #0
    452c:	42600000 	rsbmi	r0, r0, #0
    4530:	e12fff1e 	bx	lr
    4534:	e13c0000 	teq	ip, r0
    4538:	42600000 	rsbmi	r0, r0, #0
    453c:	e12fff1e 	bx	lr
    4540:	33a00000 	movcc	r0, #0
    4544:	01a00fcc 	asreq	r0, ip, #31
    4548:	03800001 	orreq	r0, r0, #1
    454c:	e12fff1e 	bx	lr
    4550:	e3510801 	cmp	r1, #65536	; 0x10000
    4554:	21a01821 	lsrcs	r1, r1, #16
    4558:	23a02010 	movcs	r2, #16
    455c:	33a02000 	movcc	r2, #0
    4560:	e3510c01 	cmp	r1, #256	; 0x100
    4564:	21a01421 	lsrcs	r1, r1, #8
    4568:	22822008 	addcs	r2, r2, #8
    456c:	e3510010 	cmp	r1, #16
    4570:	21a01221 	lsrcs	r1, r1, #4
    4574:	22822004 	addcs	r2, r2, #4
    4578:	e3510004 	cmp	r1, #4
    457c:	82822003 	addhi	r2, r2, #3
    4580:	908220a1 	addls	r2, r2, r1, lsr #1
    4584:	e35c0000 	cmp	ip, #0
    4588:	e1a00233 	lsr	r0, r3, r2
    458c:	42600000 	rsbmi	r0, r0, #0
    4590:	e12fff1e 	bx	lr
    4594:	e12fff1f 	bx	pc
    4598:	e1a00000 	nop			; (mov r0, r0)
    459c:	e3500000 	cmp	r0, #0
    45a0:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    45a4:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    45a8:	ea00258f 	b	dbec <____aeabi_idiv0_from_arm>

000045ac <__aeabi_idivmod>:
    45ac:	e3510000 	cmp	r1, #0
    45b0:	0afffff7 	beq	4594 <.divsi3_skip_div0_test+0x110>
    45b4:	e92d4003 	push	{r0, r1, lr}
    45b8:	ebffffb1 	bl	4484 <.divsi3_skip_div0_test>
    45bc:	e8bd4006 	pop	{r1, r2, lr}
    45c0:	e0030092 	mul	r3, r2, r0
    45c4:	e0411003 	sub	r1, r1, r3
    45c8:	e12fff1e 	bx	lr

000045cc <__aeabi_idiv0>:
    45cc:	4770      	bx	lr
    45ce:	46c0      	nop			; (mov r8, r8)

000045d0 <_fflush_r>:
    45d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45d2:	1c06      	adds	r6, r0, #0
    45d4:	1c0c      	adds	r4, r1, #0
    45d6:	2800      	cmp	r0, #0
    45d8:	d003      	beq.n	45e2 <_fflush_r+0x12>
    45da:	6b83      	ldr	r3, [r0, #56]	; 0x38
    45dc:	2b00      	cmp	r3, #0
    45de:	d100      	bne.n	45e2 <_fflush_r+0x12>
    45e0:	e06a      	b.n	46b8 <_fflush_r+0xe8>
    45e2:	89a0      	ldrh	r0, [r4, #12]
    45e4:	2800      	cmp	r0, #0
    45e6:	d041      	beq.n	466c <_fflush_r+0x9c>
    45e8:	0403      	lsls	r3, r0, #16
    45ea:	141b      	asrs	r3, r3, #16
    45ec:	2208      	movs	r2, #8
    45ee:	401a      	ands	r2, r3
    45f0:	d13f      	bne.n	4672 <_fflush_r+0xa2>
    45f2:	2380      	movs	r3, #128	; 0x80
    45f4:	011b      	lsls	r3, r3, #4
    45f6:	6861      	ldr	r1, [r4, #4]
    45f8:	4303      	orrs	r3, r0
    45fa:	81a3      	strh	r3, [r4, #12]
    45fc:	2900      	cmp	r1, #0
    45fe:	dc00      	bgt.n	4602 <_fflush_r+0x32>
    4600:	e06c      	b.n	46dc <_fflush_r+0x10c>
    4602:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    4604:	1e38      	subs	r0, r7, #0
    4606:	d031      	beq.n	466c <_fflush_r+0x9c>
    4608:	2200      	movs	r2, #0
    460a:	6835      	ldr	r5, [r6, #0]
    460c:	6032      	str	r2, [r6, #0]
    460e:	3280      	adds	r2, #128	; 0x80
    4610:	0152      	lsls	r2, r2, #5
    4612:	401a      	ands	r2, r3
    4614:	d055      	beq.n	46c2 <_fflush_r+0xf2>
    4616:	6d22      	ldr	r2, [r4, #80]	; 0x50
    4618:	0759      	lsls	r1, r3, #29
    461a:	d506      	bpl.n	462a <_fflush_r+0x5a>
    461c:	6863      	ldr	r3, [r4, #4]
    461e:	1ad2      	subs	r2, r2, r3
    4620:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4622:	2b00      	cmp	r3, #0
    4624:	d001      	beq.n	462a <_fflush_r+0x5a>
    4626:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4628:	1ad2      	subs	r2, r2, r3
    462a:	69e1      	ldr	r1, [r4, #28]
    462c:	1c30      	adds	r0, r6, #0
    462e:	2300      	movs	r3, #0
    4630:	f000 f892 	bl	4758 <fflush+0x2c>
    4634:	1c42      	adds	r2, r0, #1
    4636:	d057      	beq.n	46e8 <_fflush_r+0x118>
    4638:	89a2      	ldrh	r2, [r4, #12]
    463a:	4b3b      	ldr	r3, [pc, #236]	; (4728 <_fflush_r+0x158>)
    463c:	4013      	ands	r3, r2
    463e:	2200      	movs	r2, #0
    4640:	6062      	str	r2, [r4, #4]
    4642:	6922      	ldr	r2, [r4, #16]
    4644:	81a3      	strh	r3, [r4, #12]
    4646:	6022      	str	r2, [r4, #0]
    4648:	04d9      	lsls	r1, r3, #19
    464a:	d502      	bpl.n	4652 <_fflush_r+0x82>
    464c:	1c42      	adds	r2, r0, #1
    464e:	d057      	beq.n	4700 <_fflush_r+0x130>
    4650:	6520      	str	r0, [r4, #80]	; 0x50
    4652:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4654:	6035      	str	r5, [r6, #0]
    4656:	1e08      	subs	r0, r1, #0
    4658:	d008      	beq.n	466c <_fflush_r+0x9c>
    465a:	1c23      	adds	r3, r4, #0
    465c:	3340      	adds	r3, #64	; 0x40
    465e:	4299      	cmp	r1, r3
    4660:	d002      	beq.n	4668 <_fflush_r+0x98>
    4662:	1c30      	adds	r0, r6, #0
    4664:	f000 f9e6 	bl	4a34 <_free_r>
    4668:	2000      	movs	r0, #0
    466a:	6320      	str	r0, [r4, #48]	; 0x30
    466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    466e:	bc02      	pop	{r1}
    4670:	4708      	bx	r1
    4672:	6927      	ldr	r7, [r4, #16]
    4674:	1e38      	subs	r0, r7, #0
    4676:	d0f9      	beq.n	466c <_fflush_r+0x9c>
    4678:	6825      	ldr	r5, [r4, #0]
    467a:	2200      	movs	r2, #0
    467c:	1bed      	subs	r5, r5, r7
    467e:	6027      	str	r7, [r4, #0]
    4680:	0799      	lsls	r1, r3, #30
    4682:	d01c      	beq.n	46be <_fflush_r+0xee>
    4684:	2000      	movs	r0, #0
    4686:	60a2      	str	r2, [r4, #8]
    4688:	4285      	cmp	r5, r0
    468a:	dc04      	bgt.n	4696 <_fflush_r+0xc6>
    468c:	e7ee      	b.n	466c <_fflush_r+0x9c>
    468e:	1a2d      	subs	r5, r5, r0
    4690:	2d00      	cmp	r5, #0
    4692:	dd21      	ble.n	46d8 <_fflush_r+0x108>
    4694:	183f      	adds	r7, r7, r0
    4696:	6a62      	ldr	r2, [r4, #36]	; 0x24
    4698:	69e1      	ldr	r1, [r4, #28]
    469a:	4694      	mov	ip, r2
    469c:	1c30      	adds	r0, r6, #0
    469e:	1c3a      	adds	r2, r7, #0
    46a0:	1c2b      	adds	r3, r5, #0
    46a2:	f000 f85a 	bl	475a <fflush+0x2e>
    46a6:	2800      	cmp	r0, #0
    46a8:	dcf1      	bgt.n	468e <_fflush_r+0xbe>
    46aa:	89a3      	ldrh	r3, [r4, #12]
    46ac:	2240      	movs	r2, #64	; 0x40
    46ae:	4313      	orrs	r3, r2
    46b0:	2001      	movs	r0, #1
    46b2:	81a3      	strh	r3, [r4, #12]
    46b4:	4240      	negs	r0, r0
    46b6:	e7d9      	b.n	466c <_fflush_r+0x9c>
    46b8:	f000 f87e 	bl	47b8 <__sinit>
    46bc:	e791      	b.n	45e2 <_fflush_r+0x12>
    46be:	6962      	ldr	r2, [r4, #20]
    46c0:	e7e0      	b.n	4684 <_fflush_r+0xb4>
    46c2:	69e1      	ldr	r1, [r4, #28]
    46c4:	1c30      	adds	r0, r6, #0
    46c6:	2301      	movs	r3, #1
    46c8:	f000 f846 	bl	4758 <fflush+0x2c>
    46cc:	1c02      	adds	r2, r0, #0
    46ce:	1c41      	adds	r1, r0, #1
    46d0:	d01a      	beq.n	4708 <_fflush_r+0x138>
    46d2:	89a3      	ldrh	r3, [r4, #12]
    46d4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    46d6:	e79f      	b.n	4618 <_fflush_r+0x48>
    46d8:	2000      	movs	r0, #0
    46da:	e7c7      	b.n	466c <_fflush_r+0x9c>
    46dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    46de:	1c10      	adds	r0, r2, #0
    46e0:	2900      	cmp	r1, #0
    46e2:	dd00      	ble.n	46e6 <_fflush_r+0x116>
    46e4:	e78d      	b.n	4602 <_fflush_r+0x32>
    46e6:	e7c1      	b.n	466c <_fflush_r+0x9c>
    46e8:	6833      	ldr	r3, [r6, #0]
    46ea:	2b00      	cmp	r3, #0
    46ec:	d0a4      	beq.n	4638 <_fflush_r+0x68>
    46ee:	2b1d      	cmp	r3, #29
    46f0:	d0a2      	beq.n	4638 <_fflush_r+0x68>
    46f2:	2b16      	cmp	r3, #22
    46f4:	d0a0      	beq.n	4638 <_fflush_r+0x68>
    46f6:	89a3      	ldrh	r3, [r4, #12]
    46f8:	2240      	movs	r2, #64	; 0x40
    46fa:	4313      	orrs	r3, r2
    46fc:	81a3      	strh	r3, [r4, #12]
    46fe:	e7b5      	b.n	466c <_fflush_r+0x9c>
    4700:	6833      	ldr	r3, [r6, #0]
    4702:	2b00      	cmp	r3, #0
    4704:	d1a5      	bne.n	4652 <_fflush_r+0x82>
    4706:	e7a3      	b.n	4650 <_fflush_r+0x80>
    4708:	6833      	ldr	r3, [r6, #0]
    470a:	2b00      	cmp	r3, #0
    470c:	d0e1      	beq.n	46d2 <_fflush_r+0x102>
    470e:	2b16      	cmp	r3, #22
    4710:	d001      	beq.n	4716 <_fflush_r+0x146>
    4712:	2b1d      	cmp	r3, #29
    4714:	d102      	bne.n	471c <_fflush_r+0x14c>
    4716:	6035      	str	r5, [r6, #0]
    4718:	2000      	movs	r0, #0
    471a:	e7a7      	b.n	466c <_fflush_r+0x9c>
    471c:	89a3      	ldrh	r3, [r4, #12]
    471e:	2140      	movs	r1, #64	; 0x40
    4720:	430b      	orrs	r3, r1
    4722:	81a3      	strh	r3, [r4, #12]
    4724:	e7a2      	b.n	466c <_fflush_r+0x9c>
    4726:	46c0      	nop			; (mov r8, r8)
    4728:	fffff7ff 	.word	0xfffff7ff

0000472c <fflush>:
    472c:	b508      	push	{r3, lr}
    472e:	1e01      	subs	r1, r0, #0
    4730:	d006      	beq.n	4740 <fflush+0x14>
    4732:	4b06      	ldr	r3, [pc, #24]	; (474c <fflush+0x20>)
    4734:	6818      	ldr	r0, [r3, #0]
    4736:	f7ff ff4b 	bl	45d0 <_fflush_r>
    473a:	bc08      	pop	{r3}
    473c:	bc02      	pop	{r1}
    473e:	4708      	bx	r1
    4740:	4b03      	ldr	r3, [pc, #12]	; (4750 <fflush+0x24>)
    4742:	4904      	ldr	r1, [pc, #16]	; (4754 <fflush+0x28>)
    4744:	6818      	ldr	r0, [r3, #0]
    4746:	f000 fa75 	bl	4c34 <_fwalk_reent>
    474a:	e7f6      	b.n	473a <fflush+0xe>
    474c:	40000000 	.word	0x40000000
    4750:	0000dd38 	.word	0x0000dd38
    4754:	000045d1 	.word	0x000045d1
    4758:	4738      	bx	r7
    475a:	4760      	bx	ip

0000475c <__fp_lock>:
    475c:	2000      	movs	r0, #0
    475e:	4770      	bx	lr

00004760 <__fp_unlock>:
    4760:	2000      	movs	r0, #0
    4762:	4770      	bx	lr

00004764 <_cleanup_r>:
    4764:	b508      	push	{r3, lr}
    4766:	4903      	ldr	r1, [pc, #12]	; (4774 <_cleanup_r+0x10>)
    4768:	f000 fa38 	bl	4bdc <_fwalk>
    476c:	bc08      	pop	{r3}
    476e:	bc01      	pop	{r0}
    4770:	4700      	bx	r0
    4772:	46c0      	nop			; (mov r8, r8)
    4774:	00009665 	.word	0x00009665

00004778 <__sfmoreglue>:
    4778:	b570      	push	{r4, r5, r6, lr}
    477a:	2568      	movs	r5, #104	; 0x68
    477c:	434d      	muls	r5, r1
    477e:	1c0e      	adds	r6, r1, #0
    4780:	1c29      	adds	r1, r5, #0
    4782:	310c      	adds	r1, #12
    4784:	f000 faa0 	bl	4cc8 <_malloc_r>
    4788:	1e04      	subs	r4, r0, #0
    478a:	d007      	beq.n	479c <__sfmoreglue+0x24>
    478c:	300c      	adds	r0, #12
    478e:	2100      	movs	r1, #0
    4790:	6021      	str	r1, [r4, #0]
    4792:	6066      	str	r6, [r4, #4]
    4794:	60a0      	str	r0, [r4, #8]
    4796:	1c2a      	adds	r2, r5, #0
    4798:	f000 fd9a 	bl	52d0 <memset>
    479c:	1c20      	adds	r0, r4, #0
    479e:	bc70      	pop	{r4, r5, r6}
    47a0:	bc02      	pop	{r1}
    47a2:	4708      	bx	r1

000047a4 <_cleanup>:
    47a4:	b508      	push	{r3, lr}
    47a6:	4b03      	ldr	r3, [pc, #12]	; (47b4 <_cleanup+0x10>)
    47a8:	6818      	ldr	r0, [r3, #0]
    47aa:	f7ff ffdb 	bl	4764 <_cleanup_r>
    47ae:	bc08      	pop	{r3}
    47b0:	bc01      	pop	{r0}
    47b2:	4700      	bx	r0
    47b4:	0000dd38 	.word	0x0000dd38

000047b8 <__sinit>:
    47b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ba:	465f      	mov	r7, fp
    47bc:	4656      	mov	r6, sl
    47be:	464d      	mov	r5, r9
    47c0:	4644      	mov	r4, r8
    47c2:	b4f0      	push	{r4, r5, r6, r7}
    47c4:	6b84      	ldr	r4, [r0, #56]	; 0x38
    47c6:	1c06      	adds	r6, r0, #0
    47c8:	2c00      	cmp	r4, #0
    47ca:	d162      	bne.n	4892 <__sinit+0xda>
    47cc:	4b35      	ldr	r3, [pc, #212]	; (48a4 <__sinit+0xec>)
    47ce:	63c3      	str	r3, [r0, #60]	; 0x3c
    47d0:	2301      	movs	r3, #1
    47d2:	6383      	str	r3, [r0, #56]	; 0x38
    47d4:	469b      	mov	fp, r3
    47d6:	33b7      	adds	r3, #183	; 0xb7
    47d8:	009b      	lsls	r3, r3, #2
    47da:	50c4      	str	r4, [r0, r3]
    47dc:	23b9      	movs	r3, #185	; 0xb9
    47de:	2203      	movs	r2, #3
    47e0:	009b      	lsls	r3, r3, #2
    47e2:	50c2      	str	r2, [r0, r3]
    47e4:	23bb      	movs	r3, #187	; 0xbb
    47e6:	009b      	lsls	r3, r3, #2
    47e8:	6845      	ldr	r5, [r0, #4]
    47ea:	18c2      	adds	r2, r0, r3
    47ec:	23ba      	movs	r3, #186	; 0xba
    47ee:	009b      	lsls	r3, r3, #2
    47f0:	50c2      	str	r2, [r0, r3]
    47f2:	2304      	movs	r3, #4
    47f4:	1c28      	adds	r0, r5, #0
    47f6:	81ab      	strh	r3, [r5, #12]
    47f8:	602c      	str	r4, [r5, #0]
    47fa:	606c      	str	r4, [r5, #4]
    47fc:	60ac      	str	r4, [r5, #8]
    47fe:	666c      	str	r4, [r5, #100]	; 0x64
    4800:	81ec      	strh	r4, [r5, #14]
    4802:	612c      	str	r4, [r5, #16]
    4804:	616c      	str	r4, [r5, #20]
    4806:	61ac      	str	r4, [r5, #24]
    4808:	1c21      	adds	r1, r4, #0
    480a:	2208      	movs	r2, #8
    480c:	305c      	adds	r0, #92	; 0x5c
    480e:	f000 fd5f 	bl	52d0 <memset>
    4812:	4b25      	ldr	r3, [pc, #148]	; (48a8 <__sinit+0xf0>)
    4814:	4698      	mov	r8, r3
    4816:	626b      	str	r3, [r5, #36]	; 0x24
    4818:	4b24      	ldr	r3, [pc, #144]	; (48ac <__sinit+0xf4>)
    481a:	4f25      	ldr	r7, [pc, #148]	; (48b0 <__sinit+0xf8>)
    481c:	4699      	mov	r9, r3
    481e:	62ab      	str	r3, [r5, #40]	; 0x28
    4820:	4b24      	ldr	r3, [pc, #144]	; (48b4 <__sinit+0xfc>)
    4822:	61ed      	str	r5, [r5, #28]
    4824:	62eb      	str	r3, [r5, #44]	; 0x2c
    4826:	622f      	str	r7, [r5, #32]
    4828:	68b5      	ldr	r5, [r6, #8]
    482a:	469a      	mov	sl, r3
    482c:	2309      	movs	r3, #9
    482e:	81ab      	strh	r3, [r5, #12]
    4830:	1c28      	adds	r0, r5, #0
    4832:	465b      	mov	r3, fp
    4834:	81eb      	strh	r3, [r5, #14]
    4836:	602c      	str	r4, [r5, #0]
    4838:	606c      	str	r4, [r5, #4]
    483a:	60ac      	str	r4, [r5, #8]
    483c:	666c      	str	r4, [r5, #100]	; 0x64
    483e:	612c      	str	r4, [r5, #16]
    4840:	616c      	str	r4, [r5, #20]
    4842:	61ac      	str	r4, [r5, #24]
    4844:	1c21      	adds	r1, r4, #0
    4846:	2208      	movs	r2, #8
    4848:	305c      	adds	r0, #92	; 0x5c
    484a:	f000 fd41 	bl	52d0 <memset>
    484e:	4643      	mov	r3, r8
    4850:	626b      	str	r3, [r5, #36]	; 0x24
    4852:	464b      	mov	r3, r9
    4854:	62ab      	str	r3, [r5, #40]	; 0x28
    4856:	4653      	mov	r3, sl
    4858:	62eb      	str	r3, [r5, #44]	; 0x2c
    485a:	61ed      	str	r5, [r5, #28]
    485c:	622f      	str	r7, [r5, #32]
    485e:	68f5      	ldr	r5, [r6, #12]
    4860:	2312      	movs	r3, #18
    4862:	81ab      	strh	r3, [r5, #12]
    4864:	1c28      	adds	r0, r5, #0
    4866:	3b10      	subs	r3, #16
    4868:	81eb      	strh	r3, [r5, #14]
    486a:	602c      	str	r4, [r5, #0]
    486c:	606c      	str	r4, [r5, #4]
    486e:	60ac      	str	r4, [r5, #8]
    4870:	666c      	str	r4, [r5, #100]	; 0x64
    4872:	612c      	str	r4, [r5, #16]
    4874:	616c      	str	r4, [r5, #20]
    4876:	61ac      	str	r4, [r5, #24]
    4878:	305c      	adds	r0, #92	; 0x5c
    487a:	1c21      	adds	r1, r4, #0
    487c:	2208      	movs	r2, #8
    487e:	f000 fd27 	bl	52d0 <memset>
    4882:	4643      	mov	r3, r8
    4884:	626b      	str	r3, [r5, #36]	; 0x24
    4886:	464b      	mov	r3, r9
    4888:	62ab      	str	r3, [r5, #40]	; 0x28
    488a:	4653      	mov	r3, sl
    488c:	61ed      	str	r5, [r5, #28]
    488e:	622f      	str	r7, [r5, #32]
    4890:	62eb      	str	r3, [r5, #44]	; 0x2c
    4892:	bc3c      	pop	{r2, r3, r4, r5}
    4894:	4690      	mov	r8, r2
    4896:	4699      	mov	r9, r3
    4898:	46a2      	mov	sl, r4
    489a:	46ab      	mov	fp, r5
    489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    489e:	bc01      	pop	{r0}
    48a0:	4700      	bx	r0
    48a2:	46c0      	nop			; (mov r8, r8)
    48a4:	00004765 	.word	0x00004765
    48a8:	00005505 	.word	0x00005505
    48ac:	00005541 	.word	0x00005541
    48b0:	000054d5 	.word	0x000054d5
    48b4:	00005571 	.word	0x00005571

000048b8 <__sfp>:
    48b8:	b570      	push	{r4, r5, r6, lr}
    48ba:	4b22      	ldr	r3, [pc, #136]	; (4944 <__sfp+0x8c>)
    48bc:	681d      	ldr	r5, [r3, #0]
    48be:	6bab      	ldr	r3, [r5, #56]	; 0x38
    48c0:	1c06      	adds	r6, r0, #0
    48c2:	2b00      	cmp	r3, #0
    48c4:	d02e      	beq.n	4924 <__sfp+0x6c>
    48c6:	21b8      	movs	r1, #184	; 0xb8
    48c8:	0089      	lsls	r1, r1, #2
    48ca:	186d      	adds	r5, r5, r1
    48cc:	686b      	ldr	r3, [r5, #4]
    48ce:	68ac      	ldr	r4, [r5, #8]
    48d0:	3b01      	subs	r3, #1
    48d2:	d503      	bpl.n	48dc <__sfp+0x24>
    48d4:	e021      	b.n	491a <__sfp+0x62>
    48d6:	3b01      	subs	r3, #1
    48d8:	d41f      	bmi.n	491a <__sfp+0x62>
    48da:	3468      	adds	r4, #104	; 0x68
    48dc:	210c      	movs	r1, #12
    48de:	5e62      	ldrsh	r2, [r4, r1]
    48e0:	2a00      	cmp	r2, #0
    48e2:	d1f8      	bne.n	48d6 <__sfp+0x1e>
    48e4:	2301      	movs	r3, #1
    48e6:	425b      	negs	r3, r3
    48e8:	2500      	movs	r5, #0
    48ea:	81e3      	strh	r3, [r4, #14]
    48ec:	1c20      	adds	r0, r4, #0
    48ee:	2301      	movs	r3, #1
    48f0:	81a3      	strh	r3, [r4, #12]
    48f2:	6665      	str	r5, [r4, #100]	; 0x64
    48f4:	6025      	str	r5, [r4, #0]
    48f6:	60a5      	str	r5, [r4, #8]
    48f8:	6065      	str	r5, [r4, #4]
    48fa:	6125      	str	r5, [r4, #16]
    48fc:	6165      	str	r5, [r4, #20]
    48fe:	61a5      	str	r5, [r4, #24]
    4900:	305c      	adds	r0, #92	; 0x5c
    4902:	1c29      	adds	r1, r5, #0
    4904:	2208      	movs	r2, #8
    4906:	f000 fce3 	bl	52d0 <memset>
    490a:	6325      	str	r5, [r4, #48]	; 0x30
    490c:	6365      	str	r5, [r4, #52]	; 0x34
    490e:	6465      	str	r5, [r4, #68]	; 0x44
    4910:	64a5      	str	r5, [r4, #72]	; 0x48
    4912:	1c20      	adds	r0, r4, #0
    4914:	bc70      	pop	{r4, r5, r6}
    4916:	bc02      	pop	{r1}
    4918:	4708      	bx	r1
    491a:	6828      	ldr	r0, [r5, #0]
    491c:	2800      	cmp	r0, #0
    491e:	d005      	beq.n	492c <__sfp+0x74>
    4920:	1c05      	adds	r5, r0, #0
    4922:	e7d3      	b.n	48cc <__sfp+0x14>
    4924:	1c28      	adds	r0, r5, #0
    4926:	f7ff ff47 	bl	47b8 <__sinit>
    492a:	e7cc      	b.n	48c6 <__sfp+0xe>
    492c:	1c30      	adds	r0, r6, #0
    492e:	2104      	movs	r1, #4
    4930:	f7ff ff22 	bl	4778 <__sfmoreglue>
    4934:	6028      	str	r0, [r5, #0]
    4936:	2800      	cmp	r0, #0
    4938:	d1f2      	bne.n	4920 <__sfp+0x68>
    493a:	230c      	movs	r3, #12
    493c:	6033      	str	r3, [r6, #0]
    493e:	1c04      	adds	r4, r0, #0
    4940:	e7e7      	b.n	4912 <__sfp+0x5a>
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	0000dd38 	.word	0x0000dd38

00004948 <__sfp_lock_acquire>:
    4948:	4770      	bx	lr
    494a:	46c0      	nop			; (mov r8, r8)

0000494c <__sfp_lock_release>:
    494c:	4770      	bx	lr
    494e:	46c0      	nop			; (mov r8, r8)

00004950 <__sinit_lock_acquire>:
    4950:	4770      	bx	lr
    4952:	46c0      	nop			; (mov r8, r8)

00004954 <__sinit_lock_release>:
    4954:	4770      	bx	lr
    4956:	46c0      	nop			; (mov r8, r8)

00004958 <__fp_lock_all>:
    4958:	b508      	push	{r3, lr}
    495a:	4b04      	ldr	r3, [pc, #16]	; (496c <__fp_lock_all+0x14>)
    495c:	4904      	ldr	r1, [pc, #16]	; (4970 <__fp_lock_all+0x18>)
    495e:	6818      	ldr	r0, [r3, #0]
    4960:	f000 f93c 	bl	4bdc <_fwalk>
    4964:	bc08      	pop	{r3}
    4966:	bc01      	pop	{r0}
    4968:	4700      	bx	r0
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	40000000 	.word	0x40000000
    4970:	0000475d 	.word	0x0000475d

00004974 <__fp_unlock_all>:
    4974:	b508      	push	{r3, lr}
    4976:	4b04      	ldr	r3, [pc, #16]	; (4988 <__fp_unlock_all+0x14>)
    4978:	4904      	ldr	r1, [pc, #16]	; (498c <__fp_unlock_all+0x18>)
    497a:	6818      	ldr	r0, [r3, #0]
    497c:	f000 f92e 	bl	4bdc <_fwalk>
    4980:	bc08      	pop	{r3}
    4982:	bc01      	pop	{r0}
    4984:	4700      	bx	r0
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	40000000 	.word	0x40000000
    498c:	00004761 	.word	0x00004761

00004990 <_malloc_trim_r>:
    4990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4992:	1c0f      	adds	r7, r1, #0
    4994:	1c04      	adds	r4, r0, #0
    4996:	f000 fce1 	bl	535c <__malloc_lock>
    499a:	4d21      	ldr	r5, [pc, #132]	; (4a20 <_malloc_trim_r+0x90>)
    499c:	68ab      	ldr	r3, [r5, #8]
    499e:	685e      	ldr	r6, [r3, #4]
    49a0:	4a20      	ldr	r2, [pc, #128]	; (4a24 <_malloc_trim_r+0x94>)
    49a2:	2303      	movs	r3, #3
    49a4:	439e      	bics	r6, r3
    49a6:	18b3      	adds	r3, r6, r2
    49a8:	1bdf      	subs	r7, r3, r7
    49aa:	0b3f      	lsrs	r7, r7, #12
    49ac:	3f01      	subs	r7, #1
    49ae:	4b1e      	ldr	r3, [pc, #120]	; (4a28 <_malloc_trim_r+0x98>)
    49b0:	033f      	lsls	r7, r7, #12
    49b2:	429f      	cmp	r7, r3
    49b4:	dd07      	ble.n	49c6 <_malloc_trim_r+0x36>
    49b6:	1c20      	adds	r0, r4, #0
    49b8:	2100      	movs	r1, #0
    49ba:	f7fd f8e3 	bl	1b84 <_sbrk_r>
    49be:	68ab      	ldr	r3, [r5, #8]
    49c0:	199b      	adds	r3, r3, r6
    49c2:	4298      	cmp	r0, r3
    49c4:	d006      	beq.n	49d4 <_malloc_trim_r+0x44>
    49c6:	1c20      	adds	r0, r4, #0
    49c8:	f000 fcca 	bl	5360 <__malloc_unlock>
    49cc:	2000      	movs	r0, #0
    49ce:	bcf8      	pop	{r3, r4, r5, r6, r7}
    49d0:	bc02      	pop	{r1}
    49d2:	4708      	bx	r1
    49d4:	4279      	negs	r1, r7
    49d6:	1c20      	adds	r0, r4, #0
    49d8:	f7fd f8d4 	bl	1b84 <_sbrk_r>
    49dc:	3001      	adds	r0, #1
    49de:	d00d      	beq.n	49fc <_malloc_trim_r+0x6c>
    49e0:	68ab      	ldr	r3, [r5, #8]
    49e2:	1bf6      	subs	r6, r6, r7
    49e4:	2501      	movs	r5, #1
    49e6:	432e      	orrs	r6, r5
    49e8:	605e      	str	r6, [r3, #4]
    49ea:	4b10      	ldr	r3, [pc, #64]	; (4a2c <_malloc_trim_r+0x9c>)
    49ec:	681a      	ldr	r2, [r3, #0]
    49ee:	1bd7      	subs	r7, r2, r7
    49f0:	1c20      	adds	r0, r4, #0
    49f2:	601f      	str	r7, [r3, #0]
    49f4:	f000 fcb4 	bl	5360 <__malloc_unlock>
    49f8:	1c28      	adds	r0, r5, #0
    49fa:	e7e8      	b.n	49ce <_malloc_trim_r+0x3e>
    49fc:	1c20      	adds	r0, r4, #0
    49fe:	2100      	movs	r1, #0
    4a00:	f7fd f8c0 	bl	1b84 <_sbrk_r>
    4a04:	68ab      	ldr	r3, [r5, #8]
    4a06:	1ac2      	subs	r2, r0, r3
    4a08:	2a0f      	cmp	r2, #15
    4a0a:	dddc      	ble.n	49c6 <_malloc_trim_r+0x36>
    4a0c:	4908      	ldr	r1, [pc, #32]	; (4a30 <_malloc_trim_r+0xa0>)
    4a0e:	6809      	ldr	r1, [r1, #0]
    4a10:	1a40      	subs	r0, r0, r1
    4a12:	4906      	ldr	r1, [pc, #24]	; (4a2c <_malloc_trim_r+0x9c>)
    4a14:	6008      	str	r0, [r1, #0]
    4a16:	2101      	movs	r1, #1
    4a18:	430a      	orrs	r2, r1
    4a1a:	605a      	str	r2, [r3, #4]
    4a1c:	e7d3      	b.n	49c6 <_malloc_trim_r+0x36>
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	40000430 	.word	0x40000430
    4a24:	00000fef 	.word	0x00000fef
    4a28:	00000fff 	.word	0x00000fff
    4a2c:	400008cc 	.word	0x400008cc
    4a30:	40000838 	.word	0x40000838

00004a34 <_free_r>:
    4a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a36:	4657      	mov	r7, sl
    4a38:	464e      	mov	r6, r9
    4a3a:	4645      	mov	r5, r8
    4a3c:	b4e0      	push	{r5, r6, r7}
    4a3e:	1c05      	adds	r5, r0, #0
    4a40:	1e0c      	subs	r4, r1, #0
    4a42:	d05d      	beq.n	4b00 <_free_r+0xcc>
    4a44:	3c08      	subs	r4, #8
    4a46:	f000 fc89 	bl	535c <__malloc_lock>
    4a4a:	6860      	ldr	r0, [r4, #4]
    4a4c:	2101      	movs	r1, #1
    4a4e:	1c03      	adds	r3, r0, #0
    4a50:	438b      	bics	r3, r1
    4a52:	18e2      	adds	r2, r4, r3
    4a54:	6857      	ldr	r7, [r2, #4]
    4a56:	2603      	movs	r6, #3
    4a58:	43b7      	bics	r7, r6
    4a5a:	4e5b      	ldr	r6, [pc, #364]	; (4bc8 <_free_r+0x194>)
    4a5c:	4680      	mov	r8, r0
    4a5e:	68b0      	ldr	r0, [r6, #8]
    4a60:	4684      	mov	ip, r0
    4a62:	4594      	cmp	ip, r2
    4a64:	d06e      	beq.n	4b44 <_free_r+0x110>
    4a66:	2000      	movs	r0, #0
    4a68:	4684      	mov	ip, r0
    4a6a:	4640      	mov	r0, r8
    4a6c:	6057      	str	r7, [r2, #4]
    4a6e:	4008      	ands	r0, r1
    4a70:	4680      	mov	r8, r0
    4a72:	d10e      	bne.n	4a92 <_free_r+0x5e>
    4a74:	6820      	ldr	r0, [r4, #0]
    4a76:	1a24      	subs	r4, r4, r0
    4a78:	181b      	adds	r3, r3, r0
    4a7a:	68a0      	ldr	r0, [r4, #8]
    4a7c:	4682      	mov	sl, r0
    4a7e:	2008      	movs	r0, #8
    4a80:	1980      	adds	r0, r0, r6
    4a82:	468c      	mov	ip, r1
    4a84:	4582      	cmp	sl, r0
    4a86:	d004      	beq.n	4a92 <_free_r+0x5e>
    4a88:	68e1      	ldr	r1, [r4, #12]
    4a8a:	4650      	mov	r0, sl
    4a8c:	60c1      	str	r1, [r0, #12]
    4a8e:	6088      	str	r0, [r1, #8]
    4a90:	46c4      	mov	ip, r8
    4a92:	19d1      	adds	r1, r2, r7
    4a94:	6848      	ldr	r0, [r1, #4]
    4a96:	2101      	movs	r1, #1
    4a98:	4208      	tst	r0, r1
    4a9a:	d107      	bne.n	4aac <_free_r+0x78>
    4a9c:	2000      	movs	r0, #0
    4a9e:	19db      	adds	r3, r3, r7
    4aa0:	4584      	cmp	ip, r0
    4aa2:	d034      	beq.n	4b0e <_free_r+0xda>
    4aa4:	6890      	ldr	r0, [r2, #8]
    4aa6:	68d2      	ldr	r2, [r2, #12]
    4aa8:	60c2      	str	r2, [r0, #12]
    4aaa:	6090      	str	r0, [r2, #8]
    4aac:	2201      	movs	r2, #1
    4aae:	1c11      	adds	r1, r2, #0
    4ab0:	4319      	orrs	r1, r3
    4ab2:	6061      	str	r1, [r4, #4]
    4ab4:	2100      	movs	r1, #0
    4ab6:	50e3      	str	r3, [r4, r3]
    4ab8:	458c      	cmp	ip, r1
    4aba:	d11e      	bne.n	4afa <_free_r+0xc6>
    4abc:	4943      	ldr	r1, [pc, #268]	; (4bcc <_free_r+0x198>)
    4abe:	428b      	cmp	r3, r1
    4ac0:	d932      	bls.n	4b28 <_free_r+0xf4>
    4ac2:	0a5a      	lsrs	r2, r3, #9
    4ac4:	2a04      	cmp	r2, #4
    4ac6:	d856      	bhi.n	4b76 <_free_r+0x142>
    4ac8:	0999      	lsrs	r1, r3, #6
    4aca:	3138      	adds	r1, #56	; 0x38
    4acc:	00c8      	lsls	r0, r1, #3
    4ace:	1830      	adds	r0, r6, r0
    4ad0:	6882      	ldr	r2, [r0, #8]
    4ad2:	4282      	cmp	r2, r0
    4ad4:	d055      	beq.n	4b82 <_free_r+0x14e>
    4ad6:	6851      	ldr	r1, [r2, #4]
    4ad8:	2603      	movs	r6, #3
    4ada:	43b1      	bics	r1, r6
    4adc:	428b      	cmp	r3, r1
    4ade:	d304      	bcc.n	4aea <_free_r+0xb6>
    4ae0:	e006      	b.n	4af0 <_free_r+0xbc>
    4ae2:	6851      	ldr	r1, [r2, #4]
    4ae4:	43b1      	bics	r1, r6
    4ae6:	428b      	cmp	r3, r1
    4ae8:	d202      	bcs.n	4af0 <_free_r+0xbc>
    4aea:	6892      	ldr	r2, [r2, #8]
    4aec:	4290      	cmp	r0, r2
    4aee:	d1f8      	bne.n	4ae2 <_free_r+0xae>
    4af0:	68d3      	ldr	r3, [r2, #12]
    4af2:	60e3      	str	r3, [r4, #12]
    4af4:	60a2      	str	r2, [r4, #8]
    4af6:	60d4      	str	r4, [r2, #12]
    4af8:	609c      	str	r4, [r3, #8]
    4afa:	1c28      	adds	r0, r5, #0
    4afc:	f000 fc30 	bl	5360 <__malloc_unlock>
    4b00:	bc1c      	pop	{r2, r3, r4}
    4b02:	4690      	mov	r8, r2
    4b04:	4699      	mov	r9, r3
    4b06:	46a2      	mov	sl, r4
    4b08:	bcf0      	pop	{r4, r5, r6, r7}
    4b0a:	bc01      	pop	{r0}
    4b0c:	4700      	bx	r0
    4b0e:	1c37      	adds	r7, r6, #0
    4b10:	6890      	ldr	r0, [r2, #8]
    4b12:	3708      	adds	r7, #8
    4b14:	42b8      	cmp	r0, r7
    4b16:	d1c6      	bne.n	4aa6 <_free_r+0x72>
    4b18:	4319      	orrs	r1, r3
    4b1a:	60c4      	str	r4, [r0, #12]
    4b1c:	6084      	str	r4, [r0, #8]
    4b1e:	60e0      	str	r0, [r4, #12]
    4b20:	60a0      	str	r0, [r4, #8]
    4b22:	6061      	str	r1, [r4, #4]
    4b24:	50e3      	str	r3, [r4, r3]
    4b26:	e7e8      	b.n	4afa <_free_r+0xc6>
    4b28:	08db      	lsrs	r3, r3, #3
    4b2a:	1099      	asrs	r1, r3, #2
    4b2c:	408a      	lsls	r2, r1
    4b2e:	6871      	ldr	r1, [r6, #4]
    4b30:	00db      	lsls	r3, r3, #3
    4b32:	430a      	orrs	r2, r1
    4b34:	6072      	str	r2, [r6, #4]
    4b36:	18f6      	adds	r6, r6, r3
    4b38:	68b3      	ldr	r3, [r6, #8]
    4b3a:	60e6      	str	r6, [r4, #12]
    4b3c:	60a3      	str	r3, [r4, #8]
    4b3e:	60dc      	str	r4, [r3, #12]
    4b40:	60b4      	str	r4, [r6, #8]
    4b42:	e7da      	b.n	4afa <_free_r+0xc6>
    4b44:	4642      	mov	r2, r8
    4b46:	18fb      	adds	r3, r7, r3
    4b48:	420a      	tst	r2, r1
    4b4a:	d106      	bne.n	4b5a <_free_r+0x126>
    4b4c:	6822      	ldr	r2, [r4, #0]
    4b4e:	1aa4      	subs	r4, r4, r2
    4b50:	68a1      	ldr	r1, [r4, #8]
    4b52:	189b      	adds	r3, r3, r2
    4b54:	68e2      	ldr	r2, [r4, #12]
    4b56:	60ca      	str	r2, [r1, #12]
    4b58:	6091      	str	r1, [r2, #8]
    4b5a:	2201      	movs	r2, #1
    4b5c:	431a      	orrs	r2, r3
    4b5e:	6062      	str	r2, [r4, #4]
    4b60:	4a1b      	ldr	r2, [pc, #108]	; (4bd0 <_free_r+0x19c>)
    4b62:	6812      	ldr	r2, [r2, #0]
    4b64:	60b4      	str	r4, [r6, #8]
    4b66:	4293      	cmp	r3, r2
    4b68:	d3c7      	bcc.n	4afa <_free_r+0xc6>
    4b6a:	4b1a      	ldr	r3, [pc, #104]	; (4bd4 <_free_r+0x1a0>)
    4b6c:	1c28      	adds	r0, r5, #0
    4b6e:	6819      	ldr	r1, [r3, #0]
    4b70:	f7ff ff0e 	bl	4990 <_malloc_trim_r>
    4b74:	e7c1      	b.n	4afa <_free_r+0xc6>
    4b76:	2a14      	cmp	r2, #20
    4b78:	d80c      	bhi.n	4b94 <_free_r+0x160>
    4b7a:	1c11      	adds	r1, r2, #0
    4b7c:	315b      	adds	r1, #91	; 0x5b
    4b7e:	00c8      	lsls	r0, r1, #3
    4b80:	e7a5      	b.n	4ace <_free_r+0x9a>
    4b82:	1089      	asrs	r1, r1, #2
    4b84:	2301      	movs	r3, #1
    4b86:	408b      	lsls	r3, r1
    4b88:	1c19      	adds	r1, r3, #0
    4b8a:	6873      	ldr	r3, [r6, #4]
    4b8c:	4319      	orrs	r1, r3
    4b8e:	6071      	str	r1, [r6, #4]
    4b90:	1c13      	adds	r3, r2, #0
    4b92:	e7ae      	b.n	4af2 <_free_r+0xbe>
    4b94:	2a54      	cmp	r2, #84	; 0x54
    4b96:	d803      	bhi.n	4ba0 <_free_r+0x16c>
    4b98:	0b19      	lsrs	r1, r3, #12
    4b9a:	316e      	adds	r1, #110	; 0x6e
    4b9c:	00c8      	lsls	r0, r1, #3
    4b9e:	e796      	b.n	4ace <_free_r+0x9a>
    4ba0:	21aa      	movs	r1, #170	; 0xaa
    4ba2:	0049      	lsls	r1, r1, #1
    4ba4:	428a      	cmp	r2, r1
    4ba6:	d803      	bhi.n	4bb0 <_free_r+0x17c>
    4ba8:	0bd9      	lsrs	r1, r3, #15
    4baa:	3177      	adds	r1, #119	; 0x77
    4bac:	00c8      	lsls	r0, r1, #3
    4bae:	e78e      	b.n	4ace <_free_r+0x9a>
    4bb0:	4909      	ldr	r1, [pc, #36]	; (4bd8 <_free_r+0x1a4>)
    4bb2:	428a      	cmp	r2, r1
    4bb4:	d803      	bhi.n	4bbe <_free_r+0x18a>
    4bb6:	0c99      	lsrs	r1, r3, #18
    4bb8:	317c      	adds	r1, #124	; 0x7c
    4bba:	00c8      	lsls	r0, r1, #3
    4bbc:	e787      	b.n	4ace <_free_r+0x9a>
    4bbe:	20fc      	movs	r0, #252	; 0xfc
    4bc0:	0080      	lsls	r0, r0, #2
    4bc2:	217e      	movs	r1, #126	; 0x7e
    4bc4:	e783      	b.n	4ace <_free_r+0x9a>
    4bc6:	46c0      	nop			; (mov r8, r8)
    4bc8:	40000430 	.word	0x40000430
    4bcc:	000001ff 	.word	0x000001ff
    4bd0:	4000083c 	.word	0x4000083c
    4bd4:	400008c8 	.word	0x400008c8
    4bd8:	00000554 	.word	0x00000554

00004bdc <_fwalk>:
    4bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bde:	4647      	mov	r7, r8
    4be0:	b480      	push	{r7}
    4be2:	1c06      	adds	r6, r0, #0
    4be4:	4688      	mov	r8, r1
    4be6:	f7ff feaf 	bl	4948 <__sfp_lock_acquire>
    4bea:	22b8      	movs	r2, #184	; 0xb8
    4bec:	0092      	lsls	r2, r2, #2
    4bee:	18b6      	adds	r6, r6, r2
    4bf0:	1e37      	subs	r7, r6, #0
    4bf2:	d017      	beq.n	4c24 <_fwalk+0x48>
    4bf4:	2700      	movs	r7, #0
    4bf6:	6875      	ldr	r5, [r6, #4]
    4bf8:	68b4      	ldr	r4, [r6, #8]
    4bfa:	3d01      	subs	r5, #1
    4bfc:	d501      	bpl.n	4c02 <_fwalk+0x26>
    4bfe:	e00e      	b.n	4c1e <_fwalk+0x42>
    4c00:	3468      	adds	r4, #104	; 0x68
    4c02:	220c      	movs	r2, #12
    4c04:	5ea3      	ldrsh	r3, [r4, r2]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d007      	beq.n	4c1a <_fwalk+0x3e>
    4c0a:	220e      	movs	r2, #14
    4c0c:	5ea3      	ldrsh	r3, [r4, r2]
    4c0e:	3301      	adds	r3, #1
    4c10:	d003      	beq.n	4c1a <_fwalk+0x3e>
    4c12:	1c20      	adds	r0, r4, #0
    4c14:	f000 f83e 	bl	4c94 <_fwalk_reent+0x60>
    4c18:	4307      	orrs	r7, r0
    4c1a:	3d01      	subs	r5, #1
    4c1c:	d5f0      	bpl.n	4c00 <_fwalk+0x24>
    4c1e:	6836      	ldr	r6, [r6, #0]
    4c20:	2e00      	cmp	r6, #0
    4c22:	d1e8      	bne.n	4bf6 <_fwalk+0x1a>
    4c24:	f7ff fe92 	bl	494c <__sfp_lock_release>
    4c28:	1c38      	adds	r0, r7, #0
    4c2a:	bc04      	pop	{r2}
    4c2c:	4690      	mov	r8, r2
    4c2e:	bcf0      	pop	{r4, r5, r6, r7}
    4c30:	bc02      	pop	{r1}
    4c32:	4708      	bx	r1

00004c34 <_fwalk_reent>:
    4c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c36:	464f      	mov	r7, r9
    4c38:	4646      	mov	r6, r8
    4c3a:	b4c0      	push	{r6, r7}
    4c3c:	4680      	mov	r8, r0
    4c3e:	4689      	mov	r9, r1
    4c40:	f7ff fe82 	bl	4948 <__sfp_lock_acquire>
    4c44:	22b8      	movs	r2, #184	; 0xb8
    4c46:	0092      	lsls	r2, r2, #2
    4c48:	1c16      	adds	r6, r2, #0
    4c4a:	4446      	add	r6, r8
    4c4c:	1e37      	subs	r7, r6, #0
    4c4e:	d018      	beq.n	4c82 <_fwalk_reent+0x4e>
    4c50:	2700      	movs	r7, #0
    4c52:	6875      	ldr	r5, [r6, #4]
    4c54:	68b4      	ldr	r4, [r6, #8]
    4c56:	3d01      	subs	r5, #1
    4c58:	d501      	bpl.n	4c5e <_fwalk_reent+0x2a>
    4c5a:	e00f      	b.n	4c7c <_fwalk_reent+0x48>
    4c5c:	3468      	adds	r4, #104	; 0x68
    4c5e:	220c      	movs	r2, #12
    4c60:	5ea3      	ldrsh	r3, [r4, r2]
    4c62:	2b00      	cmp	r3, #0
    4c64:	d008      	beq.n	4c78 <_fwalk_reent+0x44>
    4c66:	220e      	movs	r2, #14
    4c68:	5ea3      	ldrsh	r3, [r4, r2]
    4c6a:	3301      	adds	r3, #1
    4c6c:	d004      	beq.n	4c78 <_fwalk_reent+0x44>
    4c6e:	4640      	mov	r0, r8
    4c70:	1c21      	adds	r1, r4, #0
    4c72:	f000 f810 	bl	4c96 <_fwalk_reent+0x62>
    4c76:	4307      	orrs	r7, r0
    4c78:	3d01      	subs	r5, #1
    4c7a:	d5ef      	bpl.n	4c5c <_fwalk_reent+0x28>
    4c7c:	6836      	ldr	r6, [r6, #0]
    4c7e:	2e00      	cmp	r6, #0
    4c80:	d1e7      	bne.n	4c52 <_fwalk_reent+0x1e>
    4c82:	f7ff fe63 	bl	494c <__sfp_lock_release>
    4c86:	1c38      	adds	r0, r7, #0
    4c88:	bc0c      	pop	{r2, r3}
    4c8a:	4690      	mov	r8, r2
    4c8c:	4699      	mov	r9, r3
    4c8e:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4c90:	bc02      	pop	{r1}
    4c92:	4708      	bx	r1
    4c94:	4740      	bx	r8
    4c96:	4748      	bx	r9

00004c98 <malloc>:
    4c98:	b508      	push	{r3, lr}
    4c9a:	4b04      	ldr	r3, [pc, #16]	; (4cac <malloc+0x14>)
    4c9c:	1c01      	adds	r1, r0, #0
    4c9e:	6818      	ldr	r0, [r3, #0]
    4ca0:	f000 f812 	bl	4cc8 <_malloc_r>
    4ca4:	bc08      	pop	{r3}
    4ca6:	bc02      	pop	{r1}
    4ca8:	4708      	bx	r1
    4caa:	46c0      	nop			; (mov r8, r8)
    4cac:	40000000 	.word	0x40000000

00004cb0 <free>:
    4cb0:	b508      	push	{r3, lr}
    4cb2:	4b04      	ldr	r3, [pc, #16]	; (4cc4 <free+0x14>)
    4cb4:	1c01      	adds	r1, r0, #0
    4cb6:	6818      	ldr	r0, [r3, #0]
    4cb8:	f7ff febc 	bl	4a34 <_free_r>
    4cbc:	bc08      	pop	{r3}
    4cbe:	bc01      	pop	{r0}
    4cc0:	4700      	bx	r0
    4cc2:	46c0      	nop			; (mov r8, r8)
    4cc4:	40000000 	.word	0x40000000

00004cc8 <_malloc_r>:
    4cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cca:	465f      	mov	r7, fp
    4ccc:	4656      	mov	r6, sl
    4cce:	464d      	mov	r5, r9
    4cd0:	4644      	mov	r4, r8
    4cd2:	b4f0      	push	{r4, r5, r6, r7}
    4cd4:	1c0d      	adds	r5, r1, #0
    4cd6:	350b      	adds	r5, #11
    4cd8:	b083      	sub	sp, #12
    4cda:	1c07      	adds	r7, r0, #0
    4cdc:	2d16      	cmp	r5, #22
    4cde:	d92e      	bls.n	4d3e <_malloc_r+0x76>
    4ce0:	2307      	movs	r3, #7
    4ce2:	439d      	bics	r5, r3
    4ce4:	0feb      	lsrs	r3, r5, #31
    4ce6:	428d      	cmp	r5, r1
    4ce8:	d32d      	bcc.n	4d46 <_malloc_r+0x7e>
    4cea:	2b00      	cmp	r3, #0
    4cec:	d12b      	bne.n	4d46 <_malloc_r+0x7e>
    4cee:	1c38      	adds	r0, r7, #0
    4cf0:	f000 fb34 	bl	535c <__malloc_lock>
    4cf4:	4b8c      	ldr	r3, [pc, #560]	; (4f28 <_malloc_r+0x260>)
    4cf6:	429d      	cmp	r5, r3
    4cf8:	d829      	bhi.n	4d4e <_malloc_r+0x86>
    4cfa:	08ea      	lsrs	r2, r5, #3
    4cfc:	4e8b      	ldr	r6, [pc, #556]	; (4f2c <_malloc_r+0x264>)
    4cfe:	00d3      	lsls	r3, r2, #3
    4d00:	18f3      	adds	r3, r6, r3
    4d02:	68dc      	ldr	r4, [r3, #12]
    4d04:	429c      	cmp	r4, r3
    4d06:	d100      	bne.n	4d0a <_malloc_r+0x42>
    4d08:	e1b8      	b.n	507c <_malloc_r+0x3b4>
    4d0a:	6863      	ldr	r3, [r4, #4]
    4d0c:	2203      	movs	r2, #3
    4d0e:	68a1      	ldr	r1, [r4, #8]
    4d10:	4393      	bics	r3, r2
    4d12:	68e2      	ldr	r2, [r4, #12]
    4d14:	18e3      	adds	r3, r4, r3
    4d16:	60ca      	str	r2, [r1, #12]
    4d18:	6091      	str	r1, [r2, #8]
    4d1a:	685a      	ldr	r2, [r3, #4]
    4d1c:	2101      	movs	r1, #1
    4d1e:	430a      	orrs	r2, r1
    4d20:	1c38      	adds	r0, r7, #0
    4d22:	605a      	str	r2, [r3, #4]
    4d24:	f000 fb1c 	bl	5360 <__malloc_unlock>
    4d28:	1c20      	adds	r0, r4, #0
    4d2a:	3008      	adds	r0, #8
    4d2c:	b003      	add	sp, #12
    4d2e:	bc3c      	pop	{r2, r3, r4, r5}
    4d30:	4690      	mov	r8, r2
    4d32:	4699      	mov	r9, r3
    4d34:	46a2      	mov	sl, r4
    4d36:	46ab      	mov	fp, r5
    4d38:	bcf0      	pop	{r4, r5, r6, r7}
    4d3a:	bc02      	pop	{r1}
    4d3c:	4708      	bx	r1
    4d3e:	2510      	movs	r5, #16
    4d40:	2300      	movs	r3, #0
    4d42:	428d      	cmp	r5, r1
    4d44:	d2d1      	bcs.n	4cea <_malloc_r+0x22>
    4d46:	230c      	movs	r3, #12
    4d48:	603b      	str	r3, [r7, #0]
    4d4a:	2000      	movs	r0, #0
    4d4c:	e7ee      	b.n	4d2c <_malloc_r+0x64>
    4d4e:	0a6b      	lsrs	r3, r5, #9
    4d50:	2b00      	cmp	r3, #0
    4d52:	d02b      	beq.n	4dac <_malloc_r+0xe4>
    4d54:	2b04      	cmp	r3, #4
    4d56:	d900      	bls.n	4d5a <_malloc_r+0x92>
    4d58:	e179      	b.n	504e <_malloc_r+0x386>
    4d5a:	09ab      	lsrs	r3, r5, #6
    4d5c:	3338      	adds	r3, #56	; 0x38
    4d5e:	4699      	mov	r9, r3
    4d60:	00d9      	lsls	r1, r3, #3
    4d62:	4e72      	ldr	r6, [pc, #456]	; (4f2c <_malloc_r+0x264>)
    4d64:	1871      	adds	r1, r6, r1
    4d66:	68cc      	ldr	r4, [r1, #12]
    4d68:	42a1      	cmp	r1, r4
    4d6a:	d026      	beq.n	4dba <_malloc_r+0xf2>
    4d6c:	6862      	ldr	r2, [r4, #4]
    4d6e:	2003      	movs	r0, #3
    4d70:	4382      	bics	r2, r0
    4d72:	1b53      	subs	r3, r2, r5
    4d74:	2b0f      	cmp	r3, #15
    4d76:	dd08      	ble.n	4d8a <_malloc_r+0xc2>
    4d78:	e01c      	b.n	4db4 <_malloc_r+0xec>
    4d7a:	68e4      	ldr	r4, [r4, #12]
    4d7c:	42a1      	cmp	r1, r4
    4d7e:	d01c      	beq.n	4dba <_malloc_r+0xf2>
    4d80:	6862      	ldr	r2, [r4, #4]
    4d82:	4382      	bics	r2, r0
    4d84:	1b53      	subs	r3, r2, r5
    4d86:	2b0f      	cmp	r3, #15
    4d88:	dc14      	bgt.n	4db4 <_malloc_r+0xec>
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	dbf5      	blt.n	4d7a <_malloc_r+0xb2>
    4d8e:	68e3      	ldr	r3, [r4, #12]
    4d90:	68a1      	ldr	r1, [r4, #8]
    4d92:	60cb      	str	r3, [r1, #12]
    4d94:	6099      	str	r1, [r3, #8]
    4d96:	18a2      	adds	r2, r4, r2
    4d98:	6853      	ldr	r3, [r2, #4]
    4d9a:	2101      	movs	r1, #1
    4d9c:	430b      	orrs	r3, r1
    4d9e:	1c38      	adds	r0, r7, #0
    4da0:	6053      	str	r3, [r2, #4]
    4da2:	f000 fadd 	bl	5360 <__malloc_unlock>
    4da6:	1c20      	adds	r0, r4, #0
    4da8:	3008      	adds	r0, #8
    4daa:	e7bf      	b.n	4d2c <_malloc_r+0x64>
    4dac:	08e8      	lsrs	r0, r5, #3
    4dae:	4681      	mov	r9, r0
    4db0:	00c1      	lsls	r1, r0, #3
    4db2:	e7d6      	b.n	4d62 <_malloc_r+0x9a>
    4db4:	2301      	movs	r3, #1
    4db6:	425b      	negs	r3, r3
    4db8:	4499      	add	r9, r3
    4dba:	2401      	movs	r4, #1
    4dbc:	44a1      	add	r9, r4
    4dbe:	1c31      	adds	r1, r6, #0
    4dc0:	3108      	adds	r1, #8
    4dc2:	688c      	ldr	r4, [r1, #8]
    4dc4:	42a1      	cmp	r1, r4
    4dc6:	d100      	bne.n	4dca <_malloc_r+0x102>
    4dc8:	e085      	b.n	4ed6 <_malloc_r+0x20e>
    4dca:	6862      	ldr	r2, [r4, #4]
    4dcc:	2303      	movs	r3, #3
    4dce:	439a      	bics	r2, r3
    4dd0:	1b53      	subs	r3, r2, r5
    4dd2:	4693      	mov	fp, r2
    4dd4:	2b0f      	cmp	r3, #15
    4dd6:	dd00      	ble.n	4dda <_malloc_r+0x112>
    4dd8:	e142      	b.n	5060 <_malloc_r+0x398>
    4dda:	60c9      	str	r1, [r1, #12]
    4ddc:	6089      	str	r1, [r1, #8]
    4dde:	2b00      	cmp	r3, #0
    4de0:	db00      	blt.n	4de4 <_malloc_r+0x11c>
    4de2:	e09d      	b.n	4f20 <_malloc_r+0x258>
    4de4:	4b52      	ldr	r3, [pc, #328]	; (4f30 <_malloc_r+0x268>)
    4de6:	459b      	cmp	fp, r3
    4de8:	d851      	bhi.n	4e8e <_malloc_r+0x1c6>
    4dea:	08d2      	lsrs	r2, r2, #3
    4dec:	1093      	asrs	r3, r2, #2
    4dee:	2001      	movs	r0, #1
    4df0:	4098      	lsls	r0, r3
    4df2:	00d2      	lsls	r2, r2, #3
    4df4:	6873      	ldr	r3, [r6, #4]
    4df6:	18b2      	adds	r2, r6, r2
    4df8:	4303      	orrs	r3, r0
    4dfa:	6890      	ldr	r0, [r2, #8]
    4dfc:	60e2      	str	r2, [r4, #12]
    4dfe:	60a0      	str	r0, [r4, #8]
    4e00:	60c4      	str	r4, [r0, #12]
    4e02:	6094      	str	r4, [r2, #8]
    4e04:	464c      	mov	r4, r9
    4e06:	10a2      	asrs	r2, r4, #2
    4e08:	2001      	movs	r0, #1
    4e0a:	4090      	lsls	r0, r2
    4e0c:	6073      	str	r3, [r6, #4]
    4e0e:	4298      	cmp	r0, r3
    4e10:	d868      	bhi.n	4ee4 <_malloc_r+0x21c>
    4e12:	4218      	tst	r0, r3
    4e14:	d10c      	bne.n	4e30 <_malloc_r+0x168>
    4e16:	2203      	movs	r2, #3
    4e18:	4394      	bics	r4, r2
    4e1a:	1c22      	adds	r2, r4, #0
    4e1c:	3204      	adds	r2, #4
    4e1e:	0040      	lsls	r0, r0, #1
    4e20:	4691      	mov	r9, r2
    4e22:	4218      	tst	r0, r3
    4e24:	d104      	bne.n	4e30 <_malloc_r+0x168>
    4e26:	2204      	movs	r2, #4
    4e28:	0040      	lsls	r0, r0, #1
    4e2a:	4491      	add	r9, r2
    4e2c:	4203      	tst	r3, r0
    4e2e:	d0fa      	beq.n	4e26 <_malloc_r+0x15e>
    4e30:	2303      	movs	r3, #3
    4e32:	4698      	mov	r8, r3
    4e34:	464c      	mov	r4, r9
    4e36:	00e3      	lsls	r3, r4, #3
    4e38:	199b      	adds	r3, r3, r6
    4e3a:	469b      	mov	fp, r3
    4e3c:	469c      	mov	ip, r3
    4e3e:	46ca      	mov	sl, r9
    4e40:	4662      	mov	r2, ip
    4e42:	68d4      	ldr	r4, [r2, #12]
    4e44:	45a4      	cmp	ip, r4
    4e46:	d107      	bne.n	4e58 <_malloc_r+0x190>
    4e48:	e10f      	b.n	506a <_malloc_r+0x3a2>
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	db00      	blt.n	4e50 <_malloc_r+0x188>
    4e4e:	e11e      	b.n	508e <_malloc_r+0x3c6>
    4e50:	68e4      	ldr	r4, [r4, #12]
    4e52:	45a4      	cmp	ip, r4
    4e54:	d100      	bne.n	4e58 <_malloc_r+0x190>
    4e56:	e108      	b.n	506a <_malloc_r+0x3a2>
    4e58:	6862      	ldr	r2, [r4, #4]
    4e5a:	4643      	mov	r3, r8
    4e5c:	439a      	bics	r2, r3
    4e5e:	1b53      	subs	r3, r2, r5
    4e60:	2b0f      	cmp	r3, #15
    4e62:	ddf2      	ble.n	4e4a <_malloc_r+0x182>
    4e64:	2001      	movs	r0, #1
    4e66:	1962      	adds	r2, r4, r5
    4e68:	4305      	orrs	r5, r0
    4e6a:	68a6      	ldr	r6, [r4, #8]
    4e6c:	6065      	str	r5, [r4, #4]
    4e6e:	68e5      	ldr	r5, [r4, #12]
    4e70:	60f5      	str	r5, [r6, #12]
    4e72:	60ae      	str	r6, [r5, #8]
    4e74:	4318      	orrs	r0, r3
    4e76:	60ca      	str	r2, [r1, #12]
    4e78:	608a      	str	r2, [r1, #8]
    4e7a:	6050      	str	r0, [r2, #4]
    4e7c:	60d1      	str	r1, [r2, #12]
    4e7e:	6091      	str	r1, [r2, #8]
    4e80:	1c38      	adds	r0, r7, #0
    4e82:	50d3      	str	r3, [r2, r3]
    4e84:	f000 fa6c 	bl	5360 <__malloc_unlock>
    4e88:	1c20      	adds	r0, r4, #0
    4e8a:	3008      	adds	r0, #8
    4e8c:	e74e      	b.n	4d2c <_malloc_r+0x64>
    4e8e:	0a53      	lsrs	r3, r2, #9
    4e90:	2b04      	cmp	r3, #4
    4e92:	d900      	bls.n	4e96 <_malloc_r+0x1ce>
    4e94:	e10e      	b.n	50b4 <_malloc_r+0x3ec>
    4e96:	0990      	lsrs	r0, r2, #6
    4e98:	3038      	adds	r0, #56	; 0x38
    4e9a:	4680      	mov	r8, r0
    4e9c:	4640      	mov	r0, r8
    4e9e:	00c3      	lsls	r3, r0, #3
    4ea0:	199b      	adds	r3, r3, r6
    4ea2:	469c      	mov	ip, r3
    4ea4:	689b      	ldr	r3, [r3, #8]
    4ea6:	4563      	cmp	r3, ip
    4ea8:	d100      	bne.n	4eac <_malloc_r+0x1e4>
    4eaa:	e117      	b.n	50dc <_malloc_r+0x414>
    4eac:	685a      	ldr	r2, [r3, #4]
    4eae:	2003      	movs	r0, #3
    4eb0:	4382      	bics	r2, r0
    4eb2:	4680      	mov	r8, r0
    4eb4:	4593      	cmp	fp, r2
    4eb6:	d306      	bcc.n	4ec6 <_malloc_r+0x1fe>
    4eb8:	e008      	b.n	4ecc <_malloc_r+0x204>
    4eba:	6858      	ldr	r0, [r3, #4]
    4ebc:	1c02      	adds	r2, r0, #0
    4ebe:	4640      	mov	r0, r8
    4ec0:	4382      	bics	r2, r0
    4ec2:	4593      	cmp	fp, r2
    4ec4:	d202      	bcs.n	4ecc <_malloc_r+0x204>
    4ec6:	689b      	ldr	r3, [r3, #8]
    4ec8:	459c      	cmp	ip, r3
    4eca:	d1f6      	bne.n	4eba <_malloc_r+0x1f2>
    4ecc:	68da      	ldr	r2, [r3, #12]
    4ece:	60e2      	str	r2, [r4, #12]
    4ed0:	60a3      	str	r3, [r4, #8]
    4ed2:	60dc      	str	r4, [r3, #12]
    4ed4:	6094      	str	r4, [r2, #8]
    4ed6:	464c      	mov	r4, r9
    4ed8:	10a2      	asrs	r2, r4, #2
    4eda:	2001      	movs	r0, #1
    4edc:	6873      	ldr	r3, [r6, #4]
    4ede:	4090      	lsls	r0, r2
    4ee0:	4298      	cmp	r0, r3
    4ee2:	d996      	bls.n	4e12 <_malloc_r+0x14a>
    4ee4:	68b4      	ldr	r4, [r6, #8]
    4ee6:	6863      	ldr	r3, [r4, #4]
    4ee8:	2203      	movs	r2, #3
    4eea:	4393      	bics	r3, r2
    4eec:	469a      	mov	sl, r3
    4eee:	1b5b      	subs	r3, r3, r5
    4ef0:	0fd8      	lsrs	r0, r3, #31
    4ef2:	3a03      	subs	r2, #3
    4ef4:	210f      	movs	r1, #15
    4ef6:	4299      	cmp	r1, r3
    4ef8:	4142      	adcs	r2, r0
    4efa:	0612      	lsls	r2, r2, #24
    4efc:	2a00      	cmp	r2, #0
    4efe:	d119      	bne.n	4f34 <_malloc_r+0x26c>
    4f00:	45aa      	cmp	sl, r5
    4f02:	d317      	bcc.n	4f34 <_malloc_r+0x26c>
    4f04:	2201      	movs	r2, #1
    4f06:	1c11      	adds	r1, r2, #0
    4f08:	4329      	orrs	r1, r5
    4f0a:	4313      	orrs	r3, r2
    4f0c:	1965      	adds	r5, r4, r5
    4f0e:	6061      	str	r1, [r4, #4]
    4f10:	1c38      	adds	r0, r7, #0
    4f12:	60b5      	str	r5, [r6, #8]
    4f14:	606b      	str	r3, [r5, #4]
    4f16:	f000 fa23 	bl	5360 <__malloc_unlock>
    4f1a:	1c20      	adds	r0, r4, #0
    4f1c:	3008      	adds	r0, #8
    4f1e:	e705      	b.n	4d2c <_malloc_r+0x64>
    4f20:	1c22      	adds	r2, r4, #0
    4f22:	445a      	add	r2, fp
    4f24:	e738      	b.n	4d98 <_malloc_r+0xd0>
    4f26:	46c0      	nop			; (mov r8, r8)
    4f28:	000001f7 	.word	0x000001f7
    4f2c:	40000430 	.word	0x40000430
    4f30:	000001ff 	.word	0x000001ff
    4f34:	48a3      	ldr	r0, [pc, #652]	; (51c4 <_malloc_r+0x4fc>)
    4f36:	6803      	ldr	r3, [r0, #0]
    4f38:	49a3      	ldr	r1, [pc, #652]	; (51c8 <_malloc_r+0x500>)
    4f3a:	3310      	adds	r3, #16
    4f3c:	195b      	adds	r3, r3, r5
    4f3e:	469b      	mov	fp, r3
    4f40:	688b      	ldr	r3, [r1, #8]
    4f42:	4680      	mov	r8, r0
    4f44:	4689      	mov	r9, r1
    4f46:	3301      	adds	r3, #1
    4f48:	d005      	beq.n	4f56 <_malloc_r+0x28e>
    4f4a:	4aa0      	ldr	r2, [pc, #640]	; (51cc <_malloc_r+0x504>)
    4f4c:	1c13      	adds	r3, r2, #0
    4f4e:	445b      	add	r3, fp
    4f50:	0b1b      	lsrs	r3, r3, #12
    4f52:	031b      	lsls	r3, r3, #12
    4f54:	469b      	mov	fp, r3
    4f56:	1c38      	adds	r0, r7, #0
    4f58:	4659      	mov	r1, fp
    4f5a:	f7fc fe13 	bl	1b84 <_sbrk_r>
    4f5e:	9001      	str	r0, [sp, #4]
    4f60:	1c43      	adds	r3, r0, #1
    4f62:	d05c      	beq.n	501e <_malloc_r+0x356>
    4f64:	1c22      	adds	r2, r4, #0
    4f66:	4452      	add	r2, sl
    4f68:	4282      	cmp	r2, r0
    4f6a:	d900      	bls.n	4f6e <_malloc_r+0x2a6>
    4f6c:	e0a7      	b.n	50be <_malloc_r+0x3f6>
    4f6e:	4641      	mov	r1, r8
    4f70:	684b      	ldr	r3, [r1, #4]
    4f72:	445b      	add	r3, fp
    4f74:	604b      	str	r3, [r1, #4]
    4f76:	4282      	cmp	r2, r0
    4f78:	d100      	bne.n	4f7c <_malloc_r+0x2b4>
    4f7a:	e0f4      	b.n	5166 <_malloc_r+0x49e>
    4f7c:	4649      	mov	r1, r9
    4f7e:	6889      	ldr	r1, [r1, #8]
    4f80:	3101      	adds	r1, #1
    4f82:	d100      	bne.n	4f86 <_malloc_r+0x2be>
    4f84:	e0fa      	b.n	517c <_malloc_r+0x4b4>
    4f86:	18c3      	adds	r3, r0, r3
    4f88:	1a9a      	subs	r2, r3, r2
    4f8a:	4643      	mov	r3, r8
    4f8c:	605a      	str	r2, [r3, #4]
    4f8e:	2307      	movs	r3, #7
    4f90:	4003      	ands	r3, r0
    4f92:	d100      	bne.n	4f96 <_malloc_r+0x2ce>
    4f94:	e09f      	b.n	50d6 <_malloc_r+0x40e>
    4f96:	2208      	movs	r2, #8
    4f98:	1ad2      	subs	r2, r2, r3
    4f9a:	1880      	adds	r0, r0, r2
    4f9c:	9001      	str	r0, [sp, #4]
    4f9e:	2080      	movs	r0, #128	; 0x80
    4fa0:	0140      	lsls	r0, r0, #5
    4fa2:	1812      	adds	r2, r2, r0
    4fa4:	9901      	ldr	r1, [sp, #4]
    4fa6:	1c0b      	adds	r3, r1, #0
    4fa8:	445b      	add	r3, fp
    4faa:	051b      	lsls	r3, r3, #20
    4fac:	0d1b      	lsrs	r3, r3, #20
    4fae:	1ad3      	subs	r3, r2, r3
    4fb0:	1c38      	adds	r0, r7, #0
    4fb2:	1c19      	adds	r1, r3, #0
    4fb4:	4699      	mov	r9, r3
    4fb6:	f7fc fde5 	bl	1b84 <_sbrk_r>
    4fba:	1c42      	adds	r2, r0, #1
    4fbc:	d100      	bne.n	4fc0 <_malloc_r+0x2f8>
    4fbe:	e0e8      	b.n	5192 <_malloc_r+0x4ca>
    4fc0:	9b01      	ldr	r3, [sp, #4]
    4fc2:	1ac0      	subs	r0, r0, r3
    4fc4:	4448      	add	r0, r9
    4fc6:	2301      	movs	r3, #1
    4fc8:	4318      	orrs	r0, r3
    4fca:	4642      	mov	r2, r8
    4fcc:	6853      	ldr	r3, [r2, #4]
    4fce:	9901      	ldr	r1, [sp, #4]
    4fd0:	444b      	add	r3, r9
    4fd2:	6053      	str	r3, [r2, #4]
    4fd4:	60b1      	str	r1, [r6, #8]
    4fd6:	6048      	str	r0, [r1, #4]
    4fd8:	42b4      	cmp	r4, r6
    4fda:	d015      	beq.n	5008 <_malloc_r+0x340>
    4fdc:	220f      	movs	r2, #15
    4fde:	4592      	cmp	sl, r2
    4fe0:	d800      	bhi.n	4fe4 <_malloc_r+0x31c>
    4fe2:	e094      	b.n	510e <_malloc_r+0x446>
    4fe4:	200c      	movs	r0, #12
    4fe6:	4240      	negs	r0, r0
    4fe8:	1c02      	adds	r2, r0, #0
    4fea:	2107      	movs	r1, #7
    4fec:	6860      	ldr	r0, [r4, #4]
    4fee:	4452      	add	r2, sl
    4ff0:	438a      	bics	r2, r1
    4ff2:	3906      	subs	r1, #6
    4ff4:	4001      	ands	r1, r0
    4ff6:	4311      	orrs	r1, r2
    4ff8:	6061      	str	r1, [r4, #4]
    4ffa:	2005      	movs	r0, #5
    4ffc:	18a1      	adds	r1, r4, r2
    4ffe:	6048      	str	r0, [r1, #4]
    5000:	6088      	str	r0, [r1, #8]
    5002:	2a0f      	cmp	r2, #15
    5004:	d900      	bls.n	5008 <_malloc_r+0x340>
    5006:	e0bc      	b.n	5182 <_malloc_r+0x4ba>
    5008:	4644      	mov	r4, r8
    500a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    500c:	4293      	cmp	r3, r2
    500e:	d900      	bls.n	5012 <_malloc_r+0x34a>
    5010:	62e3      	str	r3, [r4, #44]	; 0x2c
    5012:	4640      	mov	r0, r8
    5014:	6b02      	ldr	r2, [r0, #48]	; 0x30
    5016:	4293      	cmp	r3, r2
    5018:	d901      	bls.n	501e <_malloc_r+0x356>
    501a:	4641      	mov	r1, r8
    501c:	630b      	str	r3, [r1, #48]	; 0x30
    501e:	68b4      	ldr	r4, [r6, #8]
    5020:	6862      	ldr	r2, [r4, #4]
    5022:	2303      	movs	r3, #3
    5024:	439a      	bics	r2, r3
    5026:	4692      	mov	sl, r2
    5028:	4652      	mov	r2, sl
    502a:	1b53      	subs	r3, r2, r5
    502c:	2100      	movs	r1, #0
    502e:	0fd8      	lsrs	r0, r3, #31
    5030:	220f      	movs	r2, #15
    5032:	4688      	mov	r8, r1
    5034:	429a      	cmp	r2, r3
    5036:	4141      	adcs	r1, r0
    5038:	0609      	lsls	r1, r1, #24
    503a:	4541      	cmp	r1, r8
    503c:	d102      	bne.n	5044 <_malloc_r+0x37c>
    503e:	45aa      	cmp	sl, r5
    5040:	d300      	bcc.n	5044 <_malloc_r+0x37c>
    5042:	e75f      	b.n	4f04 <_malloc_r+0x23c>
    5044:	1c38      	adds	r0, r7, #0
    5046:	f000 f98b 	bl	5360 <__malloc_unlock>
    504a:	2000      	movs	r0, #0
    504c:	e66e      	b.n	4d2c <_malloc_r+0x64>
    504e:	2b14      	cmp	r3, #20
    5050:	d92c      	bls.n	50ac <_malloc_r+0x3e4>
    5052:	2b54      	cmp	r3, #84	; 0x54
    5054:	d836      	bhi.n	50c4 <_malloc_r+0x3fc>
    5056:	0b2b      	lsrs	r3, r5, #12
    5058:	336e      	adds	r3, #110	; 0x6e
    505a:	4699      	mov	r9, r3
    505c:	00d9      	lsls	r1, r3, #3
    505e:	e680      	b.n	4d62 <_malloc_r+0x9a>
    5060:	2001      	movs	r0, #1
    5062:	1962      	adds	r2, r4, r5
    5064:	4305      	orrs	r5, r0
    5066:	6065      	str	r5, [r4, #4]
    5068:	e704      	b.n	4e74 <_malloc_r+0x1ac>
    506a:	2401      	movs	r4, #1
    506c:	44a2      	add	sl, r4
    506e:	4652      	mov	r2, sl
    5070:	4643      	mov	r3, r8
    5072:	421a      	tst	r2, r3
    5074:	d051      	beq.n	511a <_malloc_r+0x452>
    5076:	2408      	movs	r4, #8
    5078:	44a4      	add	ip, r4
    507a:	e6e1      	b.n	4e40 <_malloc_r+0x178>
    507c:	1c23      	adds	r3, r4, #0
    507e:	6964      	ldr	r4, [r4, #20]
    5080:	3202      	adds	r2, #2
    5082:	3308      	adds	r3, #8
    5084:	4691      	mov	r9, r2
    5086:	42a3      	cmp	r3, r4
    5088:	d100      	bne.n	508c <_malloc_r+0x3c4>
    508a:	e698      	b.n	4dbe <_malloc_r+0xf6>
    508c:	e63d      	b.n	4d0a <_malloc_r+0x42>
    508e:	18a2      	adds	r2, r4, r2
    5090:	6853      	ldr	r3, [r2, #4]
    5092:	2101      	movs	r1, #1
    5094:	430b      	orrs	r3, r1
    5096:	6053      	str	r3, [r2, #4]
    5098:	68e3      	ldr	r3, [r4, #12]
    509a:	68a2      	ldr	r2, [r4, #8]
    509c:	1c38      	adds	r0, r7, #0
    509e:	60d3      	str	r3, [r2, #12]
    50a0:	609a      	str	r2, [r3, #8]
    50a2:	f000 f95d 	bl	5360 <__malloc_unlock>
    50a6:	1c20      	adds	r0, r4, #0
    50a8:	3008      	adds	r0, #8
    50aa:	e63f      	b.n	4d2c <_malloc_r+0x64>
    50ac:	335b      	adds	r3, #91	; 0x5b
    50ae:	4699      	mov	r9, r3
    50b0:	00d9      	lsls	r1, r3, #3
    50b2:	e656      	b.n	4d62 <_malloc_r+0x9a>
    50b4:	2b14      	cmp	r3, #20
    50b6:	d823      	bhi.n	5100 <_malloc_r+0x438>
    50b8:	335b      	adds	r3, #91	; 0x5b
    50ba:	4698      	mov	r8, r3
    50bc:	e6ee      	b.n	4e9c <_malloc_r+0x1d4>
    50be:	42b4      	cmp	r4, r6
    50c0:	d1ad      	bne.n	501e <_malloc_r+0x356>
    50c2:	e754      	b.n	4f6e <_malloc_r+0x2a6>
    50c4:	22aa      	movs	r2, #170	; 0xaa
    50c6:	0052      	lsls	r2, r2, #1
    50c8:	4293      	cmp	r3, r2
    50ca:	d811      	bhi.n	50f0 <_malloc_r+0x428>
    50cc:	0beb      	lsrs	r3, r5, #15
    50ce:	3377      	adds	r3, #119	; 0x77
    50d0:	4699      	mov	r9, r3
    50d2:	00d9      	lsls	r1, r3, #3
    50d4:	e645      	b.n	4d62 <_malloc_r+0x9a>
    50d6:	2280      	movs	r2, #128	; 0x80
    50d8:	0152      	lsls	r2, r2, #5
    50da:	e763      	b.n	4fa4 <_malloc_r+0x2dc>
    50dc:	4642      	mov	r2, r8
    50de:	1090      	asrs	r0, r2, #2
    50e0:	2201      	movs	r2, #1
    50e2:	4082      	lsls	r2, r0
    50e4:	1c10      	adds	r0, r2, #0
    50e6:	6872      	ldr	r2, [r6, #4]
    50e8:	4302      	orrs	r2, r0
    50ea:	6072      	str	r2, [r6, #4]
    50ec:	1c1a      	adds	r2, r3, #0
    50ee:	e6ee      	b.n	4ece <_malloc_r+0x206>
    50f0:	4a37      	ldr	r2, [pc, #220]	; (51d0 <_malloc_r+0x508>)
    50f2:	4293      	cmp	r3, r2
    50f4:	d829      	bhi.n	514a <_malloc_r+0x482>
    50f6:	0cab      	lsrs	r3, r5, #18
    50f8:	337c      	adds	r3, #124	; 0x7c
    50fa:	4699      	mov	r9, r3
    50fc:	00d9      	lsls	r1, r3, #3
    50fe:	e630      	b.n	4d62 <_malloc_r+0x9a>
    5100:	2b54      	cmp	r3, #84	; 0x54
    5102:	d827      	bhi.n	5154 <_malloc_r+0x48c>
    5104:	465b      	mov	r3, fp
    5106:	0b18      	lsrs	r0, r3, #12
    5108:	306e      	adds	r0, #110	; 0x6e
    510a:	4680      	mov	r8, r0
    510c:	e6c6      	b.n	4e9c <_malloc_r+0x1d4>
    510e:	2301      	movs	r3, #1
    5110:	604b      	str	r3, [r1, #4]
    5112:	3b01      	subs	r3, #1
    5114:	1c0c      	adds	r4, r1, #0
    5116:	469a      	mov	sl, r3
    5118:	e786      	b.n	5028 <_malloc_r+0x360>
    511a:	465b      	mov	r3, fp
    511c:	464c      	mov	r4, r9
    511e:	e000      	b.n	5122 <_malloc_r+0x45a>
    5120:	3c01      	subs	r4, #1
    5122:	4642      	mov	r2, r8
    5124:	4214      	tst	r4, r2
    5126:	d044      	beq.n	51b2 <_malloc_r+0x4ea>
    5128:	1c1a      	adds	r2, r3, #0
    512a:	681b      	ldr	r3, [r3, #0]
    512c:	3a08      	subs	r2, #8
    512e:	4293      	cmp	r3, r2
    5130:	d0f6      	beq.n	5120 <_malloc_r+0x458>
    5132:	6873      	ldr	r3, [r6, #4]
    5134:	0040      	lsls	r0, r0, #1
    5136:	4298      	cmp	r0, r3
    5138:	d900      	bls.n	513c <_malloc_r+0x474>
    513a:	e6d3      	b.n	4ee4 <_malloc_r+0x21c>
    513c:	2800      	cmp	r0, #0
    513e:	d100      	bne.n	5142 <_malloc_r+0x47a>
    5140:	e6d0      	b.n	4ee4 <_malloc_r+0x21c>
    5142:	4203      	tst	r3, r0
    5144:	d039      	beq.n	51ba <_malloc_r+0x4f2>
    5146:	46d1      	mov	r9, sl
    5148:	e674      	b.n	4e34 <_malloc_r+0x16c>
    514a:	21fc      	movs	r1, #252	; 0xfc
    514c:	227e      	movs	r2, #126	; 0x7e
    514e:	0089      	lsls	r1, r1, #2
    5150:	4691      	mov	r9, r2
    5152:	e606      	b.n	4d62 <_malloc_r+0x9a>
    5154:	20aa      	movs	r0, #170	; 0xaa
    5156:	0040      	lsls	r0, r0, #1
    5158:	4283      	cmp	r3, r0
    515a:	d81e      	bhi.n	519a <_malloc_r+0x4d2>
    515c:	465a      	mov	r2, fp
    515e:	0bd0      	lsrs	r0, r2, #15
    5160:	3077      	adds	r0, #119	; 0x77
    5162:	4680      	mov	r8, r0
    5164:	e69a      	b.n	4e9c <_malloc_r+0x1d4>
    5166:	0511      	lsls	r1, r2, #20
    5168:	2900      	cmp	r1, #0
    516a:	d000      	beq.n	516e <_malloc_r+0x4a6>
    516c:	e706      	b.n	4f7c <_malloc_r+0x2b4>
    516e:	4659      	mov	r1, fp
    5170:	68b2      	ldr	r2, [r6, #8]
    5172:	4451      	add	r1, sl
    5174:	2001      	movs	r0, #1
    5176:	4301      	orrs	r1, r0
    5178:	6051      	str	r1, [r2, #4]
    517a:	e745      	b.n	5008 <_malloc_r+0x340>
    517c:	464a      	mov	r2, r9
    517e:	6090      	str	r0, [r2, #8]
    5180:	e705      	b.n	4f8e <_malloc_r+0x2c6>
    5182:	1c21      	adds	r1, r4, #0
    5184:	3108      	adds	r1, #8
    5186:	1c38      	adds	r0, r7, #0
    5188:	f7ff fc54 	bl	4a34 <_free_r>
    518c:	4641      	mov	r1, r8
    518e:	684b      	ldr	r3, [r1, #4]
    5190:	e73a      	b.n	5008 <_malloc_r+0x340>
    5192:	2100      	movs	r1, #0
    5194:	2001      	movs	r0, #1
    5196:	4689      	mov	r9, r1
    5198:	e717      	b.n	4fca <_malloc_r+0x302>
    519a:	4a0d      	ldr	r2, [pc, #52]	; (51d0 <_malloc_r+0x508>)
    519c:	207e      	movs	r0, #126	; 0x7e
    519e:	4694      	mov	ip, r2
    51a0:	4680      	mov	r8, r0
    51a2:	4563      	cmp	r3, ip
    51a4:	d900      	bls.n	51a8 <_malloc_r+0x4e0>
    51a6:	e679      	b.n	4e9c <_malloc_r+0x1d4>
    51a8:	465b      	mov	r3, fp
    51aa:	0c98      	lsrs	r0, r3, #18
    51ac:	307c      	adds	r0, #124	; 0x7c
    51ae:	4680      	mov	r8, r0
    51b0:	e674      	b.n	4e9c <_malloc_r+0x1d4>
    51b2:	6873      	ldr	r3, [r6, #4]
    51b4:	4383      	bics	r3, r0
    51b6:	6073      	str	r3, [r6, #4]
    51b8:	e7bb      	b.n	5132 <_malloc_r+0x46a>
    51ba:	2404      	movs	r4, #4
    51bc:	44a2      	add	sl, r4
    51be:	0040      	lsls	r0, r0, #1
    51c0:	e7bf      	b.n	5142 <_malloc_r+0x47a>
    51c2:	46c0      	nop			; (mov r8, r8)
    51c4:	400008c8 	.word	0x400008c8
    51c8:	40000830 	.word	0x40000830
    51cc:	00000fff 	.word	0x00000fff
    51d0:	00000554 	.word	0x00000554

000051d4 <memcpy>:
    51d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51d6:	464f      	mov	r7, r9
    51d8:	4646      	mov	r6, r8
    51da:	b4c0      	push	{r6, r7}
    51dc:	2a03      	cmp	r2, #3
    51de:	d80d      	bhi.n	51fc <memcpy+0x28>
    51e0:	2a00      	cmp	r2, #0
    51e2:	d005      	beq.n	51f0 <memcpy+0x1c>
    51e4:	2300      	movs	r3, #0
    51e6:	5ccc      	ldrb	r4, [r1, r3]
    51e8:	54c4      	strb	r4, [r0, r3]
    51ea:	3301      	adds	r3, #1
    51ec:	4293      	cmp	r3, r2
    51ee:	d1fa      	bne.n	51e6 <memcpy+0x12>
    51f0:	bc0c      	pop	{r2, r3}
    51f2:	4690      	mov	r8, r2
    51f4:	4699      	mov	r9, r3
    51f6:	bcf0      	pop	{r4, r5, r6, r7}
    51f8:	bc02      	pop	{r1}
    51fa:	4708      	bx	r1
    51fc:	1882      	adds	r2, r0, r2
    51fe:	1c03      	adds	r3, r0, #0
    5200:	2503      	movs	r5, #3
    5202:	e003      	b.n	520c <memcpy+0x38>
    5204:	780c      	ldrb	r4, [r1, #0]
    5206:	3101      	adds	r1, #1
    5208:	701c      	strb	r4, [r3, #0]
    520a:	3301      	adds	r3, #1
    520c:	2403      	movs	r4, #3
    520e:	422b      	tst	r3, r5
    5210:	d1f8      	bne.n	5204 <memcpy+0x30>
    5212:	400c      	ands	r4, r1
    5214:	d041      	beq.n	529a <memcpy+0xc6>
    5216:	00e7      	lsls	r7, r4, #3
    5218:	46bc      	mov	ip, r7
    521a:	2704      	movs	r7, #4
    521c:	4266      	negs	r6, r4
    521e:	1b3c      	subs	r4, r7, r4
    5220:	00e4      	lsls	r4, r4, #3
    5222:	598d      	ldr	r5, [r1, r6]
    5224:	46a1      	mov	r9, r4
    5226:	e00b      	b.n	5240 <memcpy+0x6c>
    5228:	3104      	adds	r1, #4
    522a:	598f      	ldr	r7, [r1, r6]
    522c:	4664      	mov	r4, ip
    522e:	40e5      	lsrs	r5, r4
    5230:	46a8      	mov	r8, r5
    5232:	464c      	mov	r4, r9
    5234:	1c3d      	adds	r5, r7, #0
    5236:	40a5      	lsls	r5, r4
    5238:	4644      	mov	r4, r8
    523a:	4325      	orrs	r5, r4
    523c:	c320      	stmia	r3!, {r5}
    523e:	1c3d      	adds	r5, r7, #0
    5240:	1ad7      	subs	r7, r2, r3
    5242:	2f03      	cmp	r7, #3
    5244:	dcf0      	bgt.n	5228 <memcpy+0x54>
    5246:	e003      	b.n	5250 <memcpy+0x7c>
    5248:	780c      	ldrb	r4, [r1, #0]
    524a:	3101      	adds	r1, #1
    524c:	701c      	strb	r4, [r3, #0]
    524e:	3301      	adds	r3, #1
    5250:	4293      	cmp	r3, r2
    5252:	d3f9      	bcc.n	5248 <memcpy+0x74>
    5254:	e7cc      	b.n	51f0 <memcpy+0x1c>
    5256:	680c      	ldr	r4, [r1, #0]
    5258:	601c      	str	r4, [r3, #0]
    525a:	684c      	ldr	r4, [r1, #4]
    525c:	605c      	str	r4, [r3, #4]
    525e:	688c      	ldr	r4, [r1, #8]
    5260:	609c      	str	r4, [r3, #8]
    5262:	68cc      	ldr	r4, [r1, #12]
    5264:	60dc      	str	r4, [r3, #12]
    5266:	690c      	ldr	r4, [r1, #16]
    5268:	611c      	str	r4, [r3, #16]
    526a:	694c      	ldr	r4, [r1, #20]
    526c:	615c      	str	r4, [r3, #20]
    526e:	698c      	ldr	r4, [r1, #24]
    5270:	619c      	str	r4, [r3, #24]
    5272:	69cc      	ldr	r4, [r1, #28]
    5274:	61dc      	str	r4, [r3, #28]
    5276:	6a0c      	ldr	r4, [r1, #32]
    5278:	621c      	str	r4, [r3, #32]
    527a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    527c:	625c      	str	r4, [r3, #36]	; 0x24
    527e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    5280:	629c      	str	r4, [r3, #40]	; 0x28
    5282:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    5284:	62dc      	str	r4, [r3, #44]	; 0x2c
    5286:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    5288:	631c      	str	r4, [r3, #48]	; 0x30
    528a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    528c:	635c      	str	r4, [r3, #52]	; 0x34
    528e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    5290:	639c      	str	r4, [r3, #56]	; 0x38
    5292:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    5294:	3140      	adds	r1, #64	; 0x40
    5296:	63dc      	str	r4, [r3, #60]	; 0x3c
    5298:	3340      	adds	r3, #64	; 0x40
    529a:	1ad4      	subs	r4, r2, r3
    529c:	2c3f      	cmp	r4, #63	; 0x3f
    529e:	dcda      	bgt.n	5256 <memcpy+0x82>
    52a0:	e00a      	b.n	52b8 <memcpy+0xe4>
    52a2:	680c      	ldr	r4, [r1, #0]
    52a4:	601c      	str	r4, [r3, #0]
    52a6:	684c      	ldr	r4, [r1, #4]
    52a8:	605c      	str	r4, [r3, #4]
    52aa:	688c      	ldr	r4, [r1, #8]
    52ac:	609c      	str	r4, [r3, #8]
    52ae:	68cc      	ldr	r4, [r1, #12]
    52b0:	60dc      	str	r4, [r3, #12]
    52b2:	3310      	adds	r3, #16
    52b4:	3110      	adds	r1, #16
    52b6:	1ad4      	subs	r4, r2, r3
    52b8:	2c0f      	cmp	r4, #15
    52ba:	dcf2      	bgt.n	52a2 <memcpy+0xce>
    52bc:	1c0d      	adds	r5, r1, #0
    52be:	e003      	b.n	52c8 <memcpy+0xf4>
    52c0:	6809      	ldr	r1, [r1, #0]
    52c2:	c302      	stmia	r3!, {r1}
    52c4:	3504      	adds	r5, #4
    52c6:	1ad4      	subs	r4, r2, r3
    52c8:	1c29      	adds	r1, r5, #0
    52ca:	2c03      	cmp	r4, #3
    52cc:	dcf8      	bgt.n	52c0 <memcpy+0xec>
    52ce:	e7bf      	b.n	5250 <memcpy+0x7c>

000052d0 <memset>:
    52d0:	b530      	push	{r4, r5, lr}
    52d2:	0609      	lsls	r1, r1, #24
    52d4:	0e09      	lsrs	r1, r1, #24
    52d6:	2a03      	cmp	r2, #3
    52d8:	d80a      	bhi.n	52f0 <memset+0x20>
    52da:	2a00      	cmp	r2, #0
    52dc:	d005      	beq.n	52ea <memset+0x1a>
    52de:	1c03      	adds	r3, r0, #0
    52e0:	1812      	adds	r2, r2, r0
    52e2:	7019      	strb	r1, [r3, #0]
    52e4:	3301      	adds	r3, #1
    52e6:	4293      	cmp	r3, r2
    52e8:	d1fb      	bne.n	52e2 <memset+0x12>
    52ea:	bc30      	pop	{r4, r5}
    52ec:	bc02      	pop	{r1}
    52ee:	4708      	bx	r1
    52f0:	1882      	adds	r2, r0, r2
    52f2:	1c03      	adds	r3, r0, #0
    52f4:	2403      	movs	r4, #3
    52f6:	e001      	b.n	52fc <memset+0x2c>
    52f8:	7019      	strb	r1, [r3, #0]
    52fa:	3301      	adds	r3, #1
    52fc:	4223      	tst	r3, r4
    52fe:	d1fb      	bne.n	52f8 <memset+0x28>
    5300:	020c      	lsls	r4, r1, #8
    5302:	1864      	adds	r4, r4, r1
    5304:	0425      	lsls	r5, r4, #16
    5306:	1964      	adds	r4, r4, r5
    5308:	e010      	b.n	532c <memset+0x5c>
    530a:	601c      	str	r4, [r3, #0]
    530c:	605c      	str	r4, [r3, #4]
    530e:	609c      	str	r4, [r3, #8]
    5310:	60dc      	str	r4, [r3, #12]
    5312:	611c      	str	r4, [r3, #16]
    5314:	615c      	str	r4, [r3, #20]
    5316:	619c      	str	r4, [r3, #24]
    5318:	61dc      	str	r4, [r3, #28]
    531a:	621c      	str	r4, [r3, #32]
    531c:	625c      	str	r4, [r3, #36]	; 0x24
    531e:	629c      	str	r4, [r3, #40]	; 0x28
    5320:	62dc      	str	r4, [r3, #44]	; 0x2c
    5322:	631c      	str	r4, [r3, #48]	; 0x30
    5324:	635c      	str	r4, [r3, #52]	; 0x34
    5326:	639c      	str	r4, [r3, #56]	; 0x38
    5328:	63dc      	str	r4, [r3, #60]	; 0x3c
    532a:	3340      	adds	r3, #64	; 0x40
    532c:	1ad5      	subs	r5, r2, r3
    532e:	2d3f      	cmp	r5, #63	; 0x3f
    5330:	dceb      	bgt.n	530a <memset+0x3a>
    5332:	e005      	b.n	5340 <memset+0x70>
    5334:	601c      	str	r4, [r3, #0]
    5336:	605c      	str	r4, [r3, #4]
    5338:	609c      	str	r4, [r3, #8]
    533a:	60dc      	str	r4, [r3, #12]
    533c:	3310      	adds	r3, #16
    533e:	1ad5      	subs	r5, r2, r3
    5340:	2d0f      	cmp	r5, #15
    5342:	dcf7      	bgt.n	5334 <memset+0x64>
    5344:	e001      	b.n	534a <memset+0x7a>
    5346:	c310      	stmia	r3!, {r4}
    5348:	1ad5      	subs	r5, r2, r3
    534a:	2d03      	cmp	r5, #3
    534c:	dcfb      	bgt.n	5346 <memset+0x76>
    534e:	e001      	b.n	5354 <memset+0x84>
    5350:	7019      	strb	r1, [r3, #0]
    5352:	3301      	adds	r3, #1
    5354:	4293      	cmp	r3, r2
    5356:	d3fb      	bcc.n	5350 <memset+0x80>
    5358:	e7c7      	b.n	52ea <memset+0x1a>
    535a:	46c0      	nop			; (mov r8, r8)

0000535c <__malloc_lock>:
    535c:	4770      	bx	lr
    535e:	46c0      	nop			; (mov r8, r8)

00005360 <__malloc_unlock>:
    5360:	4770      	bx	lr
    5362:	46c0      	nop			; (mov r8, r8)

00005364 <_printf_r>:
    5364:	b40e      	push	{r1, r2, r3}
    5366:	b500      	push	{lr}
    5368:	b082      	sub	sp, #8
    536a:	ab03      	add	r3, sp, #12
    536c:	cb04      	ldmia	r3!, {r2}
    536e:	6881      	ldr	r1, [r0, #8]
    5370:	9301      	str	r3, [sp, #4]
    5372:	f001 fc1d 	bl	6bb0 <_vfprintf_r>
    5376:	b002      	add	sp, #8
    5378:	bc08      	pop	{r3}
    537a:	b003      	add	sp, #12
    537c:	4718      	bx	r3
    537e:	46c0      	nop			; (mov r8, r8)

00005380 <printf>:
    5380:	b40f      	push	{r0, r1, r2, r3}
    5382:	b500      	push	{lr}
    5384:	4906      	ldr	r1, [pc, #24]	; (53a0 <printf+0x20>)
    5386:	b083      	sub	sp, #12
    5388:	ab04      	add	r3, sp, #16
    538a:	6808      	ldr	r0, [r1, #0]
    538c:	cb04      	ldmia	r3!, {r2}
    538e:	6881      	ldr	r1, [r0, #8]
    5390:	9301      	str	r3, [sp, #4]
    5392:	f001 fc0d 	bl	6bb0 <_vfprintf_r>
    5396:	b003      	add	sp, #12
    5398:	bc08      	pop	{r3}
    539a:	b004      	add	sp, #16
    539c:	4718      	bx	r3
    539e:	46c0      	nop			; (mov r8, r8)
    53a0:	40000000 	.word	0x40000000

000053a4 <_putchar_r>:
    53a4:	b508      	push	{r3, lr}
    53a6:	6882      	ldr	r2, [r0, #8]
    53a8:	f005 f946 	bl	a638 <_putc_r>
    53ac:	bc08      	pop	{r3}
    53ae:	bc02      	pop	{r1}
    53b0:	4708      	bx	r1
    53b2:	46c0      	nop			; (mov r8, r8)

000053b4 <putchar>:
    53b4:	b508      	push	{r3, lr}
    53b6:	4b04      	ldr	r3, [pc, #16]	; (53c8 <putchar+0x14>)
    53b8:	1c01      	adds	r1, r0, #0
    53ba:	6818      	ldr	r0, [r3, #0]
    53bc:	6882      	ldr	r2, [r0, #8]
    53be:	f005 f93b 	bl	a638 <_putc_r>
    53c2:	bc08      	pop	{r3}
    53c4:	bc02      	pop	{r1}
    53c6:	4708      	bx	r1
    53c8:	40000000 	.word	0x40000000

000053cc <_puts_r>:
    53cc:	b530      	push	{r4, r5, lr}
    53ce:	b089      	sub	sp, #36	; 0x24
    53d0:	1c04      	adds	r4, r0, #0
    53d2:	1c08      	adds	r0, r1, #0
    53d4:	1c0d      	adds	r5, r1, #0
    53d6:	f000 f8ff 	bl	55d8 <strlen>
    53da:	ab01      	add	r3, sp, #4
    53dc:	9305      	str	r3, [sp, #20]
    53de:	2302      	movs	r3, #2
    53e0:	4a12      	ldr	r2, [pc, #72]	; (542c <_puts_r+0x60>)
    53e2:	9306      	str	r3, [sp, #24]
    53e4:	4b12      	ldr	r3, [pc, #72]	; (5430 <_puts_r+0x64>)
    53e6:	9203      	str	r2, [sp, #12]
    53e8:	681b      	ldr	r3, [r3, #0]
    53ea:	2201      	movs	r2, #1
    53ec:	9002      	str	r0, [sp, #8]
    53ee:	1880      	adds	r0, r0, r2
    53f0:	9501      	str	r5, [sp, #4]
    53f2:	9204      	str	r2, [sp, #16]
    53f4:	9007      	str	r0, [sp, #28]
    53f6:	689b      	ldr	r3, [r3, #8]
    53f8:	2180      	movs	r1, #128	; 0x80
    53fa:	899a      	ldrh	r2, [r3, #12]
    53fc:	0189      	lsls	r1, r1, #6
    53fe:	420a      	tst	r2, r1
    5400:	d105      	bne.n	540e <_puts_r+0x42>
    5402:	430a      	orrs	r2, r1
    5404:	819a      	strh	r2, [r3, #12]
    5406:	6e59      	ldr	r1, [r3, #100]	; 0x64
    5408:	4a0a      	ldr	r2, [pc, #40]	; (5434 <_puts_r+0x68>)
    540a:	400a      	ands	r2, r1
    540c:	665a      	str	r2, [r3, #100]	; 0x64
    540e:	aa05      	add	r2, sp, #20
    5410:	68a1      	ldr	r1, [r4, #8]
    5412:	1c20      	adds	r0, r4, #0
    5414:	f004 f934 	bl	9680 <__sfvwrite_r>
    5418:	1e43      	subs	r3, r0, #1
    541a:	4198      	sbcs	r0, r3
    541c:	b009      	add	sp, #36	; 0x24
    541e:	230a      	movs	r3, #10
    5420:	4240      	negs	r0, r0
    5422:	4318      	orrs	r0, r3
    5424:	bc30      	pop	{r4, r5}
    5426:	bc02      	pop	{r1}
    5428:	4708      	bx	r1
    542a:	46c0      	nop			; (mov r8, r8)
    542c:	0000e8e4 	.word	0x0000e8e4
    5430:	40000000 	.word	0x40000000
    5434:	ffffdfff 	.word	0xffffdfff

00005438 <puts>:
    5438:	b508      	push	{r3, lr}
    543a:	4b04      	ldr	r3, [pc, #16]	; (544c <puts+0x14>)
    543c:	1c01      	adds	r1, r0, #0
    543e:	6818      	ldr	r0, [r3, #0]
    5440:	f7ff ffc4 	bl	53cc <_puts_r>
    5444:	bc08      	pop	{r3}
    5446:	bc02      	pop	{r1}
    5448:	4708      	bx	r1
    544a:	46c0      	nop			; (mov r8, r8)
    544c:	40000000 	.word	0x40000000

00005450 <_sprintf_r>:
    5450:	b40c      	push	{r2, r3}
    5452:	b530      	push	{r4, r5, lr}
    5454:	b09d      	sub	sp, #116	; 0x74
    5456:	1c0c      	adds	r4, r1, #0
    5458:	a901      	add	r1, sp, #4
    545a:	9401      	str	r4, [sp, #4]
    545c:	610c      	str	r4, [r1, #16]
    545e:	4c0b      	ldr	r4, [pc, #44]	; (548c <_sprintf_r+0x3c>)
    5460:	ab20      	add	r3, sp, #128	; 0x80
    5462:	608c      	str	r4, [r1, #8]
    5464:	614c      	str	r4, [r1, #20]
    5466:	2582      	movs	r5, #130	; 0x82
    5468:	2401      	movs	r4, #1
    546a:	cb04      	ldmia	r3!, {r2}
    546c:	00ad      	lsls	r5, r5, #2
    546e:	4264      	negs	r4, r4
    5470:	818d      	strh	r5, [r1, #12]
    5472:	81cc      	strh	r4, [r1, #14]
    5474:	931b      	str	r3, [sp, #108]	; 0x6c
    5476:	f000 f8ef 	bl	5658 <_svfprintf_r>
    547a:	9b01      	ldr	r3, [sp, #4]
    547c:	2200      	movs	r2, #0
    547e:	b01d      	add	sp, #116	; 0x74
    5480:	701a      	strb	r2, [r3, #0]
    5482:	bc30      	pop	{r4, r5}
    5484:	bc08      	pop	{r3}
    5486:	b002      	add	sp, #8
    5488:	4718      	bx	r3
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	7fffffff 	.word	0x7fffffff

00005490 <sprintf>:
    5490:	b40e      	push	{r1, r2, r3}
    5492:	b510      	push	{r4, lr}
    5494:	b09d      	sub	sp, #116	; 0x74
    5496:	a901      	add	r1, sp, #4
    5498:	9001      	str	r0, [sp, #4]
    549a:	6108      	str	r0, [r1, #16]
    549c:	480b      	ldr	r0, [pc, #44]	; (54cc <sprintf+0x3c>)
    549e:	6088      	str	r0, [r1, #8]
    54a0:	6148      	str	r0, [r1, #20]
    54a2:	2001      	movs	r0, #1
    54a4:	4240      	negs	r0, r0
    54a6:	ab1f      	add	r3, sp, #124	; 0x7c
    54a8:	81c8      	strh	r0, [r1, #14]
    54aa:	2482      	movs	r4, #130	; 0x82
    54ac:	4808      	ldr	r0, [pc, #32]	; (54d0 <sprintf+0x40>)
    54ae:	cb04      	ldmia	r3!, {r2}
    54b0:	00a4      	lsls	r4, r4, #2
    54b2:	818c      	strh	r4, [r1, #12]
    54b4:	6800      	ldr	r0, [r0, #0]
    54b6:	931b      	str	r3, [sp, #108]	; 0x6c
    54b8:	f000 f8ce 	bl	5658 <_svfprintf_r>
    54bc:	9b01      	ldr	r3, [sp, #4]
    54be:	2200      	movs	r2, #0
    54c0:	b01d      	add	sp, #116	; 0x74
    54c2:	701a      	strb	r2, [r3, #0]
    54c4:	bc10      	pop	{r4}
    54c6:	bc08      	pop	{r3}
    54c8:	b003      	add	sp, #12
    54ca:	4718      	bx	r3
    54cc:	7fffffff 	.word	0x7fffffff
    54d0:	40000000 	.word	0x40000000

000054d4 <__sread>:
    54d4:	b538      	push	{r3, r4, r5, lr}
    54d6:	1c0c      	adds	r4, r1, #0
    54d8:	250e      	movs	r5, #14
    54da:	5f49      	ldrsh	r1, [r1, r5]
    54dc:	f7fc fad6 	bl	1a8c <_read_r>
    54e0:	2800      	cmp	r0, #0
    54e2:	db05      	blt.n	54f0 <__sread+0x1c>
    54e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    54e6:	181b      	adds	r3, r3, r0
    54e8:	6523      	str	r3, [r4, #80]	; 0x50
    54ea:	bc38      	pop	{r3, r4, r5}
    54ec:	bc02      	pop	{r1}
    54ee:	4708      	bx	r1
    54f0:	89a2      	ldrh	r2, [r4, #12]
    54f2:	4b02      	ldr	r3, [pc, #8]	; (54fc <__sread+0x28>)
    54f4:	4013      	ands	r3, r2
    54f6:	81a3      	strh	r3, [r4, #12]
    54f8:	e7f7      	b.n	54ea <__sread+0x16>
    54fa:	46c0      	nop			; (mov r8, r8)
    54fc:	ffffefff 	.word	0xffffefff

00005500 <__seofread>:
    5500:	2000      	movs	r0, #0
    5502:	4770      	bx	lr

00005504 <__swrite>:
    5504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5506:	1c1f      	adds	r7, r3, #0
    5508:	898b      	ldrh	r3, [r1, #12]
    550a:	1c05      	adds	r5, r0, #0
    550c:	1c0c      	adds	r4, r1, #0
    550e:	1c16      	adds	r6, r2, #0
    5510:	05da      	lsls	r2, r3, #23
    5512:	d506      	bpl.n	5522 <__swrite+0x1e>
    5514:	230e      	movs	r3, #14
    5516:	5ec9      	ldrsh	r1, [r1, r3]
    5518:	2200      	movs	r2, #0
    551a:	2302      	movs	r3, #2
    551c:	f7fc fb22 	bl	1b64 <_lseek_r>
    5520:	89a3      	ldrh	r3, [r4, #12]
    5522:	4a06      	ldr	r2, [pc, #24]	; (553c <__swrite+0x38>)
    5524:	4013      	ands	r3, r2
    5526:	81a3      	strh	r3, [r4, #12]
    5528:	220e      	movs	r2, #14
    552a:	5ea1      	ldrsh	r1, [r4, r2]
    552c:	1c28      	adds	r0, r5, #0
    552e:	1c32      	adds	r2, r6, #0
    5530:	1c3b      	adds	r3, r7, #0
    5532:	f7fc facf 	bl	1ad4 <_write_r>
    5536:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5538:	bc02      	pop	{r1}
    553a:	4708      	bx	r1
    553c:	ffffefff 	.word	0xffffefff

00005540 <__sseek>:
    5540:	b538      	push	{r3, r4, r5, lr}
    5542:	1c0c      	adds	r4, r1, #0
    5544:	250e      	movs	r5, #14
    5546:	5f49      	ldrsh	r1, [r1, r5]
    5548:	f7fc fb0c 	bl	1b64 <_lseek_r>
    554c:	1c43      	adds	r3, r0, #1
    554e:	d008      	beq.n	5562 <__sseek+0x22>
    5550:	89a2      	ldrh	r2, [r4, #12]
    5552:	2380      	movs	r3, #128	; 0x80
    5554:	015b      	lsls	r3, r3, #5
    5556:	4313      	orrs	r3, r2
    5558:	81a3      	strh	r3, [r4, #12]
    555a:	6520      	str	r0, [r4, #80]	; 0x50
    555c:	bc38      	pop	{r3, r4, r5}
    555e:	bc02      	pop	{r1}
    5560:	4708      	bx	r1
    5562:	89a2      	ldrh	r2, [r4, #12]
    5564:	4b01      	ldr	r3, [pc, #4]	; (556c <__sseek+0x2c>)
    5566:	4013      	ands	r3, r2
    5568:	81a3      	strh	r3, [r4, #12]
    556a:	e7f7      	b.n	555c <__sseek+0x1c>
    556c:	ffffefff 	.word	0xffffefff

00005570 <__sclose>:
    5570:	b508      	push	{r3, lr}
    5572:	230e      	movs	r3, #14
    5574:	5ec9      	ldrsh	r1, [r1, r3]
    5576:	f7fc faf3 	bl	1b60 <_close_r>
    557a:	bc08      	pop	{r3}
    557c:	bc02      	pop	{r1}
    557e:	4708      	bx	r1

00005580 <strcat>:
    5580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5582:	1c04      	adds	r4, r0, #0
    5584:	07a3      	lsls	r3, r4, #30
    5586:	d112      	bne.n	55ae <strcat+0x2e>
    5588:	6823      	ldr	r3, [r4, #0]
    558a:	4d0d      	ldr	r5, [pc, #52]	; (55c0 <strcat+0x40>)
    558c:	4e0d      	ldr	r6, [pc, #52]	; (55c4 <strcat+0x44>)
    558e:	195a      	adds	r2, r3, r5
    5590:	439a      	bics	r2, r3
    5592:	4232      	tst	r2, r6
    5594:	d10b      	bne.n	55ae <strcat+0x2e>
    5596:	1d23      	adds	r3, r4, #4
    5598:	1c18      	adds	r0, r3, #0
    559a:	4f09      	ldr	r7, [pc, #36]	; (55c0 <strcat+0x40>)
    559c:	cb04      	ldmia	r3!, {r2}
    559e:	19d5      	adds	r5, r2, r7
    55a0:	4395      	bics	r5, r2
    55a2:	4235      	tst	r5, r6
    55a4:	d0f8      	beq.n	5598 <strcat+0x18>
    55a6:	7803      	ldrb	r3, [r0, #0]
    55a8:	2b00      	cmp	r3, #0
    55aa:	d003      	beq.n	55b4 <strcat+0x34>
    55ac:	3001      	adds	r0, #1
    55ae:	7803      	ldrb	r3, [r0, #0]
    55b0:	2b00      	cmp	r3, #0
    55b2:	d1fb      	bne.n	55ac <strcat+0x2c>
    55b4:	f000 f808 	bl	55c8 <strcpy>
    55b8:	1c20      	adds	r0, r4, #0
    55ba:	bcf8      	pop	{r3, r4, r5, r6, r7}
    55bc:	bc02      	pop	{r1}
    55be:	4708      	bx	r1
    55c0:	fefefeff 	.word	0xfefefeff
    55c4:	80808080 	.word	0x80808080

000055c8 <strcpy>:
    55c8:	1c03      	adds	r3, r0, #0
    55ca:	780a      	ldrb	r2, [r1, #0]
    55cc:	3101      	adds	r1, #1
    55ce:	701a      	strb	r2, [r3, #0]
    55d0:	3301      	adds	r3, #1
    55d2:	2a00      	cmp	r2, #0
    55d4:	d1f9      	bne.n	55ca <strcpy+0x2>
    55d6:	4770      	bx	lr

000055d8 <strlen>:
    55d8:	2300      	movs	r3, #0
    55da:	5cc2      	ldrb	r2, [r0, r3]
    55dc:	3301      	adds	r3, #1
    55de:	2a00      	cmp	r2, #0
    55e0:	d1fb      	bne.n	55da <strlen+0x2>
    55e2:	1e58      	subs	r0, r3, #1
    55e4:	4770      	bx	lr
    55e6:	46c0      	nop			; (mov r8, r8)

000055e8 <strncpy>:
    55e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ea:	1c0e      	adds	r6, r1, #0
    55ec:	4306      	orrs	r6, r0
    55ee:	2503      	movs	r5, #3
    55f0:	1c0c      	adds	r4, r1, #0
    55f2:	1c03      	adds	r3, r0, #0
    55f4:	422e      	tst	r6, r5
    55f6:	d101      	bne.n	55fc <strncpy+0x14>
    55f8:	4295      	cmp	r5, r2
    55fa:	d317      	bcc.n	562c <strncpy+0x44>
    55fc:	1c03      	adds	r3, r0, #0
    55fe:	2a00      	cmp	r2, #0
    5600:	d103      	bne.n	560a <strncpy+0x22>
    5602:	e010      	b.n	5626 <strncpy+0x3e>
    5604:	3101      	adds	r1, #1
    5606:	2a00      	cmp	r2, #0
    5608:	d00d      	beq.n	5626 <strncpy+0x3e>
    560a:	780c      	ldrb	r4, [r1, #0]
    560c:	3a01      	subs	r2, #1
    560e:	701c      	strb	r4, [r3, #0]
    5610:	3301      	adds	r3, #1
    5612:	2c00      	cmp	r4, #0
    5614:	d1f6      	bne.n	5604 <strncpy+0x1c>
    5616:	2100      	movs	r1, #0
    5618:	428a      	cmp	r2, r1
    561a:	d004      	beq.n	5626 <strncpy+0x3e>
    561c:	3a01      	subs	r2, #1
    561e:	7019      	strb	r1, [r3, #0]
    5620:	3301      	adds	r3, #1
    5622:	2a00      	cmp	r2, #0
    5624:	d1fa      	bne.n	561c <strncpy+0x34>
    5626:	bcf0      	pop	{r4, r5, r6, r7}
    5628:	bc02      	pop	{r1}
    562a:	4708      	bx	r1
    562c:	4907      	ldr	r1, [pc, #28]	; (564c <strncpy+0x64>)
    562e:	468c      	mov	ip, r1
    5630:	4f07      	ldr	r7, [pc, #28]	; (5650 <strncpy+0x68>)
    5632:	1c21      	adds	r1, r4, #0
    5634:	cc20      	ldmia	r4!, {r5}
    5636:	19ee      	adds	r6, r5, r7
    5638:	43ae      	bics	r6, r5
    563a:	4667      	mov	r7, ip
    563c:	423e      	tst	r6, r7
    563e:	d1de      	bne.n	55fe <strncpy+0x16>
    5640:	3a04      	subs	r2, #4
    5642:	c320      	stmia	r3!, {r5}
    5644:	1c21      	adds	r1, r4, #0
    5646:	2a03      	cmp	r2, #3
    5648:	d8f2      	bhi.n	5630 <strncpy+0x48>
    564a:	e7d8      	b.n	55fe <strncpy+0x16>
    564c:	80808080 	.word	0x80808080
    5650:	fefefeff 	.word	0xfefefeff
    5654:	00000000 	.word	0x00000000

00005658 <_svfprintf_r>:
    5658:	b5f0      	push	{r4, r5, r6, r7, lr}
    565a:	465f      	mov	r7, fp
    565c:	4656      	mov	r6, sl
    565e:	464d      	mov	r5, r9
    5660:	4644      	mov	r4, r8
    5662:	b4f0      	push	{r4, r5, r6, r7}
    5664:	b0c5      	sub	sp, #276	; 0x114
    5666:	930f      	str	r3, [sp, #60]	; 0x3c
    5668:	9108      	str	r1, [sp, #32]
    566a:	1c15      	adds	r5, r2, #0
    566c:	9009      	str	r0, [sp, #36]	; 0x24
    566e:	f004 f9e1 	bl	9a34 <_localeconv_r>
    5672:	6800      	ldr	r0, [r0, #0]
    5674:	9019      	str	r0, [sp, #100]	; 0x64
    5676:	f7ff ffaf 	bl	55d8 <strlen>
    567a:	901c      	str	r0, [sp, #112]	; 0x70
    567c:	9808      	ldr	r0, [sp, #32]
    567e:	8983      	ldrh	r3, [r0, #12]
    5680:	0619      	lsls	r1, r3, #24
    5682:	d504      	bpl.n	568e <_svfprintf_r+0x36>
    5684:	6903      	ldr	r3, [r0, #16]
    5686:	2b00      	cmp	r3, #0
    5688:	d101      	bne.n	568e <_svfprintf_r+0x36>
    568a:	f001 f903 	bl	6894 <_svfprintf_r+0x123c>
    568e:	2300      	movs	r3, #0
    5690:	ac39      	add	r4, sp, #228	; 0xe4
    5692:	af1f      	add	r7, sp, #124	; 0x7c
    5694:	9739      	str	r7, [sp, #228]	; 0xe4
    5696:	60a3      	str	r3, [r4, #8]
    5698:	6063      	str	r3, [r4, #4]
    569a:	930d      	str	r3, [sp, #52]	; 0x34
    569c:	931a      	str	r3, [sp, #104]	; 0x68
    569e:	931b      	str	r3, [sp, #108]	; 0x6c
    56a0:	9317      	str	r3, [sp, #92]	; 0x5c
    56a2:	931d      	str	r3, [sp, #116]	; 0x74
    56a4:	930e      	str	r3, [sp, #56]	; 0x38
    56a6:	46ab      	mov	fp, r5
    56a8:	1c3d      	adds	r5, r7, #0
    56aa:	4658      	mov	r0, fp
    56ac:	7803      	ldrb	r3, [r0, #0]
    56ae:	2b00      	cmp	r3, #0
    56b0:	d100      	bne.n	56b4 <_svfprintf_r+0x5c>
    56b2:	e167      	b.n	5984 <_svfprintf_r+0x32c>
    56b4:	2b25      	cmp	r3, #37	; 0x25
    56b6:	d100      	bne.n	56ba <_svfprintf_r+0x62>
    56b8:	e164      	b.n	5984 <_svfprintf_r+0x32c>
    56ba:	465e      	mov	r6, fp
    56bc:	e001      	b.n	56c2 <_svfprintf_r+0x6a>
    56be:	2b00      	cmp	r3, #0
    56c0:	d003      	beq.n	56ca <_svfprintf_r+0x72>
    56c2:	3601      	adds	r6, #1
    56c4:	7833      	ldrb	r3, [r6, #0]
    56c6:	2b25      	cmp	r3, #37	; 0x25
    56c8:	d1f9      	bne.n	56be <_svfprintf_r+0x66>
    56ca:	4659      	mov	r1, fp
    56cc:	1a77      	subs	r7, r6, r1
    56ce:	2f00      	cmp	r7, #0
    56d0:	d00f      	beq.n	56f2 <_svfprintf_r+0x9a>
    56d2:	68a3      	ldr	r3, [r4, #8]
    56d4:	19db      	adds	r3, r3, r7
    56d6:	6029      	str	r1, [r5, #0]
    56d8:	606f      	str	r7, [r5, #4]
    56da:	60a3      	str	r3, [r4, #8]
    56dc:	6863      	ldr	r3, [r4, #4]
    56de:	3301      	adds	r3, #1
    56e0:	6063      	str	r3, [r4, #4]
    56e2:	3508      	adds	r5, #8
    56e4:	2b07      	cmp	r3, #7
    56e6:	dd00      	ble.n	56ea <_svfprintf_r+0x92>
    56e8:	e15c      	b.n	59a4 <_svfprintf_r+0x34c>
    56ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    56ec:	19d2      	adds	r2, r2, r7
    56ee:	920e      	str	r2, [sp, #56]	; 0x38
    56f0:	7833      	ldrb	r3, [r6, #0]
    56f2:	2b00      	cmp	r3, #0
    56f4:	d100      	bne.n	56f8 <_svfprintf_r+0xa0>
    56f6:	e15e      	b.n	59b6 <_svfprintf_r+0x35e>
    56f8:	4fbb      	ldr	r7, [pc, #748]	; (59e8 <_svfprintf_r+0x390>)
    56fa:	2000      	movs	r0, #0
    56fc:	446f      	add	r7, sp
    56fe:	7038      	strb	r0, [r7, #0]
    5700:	1c73      	adds	r3, r6, #1
    5702:	469b      	mov	fp, r3
    5704:	2100      	movs	r1, #0
    5706:	7873      	ldrb	r3, [r6, #1]
    5708:	2601      	movs	r6, #1
    570a:	46b9      	mov	r9, r7
    570c:	4276      	negs	r6, r6
    570e:	910b      	str	r1, [sp, #44]	; 0x2c
    5710:	9107      	str	r1, [sp, #28]
    5712:	2740      	movs	r7, #64	; 0x40
    5714:	3180      	adds	r1, #128	; 0x80
    5716:	4ab5      	ldr	r2, [pc, #724]	; (59ec <_svfprintf_r+0x394>)
    5718:	468a      	mov	sl, r1
    571a:	2020      	movs	r0, #32
    571c:	4659      	mov	r1, fp
    571e:	46bc      	mov	ip, r7
    5720:	46b3      	mov	fp, r6
    5722:	3101      	adds	r1, #1
    5724:	1c1e      	adds	r6, r3, #0
    5726:	3e20      	subs	r6, #32
    5728:	2e58      	cmp	r6, #88	; 0x58
    572a:	d800      	bhi.n	572e <_svfprintf_r+0xd6>
    572c:	e12d      	b.n	598a <_svfprintf_r+0x332>
    572e:	468b      	mov	fp, r1
    5730:	9316      	str	r3, [sp, #88]	; 0x58
    5732:	2b00      	cmp	r3, #0
    5734:	d100      	bne.n	5738 <_svfprintf_r+0xe0>
    5736:	e13e      	b.n	59b6 <_svfprintf_r+0x35e>
    5738:	af16      	add	r7, sp, #88	; 0x58
    573a:	783f      	ldrb	r7, [r7, #0]
    573c:	ab2f      	add	r3, sp, #188	; 0xbc
    573e:	2200      	movs	r2, #0
    5740:	2601      	movs	r6, #1
    5742:	2100      	movs	r1, #0
    5744:	4648      	mov	r0, r9
    5746:	701f      	strb	r7, [r3, #0]
    5748:	7001      	strb	r1, [r0, #0]
    574a:	960a      	str	r6, [sp, #40]	; 0x28
    574c:	960c      	str	r6, [sp, #48]	; 0x30
    574e:	9214      	str	r2, [sp, #80]	; 0x50
    5750:	9218      	str	r2, [sp, #96]	; 0x60
    5752:	9313      	str	r3, [sp, #76]	; 0x4c
    5754:	9807      	ldr	r0, [sp, #28]
    5756:	2302      	movs	r3, #2
    5758:	4018      	ands	r0, r3
    575a:	4682      	mov	sl, r0
    575c:	d002      	beq.n	5764 <_svfprintf_r+0x10c>
    575e:	990a      	ldr	r1, [sp, #40]	; 0x28
    5760:	18c9      	adds	r1, r1, r3
    5762:	910a      	str	r1, [sp, #40]	; 0x28
    5764:	9e07      	ldr	r6, [sp, #28]
    5766:	2384      	movs	r3, #132	; 0x84
    5768:	401e      	ands	r6, r3
    576a:	9615      	str	r6, [sp, #84]	; 0x54
    576c:	d13c      	bne.n	57e8 <_svfprintf_r+0x190>
    576e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5770:	980a      	ldr	r0, [sp, #40]	; 0x28
    5772:	1a3e      	subs	r6, r7, r0
    5774:	2e00      	cmp	r6, #0
    5776:	dd37      	ble.n	57e8 <_svfprintf_r+0x190>
    5778:	2e10      	cmp	r6, #16
    577a:	dc01      	bgt.n	5780 <_svfprintf_r+0x128>
    577c:	f001 f906 	bl	698c <_svfprintf_r+0x1334>
    5780:	499b      	ldr	r1, [pc, #620]	; (59f0 <_svfprintf_r+0x398>)
    5782:	1c2a      	adds	r2, r5, #0
    5784:	2710      	movs	r7, #16
    5786:	1c0d      	adds	r5, r1, #0
    5788:	e005      	b.n	5796 <_svfprintf_r+0x13e>
    578a:	3208      	adds	r2, #8
    578c:	1c13      	adds	r3, r2, #0
    578e:	3e10      	subs	r6, #16
    5790:	3308      	adds	r3, #8
    5792:	2e10      	cmp	r6, #16
    5794:	dd16      	ble.n	57c4 <_svfprintf_r+0x16c>
    5796:	68a3      	ldr	r3, [r4, #8]
    5798:	3310      	adds	r3, #16
    579a:	6015      	str	r5, [r2, #0]
    579c:	6057      	str	r7, [r2, #4]
    579e:	60a3      	str	r3, [r4, #8]
    57a0:	6863      	ldr	r3, [r4, #4]
    57a2:	3301      	adds	r3, #1
    57a4:	6063      	str	r3, [r4, #4]
    57a6:	2b07      	cmp	r3, #7
    57a8:	ddef      	ble.n	578a <_svfprintf_r+0x132>
    57aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    57ac:	9908      	ldr	r1, [sp, #32]
    57ae:	1c22      	adds	r2, r4, #0
    57b0:	f005 fa14 	bl	abdc <__ssprint_r>
    57b4:	2800      	cmp	r0, #0
    57b6:	d000      	beq.n	57ba <_svfprintf_r+0x162>
    57b8:	e105      	b.n	59c6 <_svfprintf_r+0x36e>
    57ba:	3e10      	subs	r6, #16
    57bc:	ab21      	add	r3, sp, #132	; 0x84
    57be:	aa1f      	add	r2, sp, #124	; 0x7c
    57c0:	2e10      	cmp	r6, #16
    57c2:	dce8      	bgt.n	5796 <_svfprintf_r+0x13e>
    57c4:	46a8      	mov	r8, r5
    57c6:	1c15      	adds	r5, r2, #0
    57c8:	68a2      	ldr	r2, [r4, #8]
    57ca:	4647      	mov	r7, r8
    57cc:	18b2      	adds	r2, r6, r2
    57ce:	602f      	str	r7, [r5, #0]
    57d0:	606e      	str	r6, [r5, #4]
    57d2:	60a2      	str	r2, [r4, #8]
    57d4:	6862      	ldr	r2, [r4, #4]
    57d6:	3201      	adds	r2, #1
    57d8:	6062      	str	r2, [r4, #4]
    57da:	2a07      	cmp	r2, #7
    57dc:	dd01      	ble.n	57e2 <_svfprintf_r+0x18a>
    57de:	f000 fd19 	bl	6214 <_svfprintf_r+0xbbc>
    57e2:	4648      	mov	r0, r9
    57e4:	7802      	ldrb	r2, [r0, #0]
    57e6:	1c1d      	adds	r5, r3, #0
    57e8:	2a00      	cmp	r2, #0
    57ea:	d00e      	beq.n	580a <_svfprintf_r+0x1b2>
    57ec:	2301      	movs	r3, #1
    57ee:	606b      	str	r3, [r5, #4]
    57f0:	68a3      	ldr	r3, [r4, #8]
    57f2:	464a      	mov	r2, r9
    57f4:	3301      	adds	r3, #1
    57f6:	602a      	str	r2, [r5, #0]
    57f8:	60a3      	str	r3, [r4, #8]
    57fa:	6863      	ldr	r3, [r4, #4]
    57fc:	3301      	adds	r3, #1
    57fe:	6063      	str	r3, [r4, #4]
    5800:	3508      	adds	r5, #8
    5802:	2b07      	cmp	r3, #7
    5804:	dd01      	ble.n	580a <_svfprintf_r+0x1b2>
    5806:	f000 fc44 	bl	6092 <_svfprintf_r+0xa3a>
    580a:	2300      	movs	r3, #0
    580c:	459a      	cmp	sl, r3
    580e:	d00e      	beq.n	582e <_svfprintf_r+0x1d6>
    5810:	ab43      	add	r3, sp, #268	; 0x10c
    5812:	602b      	str	r3, [r5, #0]
    5814:	2302      	movs	r3, #2
    5816:	606b      	str	r3, [r5, #4]
    5818:	68a3      	ldr	r3, [r4, #8]
    581a:	3302      	adds	r3, #2
    581c:	60a3      	str	r3, [r4, #8]
    581e:	6863      	ldr	r3, [r4, #4]
    5820:	3301      	adds	r3, #1
    5822:	6063      	str	r3, [r4, #4]
    5824:	3508      	adds	r5, #8
    5826:	2b07      	cmp	r3, #7
    5828:	dd01      	ble.n	582e <_svfprintf_r+0x1d6>
    582a:	f000 fc3d 	bl	60a8 <_svfprintf_r+0xa50>
    582e:	9e15      	ldr	r6, [sp, #84]	; 0x54
    5830:	2e80      	cmp	r6, #128	; 0x80
    5832:	d100      	bne.n	5836 <_svfprintf_r+0x1de>
    5834:	e371      	b.n	5f1a <_svfprintf_r+0x8c2>
    5836:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    583a:	1ad6      	subs	r6, r2, r3
    583c:	2e00      	cmp	r6, #0
    583e:	dc00      	bgt.n	5842 <_svfprintf_r+0x1ea>
    5840:	e3ba      	b.n	5fb8 <_svfprintf_r+0x960>
    5842:	2e10      	cmp	r6, #16
    5844:	dc01      	bgt.n	584a <_svfprintf_r+0x1f2>
    5846:	f000 feb7 	bl	65b8 <_svfprintf_r+0xf60>
    584a:	4f69      	ldr	r7, [pc, #420]	; (59f0 <_svfprintf_r+0x398>)
    584c:	2010      	movs	r0, #16
    584e:	46b8      	mov	r8, r7
    5850:	4681      	mov	r9, r0
    5852:	1c2b      	adds	r3, r5, #0
    5854:	44c1      	add	r9, r8
    5856:	4682      	mov	sl, r0
    5858:	9f09      	ldr	r7, [sp, #36]	; 0x24
    585a:	9d08      	ldr	r5, [sp, #32]
    585c:	e005      	b.n	586a <_svfprintf_r+0x212>
    585e:	3308      	adds	r3, #8
    5860:	1c1a      	adds	r2, r3, #0
    5862:	3e10      	subs	r6, #16
    5864:	3208      	adds	r2, #8
    5866:	2e10      	cmp	r6, #16
    5868:	dd18      	ble.n	589c <_svfprintf_r+0x244>
    586a:	464a      	mov	r2, r9
    586c:	601a      	str	r2, [r3, #0]
    586e:	68a2      	ldr	r2, [r4, #8]
    5870:	4650      	mov	r0, sl
    5872:	3210      	adds	r2, #16
    5874:	6058      	str	r0, [r3, #4]
    5876:	60a2      	str	r2, [r4, #8]
    5878:	6862      	ldr	r2, [r4, #4]
    587a:	3201      	adds	r2, #1
    587c:	6062      	str	r2, [r4, #4]
    587e:	2a07      	cmp	r2, #7
    5880:	dded      	ble.n	585e <_svfprintf_r+0x206>
    5882:	1c38      	adds	r0, r7, #0
    5884:	1c29      	adds	r1, r5, #0
    5886:	1c22      	adds	r2, r4, #0
    5888:	f005 f9a8 	bl	abdc <__ssprint_r>
    588c:	2800      	cmp	r0, #0
    588e:	d000      	beq.n	5892 <_svfprintf_r+0x23a>
    5890:	e099      	b.n	59c6 <_svfprintf_r+0x36e>
    5892:	3e10      	subs	r6, #16
    5894:	aa21      	add	r2, sp, #132	; 0x84
    5896:	ab1f      	add	r3, sp, #124	; 0x7c
    5898:	2e10      	cmp	r6, #16
    589a:	dce6      	bgt.n	586a <_svfprintf_r+0x212>
    589c:	1c1d      	adds	r5, r3, #0
    589e:	1c17      	adds	r7, r2, #0
    58a0:	2110      	movs	r1, #16
    58a2:	1c0b      	adds	r3, r1, #0
    58a4:	4443      	add	r3, r8
    58a6:	602b      	str	r3, [r5, #0]
    58a8:	68a3      	ldr	r3, [r4, #8]
    58aa:	606e      	str	r6, [r5, #4]
    58ac:	18f6      	adds	r6, r6, r3
    58ae:	6863      	ldr	r3, [r4, #4]
    58b0:	3301      	adds	r3, #1
    58b2:	60a6      	str	r6, [r4, #8]
    58b4:	6063      	str	r3, [r4, #4]
    58b6:	2b07      	cmp	r3, #7
    58b8:	dd00      	ble.n	58bc <_svfprintf_r+0x264>
    58ba:	e3df      	b.n	607c <_svfprintf_r+0xa24>
    58bc:	9a07      	ldr	r2, [sp, #28]
    58be:	05d2      	lsls	r2, r2, #23
    58c0:	d500      	bpl.n	58c4 <_svfprintf_r+0x26c>
    58c2:	e2bb      	b.n	5e3c <_svfprintf_r+0x7e4>
    58c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    58c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    58c8:	603b      	str	r3, [r7, #0]
    58ca:	68a3      	ldr	r3, [r4, #8]
    58cc:	195b      	adds	r3, r3, r5
    58ce:	607d      	str	r5, [r7, #4]
    58d0:	60a3      	str	r3, [r4, #8]
    58d2:	6863      	ldr	r3, [r4, #4]
    58d4:	3301      	adds	r3, #1
    58d6:	6063      	str	r3, [r4, #4]
    58d8:	2b07      	cmp	r3, #7
    58da:	dd00      	ble.n	58de <_svfprintf_r+0x286>
    58dc:	e3b8      	b.n	6050 <_svfprintf_r+0x9f8>
    58de:	1c3b      	adds	r3, r7, #0
    58e0:	3308      	adds	r3, #8
    58e2:	9f07      	ldr	r7, [sp, #28]
    58e4:	077f      	lsls	r7, r7, #29
    58e6:	d539      	bpl.n	595c <_svfprintf_r+0x304>
    58e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    58ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    58ec:	1a45      	subs	r5, r0, r1
    58ee:	2d00      	cmp	r5, #0
    58f0:	dd34      	ble.n	595c <_svfprintf_r+0x304>
    58f2:	2d10      	cmp	r5, #16
    58f4:	dc01      	bgt.n	58fa <_svfprintf_r+0x2a2>
    58f6:	f001 f86e 	bl	69d6 <_svfprintf_r+0x137e>
    58fa:	4e3d      	ldr	r6, [pc, #244]	; (59f0 <_svfprintf_r+0x398>)
    58fc:	46b0      	mov	r8, r6
    58fe:	4647      	mov	r7, r8
    5900:	2610      	movs	r6, #16
    5902:	e002      	b.n	590a <_svfprintf_r+0x2b2>
    5904:	3d10      	subs	r5, #16
    5906:	2d10      	cmp	r5, #16
    5908:	dd15      	ble.n	5936 <_svfprintf_r+0x2de>
    590a:	68a2      	ldr	r2, [r4, #8]
    590c:	3210      	adds	r2, #16
    590e:	601f      	str	r7, [r3, #0]
    5910:	605e      	str	r6, [r3, #4]
    5912:	60a2      	str	r2, [r4, #8]
    5914:	6862      	ldr	r2, [r4, #4]
    5916:	3201      	adds	r2, #1
    5918:	6062      	str	r2, [r4, #4]
    591a:	3308      	adds	r3, #8
    591c:	2a07      	cmp	r2, #7
    591e:	ddf1      	ble.n	5904 <_svfprintf_r+0x2ac>
    5920:	9809      	ldr	r0, [sp, #36]	; 0x24
    5922:	9908      	ldr	r1, [sp, #32]
    5924:	1c22      	adds	r2, r4, #0
    5926:	f005 f959 	bl	abdc <__ssprint_r>
    592a:	2800      	cmp	r0, #0
    592c:	d14b      	bne.n	59c6 <_svfprintf_r+0x36e>
    592e:	3d10      	subs	r5, #16
    5930:	ab1f      	add	r3, sp, #124	; 0x7c
    5932:	2d10      	cmp	r5, #16
    5934:	dce9      	bgt.n	590a <_svfprintf_r+0x2b2>
    5936:	46b8      	mov	r8, r7
    5938:	4647      	mov	r7, r8
    593a:	605d      	str	r5, [r3, #4]
    593c:	601f      	str	r7, [r3, #0]
    593e:	68a3      	ldr	r3, [r4, #8]
    5940:	18ed      	adds	r5, r5, r3
    5942:	6863      	ldr	r3, [r4, #4]
    5944:	3301      	adds	r3, #1
    5946:	60a5      	str	r5, [r4, #8]
    5948:	6063      	str	r3, [r4, #4]
    594a:	2b07      	cmp	r3, #7
    594c:	dd07      	ble.n	595e <_svfprintf_r+0x306>
    594e:	9809      	ldr	r0, [sp, #36]	; 0x24
    5950:	9908      	ldr	r1, [sp, #32]
    5952:	1c22      	adds	r2, r4, #0
    5954:	f005 f942 	bl	abdc <__ssprint_r>
    5958:	2800      	cmp	r0, #0
    595a:	d134      	bne.n	59c6 <_svfprintf_r+0x36e>
    595c:	68a5      	ldr	r5, [r4, #8]
    595e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5960:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5962:	4283      	cmp	r3, r0
    5964:	da00      	bge.n	5968 <_svfprintf_r+0x310>
    5966:	1c03      	adds	r3, r0, #0
    5968:	990e      	ldr	r1, [sp, #56]	; 0x38
    596a:	18c9      	adds	r1, r1, r3
    596c:	910e      	str	r1, [sp, #56]	; 0x38
    596e:	2d00      	cmp	r5, #0
    5970:	d000      	beq.n	5974 <_svfprintf_r+0x31c>
    5972:	e377      	b.n	6064 <_svfprintf_r+0xa0c>
    5974:	2200      	movs	r2, #0
    5976:	6062      	str	r2, [r4, #4]
    5978:	4658      	mov	r0, fp
    597a:	7803      	ldrb	r3, [r0, #0]
    597c:	ad1f      	add	r5, sp, #124	; 0x7c
    597e:	2b00      	cmp	r3, #0
    5980:	d000      	beq.n	5984 <_svfprintf_r+0x32c>
    5982:	e697      	b.n	56b4 <_svfprintf_r+0x5c>
    5984:	465e      	mov	r6, fp
    5986:	7833      	ldrb	r3, [r6, #0]
    5988:	e6b3      	b.n	56f2 <_svfprintf_r+0x9a>
    598a:	00b6      	lsls	r6, r6, #2
    598c:	5996      	ldr	r6, [r2, r6]
    598e:	46b7      	mov	pc, r6
    5990:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5992:	427f      	negs	r7, r7
    5994:	970b      	str	r7, [sp, #44]	; 0x2c
    5996:	960f      	str	r6, [sp, #60]	; 0x3c
    5998:	9e07      	ldr	r6, [sp, #28]
    599a:	2304      	movs	r3, #4
    599c:	431e      	orrs	r6, r3
    599e:	9607      	str	r6, [sp, #28]
    59a0:	780b      	ldrb	r3, [r1, #0]
    59a2:	e6be      	b.n	5722 <_svfprintf_r+0xca>
    59a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    59a6:	9908      	ldr	r1, [sp, #32]
    59a8:	1c22      	adds	r2, r4, #0
    59aa:	f005 f917 	bl	abdc <__ssprint_r>
    59ae:	2800      	cmp	r0, #0
    59b0:	d109      	bne.n	59c6 <_svfprintf_r+0x36e>
    59b2:	ad1f      	add	r5, sp, #124	; 0x7c
    59b4:	e699      	b.n	56ea <_svfprintf_r+0x92>
    59b6:	68a3      	ldr	r3, [r4, #8]
    59b8:	2b00      	cmp	r3, #0
    59ba:	d004      	beq.n	59c6 <_svfprintf_r+0x36e>
    59bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    59be:	9908      	ldr	r1, [sp, #32]
    59c0:	1c22      	adds	r2, r4, #0
    59c2:	f005 f90b 	bl	abdc <__ssprint_r>
    59c6:	9d08      	ldr	r5, [sp, #32]
    59c8:	89ab      	ldrh	r3, [r5, #12]
    59ca:	065e      	lsls	r6, r3, #25
    59cc:	d502      	bpl.n	59d4 <_svfprintf_r+0x37c>
    59ce:	2301      	movs	r3, #1
    59d0:	425b      	negs	r3, r3
    59d2:	930e      	str	r3, [sp, #56]	; 0x38
    59d4:	980e      	ldr	r0, [sp, #56]	; 0x38
    59d6:	b045      	add	sp, #276	; 0x114
    59d8:	bc3c      	pop	{r2, r3, r4, r5}
    59da:	4690      	mov	r8, r2
    59dc:	4699      	mov	r9, r3
    59de:	46a2      	mov	sl, r4
    59e0:	46ab      	mov	fp, r5
    59e2:	bcf0      	pop	{r4, r5, r6, r7}
    59e4:	bc02      	pop	{r1}
    59e6:	4708      	bx	r1
    59e8:	0000010f 	.word	0x0000010f
    59ec:	0000dd3c 	.word	0x0000dd3c
    59f0:	0000dea0 	.word	0x0000dea0
    59f4:	9a07      	ldr	r2, [sp, #28]
    59f6:	9316      	str	r3, [sp, #88]	; 0x58
    59f8:	2310      	movs	r3, #16
    59fa:	431a      	orrs	r2, r3
    59fc:	9207      	str	r2, [sp, #28]
    59fe:	465e      	mov	r6, fp
    5a00:	468b      	mov	fp, r1
    5a02:	9b07      	ldr	r3, [sp, #28]
    5a04:	069b      	lsls	r3, r3, #26
    5a06:	d401      	bmi.n	5a0c <_svfprintf_r+0x3b4>
    5a08:	f000 fc76 	bl	62f8 <_svfprintf_r+0xca0>
    5a0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5a0e:	2307      	movs	r3, #7
    5a10:	3207      	adds	r2, #7
    5a12:	439a      	bics	r2, r3
    5a14:	6810      	ldr	r0, [r2, #0]
    5a16:	6851      	ldr	r1, [r2, #4]
    5a18:	2708      	movs	r7, #8
    5a1a:	18bf      	adds	r7, r7, r2
    5a1c:	9010      	str	r0, [sp, #64]	; 0x40
    5a1e:	9111      	str	r1, [sp, #68]	; 0x44
    5a20:	970f      	str	r7, [sp, #60]	; 0x3c
    5a22:	9a11      	ldr	r2, [sp, #68]	; 0x44
    5a24:	2a00      	cmp	r2, #0
    5a26:	da01      	bge.n	5a2c <_svfprintf_r+0x3d4>
    5a28:	f000 fcc0 	bl	63ac <_svfprintf_r+0xd54>
    5a2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5a2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5a30:	431a      	orrs	r2, r3
    5a32:	1e53      	subs	r3, r2, #1
    5a34:	419a      	sbcs	r2, r3
    5a36:	2301      	movs	r3, #1
    5a38:	2e00      	cmp	r6, #0
    5a3a:	db03      	blt.n	5a44 <_svfprintf_r+0x3ec>
    5a3c:	9f07      	ldr	r7, [sp, #28]
    5a3e:	2180      	movs	r1, #128	; 0x80
    5a40:	438f      	bics	r7, r1
    5a42:	9707      	str	r7, [sp, #28]
    5a44:	2e00      	cmp	r6, #0
    5a46:	d102      	bne.n	5a4e <_svfprintf_r+0x3f6>
    5a48:	2a00      	cmp	r2, #0
    5a4a:	d100      	bne.n	5a4e <_svfprintf_r+0x3f6>
    5a4c:	e255      	b.n	5efa <_svfprintf_r+0x8a2>
    5a4e:	2b01      	cmp	r3, #1
    5a50:	d100      	bne.n	5a54 <_svfprintf_r+0x3fc>
    5a52:	e3af      	b.n	61b4 <_svfprintf_r+0xb5c>
    5a54:	2b02      	cmp	r3, #2
    5a56:	d100      	bne.n	5a5a <_svfprintf_r+0x402>
    5a58:	e38e      	b.n	6178 <_svfprintf_r+0xb20>
    5a5a:	4659      	mov	r1, fp
    5a5c:	2007      	movs	r0, #7
    5a5e:	9413      	str	r4, [sp, #76]	; 0x4c
    5a60:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5a62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5a64:	910a      	str	r1, [sp, #40]	; 0x28
    5a66:	4684      	mov	ip, r0
    5a68:	1c21      	adds	r1, r4, #0
    5a6a:	46a8      	mov	r8, r5
    5a6c:	08d7      	lsrs	r7, r2, #3
    5a6e:	0758      	lsls	r0, r3, #29
    5a70:	46ba      	mov	sl, r7
    5a72:	4665      	mov	r5, ip
    5a74:	4015      	ands	r5, r2
    5a76:	1c07      	adds	r7, r0, #0
    5a78:	4650      	mov	r0, sl
    5a7a:	4307      	orrs	r7, r0
    5a7c:	3901      	subs	r1, #1
    5a7e:	3530      	adds	r5, #48	; 0x30
    5a80:	08d8      	lsrs	r0, r3, #3
    5a82:	700d      	strb	r5, [r1, #0]
    5a84:	1c3a      	adds	r2, r7, #0
    5a86:	1c03      	adds	r3, r0, #0
    5a88:	4307      	orrs	r7, r0
    5a8a:	d1ef      	bne.n	5a6c <_svfprintf_r+0x414>
    5a8c:	980a      	ldr	r0, [sp, #40]	; 0x28
    5a8e:	9113      	str	r1, [sp, #76]	; 0x4c
    5a90:	9907      	ldr	r1, [sp, #28]
    5a92:	1c2f      	adds	r7, r5, #0
    5a94:	4683      	mov	fp, r0
    5a96:	9210      	str	r2, [sp, #64]	; 0x40
    5a98:	9311      	str	r3, [sp, #68]	; 0x44
    5a9a:	4645      	mov	r5, r8
    5a9c:	07c9      	lsls	r1, r1, #31
    5a9e:	d501      	bpl.n	5aa4 <_svfprintf_r+0x44c>
    5aa0:	f000 fc78 	bl	6394 <_svfprintf_r+0xd3c>
    5aa4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5aa6:	1aa2      	subs	r2, r4, r2
    5aa8:	920c      	str	r2, [sp, #48]	; 0x30
    5aaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5aac:	920a      	str	r2, [sp, #40]	; 0x28
    5aae:	42b2      	cmp	r2, r6
    5ab0:	da00      	bge.n	5ab4 <_svfprintf_r+0x45c>
    5ab2:	960a      	str	r6, [sp, #40]	; 0x28
    5ab4:	464b      	mov	r3, r9
    5ab6:	9614      	str	r6, [sp, #80]	; 0x50
    5ab8:	2600      	movs	r6, #0
    5aba:	781a      	ldrb	r2, [r3, #0]
    5abc:	9618      	str	r6, [sp, #96]	; 0x60
    5abe:	2a00      	cmp	r2, #0
    5ac0:	d100      	bne.n	5ac4 <_svfprintf_r+0x46c>
    5ac2:	e647      	b.n	5754 <_svfprintf_r+0xfc>
    5ac4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    5ac6:	3701      	adds	r7, #1
    5ac8:	970a      	str	r7, [sp, #40]	; 0x28
    5aca:	e643      	b.n	5754 <_svfprintf_r+0xfc>
    5acc:	9807      	ldr	r0, [sp, #28]
    5ace:	465e      	mov	r6, fp
    5ad0:	9316      	str	r3, [sp, #88]	; 0x58
    5ad2:	468b      	mov	fp, r1
    5ad4:	4698      	mov	r8, r3
    5ad6:	0700      	lsls	r0, r0, #28
    5ad8:	d401      	bmi.n	5ade <_svfprintf_r+0x486>
    5ada:	f000 fcc3 	bl	6464 <_svfprintf_r+0xe0c>
    5ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5ae0:	2307      	movs	r3, #7
    5ae2:	3207      	adds	r2, #7
    5ae4:	439a      	bics	r2, r3
    5ae6:	6813      	ldr	r3, [r2, #0]
    5ae8:	2108      	movs	r1, #8
    5aea:	1889      	adds	r1, r1, r2
    5aec:	910f      	str	r1, [sp, #60]	; 0x3c
    5aee:	931a      	str	r3, [sp, #104]	; 0x68
    5af0:	6852      	ldr	r2, [r2, #4]
    5af2:	921b      	str	r2, [sp, #108]	; 0x6c
    5af4:	981a      	ldr	r0, [sp, #104]	; 0x68
    5af6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5af8:	f005 f818 	bl	ab2c <__fpclassifyd>
    5afc:	2801      	cmp	r0, #1
    5afe:	d001      	beq.n	5b04 <_svfprintf_r+0x4ac>
    5b00:	f000 fc68 	bl	63d4 <_svfprintf_r+0xd7c>
    5b04:	981a      	ldr	r0, [sp, #104]	; 0x68
    5b06:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5b08:	4bc8      	ldr	r3, [pc, #800]	; (5e2c <_svfprintf_r+0x7d4>)
    5b0a:	4ac7      	ldr	r2, [pc, #796]	; (5e28 <_svfprintf_r+0x7d0>)
    5b0c:	f008 f878 	bl	dc00 <____aeabi_dcmplt_from_thumb>
    5b10:	2800      	cmp	r0, #0
    5b12:	d001      	beq.n	5b18 <_svfprintf_r+0x4c0>
    5b14:	f000 ff23 	bl	695e <_svfprintf_r+0x1306>
    5b18:	4649      	mov	r1, r9
    5b1a:	780a      	ldrb	r2, [r1, #0]
    5b1c:	9e16      	ldr	r6, [sp, #88]	; 0x58
    5b1e:	2e47      	cmp	r6, #71	; 0x47
    5b20:	dd01      	ble.n	5b26 <_svfprintf_r+0x4ce>
    5b22:	f000 fdd4 	bl	66ce <_svfprintf_r+0x1076>
    5b26:	4fc2      	ldr	r7, [pc, #776]	; (5e30 <_svfprintf_r+0x7d8>)
    5b28:	9713      	str	r7, [sp, #76]	; 0x4c
    5b2a:	9907      	ldr	r1, [sp, #28]
    5b2c:	2380      	movs	r3, #128	; 0x80
    5b2e:	4399      	bics	r1, r3
    5b30:	2600      	movs	r6, #0
    5b32:	3b7d      	subs	r3, #125	; 0x7d
    5b34:	9107      	str	r1, [sp, #28]
    5b36:	930a      	str	r3, [sp, #40]	; 0x28
    5b38:	930c      	str	r3, [sp, #48]	; 0x30
    5b3a:	9614      	str	r6, [sp, #80]	; 0x50
    5b3c:	9618      	str	r6, [sp, #96]	; 0x60
    5b3e:	e7be      	b.n	5abe <_svfprintf_r+0x466>
    5b40:	9f07      	ldr	r7, [sp, #28]
    5b42:	2308      	movs	r3, #8
    5b44:	431f      	orrs	r7, r3
    5b46:	9707      	str	r7, [sp, #28]
    5b48:	780b      	ldrb	r3, [r1, #0]
    5b4a:	e5ea      	b.n	5722 <_svfprintf_r+0xca>
    5b4c:	9a07      	ldr	r2, [sp, #28]
    5b4e:	9316      	str	r3, [sp, #88]	; 0x58
    5b50:	2310      	movs	r3, #16
    5b52:	431a      	orrs	r2, r3
    5b54:	9207      	str	r2, [sp, #28]
    5b56:	465e      	mov	r6, fp
    5b58:	468b      	mov	fp, r1
    5b5a:	9b07      	ldr	r3, [sp, #28]
    5b5c:	2120      	movs	r1, #32
    5b5e:	4019      	ands	r1, r3
    5b60:	d100      	bne.n	5b64 <_svfprintf_r+0x50c>
    5b62:	e3b5      	b.n	62d0 <_svfprintf_r+0xc78>
    5b64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5b66:	2307      	movs	r3, #7
    5b68:	3207      	adds	r2, #7
    5b6a:	439a      	bics	r2, r3
    5b6c:	6810      	ldr	r0, [r2, #0]
    5b6e:	6851      	ldr	r1, [r2, #4]
    5b70:	2708      	movs	r7, #8
    5b72:	18bf      	adds	r7, r7, r2
    5b74:	9010      	str	r0, [sp, #64]	; 0x40
    5b76:	9111      	str	r1, [sp, #68]	; 0x44
    5b78:	1c02      	adds	r2, r0, #0
    5b7a:	430a      	orrs	r2, r1
    5b7c:	970f      	str	r7, [sp, #60]	; 0x3c
    5b7e:	1e53      	subs	r3, r2, #1
    5b80:	419a      	sbcs	r2, r3
    5b82:	2300      	movs	r3, #0
    5b84:	2000      	movs	r0, #0
    5b86:	464f      	mov	r7, r9
    5b88:	7038      	strb	r0, [r7, #0]
    5b8a:	e755      	b.n	5a38 <_svfprintf_r+0x3e0>
    5b8c:	9807      	ldr	r0, [sp, #28]
    5b8e:	9316      	str	r3, [sp, #88]	; 0x58
    5b90:	2310      	movs	r3, #16
    5b92:	4318      	orrs	r0, r3
    5b94:	9007      	str	r0, [sp, #28]
    5b96:	465e      	mov	r6, fp
    5b98:	468b      	mov	fp, r1
    5b9a:	9907      	ldr	r1, [sp, #28]
    5b9c:	2220      	movs	r2, #32
    5b9e:	400a      	ands	r2, r1
    5ba0:	d100      	bne.n	5ba4 <_svfprintf_r+0x54c>
    5ba2:	e382      	b.n	62aa <_svfprintf_r+0xc52>
    5ba4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5ba6:	2307      	movs	r3, #7
    5ba8:	3207      	adds	r2, #7
    5baa:	439a      	bics	r2, r3
    5bac:	6810      	ldr	r0, [r2, #0]
    5bae:	6851      	ldr	r1, [r2, #4]
    5bb0:	3301      	adds	r3, #1
    5bb2:	189b      	adds	r3, r3, r2
    5bb4:	1c02      	adds	r2, r0, #0
    5bb6:	430a      	orrs	r2, r1
    5bb8:	930f      	str	r3, [sp, #60]	; 0x3c
    5bba:	9010      	str	r0, [sp, #64]	; 0x40
    5bbc:	9111      	str	r1, [sp, #68]	; 0x44
    5bbe:	1e53      	subs	r3, r2, #1
    5bc0:	419a      	sbcs	r2, r3
    5bc2:	2301      	movs	r3, #1
    5bc4:	e7de      	b.n	5b84 <_svfprintf_r+0x52c>
    5bc6:	465e      	mov	r6, fp
    5bc8:	489a      	ldr	r0, [pc, #616]	; (5e34 <_svfprintf_r+0x7dc>)
    5bca:	468b      	mov	fp, r1
    5bcc:	9907      	ldr	r1, [sp, #28]
    5bce:	2220      	movs	r2, #32
    5bd0:	9316      	str	r3, [sp, #88]	; 0x58
    5bd2:	9017      	str	r0, [sp, #92]	; 0x5c
    5bd4:	400a      	ands	r2, r1
    5bd6:	d100      	bne.n	5bda <_svfprintf_r+0x582>
    5bd8:	e0f3      	b.n	5dc2 <_svfprintf_r+0x76a>
    5bda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5bdc:	2307      	movs	r3, #7
    5bde:	3207      	adds	r2, #7
    5be0:	439a      	bics	r2, r3
    5be2:	6810      	ldr	r0, [r2, #0]
    5be4:	6851      	ldr	r1, [r2, #4]
    5be6:	3301      	adds	r3, #1
    5be8:	189b      	adds	r3, r3, r2
    5bea:	9010      	str	r0, [sp, #64]	; 0x40
    5bec:	9111      	str	r1, [sp, #68]	; 0x44
    5bee:	930f      	str	r3, [sp, #60]	; 0x3c
    5bf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5bf2:	9f11      	ldr	r7, [sp, #68]	; 0x44
    5bf4:	433a      	orrs	r2, r7
    5bf6:	1e53      	subs	r3, r2, #1
    5bf8:	419a      	sbcs	r2, r3
    5bfa:	2a00      	cmp	r2, #0
    5bfc:	d100      	bne.n	5c00 <_svfprintf_r+0x5a8>
    5bfe:	e365      	b.n	62cc <_svfprintf_r+0xc74>
    5c00:	9807      	ldr	r0, [sp, #28]
    5c02:	2301      	movs	r3, #1
    5c04:	4218      	tst	r0, r3
    5c06:	d100      	bne.n	5c0a <_svfprintf_r+0x5b2>
    5c08:	e360      	b.n	62cc <_svfprintf_r+0xc74>
    5c0a:	aa43      	add	r2, sp, #268	; 0x10c
    5c0c:	2130      	movs	r1, #48	; 0x30
    5c0e:	7011      	strb	r1, [r2, #0]
    5c10:	a916      	add	r1, sp, #88	; 0x58
    5c12:	7809      	ldrb	r1, [r1, #0]
    5c14:	7051      	strb	r1, [r2, #1]
    5c16:	2102      	movs	r1, #2
    5c18:	4308      	orrs	r0, r1
    5c1a:	1c1a      	adds	r2, r3, #0
    5c1c:	9007      	str	r0, [sp, #28]
    5c1e:	1c0b      	adds	r3, r1, #0
    5c20:	e7b0      	b.n	5b84 <_svfprintf_r+0x52c>
    5c22:	780b      	ldrb	r3, [r1, #0]
    5c24:	3101      	adds	r1, #1
    5c26:	2b2a      	cmp	r3, #42	; 0x2a
    5c28:	d101      	bne.n	5c2e <_svfprintf_r+0x5d6>
    5c2a:	f000 ff9d 	bl	6b68 <_svfprintf_r+0x1510>
    5c2e:	2630      	movs	r6, #48	; 0x30
    5c30:	4276      	negs	r6, r6
    5c32:	18f6      	adds	r6, r6, r3
    5c34:	2700      	movs	r7, #0
    5c36:	960a      	str	r6, [sp, #40]	; 0x28
    5c38:	46bb      	mov	fp, r7
    5c3a:	2e09      	cmp	r6, #9
    5c3c:	d900      	bls.n	5c40 <_svfprintf_r+0x5e8>
    5c3e:	e571      	b.n	5724 <_svfprintf_r+0xcc>
    5c40:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    5c42:	46a8      	mov	r8, r5
    5c44:	1c3b      	adds	r3, r7, #0
    5c46:	009d      	lsls	r5, r3, #2
    5c48:	18eb      	adds	r3, r5, r3
    5c4a:	780d      	ldrb	r5, [r1, #0]
    5c4c:	005b      	lsls	r3, r3, #1
    5c4e:	199b      	adds	r3, r3, r6
    5c50:	1c2e      	adds	r6, r5, #0
    5c52:	3e30      	subs	r6, #48	; 0x30
    5c54:	3101      	adds	r1, #1
    5c56:	2e09      	cmp	r6, #9
    5c58:	d9f5      	bls.n	5c46 <_svfprintf_r+0x5ee>
    5c5a:	469b      	mov	fp, r3
    5c5c:	465e      	mov	r6, fp
    5c5e:	1c2b      	adds	r3, r5, #0
    5c60:	4645      	mov	r5, r8
    5c62:	2e00      	cmp	r6, #0
    5c64:	46b3      	mov	fp, r6
    5c66:	db00      	blt.n	5c6a <_svfprintf_r+0x612>
    5c68:	e55c      	b.n	5724 <_svfprintf_r+0xcc>
    5c6a:	2601      	movs	r6, #1
    5c6c:	4276      	negs	r6, r6
    5c6e:	46b3      	mov	fp, r6
    5c70:	e558      	b.n	5724 <_svfprintf_r+0xcc>
    5c72:	9e07      	ldr	r6, [sp, #28]
    5c74:	4667      	mov	r7, ip
    5c76:	433e      	orrs	r6, r7
    5c78:	9607      	str	r6, [sp, #28]
    5c7a:	780b      	ldrb	r3, [r1, #0]
    5c7c:	e551      	b.n	5722 <_svfprintf_r+0xca>
    5c7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5c80:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    5c82:	681b      	ldr	r3, [r3, #0]
    5c84:	3604      	adds	r6, #4
    5c86:	930b      	str	r3, [sp, #44]	; 0x2c
    5c88:	2b00      	cmp	r3, #0
    5c8a:	da00      	bge.n	5c8e <_svfprintf_r+0x636>
    5c8c:	e680      	b.n	5990 <_svfprintf_r+0x338>
    5c8e:	780b      	ldrb	r3, [r1, #0]
    5c90:	960f      	str	r6, [sp, #60]	; 0x3c
    5c92:	e546      	b.n	5722 <_svfprintf_r+0xca>
    5c94:	232b      	movs	r3, #43	; 0x2b
    5c96:	464f      	mov	r7, r9
    5c98:	703b      	strb	r3, [r7, #0]
    5c9a:	780b      	ldrb	r3, [r1, #0]
    5c9c:	e541      	b.n	5722 <_svfprintf_r+0xca>
    5c9e:	9f07      	ldr	r7, [sp, #28]
    5ca0:	4653      	mov	r3, sl
    5ca2:	431f      	orrs	r7, r3
    5ca4:	9707      	str	r7, [sp, #28]
    5ca6:	780b      	ldrb	r3, [r1, #0]
    5ca8:	e53b      	b.n	5722 <_svfprintf_r+0xca>
    5caa:	3b30      	subs	r3, #48	; 0x30
    5cac:	2600      	movs	r6, #0
    5cae:	930a      	str	r3, [sp, #40]	; 0x28
    5cb0:	960b      	str	r6, [sp, #44]	; 0x2c
    5cb2:	1c33      	adds	r3, r6, #0
    5cb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    5cb6:	46a8      	mov	r8, r5
    5cb8:	009d      	lsls	r5, r3, #2
    5cba:	18eb      	adds	r3, r5, r3
    5cbc:	780d      	ldrb	r5, [r1, #0]
    5cbe:	005b      	lsls	r3, r3, #1
    5cc0:	18f3      	adds	r3, r6, r3
    5cc2:	1c2e      	adds	r6, r5, #0
    5cc4:	3e30      	subs	r6, #48	; 0x30
    5cc6:	3101      	adds	r1, #1
    5cc8:	2e09      	cmp	r6, #9
    5cca:	d9f5      	bls.n	5cb8 <_svfprintf_r+0x660>
    5ccc:	930b      	str	r3, [sp, #44]	; 0x2c
    5cce:	1c2b      	adds	r3, r5, #0
    5cd0:	4645      	mov	r5, r8
    5cd2:	e527      	b.n	5724 <_svfprintf_r+0xcc>
    5cd4:	464e      	mov	r6, r9
    5cd6:	7833      	ldrb	r3, [r6, #0]
    5cd8:	2b00      	cmp	r3, #0
    5cda:	d000      	beq.n	5cde <_svfprintf_r+0x686>
    5cdc:	e377      	b.n	63ce <_svfprintf_r+0xd76>
    5cde:	7030      	strb	r0, [r6, #0]
    5ce0:	780b      	ldrb	r3, [r1, #0]
    5ce2:	e51e      	b.n	5722 <_svfprintf_r+0xca>
    5ce4:	9f07      	ldr	r7, [sp, #28]
    5ce6:	2301      	movs	r3, #1
    5ce8:	431f      	orrs	r7, r3
    5cea:	9707      	str	r7, [sp, #28]
    5cec:	780b      	ldrb	r3, [r1, #0]
    5cee:	e518      	b.n	5722 <_svfprintf_r+0xca>
    5cf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5cf2:	1c16      	adds	r6, r2, #0
    5cf4:	6812      	ldr	r2, [r2, #0]
    5cf6:	9316      	str	r3, [sp, #88]	; 0x58
    5cf8:	ab2f      	add	r3, sp, #188	; 0xbc
    5cfa:	468b      	mov	fp, r1
    5cfc:	3604      	adds	r6, #4
    5cfe:	2101      	movs	r1, #1
    5d00:	701a      	strb	r2, [r3, #0]
    5d02:	2000      	movs	r0, #0
    5d04:	2200      	movs	r2, #0
    5d06:	464f      	mov	r7, r9
    5d08:	960f      	str	r6, [sp, #60]	; 0x3c
    5d0a:	7038      	strb	r0, [r7, #0]
    5d0c:	910a      	str	r1, [sp, #40]	; 0x28
    5d0e:	910c      	str	r1, [sp, #48]	; 0x30
    5d10:	9214      	str	r2, [sp, #80]	; 0x50
    5d12:	9218      	str	r2, [sp, #96]	; 0x60
    5d14:	9313      	str	r3, [sp, #76]	; 0x4c
    5d16:	e51d      	b.n	5754 <_svfprintf_r+0xfc>
    5d18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5d1a:	1c1f      	adds	r7, r3, #0
    5d1c:	681b      	ldr	r3, [r3, #0]
    5d1e:	465e      	mov	r6, fp
    5d20:	468b      	mov	fp, r1
    5d22:	9907      	ldr	r1, [sp, #28]
    5d24:	9310      	str	r3, [sp, #64]	; 0x40
    5d26:	2302      	movs	r3, #2
    5d28:	2000      	movs	r0, #0
    5d2a:	4319      	orrs	r1, r3
    5d2c:	aa43      	add	r2, sp, #268	; 0x10c
    5d2e:	3704      	adds	r7, #4
    5d30:	9011      	str	r0, [sp, #68]	; 0x44
    5d32:	9107      	str	r1, [sp, #28]
    5d34:	3078      	adds	r0, #120	; 0x78
    5d36:	2130      	movs	r1, #48	; 0x30
    5d38:	7011      	strb	r1, [r2, #0]
    5d3a:	970f      	str	r7, [sp, #60]	; 0x3c
    5d3c:	7050      	strb	r0, [r2, #1]
    5d3e:	4f3e      	ldr	r7, [pc, #248]	; (5e38 <_svfprintf_r+0x7e0>)
    5d40:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5d42:	9717      	str	r7, [sp, #92]	; 0x5c
    5d44:	1e51      	subs	r1, r2, #1
    5d46:	418a      	sbcs	r2, r1
    5d48:	9016      	str	r0, [sp, #88]	; 0x58
    5d4a:	e71b      	b.n	5b84 <_svfprintf_r+0x52c>
    5d4c:	9b07      	ldr	r3, [sp, #28]
    5d4e:	4303      	orrs	r3, r0
    5d50:	9307      	str	r3, [sp, #28]
    5d52:	780b      	ldrb	r3, [r1, #0]
    5d54:	e4e5      	b.n	5722 <_svfprintf_r+0xca>
    5d56:	465e      	mov	r6, fp
    5d58:	4648      	mov	r0, r9
    5d5a:	468b      	mov	fp, r1
    5d5c:	2100      	movs	r1, #0
    5d5e:	7001      	strb	r1, [r0, #0]
    5d60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5d62:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5d64:	6812      	ldr	r2, [r2, #0]
    5d66:	9316      	str	r3, [sp, #88]	; 0x58
    5d68:	3704      	adds	r7, #4
    5d6a:	9213      	str	r2, [sp, #76]	; 0x4c
    5d6c:	2a00      	cmp	r2, #0
    5d6e:	d101      	bne.n	5d74 <_svfprintf_r+0x71c>
    5d70:	f000 fe40 	bl	69f4 <_svfprintf_r+0x139c>
    5d74:	2e00      	cmp	r6, #0
    5d76:	da01      	bge.n	5d7c <_svfprintf_r+0x724>
    5d78:	f000 fdf8 	bl	696c <_svfprintf_r+0x1314>
    5d7c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    5d7e:	2100      	movs	r1, #0
    5d80:	1c32      	adds	r2, r6, #0
    5d82:	f003 fee3 	bl	9b4c <memchr>
    5d86:	2800      	cmp	r0, #0
    5d88:	d101      	bne.n	5d8e <_svfprintf_r+0x736>
    5d8a:	f000 fe88 	bl	6a9e <_svfprintf_r+0x1446>
    5d8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5d90:	1a80      	subs	r0, r0, r2
    5d92:	900c      	str	r0, [sp, #48]	; 0x30
    5d94:	42b0      	cmp	r0, r6
    5d96:	dc01      	bgt.n	5d9c <_svfprintf_r+0x744>
    5d98:	f000 fc7a 	bl	6690 <_svfprintf_r+0x1038>
    5d9c:	960a      	str	r6, [sp, #40]	; 0x28
    5d9e:	464b      	mov	r3, r9
    5da0:	960c      	str	r6, [sp, #48]	; 0x30
    5da2:	2600      	movs	r6, #0
    5da4:	781a      	ldrb	r2, [r3, #0]
    5da6:	970f      	str	r7, [sp, #60]	; 0x3c
    5da8:	9614      	str	r6, [sp, #80]	; 0x50
    5daa:	9618      	str	r6, [sp, #96]	; 0x60
    5dac:	e687      	b.n	5abe <_svfprintf_r+0x466>
    5dae:	465e      	mov	r6, fp
    5db0:	4f21      	ldr	r7, [pc, #132]	; (5e38 <_svfprintf_r+0x7e0>)
    5db2:	468b      	mov	fp, r1
    5db4:	9907      	ldr	r1, [sp, #28]
    5db6:	2220      	movs	r2, #32
    5db8:	9316      	str	r3, [sp, #88]	; 0x58
    5dba:	9717      	str	r7, [sp, #92]	; 0x5c
    5dbc:	400a      	ands	r2, r1
    5dbe:	d000      	beq.n	5dc2 <_svfprintf_r+0x76a>
    5dc0:	e70b      	b.n	5bda <_svfprintf_r+0x582>
    5dc2:	9907      	ldr	r1, [sp, #28]
    5dc4:	2310      	movs	r3, #16
    5dc6:	4019      	ands	r1, r3
    5dc8:	d100      	bne.n	5dcc <_svfprintf_r+0x774>
    5dca:	e364      	b.n	6496 <_svfprintf_r+0xe3e>
    5dcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    5dce:	6809      	ldr	r1, [r1, #0]
    5dd0:	9211      	str	r2, [sp, #68]	; 0x44
    5dd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5dd4:	3204      	adds	r2, #4
    5dd6:	9110      	str	r1, [sp, #64]	; 0x40
    5dd8:	920f      	str	r2, [sp, #60]	; 0x3c
    5dda:	e709      	b.n	5bf0 <_svfprintf_r+0x598>
    5ddc:	780b      	ldrb	r3, [r1, #0]
    5dde:	2b6c      	cmp	r3, #108	; 0x6c
    5de0:	d101      	bne.n	5de6 <_svfprintf_r+0x78e>
    5de2:	f000 fc4a 	bl	667a <_svfprintf_r+0x1022>
    5de6:	9e07      	ldr	r6, [sp, #28]
    5de8:	2710      	movs	r7, #16
    5dea:	433e      	orrs	r6, r7
    5dec:	9607      	str	r6, [sp, #28]
    5dee:	e498      	b.n	5722 <_svfprintf_r+0xca>
    5df0:	468b      	mov	fp, r1
    5df2:	9907      	ldr	r1, [sp, #28]
    5df4:	0689      	lsls	r1, r1, #26
    5df6:	d400      	bmi.n	5dfa <_svfprintf_r+0x7a2>
    5df8:	e341      	b.n	647e <_svfprintf_r+0xe26>
    5dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5dfc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    5dfe:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5e00:	6813      	ldr	r3, [r2, #0]
    5e02:	3704      	adds	r7, #4
    5e04:	17f2      	asrs	r2, r6, #31
    5e06:	601e      	str	r6, [r3, #0]
    5e08:	605a      	str	r2, [r3, #4]
    5e0a:	970f      	str	r7, [sp, #60]	; 0x3c
    5e0c:	e44d      	b.n	56aa <_svfprintf_r+0x52>
    5e0e:	465e      	mov	r6, fp
    5e10:	9316      	str	r3, [sp, #88]	; 0x58
    5e12:	468b      	mov	fp, r1
    5e14:	e5f5      	b.n	5a02 <_svfprintf_r+0x3aa>
    5e16:	465e      	mov	r6, fp
    5e18:	9316      	str	r3, [sp, #88]	; 0x58
    5e1a:	468b      	mov	fp, r1
    5e1c:	e6bd      	b.n	5b9a <_svfprintf_r+0x542>
    5e1e:	465e      	mov	r6, fp
    5e20:	9316      	str	r3, [sp, #88]	; 0x58
    5e22:	468b      	mov	fp, r1
    5e24:	e699      	b.n	5b5a <_svfprintf_r+0x502>
    5e26:	46c0      	nop			; (mov r8, r8)
	...
    5e30:	0000e8f8 	.word	0x0000e8f8
    5e34:	0000e908 	.word	0x0000e908
    5e38:	0000e91c 	.word	0x0000e91c
    5e3c:	9e16      	ldr	r6, [sp, #88]	; 0x58
    5e3e:	2e65      	cmp	r6, #101	; 0x65
    5e40:	dc00      	bgt.n	5e44 <_svfprintf_r+0x7ec>
    5e42:	e0bb      	b.n	5fbc <_svfprintf_r+0x964>
    5e44:	981a      	ldr	r0, [sp, #104]	; 0x68
    5e46:	991b      	ldr	r1, [sp, #108]	; 0x6c
    5e48:	4bc8      	ldr	r3, [pc, #800]	; (616c <_svfprintf_r+0xb14>)
    5e4a:	4ac7      	ldr	r2, [pc, #796]	; (6168 <_svfprintf_r+0xb10>)
    5e4c:	f007 fee2 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    5e50:	2800      	cmp	r0, #0
    5e52:	d100      	bne.n	5e56 <_svfprintf_r+0x7fe>
    5e54:	e133      	b.n	60be <_svfprintf_r+0xa66>
    5e56:	4bc6      	ldr	r3, [pc, #792]	; (6170 <_svfprintf_r+0xb18>)
    5e58:	603b      	str	r3, [r7, #0]
    5e5a:	2301      	movs	r3, #1
    5e5c:	607b      	str	r3, [r7, #4]
    5e5e:	68a3      	ldr	r3, [r4, #8]
    5e60:	3301      	adds	r3, #1
    5e62:	60a3      	str	r3, [r4, #8]
    5e64:	6863      	ldr	r3, [r4, #4]
    5e66:	3301      	adds	r3, #1
    5e68:	6063      	str	r3, [r4, #4]
    5e6a:	2b07      	cmp	r3, #7
    5e6c:	dd00      	ble.n	5e70 <_svfprintf_r+0x818>
    5e6e:	e3a9      	b.n	65c4 <_svfprintf_r+0xf6c>
    5e70:	1c3b      	adds	r3, r7, #0
    5e72:	3308      	adds	r3, #8
    5e74:	9a42      	ldr	r2, [sp, #264]	; 0x108
    5e76:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    5e78:	42ba      	cmp	r2, r7
    5e7a:	db03      	blt.n	5e84 <_svfprintf_r+0x82c>
    5e7c:	9807      	ldr	r0, [sp, #28]
    5e7e:	07c0      	lsls	r0, r0, #31
    5e80:	d400      	bmi.n	5e84 <_svfprintf_r+0x82c>
    5e82:	e52e      	b.n	58e2 <_svfprintf_r+0x28a>
    5e84:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    5e86:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    5e88:	605a      	str	r2, [r3, #4]
    5e8a:	68a2      	ldr	r2, [r4, #8]
    5e8c:	9919      	ldr	r1, [sp, #100]	; 0x64
    5e8e:	1952      	adds	r2, r2, r5
    5e90:	6019      	str	r1, [r3, #0]
    5e92:	60a2      	str	r2, [r4, #8]
    5e94:	6862      	ldr	r2, [r4, #4]
    5e96:	3201      	adds	r2, #1
    5e98:	6062      	str	r2, [r4, #4]
    5e9a:	2a07      	cmp	r2, #7
    5e9c:	dd01      	ble.n	5ea2 <_svfprintf_r+0x84a>
    5e9e:	f000 fc1a 	bl	66d6 <_svfprintf_r+0x107e>
    5ea2:	1c1a      	adds	r2, r3, #0
    5ea4:	3208      	adds	r2, #8
    5ea6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5ea8:	3d01      	subs	r5, #1
    5eaa:	2d00      	cmp	r5, #0
    5eac:	dc00      	bgt.n	5eb0 <_svfprintf_r+0x858>
    5eae:	e379      	b.n	65a4 <_svfprintf_r+0xf4c>
    5eb0:	2d10      	cmp	r5, #16
    5eb2:	dc00      	bgt.n	5eb6 <_svfprintf_r+0x85e>
    5eb4:	e2a9      	b.n	640a <_svfprintf_r+0xdb2>
    5eb6:	4eaf      	ldr	r6, [pc, #700]	; (6174 <_svfprintf_r+0xb1c>)
    5eb8:	2710      	movs	r7, #16
    5eba:	46b0      	mov	r8, r6
    5ebc:	1c3e      	adds	r6, r7, #0
    5ebe:	4446      	add	r6, r8
    5ec0:	e006      	b.n	5ed0 <_svfprintf_r+0x878>
    5ec2:	3208      	adds	r2, #8
    5ec4:	1c13      	adds	r3, r2, #0
    5ec6:	3308      	adds	r3, #8
    5ec8:	3d10      	subs	r5, #16
    5eca:	2d10      	cmp	r5, #16
    5ecc:	dc00      	bgt.n	5ed0 <_svfprintf_r+0x878>
    5ece:	e2a0      	b.n	6412 <_svfprintf_r+0xdba>
    5ed0:	68a3      	ldr	r3, [r4, #8]
    5ed2:	3310      	adds	r3, #16
    5ed4:	6016      	str	r6, [r2, #0]
    5ed6:	6057      	str	r7, [r2, #4]
    5ed8:	60a3      	str	r3, [r4, #8]
    5eda:	6863      	ldr	r3, [r4, #4]
    5edc:	3301      	adds	r3, #1
    5ede:	6063      	str	r3, [r4, #4]
    5ee0:	2b07      	cmp	r3, #7
    5ee2:	ddee      	ble.n	5ec2 <_svfprintf_r+0x86a>
    5ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
    5ee6:	9908      	ldr	r1, [sp, #32]
    5ee8:	1c22      	adds	r2, r4, #0
    5eea:	f004 fe77 	bl	abdc <__ssprint_r>
    5eee:	2800      	cmp	r0, #0
    5ef0:	d000      	beq.n	5ef4 <_svfprintf_r+0x89c>
    5ef2:	e568      	b.n	59c6 <_svfprintf_r+0x36e>
    5ef4:	ab21      	add	r3, sp, #132	; 0x84
    5ef6:	aa1f      	add	r2, sp, #124	; 0x7c
    5ef8:	e7e6      	b.n	5ec8 <_svfprintf_r+0x870>
    5efa:	2b00      	cmp	r3, #0
    5efc:	d000      	beq.n	5f00 <_svfprintf_r+0x8a8>
    5efe:	e0ba      	b.n	6076 <_svfprintf_r+0xa1e>
    5f00:	9807      	ldr	r0, [sp, #28]
    5f02:	07c0      	lsls	r0, r0, #31
    5f04:	d400      	bmi.n	5f08 <_svfprintf_r+0x8b0>
    5f06:	e12c      	b.n	6162 <_svfprintf_r+0xb0a>
    5f08:	2127      	movs	r1, #39	; 0x27
    5f0a:	ab2f      	add	r3, sp, #188	; 0xbc
    5f0c:	2230      	movs	r2, #48	; 0x30
    5f0e:	545a      	strb	r2, [r3, r1]
    5f10:	185b      	adds	r3, r3, r1
    5f12:	1ae1      	subs	r1, r4, r3
    5f14:	910c      	str	r1, [sp, #48]	; 0x30
    5f16:	9313      	str	r3, [sp, #76]	; 0x4c
    5f18:	e5c7      	b.n	5aaa <_svfprintf_r+0x452>
    5f1a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
    5f1e:	1a3e      	subs	r6, r7, r0
    5f20:	2e00      	cmp	r6, #0
    5f22:	dc00      	bgt.n	5f26 <_svfprintf_r+0x8ce>
    5f24:	e487      	b.n	5836 <_svfprintf_r+0x1de>
    5f26:	2e10      	cmp	r6, #16
    5f28:	dc01      	bgt.n	5f2e <_svfprintf_r+0x8d6>
    5f2a:	f000 fd9b 	bl	6a64 <_svfprintf_r+0x140c>
    5f2e:	4a91      	ldr	r2, [pc, #580]	; (6174 <_svfprintf_r+0xb1c>)
    5f30:	1c2b      	adds	r3, r5, #0
    5f32:	2510      	movs	r5, #16
    5f34:	1c2f      	adds	r7, r5, #0
    5f36:	4690      	mov	r8, r2
    5f38:	46a9      	mov	r9, r5
    5f3a:	4447      	add	r7, r8
    5f3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5f3e:	e005      	b.n	5f4c <_svfprintf_r+0x8f4>
    5f40:	3308      	adds	r3, #8
    5f42:	1c1a      	adds	r2, r3, #0
    5f44:	3e10      	subs	r6, #16
    5f46:	3208      	adds	r2, #8
    5f48:	2e10      	cmp	r6, #16
    5f4a:	dd17      	ble.n	5f7c <_svfprintf_r+0x924>
    5f4c:	68a2      	ldr	r2, [r4, #8]
    5f4e:	4648      	mov	r0, r9
    5f50:	3210      	adds	r2, #16
    5f52:	601f      	str	r7, [r3, #0]
    5f54:	6058      	str	r0, [r3, #4]
    5f56:	60a2      	str	r2, [r4, #8]
    5f58:	6862      	ldr	r2, [r4, #4]
    5f5a:	3201      	adds	r2, #1
    5f5c:	6062      	str	r2, [r4, #4]
    5f5e:	2a07      	cmp	r2, #7
    5f60:	ddee      	ble.n	5f40 <_svfprintf_r+0x8e8>
    5f62:	1c28      	adds	r0, r5, #0
    5f64:	9908      	ldr	r1, [sp, #32]
    5f66:	1c22      	adds	r2, r4, #0
    5f68:	f004 fe38 	bl	abdc <__ssprint_r>
    5f6c:	2800      	cmp	r0, #0
    5f6e:	d000      	beq.n	5f72 <_svfprintf_r+0x91a>
    5f70:	e529      	b.n	59c6 <_svfprintf_r+0x36e>
    5f72:	3e10      	subs	r6, #16
    5f74:	aa21      	add	r2, sp, #132	; 0x84
    5f76:	ab1f      	add	r3, sp, #124	; 0x7c
    5f78:	2e10      	cmp	r6, #16
    5f7a:	dce7      	bgt.n	5f4c <_svfprintf_r+0x8f4>
    5f7c:	1c15      	adds	r5, r2, #0
    5f7e:	2110      	movs	r1, #16
    5f80:	1c0a      	adds	r2, r1, #0
    5f82:	4442      	add	r2, r8
    5f84:	605e      	str	r6, [r3, #4]
    5f86:	601a      	str	r2, [r3, #0]
    5f88:	68a3      	ldr	r3, [r4, #8]
    5f8a:	18f6      	adds	r6, r6, r3
    5f8c:	6863      	ldr	r3, [r4, #4]
    5f8e:	3301      	adds	r3, #1
    5f90:	60a6      	str	r6, [r4, #8]
    5f92:	6063      	str	r3, [r4, #4]
    5f94:	2b07      	cmp	r3, #7
    5f96:	dc00      	bgt.n	5f9a <_svfprintf_r+0x942>
    5f98:	e44d      	b.n	5836 <_svfprintf_r+0x1de>
    5f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
    5f9c:	9908      	ldr	r1, [sp, #32]
    5f9e:	1c22      	adds	r2, r4, #0
    5fa0:	f004 fe1c 	bl	abdc <__ssprint_r>
    5fa4:	2800      	cmp	r0, #0
    5fa6:	d000      	beq.n	5faa <_svfprintf_r+0x952>
    5fa8:	e50d      	b.n	59c6 <_svfprintf_r+0x36e>
    5faa:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5fae:	1ad6      	subs	r6, r2, r3
    5fb0:	ad1f      	add	r5, sp, #124	; 0x7c
    5fb2:	2e00      	cmp	r6, #0
    5fb4:	dd00      	ble.n	5fb8 <_svfprintf_r+0x960>
    5fb6:	e444      	b.n	5842 <_svfprintf_r+0x1ea>
    5fb8:	1c2f      	adds	r7, r5, #0
    5fba:	e47f      	b.n	58bc <_svfprintf_r+0x264>
    5fbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    5fbe:	2801      	cmp	r0, #1
    5fc0:	dc00      	bgt.n	5fc4 <_svfprintf_r+0x96c>
    5fc2:	e1b1      	b.n	6328 <_svfprintf_r+0xcd0>
    5fc4:	2301      	movs	r3, #1
    5fc6:	607b      	str	r3, [r7, #4]
    5fc8:	68a3      	ldr	r3, [r4, #8]
    5fca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5fcc:	3301      	adds	r3, #1
    5fce:	603a      	str	r2, [r7, #0]
    5fd0:	60a3      	str	r3, [r4, #8]
    5fd2:	6863      	ldr	r3, [r4, #4]
    5fd4:	3301      	adds	r3, #1
    5fd6:	6063      	str	r3, [r4, #4]
    5fd8:	2b07      	cmp	r3, #7
    5fda:	dd00      	ble.n	5fde <_svfprintf_r+0x986>
    5fdc:	e1ce      	b.n	637c <_svfprintf_r+0xd24>
    5fde:	3708      	adds	r7, #8
    5fe0:	1c3d      	adds	r5, r7, #0
    5fe2:	3508      	adds	r5, #8
    5fe4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    5fe6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    5fe8:	603b      	str	r3, [r7, #0]
    5fea:	68a3      	ldr	r3, [r4, #8]
    5fec:	199b      	adds	r3, r3, r6
    5fee:	607e      	str	r6, [r7, #4]
    5ff0:	60a3      	str	r3, [r4, #8]
    5ff2:	6863      	ldr	r3, [r4, #4]
    5ff4:	3301      	adds	r3, #1
    5ff6:	6063      	str	r3, [r4, #4]
    5ff8:	2b07      	cmp	r3, #7
    5ffa:	dd00      	ble.n	5ffe <_svfprintf_r+0x9a6>
    5ffc:	e1b2      	b.n	6364 <_svfprintf_r+0xd0c>
    5ffe:	1c2f      	adds	r7, r5, #0
    6000:	3708      	adds	r7, #8
    6002:	981a      	ldr	r0, [sp, #104]	; 0x68
    6004:	991b      	ldr	r1, [sp, #108]	; 0x6c
    6006:	4b59      	ldr	r3, [pc, #356]	; (616c <_svfprintf_r+0xb14>)
    6008:	4a57      	ldr	r2, [pc, #348]	; (6168 <_svfprintf_r+0xb10>)
    600a:	f007 fe03 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    600e:	2800      	cmp	r0, #0
    6010:	d000      	beq.n	6014 <_svfprintf_r+0x9bc>
    6012:	e10d      	b.n	6230 <_svfprintf_r+0xbd8>
    6014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6016:	3301      	adds	r3, #1
    6018:	602b      	str	r3, [r5, #0]
    601a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    601c:	68a2      	ldr	r2, [r4, #8]
    601e:	3b01      	subs	r3, #1
    6020:	606b      	str	r3, [r5, #4]
    6022:	189b      	adds	r3, r3, r2
    6024:	60a3      	str	r3, [r4, #8]
    6026:	6863      	ldr	r3, [r4, #4]
    6028:	3301      	adds	r3, #1
    602a:	6063      	str	r3, [r4, #4]
    602c:	2b07      	cmp	r3, #7
    602e:	dd00      	ble.n	6032 <_svfprintf_r+0x9da>
    6030:	e18c      	b.n	634c <_svfprintf_r+0xcf4>
    6032:	1c3b      	adds	r3, r7, #0
    6034:	3308      	adds	r3, #8
    6036:	aa3e      	add	r2, sp, #248	; 0xf8
    6038:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    603a:	603a      	str	r2, [r7, #0]
    603c:	68a2      	ldr	r2, [r4, #8]
    603e:	607e      	str	r6, [r7, #4]
    6040:	1992      	adds	r2, r2, r6
    6042:	60a2      	str	r2, [r4, #8]
    6044:	6862      	ldr	r2, [r4, #4]
    6046:	3201      	adds	r2, #1
    6048:	6062      	str	r2, [r4, #4]
    604a:	2a07      	cmp	r2, #7
    604c:	dc00      	bgt.n	6050 <_svfprintf_r+0x9f8>
    604e:	e448      	b.n	58e2 <_svfprintf_r+0x28a>
    6050:	9809      	ldr	r0, [sp, #36]	; 0x24
    6052:	9908      	ldr	r1, [sp, #32]
    6054:	1c22      	adds	r2, r4, #0
    6056:	f004 fdc1 	bl	abdc <__ssprint_r>
    605a:	2800      	cmp	r0, #0
    605c:	d000      	beq.n	6060 <_svfprintf_r+0xa08>
    605e:	e4b2      	b.n	59c6 <_svfprintf_r+0x36e>
    6060:	ab1f      	add	r3, sp, #124	; 0x7c
    6062:	e43e      	b.n	58e2 <_svfprintf_r+0x28a>
    6064:	9809      	ldr	r0, [sp, #36]	; 0x24
    6066:	9908      	ldr	r1, [sp, #32]
    6068:	1c22      	adds	r2, r4, #0
    606a:	f004 fdb7 	bl	abdc <__ssprint_r>
    606e:	2800      	cmp	r0, #0
    6070:	d100      	bne.n	6074 <_svfprintf_r+0xa1c>
    6072:	e47f      	b.n	5974 <_svfprintf_r+0x31c>
    6074:	e4a7      	b.n	59c6 <_svfprintf_r+0x36e>
    6076:	920c      	str	r2, [sp, #48]	; 0x30
    6078:	9413      	str	r4, [sp, #76]	; 0x4c
    607a:	e516      	b.n	5aaa <_svfprintf_r+0x452>
    607c:	9809      	ldr	r0, [sp, #36]	; 0x24
    607e:	9908      	ldr	r1, [sp, #32]
    6080:	1c22      	adds	r2, r4, #0
    6082:	f004 fdab 	bl	abdc <__ssprint_r>
    6086:	2800      	cmp	r0, #0
    6088:	d000      	beq.n	608c <_svfprintf_r+0xa34>
    608a:	e49c      	b.n	59c6 <_svfprintf_r+0x36e>
    608c:	af1f      	add	r7, sp, #124	; 0x7c
    608e:	f7ff fc15 	bl	58bc <_svfprintf_r+0x264>
    6092:	9809      	ldr	r0, [sp, #36]	; 0x24
    6094:	9908      	ldr	r1, [sp, #32]
    6096:	1c22      	adds	r2, r4, #0
    6098:	f004 fda0 	bl	abdc <__ssprint_r>
    609c:	2800      	cmp	r0, #0
    609e:	d000      	beq.n	60a2 <_svfprintf_r+0xa4a>
    60a0:	e491      	b.n	59c6 <_svfprintf_r+0x36e>
    60a2:	ad1f      	add	r5, sp, #124	; 0x7c
    60a4:	f7ff fbb1 	bl	580a <_svfprintf_r+0x1b2>
    60a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    60aa:	9908      	ldr	r1, [sp, #32]
    60ac:	1c22      	adds	r2, r4, #0
    60ae:	f004 fd95 	bl	abdc <__ssprint_r>
    60b2:	2800      	cmp	r0, #0
    60b4:	d000      	beq.n	60b8 <_svfprintf_r+0xa60>
    60b6:	e486      	b.n	59c6 <_svfprintf_r+0x36e>
    60b8:	ad1f      	add	r5, sp, #124	; 0x7c
    60ba:	f7ff fbb8 	bl	582e <_svfprintf_r+0x1d6>
    60be:	9d42      	ldr	r5, [sp, #264]	; 0x108
    60c0:	2d00      	cmp	r5, #0
    60c2:	dc00      	bgt.n	60c6 <_svfprintf_r+0xa6e>
    60c4:	e289      	b.n	65da <_svfprintf_r+0xf82>
    60c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    60c8:	468a      	mov	sl, r1
    60ca:	990d      	ldr	r1, [sp, #52]	; 0x34
    60cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    60ce:	448a      	add	sl, r1
    60d0:	4652      	mov	r2, sl
    60d2:	9e18      	ldr	r6, [sp, #96]	; 0x60
    60d4:	1ad5      	subs	r5, r2, r3
    60d6:	42b5      	cmp	r5, r6
    60d8:	dd00      	ble.n	60dc <_svfprintf_r+0xa84>
    60da:	1c35      	adds	r5, r6, #0
    60dc:	2d00      	cmp	r5, #0
    60de:	dd0d      	ble.n	60fc <_svfprintf_r+0xaa4>
    60e0:	68a3      	ldr	r3, [r4, #8]
    60e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    60e4:	18eb      	adds	r3, r5, r3
    60e6:	6038      	str	r0, [r7, #0]
    60e8:	607d      	str	r5, [r7, #4]
    60ea:	60a3      	str	r3, [r4, #8]
    60ec:	6863      	ldr	r3, [r4, #4]
    60ee:	3301      	adds	r3, #1
    60f0:	6063      	str	r3, [r4, #4]
    60f2:	3708      	adds	r7, #8
    60f4:	2b07      	cmp	r3, #7
    60f6:	dd01      	ble.n	60fc <_svfprintf_r+0xaa4>
    60f8:	f000 fc4e 	bl	6998 <_svfprintf_r+0x1340>
    60fc:	43eb      	mvns	r3, r5
    60fe:	17db      	asrs	r3, r3, #31
    6100:	9918      	ldr	r1, [sp, #96]	; 0x60
    6102:	401d      	ands	r5, r3
    6104:	1b4d      	subs	r5, r1, r5
    6106:	2d00      	cmp	r5, #0
    6108:	dc01      	bgt.n	610e <_svfprintf_r+0xab6>
    610a:	f000 fc2d 	bl	6968 <_svfprintf_r+0x1310>
    610e:	2d10      	cmp	r5, #16
    6110:	dc01      	bgt.n	6116 <_svfprintf_r+0xabe>
    6112:	f000 fcfd 	bl	6b10 <_svfprintf_r+0x14b8>
    6116:	4a17      	ldr	r2, [pc, #92]	; (6174 <_svfprintf_r+0xb1c>)
    6118:	2310      	movs	r3, #16
    611a:	1c1e      	adds	r6, r3, #0
    611c:	4690      	mov	r8, r2
    611e:	4699      	mov	r9, r3
    6120:	4446      	add	r6, r8
    6122:	1c3b      	adds	r3, r7, #0
    6124:	9f09      	ldr	r7, [sp, #36]	; 0x24
    6126:	e006      	b.n	6136 <_svfprintf_r+0xade>
    6128:	3308      	adds	r3, #8
    612a:	1c1a      	adds	r2, r3, #0
    612c:	3208      	adds	r2, #8
    612e:	3d10      	subs	r5, #16
    6130:	2d10      	cmp	r5, #16
    6132:	dc00      	bgt.n	6136 <_svfprintf_r+0xade>
    6134:	e1bd      	b.n	64b2 <_svfprintf_r+0xe5a>
    6136:	68a2      	ldr	r2, [r4, #8]
    6138:	4648      	mov	r0, r9
    613a:	3210      	adds	r2, #16
    613c:	601e      	str	r6, [r3, #0]
    613e:	6058      	str	r0, [r3, #4]
    6140:	60a2      	str	r2, [r4, #8]
    6142:	6862      	ldr	r2, [r4, #4]
    6144:	3201      	adds	r2, #1
    6146:	6062      	str	r2, [r4, #4]
    6148:	2a07      	cmp	r2, #7
    614a:	dded      	ble.n	6128 <_svfprintf_r+0xad0>
    614c:	1c38      	adds	r0, r7, #0
    614e:	9908      	ldr	r1, [sp, #32]
    6150:	1c22      	adds	r2, r4, #0
    6152:	f004 fd43 	bl	abdc <__ssprint_r>
    6156:	2800      	cmp	r0, #0
    6158:	d000      	beq.n	615c <_svfprintf_r+0xb04>
    615a:	e434      	b.n	59c6 <_svfprintf_r+0x36e>
    615c:	aa21      	add	r2, sp, #132	; 0x84
    615e:	ab1f      	add	r3, sp, #124	; 0x7c
    6160:	e7e5      	b.n	612e <_svfprintf_r+0xad6>
    6162:	930c      	str	r3, [sp, #48]	; 0x30
    6164:	9413      	str	r4, [sp, #76]	; 0x4c
    6166:	e4a0      	b.n	5aaa <_svfprintf_r+0x452>
	...
    6170:	0000e938 	.word	0x0000e938
    6174:	0000dea0 	.word	0x0000dea0
    6178:	9413      	str	r4, [sp, #76]	; 0x4c
    617a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    617c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    617e:	270f      	movs	r7, #15
    6180:	1c21      	adds	r1, r4, #0
    6182:	46ac      	mov	ip, r5
    6184:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    6186:	1c10      	adds	r0, r2, #0
    6188:	4038      	ands	r0, r7
    618a:	5c28      	ldrb	r0, [r5, r0]
    618c:	3901      	subs	r1, #1
    618e:	0915      	lsrs	r5, r2, #4
    6190:	46a8      	mov	r8, r5
    6192:	7008      	strb	r0, [r1, #0]
    6194:	0718      	lsls	r0, r3, #28
    6196:	1c05      	adds	r5, r0, #0
    6198:	4640      	mov	r0, r8
    619a:	4305      	orrs	r5, r0
    619c:	0918      	lsrs	r0, r3, #4
    619e:	1c2a      	adds	r2, r5, #0
    61a0:	1c03      	adds	r3, r0, #0
    61a2:	4305      	orrs	r5, r0
    61a4:	d1ee      	bne.n	6184 <_svfprintf_r+0xb2c>
    61a6:	1a67      	subs	r7, r4, r1
    61a8:	9113      	str	r1, [sp, #76]	; 0x4c
    61aa:	4665      	mov	r5, ip
    61ac:	9210      	str	r2, [sp, #64]	; 0x40
    61ae:	9311      	str	r3, [sp, #68]	; 0x44
    61b0:	970c      	str	r7, [sp, #48]	; 0x30
    61b2:	e47a      	b.n	5aaa <_svfprintf_r+0x452>
    61b4:	9911      	ldr	r1, [sp, #68]	; 0x44
    61b6:	2900      	cmp	r1, #0
    61b8:	d102      	bne.n	61c0 <_svfprintf_r+0xb68>
    61ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
    61bc:	2a09      	cmp	r2, #9
    61be:	d920      	bls.n	6202 <_svfprintf_r+0xbaa>
    61c0:	46aa      	mov	sl, r5
    61c2:	46b0      	mov	r8, r6
    61c4:	9413      	str	r4, [sp, #76]	; 0x4c
    61c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
    61c8:	9e11      	ldr	r6, [sp, #68]	; 0x44
    61ca:	1c27      	adds	r7, r4, #0
    61cc:	1c28      	adds	r0, r5, #0
    61ce:	1c31      	adds	r1, r6, #0
    61d0:	220a      	movs	r2, #10
    61d2:	2300      	movs	r3, #0
    61d4:	f007 fd52 	bl	dc7c <____aeabi_uldivmod_from_thumb>
    61d8:	3f01      	subs	r7, #1
    61da:	3230      	adds	r2, #48	; 0x30
    61dc:	703a      	strb	r2, [r7, #0]
    61de:	1c28      	adds	r0, r5, #0
    61e0:	1c31      	adds	r1, r6, #0
    61e2:	220a      	movs	r2, #10
    61e4:	2300      	movs	r3, #0
    61e6:	f007 fd49 	bl	dc7c <____aeabi_uldivmod_from_thumb>
    61ea:	1c05      	adds	r5, r0, #0
    61ec:	1c0e      	adds	r6, r1, #0
    61ee:	4308      	orrs	r0, r1
    61f0:	d1ec      	bne.n	61cc <_svfprintf_r+0xb74>
    61f2:	1be1      	subs	r1, r4, r7
    61f4:	9510      	str	r5, [sp, #64]	; 0x40
    61f6:	9611      	str	r6, [sp, #68]	; 0x44
    61f8:	9713      	str	r7, [sp, #76]	; 0x4c
    61fa:	4655      	mov	r5, sl
    61fc:	4646      	mov	r6, r8
    61fe:	910c      	str	r1, [sp, #48]	; 0x30
    6200:	e453      	b.n	5aaa <_svfprintf_r+0x452>
    6202:	ab2f      	add	r3, sp, #188	; 0xbc
    6204:	3230      	adds	r2, #48	; 0x30
    6206:	3127      	adds	r1, #39	; 0x27
    6208:	545a      	strb	r2, [r3, r1]
    620a:	3327      	adds	r3, #39	; 0x27
    620c:	1ae7      	subs	r7, r4, r3
    620e:	970c      	str	r7, [sp, #48]	; 0x30
    6210:	9313      	str	r3, [sp, #76]	; 0x4c
    6212:	e44a      	b.n	5aaa <_svfprintf_r+0x452>
    6214:	9809      	ldr	r0, [sp, #36]	; 0x24
    6216:	9908      	ldr	r1, [sp, #32]
    6218:	1c22      	adds	r2, r4, #0
    621a:	f004 fcdf 	bl	abdc <__ssprint_r>
    621e:	2800      	cmp	r0, #0
    6220:	d001      	beq.n	6226 <_svfprintf_r+0xbce>
    6222:	f7ff fbd0 	bl	59c6 <_svfprintf_r+0x36e>
    6226:	4649      	mov	r1, r9
    6228:	780a      	ldrb	r2, [r1, #0]
    622a:	ad1f      	add	r5, sp, #124	; 0x7c
    622c:	f7ff fadc 	bl	57e8 <_svfprintf_r+0x190>
    6230:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    6232:	3e01      	subs	r6, #1
    6234:	2e00      	cmp	r6, #0
    6236:	dc00      	bgt.n	623a <_svfprintf_r+0xbe2>
    6238:	e226      	b.n	6688 <_svfprintf_r+0x1030>
    623a:	2e10      	cmp	r6, #16
    623c:	dc01      	bgt.n	6242 <_svfprintf_r+0xbea>
    623e:	f000 fc63 	bl	6b08 <_svfprintf_r+0x14b0>
    6242:	49d6      	ldr	r1, [pc, #856]	; (659c <_svfprintf_r+0xf44>)
    6244:	2210      	movs	r2, #16
    6246:	4688      	mov	r8, r1
    6248:	4691      	mov	r9, r2
    624a:	1c2b      	adds	r3, r5, #0
    624c:	44c1      	add	r9, r8
    624e:	4692      	mov	sl, r2
    6250:	9f09      	ldr	r7, [sp, #36]	; 0x24
    6252:	9d08      	ldr	r5, [sp, #32]
    6254:	e005      	b.n	6262 <_svfprintf_r+0xc0a>
    6256:	3308      	adds	r3, #8
    6258:	1c1a      	adds	r2, r3, #0
    625a:	3e10      	subs	r6, #16
    625c:	3208      	adds	r2, #8
    625e:	2e10      	cmp	r6, #16
    6260:	dd19      	ble.n	6296 <_svfprintf_r+0xc3e>
    6262:	68a2      	ldr	r2, [r4, #8]
    6264:	4648      	mov	r0, r9
    6266:	3210      	adds	r2, #16
    6268:	4651      	mov	r1, sl
    626a:	6018      	str	r0, [r3, #0]
    626c:	6059      	str	r1, [r3, #4]
    626e:	60a2      	str	r2, [r4, #8]
    6270:	6862      	ldr	r2, [r4, #4]
    6272:	3201      	adds	r2, #1
    6274:	6062      	str	r2, [r4, #4]
    6276:	2a07      	cmp	r2, #7
    6278:	dded      	ble.n	6256 <_svfprintf_r+0xbfe>
    627a:	1c38      	adds	r0, r7, #0
    627c:	1c29      	adds	r1, r5, #0
    627e:	1c22      	adds	r2, r4, #0
    6280:	f004 fcac 	bl	abdc <__ssprint_r>
    6284:	2800      	cmp	r0, #0
    6286:	d001      	beq.n	628c <_svfprintf_r+0xc34>
    6288:	f7ff fb9d 	bl	59c6 <_svfprintf_r+0x36e>
    628c:	3e10      	subs	r6, #16
    628e:	aa21      	add	r2, sp, #132	; 0x84
    6290:	ab1f      	add	r3, sp, #124	; 0x7c
    6292:	2e10      	cmp	r6, #16
    6294:	dce5      	bgt.n	6262 <_svfprintf_r+0xc0a>
    6296:	1c1d      	adds	r5, r3, #0
    6298:	1c17      	adds	r7, r2, #0
    629a:	2210      	movs	r2, #16
    629c:	1c13      	adds	r3, r2, #0
    629e:	4443      	add	r3, r8
    62a0:	602b      	str	r3, [r5, #0]
    62a2:	68a3      	ldr	r3, [r4, #8]
    62a4:	606e      	str	r6, [r5, #4]
    62a6:	18f3      	adds	r3, r6, r3
    62a8:	e6bc      	b.n	6024 <_svfprintf_r+0x9cc>
    62aa:	9907      	ldr	r1, [sp, #28]
    62ac:	2310      	movs	r3, #16
    62ae:	4019      	ands	r1, r3
    62b0:	d100      	bne.n	62b4 <_svfprintf_r+0xc5c>
    62b2:	e0b6      	b.n	6422 <_svfprintf_r+0xdca>
    62b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    62b6:	6809      	ldr	r1, [r1, #0]
    62b8:	9110      	str	r1, [sp, #64]	; 0x40
    62ba:	9211      	str	r2, [sp, #68]	; 0x44
    62bc:	1c0a      	adds	r2, r1, #0
    62be:	1e53      	subs	r3, r2, #1
    62c0:	419a      	sbcs	r2, r3
    62c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    62c4:	3304      	adds	r3, #4
    62c6:	930f      	str	r3, [sp, #60]	; 0x3c
    62c8:	2301      	movs	r3, #1
    62ca:	e45b      	b.n	5b84 <_svfprintf_r+0x52c>
    62cc:	2302      	movs	r3, #2
    62ce:	e459      	b.n	5b84 <_svfprintf_r+0x52c>
    62d0:	9807      	ldr	r0, [sp, #28]
    62d2:	2310      	movs	r3, #16
    62d4:	4018      	ands	r0, r3
    62d6:	d11c      	bne.n	6312 <_svfprintf_r+0xcba>
    62d8:	9907      	ldr	r1, [sp, #28]
    62da:	2340      	movs	r3, #64	; 0x40
    62dc:	4019      	ands	r1, r3
    62de:	d018      	beq.n	6312 <_svfprintf_r+0xcba>
    62e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    62e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    62e4:	883f      	ldrh	r7, [r7, #0]
    62e6:	3104      	adds	r1, #4
    62e8:	1c3a      	adds	r2, r7, #0
    62ea:	1e53      	subs	r3, r2, #1
    62ec:	419a      	sbcs	r2, r3
    62ee:	9710      	str	r7, [sp, #64]	; 0x40
    62f0:	9011      	str	r0, [sp, #68]	; 0x44
    62f2:	910f      	str	r1, [sp, #60]	; 0x3c
    62f4:	1c03      	adds	r3, r0, #0
    62f6:	e445      	b.n	5b84 <_svfprintf_r+0x52c>
    62f8:	9907      	ldr	r1, [sp, #28]
    62fa:	06c9      	lsls	r1, r1, #27
    62fc:	d400      	bmi.n	6300 <_svfprintf_r+0xca8>
    62fe:	e0a2      	b.n	6446 <_svfprintf_r+0xdee>
    6300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6302:	6813      	ldr	r3, [r2, #0]
    6304:	3204      	adds	r2, #4
    6306:	9310      	str	r3, [sp, #64]	; 0x40
    6308:	17db      	asrs	r3, r3, #31
    630a:	9311      	str	r3, [sp, #68]	; 0x44
    630c:	920f      	str	r2, [sp, #60]	; 0x3c
    630e:	f7ff fb88 	bl	5a22 <_svfprintf_r+0x3ca>
    6312:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6314:	6812      	ldr	r2, [r2, #0]
    6316:	9210      	str	r2, [sp, #64]	; 0x40
    6318:	1e53      	subs	r3, r2, #1
    631a:	419a      	sbcs	r2, r3
    631c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    631e:	3304      	adds	r3, #4
    6320:	930f      	str	r3, [sp, #60]	; 0x3c
    6322:	9111      	str	r1, [sp, #68]	; 0x44
    6324:	1c0b      	adds	r3, r1, #0
    6326:	e42d      	b.n	5b84 <_svfprintf_r+0x52c>
    6328:	9907      	ldr	r1, [sp, #28]
    632a:	2301      	movs	r3, #1
    632c:	4219      	tst	r1, r3
    632e:	d000      	beq.n	6332 <_svfprintf_r+0xcda>
    6330:	e648      	b.n	5fc4 <_svfprintf_r+0x96c>
    6332:	607b      	str	r3, [r7, #4]
    6334:	68a3      	ldr	r3, [r4, #8]
    6336:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    6338:	3301      	adds	r3, #1
    633a:	603d      	str	r5, [r7, #0]
    633c:	60a3      	str	r3, [r4, #8]
    633e:	6863      	ldr	r3, [r4, #4]
    6340:	3301      	adds	r3, #1
    6342:	6063      	str	r3, [r4, #4]
    6344:	2b07      	cmp	r3, #7
    6346:	dc01      	bgt.n	634c <_svfprintf_r+0xcf4>
    6348:	3708      	adds	r7, #8
    634a:	e672      	b.n	6032 <_svfprintf_r+0x9da>
    634c:	9809      	ldr	r0, [sp, #36]	; 0x24
    634e:	9908      	ldr	r1, [sp, #32]
    6350:	1c22      	adds	r2, r4, #0
    6352:	f004 fc43 	bl	abdc <__ssprint_r>
    6356:	2800      	cmp	r0, #0
    6358:	d001      	beq.n	635e <_svfprintf_r+0xd06>
    635a:	f7ff fb34 	bl	59c6 <_svfprintf_r+0x36e>
    635e:	ab21      	add	r3, sp, #132	; 0x84
    6360:	af1f      	add	r7, sp, #124	; 0x7c
    6362:	e668      	b.n	6036 <_svfprintf_r+0x9de>
    6364:	9809      	ldr	r0, [sp, #36]	; 0x24
    6366:	9908      	ldr	r1, [sp, #32]
    6368:	1c22      	adds	r2, r4, #0
    636a:	f004 fc37 	bl	abdc <__ssprint_r>
    636e:	2800      	cmp	r0, #0
    6370:	d001      	beq.n	6376 <_svfprintf_r+0xd1e>
    6372:	f7ff fb28 	bl	59c6 <_svfprintf_r+0x36e>
    6376:	af21      	add	r7, sp, #132	; 0x84
    6378:	ad1f      	add	r5, sp, #124	; 0x7c
    637a:	e642      	b.n	6002 <_svfprintf_r+0x9aa>
    637c:	9809      	ldr	r0, [sp, #36]	; 0x24
    637e:	9908      	ldr	r1, [sp, #32]
    6380:	1c22      	adds	r2, r4, #0
    6382:	f004 fc2b 	bl	abdc <__ssprint_r>
    6386:	2800      	cmp	r0, #0
    6388:	d001      	beq.n	638e <_svfprintf_r+0xd36>
    638a:	f7ff fb1c 	bl	59c6 <_svfprintf_r+0x36e>
    638e:	ad21      	add	r5, sp, #132	; 0x84
    6390:	af1f      	add	r7, sp, #124	; 0x7c
    6392:	e627      	b.n	5fe4 <_svfprintf_r+0x98c>
    6394:	2f30      	cmp	r7, #48	; 0x30
    6396:	d100      	bne.n	639a <_svfprintf_r+0xd42>
    6398:	e30a      	b.n	69b0 <_svfprintf_r+0x1358>
    639a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    639c:	3f01      	subs	r7, #1
    639e:	2330      	movs	r3, #48	; 0x30
    63a0:	1be0      	subs	r0, r4, r7
    63a2:	9713      	str	r7, [sp, #76]	; 0x4c
    63a4:	703b      	strb	r3, [r7, #0]
    63a6:	900c      	str	r0, [sp, #48]	; 0x30
    63a8:	f7ff fb7f 	bl	5aaa <_svfprintf_r+0x452>
    63ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    63ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    63b0:	2100      	movs	r1, #0
    63b2:	4250      	negs	r0, r2
    63b4:	4199      	sbcs	r1, r3
    63b6:	1c02      	adds	r2, r0, #0
    63b8:	232d      	movs	r3, #45	; 0x2d
    63ba:	464f      	mov	r7, r9
    63bc:	430a      	orrs	r2, r1
    63be:	703b      	strb	r3, [r7, #0]
    63c0:	9010      	str	r0, [sp, #64]	; 0x40
    63c2:	9111      	str	r1, [sp, #68]	; 0x44
    63c4:	1e53      	subs	r3, r2, #1
    63c6:	419a      	sbcs	r2, r3
    63c8:	2301      	movs	r3, #1
    63ca:	f7ff fb35 	bl	5a38 <_svfprintf_r+0x3e0>
    63ce:	780b      	ldrb	r3, [r1, #0]
    63d0:	f7ff f9a7 	bl	5722 <_svfprintf_r+0xca>
    63d4:	981a      	ldr	r0, [sp, #104]	; 0x68
    63d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    63d8:	f004 fba8 	bl	ab2c <__fpclassifyd>
    63dc:	2800      	cmp	r0, #0
    63de:	d000      	beq.n	63e2 <_svfprintf_r+0xd8a>
    63e0:	e185      	b.n	66ee <_svfprintf_r+0x1096>
    63e2:	9f16      	ldr	r7, [sp, #88]	; 0x58
    63e4:	2f47      	cmp	r7, #71	; 0x47
    63e6:	dc00      	bgt.n	63ea <_svfprintf_r+0xd92>
    63e8:	e26b      	b.n	68c2 <_svfprintf_r+0x126a>
    63ea:	496d      	ldr	r1, [pc, #436]	; (65a0 <_svfprintf_r+0xf48>)
    63ec:	9113      	str	r1, [sp, #76]	; 0x4c
    63ee:	9a07      	ldr	r2, [sp, #28]
    63f0:	2380      	movs	r3, #128	; 0x80
    63f2:	439a      	bics	r2, r3
    63f4:	2603      	movs	r6, #3
    63f6:	2700      	movs	r7, #0
    63f8:	464b      	mov	r3, r9
    63fa:	9207      	str	r2, [sp, #28]
    63fc:	960a      	str	r6, [sp, #40]	; 0x28
    63fe:	781a      	ldrb	r2, [r3, #0]
    6400:	960c      	str	r6, [sp, #48]	; 0x30
    6402:	9714      	str	r7, [sp, #80]	; 0x50
    6404:	9718      	str	r7, [sp, #96]	; 0x60
    6406:	f7ff fb5a 	bl	5abe <_svfprintf_r+0x466>
    640a:	4864      	ldr	r0, [pc, #400]	; (659c <_svfprintf_r+0xf44>)
    640c:	1c13      	adds	r3, r2, #0
    640e:	3308      	adds	r3, #8
    6410:	4680      	mov	r8, r0
    6412:	2610      	movs	r6, #16
    6414:	1c31      	adds	r1, r6, #0
    6416:	6055      	str	r5, [r2, #4]
    6418:	4441      	add	r1, r8
    641a:	6011      	str	r1, [r2, #0]
    641c:	68a2      	ldr	r2, [r4, #8]
    641e:	18aa      	adds	r2, r5, r2
    6420:	e60f      	b.n	6042 <_svfprintf_r+0x9ea>
    6422:	9f07      	ldr	r7, [sp, #28]
    6424:	2340      	movs	r3, #64	; 0x40
    6426:	403b      	ands	r3, r7
    6428:	d100      	bne.n	642c <_svfprintf_r+0xdd4>
    642a:	e221      	b.n	6870 <_svfprintf_r+0x1218>
    642c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    642e:	8800      	ldrh	r0, [r0, #0]
    6430:	9111      	str	r1, [sp, #68]	; 0x44
    6432:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6434:	1c02      	adds	r2, r0, #0
    6436:	3104      	adds	r1, #4
    6438:	1e53      	subs	r3, r2, #1
    643a:	419a      	sbcs	r2, r3
    643c:	9010      	str	r0, [sp, #64]	; 0x40
    643e:	910f      	str	r1, [sp, #60]	; 0x3c
    6440:	2301      	movs	r3, #1
    6442:	f7ff fb9f 	bl	5b84 <_svfprintf_r+0x52c>
    6446:	9b07      	ldr	r3, [sp, #28]
    6448:	065b      	lsls	r3, r3, #25
    644a:	d400      	bmi.n	644e <_svfprintf_r+0xdf6>
    644c:	e136      	b.n	66bc <_svfprintf_r+0x1064>
    644e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    6450:	980f      	ldr	r0, [sp, #60]	; 0x3c
    6452:	2300      	movs	r3, #0
    6454:	5efb      	ldrsh	r3, [r7, r3]
    6456:	3004      	adds	r0, #4
    6458:	9310      	str	r3, [sp, #64]	; 0x40
    645a:	17db      	asrs	r3, r3, #31
    645c:	9311      	str	r3, [sp, #68]	; 0x44
    645e:	900f      	str	r0, [sp, #60]	; 0x3c
    6460:	f7ff fadf 	bl	5a22 <_svfprintf_r+0x3ca>
    6464:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6466:	2307      	movs	r3, #7
    6468:	3207      	adds	r2, #7
    646a:	439a      	bics	r2, r3
    646c:	6810      	ldr	r0, [r2, #0]
    646e:	2708      	movs	r7, #8
    6470:	18bf      	adds	r7, r7, r2
    6472:	970f      	str	r7, [sp, #60]	; 0x3c
    6474:	901a      	str	r0, [sp, #104]	; 0x68
    6476:	6852      	ldr	r2, [r2, #4]
    6478:	921b      	str	r2, [sp, #108]	; 0x6c
    647a:	f7ff fb3b 	bl	5af4 <_svfprintf_r+0x49c>
    647e:	9807      	ldr	r0, [sp, #28]
    6480:	06c0      	lsls	r0, r0, #27
    6482:	d400      	bmi.n	6486 <_svfprintf_r+0xe2e>
    6484:	e1f9      	b.n	687a <_svfprintf_r+0x1222>
    6486:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    648a:	680b      	ldr	r3, [r1, #0]
    648c:	3104      	adds	r1, #4
    648e:	601a      	str	r2, [r3, #0]
    6490:	910f      	str	r1, [sp, #60]	; 0x3c
    6492:	f7ff f90a 	bl	56aa <_svfprintf_r+0x52>
    6496:	9f07      	ldr	r7, [sp, #28]
    6498:	2340      	movs	r3, #64	; 0x40
    649a:	403b      	ands	r3, r7
    649c:	d100      	bne.n	64a0 <_svfprintf_r+0xe48>
    649e:	e104      	b.n	66aa <_svfprintf_r+0x1052>
    64a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    64a2:	8800      	ldrh	r0, [r0, #0]
    64a4:	9111      	str	r1, [sp, #68]	; 0x44
    64a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    64a8:	3104      	adds	r1, #4
    64aa:	9010      	str	r0, [sp, #64]	; 0x40
    64ac:	910f      	str	r1, [sp, #60]	; 0x3c
    64ae:	f7ff fb9f 	bl	5bf0 <_svfprintf_r+0x598>
    64b2:	1c1f      	adds	r7, r3, #0
    64b4:	2110      	movs	r1, #16
    64b6:	1c0b      	adds	r3, r1, #0
    64b8:	4443      	add	r3, r8
    64ba:	603b      	str	r3, [r7, #0]
    64bc:	68a3      	ldr	r3, [r4, #8]
    64be:	18eb      	adds	r3, r5, r3
    64c0:	607d      	str	r5, [r7, #4]
    64c2:	60a3      	str	r3, [r4, #8]
    64c4:	6863      	ldr	r3, [r4, #4]
    64c6:	3301      	adds	r3, #1
    64c8:	6063      	str	r3, [r4, #4]
    64ca:	2b07      	cmp	r3, #7
    64cc:	dd00      	ble.n	64d0 <_svfprintf_r+0xe78>
    64ce:	e286      	b.n	69de <_svfprintf_r+0x1386>
    64d0:	9d42      	ldr	r5, [sp, #264]	; 0x108
    64d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    64d4:	429d      	cmp	r5, r3
    64d6:	db47      	blt.n	6568 <_svfprintf_r+0xf10>
    64d8:	9e07      	ldr	r6, [sp, #28]
    64da:	07f6      	lsls	r6, r6, #31
    64dc:	d444      	bmi.n	6568 <_svfprintf_r+0xf10>
    64de:	9913      	ldr	r1, [sp, #76]	; 0x4c
    64e0:	1c0b      	adds	r3, r1, #0
    64e2:	9918      	ldr	r1, [sp, #96]	; 0x60
    64e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    64e6:	185b      	adds	r3, r3, r1
    64e8:	4656      	mov	r6, sl
    64ea:	1af0      	subs	r0, r6, r3
    64ec:	1b79      	subs	r1, r7, r5
    64ee:	1c0e      	adds	r6, r1, #0
    64f0:	4281      	cmp	r1, r0
    64f2:	dd00      	ble.n	64f6 <_svfprintf_r+0xe9e>
    64f4:	1c06      	adds	r6, r0, #0
    64f6:	2e00      	cmp	r6, #0
    64f8:	dd0b      	ble.n	6512 <_svfprintf_r+0xeba>
    64fa:	6013      	str	r3, [r2, #0]
    64fc:	68a3      	ldr	r3, [r4, #8]
    64fe:	18f3      	adds	r3, r6, r3
    6500:	6056      	str	r6, [r2, #4]
    6502:	60a3      	str	r3, [r4, #8]
    6504:	6863      	ldr	r3, [r4, #4]
    6506:	3301      	adds	r3, #1
    6508:	6063      	str	r3, [r4, #4]
    650a:	3208      	adds	r2, #8
    650c:	2b07      	cmp	r3, #7
    650e:	dd00      	ble.n	6512 <_svfprintf_r+0xeba>
    6510:	e253      	b.n	69ba <_svfprintf_r+0x1362>
    6512:	43f5      	mvns	r5, r6
    6514:	17ed      	asrs	r5, r5, #31
    6516:	4035      	ands	r5, r6
    6518:	1b4d      	subs	r5, r1, r5
    651a:	2d00      	cmp	r5, #0
    651c:	dd42      	ble.n	65a4 <_svfprintf_r+0xf4c>
    651e:	2d10      	cmp	r5, #16
    6520:	dd43      	ble.n	65aa <_svfprintf_r+0xf52>
    6522:	491e      	ldr	r1, [pc, #120]	; (659c <_svfprintf_r+0xf44>)
    6524:	2310      	movs	r3, #16
    6526:	4688      	mov	r8, r1
    6528:	1c1e      	adds	r6, r3, #0
    652a:	4446      	add	r6, r8
    652c:	1c1f      	adds	r7, r3, #0
    652e:	e005      	b.n	653c <_svfprintf_r+0xee4>
    6530:	3208      	adds	r2, #8
    6532:	1c13      	adds	r3, r2, #0
    6534:	3308      	adds	r3, #8
    6536:	3d10      	subs	r5, #16
    6538:	2d10      	cmp	r5, #16
    653a:	dd3a      	ble.n	65b2 <_svfprintf_r+0xf5a>
    653c:	68a3      	ldr	r3, [r4, #8]
    653e:	3310      	adds	r3, #16
    6540:	6016      	str	r6, [r2, #0]
    6542:	6057      	str	r7, [r2, #4]
    6544:	60a3      	str	r3, [r4, #8]
    6546:	6863      	ldr	r3, [r4, #4]
    6548:	3301      	adds	r3, #1
    654a:	6063      	str	r3, [r4, #4]
    654c:	2b07      	cmp	r3, #7
    654e:	ddef      	ble.n	6530 <_svfprintf_r+0xed8>
    6550:	9809      	ldr	r0, [sp, #36]	; 0x24
    6552:	9908      	ldr	r1, [sp, #32]
    6554:	1c22      	adds	r2, r4, #0
    6556:	f004 fb41 	bl	abdc <__ssprint_r>
    655a:	2800      	cmp	r0, #0
    655c:	d001      	beq.n	6562 <_svfprintf_r+0xf0a>
    655e:	f7ff fa32 	bl	59c6 <_svfprintf_r+0x36e>
    6562:	ab21      	add	r3, sp, #132	; 0x84
    6564:	aa1f      	add	r2, sp, #124	; 0x7c
    6566:	e7e6      	b.n	6536 <_svfprintf_r+0xede>
    6568:	981c      	ldr	r0, [sp, #112]	; 0x70
    656a:	68a3      	ldr	r3, [r4, #8]
    656c:	9f19      	ldr	r7, [sp, #100]	; 0x64
    656e:	181b      	adds	r3, r3, r0
    6570:	6017      	str	r7, [r2, #0]
    6572:	6050      	str	r0, [r2, #4]
    6574:	60a3      	str	r3, [r4, #8]
    6576:	6863      	ldr	r3, [r4, #4]
    6578:	3301      	adds	r3, #1
    657a:	6063      	str	r3, [r4, #4]
    657c:	3208      	adds	r2, #8
    657e:	2b07      	cmp	r3, #7
    6580:	ddad      	ble.n	64de <_svfprintf_r+0xe86>
    6582:	9809      	ldr	r0, [sp, #36]	; 0x24
    6584:	9908      	ldr	r1, [sp, #32]
    6586:	1c22      	adds	r2, r4, #0
    6588:	f004 fb28 	bl	abdc <__ssprint_r>
    658c:	2800      	cmp	r0, #0
    658e:	d001      	beq.n	6594 <_svfprintf_r+0xf3c>
    6590:	f7ff fa19 	bl	59c6 <_svfprintf_r+0x36e>
    6594:	9d42      	ldr	r5, [sp, #264]	; 0x108
    6596:	aa1f      	add	r2, sp, #124	; 0x7c
    6598:	e7a1      	b.n	64de <_svfprintf_r+0xe86>
    659a:	46c0      	nop			; (mov r8, r8)
    659c:	0000dea0 	.word	0x0000dea0
    65a0:	0000e904 	.word	0x0000e904
    65a4:	1c13      	adds	r3, r2, #0
    65a6:	f7ff f99c 	bl	58e2 <_svfprintf_r+0x28a>
    65aa:	4ed3      	ldr	r6, [pc, #844]	; (68f8 <_svfprintf_r+0x12a0>)
    65ac:	1c13      	adds	r3, r2, #0
    65ae:	3308      	adds	r3, #8
    65b0:	46b0      	mov	r8, r6
    65b2:	2710      	movs	r7, #16
    65b4:	1c39      	adds	r1, r7, #0
    65b6:	e72e      	b.n	6416 <_svfprintf_r+0xdbe>
    65b8:	49cf      	ldr	r1, [pc, #828]	; (68f8 <_svfprintf_r+0x12a0>)
    65ba:	1c2f      	adds	r7, r5, #0
    65bc:	3708      	adds	r7, #8
    65be:	4688      	mov	r8, r1
    65c0:	f7ff f96e 	bl	58a0 <_svfprintf_r+0x248>
    65c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    65c6:	9908      	ldr	r1, [sp, #32]
    65c8:	1c22      	adds	r2, r4, #0
    65ca:	f004 fb07 	bl	abdc <__ssprint_r>
    65ce:	2800      	cmp	r0, #0
    65d0:	d001      	beq.n	65d6 <_svfprintf_r+0xf7e>
    65d2:	f7ff f9f8 	bl	59c6 <_svfprintf_r+0x36e>
    65d6:	ab1f      	add	r3, sp, #124	; 0x7c
    65d8:	e44c      	b.n	5e74 <_svfprintf_r+0x81c>
    65da:	4bc8      	ldr	r3, [pc, #800]	; (68fc <_svfprintf_r+0x12a4>)
    65dc:	603b      	str	r3, [r7, #0]
    65de:	2301      	movs	r3, #1
    65e0:	607b      	str	r3, [r7, #4]
    65e2:	68a3      	ldr	r3, [r4, #8]
    65e4:	3301      	adds	r3, #1
    65e6:	60a3      	str	r3, [r4, #8]
    65e8:	6863      	ldr	r3, [r4, #4]
    65ea:	3301      	adds	r3, #1
    65ec:	6063      	str	r3, [r4, #4]
    65ee:	2b07      	cmp	r3, #7
    65f0:	dd00      	ble.n	65f4 <_svfprintf_r+0xf9c>
    65f2:	e169      	b.n	68c8 <_svfprintf_r+0x1270>
    65f4:	1c3b      	adds	r3, r7, #0
    65f6:	3308      	adds	r3, #8
    65f8:	2d00      	cmp	r5, #0
    65fa:	d107      	bne.n	660c <_svfprintf_r+0xfb4>
    65fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    65fe:	2f00      	cmp	r7, #0
    6600:	d104      	bne.n	660c <_svfprintf_r+0xfb4>
    6602:	9807      	ldr	r0, [sp, #28]
    6604:	07c0      	lsls	r0, r0, #31
    6606:	d401      	bmi.n	660c <_svfprintf_r+0xfb4>
    6608:	f7ff f96b 	bl	58e2 <_svfprintf_r+0x28a>
    660c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    660e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    6610:	605a      	str	r2, [r3, #4]
    6612:	68a2      	ldr	r2, [r4, #8]
    6614:	9919      	ldr	r1, [sp, #100]	; 0x64
    6616:	1992      	adds	r2, r2, r6
    6618:	6019      	str	r1, [r3, #0]
    661a:	60a2      	str	r2, [r4, #8]
    661c:	6862      	ldr	r2, [r4, #4]
    661e:	3201      	adds	r2, #1
    6620:	6062      	str	r2, [r4, #4]
    6622:	3308      	adds	r3, #8
    6624:	2a07      	cmp	r2, #7
    6626:	dd00      	ble.n	662a <_svfprintf_r+0xfd2>
    6628:	e242      	b.n	6ab0 <_svfprintf_r+0x1458>
    662a:	426d      	negs	r5, r5
    662c:	2d00      	cmp	r5, #0
    662e:	dc00      	bgt.n	6632 <_svfprintf_r+0xfda>
    6630:	e184      	b.n	693c <_svfprintf_r+0x12e4>
    6632:	2d10      	cmp	r5, #16
    6634:	dc00      	bgt.n	6638 <_svfprintf_r+0xfe0>
    6636:	e167      	b.n	6908 <_svfprintf_r+0x12b0>
    6638:	48af      	ldr	r0, [pc, #700]	; (68f8 <_svfprintf_r+0x12a0>)
    663a:	2110      	movs	r1, #16
    663c:	4680      	mov	r8, r0
    663e:	1c0e      	adds	r6, r1, #0
    6640:	4446      	add	r6, r8
    6642:	1c0f      	adds	r7, r1, #0
    6644:	e003      	b.n	664e <_svfprintf_r+0xff6>
    6646:	3d10      	subs	r5, #16
    6648:	2d10      	cmp	r5, #16
    664a:	dc00      	bgt.n	664e <_svfprintf_r+0xff6>
    664c:	e15e      	b.n	690c <_svfprintf_r+0x12b4>
    664e:	68a2      	ldr	r2, [r4, #8]
    6650:	3210      	adds	r2, #16
    6652:	601e      	str	r6, [r3, #0]
    6654:	605f      	str	r7, [r3, #4]
    6656:	60a2      	str	r2, [r4, #8]
    6658:	6862      	ldr	r2, [r4, #4]
    665a:	3201      	adds	r2, #1
    665c:	6062      	str	r2, [r4, #4]
    665e:	3308      	adds	r3, #8
    6660:	2a07      	cmp	r2, #7
    6662:	ddf0      	ble.n	6646 <_svfprintf_r+0xfee>
    6664:	9809      	ldr	r0, [sp, #36]	; 0x24
    6666:	9908      	ldr	r1, [sp, #32]
    6668:	1c22      	adds	r2, r4, #0
    666a:	f004 fab7 	bl	abdc <__ssprint_r>
    666e:	2800      	cmp	r0, #0
    6670:	d001      	beq.n	6676 <_svfprintf_r+0x101e>
    6672:	f7ff f9a8 	bl	59c6 <_svfprintf_r+0x36e>
    6676:	ab1f      	add	r3, sp, #124	; 0x7c
    6678:	e7e5      	b.n	6646 <_svfprintf_r+0xfee>
    667a:	9b07      	ldr	r3, [sp, #28]
    667c:	4303      	orrs	r3, r0
    667e:	9307      	str	r3, [sp, #28]
    6680:	3101      	adds	r1, #1
    6682:	780b      	ldrb	r3, [r1, #0]
    6684:	f7ff f84d 	bl	5722 <_svfprintf_r+0xca>
    6688:	1c2b      	adds	r3, r5, #0
    668a:	3308      	adds	r3, #8
    668c:	1c2f      	adds	r7, r5, #0
    668e:	e4d2      	b.n	6036 <_svfprintf_r+0x9de>
    6690:	980c      	ldr	r0, [sp, #48]	; 0x30
    6692:	43c3      	mvns	r3, r0
    6694:	17db      	asrs	r3, r3, #31
    6696:	4018      	ands	r0, r3
    6698:	4649      	mov	r1, r9
    669a:	2300      	movs	r3, #0
    669c:	900a      	str	r0, [sp, #40]	; 0x28
    669e:	780a      	ldrb	r2, [r1, #0]
    66a0:	970f      	str	r7, [sp, #60]	; 0x3c
    66a2:	9314      	str	r3, [sp, #80]	; 0x50
    66a4:	9318      	str	r3, [sp, #96]	; 0x60
    66a6:	f7ff fa0a 	bl	5abe <_svfprintf_r+0x466>
    66aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    66ac:	6812      	ldr	r2, [r2, #0]
    66ae:	9311      	str	r3, [sp, #68]	; 0x44
    66b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    66b2:	3304      	adds	r3, #4
    66b4:	9210      	str	r2, [sp, #64]	; 0x40
    66b6:	930f      	str	r3, [sp, #60]	; 0x3c
    66b8:	f7ff fa9a 	bl	5bf0 <_svfprintf_r+0x598>
    66bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    66be:	680b      	ldr	r3, [r1, #0]
    66c0:	3104      	adds	r1, #4
    66c2:	9310      	str	r3, [sp, #64]	; 0x40
    66c4:	17db      	asrs	r3, r3, #31
    66c6:	9311      	str	r3, [sp, #68]	; 0x44
    66c8:	910f      	str	r1, [sp, #60]	; 0x3c
    66ca:	f7ff f9aa 	bl	5a22 <_svfprintf_r+0x3ca>
    66ce:	488c      	ldr	r0, [pc, #560]	; (6900 <_svfprintf_r+0x12a8>)
    66d0:	9013      	str	r0, [sp, #76]	; 0x4c
    66d2:	f7ff fa2a 	bl	5b2a <_svfprintf_r+0x4d2>
    66d6:	9809      	ldr	r0, [sp, #36]	; 0x24
    66d8:	9908      	ldr	r1, [sp, #32]
    66da:	1c22      	adds	r2, r4, #0
    66dc:	f004 fa7e 	bl	abdc <__ssprint_r>
    66e0:	2800      	cmp	r0, #0
    66e2:	d001      	beq.n	66e8 <_svfprintf_r+0x1090>
    66e4:	f7ff f96f 	bl	59c6 <_svfprintf_r+0x36e>
    66e8:	aa1f      	add	r2, sp, #124	; 0x7c
    66ea:	f7ff fbdc 	bl	5ea6 <_svfprintf_r+0x84e>
    66ee:	1c70      	adds	r0, r6, #1
    66f0:	d100      	bne.n	66f4 <_svfprintf_r+0x109c>
    66f2:	e0f5      	b.n	68e0 <_svfprintf_r+0x1288>
    66f4:	9916      	ldr	r1, [sp, #88]	; 0x58
    66f6:	3947      	subs	r1, #71	; 0x47
    66f8:	910c      	str	r1, [sp, #48]	; 0x30
    66fa:	2900      	cmp	r1, #0
    66fc:	d002      	beq.n	6704 <_svfprintf_r+0x10ac>
    66fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6700:	2a67      	cmp	r2, #103	; 0x67
    6702:	d102      	bne.n	670a <_svfprintf_r+0x10b2>
    6704:	2e00      	cmp	r6, #0
    6706:	d100      	bne.n	670a <_svfprintf_r+0x10b2>
    6708:	2601      	movs	r6, #1
    670a:	9f07      	ldr	r7, [sp, #28]
    670c:	2380      	movs	r3, #128	; 0x80
    670e:	005b      	lsls	r3, r3, #1
    6710:	431f      	orrs	r7, r3
    6712:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6714:	9707      	str	r7, [sp, #28]
    6716:	2b00      	cmp	r3, #0
    6718:	da00      	bge.n	671c <_svfprintf_r+0x10c4>
    671a:	e1d5      	b.n	6ac8 <_svfprintf_r+0x1470>
    671c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    671e:	2700      	movs	r7, #0
    6720:	930a      	str	r3, [sp, #40]	; 0x28
    6722:	9714      	str	r7, [sp, #80]	; 0x50
    6724:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6726:	3b46      	subs	r3, #70	; 0x46
    6728:	4259      	negs	r1, r3
    672a:	4159      	adcs	r1, r3
    672c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    672e:	3b66      	subs	r3, #102	; 0x66
    6730:	425a      	negs	r2, r3
    6732:	4153      	adcs	r3, r2
    6734:	1c08      	adds	r0, r1, #0
    6736:	4318      	orrs	r0, r3
    6738:	900d      	str	r0, [sp, #52]	; 0x34
    673a:	d000      	beq.n	673e <_svfprintf_r+0x10e6>
    673c:	e16e      	b.n	6a1c <_svfprintf_r+0x13c4>
    673e:	9916      	ldr	r1, [sp, #88]	; 0x58
    6740:	2945      	cmp	r1, #69	; 0x45
    6742:	d002      	beq.n	674a <_svfprintf_r+0x10f2>
    6744:	2965      	cmp	r1, #101	; 0x65
    6746:	d000      	beq.n	674a <_svfprintf_r+0x10f2>
    6748:	e1c7      	b.n	6ada <_svfprintf_r+0x1482>
    674a:	1c72      	adds	r2, r6, #1
    674c:	4692      	mov	sl, r2
    674e:	2302      	movs	r3, #2
    6750:	9300      	str	r3, [sp, #0]
    6752:	4653      	mov	r3, sl
    6754:	9301      	str	r3, [sp, #4]
    6756:	ab42      	add	r3, sp, #264	; 0x108
    6758:	9302      	str	r3, [sp, #8]
    675a:	ab41      	add	r3, sp, #260	; 0x104
    675c:	9303      	str	r3, [sp, #12]
    675e:	ab40      	add	r3, sp, #256	; 0x100
    6760:	9304      	str	r3, [sp, #16]
    6762:	9809      	ldr	r0, [sp, #36]	; 0x24
    6764:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    6766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6768:	f001 ff9c 	bl	86a4 <_dtoa_r>
    676c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    676e:	9013      	str	r0, [sp, #76]	; 0x4c
    6770:	2f00      	cmp	r7, #0
    6772:	d002      	beq.n	677a <_svfprintf_r+0x1122>
    6774:	9816      	ldr	r0, [sp, #88]	; 0x58
    6776:	2867      	cmp	r0, #103	; 0x67
    6778:	d103      	bne.n	6782 <_svfprintf_r+0x112a>
    677a:	9907      	ldr	r1, [sp, #28]
    677c:	07c9      	lsls	r1, r1, #31
    677e:	d400      	bmi.n	6782 <_svfprintf_r+0x112a>
    6780:	e1b5      	b.n	6aee <_svfprintf_r+0x1496>
    6782:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6786:	1c17      	adds	r7, r2, #0
    6788:	4457      	add	r7, sl
    678a:	2b00      	cmp	r3, #0
    678c:	d005      	beq.n	679a <_svfprintf_r+0x1142>
    678e:	7813      	ldrb	r3, [r2, #0]
    6790:	2b30      	cmp	r3, #48	; 0x30
    6792:	d100      	bne.n	6796 <_svfprintf_r+0x113e>
    6794:	e1c1      	b.n	6b1a <_svfprintf_r+0x14c2>
    6796:	9a42      	ldr	r2, [sp, #264]	; 0x108
    6798:	18bf      	adds	r7, r7, r2
    679a:	981a      	ldr	r0, [sp, #104]	; 0x68
    679c:	990a      	ldr	r1, [sp, #40]	; 0x28
    679e:	4b55      	ldr	r3, [pc, #340]	; (68f4 <_svfprintf_r+0x129c>)
    67a0:	4a53      	ldr	r2, [pc, #332]	; (68f0 <_svfprintf_r+0x1298>)
    67a2:	f007 fa37 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    67a6:	2800      	cmp	r0, #0
    67a8:	d100      	bne.n	67ac <_svfprintf_r+0x1154>
    67aa:	e161      	b.n	6a70 <_svfprintf_r+0x1418>
    67ac:	9740      	str	r7, [sp, #256]	; 0x100
    67ae:	1c3b      	adds	r3, r7, #0
    67b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    67b2:	1a9b      	subs	r3, r3, r2
    67b4:	930d      	str	r3, [sp, #52]	; 0x34
    67b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    67b8:	2b00      	cmp	r3, #0
    67ba:	d003      	beq.n	67c4 <_svfprintf_r+0x116c>
    67bc:	9f16      	ldr	r7, [sp, #88]	; 0x58
    67be:	2f67      	cmp	r7, #103	; 0x67
    67c0:	d000      	beq.n	67c4 <_svfprintf_r+0x116c>
    67c2:	e12e      	b.n	6a22 <_svfprintf_r+0x13ca>
    67c4:	9a42      	ldr	r2, [sp, #264]	; 0x108
    67c6:	920c      	str	r2, [sp, #48]	; 0x30
    67c8:	1cd0      	adds	r0, r2, #3
    67ca:	db02      	blt.n	67d2 <_svfprintf_r+0x117a>
    67cc:	4296      	cmp	r6, r2
    67ce:	db00      	blt.n	67d2 <_svfprintf_r+0x117a>
    67d0:	e15a      	b.n	6a88 <_svfprintf_r+0x1430>
    67d2:	9916      	ldr	r1, [sp, #88]	; 0x58
    67d4:	3902      	subs	r1, #2
    67d6:	9116      	str	r1, [sp, #88]	; 0x58
    67d8:	af16      	add	r7, sp, #88	; 0x58
    67da:	783f      	ldrb	r7, [r7, #0]
    67dc:	ab3e      	add	r3, sp, #248	; 0xf8
    67de:	1e56      	subs	r6, r2, #1
    67e0:	9642      	str	r6, [sp, #264]	; 0x108
    67e2:	469a      	mov	sl, r3
    67e4:	701f      	strb	r7, [r3, #0]
    67e6:	2e00      	cmp	r6, #0
    67e8:	da00      	bge.n	67ec <_svfprintf_r+0x1194>
    67ea:	e1a4      	b.n	6b36 <_svfprintf_r+0x14de>
    67ec:	232b      	movs	r3, #43	; 0x2b
    67ee:	4651      	mov	r1, sl
    67f0:	704b      	strb	r3, [r1, #1]
    67f2:	2e09      	cmp	r6, #9
    67f4:	dc00      	bgt.n	67f8 <_svfprintf_r+0x11a0>
    67f6:	e173      	b.n	6ae0 <_svfprintf_r+0x1488>
    67f8:	22f7      	movs	r2, #247	; 0xf7
    67fa:	446a      	add	r2, sp
    67fc:	4690      	mov	r8, r2
    67fe:	1c17      	adds	r7, r2, #0
    6800:	1c30      	adds	r0, r6, #0
    6802:	210a      	movs	r1, #10
    6804:	f007 fa6c 	bl	dce0 <____aeabi_idivmod_from_thumb>
    6808:	3f01      	subs	r7, #1
    680a:	3130      	adds	r1, #48	; 0x30
    680c:	7039      	strb	r1, [r7, #0]
    680e:	1c30      	adds	r0, r6, #0
    6810:	210a      	movs	r1, #10
    6812:	f007 f9f1 	bl	dbf8 <____aeabi_idiv_from_thumb>
    6816:	1c06      	adds	r6, r0, #0
    6818:	2809      	cmp	r0, #9
    681a:	dcf1      	bgt.n	6800 <_svfprintf_r+0x11a8>
    681c:	1c02      	adds	r2, r0, #0
    681e:	1e7b      	subs	r3, r7, #1
    6820:	3230      	adds	r2, #48	; 0x30
    6822:	4669      	mov	r1, sp
    6824:	701a      	strb	r2, [r3, #0]
    6826:	31fa      	adds	r1, #250	; 0xfa
    6828:	4543      	cmp	r3, r8
    682a:	d205      	bcs.n	6838 <_svfprintf_r+0x11e0>
    682c:	781a      	ldrb	r2, [r3, #0]
    682e:	3301      	adds	r3, #1
    6830:	700a      	strb	r2, [r1, #0]
    6832:	3101      	adds	r1, #1
    6834:	4543      	cmp	r3, r8
    6836:	d3f9      	bcc.n	682c <_svfprintf_r+0x11d4>
    6838:	4650      	mov	r0, sl
    683a:	1a08      	subs	r0, r1, r0
    683c:	990d      	ldr	r1, [sp, #52]	; 0x34
    683e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6840:	901d      	str	r0, [sp, #116]	; 0x74
    6842:	1840      	adds	r0, r0, r1
    6844:	900c      	str	r0, [sp, #48]	; 0x30
    6846:	2a01      	cmp	r2, #1
    6848:	dc00      	bgt.n	684c <_svfprintf_r+0x11f4>
    684a:	e179      	b.n	6b40 <_svfprintf_r+0x14e8>
    684c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    684e:	2000      	movs	r0, #0
    6850:	3701      	adds	r7, #1
    6852:	970c      	str	r7, [sp, #48]	; 0x30
    6854:	9018      	str	r0, [sp, #96]	; 0x60
    6856:	9814      	ldr	r0, [sp, #80]	; 0x50
    6858:	2800      	cmp	r0, #0
    685a:	d000      	beq.n	685e <_svfprintf_r+0x1206>
    685c:	e0f6      	b.n	6a4c <_svfprintf_r+0x13f4>
    685e:	990c      	ldr	r1, [sp, #48]	; 0x30
    6860:	43cb      	mvns	r3, r1
    6862:	17db      	asrs	r3, r3, #31
    6864:	4019      	ands	r1, r3
    6866:	464b      	mov	r3, r9
    6868:	910a      	str	r1, [sp, #40]	; 0x28
    686a:	781a      	ldrb	r2, [r3, #0]
    686c:	f7ff f927 	bl	5abe <_svfprintf_r+0x466>
    6870:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6872:	6812      	ldr	r2, [r2, #0]
    6874:	9311      	str	r3, [sp, #68]	; 0x44
    6876:	9210      	str	r2, [sp, #64]	; 0x40
    6878:	e521      	b.n	62be <_svfprintf_r+0xc66>
    687a:	9b07      	ldr	r3, [sp, #28]
    687c:	065b      	lsls	r3, r3, #25
    687e:	d518      	bpl.n	68b2 <_svfprintf_r+0x125a>
    6880:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    6882:	466f      	mov	r7, sp
    6884:	2038      	movs	r0, #56	; 0x38
    6886:	6833      	ldr	r3, [r6, #0]
    6888:	5bc7      	ldrh	r7, [r0, r7]
    688a:	3604      	adds	r6, #4
    688c:	801f      	strh	r7, [r3, #0]
    688e:	960f      	str	r6, [sp, #60]	; 0x3c
    6890:	f7fe ff0b 	bl	56aa <_svfprintf_r+0x52>
    6894:	9809      	ldr	r0, [sp, #36]	; 0x24
    6896:	2140      	movs	r1, #64	; 0x40
    6898:	f7fe fa16 	bl	4cc8 <_malloc_r>
    689c:	9a08      	ldr	r2, [sp, #32]
    689e:	6010      	str	r0, [r2, #0]
    68a0:	6110      	str	r0, [r2, #16]
    68a2:	2800      	cmp	r0, #0
    68a4:	d100      	bne.n	68a8 <_svfprintf_r+0x1250>
    68a6:	e170      	b.n	6b8a <_svfprintf_r+0x1532>
    68a8:	9e08      	ldr	r6, [sp, #32]
    68aa:	2340      	movs	r3, #64	; 0x40
    68ac:	6173      	str	r3, [r6, #20]
    68ae:	f7fe feee 	bl	568e <_svfprintf_r+0x36>
    68b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    68b4:	990e      	ldr	r1, [sp, #56]	; 0x38
    68b6:	6803      	ldr	r3, [r0, #0]
    68b8:	3004      	adds	r0, #4
    68ba:	6019      	str	r1, [r3, #0]
    68bc:	900f      	str	r0, [sp, #60]	; 0x3c
    68be:	f7fe fef4 	bl	56aa <_svfprintf_r+0x52>
    68c2:	4810      	ldr	r0, [pc, #64]	; (6904 <_svfprintf_r+0x12ac>)
    68c4:	9013      	str	r0, [sp, #76]	; 0x4c
    68c6:	e592      	b.n	63ee <_svfprintf_r+0xd96>
    68c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    68ca:	9908      	ldr	r1, [sp, #32]
    68cc:	1c22      	adds	r2, r4, #0
    68ce:	f004 f985 	bl	abdc <__ssprint_r>
    68d2:	2800      	cmp	r0, #0
    68d4:	d001      	beq.n	68da <_svfprintf_r+0x1282>
    68d6:	f7ff f876 	bl	59c6 <_svfprintf_r+0x36e>
    68da:	9d42      	ldr	r5, [sp, #264]	; 0x108
    68dc:	ab1f      	add	r3, sp, #124	; 0x7c
    68de:	e68b      	b.n	65f8 <_svfprintf_r+0xfa0>
    68e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    68e2:	3b47      	subs	r3, #71	; 0x47
    68e4:	2606      	movs	r6, #6
    68e6:	930c      	str	r3, [sp, #48]	; 0x30
    68e8:	e70f      	b.n	670a <_svfprintf_r+0x10b2>
    68ea:	46c0      	nop			; (mov r8, r8)
    68ec:	46c0      	nop			; (mov r8, r8)
    68ee:	46c0      	nop			; (mov r8, r8)
	...
    68f8:	0000dea0 	.word	0x0000dea0
    68fc:	0000e938 	.word	0x0000e938
    6900:	0000e8fc 	.word	0x0000e8fc
    6904:	0000e900 	.word	0x0000e900
    6908:	4fa7      	ldr	r7, [pc, #668]	; (6ba8 <_svfprintf_r+0x1550>)
    690a:	46b8      	mov	r8, r7
    690c:	2610      	movs	r6, #16
    690e:	1c32      	adds	r2, r6, #0
    6910:	4442      	add	r2, r8
    6912:	601a      	str	r2, [r3, #0]
    6914:	68a2      	ldr	r2, [r4, #8]
    6916:	18aa      	adds	r2, r5, r2
    6918:	605d      	str	r5, [r3, #4]
    691a:	60a2      	str	r2, [r4, #8]
    691c:	6862      	ldr	r2, [r4, #4]
    691e:	3201      	adds	r2, #1
    6920:	6062      	str	r2, [r4, #4]
    6922:	3308      	adds	r3, #8
    6924:	2a07      	cmp	r2, #7
    6926:	dd09      	ble.n	693c <_svfprintf_r+0x12e4>
    6928:	9809      	ldr	r0, [sp, #36]	; 0x24
    692a:	9908      	ldr	r1, [sp, #32]
    692c:	1c22      	adds	r2, r4, #0
    692e:	f004 f955 	bl	abdc <__ssprint_r>
    6932:	2800      	cmp	r0, #0
    6934:	d001      	beq.n	693a <_svfprintf_r+0x12e2>
    6936:	f7ff f846 	bl	59c6 <_svfprintf_r+0x36e>
    693a:	ab1f      	add	r3, sp, #124	; 0x7c
    693c:	980d      	ldr	r0, [sp, #52]	; 0x34
    693e:	68a2      	ldr	r2, [r4, #8]
    6940:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    6942:	1812      	adds	r2, r2, r0
    6944:	601f      	str	r7, [r3, #0]
    6946:	6058      	str	r0, [r3, #4]
    6948:	60a2      	str	r2, [r4, #8]
    694a:	6862      	ldr	r2, [r4, #4]
    694c:	3201      	adds	r2, #1
    694e:	6062      	str	r2, [r4, #4]
    6950:	3308      	adds	r3, #8
    6952:	2a07      	cmp	r2, #7
    6954:	dc01      	bgt.n	695a <_svfprintf_r+0x1302>
    6956:	f7fe ffc4 	bl	58e2 <_svfprintf_r+0x28a>
    695a:	f7ff fb79 	bl	6050 <_svfprintf_r+0x9f8>
    695e:	222d      	movs	r2, #45	; 0x2d
    6960:	464b      	mov	r3, r9
    6962:	701a      	strb	r2, [r3, #0]
    6964:	f7ff f8da 	bl	5b1c <_svfprintf_r+0x4c4>
    6968:	1c3a      	adds	r2, r7, #0
    696a:	e5b1      	b.n	64d0 <_svfprintf_r+0xe78>
    696c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    696e:	f7fe fe33 	bl	55d8 <strlen>
    6972:	43c3      	mvns	r3, r0
    6974:	17db      	asrs	r3, r3, #31
    6976:	900c      	str	r0, [sp, #48]	; 0x30
    6978:	464e      	mov	r6, r9
    697a:	4018      	ands	r0, r3
    697c:	970f      	str	r7, [sp, #60]	; 0x3c
    697e:	2700      	movs	r7, #0
    6980:	900a      	str	r0, [sp, #40]	; 0x28
    6982:	7832      	ldrb	r2, [r6, #0]
    6984:	9714      	str	r7, [sp, #80]	; 0x50
    6986:	9718      	str	r7, [sp, #96]	; 0x60
    6988:	f7ff f899 	bl	5abe <_svfprintf_r+0x466>
    698c:	4a86      	ldr	r2, [pc, #536]	; (6ba8 <_svfprintf_r+0x1550>)
    698e:	1c2b      	adds	r3, r5, #0
    6990:	3308      	adds	r3, #8
    6992:	4690      	mov	r8, r2
    6994:	f7fe ff18 	bl	57c8 <_svfprintf_r+0x170>
    6998:	9809      	ldr	r0, [sp, #36]	; 0x24
    699a:	9908      	ldr	r1, [sp, #32]
    699c:	1c22      	adds	r2, r4, #0
    699e:	f004 f91d 	bl	abdc <__ssprint_r>
    69a2:	2800      	cmp	r0, #0
    69a4:	d001      	beq.n	69aa <_svfprintf_r+0x1352>
    69a6:	f7ff f80e 	bl	59c6 <_svfprintf_r+0x36e>
    69aa:	af1f      	add	r7, sp, #124	; 0x7c
    69ac:	f7ff fba6 	bl	60fc <_svfprintf_r+0xaa4>
    69b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    69b2:	1ae3      	subs	r3, r4, r3
    69b4:	930c      	str	r3, [sp, #48]	; 0x30
    69b6:	f7ff f878 	bl	5aaa <_svfprintf_r+0x452>
    69ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    69bc:	9908      	ldr	r1, [sp, #32]
    69be:	1c22      	adds	r2, r4, #0
    69c0:	f004 f90c 	bl	abdc <__ssprint_r>
    69c4:	2800      	cmp	r0, #0
    69c6:	d001      	beq.n	69cc <_svfprintf_r+0x1374>
    69c8:	f7fe fffd 	bl	59c6 <_svfprintf_r+0x36e>
    69cc:	9942      	ldr	r1, [sp, #264]	; 0x108
    69ce:	980d      	ldr	r0, [sp, #52]	; 0x34
    69d0:	aa1f      	add	r2, sp, #124	; 0x7c
    69d2:	1a41      	subs	r1, r0, r1
    69d4:	e59d      	b.n	6512 <_svfprintf_r+0xeba>
    69d6:	4a74      	ldr	r2, [pc, #464]	; (6ba8 <_svfprintf_r+0x1550>)
    69d8:	4690      	mov	r8, r2
    69da:	f7fe ffad 	bl	5938 <_svfprintf_r+0x2e0>
    69de:	9809      	ldr	r0, [sp, #36]	; 0x24
    69e0:	9908      	ldr	r1, [sp, #32]
    69e2:	1c22      	adds	r2, r4, #0
    69e4:	f004 f8fa 	bl	abdc <__ssprint_r>
    69e8:	2800      	cmp	r0, #0
    69ea:	d001      	beq.n	69f0 <_svfprintf_r+0x1398>
    69ec:	f7fe ffeb 	bl	59c6 <_svfprintf_r+0x36e>
    69f0:	aa1f      	add	r2, sp, #124	; 0x7c
    69f2:	e56d      	b.n	64d0 <_svfprintf_r+0xe78>
    69f4:	960c      	str	r6, [sp, #48]	; 0x30
    69f6:	2e06      	cmp	r6, #6
    69f8:	d90a      	bls.n	6a10 <_svfprintf_r+0x13b8>
    69fa:	2306      	movs	r3, #6
    69fc:	930c      	str	r3, [sp, #48]	; 0x30
    69fe:	930a      	str	r3, [sp, #40]	; 0x28
    6a00:	970f      	str	r7, [sp, #60]	; 0x3c
    6a02:	4f6a      	ldr	r7, [pc, #424]	; (6bac <_svfprintf_r+0x1554>)
    6a04:	2200      	movs	r2, #0
    6a06:	9214      	str	r2, [sp, #80]	; 0x50
    6a08:	9218      	str	r2, [sp, #96]	; 0x60
    6a0a:	9713      	str	r7, [sp, #76]	; 0x4c
    6a0c:	f7fe fea2 	bl	5754 <_svfprintf_r+0xfc>
    6a10:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    6a12:	43f3      	mvns	r3, r6
    6a14:	17db      	asrs	r3, r3, #31
    6a16:	401e      	ands	r6, r3
    6a18:	960a      	str	r6, [sp, #40]	; 0x28
    6a1a:	e7f1      	b.n	6a00 <_svfprintf_r+0x13a8>
    6a1c:	46b2      	mov	sl, r6
    6a1e:	2303      	movs	r3, #3
    6a20:	e696      	b.n	6750 <_svfprintf_r+0x10f8>
    6a22:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6a24:	2a66      	cmp	r2, #102	; 0x66
    6a26:	d000      	beq.n	6a2a <_svfprintf_r+0x13d2>
    6a28:	e091      	b.n	6b4e <_svfprintf_r+0x14f6>
    6a2a:	9a42      	ldr	r2, [sp, #264]	; 0x108
    6a2c:	920c      	str	r2, [sp, #48]	; 0x30
    6a2e:	2a00      	cmp	r2, #0
    6a30:	dc00      	bgt.n	6a34 <_svfprintf_r+0x13dc>
    6a32:	e08e      	b.n	6b52 <_svfprintf_r+0x14fa>
    6a34:	2e00      	cmp	r6, #0
    6a36:	d102      	bne.n	6a3e <_svfprintf_r+0x13e6>
    6a38:	9907      	ldr	r1, [sp, #28]
    6a3a:	07c9      	lsls	r1, r1, #31
    6a3c:	d502      	bpl.n	6a44 <_svfprintf_r+0x13ec>
    6a3e:	1c53      	adds	r3, r2, #1
    6a40:	199b      	adds	r3, r3, r6
    6a42:	930c      	str	r3, [sp, #48]	; 0x30
    6a44:	4641      	mov	r1, r8
    6a46:	9218      	str	r2, [sp, #96]	; 0x60
    6a48:	9116      	str	r1, [sp, #88]	; 0x58
    6a4a:	e704      	b.n	6856 <_svfprintf_r+0x11fe>
    6a4c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6a4e:	43fb      	mvns	r3, r7
    6a50:	17db      	asrs	r3, r3, #31
    6a52:	222d      	movs	r2, #45	; 0x2d
    6a54:	464e      	mov	r6, r9
    6a56:	401f      	ands	r7, r3
    6a58:	2000      	movs	r0, #0
    6a5a:	7032      	strb	r2, [r6, #0]
    6a5c:	970a      	str	r7, [sp, #40]	; 0x28
    6a5e:	9014      	str	r0, [sp, #80]	; 0x50
    6a60:	f7ff f830 	bl	5ac4 <_svfprintf_r+0x46c>
    6a64:	4950      	ldr	r1, [pc, #320]	; (6ba8 <_svfprintf_r+0x1550>)
    6a66:	1c2b      	adds	r3, r5, #0
    6a68:	4688      	mov	r8, r1
    6a6a:	3508      	adds	r5, #8
    6a6c:	f7ff fa87 	bl	5f7e <_svfprintf_r+0x926>
    6a70:	9b40      	ldr	r3, [sp, #256]	; 0x100
    6a72:	429f      	cmp	r7, r3
    6a74:	d800      	bhi.n	6a78 <_svfprintf_r+0x1420>
    6a76:	e69b      	b.n	67b0 <_svfprintf_r+0x1158>
    6a78:	2230      	movs	r2, #48	; 0x30
    6a7a:	701a      	strb	r2, [r3, #0]
    6a7c:	3301      	adds	r3, #1
    6a7e:	9340      	str	r3, [sp, #256]	; 0x100
    6a80:	429f      	cmp	r7, r3
    6a82:	d8fa      	bhi.n	6a7a <_svfprintf_r+0x1422>
    6a84:	1c3b      	adds	r3, r7, #0
    6a86:	e693      	b.n	67b0 <_svfprintf_r+0x1158>
    6a88:	980d      	ldr	r0, [sp, #52]	; 0x34
    6a8a:	4282      	cmp	r2, r0
    6a8c:	db31      	blt.n	6af2 <_svfprintf_r+0x149a>
    6a8e:	9b07      	ldr	r3, [sp, #28]
    6a90:	2167      	movs	r1, #103	; 0x67
    6a92:	4688      	mov	r8, r1
    6a94:	07db      	lsls	r3, r3, #31
    6a96:	d5d5      	bpl.n	6a44 <_svfprintf_r+0x13ec>
    6a98:	1c56      	adds	r6, r2, #1
    6a9a:	960c      	str	r6, [sp, #48]	; 0x30
    6a9c:	e7d2      	b.n	6a44 <_svfprintf_r+0x13ec>
    6a9e:	4649      	mov	r1, r9
    6aa0:	960a      	str	r6, [sp, #40]	; 0x28
    6aa2:	780a      	ldrb	r2, [r1, #0]
    6aa4:	970f      	str	r7, [sp, #60]	; 0x3c
    6aa6:	960c      	str	r6, [sp, #48]	; 0x30
    6aa8:	9014      	str	r0, [sp, #80]	; 0x50
    6aaa:	9018      	str	r0, [sp, #96]	; 0x60
    6aac:	f7ff f807 	bl	5abe <_svfprintf_r+0x466>
    6ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ab2:	9908      	ldr	r1, [sp, #32]
    6ab4:	1c22      	adds	r2, r4, #0
    6ab6:	f004 f891 	bl	abdc <__ssprint_r>
    6aba:	2800      	cmp	r0, #0
    6abc:	d001      	beq.n	6ac2 <_svfprintf_r+0x146a>
    6abe:	f7fe ff82 	bl	59c6 <_svfprintf_r+0x36e>
    6ac2:	9d42      	ldr	r5, [sp, #264]	; 0x108
    6ac4:	ab1f      	add	r3, sp, #124	; 0x7c
    6ac6:	e5b0      	b.n	662a <_svfprintf_r+0xfd2>
    6ac8:	981b      	ldr	r0, [sp, #108]	; 0x6c
    6aca:	1c01      	adds	r1, r0, #0
    6acc:	2080      	movs	r0, #128	; 0x80
    6ace:	0600      	lsls	r0, r0, #24
    6ad0:	1809      	adds	r1, r1, r0
    6ad2:	222d      	movs	r2, #45	; 0x2d
    6ad4:	910a      	str	r1, [sp, #40]	; 0x28
    6ad6:	9214      	str	r2, [sp, #80]	; 0x50
    6ad8:	e624      	b.n	6724 <_svfprintf_r+0x10cc>
    6ada:	46b2      	mov	sl, r6
    6adc:	2302      	movs	r3, #2
    6ade:	e637      	b.n	6750 <_svfprintf_r+0x10f8>
    6ae0:	2330      	movs	r3, #48	; 0x30
    6ae2:	4657      	mov	r7, sl
    6ae4:	18f6      	adds	r6, r6, r3
    6ae6:	70bb      	strb	r3, [r7, #2]
    6ae8:	70fe      	strb	r6, [r7, #3]
    6aea:	a93f      	add	r1, sp, #252	; 0xfc
    6aec:	e6a4      	b.n	6838 <_svfprintf_r+0x11e0>
    6aee:	9b40      	ldr	r3, [sp, #256]	; 0x100
    6af0:	e65e      	b.n	67b0 <_svfprintf_r+0x1158>
    6af2:	2301      	movs	r3, #1
    6af4:	2a00      	cmp	r2, #0
    6af6:	dc01      	bgt.n	6afc <_svfprintf_r+0x14a4>
    6af8:	18db      	adds	r3, r3, r3
    6afa:	1a9b      	subs	r3, r3, r2
    6afc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6afe:	2067      	movs	r0, #103	; 0x67
    6b00:	18ff      	adds	r7, r7, r3
    6b02:	970c      	str	r7, [sp, #48]	; 0x30
    6b04:	4680      	mov	r8, r0
    6b06:	e79d      	b.n	6a44 <_svfprintf_r+0x13ec>
    6b08:	4827      	ldr	r0, [pc, #156]	; (6ba8 <_svfprintf_r+0x1550>)
    6b0a:	4680      	mov	r8, r0
    6b0c:	f7ff fbc5 	bl	629a <_svfprintf_r+0xc42>
    6b10:	4e25      	ldr	r6, [pc, #148]	; (6ba8 <_svfprintf_r+0x1550>)
    6b12:	1c3a      	adds	r2, r7, #0
    6b14:	3208      	adds	r2, #8
    6b16:	46b0      	mov	r8, r6
    6b18:	e4cc      	b.n	64b4 <_svfprintf_r+0xe5c>
    6b1a:	981a      	ldr	r0, [sp, #104]	; 0x68
    6b1c:	990a      	ldr	r1, [sp, #40]	; 0x28
    6b1e:	4b21      	ldr	r3, [pc, #132]	; (6ba4 <_svfprintf_r+0x154c>)
    6b20:	4a1f      	ldr	r2, [pc, #124]	; (6ba0 <_svfprintf_r+0x1548>)
    6b22:	f007 f877 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    6b26:	2800      	cmp	r0, #0
    6b28:	d000      	beq.n	6b2c <_svfprintf_r+0x14d4>
    6b2a:	e634      	b.n	6796 <_svfprintf_r+0x113e>
    6b2c:	2301      	movs	r3, #1
    6b2e:	4651      	mov	r1, sl
    6b30:	1a5b      	subs	r3, r3, r1
    6b32:	9342      	str	r3, [sp, #264]	; 0x108
    6b34:	e62f      	b.n	6796 <_svfprintf_r+0x113e>
    6b36:	232d      	movs	r3, #45	; 0x2d
    6b38:	4650      	mov	r0, sl
    6b3a:	4276      	negs	r6, r6
    6b3c:	7043      	strb	r3, [r0, #1]
    6b3e:	e658      	b.n	67f2 <_svfprintf_r+0x119a>
    6b40:	9e07      	ldr	r6, [sp, #28]
    6b42:	2301      	movs	r3, #1
    6b44:	401e      	ands	r6, r3
    6b46:	9618      	str	r6, [sp, #96]	; 0x60
    6b48:	d100      	bne.n	6b4c <_svfprintf_r+0x14f4>
    6b4a:	e684      	b.n	6856 <_svfprintf_r+0x11fe>
    6b4c:	e67e      	b.n	684c <_svfprintf_r+0x11f4>
    6b4e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    6b50:	e642      	b.n	67d8 <_svfprintf_r+0x1180>
    6b52:	2e00      	cmp	r6, #0
    6b54:	d105      	bne.n	6b62 <_svfprintf_r+0x150a>
    6b56:	9f07      	ldr	r7, [sp, #28]
    6b58:	2301      	movs	r3, #1
    6b5a:	930c      	str	r3, [sp, #48]	; 0x30
    6b5c:	421f      	tst	r7, r3
    6b5e:	d100      	bne.n	6b62 <_svfprintf_r+0x150a>
    6b60:	e770      	b.n	6a44 <_svfprintf_r+0x13ec>
    6b62:	3602      	adds	r6, #2
    6b64:	960c      	str	r6, [sp, #48]	; 0x30
    6b66:	e76d      	b.n	6a44 <_svfprintf_r+0x13ec>
    6b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b6a:	681b      	ldr	r3, [r3, #0]
    6b6c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    6b6e:	469b      	mov	fp, r3
    6b70:	2700      	movs	r7, #0
    6b72:	3604      	adds	r6, #4
    6b74:	45bb      	cmp	fp, r7
    6b76:	db01      	blt.n	6b7c <_svfprintf_r+0x1524>
    6b78:	f7ff f889 	bl	5c8e <_svfprintf_r+0x636>
    6b7c:	780b      	ldrb	r3, [r1, #0]
    6b7e:	960f      	str	r6, [sp, #60]	; 0x3c
    6b80:	2601      	movs	r6, #1
    6b82:	4276      	negs	r6, r6
    6b84:	46b3      	mov	fp, r6
    6b86:	f7fe fdcc 	bl	5722 <_svfprintf_r+0xca>
    6b8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6b8c:	230c      	movs	r3, #12
    6b8e:	602b      	str	r3, [r5, #0]
    6b90:	3b0b      	subs	r3, #11
    6b92:	425b      	negs	r3, r3
    6b94:	930e      	str	r3, [sp, #56]	; 0x38
    6b96:	f7fe ff1d 	bl	59d4 <_svfprintf_r+0x37c>
    6b9a:	46c0      	nop			; (mov r8, r8)
    6b9c:	46c0      	nop			; (mov r8, r8)
    6b9e:	46c0      	nop			; (mov r8, r8)
	...
    6ba8:	0000dea0 	.word	0x0000dea0
    6bac:	0000e930 	.word	0x0000e930

00006bb0 <_vfprintf_r>:
    6bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bb2:	465f      	mov	r7, fp
    6bb4:	4656      	mov	r6, sl
    6bb6:	464d      	mov	r5, r9
    6bb8:	4644      	mov	r4, r8
    6bba:	b4f0      	push	{r4, r5, r6, r7}
    6bbc:	4cbc      	ldr	r4, [pc, #752]	; (6eb0 <_vfprintf_r+0x300>)
    6bbe:	44a5      	add	sp, r4
    6bc0:	468a      	mov	sl, r1
    6bc2:	1c15      	adds	r5, r2, #0
    6bc4:	930f      	str	r3, [sp, #60]	; 0x3c
    6bc6:	9009      	str	r0, [sp, #36]	; 0x24
    6bc8:	f002 ff34 	bl	9a34 <_localeconv_r>
    6bcc:	6800      	ldr	r0, [r0, #0]
    6bce:	9018      	str	r0, [sp, #96]	; 0x60
    6bd0:	f7fe fd02 	bl	55d8 <strlen>
    6bd4:	901c      	str	r0, [sp, #112]	; 0x70
    6bd6:	9809      	ldr	r0, [sp, #36]	; 0x24
    6bd8:	2800      	cmp	r0, #0
    6bda:	d003      	beq.n	6be4 <_vfprintf_r+0x34>
    6bdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    6bde:	2b00      	cmp	r3, #0
    6be0:	d100      	bne.n	6be4 <_vfprintf_r+0x34>
    6be2:	e22a      	b.n	703a <_vfprintf_r+0x48a>
    6be4:	4651      	mov	r1, sl
    6be6:	898a      	ldrh	r2, [r1, #12]
    6be8:	2180      	movs	r1, #128	; 0x80
    6bea:	0189      	lsls	r1, r1, #6
    6bec:	1c13      	adds	r3, r2, #0
    6bee:	420a      	tst	r2, r1
    6bf0:	d108      	bne.n	6c04 <_vfprintf_r+0x54>
    6bf2:	430a      	orrs	r2, r1
    6bf4:	4653      	mov	r3, sl
    6bf6:	6e59      	ldr	r1, [r3, #100]	; 0x64
    6bf8:	819a      	strh	r2, [r3, #12]
    6bfa:	4bae      	ldr	r3, [pc, #696]	; (6eb4 <_vfprintf_r+0x304>)
    6bfc:	4656      	mov	r6, sl
    6bfe:	400b      	ands	r3, r1
    6c00:	6673      	str	r3, [r6, #100]	; 0x64
    6c02:	1c13      	adds	r3, r2, #0
    6c04:	071f      	lsls	r7, r3, #28
    6c06:	d401      	bmi.n	6c0c <_vfprintf_r+0x5c>
    6c08:	f001 fab0 	bl	816c <_vfprintf_r+0x15bc>
    6c0c:	4650      	mov	r0, sl
    6c0e:	6901      	ldr	r1, [r0, #16]
    6c10:	2900      	cmp	r1, #0
    6c12:	d101      	bne.n	6c18 <_vfprintf_r+0x68>
    6c14:	f001 faaa 	bl	816c <_vfprintf_r+0x15bc>
    6c18:	211a      	movs	r1, #26
    6c1a:	400b      	ands	r3, r1
    6c1c:	2b0a      	cmp	r3, #10
    6c1e:	d100      	bne.n	6c22 <_vfprintf_r+0x72>
    6c20:	e1d1      	b.n	6fc6 <_vfprintf_r+0x416>
    6c22:	4aa5      	ldr	r2, [pc, #660]	; (6eb8 <_vfprintf_r+0x308>)
    6c24:	4ca5      	ldr	r4, [pc, #660]	; (6ebc <_vfprintf_r+0x30c>)
    6c26:	2300      	movs	r3, #0
    6c28:	446c      	add	r4, sp
    6c2a:	446a      	add	r2, sp
    6c2c:	6022      	str	r2, [r4, #0]
    6c2e:	60a3      	str	r3, [r4, #8]
    6c30:	6063      	str	r3, [r4, #4]
    6c32:	930e      	str	r3, [sp, #56]	; 0x38
    6c34:	931a      	str	r3, [sp, #104]	; 0x68
    6c36:	931b      	str	r3, [sp, #108]	; 0x6c
    6c38:	9317      	str	r3, [sp, #92]	; 0x5c
    6c3a:	931d      	str	r3, [sp, #116]	; 0x74
    6c3c:	930d      	str	r3, [sp, #52]	; 0x34
    6c3e:	9508      	str	r5, [sp, #32]
    6c40:	46d3      	mov	fp, sl
    6c42:	1c15      	adds	r5, r2, #0
    6c44:	9e08      	ldr	r6, [sp, #32]
    6c46:	7833      	ldrb	r3, [r6, #0]
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d100      	bne.n	6c4e <_vfprintf_r+0x9e>
    6c4c:	e186      	b.n	6f5c <_vfprintf_r+0x3ac>
    6c4e:	2b25      	cmp	r3, #37	; 0x25
    6c50:	d102      	bne.n	6c58 <_vfprintf_r+0xa8>
    6c52:	e183      	b.n	6f5c <_vfprintf_r+0x3ac>
    6c54:	2b00      	cmp	r3, #0
    6c56:	d003      	beq.n	6c60 <_vfprintf_r+0xb0>
    6c58:	3601      	adds	r6, #1
    6c5a:	7833      	ldrb	r3, [r6, #0]
    6c5c:	2b25      	cmp	r3, #37	; 0x25
    6c5e:	d1f9      	bne.n	6c54 <_vfprintf_r+0xa4>
    6c60:	9808      	ldr	r0, [sp, #32]
    6c62:	1a37      	subs	r7, r6, r0
    6c64:	2f00      	cmp	r7, #0
    6c66:	d00f      	beq.n	6c88 <_vfprintf_r+0xd8>
    6c68:	68a3      	ldr	r3, [r4, #8]
    6c6a:	19db      	adds	r3, r3, r7
    6c6c:	6028      	str	r0, [r5, #0]
    6c6e:	606f      	str	r7, [r5, #4]
    6c70:	60a3      	str	r3, [r4, #8]
    6c72:	6863      	ldr	r3, [r4, #4]
    6c74:	3301      	adds	r3, #1
    6c76:	6063      	str	r3, [r4, #4]
    6c78:	3508      	adds	r5, #8
    6c7a:	2b07      	cmp	r3, #7
    6c7c:	dd00      	ble.n	6c80 <_vfprintf_r+0xd0>
    6c7e:	e17e      	b.n	6f7e <_vfprintf_r+0x3ce>
    6c80:	990d      	ldr	r1, [sp, #52]	; 0x34
    6c82:	19c9      	adds	r1, r1, r7
    6c84:	910d      	str	r1, [sp, #52]	; 0x34
    6c86:	7833      	ldrb	r3, [r6, #0]
    6c88:	2b00      	cmp	r3, #0
    6c8a:	d101      	bne.n	6c90 <_vfprintf_r+0xe0>
    6c8c:	f000 fbed 	bl	746a <_vfprintf_r+0x8ba>
    6c90:	4b8b      	ldr	r3, [pc, #556]	; (6ec0 <_vfprintf_r+0x310>)
    6c92:	1c72      	adds	r2, r6, #1
    6c94:	446b      	add	r3, sp
    6c96:	2700      	movs	r7, #0
    6c98:	9208      	str	r2, [sp, #32]
    6c9a:	701f      	strb	r7, [r3, #0]
    6c9c:	2000      	movs	r0, #0
    6c9e:	4699      	mov	r9, r3
    6ca0:	2108      	movs	r1, #8
    6ca2:	7873      	ldrb	r3, [r6, #1]
    6ca4:	2780      	movs	r7, #128	; 0x80
    6ca6:	2601      	movs	r6, #1
    6ca8:	4a86      	ldr	r2, [pc, #536]	; (6ec4 <_vfprintf_r+0x314>)
    6caa:	900b      	str	r0, [sp, #44]	; 0x2c
    6cac:	9007      	str	r0, [sp, #28]
    6cae:	4276      	negs	r6, r6
    6cb0:	3020      	adds	r0, #32
    6cb2:	4688      	mov	r8, r1
    6cb4:	46ba      	mov	sl, r7
    6cb6:	9f08      	ldr	r7, [sp, #32]
    6cb8:	3701      	adds	r7, #1
    6cba:	9708      	str	r7, [sp, #32]
    6cbc:	1c19      	adds	r1, r3, #0
    6cbe:	3920      	subs	r1, #32
    6cc0:	2958      	cmp	r1, #88	; 0x58
    6cc2:	d800      	bhi.n	6cc6 <_vfprintf_r+0x116>
    6cc4:	e14d      	b.n	6f62 <_vfprintf_r+0x3b2>
    6cc6:	9316      	str	r3, [sp, #88]	; 0x58
    6cc8:	2b00      	cmp	r3, #0
    6cca:	d100      	bne.n	6cce <_vfprintf_r+0x11e>
    6ccc:	e3cd      	b.n	746a <_vfprintf_r+0x8ba>
    6cce:	4b7e      	ldr	r3, [pc, #504]	; (6ec8 <_vfprintf_r+0x318>)
    6cd0:	af16      	add	r7, sp, #88	; 0x58
    6cd2:	783f      	ldrb	r7, [r7, #0]
    6cd4:	446b      	add	r3, sp
    6cd6:	2100      	movs	r1, #0
    6cd8:	4648      	mov	r0, r9
    6cda:	701f      	strb	r7, [r3, #0]
    6cdc:	7001      	strb	r1, [r0, #0]
    6cde:	2200      	movs	r2, #0
    6ce0:	2601      	movs	r6, #1
    6ce2:	960a      	str	r6, [sp, #40]	; 0x28
    6ce4:	960c      	str	r6, [sp, #48]	; 0x30
    6ce6:	9214      	str	r2, [sp, #80]	; 0x50
    6ce8:	9219      	str	r2, [sp, #100]	; 0x64
    6cea:	9313      	str	r3, [sp, #76]	; 0x4c
    6cec:	9807      	ldr	r0, [sp, #28]
    6cee:	2302      	movs	r3, #2
    6cf0:	4018      	ands	r0, r3
    6cf2:	4682      	mov	sl, r0
    6cf4:	d002      	beq.n	6cfc <_vfprintf_r+0x14c>
    6cf6:	990a      	ldr	r1, [sp, #40]	; 0x28
    6cf8:	18c9      	adds	r1, r1, r3
    6cfa:	910a      	str	r1, [sp, #40]	; 0x28
    6cfc:	9e07      	ldr	r6, [sp, #28]
    6cfe:	2384      	movs	r3, #132	; 0x84
    6d00:	401e      	ands	r6, r3
    6d02:	9615      	str	r6, [sp, #84]	; 0x54
    6d04:	d13e      	bne.n	6d84 <_vfprintf_r+0x1d4>
    6d06:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    6d08:	980a      	ldr	r0, [sp, #40]	; 0x28
    6d0a:	1a3e      	subs	r6, r7, r0
    6d0c:	2e00      	cmp	r6, #0
    6d0e:	dd39      	ble.n	6d84 <_vfprintf_r+0x1d4>
    6d10:	2e10      	cmp	r6, #16
    6d12:	dc01      	bgt.n	6d18 <_vfprintf_r+0x168>
    6d14:	f001 f9d0 	bl	80b8 <_vfprintf_r+0x1508>
    6d18:	496c      	ldr	r1, [pc, #432]	; (6ecc <_vfprintf_r+0x31c>)
    6d1a:	1c2a      	adds	r2, r5, #0
    6d1c:	2710      	movs	r7, #16
    6d1e:	1c0d      	adds	r5, r1, #0
    6d20:	e005      	b.n	6d2e <_vfprintf_r+0x17e>
    6d22:	3208      	adds	r2, #8
    6d24:	1c13      	adds	r3, r2, #0
    6d26:	3e10      	subs	r6, #16
    6d28:	3308      	adds	r3, #8
    6d2a:	2e10      	cmp	r6, #16
    6d2c:	dd18      	ble.n	6d60 <_vfprintf_r+0x1b0>
    6d2e:	68a3      	ldr	r3, [r4, #8]
    6d30:	3310      	adds	r3, #16
    6d32:	6015      	str	r5, [r2, #0]
    6d34:	6057      	str	r7, [r2, #4]
    6d36:	60a3      	str	r3, [r4, #8]
    6d38:	6863      	ldr	r3, [r4, #4]
    6d3a:	3301      	adds	r3, #1
    6d3c:	6063      	str	r3, [r4, #4]
    6d3e:	2b07      	cmp	r3, #7
    6d40:	ddef      	ble.n	6d22 <_vfprintf_r+0x172>
    6d42:	9809      	ldr	r0, [sp, #36]	; 0x24
    6d44:	4659      	mov	r1, fp
    6d46:	1c22      	adds	r2, r4, #0
    6d48:	f004 fd72 	bl	b830 <__sprint_r>
    6d4c:	2800      	cmp	r0, #0
    6d4e:	d000      	beq.n	6d52 <_vfprintf_r+0x1a2>
    6d50:	e126      	b.n	6fa0 <_vfprintf_r+0x3f0>
    6d52:	4b5f      	ldr	r3, [pc, #380]	; (6ed0 <_vfprintf_r+0x320>)
    6d54:	4a58      	ldr	r2, [pc, #352]	; (6eb8 <_vfprintf_r+0x308>)
    6d56:	3e10      	subs	r6, #16
    6d58:	446b      	add	r3, sp
    6d5a:	446a      	add	r2, sp
    6d5c:	2e10      	cmp	r6, #16
    6d5e:	dce6      	bgt.n	6d2e <_vfprintf_r+0x17e>
    6d60:	46a8      	mov	r8, r5
    6d62:	1c15      	adds	r5, r2, #0
    6d64:	68a2      	ldr	r2, [r4, #8]
    6d66:	4647      	mov	r7, r8
    6d68:	18b2      	adds	r2, r6, r2
    6d6a:	602f      	str	r7, [r5, #0]
    6d6c:	606e      	str	r6, [r5, #4]
    6d6e:	60a2      	str	r2, [r4, #8]
    6d70:	6862      	ldr	r2, [r4, #4]
    6d72:	3201      	adds	r2, #1
    6d74:	6062      	str	r2, [r4, #4]
    6d76:	2a07      	cmp	r2, #7
    6d78:	dd01      	ble.n	6d7e <_vfprintf_r+0x1ce>
    6d7a:	f000 fd90 	bl	789e <_vfprintf_r+0xcee>
    6d7e:	4648      	mov	r0, r9
    6d80:	7802      	ldrb	r2, [r0, #0]
    6d82:	1c1d      	adds	r5, r3, #0
    6d84:	2a00      	cmp	r2, #0
    6d86:	d00e      	beq.n	6da6 <_vfprintf_r+0x1f6>
    6d88:	2301      	movs	r3, #1
    6d8a:	606b      	str	r3, [r5, #4]
    6d8c:	68a3      	ldr	r3, [r4, #8]
    6d8e:	464a      	mov	r2, r9
    6d90:	3301      	adds	r3, #1
    6d92:	602a      	str	r2, [r5, #0]
    6d94:	60a3      	str	r3, [r4, #8]
    6d96:	6863      	ldr	r3, [r4, #4]
    6d98:	3301      	adds	r3, #1
    6d9a:	6063      	str	r3, [r4, #4]
    6d9c:	3508      	adds	r5, #8
    6d9e:	2b07      	cmp	r3, #7
    6da0:	dd01      	ble.n	6da6 <_vfprintf_r+0x1f6>
    6da2:	f000 fcc7 	bl	7734 <_vfprintf_r+0xb84>
    6da6:	2300      	movs	r3, #0
    6da8:	459a      	cmp	sl, r3
    6daa:	d00f      	beq.n	6dcc <_vfprintf_r+0x21c>
    6dac:	4b49      	ldr	r3, [pc, #292]	; (6ed4 <_vfprintf_r+0x324>)
    6dae:	446b      	add	r3, sp
    6db0:	602b      	str	r3, [r5, #0]
    6db2:	2302      	movs	r3, #2
    6db4:	606b      	str	r3, [r5, #4]
    6db6:	68a3      	ldr	r3, [r4, #8]
    6db8:	3302      	adds	r3, #2
    6dba:	60a3      	str	r3, [r4, #8]
    6dbc:	6863      	ldr	r3, [r4, #4]
    6dbe:	3301      	adds	r3, #1
    6dc0:	6063      	str	r3, [r4, #4]
    6dc2:	3508      	adds	r5, #8
    6dc4:	2b07      	cmp	r3, #7
    6dc6:	dd01      	ble.n	6dcc <_vfprintf_r+0x21c>
    6dc8:	f000 fca8 	bl	771c <_vfprintf_r+0xb6c>
    6dcc:	9e15      	ldr	r6, [sp, #84]	; 0x54
    6dce:	2e80      	cmp	r6, #128	; 0x80
    6dd0:	d100      	bne.n	6dd4 <_vfprintf_r+0x224>
    6dd2:	e3cf      	b.n	7574 <_vfprintf_r+0x9c4>
    6dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6dd8:	1ad6      	subs	r6, r2, r3
    6dda:	2e00      	cmp	r6, #0
    6ddc:	dc01      	bgt.n	6de2 <_vfprintf_r+0x232>
    6dde:	f000 fc19 	bl	7614 <_vfprintf_r+0xa64>
    6de2:	2e10      	cmp	r6, #16
    6de4:	dc01      	bgt.n	6dea <_vfprintf_r+0x23a>
    6de6:	f001 f80e 	bl	7e06 <_vfprintf_r+0x1256>
    6dea:	4f38      	ldr	r7, [pc, #224]	; (6ecc <_vfprintf_r+0x31c>)
    6dec:	2010      	movs	r0, #16
    6dee:	46b8      	mov	r8, r7
    6df0:	4681      	mov	r9, r0
    6df2:	1c2b      	adds	r3, r5, #0
    6df4:	44c1      	add	r9, r8
    6df6:	4682      	mov	sl, r0
    6df8:	9d09      	ldr	r5, [sp, #36]	; 0x24
    6dfa:	465f      	mov	r7, fp
    6dfc:	e005      	b.n	6e0a <_vfprintf_r+0x25a>
    6dfe:	3308      	adds	r3, #8
    6e00:	1c1a      	adds	r2, r3, #0
    6e02:	3e10      	subs	r6, #16
    6e04:	3208      	adds	r2, #8
    6e06:	2e10      	cmp	r6, #16
    6e08:	dd1b      	ble.n	6e42 <_vfprintf_r+0x292>
    6e0a:	464a      	mov	r2, r9
    6e0c:	601a      	str	r2, [r3, #0]
    6e0e:	68a2      	ldr	r2, [r4, #8]
    6e10:	4650      	mov	r0, sl
    6e12:	3210      	adds	r2, #16
    6e14:	6058      	str	r0, [r3, #4]
    6e16:	60a2      	str	r2, [r4, #8]
    6e18:	6862      	ldr	r2, [r4, #4]
    6e1a:	3201      	adds	r2, #1
    6e1c:	6062      	str	r2, [r4, #4]
    6e1e:	2a07      	cmp	r2, #7
    6e20:	dded      	ble.n	6dfe <_vfprintf_r+0x24e>
    6e22:	1c28      	adds	r0, r5, #0
    6e24:	1c39      	adds	r1, r7, #0
    6e26:	1c22      	adds	r2, r4, #0
    6e28:	f004 fd02 	bl	b830 <__sprint_r>
    6e2c:	2800      	cmp	r0, #0
    6e2e:	d001      	beq.n	6e34 <_vfprintf_r+0x284>
    6e30:	f000 fc66 	bl	7700 <_vfprintf_r+0xb50>
    6e34:	4a26      	ldr	r2, [pc, #152]	; (6ed0 <_vfprintf_r+0x320>)
    6e36:	4b20      	ldr	r3, [pc, #128]	; (6eb8 <_vfprintf_r+0x308>)
    6e38:	3e10      	subs	r6, #16
    6e3a:	446a      	add	r2, sp
    6e3c:	446b      	add	r3, sp
    6e3e:	2e10      	cmp	r6, #16
    6e40:	dce3      	bgt.n	6e0a <_vfprintf_r+0x25a>
    6e42:	46bb      	mov	fp, r7
    6e44:	1c1d      	adds	r5, r3, #0
    6e46:	1c17      	adds	r7, r2, #0
    6e48:	2110      	movs	r1, #16
    6e4a:	1c0b      	adds	r3, r1, #0
    6e4c:	4443      	add	r3, r8
    6e4e:	602b      	str	r3, [r5, #0]
    6e50:	68a3      	ldr	r3, [r4, #8]
    6e52:	606e      	str	r6, [r5, #4]
    6e54:	18f6      	adds	r6, r6, r3
    6e56:	6863      	ldr	r3, [r4, #4]
    6e58:	3301      	adds	r3, #1
    6e5a:	60a6      	str	r6, [r4, #8]
    6e5c:	6063      	str	r3, [r4, #4]
    6e5e:	2b07      	cmp	r3, #7
    6e60:	dd01      	ble.n	6e66 <_vfprintf_r+0x2b6>
    6e62:	f000 fc4f 	bl	7704 <_vfprintf_r+0xb54>
    6e66:	9a07      	ldr	r2, [sp, #28]
    6e68:	05d2      	lsls	r2, r2, #23
    6e6a:	d500      	bpl.n	6e6e <_vfprintf_r+0x2be>
    6e6c:	e308      	b.n	7480 <_vfprintf_r+0x8d0>
    6e6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6e70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    6e72:	603b      	str	r3, [r7, #0]
    6e74:	607d      	str	r5, [r7, #4]
    6e76:	68a3      	ldr	r3, [r4, #8]
    6e78:	195b      	adds	r3, r3, r5
    6e7a:	60a3      	str	r3, [r4, #8]
    6e7c:	6863      	ldr	r3, [r4, #4]
    6e7e:	3301      	adds	r3, #1
    6e80:	6063      	str	r3, [r4, #4]
    6e82:	3708      	adds	r7, #8
    6e84:	2b07      	cmp	r3, #7
    6e86:	dd01      	ble.n	6e8c <_vfprintf_r+0x2dc>
    6e88:	f000 fc17 	bl	76ba <_vfprintf_r+0xb0a>
    6e8c:	9907      	ldr	r1, [sp, #28]
    6e8e:	0749      	lsls	r1, r1, #29
    6e90:	d550      	bpl.n	6f34 <_vfprintf_r+0x384>
    6e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6e96:	1ad5      	subs	r5, r2, r3
    6e98:	2d00      	cmp	r5, #0
    6e9a:	dd4b      	ble.n	6f34 <_vfprintf_r+0x384>
    6e9c:	2d10      	cmp	r5, #16
    6e9e:	dc01      	bgt.n	6ea4 <_vfprintf_r+0x2f4>
    6ea0:	f001 f971 	bl	8186 <_vfprintf_r+0x15d6>
    6ea4:	4809      	ldr	r0, [pc, #36]	; (6ecc <_vfprintf_r+0x31c>)
    6ea6:	1c3b      	adds	r3, r7, #0
    6ea8:	2610      	movs	r6, #16
    6eaa:	1c07      	adds	r7, r0, #0
    6eac:	e017      	b.n	6ede <_vfprintf_r+0x32e>
    6eae:	46c0      	nop			; (mov r8, r8)
    6eb0:	fffffa8c 	.word	0xfffffa8c
    6eb4:	ffffdfff 	.word	0xffffdfff
    6eb8:	000004e4 	.word	0x000004e4
    6ebc:	0000054c 	.word	0x0000054c
    6ec0:	0000056f 	.word	0x0000056f
    6ec4:	0000dec0 	.word	0x0000dec0
    6ec8:	00000524 	.word	0x00000524
    6ecc:	0000e024 	.word	0x0000e024
    6ed0:	000004ec 	.word	0x000004ec
    6ed4:	0000056c 	.word	0x0000056c
    6ed8:	3d10      	subs	r5, #16
    6eda:	2d10      	cmp	r5, #16
    6edc:	dd16      	ble.n	6f0c <_vfprintf_r+0x35c>
    6ede:	68a2      	ldr	r2, [r4, #8]
    6ee0:	3210      	adds	r2, #16
    6ee2:	601f      	str	r7, [r3, #0]
    6ee4:	605e      	str	r6, [r3, #4]
    6ee6:	60a2      	str	r2, [r4, #8]
    6ee8:	6862      	ldr	r2, [r4, #4]
    6eea:	3201      	adds	r2, #1
    6eec:	6062      	str	r2, [r4, #4]
    6eee:	3308      	adds	r3, #8
    6ef0:	2a07      	cmp	r2, #7
    6ef2:	ddf1      	ble.n	6ed8 <_vfprintf_r+0x328>
    6ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
    6ef6:	4659      	mov	r1, fp
    6ef8:	1c22      	adds	r2, r4, #0
    6efa:	f004 fc99 	bl	b830 <__sprint_r>
    6efe:	2800      	cmp	r0, #0
    6f00:	d14e      	bne.n	6fa0 <_vfprintf_r+0x3f0>
    6f02:	4bcf      	ldr	r3, [pc, #828]	; (7240 <_vfprintf_r+0x690>)
    6f04:	3d10      	subs	r5, #16
    6f06:	446b      	add	r3, sp
    6f08:	2d10      	cmp	r5, #16
    6f0a:	dce8      	bgt.n	6ede <_vfprintf_r+0x32e>
    6f0c:	46b8      	mov	r8, r7
    6f0e:	1c1f      	adds	r7, r3, #0
    6f10:	68a3      	ldr	r3, [r4, #8]
    6f12:	607d      	str	r5, [r7, #4]
    6f14:	18ed      	adds	r5, r5, r3
    6f16:	6863      	ldr	r3, [r4, #4]
    6f18:	4641      	mov	r1, r8
    6f1a:	3301      	adds	r3, #1
    6f1c:	6039      	str	r1, [r7, #0]
    6f1e:	60a5      	str	r5, [r4, #8]
    6f20:	6063      	str	r3, [r4, #4]
    6f22:	2b07      	cmp	r3, #7
    6f24:	dd07      	ble.n	6f36 <_vfprintf_r+0x386>
    6f26:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f28:	4659      	mov	r1, fp
    6f2a:	1c22      	adds	r2, r4, #0
    6f2c:	f004 fc80 	bl	b830 <__sprint_r>
    6f30:	2800      	cmp	r0, #0
    6f32:	d135      	bne.n	6fa0 <_vfprintf_r+0x3f0>
    6f34:	68a5      	ldr	r5, [r4, #8]
    6f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6f3a:	4293      	cmp	r3, r2
    6f3c:	da00      	bge.n	6f40 <_vfprintf_r+0x390>
    6f3e:	1c13      	adds	r3, r2, #0
    6f40:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    6f42:	18f6      	adds	r6, r6, r3
    6f44:	960d      	str	r6, [sp, #52]	; 0x34
    6f46:	2d00      	cmp	r5, #0
    6f48:	d123      	bne.n	6f92 <_vfprintf_r+0x3e2>
    6f4a:	2700      	movs	r7, #0
    6f4c:	6067      	str	r7, [r4, #4]
    6f4e:	9e08      	ldr	r6, [sp, #32]
    6f50:	4dbb      	ldr	r5, [pc, #748]	; (7240 <_vfprintf_r+0x690>)
    6f52:	7833      	ldrb	r3, [r6, #0]
    6f54:	446d      	add	r5, sp
    6f56:	2b00      	cmp	r3, #0
    6f58:	d000      	beq.n	6f5c <_vfprintf_r+0x3ac>
    6f5a:	e678      	b.n	6c4e <_vfprintf_r+0x9e>
    6f5c:	9e08      	ldr	r6, [sp, #32]
    6f5e:	7833      	ldrb	r3, [r6, #0]
    6f60:	e692      	b.n	6c88 <_vfprintf_r+0xd8>
    6f62:	0089      	lsls	r1, r1, #2
    6f64:	5851      	ldr	r1, [r2, r1]
    6f66:	468f      	mov	pc, r1
    6f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6f6a:	425b      	negs	r3, r3
    6f6c:	930b      	str	r3, [sp, #44]	; 0x2c
    6f6e:	970f      	str	r7, [sp, #60]	; 0x3c
    6f70:	9f07      	ldr	r7, [sp, #28]
    6f72:	2304      	movs	r3, #4
    6f74:	431f      	orrs	r7, r3
    6f76:	9707      	str	r7, [sp, #28]
    6f78:	9908      	ldr	r1, [sp, #32]
    6f7a:	780b      	ldrb	r3, [r1, #0]
    6f7c:	e69b      	b.n	6cb6 <_vfprintf_r+0x106>
    6f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f80:	4659      	mov	r1, fp
    6f82:	1c22      	adds	r2, r4, #0
    6f84:	f004 fc54 	bl	b830 <__sprint_r>
    6f88:	2800      	cmp	r0, #0
    6f8a:	d109      	bne.n	6fa0 <_vfprintf_r+0x3f0>
    6f8c:	4dac      	ldr	r5, [pc, #688]	; (7240 <_vfprintf_r+0x690>)
    6f8e:	446d      	add	r5, sp
    6f90:	e676      	b.n	6c80 <_vfprintf_r+0xd0>
    6f92:	9809      	ldr	r0, [sp, #36]	; 0x24
    6f94:	4659      	mov	r1, fp
    6f96:	1c22      	adds	r2, r4, #0
    6f98:	f004 fc4a 	bl	b830 <__sprint_r>
    6f9c:	2800      	cmp	r0, #0
    6f9e:	d0d4      	beq.n	6f4a <_vfprintf_r+0x39a>
    6fa0:	46da      	mov	sl, fp
    6fa2:	4650      	mov	r0, sl
    6fa4:	8983      	ldrh	r3, [r0, #12]
    6fa6:	0659      	lsls	r1, r3, #25
    6fa8:	d502      	bpl.n	6fb0 <_vfprintf_r+0x400>
    6faa:	2301      	movs	r3, #1
    6fac:	425b      	negs	r3, r3
    6fae:	930d      	str	r3, [sp, #52]	; 0x34
    6fb0:	4ba4      	ldr	r3, [pc, #656]	; (7244 <_vfprintf_r+0x694>)
    6fb2:	980d      	ldr	r0, [sp, #52]	; 0x34
    6fb4:	449d      	add	sp, r3
    6fb6:	bc3c      	pop	{r2, r3, r4, r5}
    6fb8:	4690      	mov	r8, r2
    6fba:	4699      	mov	r9, r3
    6fbc:	46a2      	mov	sl, r4
    6fbe:	46ab      	mov	fp, r5
    6fc0:	bcf0      	pop	{r4, r5, r6, r7}
    6fc2:	bc02      	pop	{r1}
    6fc4:	4708      	bx	r1
    6fc6:	4653      	mov	r3, sl
    6fc8:	89d9      	ldrh	r1, [r3, #14]
    6fca:	040b      	lsls	r3, r1, #16
    6fcc:	141b      	asrs	r3, r3, #16
    6fce:	2b00      	cmp	r3, #0
    6fd0:	da00      	bge.n	6fd4 <_vfprintf_r+0x424>
    6fd2:	e626      	b.n	6c22 <_vfprintf_r+0x72>
    6fd4:	4656      	mov	r6, sl
    6fd6:	2302      	movs	r3, #2
    6fd8:	4c9b      	ldr	r4, [pc, #620]	; (7248 <_vfprintf_r+0x698>)
    6fda:	439a      	bics	r2, r3
    6fdc:	6e73      	ldr	r3, [r6, #100]	; 0x64
    6fde:	446c      	add	r4, sp
    6fe0:	6663      	str	r3, [r4, #100]	; 0x64
    6fe2:	69f3      	ldr	r3, [r6, #28]
    6fe4:	61e3      	str	r3, [r4, #28]
    6fe6:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6fe8:	81a2      	strh	r2, [r4, #12]
    6fea:	81e1      	strh	r1, [r4, #14]
    6fec:	6263      	str	r3, [r4, #36]	; 0x24
    6fee:	4c96      	ldr	r4, [pc, #600]	; (7248 <_vfprintf_r+0x698>)
    6ff0:	2380      	movs	r3, #128	; 0x80
    6ff2:	446c      	add	r4, sp
    6ff4:	00db      	lsls	r3, r3, #3
    6ff6:	af1f      	add	r7, sp, #124	; 0x7c
    6ff8:	60a3      	str	r3, [r4, #8]
    6ffa:	6163      	str	r3, [r4, #20]
    6ffc:	2300      	movs	r3, #0
    6ffe:	61a3      	str	r3, [r4, #24]
    7000:	6027      	str	r7, [r4, #0]
    7002:	6127      	str	r7, [r4, #16]
    7004:	9809      	ldr	r0, [sp, #36]	; 0x24
    7006:	1c21      	adds	r1, r4, #0
    7008:	1c2a      	adds	r2, r5, #0
    700a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    700c:	f7ff fdd0 	bl	6bb0 <_vfprintf_r>
    7010:	900d      	str	r0, [sp, #52]	; 0x34
    7012:	2800      	cmp	r0, #0
    7014:	db07      	blt.n	7026 <_vfprintf_r+0x476>
    7016:	9809      	ldr	r0, [sp, #36]	; 0x24
    7018:	1c21      	adds	r1, r4, #0
    701a:	f7fd fad9 	bl	45d0 <_fflush_r>
    701e:	2800      	cmp	r0, #0
    7020:	d001      	beq.n	7026 <_vfprintf_r+0x476>
    7022:	f001 f99c 	bl	835e <_vfprintf_r+0x17ae>
    7026:	89a2      	ldrh	r2, [r4, #12]
    7028:	2340      	movs	r3, #64	; 0x40
    702a:	421a      	tst	r2, r3
    702c:	d0c0      	beq.n	6fb0 <_vfprintf_r+0x400>
    702e:	4650      	mov	r0, sl
    7030:	8982      	ldrh	r2, [r0, #12]
    7032:	4651      	mov	r1, sl
    7034:	4313      	orrs	r3, r2
    7036:	818b      	strh	r3, [r1, #12]
    7038:	e7ba      	b.n	6fb0 <_vfprintf_r+0x400>
    703a:	f7fd fbbd 	bl	47b8 <__sinit>
    703e:	e5d1      	b.n	6be4 <_vfprintf_r+0x34>
    7040:	9f07      	ldr	r7, [sp, #28]
    7042:	9316      	str	r3, [sp, #88]	; 0x58
    7044:	2310      	movs	r3, #16
    7046:	431f      	orrs	r7, r3
    7048:	9707      	str	r7, [sp, #28]
    704a:	9807      	ldr	r0, [sp, #28]
    704c:	0680      	lsls	r0, r0, #26
    704e:	d401      	bmi.n	7054 <_vfprintf_r+0x4a4>
    7050:	f000 fc64 	bl	791c <_vfprintf_r+0xd6c>
    7054:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7056:	2307      	movs	r3, #7
    7058:	3207      	adds	r2, #7
    705a:	439a      	bics	r2, r3
    705c:	2108      	movs	r1, #8
    705e:	1889      	adds	r1, r1, r2
    7060:	910f      	str	r1, [sp, #60]	; 0x3c
    7062:	6810      	ldr	r0, [r2, #0]
    7064:	6851      	ldr	r1, [r2, #4]
    7066:	9010      	str	r0, [sp, #64]	; 0x40
    7068:	9111      	str	r1, [sp, #68]	; 0x44
    706a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    706c:	2a00      	cmp	r2, #0
    706e:	da01      	bge.n	7074 <_vfprintf_r+0x4c4>
    7070:	f000 fcc7 	bl	7a02 <_vfprintf_r+0xe52>
    7074:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7076:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7078:	431a      	orrs	r2, r3
    707a:	1e53      	subs	r3, r2, #1
    707c:	419a      	sbcs	r2, r3
    707e:	2301      	movs	r3, #1
    7080:	2e00      	cmp	r6, #0
    7082:	db03      	blt.n	708c <_vfprintf_r+0x4dc>
    7084:	9f07      	ldr	r7, [sp, #28]
    7086:	2180      	movs	r1, #128	; 0x80
    7088:	438f      	bics	r7, r1
    708a:	9707      	str	r7, [sp, #28]
    708c:	2e00      	cmp	r6, #0
    708e:	d102      	bne.n	7096 <_vfprintf_r+0x4e6>
    7090:	2a00      	cmp	r2, #0
    7092:	d100      	bne.n	7096 <_vfprintf_r+0x4e6>
    7094:	e25c      	b.n	7550 <_vfprintf_r+0x9a0>
    7096:	2b01      	cmp	r3, #1
    7098:	d100      	bne.n	709c <_vfprintf_r+0x4ec>
    709a:	e3ce      	b.n	783a <_vfprintf_r+0xc8a>
    709c:	2b02      	cmp	r3, #2
    709e:	d100      	bne.n	70a2 <_vfprintf_r+0x4f2>
    70a0:	e3ad      	b.n	77fe <_vfprintf_r+0xc4e>
    70a2:	2007      	movs	r0, #7
    70a4:	9413      	str	r4, [sp, #76]	; 0x4c
    70a6:	950a      	str	r5, [sp, #40]	; 0x28
    70a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    70aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    70ac:	4684      	mov	ip, r0
    70ae:	1c21      	adds	r1, r4, #0
    70b0:	08d7      	lsrs	r7, r2, #3
    70b2:	075d      	lsls	r5, r3, #29
    70b4:	46b8      	mov	r8, r7
    70b6:	4660      	mov	r0, ip
    70b8:	4010      	ands	r0, r2
    70ba:	1c2f      	adds	r7, r5, #0
    70bc:	4645      	mov	r5, r8
    70be:	432f      	orrs	r7, r5
    70c0:	3901      	subs	r1, #1
    70c2:	3030      	adds	r0, #48	; 0x30
    70c4:	08dd      	lsrs	r5, r3, #3
    70c6:	7008      	strb	r0, [r1, #0]
    70c8:	1c3a      	adds	r2, r7, #0
    70ca:	1c2b      	adds	r3, r5, #0
    70cc:	432f      	orrs	r7, r5
    70ce:	d1ef      	bne.n	70b0 <_vfprintf_r+0x500>
    70d0:	9113      	str	r1, [sp, #76]	; 0x4c
    70d2:	9907      	ldr	r1, [sp, #28]
    70d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    70d6:	9210      	str	r2, [sp, #64]	; 0x40
    70d8:	9311      	str	r3, [sp, #68]	; 0x44
    70da:	07c9      	lsls	r1, r1, #31
    70dc:	d501      	bpl.n	70e2 <_vfprintf_r+0x532>
    70de:	f000 fc84 	bl	79ea <_vfprintf_r+0xe3a>
    70e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    70e4:	1aa2      	subs	r2, r4, r2
    70e6:	920c      	str	r2, [sp, #48]	; 0x30
    70e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    70ea:	920a      	str	r2, [sp, #40]	; 0x28
    70ec:	42b2      	cmp	r2, r6
    70ee:	da00      	bge.n	70f2 <_vfprintf_r+0x542>
    70f0:	960a      	str	r6, [sp, #40]	; 0x28
    70f2:	464b      	mov	r3, r9
    70f4:	9614      	str	r6, [sp, #80]	; 0x50
    70f6:	2600      	movs	r6, #0
    70f8:	781a      	ldrb	r2, [r3, #0]
    70fa:	9619      	str	r6, [sp, #100]	; 0x64
    70fc:	2a00      	cmp	r2, #0
    70fe:	d100      	bne.n	7102 <_vfprintf_r+0x552>
    7100:	e5f4      	b.n	6cec <_vfprintf_r+0x13c>
    7102:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    7104:	3701      	adds	r7, #1
    7106:	970a      	str	r7, [sp, #40]	; 0x28
    7108:	e5f0      	b.n	6cec <_vfprintf_r+0x13c>
    710a:	9807      	ldr	r0, [sp, #28]
    710c:	9316      	str	r3, [sp, #88]	; 0x58
    710e:	4698      	mov	r8, r3
    7110:	0700      	lsls	r0, r0, #28
    7112:	d401      	bmi.n	7118 <_vfprintf_r+0x568>
    7114:	f000 fd93 	bl	7c3e <_vfprintf_r+0x108e>
    7118:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    711a:	2307      	movs	r3, #7
    711c:	3207      	adds	r2, #7
    711e:	439a      	bics	r2, r3
    7120:	6813      	ldr	r3, [r2, #0]
    7122:	2108      	movs	r1, #8
    7124:	1889      	adds	r1, r1, r2
    7126:	910f      	str	r1, [sp, #60]	; 0x3c
    7128:	931a      	str	r3, [sp, #104]	; 0x68
    712a:	6852      	ldr	r2, [r2, #4]
    712c:	921b      	str	r2, [sp, #108]	; 0x6c
    712e:	981a      	ldr	r0, [sp, #104]	; 0x68
    7130:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7132:	f003 fcfb 	bl	ab2c <__fpclassifyd>
    7136:	2801      	cmp	r0, #1
    7138:	d001      	beq.n	713e <_vfprintf_r+0x58e>
    713a:	f000 fc93 	bl	7a64 <_vfprintf_r+0xeb4>
    713e:	981a      	ldr	r0, [sp, #104]	; 0x68
    7140:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7142:	4b3e      	ldr	r3, [pc, #248]	; (723c <_vfprintf_r+0x68c>)
    7144:	4a3c      	ldr	r2, [pc, #240]	; (7238 <_vfprintf_r+0x688>)
    7146:	f006 fd5b 	bl	dc00 <____aeabi_dcmplt_from_thumb>
    714a:	2800      	cmp	r0, #0
    714c:	d001      	beq.n	7152 <_vfprintf_r+0x5a2>
    714e:	f000 ff36 	bl	7fbe <_vfprintf_r+0x140e>
    7152:	4649      	mov	r1, r9
    7154:	780a      	ldrb	r2, [r1, #0]
    7156:	9e16      	ldr	r6, [sp, #88]	; 0x58
    7158:	2e47      	cmp	r6, #71	; 0x47
    715a:	dd01      	ble.n	7160 <_vfprintf_r+0x5b0>
    715c:	f000 ff69 	bl	8032 <_vfprintf_r+0x1482>
    7160:	4f3a      	ldr	r7, [pc, #232]	; (724c <_vfprintf_r+0x69c>)
    7162:	9713      	str	r7, [sp, #76]	; 0x4c
    7164:	9907      	ldr	r1, [sp, #28]
    7166:	2380      	movs	r3, #128	; 0x80
    7168:	4399      	bics	r1, r3
    716a:	2600      	movs	r6, #0
    716c:	3b7d      	subs	r3, #125	; 0x7d
    716e:	9107      	str	r1, [sp, #28]
    7170:	930a      	str	r3, [sp, #40]	; 0x28
    7172:	930c      	str	r3, [sp, #48]	; 0x30
    7174:	9614      	str	r6, [sp, #80]	; 0x50
    7176:	9619      	str	r6, [sp, #100]	; 0x64
    7178:	e7c0      	b.n	70fc <_vfprintf_r+0x54c>
    717a:	9907      	ldr	r1, [sp, #28]
    717c:	4643      	mov	r3, r8
    717e:	4319      	orrs	r1, r3
    7180:	9107      	str	r1, [sp, #28]
    7182:	9f08      	ldr	r7, [sp, #32]
    7184:	783b      	ldrb	r3, [r7, #0]
    7186:	e596      	b.n	6cb6 <_vfprintf_r+0x106>
    7188:	4831      	ldr	r0, [pc, #196]	; (7250 <_vfprintf_r+0x6a0>)
    718a:	9907      	ldr	r1, [sp, #28]
    718c:	2220      	movs	r2, #32
    718e:	9316      	str	r3, [sp, #88]	; 0x58
    7190:	9017      	str	r0, [sp, #92]	; 0x5c
    7192:	400a      	ands	r2, r1
    7194:	d100      	bne.n	7198 <_vfprintf_r+0x5e8>
    7196:	e132      	b.n	73fe <_vfprintf_r+0x84e>
    7198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    719a:	2307      	movs	r3, #7
    719c:	3207      	adds	r2, #7
    719e:	439a      	bics	r2, r3
    71a0:	6810      	ldr	r0, [r2, #0]
    71a2:	6851      	ldr	r1, [r2, #4]
    71a4:	3301      	adds	r3, #1
    71a6:	189b      	adds	r3, r3, r2
    71a8:	9010      	str	r0, [sp, #64]	; 0x40
    71aa:	9111      	str	r1, [sp, #68]	; 0x44
    71ac:	930f      	str	r3, [sp, #60]	; 0x3c
    71ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    71b0:	9f11      	ldr	r7, [sp, #68]	; 0x44
    71b2:	433a      	orrs	r2, r7
    71b4:	1e53      	subs	r3, r2, #1
    71b6:	419a      	sbcs	r2, r3
    71b8:	2a00      	cmp	r2, #0
    71ba:	d100      	bne.n	71be <_vfprintf_r+0x60e>
    71bc:	e3bb      	b.n	7936 <_vfprintf_r+0xd86>
    71be:	9807      	ldr	r0, [sp, #28]
    71c0:	2101      	movs	r1, #1
    71c2:	4208      	tst	r0, r1
    71c4:	d100      	bne.n	71c8 <_vfprintf_r+0x618>
    71c6:	e3b6      	b.n	7936 <_vfprintf_r+0xd86>
    71c8:	4b22      	ldr	r3, [pc, #136]	; (7254 <_vfprintf_r+0x6a4>)
    71ca:	2230      	movs	r2, #48	; 0x30
    71cc:	446b      	add	r3, sp
    71ce:	701a      	strb	r2, [r3, #0]
    71d0:	aa16      	add	r2, sp, #88	; 0x58
    71d2:	7812      	ldrb	r2, [r2, #0]
    71d4:	705a      	strb	r2, [r3, #1]
    71d6:	2302      	movs	r3, #2
    71d8:	4318      	orrs	r0, r3
    71da:	9007      	str	r0, [sp, #28]
    71dc:	1c0a      	adds	r2, r1, #0
    71de:	2000      	movs	r0, #0
    71e0:	464f      	mov	r7, r9
    71e2:	7038      	strb	r0, [r7, #0]
    71e4:	e74c      	b.n	7080 <_vfprintf_r+0x4d0>
    71e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    71e8:	9316      	str	r3, [sp, #88]	; 0x58
    71ea:	4b1b      	ldr	r3, [pc, #108]	; (7258 <_vfprintf_r+0x6a8>)
    71ec:	1c10      	adds	r0, r2, #0
    71ee:	6812      	ldr	r2, [r2, #0]
    71f0:	446b      	add	r3, sp
    71f2:	3004      	adds	r0, #4
    71f4:	701a      	strb	r2, [r3, #0]
    71f6:	4649      	mov	r1, r9
    71f8:	2200      	movs	r2, #0
    71fa:	900f      	str	r0, [sp, #60]	; 0x3c
    71fc:	700a      	strb	r2, [r1, #0]
    71fe:	e56e      	b.n	6cde <_vfprintf_r+0x12e>
    7200:	9a07      	ldr	r2, [sp, #28]
    7202:	9316      	str	r3, [sp, #88]	; 0x58
    7204:	2310      	movs	r3, #16
    7206:	431a      	orrs	r2, r3
    7208:	9207      	str	r2, [sp, #28]
    720a:	9f07      	ldr	r7, [sp, #28]
    720c:	2320      	movs	r3, #32
    720e:	403b      	ands	r3, r7
    7210:	d100      	bne.n	7214 <_vfprintf_r+0x664>
    7212:	e3a3      	b.n	795c <_vfprintf_r+0xdac>
    7214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7216:	2307      	movs	r3, #7
    7218:	3207      	adds	r2, #7
    721a:	439a      	bics	r2, r3
    721c:	2008      	movs	r0, #8
    721e:	1880      	adds	r0, r0, r2
    7220:	900f      	str	r0, [sp, #60]	; 0x3c
    7222:	6810      	ldr	r0, [r2, #0]
    7224:	6851      	ldr	r1, [r2, #4]
    7226:	1c02      	adds	r2, r0, #0
    7228:	430a      	orrs	r2, r1
    722a:	1e53      	subs	r3, r2, #1
    722c:	419a      	sbcs	r2, r3
    722e:	9010      	str	r0, [sp, #64]	; 0x40
    7230:	9111      	str	r1, [sp, #68]	; 0x44
    7232:	2300      	movs	r3, #0
    7234:	e7d3      	b.n	71de <_vfprintf_r+0x62e>
    7236:	46c0      	nop			; (mov r8, r8)
	...
    7240:	000004e4 	.word	0x000004e4
    7244:	00000574 	.word	0x00000574
    7248:	0000047c 	.word	0x0000047c
    724c:	0000e8f8 	.word	0x0000e8f8
    7250:	0000e908 	.word	0x0000e908
    7254:	0000056c 	.word	0x0000056c
    7258:	00000524 	.word	0x00000524
    725c:	9807      	ldr	r0, [sp, #28]
    725e:	9316      	str	r3, [sp, #88]	; 0x58
    7260:	2310      	movs	r3, #16
    7262:	4318      	orrs	r0, r3
    7264:	9007      	str	r0, [sp, #28]
    7266:	9907      	ldr	r1, [sp, #28]
    7268:	2220      	movs	r2, #32
    726a:	400a      	ands	r2, r1
    726c:	d100      	bne.n	7270 <_vfprintf_r+0x6c0>
    726e:	e364      	b.n	793a <_vfprintf_r+0xd8a>
    7270:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7272:	2307      	movs	r3, #7
    7274:	3207      	adds	r2, #7
    7276:	439a      	bics	r2, r3
    7278:	6810      	ldr	r0, [r2, #0]
    727a:	6851      	ldr	r1, [r2, #4]
    727c:	3301      	adds	r3, #1
    727e:	189b      	adds	r3, r3, r2
    7280:	1c02      	adds	r2, r0, #0
    7282:	430a      	orrs	r2, r1
    7284:	930f      	str	r3, [sp, #60]	; 0x3c
    7286:	9010      	str	r0, [sp, #64]	; 0x40
    7288:	9111      	str	r1, [sp, #68]	; 0x44
    728a:	1e53      	subs	r3, r2, #1
    728c:	419a      	sbcs	r2, r3
    728e:	2301      	movs	r3, #1
    7290:	e7a5      	b.n	71de <_vfprintf_r+0x62e>
    7292:	9e08      	ldr	r6, [sp, #32]
    7294:	7833      	ldrb	r3, [r6, #0]
    7296:	3601      	adds	r6, #1
    7298:	9608      	str	r6, [sp, #32]
    729a:	2b2a      	cmp	r3, #42	; 0x2a
    729c:	d101      	bne.n	72a2 <_vfprintf_r+0x6f2>
    729e:	f001 f84f 	bl	8340 <_vfprintf_r+0x1790>
    72a2:	1c19      	adds	r1, r3, #0
    72a4:	3930      	subs	r1, #48	; 0x30
    72a6:	2600      	movs	r6, #0
    72a8:	2909      	cmp	r1, #9
    72aa:	d900      	bls.n	72ae <_vfprintf_r+0x6fe>
    72ac:	e506      	b.n	6cbc <_vfprintf_r+0x10c>
    72ae:	9b08      	ldr	r3, [sp, #32]
    72b0:	46ac      	mov	ip, r5
    72b2:	00b5      	lsls	r5, r6, #2
    72b4:	19ae      	adds	r6, r5, r6
    72b6:	781d      	ldrb	r5, [r3, #0]
    72b8:	0076      	lsls	r6, r6, #1
    72ba:	1876      	adds	r6, r6, r1
    72bc:	1c29      	adds	r1, r5, #0
    72be:	3930      	subs	r1, #48	; 0x30
    72c0:	3301      	adds	r3, #1
    72c2:	2909      	cmp	r1, #9
    72c4:	d9f5      	bls.n	72b2 <_vfprintf_r+0x702>
    72c6:	9308      	str	r3, [sp, #32]
    72c8:	1c2b      	adds	r3, r5, #0
    72ca:	4665      	mov	r5, ip
    72cc:	2e00      	cmp	r6, #0
    72ce:	db00      	blt.n	72d2 <_vfprintf_r+0x722>
    72d0:	e4f4      	b.n	6cbc <_vfprintf_r+0x10c>
    72d2:	2601      	movs	r6, #1
    72d4:	4276      	negs	r6, r6
    72d6:	e4f1      	b.n	6cbc <_vfprintf_r+0x10c>
    72d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    72da:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    72dc:	6809      	ldr	r1, [r1, #0]
    72de:	3704      	adds	r7, #4
    72e0:	910b      	str	r1, [sp, #44]	; 0x2c
    72e2:	2900      	cmp	r1, #0
    72e4:	da00      	bge.n	72e8 <_vfprintf_r+0x738>
    72e6:	e63f      	b.n	6f68 <_vfprintf_r+0x3b8>
    72e8:	9908      	ldr	r1, [sp, #32]
    72ea:	780b      	ldrb	r3, [r1, #0]
    72ec:	970f      	str	r7, [sp, #60]	; 0x3c
    72ee:	e4e2      	b.n	6cb6 <_vfprintf_r+0x106>
    72f0:	232b      	movs	r3, #43	; 0x2b
    72f2:	464f      	mov	r7, r9
    72f4:	703b      	strb	r3, [r7, #0]
    72f6:	9908      	ldr	r1, [sp, #32]
    72f8:	780b      	ldrb	r3, [r1, #0]
    72fa:	e4dc      	b.n	6cb6 <_vfprintf_r+0x106>
    72fc:	9b07      	ldr	r3, [sp, #28]
    72fe:	4657      	mov	r7, sl
    7300:	433b      	orrs	r3, r7
    7302:	9307      	str	r3, [sp, #28]
    7304:	9908      	ldr	r1, [sp, #32]
    7306:	780b      	ldrb	r3, [r1, #0]
    7308:	e4d5      	b.n	6cb6 <_vfprintf_r+0x106>
    730a:	2700      	movs	r7, #0
    730c:	1c19      	adds	r1, r3, #0
    730e:	950a      	str	r5, [sp, #40]	; 0x28
    7310:	970b      	str	r7, [sp, #44]	; 0x2c
    7312:	9d08      	ldr	r5, [sp, #32]
    7314:	3930      	subs	r1, #48	; 0x30
    7316:	1c3b      	adds	r3, r7, #0
    7318:	46b4      	mov	ip, r6
    731a:	009e      	lsls	r6, r3, #2
    731c:	18f3      	adds	r3, r6, r3
    731e:	782e      	ldrb	r6, [r5, #0]
    7320:	005b      	lsls	r3, r3, #1
    7322:	18cb      	adds	r3, r1, r3
    7324:	1c31      	adds	r1, r6, #0
    7326:	3930      	subs	r1, #48	; 0x30
    7328:	3501      	adds	r5, #1
    732a:	2909      	cmp	r1, #9
    732c:	d9f5      	bls.n	731a <_vfprintf_r+0x76a>
    732e:	9508      	str	r5, [sp, #32]
    7330:	930b      	str	r3, [sp, #44]	; 0x2c
    7332:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7334:	1c33      	adds	r3, r6, #0
    7336:	4666      	mov	r6, ip
    7338:	e4c0      	b.n	6cbc <_vfprintf_r+0x10c>
    733a:	4649      	mov	r1, r9
    733c:	780b      	ldrb	r3, [r1, #0]
    733e:	2b00      	cmp	r3, #0
    7340:	d001      	beq.n	7346 <_vfprintf_r+0x796>
    7342:	f000 fc6a 	bl	7c1a <_vfprintf_r+0x106a>
    7346:	7008      	strb	r0, [r1, #0]
    7348:	9f08      	ldr	r7, [sp, #32]
    734a:	783b      	ldrb	r3, [r7, #0]
    734c:	e4b3      	b.n	6cb6 <_vfprintf_r+0x106>
    734e:	9907      	ldr	r1, [sp, #28]
    7350:	2301      	movs	r3, #1
    7352:	4319      	orrs	r1, r3
    7354:	9107      	str	r1, [sp, #28]
    7356:	9f08      	ldr	r7, [sp, #32]
    7358:	783b      	ldrb	r3, [r7, #0]
    735a:	e4ac      	b.n	6cb6 <_vfprintf_r+0x106>
    735c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    735e:	1c1a      	adds	r2, r3, #0
    7360:	3204      	adds	r2, #4
    7362:	681b      	ldr	r3, [r3, #0]
    7364:	920f      	str	r2, [sp, #60]	; 0x3c
    7366:	4ade      	ldr	r2, [pc, #888]	; (76e0 <_vfprintf_r+0xb30>)
    7368:	2130      	movs	r1, #48	; 0x30
    736a:	446a      	add	r2, sp
    736c:	9310      	str	r3, [sp, #64]	; 0x40
    736e:	2078      	movs	r0, #120	; 0x78
    7370:	7011      	strb	r1, [r2, #0]
    7372:	7050      	strb	r0, [r2, #1]
    7374:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7376:	2300      	movs	r3, #0
    7378:	9f07      	ldr	r7, [sp, #28]
    737a:	9311      	str	r3, [sp, #68]	; 0x44
    737c:	1e51      	subs	r1, r2, #1
    737e:	418a      	sbcs	r2, r1
    7380:	3302      	adds	r3, #2
    7382:	49d8      	ldr	r1, [pc, #864]	; (76e4 <_vfprintf_r+0xb34>)
    7384:	431f      	orrs	r7, r3
    7386:	9707      	str	r7, [sp, #28]
    7388:	9117      	str	r1, [sp, #92]	; 0x5c
    738a:	9016      	str	r0, [sp, #88]	; 0x58
    738c:	e727      	b.n	71de <_vfprintf_r+0x62e>
    738e:	9b07      	ldr	r3, [sp, #28]
    7390:	4303      	orrs	r3, r0
    7392:	9307      	str	r3, [sp, #28]
    7394:	9f08      	ldr	r7, [sp, #32]
    7396:	783b      	ldrb	r3, [r7, #0]
    7398:	e48d      	b.n	6cb6 <_vfprintf_r+0x106>
    739a:	9316      	str	r3, [sp, #88]	; 0x58
    739c:	464a      	mov	r2, r9
    739e:	2300      	movs	r3, #0
    73a0:	7013      	strb	r3, [r2, #0]
    73a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    73a4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    73a6:	6800      	ldr	r0, [r0, #0]
    73a8:	3704      	adds	r7, #4
    73aa:	9013      	str	r0, [sp, #76]	; 0x4c
    73ac:	2800      	cmp	r0, #0
    73ae:	d101      	bne.n	73b4 <_vfprintf_r+0x804>
    73b0:	f000 fec8 	bl	8144 <_vfprintf_r+0x1594>
    73b4:	2e00      	cmp	r6, #0
    73b6:	da01      	bge.n	73bc <_vfprintf_r+0x80c>
    73b8:	f000 fe6e 	bl	8098 <_vfprintf_r+0x14e8>
    73bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
    73be:	2100      	movs	r1, #0
    73c0:	1c32      	adds	r2, r6, #0
    73c2:	f002 fbc3 	bl	9b4c <memchr>
    73c6:	2800      	cmp	r0, #0
    73c8:	d101      	bne.n	73ce <_vfprintf_r+0x81e>
    73ca:	f000 ff3b 	bl	8244 <_vfprintf_r+0x1694>
    73ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
    73d0:	1a40      	subs	r0, r0, r1
    73d2:	900c      	str	r0, [sp, #48]	; 0x30
    73d4:	42b0      	cmp	r0, r6
    73d6:	dc01      	bgt.n	73dc <_vfprintf_r+0x82c>
    73d8:	f000 fda4 	bl	7f24 <_vfprintf_r+0x1374>
    73dc:	960a      	str	r6, [sp, #40]	; 0x28
    73de:	464b      	mov	r3, r9
    73e0:	960c      	str	r6, [sp, #48]	; 0x30
    73e2:	2600      	movs	r6, #0
    73e4:	781a      	ldrb	r2, [r3, #0]
    73e6:	970f      	str	r7, [sp, #60]	; 0x3c
    73e8:	9614      	str	r6, [sp, #80]	; 0x50
    73ea:	9619      	str	r6, [sp, #100]	; 0x64
    73ec:	e686      	b.n	70fc <_vfprintf_r+0x54c>
    73ee:	4fbd      	ldr	r7, [pc, #756]	; (76e4 <_vfprintf_r+0xb34>)
    73f0:	9907      	ldr	r1, [sp, #28]
    73f2:	2220      	movs	r2, #32
    73f4:	9316      	str	r3, [sp, #88]	; 0x58
    73f6:	9717      	str	r7, [sp, #92]	; 0x5c
    73f8:	400a      	ands	r2, r1
    73fa:	d000      	beq.n	73fe <_vfprintf_r+0x84e>
    73fc:	e6cc      	b.n	7198 <_vfprintf_r+0x5e8>
    73fe:	9907      	ldr	r1, [sp, #28]
    7400:	2310      	movs	r3, #16
    7402:	4019      	ands	r1, r3
    7404:	d101      	bne.n	740a <_vfprintf_r+0x85a>
    7406:	f000 fc0c 	bl	7c22 <_vfprintf_r+0x1072>
    740a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    740c:	6809      	ldr	r1, [r1, #0]
    740e:	9211      	str	r2, [sp, #68]	; 0x44
    7410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7412:	3204      	adds	r2, #4
    7414:	9110      	str	r1, [sp, #64]	; 0x40
    7416:	920f      	str	r2, [sp, #60]	; 0x3c
    7418:	e6c9      	b.n	71ae <_vfprintf_r+0x5fe>
    741a:	9908      	ldr	r1, [sp, #32]
    741c:	780b      	ldrb	r3, [r1, #0]
    741e:	2b6c      	cmp	r3, #108	; 0x6c
    7420:	d101      	bne.n	7426 <_vfprintf_r+0x876>
    7422:	f000 fd77 	bl	7f14 <_vfprintf_r+0x1364>
    7426:	9f07      	ldr	r7, [sp, #28]
    7428:	2110      	movs	r1, #16
    742a:	430f      	orrs	r7, r1
    742c:	9707      	str	r7, [sp, #28]
    742e:	e442      	b.n	6cb6 <_vfprintf_r+0x106>
    7430:	9907      	ldr	r1, [sp, #28]
    7432:	0689      	lsls	r1, r1, #26
    7434:	d401      	bmi.n	743a <_vfprintf_r+0x88a>
    7436:	f000 fc0f 	bl	7c58 <_vfprintf_r+0x10a8>
    743a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    743c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    743e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7440:	6813      	ldr	r3, [r2, #0]
    7442:	3704      	adds	r7, #4
    7444:	17f2      	asrs	r2, r6, #31
    7446:	601e      	str	r6, [r3, #0]
    7448:	605a      	str	r2, [r3, #4]
    744a:	970f      	str	r7, [sp, #60]	; 0x3c
    744c:	f7ff fbfa 	bl	6c44 <_vfprintf_r+0x94>
    7450:	9907      	ldr	r1, [sp, #28]
    7452:	2340      	movs	r3, #64	; 0x40
    7454:	4319      	orrs	r1, r3
    7456:	9107      	str	r1, [sp, #28]
    7458:	9f08      	ldr	r7, [sp, #32]
    745a:	783b      	ldrb	r3, [r7, #0]
    745c:	e42b      	b.n	6cb6 <_vfprintf_r+0x106>
    745e:	9316      	str	r3, [sp, #88]	; 0x58
    7460:	e5f3      	b.n	704a <_vfprintf_r+0x49a>
    7462:	9316      	str	r3, [sp, #88]	; 0x58
    7464:	e6d1      	b.n	720a <_vfprintf_r+0x65a>
    7466:	9316      	str	r3, [sp, #88]	; 0x58
    7468:	e6fd      	b.n	7266 <_vfprintf_r+0x6b6>
    746a:	68a3      	ldr	r3, [r4, #8]
    746c:	46da      	mov	sl, fp
    746e:	2b00      	cmp	r3, #0
    7470:	d100      	bne.n	7474 <_vfprintf_r+0x8c4>
    7472:	e596      	b.n	6fa2 <_vfprintf_r+0x3f2>
    7474:	9809      	ldr	r0, [sp, #36]	; 0x24
    7476:	4659      	mov	r1, fp
    7478:	1c22      	adds	r2, r4, #0
    747a:	f004 f9d9 	bl	b830 <__sprint_r>
    747e:	e590      	b.n	6fa2 <_vfprintf_r+0x3f2>
    7480:	9e16      	ldr	r6, [sp, #88]	; 0x58
    7482:	2e65      	cmp	r6, #101	; 0x65
    7484:	dc00      	bgt.n	7488 <_vfprintf_r+0x8d8>
    7486:	e0c7      	b.n	7618 <_vfprintf_r+0xa68>
    7488:	981a      	ldr	r0, [sp, #104]	; 0x68
    748a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    748c:	4b93      	ldr	r3, [pc, #588]	; (76dc <_vfprintf_r+0xb2c>)
    748e:	4a92      	ldr	r2, [pc, #584]	; (76d8 <_vfprintf_r+0xb28>)
    7490:	f006 fbc0 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    7494:	2800      	cmp	r0, #0
    7496:	d100      	bne.n	749a <_vfprintf_r+0x8ea>
    7498:	e158      	b.n	774c <_vfprintf_r+0xb9c>
    749a:	4b93      	ldr	r3, [pc, #588]	; (76e8 <_vfprintf_r+0xb38>)
    749c:	603b      	str	r3, [r7, #0]
    749e:	2301      	movs	r3, #1
    74a0:	607b      	str	r3, [r7, #4]
    74a2:	68a3      	ldr	r3, [r4, #8]
    74a4:	3301      	adds	r3, #1
    74a6:	60a3      	str	r3, [r4, #8]
    74a8:	6863      	ldr	r3, [r4, #4]
    74aa:	3301      	adds	r3, #1
    74ac:	6063      	str	r3, [r4, #4]
    74ae:	3708      	adds	r7, #8
    74b0:	2b07      	cmp	r3, #7
    74b2:	dd01      	ble.n	74b8 <_vfprintf_r+0x908>
    74b4:	f000 fcad 	bl	7e12 <_vfprintf_r+0x1262>
    74b8:	20ad      	movs	r0, #173	; 0xad
    74ba:	00c0      	lsls	r0, r0, #3
    74bc:	4468      	add	r0, sp
    74be:	6803      	ldr	r3, [r0, #0]
    74c0:	990e      	ldr	r1, [sp, #56]	; 0x38
    74c2:	428b      	cmp	r3, r1
    74c4:	db03      	blt.n	74ce <_vfprintf_r+0x91e>
    74c6:	9a07      	ldr	r2, [sp, #28]
    74c8:	07d2      	lsls	r2, r2, #31
    74ca:	d400      	bmi.n	74ce <_vfprintf_r+0x91e>
    74cc:	e4de      	b.n	6e8c <_vfprintf_r+0x2dc>
    74ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
    74d0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    74d2:	603b      	str	r3, [r7, #0]
    74d4:	68a3      	ldr	r3, [r4, #8]
    74d6:	195b      	adds	r3, r3, r5
    74d8:	607d      	str	r5, [r7, #4]
    74da:	60a3      	str	r3, [r4, #8]
    74dc:	6863      	ldr	r3, [r4, #4]
    74de:	3301      	adds	r3, #1
    74e0:	6063      	str	r3, [r4, #4]
    74e2:	2b07      	cmp	r3, #7
    74e4:	dd01      	ble.n	74ea <_vfprintf_r+0x93a>
    74e6:	f000 fda8 	bl	803a <_vfprintf_r+0x148a>
    74ea:	1c3b      	adds	r3, r7, #0
    74ec:	3308      	adds	r3, #8
    74ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    74f0:	3d01      	subs	r5, #1
    74f2:	2d00      	cmp	r5, #0
    74f4:	dc01      	bgt.n	74fa <_vfprintf_r+0x94a>
    74f6:	f000 fc7e 	bl	7df6 <_vfprintf_r+0x1246>
    74fa:	2d10      	cmp	r5, #16
    74fc:	dc01      	bgt.n	7502 <_vfprintf_r+0x952>
    74fe:	f000 ff05 	bl	830c <_vfprintf_r+0x175c>
    7502:	4e7a      	ldr	r6, [pc, #488]	; (76ec <_vfprintf_r+0xb3c>)
    7504:	2710      	movs	r7, #16
    7506:	46b0      	mov	r8, r6
    7508:	1c3e      	adds	r6, r7, #0
    750a:	46b9      	mov	r9, r7
    750c:	4446      	add	r6, r8
    750e:	465f      	mov	r7, fp
    7510:	e006      	b.n	7520 <_vfprintf_r+0x970>
    7512:	3308      	adds	r3, #8
    7514:	1c1a      	adds	r2, r3, #0
    7516:	3208      	adds	r2, #8
    7518:	3d10      	subs	r5, #16
    751a:	2d10      	cmp	r5, #16
    751c:	dc00      	bgt.n	7520 <_vfprintf_r+0x970>
    751e:	e3e0      	b.n	7ce2 <_vfprintf_r+0x1132>
    7520:	68a2      	ldr	r2, [r4, #8]
    7522:	4649      	mov	r1, r9
    7524:	3210      	adds	r2, #16
    7526:	601e      	str	r6, [r3, #0]
    7528:	6059      	str	r1, [r3, #4]
    752a:	60a2      	str	r2, [r4, #8]
    752c:	6862      	ldr	r2, [r4, #4]
    752e:	3201      	adds	r2, #1
    7530:	6062      	str	r2, [r4, #4]
    7532:	2a07      	cmp	r2, #7
    7534:	dded      	ble.n	7512 <_vfprintf_r+0x962>
    7536:	9809      	ldr	r0, [sp, #36]	; 0x24
    7538:	1c39      	adds	r1, r7, #0
    753a:	1c22      	adds	r2, r4, #0
    753c:	f004 f978 	bl	b830 <__sprint_r>
    7540:	2800      	cmp	r0, #0
    7542:	d000      	beq.n	7546 <_vfprintf_r+0x996>
    7544:	e0dc      	b.n	7700 <_vfprintf_r+0xb50>
    7546:	4a6a      	ldr	r2, [pc, #424]	; (76f0 <_vfprintf_r+0xb40>)
    7548:	4b6a      	ldr	r3, [pc, #424]	; (76f4 <_vfprintf_r+0xb44>)
    754a:	446a      	add	r2, sp
    754c:	446b      	add	r3, sp
    754e:	e7e3      	b.n	7518 <_vfprintf_r+0x968>
    7550:	2b00      	cmp	r3, #0
    7552:	d000      	beq.n	7556 <_vfprintf_r+0x9a6>
    7554:	e0bd      	b.n	76d2 <_vfprintf_r+0xb22>
    7556:	9807      	ldr	r0, [sp, #28]
    7558:	07c0      	lsls	r0, r0, #31
    755a:	d400      	bmi.n	755e <_vfprintf_r+0x9ae>
    755c:	e14c      	b.n	77f8 <_vfprintf_r+0xc48>
    755e:	4b66      	ldr	r3, [pc, #408]	; (76f8 <_vfprintf_r+0xb48>)
    7560:	2127      	movs	r1, #39	; 0x27
    7562:	446b      	add	r3, sp
    7564:	2230      	movs	r2, #48	; 0x30
    7566:	545a      	strb	r2, [r3, r1]
    7568:	4b64      	ldr	r3, [pc, #400]	; (76fc <_vfprintf_r+0xb4c>)
    756a:	446b      	add	r3, sp
    756c:	1ae1      	subs	r1, r4, r3
    756e:	910c      	str	r1, [sp, #48]	; 0x30
    7570:	9313      	str	r3, [sp, #76]	; 0x4c
    7572:	e5b9      	b.n	70e8 <_vfprintf_r+0x538>
    7574:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    7576:	980a      	ldr	r0, [sp, #40]	; 0x28
    7578:	1a3e      	subs	r6, r7, r0
    757a:	2e00      	cmp	r6, #0
    757c:	dc00      	bgt.n	7580 <_vfprintf_r+0x9d0>
    757e:	e429      	b.n	6dd4 <_vfprintf_r+0x224>
    7580:	2e10      	cmp	r6, #16
    7582:	dc01      	bgt.n	7588 <_vfprintf_r+0x9d8>
    7584:	f000 fe58 	bl	8238 <_vfprintf_r+0x1688>
    7588:	4a58      	ldr	r2, [pc, #352]	; (76ec <_vfprintf_r+0xb3c>)
    758a:	1c2b      	adds	r3, r5, #0
    758c:	2510      	movs	r5, #16
    758e:	1c2f      	adds	r7, r5, #0
    7590:	4690      	mov	r8, r2
    7592:	46a9      	mov	r9, r5
    7594:	4447      	add	r7, r8
    7596:	465d      	mov	r5, fp
    7598:	e005      	b.n	75a6 <_vfprintf_r+0x9f6>
    759a:	3308      	adds	r3, #8
    759c:	1c1a      	adds	r2, r3, #0
    759e:	3e10      	subs	r6, #16
    75a0:	3208      	adds	r2, #8
    75a2:	2e10      	cmp	r6, #16
    75a4:	dd19      	ble.n	75da <_vfprintf_r+0xa2a>
    75a6:	68a2      	ldr	r2, [r4, #8]
    75a8:	4648      	mov	r0, r9
    75aa:	3210      	adds	r2, #16
    75ac:	601f      	str	r7, [r3, #0]
    75ae:	6058      	str	r0, [r3, #4]
    75b0:	60a2      	str	r2, [r4, #8]
    75b2:	6862      	ldr	r2, [r4, #4]
    75b4:	3201      	adds	r2, #1
    75b6:	6062      	str	r2, [r4, #4]
    75b8:	2a07      	cmp	r2, #7
    75ba:	ddee      	ble.n	759a <_vfprintf_r+0x9ea>
    75bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    75be:	1c29      	adds	r1, r5, #0
    75c0:	1c22      	adds	r2, r4, #0
    75c2:	f004 f935 	bl	b830 <__sprint_r>
    75c6:	2800      	cmp	r0, #0
    75c8:	d000      	beq.n	75cc <_vfprintf_r+0xa1c>
    75ca:	e1d7      	b.n	797c <_vfprintf_r+0xdcc>
    75cc:	4a48      	ldr	r2, [pc, #288]	; (76f0 <_vfprintf_r+0xb40>)
    75ce:	4b49      	ldr	r3, [pc, #292]	; (76f4 <_vfprintf_r+0xb44>)
    75d0:	3e10      	subs	r6, #16
    75d2:	446a      	add	r2, sp
    75d4:	446b      	add	r3, sp
    75d6:	2e10      	cmp	r6, #16
    75d8:	dce5      	bgt.n	75a6 <_vfprintf_r+0x9f6>
    75da:	46ab      	mov	fp, r5
    75dc:	1c15      	adds	r5, r2, #0
    75de:	2110      	movs	r1, #16
    75e0:	1c0a      	adds	r2, r1, #0
    75e2:	4442      	add	r2, r8
    75e4:	601a      	str	r2, [r3, #0]
    75e6:	605e      	str	r6, [r3, #4]
    75e8:	68a3      	ldr	r3, [r4, #8]
    75ea:	18f3      	adds	r3, r6, r3
    75ec:	60a3      	str	r3, [r4, #8]
    75ee:	6863      	ldr	r3, [r4, #4]
    75f0:	3301      	adds	r3, #1
    75f2:	6063      	str	r3, [r4, #4]
    75f4:	2b07      	cmp	r3, #7
    75f6:	dc01      	bgt.n	75fc <_vfprintf_r+0xa4c>
    75f8:	f7ff fbec 	bl	6dd4 <_vfprintf_r+0x224>
    75fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    75fe:	4659      	mov	r1, fp
    7600:	1c22      	adds	r2, r4, #0
    7602:	f004 f915 	bl	b830 <__sprint_r>
    7606:	2800      	cmp	r0, #0
    7608:	d000      	beq.n	760c <_vfprintf_r+0xa5c>
    760a:	e4c9      	b.n	6fa0 <_vfprintf_r+0x3f0>
    760c:	4d39      	ldr	r5, [pc, #228]	; (76f4 <_vfprintf_r+0xb44>)
    760e:	446d      	add	r5, sp
    7610:	f7ff fbe0 	bl	6dd4 <_vfprintf_r+0x224>
    7614:	1c2f      	adds	r7, r5, #0
    7616:	e426      	b.n	6e66 <_vfprintf_r+0x2b6>
    7618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    761a:	2a01      	cmp	r2, #1
    761c:	dc00      	bgt.n	7620 <_vfprintf_r+0xa70>
    761e:	e1b0      	b.n	7982 <_vfprintf_r+0xdd2>
    7620:	2301      	movs	r3, #1
    7622:	607b      	str	r3, [r7, #4]
    7624:	68a3      	ldr	r3, [r4, #8]
    7626:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    7628:	3301      	adds	r3, #1
    762a:	603e      	str	r6, [r7, #0]
    762c:	60a3      	str	r3, [r4, #8]
    762e:	6863      	ldr	r3, [r4, #4]
    7630:	3301      	adds	r3, #1
    7632:	6063      	str	r3, [r4, #4]
    7634:	2b07      	cmp	r3, #7
    7636:	dd00      	ble.n	763a <_vfprintf_r+0xa8a>
    7638:	e1c9      	b.n	79ce <_vfprintf_r+0xe1e>
    763a:	3708      	adds	r7, #8
    763c:	1c3d      	adds	r5, r7, #0
    763e:	3508      	adds	r5, #8
    7640:	991c      	ldr	r1, [sp, #112]	; 0x70
    7642:	68a3      	ldr	r3, [r4, #8]
    7644:	9818      	ldr	r0, [sp, #96]	; 0x60
    7646:	185b      	adds	r3, r3, r1
    7648:	6038      	str	r0, [r7, #0]
    764a:	6079      	str	r1, [r7, #4]
    764c:	60a3      	str	r3, [r4, #8]
    764e:	6863      	ldr	r3, [r4, #4]
    7650:	3301      	adds	r3, #1
    7652:	6063      	str	r3, [r4, #4]
    7654:	2b07      	cmp	r3, #7
    7656:	dd00      	ble.n	765a <_vfprintf_r+0xaaa>
    7658:	e1aa      	b.n	79b0 <_vfprintf_r+0xe00>
    765a:	2208      	movs	r2, #8
    765c:	1952      	adds	r2, r2, r5
    765e:	4691      	mov	r9, r2
    7660:	981a      	ldr	r0, [sp, #104]	; 0x68
    7662:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7664:	4b1d      	ldr	r3, [pc, #116]	; (76dc <_vfprintf_r+0xb2c>)
    7666:	4a1c      	ldr	r2, [pc, #112]	; (76d8 <_vfprintf_r+0xb28>)
    7668:	f006 fad4 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    766c:	2800      	cmp	r0, #0
    766e:	d000      	beq.n	7672 <_vfprintf_r+0xac2>
    7670:	e124      	b.n	78bc <_vfprintf_r+0xd0c>
    7672:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7674:	3301      	adds	r3, #1
    7676:	602b      	str	r3, [r5, #0]
    7678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    767a:	68a2      	ldr	r2, [r4, #8]
    767c:	3b01      	subs	r3, #1
    767e:	606b      	str	r3, [r5, #4]
    7680:	189b      	adds	r3, r3, r2
    7682:	60a3      	str	r3, [r4, #8]
    7684:	6863      	ldr	r3, [r4, #4]
    7686:	3301      	adds	r3, #1
    7688:	6063      	str	r3, [r4, #4]
    768a:	2b07      	cmp	r3, #7
    768c:	dd01      	ble.n	7692 <_vfprintf_r+0xae2>
    768e:	f000 fc31 	bl	7ef4 <_vfprintf_r+0x1344>
    7692:	2508      	movs	r5, #8
    7694:	1c2f      	adds	r7, r5, #0
    7696:	444f      	add	r7, r9
    7698:	23ab      	movs	r3, #171	; 0xab
    769a:	00db      	lsls	r3, r3, #3
    769c:	446b      	add	r3, sp
    769e:	464e      	mov	r6, r9
    76a0:	981d      	ldr	r0, [sp, #116]	; 0x74
    76a2:	6033      	str	r3, [r6, #0]
    76a4:	68a3      	ldr	r3, [r4, #8]
    76a6:	6070      	str	r0, [r6, #4]
    76a8:	181b      	adds	r3, r3, r0
    76aa:	60a3      	str	r3, [r4, #8]
    76ac:	6863      	ldr	r3, [r4, #4]
    76ae:	3301      	adds	r3, #1
    76b0:	6063      	str	r3, [r4, #4]
    76b2:	2b07      	cmp	r3, #7
    76b4:	dc01      	bgt.n	76ba <_vfprintf_r+0xb0a>
    76b6:	f7ff fbe9 	bl	6e8c <_vfprintf_r+0x2dc>
    76ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    76bc:	4659      	mov	r1, fp
    76be:	1c22      	adds	r2, r4, #0
    76c0:	f004 f8b6 	bl	b830 <__sprint_r>
    76c4:	2800      	cmp	r0, #0
    76c6:	d000      	beq.n	76ca <_vfprintf_r+0xb1a>
    76c8:	e46a      	b.n	6fa0 <_vfprintf_r+0x3f0>
    76ca:	4f0a      	ldr	r7, [pc, #40]	; (76f4 <_vfprintf_r+0xb44>)
    76cc:	446f      	add	r7, sp
    76ce:	f7ff fbdd 	bl	6e8c <_vfprintf_r+0x2dc>
    76d2:	920c      	str	r2, [sp, #48]	; 0x30
    76d4:	9413      	str	r4, [sp, #76]	; 0x4c
    76d6:	e507      	b.n	70e8 <_vfprintf_r+0x538>
	...
    76e0:	0000056c 	.word	0x0000056c
    76e4:	0000e91c 	.word	0x0000e91c
    76e8:	0000e938 	.word	0x0000e938
    76ec:	0000e024 	.word	0x0000e024
    76f0:	000004ec 	.word	0x000004ec
    76f4:	000004e4 	.word	0x000004e4
    76f8:	00000524 	.word	0x00000524
    76fc:	0000054b 	.word	0x0000054b
    7700:	46ba      	mov	sl, r7
    7702:	e44e      	b.n	6fa2 <_vfprintf_r+0x3f2>
    7704:	9809      	ldr	r0, [sp, #36]	; 0x24
    7706:	4659      	mov	r1, fp
    7708:	1c22      	adds	r2, r4, #0
    770a:	f004 f891 	bl	b830 <__sprint_r>
    770e:	2800      	cmp	r0, #0
    7710:	d000      	beq.n	7714 <_vfprintf_r+0xb64>
    7712:	e445      	b.n	6fa0 <_vfprintf_r+0x3f0>
    7714:	4fce      	ldr	r7, [pc, #824]	; (7a50 <_vfprintf_r+0xea0>)
    7716:	446f      	add	r7, sp
    7718:	f7ff fba5 	bl	6e66 <_vfprintf_r+0x2b6>
    771c:	9809      	ldr	r0, [sp, #36]	; 0x24
    771e:	4659      	mov	r1, fp
    7720:	1c22      	adds	r2, r4, #0
    7722:	f004 f885 	bl	b830 <__sprint_r>
    7726:	2800      	cmp	r0, #0
    7728:	d000      	beq.n	772c <_vfprintf_r+0xb7c>
    772a:	e439      	b.n	6fa0 <_vfprintf_r+0x3f0>
    772c:	4dc8      	ldr	r5, [pc, #800]	; (7a50 <_vfprintf_r+0xea0>)
    772e:	446d      	add	r5, sp
    7730:	f7ff fb4c 	bl	6dcc <_vfprintf_r+0x21c>
    7734:	9809      	ldr	r0, [sp, #36]	; 0x24
    7736:	4659      	mov	r1, fp
    7738:	1c22      	adds	r2, r4, #0
    773a:	f004 f879 	bl	b830 <__sprint_r>
    773e:	2800      	cmp	r0, #0
    7740:	d000      	beq.n	7744 <_vfprintf_r+0xb94>
    7742:	e42d      	b.n	6fa0 <_vfprintf_r+0x3f0>
    7744:	4dc2      	ldr	r5, [pc, #776]	; (7a50 <_vfprintf_r+0xea0>)
    7746:	446d      	add	r5, sp
    7748:	f7ff fb2d 	bl	6da6 <_vfprintf_r+0x1f6>
    774c:	20ad      	movs	r0, #173	; 0xad
    774e:	00c0      	lsls	r0, r0, #3
    7750:	4468      	add	r0, sp
    7752:	6805      	ldr	r5, [r0, #0]
    7754:	2d00      	cmp	r5, #0
    7756:	dc00      	bgt.n	775a <_vfprintf_r+0xbaa>
    7758:	e37a      	b.n	7e50 <_vfprintf_r+0x12a0>
    775a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    775c:	46b2      	mov	sl, r6
    775e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7760:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7762:	44b2      	add	sl, r6
    7764:	4650      	mov	r0, sl
    7766:	9a19      	ldr	r2, [sp, #100]	; 0x64
    7768:	1a45      	subs	r5, r0, r1
    776a:	4295      	cmp	r5, r2
    776c:	dd00      	ble.n	7770 <_vfprintf_r+0xbc0>
    776e:	1c15      	adds	r5, r2, #0
    7770:	2d00      	cmp	r5, #0
    7772:	dd0d      	ble.n	7790 <_vfprintf_r+0xbe0>
    7774:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7776:	603b      	str	r3, [r7, #0]
    7778:	68a3      	ldr	r3, [r4, #8]
    777a:	18eb      	adds	r3, r5, r3
    777c:	607d      	str	r5, [r7, #4]
    777e:	60a3      	str	r3, [r4, #8]
    7780:	6863      	ldr	r3, [r4, #4]
    7782:	3301      	adds	r3, #1
    7784:	6063      	str	r3, [r4, #4]
    7786:	3708      	adds	r7, #8
    7788:	2b07      	cmp	r3, #7
    778a:	dd01      	ble.n	7790 <_vfprintf_r+0xbe0>
    778c:	f000 fc9a 	bl	80c4 <_vfprintf_r+0x1514>
    7790:	43eb      	mvns	r3, r5
    7792:	17db      	asrs	r3, r3, #31
    7794:	9e19      	ldr	r6, [sp, #100]	; 0x64
    7796:	401d      	ands	r5, r3
    7798:	1b75      	subs	r5, r6, r5
    779a:	2d00      	cmp	r5, #0
    779c:	dc01      	bgt.n	77a2 <_vfprintf_r+0xbf2>
    779e:	f000 fc59 	bl	8054 <_vfprintf_r+0x14a4>
    77a2:	2d10      	cmp	r5, #16
    77a4:	dc01      	bgt.n	77aa <_vfprintf_r+0xbfa>
    77a6:	f000 fdb6 	bl	8316 <_vfprintf_r+0x1766>
    77aa:	48aa      	ldr	r0, [pc, #680]	; (7a54 <_vfprintf_r+0xea4>)
    77ac:	2110      	movs	r1, #16
    77ae:	4680      	mov	r8, r0
    77b0:	1c0e      	adds	r6, r1, #0
    77b2:	1c3a      	adds	r2, r7, #0
    77b4:	4446      	add	r6, r8
    77b6:	4689      	mov	r9, r1
    77b8:	465f      	mov	r7, fp
    77ba:	e006      	b.n	77ca <_vfprintf_r+0xc1a>
    77bc:	3208      	adds	r2, #8
    77be:	1c13      	adds	r3, r2, #0
    77c0:	3308      	adds	r3, #8
    77c2:	3d10      	subs	r5, #16
    77c4:	2d10      	cmp	r5, #16
    77c6:	dc00      	bgt.n	77ca <_vfprintf_r+0xc1a>
    77c8:	e295      	b.n	7cf6 <_vfprintf_r+0x1146>
    77ca:	464b      	mov	r3, r9
    77cc:	6053      	str	r3, [r2, #4]
    77ce:	68a3      	ldr	r3, [r4, #8]
    77d0:	3310      	adds	r3, #16
    77d2:	6016      	str	r6, [r2, #0]
    77d4:	60a3      	str	r3, [r4, #8]
    77d6:	6863      	ldr	r3, [r4, #4]
    77d8:	3301      	adds	r3, #1
    77da:	6063      	str	r3, [r4, #4]
    77dc:	2b07      	cmp	r3, #7
    77de:	dded      	ble.n	77bc <_vfprintf_r+0xc0c>
    77e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    77e2:	1c39      	adds	r1, r7, #0
    77e4:	1c22      	adds	r2, r4, #0
    77e6:	f004 f823 	bl	b830 <__sprint_r>
    77ea:	2800      	cmp	r0, #0
    77ec:	d188      	bne.n	7700 <_vfprintf_r+0xb50>
    77ee:	4b9a      	ldr	r3, [pc, #616]	; (7a58 <_vfprintf_r+0xea8>)
    77f0:	4a97      	ldr	r2, [pc, #604]	; (7a50 <_vfprintf_r+0xea0>)
    77f2:	446b      	add	r3, sp
    77f4:	446a      	add	r2, sp
    77f6:	e7e4      	b.n	77c2 <_vfprintf_r+0xc12>
    77f8:	930c      	str	r3, [sp, #48]	; 0x30
    77fa:	9413      	str	r4, [sp, #76]	; 0x4c
    77fc:	e474      	b.n	70e8 <_vfprintf_r+0x538>
    77fe:	9413      	str	r4, [sp, #76]	; 0x4c
    7800:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7802:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7804:	270f      	movs	r7, #15
    7806:	1c21      	adds	r1, r4, #0
    7808:	46ac      	mov	ip, r5
    780a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    780c:	1c10      	adds	r0, r2, #0
    780e:	4038      	ands	r0, r7
    7810:	5c28      	ldrb	r0, [r5, r0]
    7812:	3901      	subs	r1, #1
    7814:	0915      	lsrs	r5, r2, #4
    7816:	46a8      	mov	r8, r5
    7818:	7008      	strb	r0, [r1, #0]
    781a:	0718      	lsls	r0, r3, #28
    781c:	1c05      	adds	r5, r0, #0
    781e:	4640      	mov	r0, r8
    7820:	4305      	orrs	r5, r0
    7822:	0918      	lsrs	r0, r3, #4
    7824:	1c2a      	adds	r2, r5, #0
    7826:	1c03      	adds	r3, r0, #0
    7828:	4305      	orrs	r5, r0
    782a:	d1ee      	bne.n	780a <_vfprintf_r+0xc5a>
    782c:	1a67      	subs	r7, r4, r1
    782e:	9113      	str	r1, [sp, #76]	; 0x4c
    7830:	4665      	mov	r5, ip
    7832:	9210      	str	r2, [sp, #64]	; 0x40
    7834:	9311      	str	r3, [sp, #68]	; 0x44
    7836:	970c      	str	r7, [sp, #48]	; 0x30
    7838:	e456      	b.n	70e8 <_vfprintf_r+0x538>
    783a:	9911      	ldr	r1, [sp, #68]	; 0x44
    783c:	2900      	cmp	r1, #0
    783e:	d102      	bne.n	7846 <_vfprintf_r+0xc96>
    7840:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7842:	2a09      	cmp	r2, #9
    7844:	d920      	bls.n	7888 <_vfprintf_r+0xcd8>
    7846:	46aa      	mov	sl, r5
    7848:	46b0      	mov	r8, r6
    784a:	9413      	str	r4, [sp, #76]	; 0x4c
    784c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    784e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    7850:	1c27      	adds	r7, r4, #0
    7852:	1c28      	adds	r0, r5, #0
    7854:	1c31      	adds	r1, r6, #0
    7856:	220a      	movs	r2, #10
    7858:	2300      	movs	r3, #0
    785a:	f006 fa0f 	bl	dc7c <____aeabi_uldivmod_from_thumb>
    785e:	3f01      	subs	r7, #1
    7860:	3230      	adds	r2, #48	; 0x30
    7862:	703a      	strb	r2, [r7, #0]
    7864:	1c28      	adds	r0, r5, #0
    7866:	1c31      	adds	r1, r6, #0
    7868:	220a      	movs	r2, #10
    786a:	2300      	movs	r3, #0
    786c:	f006 fa06 	bl	dc7c <____aeabi_uldivmod_from_thumb>
    7870:	1c05      	adds	r5, r0, #0
    7872:	1c0e      	adds	r6, r1, #0
    7874:	4308      	orrs	r0, r1
    7876:	d1ec      	bne.n	7852 <_vfprintf_r+0xca2>
    7878:	1be1      	subs	r1, r4, r7
    787a:	9510      	str	r5, [sp, #64]	; 0x40
    787c:	9611      	str	r6, [sp, #68]	; 0x44
    787e:	9713      	str	r7, [sp, #76]	; 0x4c
    7880:	4655      	mov	r5, sl
    7882:	4646      	mov	r6, r8
    7884:	910c      	str	r1, [sp, #48]	; 0x30
    7886:	e42f      	b.n	70e8 <_vfprintf_r+0x538>
    7888:	4b74      	ldr	r3, [pc, #464]	; (7a5c <_vfprintf_r+0xeac>)
    788a:	3230      	adds	r2, #48	; 0x30
    788c:	446b      	add	r3, sp
    788e:	3127      	adds	r1, #39	; 0x27
    7890:	545a      	strb	r2, [r3, r1]
    7892:	4b73      	ldr	r3, [pc, #460]	; (7a60 <_vfprintf_r+0xeb0>)
    7894:	446b      	add	r3, sp
    7896:	1ae7      	subs	r7, r4, r3
    7898:	970c      	str	r7, [sp, #48]	; 0x30
    789a:	9313      	str	r3, [sp, #76]	; 0x4c
    789c:	e424      	b.n	70e8 <_vfprintf_r+0x538>
    789e:	9809      	ldr	r0, [sp, #36]	; 0x24
    78a0:	4659      	mov	r1, fp
    78a2:	1c22      	adds	r2, r4, #0
    78a4:	f003 ffc4 	bl	b830 <__sprint_r>
    78a8:	2800      	cmp	r0, #0
    78aa:	d001      	beq.n	78b0 <_vfprintf_r+0xd00>
    78ac:	f7ff fb78 	bl	6fa0 <_vfprintf_r+0x3f0>
    78b0:	4d67      	ldr	r5, [pc, #412]	; (7a50 <_vfprintf_r+0xea0>)
    78b2:	4649      	mov	r1, r9
    78b4:	780a      	ldrb	r2, [r1, #0]
    78b6:	446d      	add	r5, sp
    78b8:	f7ff fa64 	bl	6d84 <_vfprintf_r+0x1d4>
    78bc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    78be:	3e01      	subs	r6, #1
    78c0:	2e00      	cmp	r6, #0
    78c2:	dc00      	bgt.n	78c6 <_vfprintf_r+0xd16>
    78c4:	e3b0      	b.n	8028 <_vfprintf_r+0x1478>
    78c6:	2e10      	cmp	r6, #16
    78c8:	dc01      	bgt.n	78ce <_vfprintf_r+0xd1e>
    78ca:	f000 fd14 	bl	82f6 <_vfprintf_r+0x1746>
    78ce:	4861      	ldr	r0, [pc, #388]	; (7a54 <_vfprintf_r+0xea4>)
    78d0:	2110      	movs	r1, #16
    78d2:	4680      	mov	r8, r0
    78d4:	1c0f      	adds	r7, r1, #0
    78d6:	1c2b      	adds	r3, r5, #0
    78d8:	4447      	add	r7, r8
    78da:	468a      	mov	sl, r1
    78dc:	465d      	mov	r5, fp
    78de:	e006      	b.n	78ee <_vfprintf_r+0xd3e>
    78e0:	3308      	adds	r3, #8
    78e2:	1c1a      	adds	r2, r3, #0
    78e4:	3208      	adds	r2, #8
    78e6:	3e10      	subs	r6, #16
    78e8:	2e10      	cmp	r6, #16
    78ea:	dc00      	bgt.n	78ee <_vfprintf_r+0xd3e>
    78ec:	e09a      	b.n	7a24 <_vfprintf_r+0xe74>
    78ee:	4652      	mov	r2, sl
    78f0:	605a      	str	r2, [r3, #4]
    78f2:	68a2      	ldr	r2, [r4, #8]
    78f4:	3210      	adds	r2, #16
    78f6:	601f      	str	r7, [r3, #0]
    78f8:	60a2      	str	r2, [r4, #8]
    78fa:	6862      	ldr	r2, [r4, #4]
    78fc:	3201      	adds	r2, #1
    78fe:	6062      	str	r2, [r4, #4]
    7900:	2a07      	cmp	r2, #7
    7902:	dded      	ble.n	78e0 <_vfprintf_r+0xd30>
    7904:	9809      	ldr	r0, [sp, #36]	; 0x24
    7906:	1c29      	adds	r1, r5, #0
    7908:	1c22      	adds	r2, r4, #0
    790a:	f003 ff91 	bl	b830 <__sprint_r>
    790e:	2800      	cmp	r0, #0
    7910:	d134      	bne.n	797c <_vfprintf_r+0xdcc>
    7912:	4a51      	ldr	r2, [pc, #324]	; (7a58 <_vfprintf_r+0xea8>)
    7914:	4b4e      	ldr	r3, [pc, #312]	; (7a50 <_vfprintf_r+0xea0>)
    7916:	446a      	add	r2, sp
    7918:	446b      	add	r3, sp
    791a:	e7e4      	b.n	78e6 <_vfprintf_r+0xd36>
    791c:	9907      	ldr	r1, [sp, #28]
    791e:	06c9      	lsls	r1, r1, #27
    7920:	d400      	bmi.n	7924 <_vfprintf_r+0xd74>
    7922:	e1bd      	b.n	7ca0 <_vfprintf_r+0x10f0>
    7924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7926:	6813      	ldr	r3, [r2, #0]
    7928:	3204      	adds	r2, #4
    792a:	9310      	str	r3, [sp, #64]	; 0x40
    792c:	17db      	asrs	r3, r3, #31
    792e:	9311      	str	r3, [sp, #68]	; 0x44
    7930:	920f      	str	r2, [sp, #60]	; 0x3c
    7932:	f7ff fb9a 	bl	706a <_vfprintf_r+0x4ba>
    7936:	2302      	movs	r3, #2
    7938:	e451      	b.n	71de <_vfprintf_r+0x62e>
    793a:	9907      	ldr	r1, [sp, #28]
    793c:	2310      	movs	r3, #16
    793e:	4019      	ands	r1, r3
    7940:	d100      	bne.n	7944 <_vfprintf_r+0xd94>
    7942:	e19b      	b.n	7c7c <_vfprintf_r+0x10cc>
    7944:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7946:	6809      	ldr	r1, [r1, #0]
    7948:	9110      	str	r1, [sp, #64]	; 0x40
    794a:	9211      	str	r2, [sp, #68]	; 0x44
    794c:	1c0a      	adds	r2, r1, #0
    794e:	1e53      	subs	r3, r2, #1
    7950:	419a      	sbcs	r2, r3
    7952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7954:	3304      	adds	r3, #4
    7956:	930f      	str	r3, [sp, #60]	; 0x3c
    7958:	2301      	movs	r3, #1
    795a:	e440      	b.n	71de <_vfprintf_r+0x62e>
    795c:	9907      	ldr	r1, [sp, #28]
    795e:	2210      	movs	r2, #16
    7960:	4011      	ands	r1, r2
    7962:	d100      	bne.n	7966 <_vfprintf_r+0xdb6>
    7964:	e1ab      	b.n	7cbe <_vfprintf_r+0x110e>
    7966:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7968:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    796a:	6809      	ldr	r1, [r1, #0]
    796c:	3704      	adds	r7, #4
    796e:	1c0a      	adds	r2, r1, #0
    7970:	9110      	str	r1, [sp, #64]	; 0x40
    7972:	9311      	str	r3, [sp, #68]	; 0x44
    7974:	1e51      	subs	r1, r2, #1
    7976:	418a      	sbcs	r2, r1
    7978:	970f      	str	r7, [sp, #60]	; 0x3c
    797a:	e430      	b.n	71de <_vfprintf_r+0x62e>
    797c:	46aa      	mov	sl, r5
    797e:	f7ff fb10 	bl	6fa2 <_vfprintf_r+0x3f2>
    7982:	9d07      	ldr	r5, [sp, #28]
    7984:	2301      	movs	r3, #1
    7986:	421d      	tst	r5, r3
    7988:	d000      	beq.n	798c <_vfprintf_r+0xddc>
    798a:	e649      	b.n	7620 <_vfprintf_r+0xa70>
    798c:	607b      	str	r3, [r7, #4]
    798e:	68a3      	ldr	r3, [r4, #8]
    7990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7992:	3301      	adds	r3, #1
    7994:	603a      	str	r2, [r7, #0]
    7996:	60a3      	str	r3, [r4, #8]
    7998:	6863      	ldr	r3, [r4, #4]
    799a:	3301      	adds	r3, #1
    799c:	6063      	str	r3, [r4, #4]
    799e:	2b07      	cmp	r3, #7
    79a0:	dd00      	ble.n	79a4 <_vfprintf_r+0xdf4>
    79a2:	e321      	b.n	7fe8 <_vfprintf_r+0x1438>
    79a4:	3708      	adds	r7, #8
    79a6:	2308      	movs	r3, #8
    79a8:	46b9      	mov	r9, r7
    79aa:	1c1f      	adds	r7, r3, #0
    79ac:	444f      	add	r7, r9
    79ae:	e673      	b.n	7698 <_vfprintf_r+0xae8>
    79b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    79b2:	4659      	mov	r1, fp
    79b4:	1c22      	adds	r2, r4, #0
    79b6:	f003 ff3b 	bl	b830 <__sprint_r>
    79ba:	2800      	cmp	r0, #0
    79bc:	d001      	beq.n	79c2 <_vfprintf_r+0xe12>
    79be:	f7ff faef 	bl	6fa0 <_vfprintf_r+0x3f0>
    79c2:	4b25      	ldr	r3, [pc, #148]	; (7a58 <_vfprintf_r+0xea8>)
    79c4:	4d22      	ldr	r5, [pc, #136]	; (7a50 <_vfprintf_r+0xea0>)
    79c6:	446b      	add	r3, sp
    79c8:	4699      	mov	r9, r3
    79ca:	446d      	add	r5, sp
    79cc:	e648      	b.n	7660 <_vfprintf_r+0xab0>
    79ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    79d0:	4659      	mov	r1, fp
    79d2:	1c22      	adds	r2, r4, #0
    79d4:	f003 ff2c 	bl	b830 <__sprint_r>
    79d8:	2800      	cmp	r0, #0
    79da:	d001      	beq.n	79e0 <_vfprintf_r+0xe30>
    79dc:	f7ff fae0 	bl	6fa0 <_vfprintf_r+0x3f0>
    79e0:	4d1d      	ldr	r5, [pc, #116]	; (7a58 <_vfprintf_r+0xea8>)
    79e2:	4f1b      	ldr	r7, [pc, #108]	; (7a50 <_vfprintf_r+0xea0>)
    79e4:	446d      	add	r5, sp
    79e6:	446f      	add	r7, sp
    79e8:	e62a      	b.n	7640 <_vfprintf_r+0xa90>
    79ea:	2830      	cmp	r0, #48	; 0x30
    79ec:	d100      	bne.n	79f0 <_vfprintf_r+0xe40>
    79ee:	e386      	b.n	80fe <_vfprintf_r+0x154e>
    79f0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    79f2:	3f01      	subs	r7, #1
    79f4:	2330      	movs	r3, #48	; 0x30
    79f6:	1be0      	subs	r0, r4, r7
    79f8:	9713      	str	r7, [sp, #76]	; 0x4c
    79fa:	703b      	strb	r3, [r7, #0]
    79fc:	900c      	str	r0, [sp, #48]	; 0x30
    79fe:	f7ff fb73 	bl	70e8 <_vfprintf_r+0x538>
    7a02:	9a10      	ldr	r2, [sp, #64]	; 0x40
    7a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7a06:	2100      	movs	r1, #0
    7a08:	4250      	negs	r0, r2
    7a0a:	4199      	sbcs	r1, r3
    7a0c:	1c02      	adds	r2, r0, #0
    7a0e:	232d      	movs	r3, #45	; 0x2d
    7a10:	464f      	mov	r7, r9
    7a12:	430a      	orrs	r2, r1
    7a14:	703b      	strb	r3, [r7, #0]
    7a16:	9010      	str	r0, [sp, #64]	; 0x40
    7a18:	9111      	str	r1, [sp, #68]	; 0x44
    7a1a:	1e53      	subs	r3, r2, #1
    7a1c:	419a      	sbcs	r2, r3
    7a1e:	2301      	movs	r3, #1
    7a20:	f7ff fb2e 	bl	7080 <_vfprintf_r+0x4d0>
    7a24:	46ab      	mov	fp, r5
    7a26:	4691      	mov	r9, r2
    7a28:	1c1d      	adds	r5, r3, #0
    7a2a:	2710      	movs	r7, #16
    7a2c:	1c3b      	adds	r3, r7, #0
    7a2e:	4443      	add	r3, r8
    7a30:	602b      	str	r3, [r5, #0]
    7a32:	68a3      	ldr	r3, [r4, #8]
    7a34:	18f3      	adds	r3, r6, r3
    7a36:	606e      	str	r6, [r5, #4]
    7a38:	60a3      	str	r3, [r4, #8]
    7a3a:	6863      	ldr	r3, [r4, #4]
    7a3c:	3301      	adds	r3, #1
    7a3e:	6063      	str	r3, [r4, #4]
    7a40:	2b07      	cmp	r3, #7
    7a42:	dd00      	ble.n	7a46 <_vfprintf_r+0xe96>
    7a44:	e34b      	b.n	80de <_vfprintf_r+0x152e>
    7a46:	2008      	movs	r0, #8
    7a48:	1c07      	adds	r7, r0, #0
    7a4a:	444f      	add	r7, r9
    7a4c:	e624      	b.n	7698 <_vfprintf_r+0xae8>
    7a4e:	46c0      	nop			; (mov r8, r8)
    7a50:	000004e4 	.word	0x000004e4
    7a54:	0000e024 	.word	0x0000e024
    7a58:	000004ec 	.word	0x000004ec
    7a5c:	00000524 	.word	0x00000524
    7a60:	0000054b 	.word	0x0000054b
    7a64:	981a      	ldr	r0, [sp, #104]	; 0x68
    7a66:	991b      	ldr	r1, [sp, #108]	; 0x6c
    7a68:	f003 f860 	bl	ab2c <__fpclassifyd>
    7a6c:	2800      	cmp	r0, #0
    7a6e:	d100      	bne.n	7a72 <_vfprintf_r+0xec2>
    7a70:	e272      	b.n	7f58 <_vfprintf_r+0x13a8>
    7a72:	1c70      	adds	r0, r6, #1
    7a74:	d101      	bne.n	7a7a <_vfprintf_r+0xeca>
    7a76:	f000 fbfa 	bl	826e <_vfprintf_r+0x16be>
    7a7a:	9916      	ldr	r1, [sp, #88]	; 0x58
    7a7c:	3947      	subs	r1, #71	; 0x47
    7a7e:	910c      	str	r1, [sp, #48]	; 0x30
    7a80:	2900      	cmp	r1, #0
    7a82:	d002      	beq.n	7a8a <_vfprintf_r+0xeda>
    7a84:	9a16      	ldr	r2, [sp, #88]	; 0x58
    7a86:	2a67      	cmp	r2, #103	; 0x67
    7a88:	d102      	bne.n	7a90 <_vfprintf_r+0xee0>
    7a8a:	2e00      	cmp	r6, #0
    7a8c:	d100      	bne.n	7a90 <_vfprintf_r+0xee0>
    7a8e:	2601      	movs	r6, #1
    7a90:	9f07      	ldr	r7, [sp, #28]
    7a92:	2380      	movs	r3, #128	; 0x80
    7a94:	005b      	lsls	r3, r3, #1
    7a96:	431f      	orrs	r7, r3
    7a98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7a9a:	9707      	str	r7, [sp, #28]
    7a9c:	2b00      	cmp	r3, #0
    7a9e:	da00      	bge.n	7aa2 <_vfprintf_r+0xef2>
    7aa0:	e3f2      	b.n	8288 <_vfprintf_r+0x16d8>
    7aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7aa4:	2700      	movs	r7, #0
    7aa6:	930a      	str	r3, [sp, #40]	; 0x28
    7aa8:	9714      	str	r7, [sp, #80]	; 0x50
    7aaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7aac:	3b46      	subs	r3, #70	; 0x46
    7aae:	4259      	negs	r1, r3
    7ab0:	4159      	adcs	r1, r3
    7ab2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7ab4:	3b66      	subs	r3, #102	; 0x66
    7ab6:	425a      	negs	r2, r3
    7ab8:	4153      	adcs	r3, r2
    7aba:	1c08      	adds	r0, r1, #0
    7abc:	4318      	orrs	r0, r3
    7abe:	900e      	str	r0, [sp, #56]	; 0x38
    7ac0:	d000      	beq.n	7ac4 <_vfprintf_r+0xf14>
    7ac2:	e364      	b.n	818e <_vfprintf_r+0x15de>
    7ac4:	9916      	ldr	r1, [sp, #88]	; 0x58
    7ac6:	2945      	cmp	r1, #69	; 0x45
    7ac8:	d002      	beq.n	7ad0 <_vfprintf_r+0xf20>
    7aca:	2965      	cmp	r1, #101	; 0x65
    7acc:	d000      	beq.n	7ad0 <_vfprintf_r+0xf20>
    7ace:	e3e5      	b.n	829c <_vfprintf_r+0x16ec>
    7ad0:	1c72      	adds	r2, r6, #1
    7ad2:	4692      	mov	sl, r2
    7ad4:	2302      	movs	r3, #2
    7ad6:	9300      	str	r3, [sp, #0]
    7ad8:	4653      	mov	r3, sl
    7ada:	9301      	str	r3, [sp, #4]
    7adc:	23ad      	movs	r3, #173	; 0xad
    7ade:	00db      	lsls	r3, r3, #3
    7ae0:	446b      	add	r3, sp
    7ae2:	9302      	str	r3, [sp, #8]
    7ae4:	4bd4      	ldr	r3, [pc, #848]	; (7e38 <_vfprintf_r+0x1288>)
    7ae6:	446b      	add	r3, sp
    7ae8:	9303      	str	r3, [sp, #12]
    7aea:	23ac      	movs	r3, #172	; 0xac
    7aec:	00db      	lsls	r3, r3, #3
    7aee:	446b      	add	r3, sp
    7af0:	9304      	str	r3, [sp, #16]
    7af2:	9809      	ldr	r0, [sp, #36]	; 0x24
    7af4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    7af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7af8:	f000 fdd4 	bl	86a4 <_dtoa_r>
    7afc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    7afe:	9013      	str	r0, [sp, #76]	; 0x4c
    7b00:	2f00      	cmp	r7, #0
    7b02:	d002      	beq.n	7b0a <_vfprintf_r+0xf5a>
    7b04:	9816      	ldr	r0, [sp, #88]	; 0x58
    7b06:	2867      	cmp	r0, #103	; 0x67
    7b08:	d103      	bne.n	7b12 <_vfprintf_r+0xf62>
    7b0a:	9907      	ldr	r1, [sp, #28]
    7b0c:	07c9      	lsls	r1, r1, #31
    7b0e:	d400      	bmi.n	7b12 <_vfprintf_r+0xf62>
    7b10:	e3d2      	b.n	82b8 <_vfprintf_r+0x1708>
    7b12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7b14:	980e      	ldr	r0, [sp, #56]	; 0x38
    7b16:	1c1f      	adds	r7, r3, #0
    7b18:	4457      	add	r7, sl
    7b1a:	2800      	cmp	r0, #0
    7b1c:	d008      	beq.n	7b30 <_vfprintf_r+0xf80>
    7b1e:	781b      	ldrb	r3, [r3, #0]
    7b20:	2b30      	cmp	r3, #48	; 0x30
    7b22:	d100      	bne.n	7b26 <_vfprintf_r+0xf76>
    7b24:	e3cd      	b.n	82c2 <_vfprintf_r+0x1712>
    7b26:	21ad      	movs	r1, #173	; 0xad
    7b28:	00c9      	lsls	r1, r1, #3
    7b2a:	4469      	add	r1, sp
    7b2c:	680a      	ldr	r2, [r1, #0]
    7b2e:	18bf      	adds	r7, r7, r2
    7b30:	981a      	ldr	r0, [sp, #104]	; 0x68
    7b32:	990a      	ldr	r1, [sp, #40]	; 0x28
    7b34:	4bbf      	ldr	r3, [pc, #764]	; (7e34 <_vfprintf_r+0x1284>)
    7b36:	4abe      	ldr	r2, [pc, #760]	; (7e30 <_vfprintf_r+0x1280>)
    7b38:	f006 f86c 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    7b3c:	2800      	cmp	r0, #0
    7b3e:	d100      	bne.n	7b42 <_vfprintf_r+0xf92>
    7b40:	e368      	b.n	8214 <_vfprintf_r+0x1664>
    7b42:	22ac      	movs	r2, #172	; 0xac
    7b44:	00d2      	lsls	r2, r2, #3
    7b46:	446a      	add	r2, sp
    7b48:	6017      	str	r7, [r2, #0]
    7b4a:	1c3b      	adds	r3, r7, #0
    7b4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7b4e:	1a9b      	subs	r3, r3, r2
    7b50:	930e      	str	r3, [sp, #56]	; 0x38
    7b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7b54:	2b00      	cmp	r3, #0
    7b56:	d003      	beq.n	7b60 <_vfprintf_r+0xfb0>
    7b58:	9f16      	ldr	r7, [sp, #88]	; 0x58
    7b5a:	2f67      	cmp	r7, #103	; 0x67
    7b5c:	d000      	beq.n	7b60 <_vfprintf_r+0xfb0>
    7b5e:	e341      	b.n	81e4 <_vfprintf_r+0x1634>
    7b60:	20ad      	movs	r0, #173	; 0xad
    7b62:	00c0      	lsls	r0, r0, #3
    7b64:	4468      	add	r0, sp
    7b66:	6802      	ldr	r2, [r0, #0]
    7b68:	920c      	str	r2, [sp, #48]	; 0x30
    7b6a:	1cd1      	adds	r1, r2, #3
    7b6c:	db02      	blt.n	7b74 <_vfprintf_r+0xfc4>
    7b6e:	4296      	cmp	r6, r2
    7b70:	db00      	blt.n	7b74 <_vfprintf_r+0xfc4>
    7b72:	e371      	b.n	8258 <_vfprintf_r+0x16a8>
    7b74:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7b76:	3b02      	subs	r3, #2
    7b78:	9316      	str	r3, [sp, #88]	; 0x58
    7b7a:	1e56      	subs	r6, r2, #1
    7b7c:	21ad      	movs	r1, #173	; 0xad
    7b7e:	22ab      	movs	r2, #171	; 0xab
    7b80:	ab16      	add	r3, sp, #88	; 0x58
    7b82:	00c9      	lsls	r1, r1, #3
    7b84:	00d2      	lsls	r2, r2, #3
    7b86:	781b      	ldrb	r3, [r3, #0]
    7b88:	446a      	add	r2, sp
    7b8a:	4469      	add	r1, sp
    7b8c:	600e      	str	r6, [r1, #0]
    7b8e:	4692      	mov	sl, r2
    7b90:	7013      	strb	r3, [r2, #0]
    7b92:	2e00      	cmp	r6, #0
    7b94:	da00      	bge.n	7b98 <_vfprintf_r+0xfe8>
    7b96:	e3a5      	b.n	82e4 <_vfprintf_r+0x1734>
    7b98:	232b      	movs	r3, #43	; 0x2b
    7b9a:	7053      	strb	r3, [r2, #1]
    7b9c:	2e09      	cmp	r6, #9
    7b9e:	dc00      	bgt.n	7ba2 <_vfprintf_r+0xff2>
    7ba0:	e36a      	b.n	8278 <_vfprintf_r+0x16c8>
    7ba2:	48a6      	ldr	r0, [pc, #664]	; (7e3c <_vfprintf_r+0x128c>)
    7ba4:	4468      	add	r0, sp
    7ba6:	4680      	mov	r8, r0
    7ba8:	1c07      	adds	r7, r0, #0
    7baa:	1c30      	adds	r0, r6, #0
    7bac:	210a      	movs	r1, #10
    7bae:	f006 f897 	bl	dce0 <____aeabi_idivmod_from_thumb>
    7bb2:	3f01      	subs	r7, #1
    7bb4:	3130      	adds	r1, #48	; 0x30
    7bb6:	7039      	strb	r1, [r7, #0]
    7bb8:	1c30      	adds	r0, r6, #0
    7bba:	210a      	movs	r1, #10
    7bbc:	f006 f81c 	bl	dbf8 <____aeabi_idiv_from_thumb>
    7bc0:	1c06      	adds	r6, r0, #0
    7bc2:	2809      	cmp	r0, #9
    7bc4:	dcf1      	bgt.n	7baa <_vfprintf_r+0xffa>
    7bc6:	1c02      	adds	r2, r0, #0
    7bc8:	499d      	ldr	r1, [pc, #628]	; (7e40 <_vfprintf_r+0x1290>)
    7bca:	1e7b      	subs	r3, r7, #1
    7bcc:	3230      	adds	r2, #48	; 0x30
    7bce:	701a      	strb	r2, [r3, #0]
    7bd0:	4469      	add	r1, sp
    7bd2:	4543      	cmp	r3, r8
    7bd4:	d205      	bcs.n	7be2 <_vfprintf_r+0x1032>
    7bd6:	781a      	ldrb	r2, [r3, #0]
    7bd8:	3301      	adds	r3, #1
    7bda:	700a      	strb	r2, [r1, #0]
    7bdc:	3101      	adds	r1, #1
    7bde:	4543      	cmp	r3, r8
    7be0:	d3f9      	bcc.n	7bd6 <_vfprintf_r+0x1026>
    7be2:	4652      	mov	r2, sl
    7be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7be6:	1a8a      	subs	r2, r1, r2
    7be8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7bea:	921d      	str	r2, [sp, #116]	; 0x74
    7bec:	18d2      	adds	r2, r2, r3
    7bee:	920c      	str	r2, [sp, #48]	; 0x30
    7bf0:	2e01      	cmp	r6, #1
    7bf2:	dc00      	bgt.n	7bf6 <_vfprintf_r+0x1046>
    7bf4:	e383      	b.n	82fe <_vfprintf_r+0x174e>
    7bf6:	980c      	ldr	r0, [sp, #48]	; 0x30
    7bf8:	2100      	movs	r1, #0
    7bfa:	3001      	adds	r0, #1
    7bfc:	900c      	str	r0, [sp, #48]	; 0x30
    7bfe:	9119      	str	r1, [sp, #100]	; 0x64
    7c00:	9814      	ldr	r0, [sp, #80]	; 0x50
    7c02:	2800      	cmp	r0, #0
    7c04:	d000      	beq.n	7c08 <_vfprintf_r+0x1058>
    7c06:	e2d0      	b.n	81aa <_vfprintf_r+0x15fa>
    7c08:	990c      	ldr	r1, [sp, #48]	; 0x30
    7c0a:	43cb      	mvns	r3, r1
    7c0c:	17db      	asrs	r3, r3, #31
    7c0e:	4019      	ands	r1, r3
    7c10:	464b      	mov	r3, r9
    7c12:	910a      	str	r1, [sp, #40]	; 0x28
    7c14:	781a      	ldrb	r2, [r3, #0]
    7c16:	f7ff fa71 	bl	70fc <_vfprintf_r+0x54c>
    7c1a:	9908      	ldr	r1, [sp, #32]
    7c1c:	780b      	ldrb	r3, [r1, #0]
    7c1e:	f7ff f84a 	bl	6cb6 <_vfprintf_r+0x106>
    7c22:	9f07      	ldr	r7, [sp, #28]
    7c24:	2340      	movs	r3, #64	; 0x40
    7c26:	403b      	ands	r3, r7
    7c28:	d100      	bne.n	7c2c <_vfprintf_r+0x107c>
    7c2a:	e1bf      	b.n	7fac <_vfprintf_r+0x13fc>
    7c2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7c2e:	8800      	ldrh	r0, [r0, #0]
    7c30:	9111      	str	r1, [sp, #68]	; 0x44
    7c32:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7c34:	3104      	adds	r1, #4
    7c36:	9010      	str	r0, [sp, #64]	; 0x40
    7c38:	910f      	str	r1, [sp, #60]	; 0x3c
    7c3a:	f7ff fab8 	bl	71ae <_vfprintf_r+0x5fe>
    7c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7c40:	2307      	movs	r3, #7
    7c42:	3207      	adds	r2, #7
    7c44:	439a      	bics	r2, r3
    7c46:	6810      	ldr	r0, [r2, #0]
    7c48:	2708      	movs	r7, #8
    7c4a:	18bf      	adds	r7, r7, r2
    7c4c:	970f      	str	r7, [sp, #60]	; 0x3c
    7c4e:	901a      	str	r0, [sp, #104]	; 0x68
    7c50:	6852      	ldr	r2, [r2, #4]
    7c52:	921b      	str	r2, [sp, #108]	; 0x6c
    7c54:	f7ff fa6b 	bl	712e <_vfprintf_r+0x57e>
    7c58:	9807      	ldr	r0, [sp, #28]
    7c5a:	06c0      	lsls	r0, r0, #27
    7c5c:	d500      	bpl.n	7c60 <_vfprintf_r+0x10b0>
    7c5e:	e198      	b.n	7f92 <_vfprintf_r+0x13e2>
    7c60:	9b07      	ldr	r3, [sp, #28]
    7c62:	065b      	lsls	r3, r3, #25
    7c64:	d400      	bmi.n	7c68 <_vfprintf_r+0x10b8>
    7c66:	e298      	b.n	819a <_vfprintf_r+0x15ea>
    7c68:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    7c6a:	466f      	mov	r7, sp
    7c6c:	2034      	movs	r0, #52	; 0x34
    7c6e:	6833      	ldr	r3, [r6, #0]
    7c70:	5bc7      	ldrh	r7, [r0, r7]
    7c72:	3604      	adds	r6, #4
    7c74:	801f      	strh	r7, [r3, #0]
    7c76:	960f      	str	r6, [sp, #60]	; 0x3c
    7c78:	f7fe ffe4 	bl	6c44 <_vfprintf_r+0x94>
    7c7c:	9f07      	ldr	r7, [sp, #28]
    7c7e:	2340      	movs	r3, #64	; 0x40
    7c80:	403b      	ands	r3, r7
    7c82:	d100      	bne.n	7c86 <_vfprintf_r+0x10d6>
    7c84:	e18d      	b.n	7fa2 <_vfprintf_r+0x13f2>
    7c86:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7c88:	8800      	ldrh	r0, [r0, #0]
    7c8a:	9111      	str	r1, [sp, #68]	; 0x44
    7c8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7c8e:	1c02      	adds	r2, r0, #0
    7c90:	3104      	adds	r1, #4
    7c92:	1e53      	subs	r3, r2, #1
    7c94:	419a      	sbcs	r2, r3
    7c96:	9010      	str	r0, [sp, #64]	; 0x40
    7c98:	910f      	str	r1, [sp, #60]	; 0x3c
    7c9a:	2301      	movs	r3, #1
    7c9c:	f7ff fa9f 	bl	71de <_vfprintf_r+0x62e>
    7ca0:	9b07      	ldr	r3, [sp, #28]
    7ca2:	065b      	lsls	r3, r3, #25
    7ca4:	d400      	bmi.n	7ca8 <_vfprintf_r+0x10f8>
    7ca6:	e16b      	b.n	7f80 <_vfprintf_r+0x13d0>
    7ca8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7caa:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7cac:	2300      	movs	r3, #0
    7cae:	5efb      	ldrsh	r3, [r7, r3]
    7cb0:	3004      	adds	r0, #4
    7cb2:	9310      	str	r3, [sp, #64]	; 0x40
    7cb4:	17db      	asrs	r3, r3, #31
    7cb6:	9311      	str	r3, [sp, #68]	; 0x44
    7cb8:	900f      	str	r0, [sp, #60]	; 0x3c
    7cba:	f7ff f9d6 	bl	706a <_vfprintf_r+0x4ba>
    7cbe:	9807      	ldr	r0, [sp, #28]
    7cc0:	2340      	movs	r3, #64	; 0x40
    7cc2:	4018      	ands	r0, r3
    7cc4:	d100      	bne.n	7cc8 <_vfprintf_r+0x1118>
    7cc6:	e13a      	b.n	7f3e <_vfprintf_r+0x138e>
    7cc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7cca:	8800      	ldrh	r0, [r0, #0]
    7ccc:	1c02      	adds	r2, r0, #0
    7cce:	1e53      	subs	r3, r2, #1
    7cd0:	419a      	sbcs	r2, r3
    7cd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7cd4:	3304      	adds	r3, #4
    7cd6:	930f      	str	r3, [sp, #60]	; 0x3c
    7cd8:	9010      	str	r0, [sp, #64]	; 0x40
    7cda:	9111      	str	r1, [sp, #68]	; 0x44
    7cdc:	1c0b      	adds	r3, r1, #0
    7cde:	f7ff fa7e 	bl	71de <_vfprintf_r+0x62e>
    7ce2:	46bb      	mov	fp, r7
    7ce4:	1c17      	adds	r7, r2, #0
    7ce6:	2610      	movs	r6, #16
    7ce8:	1c32      	adds	r2, r6, #0
    7cea:	605d      	str	r5, [r3, #4]
    7cec:	4442      	add	r2, r8
    7cee:	601a      	str	r2, [r3, #0]
    7cf0:	68a3      	ldr	r3, [r4, #8]
    7cf2:	18eb      	adds	r3, r5, r3
    7cf4:	e4d9      	b.n	76aa <_vfprintf_r+0xafa>
    7cf6:	46bb      	mov	fp, r7
    7cf8:	1c17      	adds	r7, r2, #0
    7cfa:	2610      	movs	r6, #16
    7cfc:	1c32      	adds	r2, r6, #0
    7cfe:	4442      	add	r2, r8
    7d00:	603a      	str	r2, [r7, #0]
    7d02:	68a2      	ldr	r2, [r4, #8]
    7d04:	18aa      	adds	r2, r5, r2
    7d06:	607d      	str	r5, [r7, #4]
    7d08:	60a2      	str	r2, [r4, #8]
    7d0a:	6862      	ldr	r2, [r4, #4]
    7d0c:	3201      	adds	r2, #1
    7d0e:	6062      	str	r2, [r4, #4]
    7d10:	2a07      	cmp	r2, #7
    7d12:	dd00      	ble.n	7d16 <_vfprintf_r+0x1166>
    7d14:	e20a      	b.n	812c <_vfprintf_r+0x157c>
    7d16:	27ad      	movs	r7, #173	; 0xad
    7d18:	00ff      	lsls	r7, r7, #3
    7d1a:	446f      	add	r7, sp
    7d1c:	683d      	ldr	r5, [r7, #0]
    7d1e:	980e      	ldr	r0, [sp, #56]	; 0x38
    7d20:	4285      	cmp	r5, r0
    7d22:	db4b      	blt.n	7dbc <_vfprintf_r+0x120c>
    7d24:	9907      	ldr	r1, [sp, #28]
    7d26:	07c9      	lsls	r1, r1, #31
    7d28:	d448      	bmi.n	7dbc <_vfprintf_r+0x120c>
    7d2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    7d2c:	1c02      	adds	r2, r0, #0
    7d2e:	9819      	ldr	r0, [sp, #100]	; 0x64
    7d30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7d32:	4651      	mov	r1, sl
    7d34:	1812      	adds	r2, r2, r0
    7d36:	1a88      	subs	r0, r1, r2
    7d38:	1b71      	subs	r1, r6, r5
    7d3a:	1c0e      	adds	r6, r1, #0
    7d3c:	4281      	cmp	r1, r0
    7d3e:	dd00      	ble.n	7d42 <_vfprintf_r+0x1192>
    7d40:	1c06      	adds	r6, r0, #0
    7d42:	2e00      	cmp	r6, #0
    7d44:	dd0b      	ble.n	7d5e <_vfprintf_r+0x11ae>
    7d46:	601a      	str	r2, [r3, #0]
    7d48:	68a2      	ldr	r2, [r4, #8]
    7d4a:	18b2      	adds	r2, r6, r2
    7d4c:	605e      	str	r6, [r3, #4]
    7d4e:	60a2      	str	r2, [r4, #8]
    7d50:	6862      	ldr	r2, [r4, #4]
    7d52:	3201      	adds	r2, #1
    7d54:	6062      	str	r2, [r4, #4]
    7d56:	3308      	adds	r3, #8
    7d58:	2a07      	cmp	r2, #7
    7d5a:	dd00      	ble.n	7d5e <_vfprintf_r+0x11ae>
    7d5c:	e1d4      	b.n	8108 <_vfprintf_r+0x1558>
    7d5e:	43f5      	mvns	r5, r6
    7d60:	17ed      	asrs	r5, r5, #31
    7d62:	4035      	ands	r5, r6
    7d64:	1b4d      	subs	r5, r1, r5
    7d66:	2d00      	cmp	r5, #0
    7d68:	dd45      	ble.n	7df6 <_vfprintf_r+0x1246>
    7d6a:	2d10      	cmp	r5, #16
    7d6c:	dc00      	bgt.n	7d70 <_vfprintf_r+0x11c0>
    7d6e:	e2e2      	b.n	8336 <_vfprintf_r+0x1786>
    7d70:	4934      	ldr	r1, [pc, #208]	; (7e44 <_vfprintf_r+0x1294>)
    7d72:	2210      	movs	r2, #16
    7d74:	4688      	mov	r8, r1
    7d76:	1c16      	adds	r6, r2, #0
    7d78:	4446      	add	r6, r8
    7d7a:	4691      	mov	r9, r2
    7d7c:	465f      	mov	r7, fp
    7d7e:	e005      	b.n	7d8c <_vfprintf_r+0x11dc>
    7d80:	3308      	adds	r3, #8
    7d82:	1c1a      	adds	r2, r3, #0
    7d84:	3208      	adds	r2, #8
    7d86:	3d10      	subs	r5, #16
    7d88:	2d10      	cmp	r5, #16
    7d8a:	dd37      	ble.n	7dfc <_vfprintf_r+0x124c>
    7d8c:	68a2      	ldr	r2, [r4, #8]
    7d8e:	4648      	mov	r0, r9
    7d90:	3210      	adds	r2, #16
    7d92:	601e      	str	r6, [r3, #0]
    7d94:	6058      	str	r0, [r3, #4]
    7d96:	60a2      	str	r2, [r4, #8]
    7d98:	6862      	ldr	r2, [r4, #4]
    7d9a:	3201      	adds	r2, #1
    7d9c:	6062      	str	r2, [r4, #4]
    7d9e:	2a07      	cmp	r2, #7
    7da0:	ddee      	ble.n	7d80 <_vfprintf_r+0x11d0>
    7da2:	9809      	ldr	r0, [sp, #36]	; 0x24
    7da4:	1c39      	adds	r1, r7, #0
    7da6:	1c22      	adds	r2, r4, #0
    7da8:	f003 fd42 	bl	b830 <__sprint_r>
    7dac:	2800      	cmp	r0, #0
    7dae:	d000      	beq.n	7db2 <_vfprintf_r+0x1202>
    7db0:	e4a6      	b.n	7700 <_vfprintf_r+0xb50>
    7db2:	4a25      	ldr	r2, [pc, #148]	; (7e48 <_vfprintf_r+0x1298>)
    7db4:	4b25      	ldr	r3, [pc, #148]	; (7e4c <_vfprintf_r+0x129c>)
    7db6:	446a      	add	r2, sp
    7db8:	446b      	add	r3, sp
    7dba:	e7e4      	b.n	7d86 <_vfprintf_r+0x11d6>
    7dbc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7dbe:	9e1c      	ldr	r6, [sp, #112]	; 0x70
    7dc0:	601a      	str	r2, [r3, #0]
    7dc2:	68a2      	ldr	r2, [r4, #8]
    7dc4:	1992      	adds	r2, r2, r6
    7dc6:	605e      	str	r6, [r3, #4]
    7dc8:	60a2      	str	r2, [r4, #8]
    7dca:	6862      	ldr	r2, [r4, #4]
    7dcc:	3201      	adds	r2, #1
    7dce:	6062      	str	r2, [r4, #4]
    7dd0:	3308      	adds	r3, #8
    7dd2:	2a07      	cmp	r2, #7
    7dd4:	dda9      	ble.n	7d2a <_vfprintf_r+0x117a>
    7dd6:	9809      	ldr	r0, [sp, #36]	; 0x24
    7dd8:	4659      	mov	r1, fp
    7dda:	1c22      	adds	r2, r4, #0
    7ddc:	f003 fd28 	bl	b830 <__sprint_r>
    7de0:	2800      	cmp	r0, #0
    7de2:	d001      	beq.n	7de8 <_vfprintf_r+0x1238>
    7de4:	f7ff f8dc 	bl	6fa0 <_vfprintf_r+0x3f0>
    7de8:	27ad      	movs	r7, #173	; 0xad
    7dea:	00ff      	lsls	r7, r7, #3
    7dec:	4b17      	ldr	r3, [pc, #92]	; (7e4c <_vfprintf_r+0x129c>)
    7dee:	446f      	add	r7, sp
    7df0:	683d      	ldr	r5, [r7, #0]
    7df2:	446b      	add	r3, sp
    7df4:	e799      	b.n	7d2a <_vfprintf_r+0x117a>
    7df6:	1c1f      	adds	r7, r3, #0
    7df8:	f7ff f848 	bl	6e8c <_vfprintf_r+0x2dc>
    7dfc:	46bb      	mov	fp, r7
    7dfe:	1c17      	adds	r7, r2, #0
    7e00:	2110      	movs	r1, #16
    7e02:	1c0a      	adds	r2, r1, #0
    7e04:	e771      	b.n	7cea <_vfprintf_r+0x113a>
    7e06:	490f      	ldr	r1, [pc, #60]	; (7e44 <_vfprintf_r+0x1294>)
    7e08:	1c2f      	adds	r7, r5, #0
    7e0a:	3708      	adds	r7, #8
    7e0c:	4688      	mov	r8, r1
    7e0e:	f7ff f81b 	bl	6e48 <_vfprintf_r+0x298>
    7e12:	9809      	ldr	r0, [sp, #36]	; 0x24
    7e14:	4659      	mov	r1, fp
    7e16:	1c22      	adds	r2, r4, #0
    7e18:	f003 fd0a 	bl	b830 <__sprint_r>
    7e1c:	2800      	cmp	r0, #0
    7e1e:	d001      	beq.n	7e24 <_vfprintf_r+0x1274>
    7e20:	f7ff f8be 	bl	6fa0 <_vfprintf_r+0x3f0>
    7e24:	4f09      	ldr	r7, [pc, #36]	; (7e4c <_vfprintf_r+0x129c>)
    7e26:	446f      	add	r7, sp
    7e28:	f7ff fb46 	bl	74b8 <_vfprintf_r+0x908>
    7e2c:	46c0      	nop			; (mov r8, r8)
    7e2e:	46c0      	nop			; (mov r8, r8)
	...
    7e38:	00000564 	.word	0x00000564
    7e3c:	00000483 	.word	0x00000483
    7e40:	0000055a 	.word	0x0000055a
    7e44:	0000e024 	.word	0x0000e024
    7e48:	000004ec 	.word	0x000004ec
    7e4c:	000004e4 	.word	0x000004e4
    7e50:	4bdc      	ldr	r3, [pc, #880]	; (81c4 <_vfprintf_r+0x1614>)
    7e52:	603b      	str	r3, [r7, #0]
    7e54:	2301      	movs	r3, #1
    7e56:	607b      	str	r3, [r7, #4]
    7e58:	68a3      	ldr	r3, [r4, #8]
    7e5a:	3301      	adds	r3, #1
    7e5c:	60a3      	str	r3, [r4, #8]
    7e5e:	6863      	ldr	r3, [r4, #4]
    7e60:	3301      	adds	r3, #1
    7e62:	6063      	str	r3, [r4, #4]
    7e64:	3708      	adds	r7, #8
    7e66:	2b07      	cmp	r3, #7
    7e68:	dd00      	ble.n	7e6c <_vfprintf_r+0x12bc>
    7e6a:	e0ad      	b.n	7fc8 <_vfprintf_r+0x1418>
    7e6c:	2d00      	cmp	r5, #0
    7e6e:	d107      	bne.n	7e80 <_vfprintf_r+0x12d0>
    7e70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7e72:	2a00      	cmp	r2, #0
    7e74:	d104      	bne.n	7e80 <_vfprintf_r+0x12d0>
    7e76:	9b07      	ldr	r3, [sp, #28]
    7e78:	07db      	lsls	r3, r3, #31
    7e7a:	d401      	bmi.n	7e80 <_vfprintf_r+0x12d0>
    7e7c:	f7ff f806 	bl	6e8c <_vfprintf_r+0x2dc>
    7e80:	981c      	ldr	r0, [sp, #112]	; 0x70
    7e82:	68a3      	ldr	r3, [r4, #8]
    7e84:	9e18      	ldr	r6, [sp, #96]	; 0x60
    7e86:	181b      	adds	r3, r3, r0
    7e88:	603e      	str	r6, [r7, #0]
    7e8a:	6078      	str	r0, [r7, #4]
    7e8c:	60a3      	str	r3, [r4, #8]
    7e8e:	6863      	ldr	r3, [r4, #4]
    7e90:	3301      	adds	r3, #1
    7e92:	6063      	str	r3, [r4, #4]
    7e94:	3708      	adds	r7, #8
    7e96:	2b07      	cmp	r3, #7
    7e98:	dd00      	ble.n	7e9c <_vfprintf_r+0x12ec>
    7e9a:	e0b5      	b.n	8008 <_vfprintf_r+0x1458>
    7e9c:	426d      	negs	r5, r5
    7e9e:	2d00      	cmp	r5, #0
    7ea0:	dc00      	bgt.n	7ea4 <_vfprintf_r+0x12f4>
    7ea2:	e0f4      	b.n	808e <_vfprintf_r+0x14de>
    7ea4:	2d10      	cmp	r5, #16
    7ea6:	dc00      	bgt.n	7eaa <_vfprintf_r+0x12fa>
    7ea8:	e25e      	b.n	8368 <_vfprintf_r+0x17b8>
    7eaa:	4bc7      	ldr	r3, [pc, #796]	; (81c8 <_vfprintf_r+0x1618>)
    7eac:	2010      	movs	r0, #16
    7eae:	4698      	mov	r8, r3
    7eb0:	1c06      	adds	r6, r0, #0
    7eb2:	1c3b      	adds	r3, r7, #0
    7eb4:	4446      	add	r6, r8
    7eb6:	4681      	mov	r9, r0
    7eb8:	465f      	mov	r7, fp
    7eba:	e003      	b.n	7ec4 <_vfprintf_r+0x1314>
    7ebc:	3d10      	subs	r5, #16
    7ebe:	2d10      	cmp	r5, #16
    7ec0:	dc00      	bgt.n	7ec4 <_vfprintf_r+0x1314>
    7ec2:	e0c9      	b.n	8058 <_vfprintf_r+0x14a8>
    7ec4:	68a2      	ldr	r2, [r4, #8]
    7ec6:	4649      	mov	r1, r9
    7ec8:	3210      	adds	r2, #16
    7eca:	601e      	str	r6, [r3, #0]
    7ecc:	6059      	str	r1, [r3, #4]
    7ece:	60a2      	str	r2, [r4, #8]
    7ed0:	6862      	ldr	r2, [r4, #4]
    7ed2:	3201      	adds	r2, #1
    7ed4:	6062      	str	r2, [r4, #4]
    7ed6:	3308      	adds	r3, #8
    7ed8:	2a07      	cmp	r2, #7
    7eda:	ddef      	ble.n	7ebc <_vfprintf_r+0x130c>
    7edc:	9809      	ldr	r0, [sp, #36]	; 0x24
    7ede:	1c39      	adds	r1, r7, #0
    7ee0:	1c22      	adds	r2, r4, #0
    7ee2:	f003 fca5 	bl	b830 <__sprint_r>
    7ee6:	2800      	cmp	r0, #0
    7ee8:	d001      	beq.n	7eee <_vfprintf_r+0x133e>
    7eea:	f7ff fc09 	bl	7700 <_vfprintf_r+0xb50>
    7eee:	4bb7      	ldr	r3, [pc, #732]	; (81cc <_vfprintf_r+0x161c>)
    7ef0:	446b      	add	r3, sp
    7ef2:	e7e3      	b.n	7ebc <_vfprintf_r+0x130c>
    7ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
    7ef6:	4659      	mov	r1, fp
    7ef8:	1c22      	adds	r2, r4, #0
    7efa:	f003 fc99 	bl	b830 <__sprint_r>
    7efe:	2800      	cmp	r0, #0
    7f00:	d001      	beq.n	7f06 <_vfprintf_r+0x1356>
    7f02:	f7ff f84d 	bl	6fa0 <_vfprintf_r+0x3f0>
    7f06:	4eb1      	ldr	r6, [pc, #708]	; (81cc <_vfprintf_r+0x161c>)
    7f08:	4fb1      	ldr	r7, [pc, #708]	; (81d0 <_vfprintf_r+0x1620>)
    7f0a:	446e      	add	r6, sp
    7f0c:	446f      	add	r7, sp
    7f0e:	46b1      	mov	r9, r6
    7f10:	f7ff fbc2 	bl	7698 <_vfprintf_r+0xae8>
    7f14:	9b07      	ldr	r3, [sp, #28]
    7f16:	3101      	adds	r1, #1
    7f18:	4303      	orrs	r3, r0
    7f1a:	9108      	str	r1, [sp, #32]
    7f1c:	9307      	str	r3, [sp, #28]
    7f1e:	780b      	ldrb	r3, [r1, #0]
    7f20:	f7fe fec9 	bl	6cb6 <_vfprintf_r+0x106>
    7f24:	980c      	ldr	r0, [sp, #48]	; 0x30
    7f26:	43c3      	mvns	r3, r0
    7f28:	17db      	asrs	r3, r3, #31
    7f2a:	4018      	ands	r0, r3
    7f2c:	4649      	mov	r1, r9
    7f2e:	2300      	movs	r3, #0
    7f30:	900a      	str	r0, [sp, #40]	; 0x28
    7f32:	780a      	ldrb	r2, [r1, #0]
    7f34:	970f      	str	r7, [sp, #60]	; 0x3c
    7f36:	9314      	str	r3, [sp, #80]	; 0x50
    7f38:	9319      	str	r3, [sp, #100]	; 0x64
    7f3a:	f7ff f8df 	bl	70fc <_vfprintf_r+0x54c>
    7f3e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    7f40:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7f42:	683f      	ldr	r7, [r7, #0]
    7f44:	3104      	adds	r1, #4
    7f46:	1c3a      	adds	r2, r7, #0
    7f48:	1e53      	subs	r3, r2, #1
    7f4a:	419a      	sbcs	r2, r3
    7f4c:	9710      	str	r7, [sp, #64]	; 0x40
    7f4e:	9011      	str	r0, [sp, #68]	; 0x44
    7f50:	910f      	str	r1, [sp, #60]	; 0x3c
    7f52:	1c03      	adds	r3, r0, #0
    7f54:	f7ff f943 	bl	71de <_vfprintf_r+0x62e>
    7f58:	9f16      	ldr	r7, [sp, #88]	; 0x58
    7f5a:	2f47      	cmp	r7, #71	; 0x47
    7f5c:	dd00      	ble.n	7f60 <_vfprintf_r+0x13b0>
    7f5e:	e119      	b.n	8194 <_vfprintf_r+0x15e4>
    7f60:	489c      	ldr	r0, [pc, #624]	; (81d4 <_vfprintf_r+0x1624>)
    7f62:	9013      	str	r0, [sp, #76]	; 0x4c
    7f64:	9a07      	ldr	r2, [sp, #28]
    7f66:	2380      	movs	r3, #128	; 0x80
    7f68:	439a      	bics	r2, r3
    7f6a:	2603      	movs	r6, #3
    7f6c:	2700      	movs	r7, #0
    7f6e:	464b      	mov	r3, r9
    7f70:	9207      	str	r2, [sp, #28]
    7f72:	960a      	str	r6, [sp, #40]	; 0x28
    7f74:	781a      	ldrb	r2, [r3, #0]
    7f76:	960c      	str	r6, [sp, #48]	; 0x30
    7f78:	9714      	str	r7, [sp, #80]	; 0x50
    7f7a:	9719      	str	r7, [sp, #100]	; 0x64
    7f7c:	f7ff f8be 	bl	70fc <_vfprintf_r+0x54c>
    7f80:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7f82:	680b      	ldr	r3, [r1, #0]
    7f84:	3104      	adds	r1, #4
    7f86:	9310      	str	r3, [sp, #64]	; 0x40
    7f88:	17db      	asrs	r3, r3, #31
    7f8a:	9311      	str	r3, [sp, #68]	; 0x44
    7f8c:	910f      	str	r1, [sp, #60]	; 0x3c
    7f8e:	f7ff f86c 	bl	706a <_vfprintf_r+0x4ba>
    7f92:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7f94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7f96:	680b      	ldr	r3, [r1, #0]
    7f98:	3104      	adds	r1, #4
    7f9a:	601a      	str	r2, [r3, #0]
    7f9c:	910f      	str	r1, [sp, #60]	; 0x3c
    7f9e:	f7fe fe51 	bl	6c44 <_vfprintf_r+0x94>
    7fa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7fa4:	6812      	ldr	r2, [r2, #0]
    7fa6:	9311      	str	r3, [sp, #68]	; 0x44
    7fa8:	9210      	str	r2, [sp, #64]	; 0x40
    7faa:	e4d0      	b.n	794e <_vfprintf_r+0xd9e>
    7fac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7fae:	6812      	ldr	r2, [r2, #0]
    7fb0:	9311      	str	r3, [sp, #68]	; 0x44
    7fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7fb4:	3304      	adds	r3, #4
    7fb6:	9210      	str	r2, [sp, #64]	; 0x40
    7fb8:	930f      	str	r3, [sp, #60]	; 0x3c
    7fba:	f7ff f8f8 	bl	71ae <_vfprintf_r+0x5fe>
    7fbe:	222d      	movs	r2, #45	; 0x2d
    7fc0:	464b      	mov	r3, r9
    7fc2:	701a      	strb	r2, [r3, #0]
    7fc4:	f7ff f8c7 	bl	7156 <_vfprintf_r+0x5a6>
    7fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
    7fca:	4659      	mov	r1, fp
    7fcc:	1c22      	adds	r2, r4, #0
    7fce:	f003 fc2f 	bl	b830 <__sprint_r>
    7fd2:	2800      	cmp	r0, #0
    7fd4:	d001      	beq.n	7fda <_vfprintf_r+0x142a>
    7fd6:	f7fe ffe3 	bl	6fa0 <_vfprintf_r+0x3f0>
    7fda:	21ad      	movs	r1, #173	; 0xad
    7fdc:	00c9      	lsls	r1, r1, #3
    7fde:	4f7b      	ldr	r7, [pc, #492]	; (81cc <_vfprintf_r+0x161c>)
    7fe0:	4469      	add	r1, sp
    7fe2:	680d      	ldr	r5, [r1, #0]
    7fe4:	446f      	add	r7, sp
    7fe6:	e741      	b.n	7e6c <_vfprintf_r+0x12bc>
    7fe8:	9809      	ldr	r0, [sp, #36]	; 0x24
    7fea:	4659      	mov	r1, fp
    7fec:	1c22      	adds	r2, r4, #0
    7fee:	f003 fc1f 	bl	b830 <__sprint_r>
    7ff2:	2800      	cmp	r0, #0
    7ff4:	d001      	beq.n	7ffa <_vfprintf_r+0x144a>
    7ff6:	f7fe ffd3 	bl	6fa0 <_vfprintf_r+0x3f0>
    7ffa:	4d74      	ldr	r5, [pc, #464]	; (81cc <_vfprintf_r+0x161c>)
    7ffc:	4f74      	ldr	r7, [pc, #464]	; (81d0 <_vfprintf_r+0x1620>)
    7ffe:	446d      	add	r5, sp
    8000:	446f      	add	r7, sp
    8002:	46a9      	mov	r9, r5
    8004:	f7ff fb48 	bl	7698 <_vfprintf_r+0xae8>
    8008:	9809      	ldr	r0, [sp, #36]	; 0x24
    800a:	4659      	mov	r1, fp
    800c:	1c22      	adds	r2, r4, #0
    800e:	f003 fc0f 	bl	b830 <__sprint_r>
    8012:	2800      	cmp	r0, #0
    8014:	d001      	beq.n	801a <_vfprintf_r+0x146a>
    8016:	f7fe ffc3 	bl	6fa0 <_vfprintf_r+0x3f0>
    801a:	21ad      	movs	r1, #173	; 0xad
    801c:	00c9      	lsls	r1, r1, #3
    801e:	4f6b      	ldr	r7, [pc, #428]	; (81cc <_vfprintf_r+0x161c>)
    8020:	4469      	add	r1, sp
    8022:	680d      	ldr	r5, [r1, #0]
    8024:	446f      	add	r7, sp
    8026:	e739      	b.n	7e9c <_vfprintf_r+0x12ec>
    8028:	1c2f      	adds	r7, r5, #0
    802a:	3708      	adds	r7, #8
    802c:	46a9      	mov	r9, r5
    802e:	f7ff fb33 	bl	7698 <_vfprintf_r+0xae8>
    8032:	4869      	ldr	r0, [pc, #420]	; (81d8 <_vfprintf_r+0x1628>)
    8034:	9013      	str	r0, [sp, #76]	; 0x4c
    8036:	f7ff f895 	bl	7164 <_vfprintf_r+0x5b4>
    803a:	9809      	ldr	r0, [sp, #36]	; 0x24
    803c:	4659      	mov	r1, fp
    803e:	1c22      	adds	r2, r4, #0
    8040:	f003 fbf6 	bl	b830 <__sprint_r>
    8044:	2800      	cmp	r0, #0
    8046:	d001      	beq.n	804c <_vfprintf_r+0x149c>
    8048:	f7fe ffaa 	bl	6fa0 <_vfprintf_r+0x3f0>
    804c:	4b5f      	ldr	r3, [pc, #380]	; (81cc <_vfprintf_r+0x161c>)
    804e:	446b      	add	r3, sp
    8050:	f7ff fa4d 	bl	74ee <_vfprintf_r+0x93e>
    8054:	1c3b      	adds	r3, r7, #0
    8056:	e65e      	b.n	7d16 <_vfprintf_r+0x1166>
    8058:	46bb      	mov	fp, r7
    805a:	1c1f      	adds	r7, r3, #0
    805c:	2210      	movs	r2, #16
    805e:	1c13      	adds	r3, r2, #0
    8060:	4443      	add	r3, r8
    8062:	603b      	str	r3, [r7, #0]
    8064:	68a3      	ldr	r3, [r4, #8]
    8066:	18eb      	adds	r3, r5, r3
    8068:	607d      	str	r5, [r7, #4]
    806a:	60a3      	str	r3, [r4, #8]
    806c:	6863      	ldr	r3, [r4, #4]
    806e:	3301      	adds	r3, #1
    8070:	6063      	str	r3, [r4, #4]
    8072:	3708      	adds	r7, #8
    8074:	2b07      	cmp	r3, #7
    8076:	dd0a      	ble.n	808e <_vfprintf_r+0x14de>
    8078:	9809      	ldr	r0, [sp, #36]	; 0x24
    807a:	4659      	mov	r1, fp
    807c:	1c22      	adds	r2, r4, #0
    807e:	f003 fbd7 	bl	b830 <__sprint_r>
    8082:	2800      	cmp	r0, #0
    8084:	d001      	beq.n	808a <_vfprintf_r+0x14da>
    8086:	f7fe ff8b 	bl	6fa0 <_vfprintf_r+0x3f0>
    808a:	4f50      	ldr	r7, [pc, #320]	; (81cc <_vfprintf_r+0x161c>)
    808c:	446f      	add	r7, sp
    808e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8090:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8092:	603b      	str	r3, [r7, #0]
    8094:	f7fe feee 	bl	6e74 <_vfprintf_r+0x2c4>
    8098:	9813      	ldr	r0, [sp, #76]	; 0x4c
    809a:	f7fd fa9d 	bl	55d8 <strlen>
    809e:	43c3      	mvns	r3, r0
    80a0:	17db      	asrs	r3, r3, #31
    80a2:	900c      	str	r0, [sp, #48]	; 0x30
    80a4:	464e      	mov	r6, r9
    80a6:	4018      	ands	r0, r3
    80a8:	970f      	str	r7, [sp, #60]	; 0x3c
    80aa:	2700      	movs	r7, #0
    80ac:	900a      	str	r0, [sp, #40]	; 0x28
    80ae:	7832      	ldrb	r2, [r6, #0]
    80b0:	9714      	str	r7, [sp, #80]	; 0x50
    80b2:	9719      	str	r7, [sp, #100]	; 0x64
    80b4:	f7ff f822 	bl	70fc <_vfprintf_r+0x54c>
    80b8:	4a43      	ldr	r2, [pc, #268]	; (81c8 <_vfprintf_r+0x1618>)
    80ba:	1c2b      	adds	r3, r5, #0
    80bc:	3308      	adds	r3, #8
    80be:	4690      	mov	r8, r2
    80c0:	f7fe fe50 	bl	6d64 <_vfprintf_r+0x1b4>
    80c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    80c6:	4659      	mov	r1, fp
    80c8:	1c22      	adds	r2, r4, #0
    80ca:	f003 fbb1 	bl	b830 <__sprint_r>
    80ce:	2800      	cmp	r0, #0
    80d0:	d001      	beq.n	80d6 <_vfprintf_r+0x1526>
    80d2:	f7fe ff65 	bl	6fa0 <_vfprintf_r+0x3f0>
    80d6:	4f3d      	ldr	r7, [pc, #244]	; (81cc <_vfprintf_r+0x161c>)
    80d8:	446f      	add	r7, sp
    80da:	f7ff fb59 	bl	7790 <_vfprintf_r+0xbe0>
    80de:	9809      	ldr	r0, [sp, #36]	; 0x24
    80e0:	4659      	mov	r1, fp
    80e2:	1c22      	adds	r2, r4, #0
    80e4:	f003 fba4 	bl	b830 <__sprint_r>
    80e8:	2800      	cmp	r0, #0
    80ea:	d001      	beq.n	80f0 <_vfprintf_r+0x1540>
    80ec:	f7fe ff58 	bl	6fa0 <_vfprintf_r+0x3f0>
    80f0:	4936      	ldr	r1, [pc, #216]	; (81cc <_vfprintf_r+0x161c>)
    80f2:	4f37      	ldr	r7, [pc, #220]	; (81d0 <_vfprintf_r+0x1620>)
    80f4:	4469      	add	r1, sp
    80f6:	446f      	add	r7, sp
    80f8:	4689      	mov	r9, r1
    80fa:	f7ff facd 	bl	7698 <_vfprintf_r+0xae8>
    80fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8100:	1ae3      	subs	r3, r4, r3
    8102:	930c      	str	r3, [sp, #48]	; 0x30
    8104:	f7fe fff0 	bl	70e8 <_vfprintf_r+0x538>
    8108:	9809      	ldr	r0, [sp, #36]	; 0x24
    810a:	4659      	mov	r1, fp
    810c:	1c22      	adds	r2, r4, #0
    810e:	f003 fb8f 	bl	b830 <__sprint_r>
    8112:	2800      	cmp	r0, #0
    8114:	d001      	beq.n	811a <_vfprintf_r+0x156a>
    8116:	f7fe ff43 	bl	6fa0 <_vfprintf_r+0x3f0>
    811a:	27ad      	movs	r7, #173	; 0xad
    811c:	00ff      	lsls	r7, r7, #3
    811e:	446f      	add	r7, sp
    8120:	6839      	ldr	r1, [r7, #0]
    8122:	980e      	ldr	r0, [sp, #56]	; 0x38
    8124:	4b29      	ldr	r3, [pc, #164]	; (81cc <_vfprintf_r+0x161c>)
    8126:	1a41      	subs	r1, r0, r1
    8128:	446b      	add	r3, sp
    812a:	e618      	b.n	7d5e <_vfprintf_r+0x11ae>
    812c:	9809      	ldr	r0, [sp, #36]	; 0x24
    812e:	4659      	mov	r1, fp
    8130:	1c22      	adds	r2, r4, #0
    8132:	f003 fb7d 	bl	b830 <__sprint_r>
    8136:	2800      	cmp	r0, #0
    8138:	d001      	beq.n	813e <_vfprintf_r+0x158e>
    813a:	f7fe ff31 	bl	6fa0 <_vfprintf_r+0x3f0>
    813e:	4b23      	ldr	r3, [pc, #140]	; (81cc <_vfprintf_r+0x161c>)
    8140:	446b      	add	r3, sp
    8142:	e5e8      	b.n	7d16 <_vfprintf_r+0x1166>
    8144:	960c      	str	r6, [sp, #48]	; 0x30
    8146:	2e06      	cmp	r6, #6
    8148:	d90a      	bls.n	8160 <_vfprintf_r+0x15b0>
    814a:	2106      	movs	r1, #6
    814c:	910c      	str	r1, [sp, #48]	; 0x30
    814e:	910a      	str	r1, [sp, #40]	; 0x28
    8150:	4b22      	ldr	r3, [pc, #136]	; (81dc <_vfprintf_r+0x162c>)
    8152:	2200      	movs	r2, #0
    8154:	970f      	str	r7, [sp, #60]	; 0x3c
    8156:	9214      	str	r2, [sp, #80]	; 0x50
    8158:	9219      	str	r2, [sp, #100]	; 0x64
    815a:	9313      	str	r3, [sp, #76]	; 0x4c
    815c:	f7fe fdc6 	bl	6cec <_vfprintf_r+0x13c>
    8160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8162:	43d3      	mvns	r3, r2
    8164:	17db      	asrs	r3, r3, #31
    8166:	401a      	ands	r2, r3
    8168:	920a      	str	r2, [sp, #40]	; 0x28
    816a:	e7f1      	b.n	8150 <_vfprintf_r+0x15a0>
    816c:	9809      	ldr	r0, [sp, #36]	; 0x24
    816e:	4651      	mov	r1, sl
    8170:	f000 f986 	bl	8480 <__swsetup_r>
    8174:	2800      	cmp	r0, #0
    8176:	d001      	beq.n	817c <_vfprintf_r+0x15cc>
    8178:	f7fe ff17 	bl	6faa <_vfprintf_r+0x3fa>
    817c:	4651      	mov	r1, sl
    817e:	898a      	ldrh	r2, [r1, #12]
    8180:	1c13      	adds	r3, r2, #0
    8182:	f7fe fd49 	bl	6c18 <_vfprintf_r+0x68>
    8186:	4e10      	ldr	r6, [pc, #64]	; (81c8 <_vfprintf_r+0x1618>)
    8188:	46b0      	mov	r8, r6
    818a:	f7fe fec1 	bl	6f10 <_vfprintf_r+0x360>
    818e:	46b2      	mov	sl, r6
    8190:	2303      	movs	r3, #3
    8192:	e4a0      	b.n	7ad6 <_vfprintf_r+0xf26>
    8194:	4912      	ldr	r1, [pc, #72]	; (81e0 <_vfprintf_r+0x1630>)
    8196:	9113      	str	r1, [sp, #76]	; 0x4c
    8198:	e6e4      	b.n	7f64 <_vfprintf_r+0x13b4>
    819a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    819c:	990d      	ldr	r1, [sp, #52]	; 0x34
    819e:	6803      	ldr	r3, [r0, #0]
    81a0:	3004      	adds	r0, #4
    81a2:	6019      	str	r1, [r3, #0]
    81a4:	900f      	str	r0, [sp, #60]	; 0x3c
    81a6:	f7fe fd4d 	bl	6c44 <_vfprintf_r+0x94>
    81aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    81ac:	43fb      	mvns	r3, r7
    81ae:	17db      	asrs	r3, r3, #31
    81b0:	222d      	movs	r2, #45	; 0x2d
    81b2:	464e      	mov	r6, r9
    81b4:	401f      	ands	r7, r3
    81b6:	2000      	movs	r0, #0
    81b8:	7032      	strb	r2, [r6, #0]
    81ba:	970a      	str	r7, [sp, #40]	; 0x28
    81bc:	9014      	str	r0, [sp, #80]	; 0x50
    81be:	f7fe ffa0 	bl	7102 <_vfprintf_r+0x552>
    81c2:	46c0      	nop			; (mov r8, r8)
    81c4:	0000e938 	.word	0x0000e938
    81c8:	0000e024 	.word	0x0000e024
    81cc:	000004e4 	.word	0x000004e4
    81d0:	000004ec 	.word	0x000004ec
    81d4:	0000e900 	.word	0x0000e900
    81d8:	0000e8fc 	.word	0x0000e8fc
    81dc:	0000e930 	.word	0x0000e930
    81e0:	0000e904 	.word	0x0000e904
    81e4:	9f16      	ldr	r7, [sp, #88]	; 0x58
    81e6:	2f66      	cmp	r7, #102	; 0x66
    81e8:	d000      	beq.n	81ec <_vfprintf_r+0x163c>
    81ea:	e07f      	b.n	82ec <_vfprintf_r+0x173c>
    81ec:	23ad      	movs	r3, #173	; 0xad
    81ee:	00db      	lsls	r3, r3, #3
    81f0:	446b      	add	r3, sp
    81f2:	681a      	ldr	r2, [r3, #0]
    81f4:	920c      	str	r2, [sp, #48]	; 0x30
    81f6:	2a00      	cmp	r2, #0
    81f8:	dc00      	bgt.n	81fc <_vfprintf_r+0x164c>
    81fa:	e091      	b.n	8320 <_vfprintf_r+0x1770>
    81fc:	2e00      	cmp	r6, #0
    81fe:	d102      	bne.n	8206 <_vfprintf_r+0x1656>
    8200:	9f07      	ldr	r7, [sp, #28]
    8202:	07ff      	lsls	r7, r7, #31
    8204:	d502      	bpl.n	820c <_vfprintf_r+0x165c>
    8206:	1c53      	adds	r3, r2, #1
    8208:	199b      	adds	r3, r3, r6
    820a:	930c      	str	r3, [sp, #48]	; 0x30
    820c:	4646      	mov	r6, r8
    820e:	9219      	str	r2, [sp, #100]	; 0x64
    8210:	9616      	str	r6, [sp, #88]	; 0x58
    8212:	e4f5      	b.n	7c00 <_vfprintf_r+0x1050>
    8214:	20ac      	movs	r0, #172	; 0xac
    8216:	00c0      	lsls	r0, r0, #3
    8218:	4468      	add	r0, sp
    821a:	6803      	ldr	r3, [r0, #0]
    821c:	429f      	cmp	r7, r3
    821e:	d800      	bhi.n	8222 <_vfprintf_r+0x1672>
    8220:	e494      	b.n	7b4c <_vfprintf_r+0xf9c>
    8222:	2230      	movs	r2, #48	; 0x30
    8224:	21ac      	movs	r1, #172	; 0xac
    8226:	00c9      	lsls	r1, r1, #3
    8228:	701a      	strb	r2, [r3, #0]
    822a:	4469      	add	r1, sp
    822c:	3301      	adds	r3, #1
    822e:	600b      	str	r3, [r1, #0]
    8230:	429f      	cmp	r7, r3
    8232:	d8f7      	bhi.n	8224 <_vfprintf_r+0x1674>
    8234:	1c3b      	adds	r3, r7, #0
    8236:	e489      	b.n	7b4c <_vfprintf_r+0xf9c>
    8238:	494f      	ldr	r1, [pc, #316]	; (8378 <_vfprintf_r+0x17c8>)
    823a:	1c2b      	adds	r3, r5, #0
    823c:	4688      	mov	r8, r1
    823e:	3508      	adds	r5, #8
    8240:	f7ff f9cd 	bl	75de <_vfprintf_r+0xa2e>
    8244:	960a      	str	r6, [sp, #40]	; 0x28
    8246:	970f      	str	r7, [sp, #60]	; 0x3c
    8248:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    824a:	464e      	mov	r6, r9
    824c:	7832      	ldrb	r2, [r6, #0]
    824e:	970c      	str	r7, [sp, #48]	; 0x30
    8250:	9014      	str	r0, [sp, #80]	; 0x50
    8252:	9019      	str	r0, [sp, #100]	; 0x64
    8254:	f7fe ff52 	bl	70fc <_vfprintf_r+0x54c>
    8258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    825a:	429a      	cmp	r2, r3
    825c:	db21      	blt.n	82a2 <_vfprintf_r+0x16f2>
    825e:	9f07      	ldr	r7, [sp, #28]
    8260:	2667      	movs	r6, #103	; 0x67
    8262:	46b0      	mov	r8, r6
    8264:	07ff      	lsls	r7, r7, #31
    8266:	d5d1      	bpl.n	820c <_vfprintf_r+0x165c>
    8268:	1c50      	adds	r0, r2, #1
    826a:	900c      	str	r0, [sp, #48]	; 0x30
    826c:	e7ce      	b.n	820c <_vfprintf_r+0x165c>
    826e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8270:	3b47      	subs	r3, #71	; 0x47
    8272:	2606      	movs	r6, #6
    8274:	930c      	str	r3, [sp, #48]	; 0x30
    8276:	e40b      	b.n	7a90 <_vfprintf_r+0xee0>
    8278:	2330      	movs	r3, #48	; 0x30
    827a:	4651      	mov	r1, sl
    827c:	18f6      	adds	r6, r6, r3
    827e:	708b      	strb	r3, [r1, #2]
    8280:	70ce      	strb	r6, [r1, #3]
    8282:	493e      	ldr	r1, [pc, #248]	; (837c <_vfprintf_r+0x17cc>)
    8284:	4469      	add	r1, sp
    8286:	e4ac      	b.n	7be2 <_vfprintf_r+0x1032>
    8288:	981b      	ldr	r0, [sp, #108]	; 0x6c
    828a:	1c01      	adds	r1, r0, #0
    828c:	2080      	movs	r0, #128	; 0x80
    828e:	0600      	lsls	r0, r0, #24
    8290:	1809      	adds	r1, r1, r0
    8292:	222d      	movs	r2, #45	; 0x2d
    8294:	910a      	str	r1, [sp, #40]	; 0x28
    8296:	9214      	str	r2, [sp, #80]	; 0x50
    8298:	f7ff fc07 	bl	7aaa <_vfprintf_r+0xefa>
    829c:	46b2      	mov	sl, r6
    829e:	2302      	movs	r3, #2
    82a0:	e419      	b.n	7ad6 <_vfprintf_r+0xf26>
    82a2:	2301      	movs	r3, #1
    82a4:	2a00      	cmp	r2, #0
    82a6:	dc01      	bgt.n	82ac <_vfprintf_r+0x16fc>
    82a8:	18db      	adds	r3, r3, r3
    82aa:	1a9b      	subs	r3, r3, r2
    82ac:	990e      	ldr	r1, [sp, #56]	; 0x38
    82ae:	18c9      	adds	r1, r1, r3
    82b0:	2367      	movs	r3, #103	; 0x67
    82b2:	910c      	str	r1, [sp, #48]	; 0x30
    82b4:	4698      	mov	r8, r3
    82b6:	e7a9      	b.n	820c <_vfprintf_r+0x165c>
    82b8:	22ac      	movs	r2, #172	; 0xac
    82ba:	00d2      	lsls	r2, r2, #3
    82bc:	446a      	add	r2, sp
    82be:	6813      	ldr	r3, [r2, #0]
    82c0:	e444      	b.n	7b4c <_vfprintf_r+0xf9c>
    82c2:	981a      	ldr	r0, [sp, #104]	; 0x68
    82c4:	990a      	ldr	r1, [sp, #40]	; 0x28
    82c6:	4b2b      	ldr	r3, [pc, #172]	; (8374 <_vfprintf_r+0x17c4>)
    82c8:	4a29      	ldr	r2, [pc, #164]	; (8370 <_vfprintf_r+0x17c0>)
    82ca:	f005 fca3 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    82ce:	2800      	cmp	r0, #0
    82d0:	d000      	beq.n	82d4 <_vfprintf_r+0x1724>
    82d2:	e428      	b.n	7b26 <_vfprintf_r+0xf76>
    82d4:	20ad      	movs	r0, #173	; 0xad
    82d6:	2301      	movs	r3, #1
    82d8:	4652      	mov	r2, sl
    82da:	00c0      	lsls	r0, r0, #3
    82dc:	1a9b      	subs	r3, r3, r2
    82de:	4468      	add	r0, sp
    82e0:	6003      	str	r3, [r0, #0]
    82e2:	e420      	b.n	7b26 <_vfprintf_r+0xf76>
    82e4:	232d      	movs	r3, #45	; 0x2d
    82e6:	4276      	negs	r6, r6
    82e8:	7053      	strb	r3, [r2, #1]
    82ea:	e457      	b.n	7b9c <_vfprintf_r+0xfec>
    82ec:	20ad      	movs	r0, #173	; 0xad
    82ee:	00c0      	lsls	r0, r0, #3
    82f0:	4468      	add	r0, sp
    82f2:	6802      	ldr	r2, [r0, #0]
    82f4:	e441      	b.n	7b7a <_vfprintf_r+0xfca>
    82f6:	4f20      	ldr	r7, [pc, #128]	; (8378 <_vfprintf_r+0x17c8>)
    82f8:	46b8      	mov	r8, r7
    82fa:	f7ff fb96 	bl	7a2a <_vfprintf_r+0xe7a>
    82fe:	9f07      	ldr	r7, [sp, #28]
    8300:	2301      	movs	r3, #1
    8302:	401f      	ands	r7, r3
    8304:	9719      	str	r7, [sp, #100]	; 0x64
    8306:	d100      	bne.n	830a <_vfprintf_r+0x175a>
    8308:	e47a      	b.n	7c00 <_vfprintf_r+0x1050>
    830a:	e474      	b.n	7bf6 <_vfprintf_r+0x1046>
    830c:	481a      	ldr	r0, [pc, #104]	; (8378 <_vfprintf_r+0x17c8>)
    830e:	1c1f      	adds	r7, r3, #0
    8310:	3708      	adds	r7, #8
    8312:	4680      	mov	r8, r0
    8314:	e4e7      	b.n	7ce6 <_vfprintf_r+0x1136>
    8316:	4a18      	ldr	r2, [pc, #96]	; (8378 <_vfprintf_r+0x17c8>)
    8318:	1c3b      	adds	r3, r7, #0
    831a:	3308      	adds	r3, #8
    831c:	4690      	mov	r8, r2
    831e:	e4ec      	b.n	7cfa <_vfprintf_r+0x114a>
    8320:	2e00      	cmp	r6, #0
    8322:	d105      	bne.n	8330 <_vfprintf_r+0x1780>
    8324:	9907      	ldr	r1, [sp, #28]
    8326:	2001      	movs	r0, #1
    8328:	900c      	str	r0, [sp, #48]	; 0x30
    832a:	4201      	tst	r1, r0
    832c:	d100      	bne.n	8330 <_vfprintf_r+0x1780>
    832e:	e76d      	b.n	820c <_vfprintf_r+0x165c>
    8330:	3602      	adds	r6, #2
    8332:	960c      	str	r6, [sp, #48]	; 0x30
    8334:	e76a      	b.n	820c <_vfprintf_r+0x165c>
    8336:	4e10      	ldr	r6, [pc, #64]	; (8378 <_vfprintf_r+0x17c8>)
    8338:	1c1f      	adds	r7, r3, #0
    833a:	3708      	adds	r7, #8
    833c:	46b0      	mov	r8, r6
    833e:	e55f      	b.n	7e00 <_vfprintf_r+0x1250>
    8340:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8342:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    8344:	680e      	ldr	r6, [r1, #0]
    8346:	3704      	adds	r7, #4
    8348:	2e00      	cmp	r6, #0
    834a:	db01      	blt.n	8350 <_vfprintf_r+0x17a0>
    834c:	f7fe ffcc 	bl	72e8 <_vfprintf_r+0x738>
    8350:	9e08      	ldr	r6, [sp, #32]
    8352:	7833      	ldrb	r3, [r6, #0]
    8354:	2601      	movs	r6, #1
    8356:	970f      	str	r7, [sp, #60]	; 0x3c
    8358:	4276      	negs	r6, r6
    835a:	f7fe fcac 	bl	6cb6 <_vfprintf_r+0x106>
    835e:	2301      	movs	r3, #1
    8360:	425b      	negs	r3, r3
    8362:	930d      	str	r3, [sp, #52]	; 0x34
    8364:	f7fe fe5f 	bl	7026 <_vfprintf_r+0x476>
    8368:	4a03      	ldr	r2, [pc, #12]	; (8378 <_vfprintf_r+0x17c8>)
    836a:	4690      	mov	r8, r2
    836c:	e676      	b.n	805c <_vfprintf_r+0x14ac>
    836e:	46c0      	nop			; (mov r8, r8)
	...
    8378:	0000e024 	.word	0x0000e024
    837c:	0000055c 	.word	0x0000055c

00008380 <vfprintf>:
    8380:	b538      	push	{r3, r4, r5, lr}
    8382:	1c13      	adds	r3, r2, #0
    8384:	4a05      	ldr	r2, [pc, #20]	; (839c <vfprintf+0x1c>)
    8386:	1c05      	adds	r5, r0, #0
    8388:	1c0c      	adds	r4, r1, #0
    838a:	6810      	ldr	r0, [r2, #0]
    838c:	1c29      	adds	r1, r5, #0
    838e:	1c22      	adds	r2, r4, #0
    8390:	f7fe fc0e 	bl	6bb0 <_vfprintf_r>
    8394:	bc38      	pop	{r3, r4, r5}
    8396:	bc02      	pop	{r1}
    8398:	4708      	bx	r1
    839a:	46c0      	nop			; (mov r8, r8)
    839c:	40000000 	.word	0x40000000

000083a0 <__swbuf_r>:
    83a0:	b570      	push	{r4, r5, r6, lr}
    83a2:	1c06      	adds	r6, r0, #0
    83a4:	1c0d      	adds	r5, r1, #0
    83a6:	1c14      	adds	r4, r2, #0
    83a8:	2800      	cmp	r0, #0
    83aa:	d002      	beq.n	83b2 <__swbuf_r+0x12>
    83ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    83ae:	2b00      	cmp	r3, #0
    83b0:	d034      	beq.n	841c <__swbuf_r+0x7c>
    83b2:	69a3      	ldr	r3, [r4, #24]
    83b4:	89a2      	ldrh	r2, [r4, #12]
    83b6:	60a3      	str	r3, [r4, #8]
    83b8:	1c13      	adds	r3, r2, #0
    83ba:	0711      	lsls	r1, r2, #28
    83bc:	d524      	bpl.n	8408 <__swbuf_r+0x68>
    83be:	6921      	ldr	r1, [r4, #16]
    83c0:	2900      	cmp	r1, #0
    83c2:	d021      	beq.n	8408 <__swbuf_r+0x68>
    83c4:	2080      	movs	r0, #128	; 0x80
    83c6:	0180      	lsls	r0, r0, #6
    83c8:	4203      	tst	r3, r0
    83ca:	d016      	beq.n	83fa <__swbuf_r+0x5a>
    83cc:	6823      	ldr	r3, [r4, #0]
    83ce:	1a5a      	subs	r2, r3, r1
    83d0:	6961      	ldr	r1, [r4, #20]
    83d2:	428a      	cmp	r2, r1
    83d4:	da31      	bge.n	843a <__swbuf_r+0x9a>
    83d6:	3201      	adds	r2, #1
    83d8:	68a1      	ldr	r1, [r4, #8]
    83da:	062d      	lsls	r5, r5, #24
    83dc:	0e2d      	lsrs	r5, r5, #24
    83de:	3901      	subs	r1, #1
    83e0:	60a1      	str	r1, [r4, #8]
    83e2:	701d      	strb	r5, [r3, #0]
    83e4:	3301      	adds	r3, #1
    83e6:	6023      	str	r3, [r4, #0]
    83e8:	6963      	ldr	r3, [r4, #20]
    83ea:	4293      	cmp	r3, r2
    83ec:	d01c      	beq.n	8428 <__swbuf_r+0x88>
    83ee:	2d0a      	cmp	r5, #10
    83f0:	d017      	beq.n	8422 <__swbuf_r+0x82>
    83f2:	1c28      	adds	r0, r5, #0
    83f4:	bc70      	pop	{r4, r5, r6}
    83f6:	bc02      	pop	{r1}
    83f8:	4708      	bx	r1
    83fa:	4302      	orrs	r2, r0
    83fc:	81a2      	strh	r2, [r4, #12]
    83fe:	4b18      	ldr	r3, [pc, #96]	; (8460 <__swbuf_r+0xc0>)
    8400:	6e62      	ldr	r2, [r4, #100]	; 0x64
    8402:	4013      	ands	r3, r2
    8404:	6663      	str	r3, [r4, #100]	; 0x64
    8406:	e7e1      	b.n	83cc <__swbuf_r+0x2c>
    8408:	1c30      	adds	r0, r6, #0
    840a:	1c21      	adds	r1, r4, #0
    840c:	f000 f838 	bl	8480 <__swsetup_r>
    8410:	2800      	cmp	r0, #0
    8412:	d11b      	bne.n	844c <__swbuf_r+0xac>
    8414:	89a2      	ldrh	r2, [r4, #12]
    8416:	6921      	ldr	r1, [r4, #16]
    8418:	1c13      	adds	r3, r2, #0
    841a:	e7d3      	b.n	83c4 <__swbuf_r+0x24>
    841c:	f7fc f9cc 	bl	47b8 <__sinit>
    8420:	e7c7      	b.n	83b2 <__swbuf_r+0x12>
    8422:	89a3      	ldrh	r3, [r4, #12]
    8424:	07da      	lsls	r2, r3, #31
    8426:	d5e4      	bpl.n	83f2 <__swbuf_r+0x52>
    8428:	1c30      	adds	r0, r6, #0
    842a:	1c21      	adds	r1, r4, #0
    842c:	f7fc f8d0 	bl	45d0 <_fflush_r>
    8430:	2800      	cmp	r0, #0
    8432:	d0de      	beq.n	83f2 <__swbuf_r+0x52>
    8434:	2501      	movs	r5, #1
    8436:	426d      	negs	r5, r5
    8438:	e7db      	b.n	83f2 <__swbuf_r+0x52>
    843a:	1c30      	adds	r0, r6, #0
    843c:	1c21      	adds	r1, r4, #0
    843e:	f7fc f8c7 	bl	45d0 <_fflush_r>
    8442:	2800      	cmp	r0, #0
    8444:	d1f6      	bne.n	8434 <__swbuf_r+0x94>
    8446:	6823      	ldr	r3, [r4, #0]
    8448:	2201      	movs	r2, #1
    844a:	e7c5      	b.n	83d8 <__swbuf_r+0x38>
    844c:	89a3      	ldrh	r3, [r4, #12]
    844e:	2240      	movs	r2, #64	; 0x40
    8450:	4313      	orrs	r3, r2
    8452:	81a3      	strh	r3, [r4, #12]
    8454:	2501      	movs	r5, #1
    8456:	2309      	movs	r3, #9
    8458:	6033      	str	r3, [r6, #0]
    845a:	426d      	negs	r5, r5
    845c:	e7c9      	b.n	83f2 <__swbuf_r+0x52>
    845e:	46c0      	nop			; (mov r8, r8)
    8460:	ffffdfff 	.word	0xffffdfff

00008464 <__swbuf>:
    8464:	b508      	push	{r3, lr}
    8466:	1c0a      	adds	r2, r1, #0
    8468:	4904      	ldr	r1, [pc, #16]	; (847c <__swbuf+0x18>)
    846a:	1c03      	adds	r3, r0, #0
    846c:	6808      	ldr	r0, [r1, #0]
    846e:	1c19      	adds	r1, r3, #0
    8470:	f7ff ff96 	bl	83a0 <__swbuf_r>
    8474:	bc08      	pop	{r3}
    8476:	bc02      	pop	{r1}
    8478:	4708      	bx	r1
    847a:	46c0      	nop			; (mov r8, r8)
    847c:	40000000 	.word	0x40000000

00008480 <__swsetup_r>:
    8480:	b538      	push	{r3, r4, r5, lr}
    8482:	4b2e      	ldr	r3, [pc, #184]	; (853c <__swsetup_r+0xbc>)
    8484:	1c05      	adds	r5, r0, #0
    8486:	6818      	ldr	r0, [r3, #0]
    8488:	1c0c      	adds	r4, r1, #0
    848a:	2800      	cmp	r0, #0
    848c:	d002      	beq.n	8494 <__swsetup_r+0x14>
    848e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    8490:	2b00      	cmp	r3, #0
    8492:	d020      	beq.n	84d6 <__swsetup_r+0x56>
    8494:	89a1      	ldrh	r1, [r4, #12]
    8496:	1c0a      	adds	r2, r1, #0
    8498:	1c0b      	adds	r3, r1, #0
    849a:	0708      	lsls	r0, r1, #28
    849c:	d52c      	bpl.n	84f8 <__swsetup_r+0x78>
    849e:	6922      	ldr	r2, [r4, #16]
    84a0:	2a00      	cmp	r2, #0
    84a2:	d01b      	beq.n	84dc <__swsetup_r+0x5c>
    84a4:	2101      	movs	r1, #1
    84a6:	4019      	ands	r1, r3
    84a8:	d00a      	beq.n	84c0 <__swsetup_r+0x40>
    84aa:	2300      	movs	r3, #0
    84ac:	60a3      	str	r3, [r4, #8]
    84ae:	6963      	ldr	r3, [r4, #20]
    84b0:	2000      	movs	r0, #0
    84b2:	425b      	negs	r3, r3
    84b4:	61a3      	str	r3, [r4, #24]
    84b6:	4282      	cmp	r2, r0
    84b8:	d009      	beq.n	84ce <__swsetup_r+0x4e>
    84ba:	bc38      	pop	{r3, r4, r5}
    84bc:	bc02      	pop	{r1}
    84be:	4708      	bx	r1
    84c0:	0798      	lsls	r0, r3, #30
    84c2:	d400      	bmi.n	84c6 <__swsetup_r+0x46>
    84c4:	6961      	ldr	r1, [r4, #20]
    84c6:	2000      	movs	r0, #0
    84c8:	60a1      	str	r1, [r4, #8]
    84ca:	4282      	cmp	r2, r0
    84cc:	d1f5      	bne.n	84ba <__swsetup_r+0x3a>
    84ce:	89a0      	ldrh	r0, [r4, #12]
    84d0:	0600      	lsls	r0, r0, #24
    84d2:	17c0      	asrs	r0, r0, #31
    84d4:	e7f1      	b.n	84ba <__swsetup_r+0x3a>
    84d6:	f7fc f96f 	bl	47b8 <__sinit>
    84da:	e7db      	b.n	8494 <__swsetup_r+0x14>
    84dc:	20a0      	movs	r0, #160	; 0xa0
    84de:	0080      	lsls	r0, r0, #2
    84e0:	2180      	movs	r1, #128	; 0x80
    84e2:	4018      	ands	r0, r3
    84e4:	0089      	lsls	r1, r1, #2
    84e6:	4288      	cmp	r0, r1
    84e8:	d0dc      	beq.n	84a4 <__swsetup_r+0x24>
    84ea:	1c28      	adds	r0, r5, #0
    84ec:	1c21      	adds	r1, r4, #0
    84ee:	f001 fabb 	bl	9a68 <__smakebuf_r>
    84f2:	89a3      	ldrh	r3, [r4, #12]
    84f4:	6922      	ldr	r2, [r4, #16]
    84f6:	e7d5      	b.n	84a4 <__swsetup_r+0x24>
    84f8:	06c8      	lsls	r0, r1, #27
    84fa:	d506      	bpl.n	850a <__swsetup_r+0x8a>
    84fc:	0748      	lsls	r0, r1, #29
    84fe:	d407      	bmi.n	8510 <__swsetup_r+0x90>
    8500:	6922      	ldr	r2, [r4, #16]
    8502:	2308      	movs	r3, #8
    8504:	430b      	orrs	r3, r1
    8506:	81a3      	strh	r3, [r4, #12]
    8508:	e7ca      	b.n	84a0 <__swsetup_r+0x20>
    850a:	2001      	movs	r0, #1
    850c:	4240      	negs	r0, r0
    850e:	e7d4      	b.n	84ba <__swsetup_r+0x3a>
    8510:	6b21      	ldr	r1, [r4, #48]	; 0x30
    8512:	2900      	cmp	r1, #0
    8514:	d009      	beq.n	852a <__swsetup_r+0xaa>
    8516:	1c23      	adds	r3, r4, #0
    8518:	3340      	adds	r3, #64	; 0x40
    851a:	4299      	cmp	r1, r3
    851c:	d003      	beq.n	8526 <__swsetup_r+0xa6>
    851e:	1c28      	adds	r0, r5, #0
    8520:	f7fc fa88 	bl	4a34 <_free_r>
    8524:	89a2      	ldrh	r2, [r4, #12]
    8526:	2300      	movs	r3, #0
    8528:	6323      	str	r3, [r4, #48]	; 0x30
    852a:	2324      	movs	r3, #36	; 0x24
    852c:	1c11      	adds	r1, r2, #0
    852e:	6922      	ldr	r2, [r4, #16]
    8530:	4399      	bics	r1, r3
    8532:	3b24      	subs	r3, #36	; 0x24
    8534:	6063      	str	r3, [r4, #4]
    8536:	6022      	str	r2, [r4, #0]
    8538:	e7e3      	b.n	8502 <__swsetup_r+0x82>
    853a:	46c0      	nop			; (mov r8, r8)
    853c:	40000000 	.word	0x40000000

00008540 <quorem>:
    8540:	b5f0      	push	{r4, r5, r6, r7, lr}
    8542:	465f      	mov	r7, fp
    8544:	4656      	mov	r6, sl
    8546:	464d      	mov	r5, r9
    8548:	4644      	mov	r4, r8
    854a:	b4f0      	push	{r4, r5, r6, r7}
    854c:	6902      	ldr	r2, [r0, #16]
    854e:	690b      	ldr	r3, [r1, #16]
    8550:	b083      	sub	sp, #12
    8552:	1c06      	adds	r6, r0, #0
    8554:	2000      	movs	r0, #0
    8556:	9100      	str	r1, [sp, #0]
    8558:	4681      	mov	r9, r0
    855a:	4293      	cmp	r3, r2
    855c:	dd00      	ble.n	8560 <quorem+0x20>
    855e:	e096      	b.n	868e <quorem+0x14e>
    8560:	1e5d      	subs	r5, r3, #1
    8562:	3303      	adds	r3, #3
    8564:	009b      	lsls	r3, r3, #2
    8566:	18ca      	adds	r2, r1, r3
    8568:	1c0c      	adds	r4, r1, #0
    856a:	1d11      	adds	r1, r2, #4
    856c:	4688      	mov	r8, r1
    856e:	6851      	ldr	r1, [r2, #4]
    8570:	18f3      	adds	r3, r6, r3
    8572:	2714      	movs	r7, #20
    8574:	19bf      	adds	r7, r7, r6
    8576:	3101      	adds	r1, #1
    8578:	6858      	ldr	r0, [r3, #4]
    857a:	9701      	str	r7, [sp, #4]
    857c:	f005 fb72 	bl	dc64 <____aeabi_uidiv_from_thumb>
    8580:	3414      	adds	r4, #20
    8582:	1c07      	adds	r7, r0, #0
    8584:	4548      	cmp	r0, r9
    8586:	d041      	beq.n	860c <quorem+0xcc>
    8588:	1c29      	adds	r1, r5, #0
    858a:	9b01      	ldr	r3, [sp, #4]
    858c:	464d      	mov	r5, r9
    858e:	46b3      	mov	fp, r6
    8590:	1c22      	adds	r2, r4, #0
    8592:	464e      	mov	r6, r9
    8594:	468a      	mov	sl, r1
    8596:	46a1      	mov	r9, r4
    8598:	ca01      	ldmia	r2!, {r0}
    859a:	0404      	lsls	r4, r0, #16
    859c:	0c24      	lsrs	r4, r4, #16
    859e:	437c      	muls	r4, r7
    85a0:	0c01      	lsrs	r1, r0, #16
    85a2:	4379      	muls	r1, r7
    85a4:	6818      	ldr	r0, [r3, #0]
    85a6:	0400      	lsls	r0, r0, #16
    85a8:	1934      	adds	r4, r6, r4
    85aa:	0c00      	lsrs	r0, r0, #16
    85ac:	0c26      	lsrs	r6, r4, #16
    85ae:	4684      	mov	ip, r0
    85b0:	0424      	lsls	r4, r4, #16
    85b2:	4465      	add	r5, ip
    85b4:	0c24      	lsrs	r4, r4, #16
    85b6:	1b2c      	subs	r4, r5, r4
    85b8:	1871      	adds	r1, r6, r1
    85ba:	681d      	ldr	r5, [r3, #0]
    85bc:	0c0e      	lsrs	r6, r1, #16
    85be:	0409      	lsls	r1, r1, #16
    85c0:	0c28      	lsrs	r0, r5, #16
    85c2:	0c09      	lsrs	r1, r1, #16
    85c4:	1425      	asrs	r5, r4, #16
    85c6:	1a40      	subs	r0, r0, r1
    85c8:	1940      	adds	r0, r0, r5
    85ca:	0424      	lsls	r4, r4, #16
    85cc:	1405      	asrs	r5, r0, #16
    85ce:	0c24      	lsrs	r4, r4, #16
    85d0:	0400      	lsls	r0, r0, #16
    85d2:	4320      	orrs	r0, r4
    85d4:	c301      	stmia	r3!, {r0}
    85d6:	4590      	cmp	r8, r2
    85d8:	d2de      	bcs.n	8598 <quorem+0x58>
    85da:	4655      	mov	r5, sl
    85dc:	1d2b      	adds	r3, r5, #4
    85de:	465e      	mov	r6, fp
    85e0:	009b      	lsls	r3, r3, #2
    85e2:	18f3      	adds	r3, r6, r3
    85e4:	685a      	ldr	r2, [r3, #4]
    85e6:	464c      	mov	r4, r9
    85e8:	2a00      	cmp	r2, #0
    85ea:	d10f      	bne.n	860c <quorem+0xcc>
    85ec:	9801      	ldr	r0, [sp, #4]
    85ee:	4298      	cmp	r0, r3
    85f0:	d20b      	bcs.n	860a <quorem+0xca>
    85f2:	681a      	ldr	r2, [r3, #0]
    85f4:	2a00      	cmp	r2, #0
    85f6:	d108      	bne.n	860a <quorem+0xca>
    85f8:	1c01      	adds	r1, r0, #0
    85fa:	e002      	b.n	8602 <quorem+0xc2>
    85fc:	681a      	ldr	r2, [r3, #0]
    85fe:	2a00      	cmp	r2, #0
    8600:	d103      	bne.n	860a <quorem+0xca>
    8602:	3b04      	subs	r3, #4
    8604:	3d01      	subs	r5, #1
    8606:	4299      	cmp	r1, r3
    8608:	d3f8      	bcc.n	85fc <quorem+0xbc>
    860a:	6135      	str	r5, [r6, #16]
    860c:	1c30      	adds	r0, r6, #0
    860e:	9900      	ldr	r1, [sp, #0]
    8610:	f001 fde2 	bl	a1d8 <__mcmp>
    8614:	2800      	cmp	r0, #0
    8616:	db39      	blt.n	868c <quorem+0x14c>
    8618:	2100      	movs	r1, #0
    861a:	1c2a      	adds	r2, r5, #0
    861c:	3701      	adds	r7, #1
    861e:	1c0d      	adds	r5, r1, #0
    8620:	9b01      	ldr	r3, [sp, #4]
    8622:	1c31      	adds	r1, r6, #0
    8624:	46ba      	mov	sl, r7
    8626:	4646      	mov	r6, r8
    8628:	4694      	mov	ip, r2
    862a:	4688      	mov	r8, r1
    862c:	6819      	ldr	r1, [r3, #0]
    862e:	cc01      	ldmia	r4!, {r0}
    8630:	040a      	lsls	r2, r1, #16
    8632:	0c12      	lsrs	r2, r2, #16
    8634:	4691      	mov	r9, r2
    8636:	0402      	lsls	r2, r0, #16
    8638:	0c12      	lsrs	r2, r2, #16
    863a:	464f      	mov	r7, r9
    863c:	1aba      	subs	r2, r7, r2
    863e:	1952      	adds	r2, r2, r5
    8640:	0c09      	lsrs	r1, r1, #16
    8642:	0c00      	lsrs	r0, r0, #16
    8644:	1415      	asrs	r5, r2, #16
    8646:	1a09      	subs	r1, r1, r0
    8648:	1949      	adds	r1, r1, r5
    864a:	0412      	lsls	r2, r2, #16
    864c:	140d      	asrs	r5, r1, #16
    864e:	0c12      	lsrs	r2, r2, #16
    8650:	0409      	lsls	r1, r1, #16
    8652:	4311      	orrs	r1, r2
    8654:	c302      	stmia	r3!, {r1}
    8656:	42a6      	cmp	r6, r4
    8658:	d2e8      	bcs.n	862c <quorem+0xec>
    865a:	4665      	mov	r5, ip
    865c:	1d2b      	adds	r3, r5, #4
    865e:	4646      	mov	r6, r8
    8660:	009b      	lsls	r3, r3, #2
    8662:	18f3      	adds	r3, r6, r3
    8664:	685a      	ldr	r2, [r3, #4]
    8666:	4657      	mov	r7, sl
    8668:	2a00      	cmp	r2, #0
    866a:	d10f      	bne.n	868c <quorem+0x14c>
    866c:	9801      	ldr	r0, [sp, #4]
    866e:	4298      	cmp	r0, r3
    8670:	d20b      	bcs.n	868a <quorem+0x14a>
    8672:	681a      	ldr	r2, [r3, #0]
    8674:	2a00      	cmp	r2, #0
    8676:	d108      	bne.n	868a <quorem+0x14a>
    8678:	1c01      	adds	r1, r0, #0
    867a:	e002      	b.n	8682 <quorem+0x142>
    867c:	681a      	ldr	r2, [r3, #0]
    867e:	2a00      	cmp	r2, #0
    8680:	d103      	bne.n	868a <quorem+0x14a>
    8682:	3b04      	subs	r3, #4
    8684:	3d01      	subs	r5, #1
    8686:	4299      	cmp	r1, r3
    8688:	d3f8      	bcc.n	867c <quorem+0x13c>
    868a:	6135      	str	r5, [r6, #16]
    868c:	46b9      	mov	r9, r7
    868e:	b003      	add	sp, #12
    8690:	4648      	mov	r0, r9
    8692:	bc3c      	pop	{r2, r3, r4, r5}
    8694:	4690      	mov	r8, r2
    8696:	4699      	mov	r9, r3
    8698:	46a2      	mov	sl, r4
    869a:	46ab      	mov	fp, r5
    869c:	bcf0      	pop	{r4, r5, r6, r7}
    869e:	bc02      	pop	{r1}
    86a0:	4708      	bx	r1
    86a2:	46c0      	nop			; (mov r8, r8)

000086a4 <_dtoa_r>:
    86a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    86a6:	465f      	mov	r7, fp
    86a8:	4656      	mov	r6, sl
    86aa:	464d      	mov	r5, r9
    86ac:	4644      	mov	r4, r8
    86ae:	b4f0      	push	{r4, r5, r6, r7}
    86b0:	1c04      	adds	r4, r0, #0
    86b2:	b09d      	sub	sp, #116	; 0x74
    86b4:	9829      	ldr	r0, [sp, #164]	; 0xa4
    86b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    86b8:	4680      	mov	r8, r0
    86ba:	1c16      	adds	r6, r2, #0
    86bc:	1c1f      	adds	r7, r3, #0
    86be:	2900      	cmp	r1, #0
    86c0:	d009      	beq.n	86d6 <_dtoa_r+0x32>
    86c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    86c4:	2201      	movs	r2, #1
    86c6:	409a      	lsls	r2, r3
    86c8:	604b      	str	r3, [r1, #4]
    86ca:	608a      	str	r2, [r1, #8]
    86cc:	1c20      	adds	r0, r4, #0
    86ce:	f001 fafd 	bl	9ccc <_Bfree>
    86d2:	2300      	movs	r3, #0
    86d4:	6423      	str	r3, [r4, #64]	; 0x40
    86d6:	1e3d      	subs	r5, r7, #0
    86d8:	db3e      	blt.n	8758 <_dtoa_r+0xb4>
    86da:	2300      	movs	r3, #0
    86dc:	4642      	mov	r2, r8
    86de:	6013      	str	r3, [r2, #0]
    86e0:	4bbb      	ldr	r3, [pc, #748]	; (89d0 <_dtoa_r+0x32c>)
    86e2:	1c2a      	adds	r2, r5, #0
    86e4:	401a      	ands	r2, r3
    86e6:	429a      	cmp	r2, r3
    86e8:	d024      	beq.n	8734 <_dtoa_r+0x90>
    86ea:	2301      	movs	r3, #1
    86ec:	4698      	mov	r8, r3
    86ee:	1c39      	adds	r1, r7, #0
    86f0:	4bac      	ldr	r3, [pc, #688]	; (89a4 <_dtoa_r+0x300>)
    86f2:	4aab      	ldr	r2, [pc, #684]	; (89a0 <_dtoa_r+0x2fc>)
    86f4:	1c30      	adds	r0, r6, #0
    86f6:	9602      	str	r6, [sp, #8]
    86f8:	9703      	str	r7, [sp, #12]
    86fa:	f005 fa8b 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    86fe:	4243      	negs	r3, r0
    8700:	4158      	adcs	r0, r3
    8702:	4240      	negs	r0, r0
    8704:	4641      	mov	r1, r8
    8706:	4001      	ands	r1, r0
    8708:	060b      	lsls	r3, r1, #24
    870a:	2b00      	cmp	r3, #0
    870c:	d12b      	bne.n	8766 <_dtoa_r+0xc2>
    870e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    8710:	3301      	adds	r3, #1
    8712:	6013      	str	r3, [r2, #0]
    8714:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    8716:	2b00      	cmp	r3, #0
    8718:	d100      	bne.n	871c <_dtoa_r+0x78>
    871a:	e1f7      	b.n	8b0c <_dtoa_r+0x468>
    871c:	48ad      	ldr	r0, [pc, #692]	; (89d4 <_dtoa_r+0x330>)
    871e:	6018      	str	r0, [r3, #0]
    8720:	3801      	subs	r0, #1
    8722:	b01d      	add	sp, #116	; 0x74
    8724:	bc3c      	pop	{r2, r3, r4, r5}
    8726:	4690      	mov	r8, r2
    8728:	4699      	mov	r9, r3
    872a:	46a2      	mov	sl, r4
    872c:	46ab      	mov	fp, r5
    872e:	bcf0      	pop	{r4, r5, r6, r7}
    8730:	bc02      	pop	{r1}
    8732:	4708      	bx	r1
    8734:	4ba8      	ldr	r3, [pc, #672]	; (89d8 <_dtoa_r+0x334>)
    8736:	9828      	ldr	r0, [sp, #160]	; 0xa0
    8738:	6003      	str	r3, [r0, #0]
    873a:	2e00      	cmp	r6, #0
    873c:	d100      	bne.n	8740 <_dtoa_r+0x9c>
    873e:	e1bc      	b.n	8aba <_dtoa_r+0x416>
    8740:	48a6      	ldr	r0, [pc, #664]	; (89dc <_dtoa_r+0x338>)
    8742:	992a      	ldr	r1, [sp, #168]	; 0xa8
    8744:	2900      	cmp	r1, #0
    8746:	d0ec      	beq.n	8722 <_dtoa_r+0x7e>
    8748:	78c2      	ldrb	r2, [r0, #3]
    874a:	1cc3      	adds	r3, r0, #3
    874c:	2a00      	cmp	r2, #0
    874e:	d000      	beq.n	8752 <_dtoa_r+0xae>
    8750:	3305      	adds	r3, #5
    8752:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    8754:	6013      	str	r3, [r2, #0]
    8756:	e7e4      	b.n	8722 <_dtoa_r+0x7e>
    8758:	2301      	movs	r3, #1
    875a:	409d      	lsls	r5, r3
    875c:	4641      	mov	r1, r8
    875e:	40dd      	lsrs	r5, r3
    8760:	600b      	str	r3, [r1, #0]
    8762:	1c2f      	adds	r7, r5, #0
    8764:	e7bc      	b.n	86e0 <_dtoa_r+0x3c>
    8766:	ab1a      	add	r3, sp, #104	; 0x68
    8768:	9300      	str	r3, [sp, #0]
    876a:	ab1b      	add	r3, sp, #108	; 0x6c
    876c:	9301      	str	r3, [sp, #4]
    876e:	1c20      	adds	r0, r4, #0
    8770:	9a02      	ldr	r2, [sp, #8]
    8772:	9b03      	ldr	r3, [sp, #12]
    8774:	f001 fe46 	bl	a404 <__d2b>
    8778:	006b      	lsls	r3, r5, #1
    877a:	0d5b      	lsrs	r3, r3, #21
    877c:	9007      	str	r0, [sp, #28]
    877e:	2b00      	cmp	r3, #0
    8780:	d100      	bne.n	8784 <_dtoa_r+0xe0>
    8782:	e1a0      	b.n	8ac6 <_dtoa_r+0x422>
    8784:	9903      	ldr	r1, [sp, #12]
    8786:	030a      	lsls	r2, r1, #12
    8788:	4995      	ldr	r1, [pc, #596]	; (89e0 <_dtoa_r+0x33c>)
    878a:	0b12      	lsrs	r2, r2, #12
    878c:	4311      	orrs	r1, r2
    878e:	4a95      	ldr	r2, [pc, #596]	; (89e4 <_dtoa_r+0x340>)
    8790:	2000      	movs	r0, #0
    8792:	189d      	adds	r5, r3, r2
    8794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8796:	9103      	str	r1, [sp, #12]
    8798:	9016      	str	r0, [sp, #88]	; 0x58
    879a:	4699      	mov	r9, r3
    879c:	9802      	ldr	r0, [sp, #8]
    879e:	9903      	ldr	r1, [sp, #12]
    87a0:	4a81      	ldr	r2, [pc, #516]	; (89a8 <_dtoa_r+0x304>)
    87a2:	4b82      	ldr	r3, [pc, #520]	; (89ac <_dtoa_r+0x308>)
    87a4:	f005 fa18 	bl	dbd8 <____aeabi_dsub_from_thumb>
    87a8:	4a81      	ldr	r2, [pc, #516]	; (89b0 <_dtoa_r+0x30c>)
    87aa:	4b82      	ldr	r3, [pc, #520]	; (89b4 <_dtoa_r+0x310>)
    87ac:	f005 fa10 	bl	dbd0 <____aeabi_dmul_from_thumb>
    87b0:	4a81      	ldr	r2, [pc, #516]	; (89b8 <_dtoa_r+0x314>)
    87b2:	4b82      	ldr	r3, [pc, #520]	; (89bc <_dtoa_r+0x318>)
    87b4:	f005 fa66 	bl	dc84 <____aeabi_dadd_from_thumb>
    87b8:	9004      	str	r0, [sp, #16]
    87ba:	9105      	str	r1, [sp, #20]
    87bc:	1c28      	adds	r0, r5, #0
    87be:	f005 fa8b 	bl	dcd8 <____aeabi_i2d_from_thumb>
    87c2:	4a7f      	ldr	r2, [pc, #508]	; (89c0 <_dtoa_r+0x31c>)
    87c4:	4b7f      	ldr	r3, [pc, #508]	; (89c4 <_dtoa_r+0x320>)
    87c6:	f005 fa03 	bl	dbd0 <____aeabi_dmul_from_thumb>
    87ca:	1c02      	adds	r2, r0, #0
    87cc:	1c0b      	adds	r3, r1, #0
    87ce:	9804      	ldr	r0, [sp, #16]
    87d0:	9905      	ldr	r1, [sp, #20]
    87d2:	f005 fa57 	bl	dc84 <____aeabi_dadd_from_thumb>
    87d6:	9002      	str	r0, [sp, #8]
    87d8:	9103      	str	r1, [sp, #12]
    87da:	f005 fa47 	bl	dc6c <____aeabi_d2iz_from_thumb>
    87de:	4b71      	ldr	r3, [pc, #452]	; (89a4 <_dtoa_r+0x300>)
    87e0:	4a6f      	ldr	r2, [pc, #444]	; (89a0 <_dtoa_r+0x2fc>)
    87e2:	9004      	str	r0, [sp, #16]
    87e4:	9802      	ldr	r0, [sp, #8]
    87e6:	9903      	ldr	r1, [sp, #12]
    87e8:	f005 fa0a 	bl	dc00 <____aeabi_dcmplt_from_thumb>
    87ec:	2800      	cmp	r0, #0
    87ee:	d00b      	beq.n	8808 <_dtoa_r+0x164>
    87f0:	9804      	ldr	r0, [sp, #16]
    87f2:	f005 fa71 	bl	dcd8 <____aeabi_i2d_from_thumb>
    87f6:	9a02      	ldr	r2, [sp, #8]
    87f8:	9b03      	ldr	r3, [sp, #12]
    87fa:	f005 fa0b 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    87fe:	4243      	negs	r3, r0
    8800:	4143      	adcs	r3, r0
    8802:	9804      	ldr	r0, [sp, #16]
    8804:	1ac0      	subs	r0, r0, r3
    8806:	9004      	str	r0, [sp, #16]
    8808:	9a04      	ldr	r2, [sp, #16]
    880a:	2101      	movs	r1, #1
    880c:	9111      	str	r1, [sp, #68]	; 0x44
    880e:	2a16      	cmp	r2, #22
    8810:	d810      	bhi.n	8834 <_dtoa_r+0x190>
    8812:	00d3      	lsls	r3, r2, #3
    8814:	4a74      	ldr	r2, [pc, #464]	; (89e8 <_dtoa_r+0x344>)
    8816:	18d3      	adds	r3, r2, r3
    8818:	6818      	ldr	r0, [r3, #0]
    881a:	6859      	ldr	r1, [r3, #4]
    881c:	1c32      	adds	r2, r6, #0
    881e:	1c3b      	adds	r3, r7, #0
    8820:	f005 fa50 	bl	dcc4 <____aeabi_dcmpgt_from_thumb>
    8824:	2800      	cmp	r0, #0
    8826:	d100      	bne.n	882a <_dtoa_r+0x186>
    8828:	e31f      	b.n	8e6a <_dtoa_r+0x7c6>
    882a:	9b04      	ldr	r3, [sp, #16]
    882c:	2000      	movs	r0, #0
    882e:	3b01      	subs	r3, #1
    8830:	9304      	str	r3, [sp, #16]
    8832:	9011      	str	r0, [sp, #68]	; 0x44
    8834:	2201      	movs	r2, #1
    8836:	4252      	negs	r2, r2
    8838:	1c13      	adds	r3, r2, #0
    883a:	444b      	add	r3, r9
    883c:	1b5d      	subs	r5, r3, r5
    883e:	d500      	bpl.n	8842 <_dtoa_r+0x19e>
    8840:	e308      	b.n	8e54 <_dtoa_r+0x7b0>
    8842:	46aa      	mov	sl, r5
    8844:	2500      	movs	r5, #0
    8846:	950f      	str	r5, [sp, #60]	; 0x3c
    8848:	9804      	ldr	r0, [sp, #16]
    884a:	2800      	cmp	r0, #0
    884c:	da00      	bge.n	8850 <_dtoa_r+0x1ac>
    884e:	e2f8      	b.n	8e42 <_dtoa_r+0x79e>
    8850:	2100      	movs	r1, #0
    8852:	9014      	str	r0, [sp, #80]	; 0x50
    8854:	9113      	str	r1, [sp, #76]	; 0x4c
    8856:	4482      	add	sl, r0
    8858:	9926      	ldr	r1, [sp, #152]	; 0x98
    885a:	2909      	cmp	r1, #9
    885c:	d900      	bls.n	8860 <_dtoa_r+0x1bc>
    885e:	e157      	b.n	8b10 <_dtoa_r+0x46c>
    8860:	2501      	movs	r5, #1
    8862:	2905      	cmp	r1, #5
    8864:	dd02      	ble.n	886c <_dtoa_r+0x1c8>
    8866:	3904      	subs	r1, #4
    8868:	9126      	str	r1, [sp, #152]	; 0x98
    886a:	3d01      	subs	r5, #1
    886c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    886e:	2a03      	cmp	r2, #3
    8870:	d101      	bne.n	8876 <_dtoa_r+0x1d2>
    8872:	f000 fd03 	bl	927c <_dtoa_r+0xbd8>
    8876:	dc00      	bgt.n	887a <_dtoa_r+0x1d6>
    8878:	e306      	b.n	8e88 <_dtoa_r+0x7e4>
    887a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    887c:	2b04      	cmp	r3, #4
    887e:	d101      	bne.n	8884 <_dtoa_r+0x1e0>
    8880:	f000 fd0a 	bl	9298 <_dtoa_r+0xbf4>
    8884:	2b05      	cmp	r3, #5
    8886:	d000      	beq.n	888a <_dtoa_r+0x1e6>
    8888:	e301      	b.n	8e8e <_dtoa_r+0x7ea>
    888a:	2001      	movs	r0, #1
    888c:	9012      	str	r0, [sp, #72]	; 0x48
    888e:	9a04      	ldr	r2, [sp, #16]
    8890:	1c13      	adds	r3, r2, #0
    8892:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    8894:	189b      	adds	r3, r3, r2
    8896:	1c18      	adds	r0, r3, #0
    8898:	3001      	adds	r0, #1
    889a:	9310      	str	r3, [sp, #64]	; 0x40
    889c:	2800      	cmp	r0, #0
    889e:	dc01      	bgt.n	88a4 <_dtoa_r+0x200>
    88a0:	f000 fd27 	bl	92f2 <_dtoa_r+0xc4e>
    88a4:	900b      	str	r0, [sp, #44]	; 0x2c
    88a6:	2100      	movs	r1, #0
    88a8:	6461      	str	r1, [r4, #68]	; 0x44
    88aa:	2304      	movs	r3, #4
    88ac:	2817      	cmp	r0, #23
    88ae:	d801      	bhi.n	88b4 <_dtoa_r+0x210>
    88b0:	f000 fe82 	bl	95b8 <_dtoa_r+0xf14>
    88b4:	005b      	lsls	r3, r3, #1
    88b6:	1c1a      	adds	r2, r3, #0
    88b8:	3214      	adds	r2, #20
    88ba:	3101      	adds	r1, #1
    88bc:	4282      	cmp	r2, r0
    88be:	d9f9      	bls.n	88b4 <_dtoa_r+0x210>
    88c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    88c2:	220e      	movs	r2, #14
    88c4:	2300      	movs	r3, #0
    88c6:	4282      	cmp	r2, r0
    88c8:	415b      	adcs	r3, r3
    88ca:	6461      	str	r1, [r4, #68]	; 0x44
    88cc:	1c20      	adds	r0, r4, #0
    88ce:	401d      	ands	r5, r3
    88d0:	f001 f9d2 	bl	9c78 <_Balloc>
    88d4:	900a      	str	r0, [sp, #40]	; 0x28
    88d6:	6420      	str	r0, [r4, #64]	; 0x40
    88d8:	2d00      	cmp	r5, #0
    88da:	d000      	beq.n	88de <_dtoa_r+0x23a>
    88dc:	e12b      	b.n	8b36 <_dtoa_r+0x492>
    88de:	9a04      	ldr	r2, [sp, #16]
    88e0:	9d04      	ldr	r5, [sp, #16]
    88e2:	0fd1      	lsrs	r1, r2, #31
    88e4:	2300      	movs	r3, #0
    88e6:	220e      	movs	r2, #14
    88e8:	42aa      	cmp	r2, r5
    88ea:	4159      	adcs	r1, r3
    88ec:	0609      	lsls	r1, r1, #24
    88ee:	981a      	ldr	r0, [sp, #104]	; 0x68
    88f0:	4299      	cmp	r1, r3
    88f2:	d100      	bne.n	88f6 <_dtoa_r+0x252>
    88f4:	e206      	b.n	8d04 <_dtoa_r+0x660>
    88f6:	4298      	cmp	r0, r3
    88f8:	da00      	bge.n	88fc <_dtoa_r+0x258>
    88fa:	e203      	b.n	8d04 <_dtoa_r+0x660>
    88fc:	493a      	ldr	r1, [pc, #232]	; (89e8 <_dtoa_r+0x344>)
    88fe:	00ea      	lsls	r2, r5, #3
    8900:	188a      	adds	r2, r1, r2
    8902:	6810      	ldr	r0, [r2, #0]
    8904:	6851      	ldr	r1, [r2, #4]
    8906:	9002      	str	r0, [sp, #8]
    8908:	9103      	str	r1, [sp, #12]
    890a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    890c:	4299      	cmp	r1, r3
    890e:	dc00      	bgt.n	8912 <_dtoa_r+0x26e>
    8910:	e2e1      	b.n	8ed6 <_dtoa_r+0x832>
    8912:	9a02      	ldr	r2, [sp, #8]
    8914:	9b03      	ldr	r3, [sp, #12]
    8916:	1c30      	adds	r0, r6, #0
    8918:	1c39      	adds	r1, r7, #0
    891a:	f005 f9ab 	bl	dc74 <____aeabi_ddiv_from_thumb>
    891e:	f005 f9a5 	bl	dc6c <____aeabi_d2iz_from_thumb>
    8922:	4680      	mov	r8, r0
    8924:	f005 f9d8 	bl	dcd8 <____aeabi_i2d_from_thumb>
    8928:	9a02      	ldr	r2, [sp, #8]
    892a:	9b03      	ldr	r3, [sp, #12]
    892c:	f005 f950 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8930:	1c02      	adds	r2, r0, #0
    8932:	1c0b      	adds	r3, r1, #0
    8934:	1c30      	adds	r0, r6, #0
    8936:	1c39      	adds	r1, r7, #0
    8938:	f005 f94e 	bl	dbd8 <____aeabi_dsub_from_thumb>
    893c:	2530      	movs	r5, #48	; 0x30
    893e:	1c06      	adds	r6, r0, #0
    8940:	1c0f      	adds	r7, r1, #0
    8942:	1c02      	adds	r2, r0, #0
    8944:	1c0b      	adds	r3, r1, #0
    8946:	980a      	ldr	r0, [sp, #40]	; 0x28
    8948:	1c29      	adds	r1, r5, #0
    894a:	4441      	add	r1, r8
    894c:	7001      	strb	r1, [r0, #0]
    894e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8950:	1c05      	adds	r5, r0, #0
    8952:	3501      	adds	r5, #1
    8954:	2901      	cmp	r1, #1
    8956:	d100      	bne.n	895a <_dtoa_r+0x2b6>
    8958:	e07c      	b.n	8a54 <_dtoa_r+0x3b0>
    895a:	1c30      	adds	r0, r6, #0
    895c:	1c39      	adds	r1, r7, #0
    895e:	4a1a      	ldr	r2, [pc, #104]	; (89c8 <_dtoa_r+0x324>)
    8960:	4b1a      	ldr	r3, [pc, #104]	; (89cc <_dtoa_r+0x328>)
    8962:	f005 f935 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8966:	1c06      	adds	r6, r0, #0
    8968:	2001      	movs	r0, #1
    896a:	4680      	mov	r8, r0
    896c:	4b0d      	ldr	r3, [pc, #52]	; (89a4 <_dtoa_r+0x300>)
    896e:	4a0c      	ldr	r2, [pc, #48]	; (89a0 <_dtoa_r+0x2fc>)
    8970:	1c30      	adds	r0, r6, #0
    8972:	1c0f      	adds	r7, r1, #0
    8974:	f005 f94e 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    8978:	4243      	negs	r3, r0
    897a:	4143      	adcs	r3, r0
    897c:	425b      	negs	r3, r3
    897e:	4641      	mov	r1, r8
    8980:	4019      	ands	r1, r3
    8982:	060b      	lsls	r3, r1, #24
    8984:	2b00      	cmp	r3, #0
    8986:	d100      	bne.n	898a <_dtoa_r+0x2e6>
    8988:	e185      	b.n	8c96 <_dtoa_r+0x5f2>
    898a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    898c:	2201      	movs	r2, #1
    898e:	469b      	mov	fp, r3
    8990:	1c23      	adds	r3, r4, #0
    8992:	4692      	mov	sl, r2
    8994:	1c14      	adds	r4, r2, #0
    8996:	4699      	mov	r9, r3
    8998:	e03c      	b.n	8a14 <_dtoa_r+0x370>
    899a:	46c0      	nop			; (mov r8, r8)
    899c:	46c0      	nop			; (mov r8, r8)
    899e:	46c0      	nop			; (mov r8, r8)
	...
    89ac:	3ff80000 	.word	0x3ff80000
    89b0:	636f4361 	.word	0x636f4361
    89b4:	3fd287a7 	.word	0x3fd287a7
    89b8:	8b60c8b3 	.word	0x8b60c8b3
    89bc:	3fc68a28 	.word	0x3fc68a28
    89c0:	509f79fb 	.word	0x509f79fb
    89c4:	3fd34413 	.word	0x3fd34413
    89c8:	00000000 	.word	0x00000000
    89cc:	40240000 	.word	0x40240000
    89d0:	7ff00000 	.word	0x7ff00000
    89d4:	0000e939 	.word	0x0000e939
    89d8:	0000270f 	.word	0x0000270f
    89dc:	0000e948 	.word	0x0000e948
    89e0:	3ff00000 	.word	0x3ff00000
    89e4:	fffffc01 	.word	0xfffffc01
    89e8:	0000e058 	.word	0x0000e058
    89ec:	4bb3      	ldr	r3, [pc, #716]	; (8cbc <_dtoa_r+0x618>)
    89ee:	4ab2      	ldr	r2, [pc, #712]	; (8cb8 <_dtoa_r+0x614>)
    89f0:	f005 f8ee 	bl	dbd0 <____aeabi_dmul_from_thumb>
    89f4:	4ab2      	ldr	r2, [pc, #712]	; (8cc0 <_dtoa_r+0x61c>)
    89f6:	4bb3      	ldr	r3, [pc, #716]	; (8cc4 <_dtoa_r+0x620>)
    89f8:	1c0f      	adds	r7, r1, #0
    89fa:	1c06      	adds	r6, r0, #0
    89fc:	f005 f90a 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    8a00:	4243      	negs	r3, r0
    8a02:	4143      	adcs	r3, r0
    8a04:	425b      	negs	r3, r3
    8a06:	4651      	mov	r1, sl
    8a08:	400b      	ands	r3, r1
    8a0a:	061b      	lsls	r3, r3, #24
    8a0c:	2b00      	cmp	r3, #0
    8a0e:	d101      	bne.n	8a14 <_dtoa_r+0x370>
    8a10:	f000 fd05 	bl	941e <_dtoa_r+0xd7a>
    8a14:	9a02      	ldr	r2, [sp, #8]
    8a16:	9b03      	ldr	r3, [sp, #12]
    8a18:	1c30      	adds	r0, r6, #0
    8a1a:	1c39      	adds	r1, r7, #0
    8a1c:	f005 f92a 	bl	dc74 <____aeabi_ddiv_from_thumb>
    8a20:	f005 f924 	bl	dc6c <____aeabi_d2iz_from_thumb>
    8a24:	4680      	mov	r8, r0
    8a26:	f005 f957 	bl	dcd8 <____aeabi_i2d_from_thumb>
    8a2a:	9a02      	ldr	r2, [sp, #8]
    8a2c:	9b03      	ldr	r3, [sp, #12]
    8a2e:	f005 f8cf 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8a32:	1c02      	adds	r2, r0, #0
    8a34:	1c0b      	adds	r3, r1, #0
    8a36:	1c30      	adds	r0, r6, #0
    8a38:	1c39      	adds	r1, r7, #0
    8a3a:	f005 f8cd 	bl	dbd8 <____aeabi_dsub_from_thumb>
    8a3e:	2730      	movs	r7, #48	; 0x30
    8a40:	1c3e      	adds	r6, r7, #0
    8a42:	4446      	add	r6, r8
    8a44:	3401      	adds	r4, #1
    8a46:	702e      	strb	r6, [r5, #0]
    8a48:	1c02      	adds	r2, r0, #0
    8a4a:	1c0b      	adds	r3, r1, #0
    8a4c:	3501      	adds	r5, #1
    8a4e:	45a3      	cmp	fp, r4
    8a50:	d1cc      	bne.n	89ec <_dtoa_r+0x348>
    8a52:	464c      	mov	r4, r9
    8a54:	1c10      	adds	r0, r2, #0
    8a56:	1c19      	adds	r1, r3, #0
    8a58:	f005 f914 	bl	dc84 <____aeabi_dadd_from_thumb>
    8a5c:	1c06      	adds	r6, r0, #0
    8a5e:	1c0f      	adds	r7, r1, #0
    8a60:	1c32      	adds	r2, r6, #0
    8a62:	9802      	ldr	r0, [sp, #8]
    8a64:	9903      	ldr	r1, [sp, #12]
    8a66:	1c3b      	adds	r3, r7, #0
    8a68:	f005 f8ca 	bl	dc00 <____aeabi_dcmplt_from_thumb>
    8a6c:	9904      	ldr	r1, [sp, #16]
    8a6e:	9117      	str	r1, [sp, #92]	; 0x5c
    8a70:	2800      	cmp	r0, #0
    8a72:	d10e      	bne.n	8a92 <_dtoa_r+0x3ee>
    8a74:	9802      	ldr	r0, [sp, #8]
    8a76:	9903      	ldr	r1, [sp, #12]
    8a78:	1c32      	adds	r2, r6, #0
    8a7a:	1c3b      	adds	r3, r7, #0
    8a7c:	f005 f8ca 	bl	dc14 <____aeabi_dcmpeq_from_thumb>
    8a80:	2800      	cmp	r0, #0
    8a82:	d100      	bne.n	8a86 <_dtoa_r+0x3e2>
    8a84:	e107      	b.n	8c96 <_dtoa_r+0x5f2>
    8a86:	9a04      	ldr	r2, [sp, #16]
    8a88:	4643      	mov	r3, r8
    8a8a:	9217      	str	r2, [sp, #92]	; 0x5c
    8a8c:	07db      	lsls	r3, r3, #31
    8a8e:	d400      	bmi.n	8a92 <_dtoa_r+0x3ee>
    8a90:	e101      	b.n	8c96 <_dtoa_r+0x5f2>
    8a92:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a94:	e000      	b.n	8a98 <_dtoa_r+0x3f4>
    8a96:	1c1d      	adds	r5, r3, #0
    8a98:	1e6b      	subs	r3, r5, #1
    8a9a:	781a      	ldrb	r2, [r3, #0]
    8a9c:	2a39      	cmp	r2, #57	; 0x39
    8a9e:	d001      	beq.n	8aa4 <_dtoa_r+0x400>
    8aa0:	f000 fce8 	bl	9474 <_dtoa_r+0xdd0>
    8aa4:	428b      	cmp	r3, r1
    8aa6:	d1f6      	bne.n	8a96 <_dtoa_r+0x3f2>
    8aa8:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    8aaa:	2230      	movs	r2, #48	; 0x30
    8aac:	3701      	adds	r7, #1
    8aae:	910a      	str	r1, [sp, #40]	; 0x28
    8ab0:	9704      	str	r7, [sp, #16]
    8ab2:	700a      	strb	r2, [r1, #0]
    8ab4:	3201      	adds	r2, #1
    8ab6:	701a      	strb	r2, [r3, #0]
    8ab8:	e0ed      	b.n	8c96 <_dtoa_r+0x5f2>
    8aba:	032d      	lsls	r5, r5, #12
    8abc:	2d00      	cmp	r5, #0
    8abe:	d000      	beq.n	8ac2 <_dtoa_r+0x41e>
    8ac0:	e63e      	b.n	8740 <_dtoa_r+0x9c>
    8ac2:	4887      	ldr	r0, [pc, #540]	; (8ce0 <_dtoa_r+0x63c>)
    8ac4:	e63d      	b.n	8742 <_dtoa_r+0x9e>
    8ac6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8ac8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8aca:	4689      	mov	r9, r1
    8acc:	4a85      	ldr	r2, [pc, #532]	; (8ce4 <_dtoa_r+0x640>)
    8ace:	444b      	add	r3, r9
    8ad0:	18d2      	adds	r2, r2, r3
    8ad2:	4690      	mov	r8, r2
    8ad4:	2020      	movs	r0, #32
    8ad6:	4580      	cmp	r8, r0
    8ad8:	dc00      	bgt.n	8adc <_dtoa_r+0x438>
    8ada:	e1c0      	b.n	8e5e <_dtoa_r+0x7ba>
    8adc:	1800      	adds	r0, r0, r0
    8ade:	4982      	ldr	r1, [pc, #520]	; (8ce8 <_dtoa_r+0x644>)
    8ae0:	1a80      	subs	r0, r0, r2
    8ae2:	4085      	lsls	r5, r0
    8ae4:	185b      	adds	r3, r3, r1
    8ae6:	1c32      	adds	r2, r6, #0
    8ae8:	1c28      	adds	r0, r5, #0
    8aea:	40da      	lsrs	r2, r3
    8aec:	4310      	orrs	r0, r2
    8aee:	f005 f8db 	bl	dca8 <____aeabi_ui2d_from_thumb>
    8af2:	9002      	str	r0, [sp, #8]
    8af4:	9103      	str	r1, [sp, #12]
    8af6:	9803      	ldr	r0, [sp, #12]
    8af8:	4a7c      	ldr	r2, [pc, #496]	; (8cec <_dtoa_r+0x648>)
    8afa:	1c01      	adds	r1, r0, #0
    8afc:	487c      	ldr	r0, [pc, #496]	; (8cf0 <_dtoa_r+0x64c>)
    8afe:	1c15      	adds	r5, r2, #0
    8b00:	1809      	adds	r1, r1, r0
    8b02:	2301      	movs	r3, #1
    8b04:	9103      	str	r1, [sp, #12]
    8b06:	4445      	add	r5, r8
    8b08:	9316      	str	r3, [sp, #88]	; 0x58
    8b0a:	e647      	b.n	879c <_dtoa_r+0xf8>
    8b0c:	4879      	ldr	r0, [pc, #484]	; (8cf4 <_dtoa_r+0x650>)
    8b0e:	e608      	b.n	8722 <_dtoa_r+0x7e>
    8b10:	2301      	movs	r3, #1
    8b12:	2200      	movs	r2, #0
    8b14:	9312      	str	r3, [sp, #72]	; 0x48
    8b16:	425b      	negs	r3, r3
    8b18:	9226      	str	r2, [sp, #152]	; 0x98
    8b1a:	9310      	str	r3, [sp, #64]	; 0x40
    8b1c:	930b      	str	r3, [sp, #44]	; 0x2c
    8b1e:	9227      	str	r2, [sp, #156]	; 0x9c
    8b20:	1c15      	adds	r5, r2, #0
    8b22:	2100      	movs	r1, #0
    8b24:	6461      	str	r1, [r4, #68]	; 0x44
    8b26:	1c20      	adds	r0, r4, #0
    8b28:	f001 f8a6 	bl	9c78 <_Balloc>
    8b2c:	900a      	str	r0, [sp, #40]	; 0x28
    8b2e:	6420      	str	r0, [r4, #64]	; 0x40
    8b30:	2d00      	cmp	r5, #0
    8b32:	d100      	bne.n	8b36 <_dtoa_r+0x492>
    8b34:	e6d3      	b.n	88de <_dtoa_r+0x23a>
    8b36:	1c3a      	adds	r2, r7, #0
    8b38:	1c31      	adds	r1, r6, #0
    8b3a:	9102      	str	r1, [sp, #8]
    8b3c:	9203      	str	r2, [sp, #12]
    8b3e:	9a04      	ldr	r2, [sp, #16]
    8b40:	960c      	str	r6, [sp, #48]	; 0x30
    8b42:	970d      	str	r7, [sp, #52]	; 0x34
    8b44:	2a00      	cmp	r2, #0
    8b46:	dc00      	bgt.n	8b4a <_dtoa_r+0x4a6>
    8b48:	e2e1      	b.n	910e <_dtoa_r+0xa6a>
    8b4a:	230f      	movs	r3, #15
    8b4c:	496a      	ldr	r1, [pc, #424]	; (8cf8 <_dtoa_r+0x654>)
    8b4e:	401a      	ands	r2, r3
    8b50:	00d2      	lsls	r2, r2, #3
    8b52:	188a      	adds	r2, r1, r2
    8b54:	6810      	ldr	r0, [r2, #0]
    8b56:	6851      	ldr	r1, [r2, #4]
    8b58:	9008      	str	r0, [sp, #32]
    8b5a:	9109      	str	r1, [sp, #36]	; 0x24
    8b5c:	9904      	ldr	r1, [sp, #16]
    8b5e:	110d      	asrs	r5, r1, #4
    8b60:	2702      	movs	r7, #2
    8b62:	06ea      	lsls	r2, r5, #27
    8b64:	d500      	bpl.n	8b68 <_dtoa_r+0x4c4>
    8b66:	e183      	b.n	8e70 <_dtoa_r+0x7cc>
    8b68:	2d00      	cmp	r5, #0
    8b6a:	d012      	beq.n	8b92 <_dtoa_r+0x4ee>
    8b6c:	2301      	movs	r3, #1
    8b6e:	4e63      	ldr	r6, [pc, #396]	; (8cfc <_dtoa_r+0x658>)
    8b70:	9808      	ldr	r0, [sp, #32]
    8b72:	9909      	ldr	r1, [sp, #36]	; 0x24
    8b74:	4698      	mov	r8, r3
    8b76:	4642      	mov	r2, r8
    8b78:	4215      	tst	r5, r2
    8b7a:	d004      	beq.n	8b86 <_dtoa_r+0x4e2>
    8b7c:	6832      	ldr	r2, [r6, #0]
    8b7e:	6873      	ldr	r3, [r6, #4]
    8b80:	3701      	adds	r7, #1
    8b82:	f005 f825 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8b86:	106d      	asrs	r5, r5, #1
    8b88:	3608      	adds	r6, #8
    8b8a:	2d00      	cmp	r5, #0
    8b8c:	d1f3      	bne.n	8b76 <_dtoa_r+0x4d2>
    8b8e:	9008      	str	r0, [sp, #32]
    8b90:	9109      	str	r1, [sp, #36]	; 0x24
    8b92:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b94:	990d      	ldr	r1, [sp, #52]	; 0x34
    8b96:	9a08      	ldr	r2, [sp, #32]
    8b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b9a:	f005 f86b 	bl	dc74 <____aeabi_ddiv_from_thumb>
    8b9e:	900c      	str	r0, [sp, #48]	; 0x30
    8ba0:	910d      	str	r1, [sp, #52]	; 0x34
    8ba2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8ba4:	2b00      	cmp	r3, #0
    8ba6:	d032      	beq.n	8c0e <_dtoa_r+0x56a>
    8ba8:	4a47      	ldr	r2, [pc, #284]	; (8cc8 <_dtoa_r+0x624>)
    8baa:	4b48      	ldr	r3, [pc, #288]	; (8ccc <_dtoa_r+0x628>)
    8bac:	980c      	ldr	r0, [sp, #48]	; 0x30
    8bae:	990d      	ldr	r1, [sp, #52]	; 0x34
    8bb0:	f005 f826 	bl	dc00 <____aeabi_dcmplt_from_thumb>
    8bb4:	1e43      	subs	r3, r0, #1
    8bb6:	4198      	sbcs	r0, r3
    8bb8:	2501      	movs	r5, #1
    8bba:	4240      	negs	r0, r0
    8bbc:	4005      	ands	r5, r0
    8bbe:	062d      	lsls	r5, r5, #24
    8bc0:	2d00      	cmp	r5, #0
    8bc2:	d024      	beq.n	8c0e <_dtoa_r+0x56a>
    8bc4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    8bc6:	2d00      	cmp	r5, #0
    8bc8:	dd21      	ble.n	8c0e <_dtoa_r+0x56a>
    8bca:	9810      	ldr	r0, [sp, #64]	; 0x40
    8bcc:	2800      	cmp	r0, #0
    8bce:	dc00      	bgt.n	8bd2 <_dtoa_r+0x52e>
    8bd0:	e299      	b.n	9106 <_dtoa_r+0xa62>
    8bd2:	9904      	ldr	r1, [sp, #16]
    8bd4:	3901      	subs	r1, #1
    8bd6:	4b39      	ldr	r3, [pc, #228]	; (8cbc <_dtoa_r+0x618>)
    8bd8:	4a37      	ldr	r2, [pc, #220]	; (8cb8 <_dtoa_r+0x614>)
    8bda:	9117      	str	r1, [sp, #92]	; 0x5c
    8bdc:	980c      	ldr	r0, [sp, #48]	; 0x30
    8bde:	990d      	ldr	r1, [sp, #52]	; 0x34
    8be0:	f004 fff6 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8be4:	900c      	str	r0, [sp, #48]	; 0x30
    8be6:	910d      	str	r1, [sp, #52]	; 0x34
    8be8:	1c78      	adds	r0, r7, #1
    8bea:	f005 f875 	bl	dcd8 <____aeabi_i2d_from_thumb>
    8bee:	1c02      	adds	r2, r0, #0
    8bf0:	1c0b      	adds	r3, r1, #0
    8bf2:	980c      	ldr	r0, [sp, #48]	; 0x30
    8bf4:	990d      	ldr	r1, [sp, #52]	; 0x34
    8bf6:	f004 ffeb 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8bfa:	4a35      	ldr	r2, [pc, #212]	; (8cd0 <_dtoa_r+0x62c>)
    8bfc:	4b35      	ldr	r3, [pc, #212]	; (8cd4 <_dtoa_r+0x630>)
    8bfe:	f005 f841 	bl	dc84 <____aeabi_dadd_from_thumb>
    8c02:	4a3f      	ldr	r2, [pc, #252]	; (8d00 <_dtoa_r+0x65c>)
    8c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c06:	1c05      	adds	r5, r0, #0
    8c08:	188e      	adds	r6, r1, r2
    8c0a:	9315      	str	r3, [sp, #84]	; 0x54
    8c0c:	e180      	b.n	8f10 <_dtoa_r+0x86c>
    8c0e:	1c38      	adds	r0, r7, #0
    8c10:	f005 f862 	bl	dcd8 <____aeabi_i2d_from_thumb>
    8c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8c18:	f004 ffda 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8c1c:	4a2c      	ldr	r2, [pc, #176]	; (8cd0 <_dtoa_r+0x62c>)
    8c1e:	4b2d      	ldr	r3, [pc, #180]	; (8cd4 <_dtoa_r+0x630>)
    8c20:	f005 f830 	bl	dc84 <____aeabi_dadd_from_thumb>
    8c24:	1c05      	adds	r5, r0, #0
    8c26:	4836      	ldr	r0, [pc, #216]	; (8d00 <_dtoa_r+0x65c>)
    8c28:	180f      	adds	r7, r1, r0
    8c2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8c2c:	1c3e      	adds	r6, r7, #0
    8c2e:	2900      	cmp	r1, #0
    8c30:	d000      	beq.n	8c34 <_dtoa_r+0x590>
    8c32:	e169      	b.n	8f08 <_dtoa_r+0x864>
    8c34:	4a28      	ldr	r2, [pc, #160]	; (8cd8 <_dtoa_r+0x634>)
    8c36:	4b29      	ldr	r3, [pc, #164]	; (8cdc <_dtoa_r+0x638>)
    8c38:	980c      	ldr	r0, [sp, #48]	; 0x30
    8c3a:	990d      	ldr	r1, [sp, #52]	; 0x34
    8c3c:	f004 ffcc 	bl	dbd8 <____aeabi_dsub_from_thumb>
    8c40:	1c2a      	adds	r2, r5, #0
    8c42:	1c3b      	adds	r3, r7, #0
    8c44:	9008      	str	r0, [sp, #32]
    8c46:	9109      	str	r1, [sp, #36]	; 0x24
    8c48:	f005 f83c 	bl	dcc4 <____aeabi_dcmpgt_from_thumb>
    8c4c:	2800      	cmp	r0, #0
    8c4e:	d000      	beq.n	8c52 <_dtoa_r+0x5ae>
    8c50:	e288      	b.n	9164 <_dtoa_r+0xac0>
    8c52:	1c2a      	adds	r2, r5, #0
    8c54:	2580      	movs	r5, #128	; 0x80
    8c56:	062d      	lsls	r5, r5, #24
    8c58:	9808      	ldr	r0, [sp, #32]
    8c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
    8c5c:	197b      	adds	r3, r7, r5
    8c5e:	f004 ffcf 	bl	dc00 <____aeabi_dcmplt_from_thumb>
    8c62:	2800      	cmp	r0, #0
    8c64:	d100      	bne.n	8c68 <_dtoa_r+0x5c4>
    8c66:	e24e      	b.n	9106 <_dtoa_r+0xa62>
    8c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8c6a:	9202      	str	r2, [sp, #8]
    8c6c:	4690      	mov	r8, r2
    8c6e:	9827      	ldr	r0, [sp, #156]	; 0x9c
    8c70:	43c0      	mvns	r0, r0
    8c72:	2100      	movs	r1, #0
    8c74:	9004      	str	r0, [sp, #16]
    8c76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    8c78:	4689      	mov	r9, r1
    8c7a:	1c20      	adds	r0, r4, #0
    8c7c:	4641      	mov	r1, r8
    8c7e:	f001 f825 	bl	9ccc <_Bfree>
    8c82:	9802      	ldr	r0, [sp, #8]
    8c84:	2800      	cmp	r0, #0
    8c86:	d006      	beq.n	8c96 <_dtoa_r+0x5f2>
    8c88:	4581      	cmp	r9, r0
    8c8a:	d000      	beq.n	8c8e <_dtoa_r+0x5ea>
    8c8c:	e22f      	b.n	90ee <_dtoa_r+0xa4a>
    8c8e:	1c20      	adds	r0, r4, #0
    8c90:	9902      	ldr	r1, [sp, #8]
    8c92:	f001 f81b 	bl	9ccc <_Bfree>
    8c96:	1c20      	adds	r0, r4, #0
    8c98:	9907      	ldr	r1, [sp, #28]
    8c9a:	f001 f817 	bl	9ccc <_Bfree>
    8c9e:	2300      	movs	r3, #0
    8ca0:	702b      	strb	r3, [r5, #0]
    8ca2:	9b04      	ldr	r3, [sp, #16]
    8ca4:	9f28      	ldr	r7, [sp, #160]	; 0xa0
    8ca6:	992a      	ldr	r1, [sp, #168]	; 0xa8
    8ca8:	3301      	adds	r3, #1
    8caa:	603b      	str	r3, [r7, #0]
    8cac:	980a      	ldr	r0, [sp, #40]	; 0x28
    8cae:	2900      	cmp	r1, #0
    8cb0:	d100      	bne.n	8cb4 <_dtoa_r+0x610>
    8cb2:	e536      	b.n	8722 <_dtoa_r+0x7e>
    8cb4:	600d      	str	r5, [r1, #0]
    8cb6:	e534      	b.n	8722 <_dtoa_r+0x7e>
    8cb8:	00000000 	.word	0x00000000
    8cbc:	40240000 	.word	0x40240000
	...
    8ccc:	3ff00000 	.word	0x3ff00000
    8cd0:	00000000 	.word	0x00000000
    8cd4:	401c0000 	.word	0x401c0000
    8cd8:	00000000 	.word	0x00000000
    8cdc:	40140000 	.word	0x40140000
    8ce0:	0000e93c 	.word	0x0000e93c
    8ce4:	00000432 	.word	0x00000432
    8ce8:	00000412 	.word	0x00000412
    8cec:	fffffbcd 	.word	0xfffffbcd
    8cf0:	fe100000 	.word	0xfe100000
    8cf4:	0000e938 	.word	0x0000e938
    8cf8:	0000e058 	.word	0x0000e058
    8cfc:	0000e120 	.word	0x0000e120
    8d00:	fcc00000 	.word	0xfcc00000
    8d04:	9912      	ldr	r1, [sp, #72]	; 0x48
    8d06:	2900      	cmp	r1, #0
    8d08:	d000      	beq.n	8d0c <_dtoa_r+0x668>
    8d0a:	e0c8      	b.n	8e9e <_dtoa_r+0x7fa>
    8d0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8d0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8d10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8d12:	9302      	str	r3, [sp, #8]
    8d14:	4690      	mov	r8, r2
    8d16:	2000      	movs	r0, #0
    8d18:	4582      	cmp	sl, r0
    8d1a:	dd0c      	ble.n	8d36 <_dtoa_r+0x692>
    8d1c:	4285      	cmp	r5, r0
    8d1e:	dd0a      	ble.n	8d36 <_dtoa_r+0x692>
    8d20:	4653      	mov	r3, sl
    8d22:	45aa      	cmp	sl, r5
    8d24:	dd00      	ble.n	8d28 <_dtoa_r+0x684>
    8d26:	1c2b      	adds	r3, r5, #0
    8d28:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8d2a:	4652      	mov	r2, sl
    8d2c:	1ac9      	subs	r1, r1, r3
    8d2e:	1ad2      	subs	r2, r2, r3
    8d30:	910f      	str	r1, [sp, #60]	; 0x3c
    8d32:	1aed      	subs	r5, r5, r3
    8d34:	4692      	mov	sl, r2
    8d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8d38:	2b00      	cmp	r3, #0
    8d3a:	dd1e      	ble.n	8d7a <_dtoa_r+0x6d6>
    8d3c:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d3e:	2800      	cmp	r0, #0
    8d40:	d100      	bne.n	8d44 <_dtoa_r+0x6a0>
    8d42:	e36e      	b.n	9422 <_dtoa_r+0xd7e>
    8d44:	2100      	movs	r1, #0
    8d46:	4588      	cmp	r8, r1
    8d48:	dd11      	ble.n	8d6e <_dtoa_r+0x6ca>
    8d4a:	9902      	ldr	r1, [sp, #8]
    8d4c:	4642      	mov	r2, r8
    8d4e:	1c20      	adds	r0, r4, #0
    8d50:	f001 f980 	bl	a054 <__pow5mult>
    8d54:	9002      	str	r0, [sp, #8]
    8d56:	9a07      	ldr	r2, [sp, #28]
    8d58:	9902      	ldr	r1, [sp, #8]
    8d5a:	1c20      	adds	r0, r4, #0
    8d5c:	f001 f8b6 	bl	9ecc <__multiply>
    8d60:	9907      	ldr	r1, [sp, #28]
    8d62:	4681      	mov	r9, r0
    8d64:	1c20      	adds	r0, r4, #0
    8d66:	f000 ffb1 	bl	9ccc <_Bfree>
    8d6a:	464a      	mov	r2, r9
    8d6c:	9207      	str	r2, [sp, #28]
    8d6e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8d70:	4641      	mov	r1, r8
    8d72:	1a42      	subs	r2, r0, r1
    8d74:	2a00      	cmp	r2, #0
    8d76:	d000      	beq.n	8d7a <_dtoa_r+0x6d6>
    8d78:	e369      	b.n	944e <_dtoa_r+0xdaa>
    8d7a:	1c20      	adds	r0, r4, #0
    8d7c:	2101      	movs	r1, #1
    8d7e:	f001 f899 	bl	9eb4 <__i2b>
    8d82:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8d84:	4680      	mov	r8, r0
    8d86:	2a00      	cmp	r2, #0
    8d88:	dd04      	ble.n	8d94 <_dtoa_r+0x6f0>
    8d8a:	4641      	mov	r1, r8
    8d8c:	1c20      	adds	r0, r4, #0
    8d8e:	f001 f961 	bl	a054 <__pow5mult>
    8d92:	4680      	mov	r8, r0
    8d94:	9826      	ldr	r0, [sp, #152]	; 0x98
    8d96:	2300      	movs	r3, #0
    8d98:	4699      	mov	r9, r3
    8d9a:	2801      	cmp	r0, #1
    8d9c:	dc00      	bgt.n	8da0 <_dtoa_r+0x6fc>
    8d9e:	e2b6      	b.n	930e <_dtoa_r+0xc6a>
    8da0:	9814      	ldr	r0, [sp, #80]	; 0x50
    8da2:	2301      	movs	r3, #1
    8da4:	2800      	cmp	r0, #0
    8da6:	d000      	beq.n	8daa <_dtoa_r+0x706>
    8da8:	e298      	b.n	92dc <_dtoa_r+0xc38>
    8daa:	1c1a      	adds	r2, r3, #0
    8dac:	4452      	add	r2, sl
    8dae:	211f      	movs	r1, #31
    8db0:	231c      	movs	r3, #28
    8db2:	400a      	ands	r2, r1
    8db4:	d000      	beq.n	8db8 <_dtoa_r+0x714>
    8db6:	e13b      	b.n	9030 <_dtoa_r+0x98c>
    8db8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8dba:	18c0      	adds	r0, r0, r3
    8dbc:	900f      	str	r0, [sp, #60]	; 0x3c
    8dbe:	18ed      	adds	r5, r5, r3
    8dc0:	449a      	add	sl, r3
    8dc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8dc4:	2900      	cmp	r1, #0
    8dc6:	dd05      	ble.n	8dd4 <_dtoa_r+0x730>
    8dc8:	1c20      	adds	r0, r4, #0
    8dca:	9907      	ldr	r1, [sp, #28]
    8dcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8dce:	f001 f99b 	bl	a108 <__lshift>
    8dd2:	9007      	str	r0, [sp, #28]
    8dd4:	2200      	movs	r2, #0
    8dd6:	4592      	cmp	sl, r2
    8dd8:	dd05      	ble.n	8de6 <_dtoa_r+0x742>
    8dda:	4641      	mov	r1, r8
    8ddc:	1c20      	adds	r0, r4, #0
    8dde:	4652      	mov	r2, sl
    8de0:	f001 f992 	bl	a108 <__lshift>
    8de4:	4680      	mov	r8, r0
    8de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8de8:	2b00      	cmp	r3, #0
    8dea:	d000      	beq.n	8dee <_dtoa_r+0x74a>
    8dec:	e257      	b.n	929e <_dtoa_r+0xbfa>
    8dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8df0:	2b00      	cmp	r3, #0
    8df2:	dd00      	ble.n	8df6 <_dtoa_r+0x752>
    8df4:	e128      	b.n	9048 <_dtoa_r+0x9a4>
    8df6:	9826      	ldr	r0, [sp, #152]	; 0x98
    8df8:	2301      	movs	r3, #1
    8dfa:	2802      	cmp	r0, #2
    8dfc:	dc00      	bgt.n	8e00 <_dtoa_r+0x75c>
    8dfe:	2300      	movs	r3, #0
    8e00:	061b      	lsls	r3, r3, #24
    8e02:	2b00      	cmp	r3, #0
    8e04:	d100      	bne.n	8e08 <_dtoa_r+0x764>
    8e06:	e11f      	b.n	9048 <_dtoa_r+0x9a4>
    8e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8e0a:	2900      	cmp	r1, #0
    8e0c:	d000      	beq.n	8e10 <_dtoa_r+0x76c>
    8e0e:	e72e      	b.n	8c6e <_dtoa_r+0x5ca>
    8e10:	4641      	mov	r1, r8
    8e12:	1c20      	adds	r0, r4, #0
    8e14:	2205      	movs	r2, #5
    8e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e18:	f000 ff64 	bl	9ce4 <__multadd>
    8e1c:	4680      	mov	r8, r0
    8e1e:	4641      	mov	r1, r8
    8e20:	9807      	ldr	r0, [sp, #28]
    8e22:	f001 f9d9 	bl	a1d8 <__mcmp>
    8e26:	2800      	cmp	r0, #0
    8e28:	dc00      	bgt.n	8e2c <_dtoa_r+0x788>
    8e2a:	e720      	b.n	8c6e <_dtoa_r+0x5ca>
    8e2c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e2e:	2331      	movs	r3, #49	; 0x31
    8e30:	7003      	strb	r3, [r0, #0]
    8e32:	9904      	ldr	r1, [sp, #16]
    8e34:	1c05      	adds	r5, r0, #0
    8e36:	3101      	adds	r1, #1
    8e38:	2200      	movs	r2, #0
    8e3a:	3501      	adds	r5, #1
    8e3c:	9104      	str	r1, [sp, #16]
    8e3e:	4691      	mov	r9, r2
    8e40:	e71b      	b.n	8c7a <_dtoa_r+0x5d6>
    8e42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8e44:	9b04      	ldr	r3, [sp, #16]
    8e46:	2000      	movs	r0, #0
    8e48:	1ad2      	subs	r2, r2, r3
    8e4a:	425d      	negs	r5, r3
    8e4c:	920f      	str	r2, [sp, #60]	; 0x3c
    8e4e:	9513      	str	r5, [sp, #76]	; 0x4c
    8e50:	9014      	str	r0, [sp, #80]	; 0x50
    8e52:	e501      	b.n	8858 <_dtoa_r+0x1b4>
    8e54:	426d      	negs	r5, r5
    8e56:	2300      	movs	r3, #0
    8e58:	950f      	str	r5, [sp, #60]	; 0x3c
    8e5a:	469a      	mov	sl, r3
    8e5c:	e4f4      	b.n	8848 <_dtoa_r+0x1a4>
    8e5e:	2020      	movs	r0, #32
    8e60:	1a80      	subs	r0, r0, r2
    8e62:	1c35      	adds	r5, r6, #0
    8e64:	4085      	lsls	r5, r0
    8e66:	1c28      	adds	r0, r5, #0
    8e68:	e641      	b.n	8aee <_dtoa_r+0x44a>
    8e6a:	2100      	movs	r1, #0
    8e6c:	9111      	str	r1, [sp, #68]	; 0x44
    8e6e:	e4e1      	b.n	8834 <_dtoa_r+0x190>
    8e70:	401d      	ands	r5, r3
    8e72:	4bc7      	ldr	r3, [pc, #796]	; (9190 <_dtoa_r+0xaec>)
    8e74:	980c      	ldr	r0, [sp, #48]	; 0x30
    8e76:	990d      	ldr	r1, [sp, #52]	; 0x34
    8e78:	6a1a      	ldr	r2, [r3, #32]
    8e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e7c:	f004 fefa 	bl	dc74 <____aeabi_ddiv_from_thumb>
    8e80:	3701      	adds	r7, #1
    8e82:	900c      	str	r0, [sp, #48]	; 0x30
    8e84:	910d      	str	r1, [sp, #52]	; 0x34
    8e86:	e66f      	b.n	8b68 <_dtoa_r+0x4c4>
    8e88:	2a02      	cmp	r2, #2
    8e8a:	d100      	bne.n	8e8e <_dtoa_r+0x7ea>
    8e8c:	e1fa      	b.n	9284 <_dtoa_r+0xbe0>
    8e8e:	2001      	movs	r0, #1
    8e90:	4243      	negs	r3, r0
    8e92:	2500      	movs	r5, #0
    8e94:	9012      	str	r0, [sp, #72]	; 0x48
    8e96:	9310      	str	r3, [sp, #64]	; 0x40
    8e98:	930b      	str	r3, [sp, #44]	; 0x2c
    8e9a:	9527      	str	r5, [sp, #156]	; 0x9c
    8e9c:	e641      	b.n	8b22 <_dtoa_r+0x47e>
    8e9e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8ea0:	2a01      	cmp	r2, #1
    8ea2:	dc00      	bgt.n	8ea6 <_dtoa_r+0x802>
    8ea4:	e2dd      	b.n	9462 <_dtoa_r+0xdbe>
    8ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8eaa:	3a01      	subs	r2, #1
    8eac:	4293      	cmp	r3, r2
    8eae:	da00      	bge.n	8eb2 <_dtoa_r+0x80e>
    8eb0:	e2c3      	b.n	943a <_dtoa_r+0xd96>
    8eb2:	1a9b      	subs	r3, r3, r2
    8eb4:	4698      	mov	r8, r3
    8eb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8eb8:	2a00      	cmp	r2, #0
    8eba:	da00      	bge.n	8ebe <_dtoa_r+0x81a>
    8ebc:	e2e8      	b.n	9490 <_dtoa_r+0xdec>
    8ebe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    8ec0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ec2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8ec4:	1809      	adds	r1, r1, r0
    8ec6:	910f      	str	r1, [sp, #60]	; 0x3c
    8ec8:	4482      	add	sl, r0
    8eca:	2101      	movs	r1, #1
    8ecc:	1c20      	adds	r0, r4, #0
    8ece:	f000 fff1 	bl	9eb4 <__i2b>
    8ed2:	9002      	str	r0, [sp, #8]
    8ed4:	e71f      	b.n	8d16 <_dtoa_r+0x672>
    8ed6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    8ed8:	429a      	cmp	r2, r3
    8eda:	db00      	blt.n	8ede <_dtoa_r+0x83a>
    8edc:	e519      	b.n	8912 <_dtoa_r+0x26e>
    8ede:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8ee0:	2a00      	cmp	r2, #0
    8ee2:	d000      	beq.n	8ee6 <_dtoa_r+0x842>
    8ee4:	e2b9      	b.n	945a <_dtoa_r+0xdb6>
    8ee6:	4ba3      	ldr	r3, [pc, #652]	; (9174 <_dtoa_r+0xad0>)
    8ee8:	4aa1      	ldr	r2, [pc, #644]	; (9170 <_dtoa_r+0xacc>)
    8eea:	9802      	ldr	r0, [sp, #8]
    8eec:	9903      	ldr	r1, [sp, #12]
    8eee:	f004 fe6f 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8ef2:	1c32      	adds	r2, r6, #0
    8ef4:	1c3b      	adds	r3, r7, #0
    8ef6:	f004 fef7 	bl	dce8 <____aeabi_dcmpge_from_thumb>
    8efa:	2800      	cmp	r0, #0
    8efc:	d000      	beq.n	8f00 <_dtoa_r+0x85c>
    8efe:	e297      	b.n	9430 <_dtoa_r+0xd8c>
    8f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8f02:	4698      	mov	r8, r3
    8f04:	9302      	str	r3, [sp, #8]
    8f06:	e791      	b.n	8e2c <_dtoa_r+0x788>
    8f08:	9f04      	ldr	r7, [sp, #16]
    8f0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f0c:	9717      	str	r7, [sp, #92]	; 0x5c
    8f0e:	9015      	str	r0, [sp, #84]	; 0x54
    8f10:	9912      	ldr	r1, [sp, #72]	; 0x48
    8f12:	2900      	cmp	r1, #0
    8f14:	d100      	bne.n	8f18 <_dtoa_r+0x874>
    8f16:	e13f      	b.n	9198 <_dtoa_r+0xaf4>
    8f18:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8f1a:	3b01      	subs	r3, #1
    8f1c:	00da      	lsls	r2, r3, #3
    8f1e:	4b9d      	ldr	r3, [pc, #628]	; (9194 <_dtoa_r+0xaf0>)
    8f20:	189b      	adds	r3, r3, r2
    8f22:	681a      	ldr	r2, [r3, #0]
    8f24:	685b      	ldr	r3, [r3, #4]
    8f26:	4894      	ldr	r0, [pc, #592]	; (9178 <_dtoa_r+0xad4>)
    8f28:	4994      	ldr	r1, [pc, #592]	; (917c <_dtoa_r+0xad8>)
    8f2a:	f004 fea3 	bl	dc74 <____aeabi_ddiv_from_thumb>
    8f2e:	1c2a      	adds	r2, r5, #0
    8f30:	1c33      	adds	r3, r6, #0
    8f32:	f004 fe51 	bl	dbd8 <____aeabi_dsub_from_thumb>
    8f36:	9008      	str	r0, [sp, #32]
    8f38:	9109      	str	r1, [sp, #36]	; 0x24
    8f3a:	980c      	ldr	r0, [sp, #48]	; 0x30
    8f3c:	990d      	ldr	r1, [sp, #52]	; 0x34
    8f3e:	f004 fe95 	bl	dc6c <____aeabi_d2iz_from_thumb>
    8f42:	1c05      	adds	r5, r0, #0
    8f44:	f004 fec8 	bl	dcd8 <____aeabi_i2d_from_thumb>
    8f48:	1c02      	adds	r2, r0, #0
    8f4a:	1c0b      	adds	r3, r1, #0
    8f4c:	980c      	ldr	r0, [sp, #48]	; 0x30
    8f4e:	990d      	ldr	r1, [sp, #52]	; 0x34
    8f50:	f004 fe42 	bl	dbd8 <____aeabi_dsub_from_thumb>
    8f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8f56:	1c2b      	adds	r3, r5, #0
    8f58:	3330      	adds	r3, #48	; 0x30
    8f5a:	7013      	strb	r3, [r2, #0]
    8f5c:	1c06      	adds	r6, r0, #0
    8f5e:	1c0f      	adds	r7, r1, #0
    8f60:	1c15      	adds	r5, r2, #0
    8f62:	9808      	ldr	r0, [sp, #32]
    8f64:	9909      	ldr	r1, [sp, #36]	; 0x24
    8f66:	1c32      	adds	r2, r6, #0
    8f68:	1c3b      	adds	r3, r7, #0
    8f6a:	3501      	adds	r5, #1
    8f6c:	f004 feaa 	bl	dcc4 <____aeabi_dcmpgt_from_thumb>
    8f70:	2800      	cmp	r0, #0
    8f72:	d000      	beq.n	8f76 <_dtoa_r+0x8d2>
    8f74:	e315      	b.n	95a2 <_dtoa_r+0xefe>
    8f76:	1c32      	adds	r2, r6, #0
    8f78:	1c3b      	adds	r3, r7, #0
    8f7a:	4881      	ldr	r0, [pc, #516]	; (9180 <_dtoa_r+0xadc>)
    8f7c:	4981      	ldr	r1, [pc, #516]	; (9184 <_dtoa_r+0xae0>)
    8f7e:	f004 fe2b 	bl	dbd8 <____aeabi_dsub_from_thumb>
    8f82:	1c02      	adds	r2, r0, #0
    8f84:	1c0b      	adds	r3, r1, #0
    8f86:	9808      	ldr	r0, [sp, #32]
    8f88:	9909      	ldr	r1, [sp, #36]	; 0x24
    8f8a:	f004 fe9b 	bl	dcc4 <____aeabi_dcmpgt_from_thumb>
    8f8e:	2800      	cmp	r0, #0
    8f90:	d000      	beq.n	8f94 <_dtoa_r+0x8f0>
    8f92:	e57e      	b.n	8a92 <_dtoa_r+0x3ee>
    8f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8f96:	2b01      	cmp	r3, #1
    8f98:	dc00      	bgt.n	8f9c <_dtoa_r+0x8f8>
    8f9a:	e0b4      	b.n	9106 <_dtoa_r+0xa62>
    8f9c:	4651      	mov	r1, sl
    8f9e:	3001      	adds	r0, #1
    8fa0:	910c      	str	r1, [sp, #48]	; 0x30
    8fa2:	46a8      	mov	r8, r5
    8fa4:	4682      	mov	sl, r0
    8fa6:	46a3      	mov	fp, r4
    8fa8:	e012      	b.n	8fd0 <_dtoa_r+0x92c>
    8faa:	1c32      	adds	r2, r6, #0
    8fac:	1c3b      	adds	r3, r7, #0
    8fae:	4874      	ldr	r0, [pc, #464]	; (9180 <_dtoa_r+0xadc>)
    8fb0:	4974      	ldr	r1, [pc, #464]	; (9184 <_dtoa_r+0xae0>)
    8fb2:	f004 fe11 	bl	dbd8 <____aeabi_dsub_from_thumb>
    8fb6:	9a08      	ldr	r2, [sp, #32]
    8fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8fba:	f004 fe21 	bl	dc00 <____aeabi_dcmplt_from_thumb>
    8fbe:	2800      	cmp	r0, #0
    8fc0:	d000      	beq.n	8fc4 <_dtoa_r+0x920>
    8fc2:	e260      	b.n	9486 <_dtoa_r+0xde2>
    8fc4:	3001      	adds	r0, #1
    8fc6:	9915      	ldr	r1, [sp, #84]	; 0x54
    8fc8:	4482      	add	sl, r0
    8fca:	458a      	cmp	sl, r1
    8fcc:	db00      	blt.n	8fd0 <_dtoa_r+0x92c>
    8fce:	e097      	b.n	9100 <_dtoa_r+0xa5c>
    8fd0:	9808      	ldr	r0, [sp, #32]
    8fd2:	9909      	ldr	r1, [sp, #36]	; 0x24
    8fd4:	4a6c      	ldr	r2, [pc, #432]	; (9188 <_dtoa_r+0xae4>)
    8fd6:	4b6d      	ldr	r3, [pc, #436]	; (918c <_dtoa_r+0xae8>)
    8fd8:	f004 fdfa 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8fdc:	4a6a      	ldr	r2, [pc, #424]	; (9188 <_dtoa_r+0xae4>)
    8fde:	4b6b      	ldr	r3, [pc, #428]	; (918c <_dtoa_r+0xae8>)
    8fe0:	9008      	str	r0, [sp, #32]
    8fe2:	9109      	str	r1, [sp, #36]	; 0x24
    8fe4:	1c30      	adds	r0, r6, #0
    8fe6:	1c39      	adds	r1, r7, #0
    8fe8:	f004 fdf2 	bl	dbd0 <____aeabi_dmul_from_thumb>
    8fec:	1c0d      	adds	r5, r1, #0
    8fee:	1c04      	adds	r4, r0, #0
    8ff0:	f004 fe3c 	bl	dc6c <____aeabi_d2iz_from_thumb>
    8ff4:	4681      	mov	r9, r0
    8ff6:	f004 fe6f 	bl	dcd8 <____aeabi_i2d_from_thumb>
    8ffa:	1c02      	adds	r2, r0, #0
    8ffc:	1c0b      	adds	r3, r1, #0
    8ffe:	1c20      	adds	r0, r4, #0
    9000:	1c29      	adds	r1, r5, #0
    9002:	f004 fde9 	bl	dbd8 <____aeabi_dsub_from_thumb>
    9006:	2230      	movs	r2, #48	; 0x30
    9008:	1c13      	adds	r3, r2, #0
    900a:	444b      	add	r3, r9
    900c:	4645      	mov	r5, r8
    900e:	1c06      	adds	r6, r0, #0
    9010:	702b      	strb	r3, [r5, #0]
    9012:	2001      	movs	r0, #1
    9014:	4480      	add	r8, r0
    9016:	9a08      	ldr	r2, [sp, #32]
    9018:	9b09      	ldr	r3, [sp, #36]	; 0x24
    901a:	1c30      	adds	r0, r6, #0
    901c:	1c0f      	adds	r7, r1, #0
    901e:	f004 fdef 	bl	dc00 <____aeabi_dcmplt_from_thumb>
    9022:	2800      	cmp	r0, #0
    9024:	d0c1      	beq.n	8faa <_dtoa_r+0x906>
    9026:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    9028:	4645      	mov	r5, r8
    902a:	465c      	mov	r4, fp
    902c:	9304      	str	r3, [sp, #16]
    902e:	e632      	b.n	8c96 <_dtoa_r+0x5f2>
    9030:	3304      	adds	r3, #4
    9032:	1a9b      	subs	r3, r3, r2
    9034:	2b04      	cmp	r3, #4
    9036:	dc00      	bgt.n	903a <_dtoa_r+0x996>
    9038:	e2b7      	b.n	95aa <_dtoa_r+0xf06>
    903a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    903c:	3b04      	subs	r3, #4
    903e:	18d2      	adds	r2, r2, r3
    9040:	920f      	str	r2, [sp, #60]	; 0x3c
    9042:	18ed      	adds	r5, r5, r3
    9044:	449a      	add	sl, r3
    9046:	e6bc      	b.n	8dc2 <_dtoa_r+0x71e>
    9048:	9b12      	ldr	r3, [sp, #72]	; 0x48
    904a:	2b00      	cmp	r3, #0
    904c:	d000      	beq.n	9050 <_dtoa_r+0x9ac>
    904e:	e172      	b.n	9336 <_dtoa_r+0xc92>
    9050:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    9052:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9054:	990a      	ldr	r1, [sp, #40]	; 0x28
    9056:	46ab      	mov	fp, r5
    9058:	2501      	movs	r5, #1
    905a:	44ab      	add	fp, r5
    905c:	4647      	mov	r7, r8
    905e:	1c25      	adds	r5, r4, #0
    9060:	1c1e      	adds	r6, r3, #0
    9062:	4680      	mov	r8, r0
    9064:	4689      	mov	r9, r1
    9066:	9c07      	ldr	r4, [sp, #28]
    9068:	e006      	b.n	9078 <_dtoa_r+0x9d4>
    906a:	1c21      	adds	r1, r4, #0
    906c:	1c28      	adds	r0, r5, #0
    906e:	220a      	movs	r2, #10
    9070:	2300      	movs	r3, #0
    9072:	f000 fe37 	bl	9ce4 <__multadd>
    9076:	1c04      	adds	r4, r0, #0
    9078:	1c20      	adds	r0, r4, #0
    907a:	1c39      	adds	r1, r7, #0
    907c:	f7ff fa60 	bl	8540 <quorem>
    9080:	464b      	mov	r3, r9
    9082:	3030      	adds	r0, #48	; 0x30
    9084:	5598      	strb	r0, [r3, r6]
    9086:	1c33      	adds	r3, r6, #0
    9088:	3601      	adds	r6, #1
    908a:	445b      	add	r3, fp
    908c:	45b0      	cmp	r8, r6
    908e:	dcec      	bgt.n	906a <_dtoa_r+0x9c6>
    9090:	4682      	mov	sl, r0
    9092:	2000      	movs	r0, #0
    9094:	9407      	str	r4, [sp, #28]
    9096:	46b8      	mov	r8, r7
    9098:	1c2c      	adds	r4, r5, #0
    909a:	4681      	mov	r9, r0
    909c:	1c1d      	adds	r5, r3, #0
    909e:	9907      	ldr	r1, [sp, #28]
    90a0:	1c20      	adds	r0, r4, #0
    90a2:	2201      	movs	r2, #1
    90a4:	f001 f830 	bl	a108 <__lshift>
    90a8:	4641      	mov	r1, r8
    90aa:	9007      	str	r0, [sp, #28]
    90ac:	f001 f894 	bl	a1d8 <__mcmp>
    90b0:	2800      	cmp	r0, #0
    90b2:	dd10      	ble.n	90d6 <_dtoa_r+0xa32>
    90b4:	990a      	ldr	r1, [sp, #40]	; 0x28
    90b6:	e000      	b.n	90ba <_dtoa_r+0xa16>
    90b8:	1c1d      	adds	r5, r3, #0
    90ba:	1e6b      	subs	r3, r5, #1
    90bc:	781a      	ldrb	r2, [r3, #0]
    90be:	2a39      	cmp	r2, #57	; 0x39
    90c0:	d000      	beq.n	90c4 <_dtoa_r+0xa20>
    90c2:	e22c      	b.n	951e <_dtoa_r+0xe7a>
    90c4:	428b      	cmp	r3, r1
    90c6:	d1f7      	bne.n	90b8 <_dtoa_r+0xa14>
    90c8:	9a04      	ldr	r2, [sp, #16]
    90ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    90cc:	3201      	adds	r2, #1
    90ce:	2331      	movs	r3, #49	; 0x31
    90d0:	9204      	str	r2, [sp, #16]
    90d2:	703b      	strb	r3, [r7, #0]
    90d4:	e5d1      	b.n	8c7a <_dtoa_r+0x5d6>
    90d6:	2800      	cmp	r0, #0
    90d8:	d104      	bne.n	90e4 <_dtoa_r+0xa40>
    90da:	4651      	mov	r1, sl
    90dc:	07c9      	lsls	r1, r1, #31
    90de:	d4e9      	bmi.n	90b4 <_dtoa_r+0xa10>
    90e0:	e000      	b.n	90e4 <_dtoa_r+0xa40>
    90e2:	1c1d      	adds	r5, r3, #0
    90e4:	1e6b      	subs	r3, r5, #1
    90e6:	781a      	ldrb	r2, [r3, #0]
    90e8:	2a30      	cmp	r2, #48	; 0x30
    90ea:	d0fa      	beq.n	90e2 <_dtoa_r+0xa3e>
    90ec:	e5c5      	b.n	8c7a <_dtoa_r+0x5d6>
    90ee:	2100      	movs	r1, #0
    90f0:	4589      	cmp	r9, r1
    90f2:	d100      	bne.n	90f6 <_dtoa_r+0xa52>
    90f4:	e5cb      	b.n	8c8e <_dtoa_r+0x5ea>
    90f6:	1c20      	adds	r0, r4, #0
    90f8:	4649      	mov	r1, r9
    90fa:	f000 fde7 	bl	9ccc <_Bfree>
    90fe:	e5c6      	b.n	8c8e <_dtoa_r+0x5ea>
    9100:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9102:	465c      	mov	r4, fp
    9104:	46aa      	mov	sl, r5
    9106:	9e02      	ldr	r6, [sp, #8]
    9108:	9f03      	ldr	r7, [sp, #12]
    910a:	f7ff fbe8 	bl	88de <_dtoa_r+0x23a>
    910e:	9b04      	ldr	r3, [sp, #16]
    9110:	425d      	negs	r5, r3
    9112:	2702      	movs	r7, #2
    9114:	2d00      	cmp	r5, #0
    9116:	d100      	bne.n	911a <_dtoa_r+0xa76>
    9118:	e543      	b.n	8ba2 <_dtoa_r+0x4fe>
    911a:	230f      	movs	r3, #15
    911c:	402b      	ands	r3, r5
    911e:	00da      	lsls	r2, r3, #3
    9120:	4b1c      	ldr	r3, [pc, #112]	; (9194 <_dtoa_r+0xaf0>)
    9122:	189b      	adds	r3, r3, r2
    9124:	980c      	ldr	r0, [sp, #48]	; 0x30
    9126:	990d      	ldr	r1, [sp, #52]	; 0x34
    9128:	681a      	ldr	r2, [r3, #0]
    912a:	685b      	ldr	r3, [r3, #4]
    912c:	f004 fd50 	bl	dbd0 <____aeabi_dmul_from_thumb>
    9130:	112d      	asrs	r5, r5, #4
    9132:	900c      	str	r0, [sp, #48]	; 0x30
    9134:	910d      	str	r1, [sp, #52]	; 0x34
    9136:	2d00      	cmp	r5, #0
    9138:	d100      	bne.n	913c <_dtoa_r+0xa98>
    913a:	e532      	b.n	8ba2 <_dtoa_r+0x4fe>
    913c:	2001      	movs	r0, #1
    913e:	4680      	mov	r8, r0
    9140:	4e13      	ldr	r6, [pc, #76]	; (9190 <_dtoa_r+0xaec>)
    9142:	980c      	ldr	r0, [sp, #48]	; 0x30
    9144:	990d      	ldr	r1, [sp, #52]	; 0x34
    9146:	4642      	mov	r2, r8
    9148:	4215      	tst	r5, r2
    914a:	d004      	beq.n	9156 <_dtoa_r+0xab2>
    914c:	6832      	ldr	r2, [r6, #0]
    914e:	6873      	ldr	r3, [r6, #4]
    9150:	3701      	adds	r7, #1
    9152:	f004 fd3d 	bl	dbd0 <____aeabi_dmul_from_thumb>
    9156:	106d      	asrs	r5, r5, #1
    9158:	3608      	adds	r6, #8
    915a:	2d00      	cmp	r5, #0
    915c:	d1f3      	bne.n	9146 <_dtoa_r+0xaa2>
    915e:	900c      	str	r0, [sp, #48]	; 0x30
    9160:	910d      	str	r1, [sp, #52]	; 0x34
    9162:	e51e      	b.n	8ba2 <_dtoa_r+0x4fe>
    9164:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9166:	4690      	mov	r8, r2
    9168:	9202      	str	r2, [sp, #8]
    916a:	e65f      	b.n	8e2c <_dtoa_r+0x788>
    916c:	46c0      	nop			; (mov r8, r8)
    916e:	46c0      	nop			; (mov r8, r8)
    9170:	00000000 	.word	0x00000000
    9174:	40140000 	.word	0x40140000
    9178:	00000000 	.word	0x00000000
    917c:	3fe00000 	.word	0x3fe00000
    9180:	00000000 	.word	0x00000000
    9184:	3ff00000 	.word	0x3ff00000
    9188:	00000000 	.word	0x00000000
    918c:	40240000 	.word	0x40240000
    9190:	0000e120 	.word	0x0000e120
    9194:	0000e058 	.word	0x0000e058
    9198:	9915      	ldr	r1, [sp, #84]	; 0x54
    919a:	4bd3      	ldr	r3, [pc, #844]	; (94e8 <_dtoa_r+0xe44>)
    919c:	3901      	subs	r1, #1
    919e:	00ca      	lsls	r2, r1, #3
    91a0:	189b      	adds	r3, r3, r2
    91a2:	9108      	str	r1, [sp, #32]
    91a4:	1c2a      	adds	r2, r5, #0
    91a6:	6818      	ldr	r0, [r3, #0]
    91a8:	6859      	ldr	r1, [r3, #4]
    91aa:	1c33      	adds	r3, r6, #0
    91ac:	f004 fd10 	bl	dbd0 <____aeabi_dmul_from_thumb>
    91b0:	9018      	str	r0, [sp, #96]	; 0x60
    91b2:	9119      	str	r1, [sp, #100]	; 0x64
    91b4:	980c      	ldr	r0, [sp, #48]	; 0x30
    91b6:	990d      	ldr	r1, [sp, #52]	; 0x34
    91b8:	f004 fd58 	bl	dc6c <____aeabi_d2iz_from_thumb>
    91bc:	1c05      	adds	r5, r0, #0
    91be:	f004 fd8b 	bl	dcd8 <____aeabi_i2d_from_thumb>
    91c2:	1c02      	adds	r2, r0, #0
    91c4:	1c0b      	adds	r3, r1, #0
    91c6:	980c      	ldr	r0, [sp, #48]	; 0x30
    91c8:	990d      	ldr	r1, [sp, #52]	; 0x34
    91ca:	f004 fd05 	bl	dbd8 <____aeabi_dsub_from_thumb>
    91ce:	1c2b      	adds	r3, r5, #0
    91d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    91d2:	3330      	adds	r3, #48	; 0x30
    91d4:	7013      	strb	r3, [r2, #0]
    91d6:	1c06      	adds	r6, r0, #0
    91d8:	4693      	mov	fp, r2
    91da:	2301      	movs	r3, #1
    91dc:	9815      	ldr	r0, [sp, #84]	; 0x54
    91de:	449b      	add	fp, r3
    91e0:	1c0f      	adds	r7, r1, #0
    91e2:	465d      	mov	r5, fp
    91e4:	4298      	cmp	r0, r3
    91e6:	d022      	beq.n	922e <_dtoa_r+0xb8a>
    91e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    91ea:	4691      	mov	r9, r2
    91ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
    91ee:	465d      	mov	r5, fp
    91f0:	4491      	add	r9, r2
    91f2:	1c30      	adds	r0, r6, #0
    91f4:	46a0      	mov	r8, r4
    91f6:	4bb9      	ldr	r3, [pc, #740]	; (94dc <_dtoa_r+0xe38>)
    91f8:	4ab7      	ldr	r2, [pc, #732]	; (94d8 <_dtoa_r+0xe34>)
    91fa:	f004 fce9 	bl	dbd0 <____aeabi_dmul_from_thumb>
    91fe:	1c0f      	adds	r7, r1, #0
    9200:	1c06      	adds	r6, r0, #0
    9202:	f004 fd33 	bl	dc6c <____aeabi_d2iz_from_thumb>
    9206:	1c04      	adds	r4, r0, #0
    9208:	f004 fd66 	bl	dcd8 <____aeabi_i2d_from_thumb>
    920c:	3430      	adds	r4, #48	; 0x30
    920e:	1c02      	adds	r2, r0, #0
    9210:	1c0b      	adds	r3, r1, #0
    9212:	1c30      	adds	r0, r6, #0
    9214:	1c39      	adds	r1, r7, #0
    9216:	f004 fcdf 	bl	dbd8 <____aeabi_dsub_from_thumb>
    921a:	702c      	strb	r4, [r5, #0]
    921c:	3501      	adds	r5, #1
    921e:	454d      	cmp	r5, r9
    9220:	d1e9      	bne.n	91f6 <_dtoa_r+0xb52>
    9222:	9b08      	ldr	r3, [sp, #32]
    9224:	1c1d      	adds	r5, r3, #0
    9226:	1c06      	adds	r6, r0, #0
    9228:	1c0f      	adds	r7, r1, #0
    922a:	4644      	mov	r4, r8
    922c:	445d      	add	r5, fp
    922e:	4aac      	ldr	r2, [pc, #688]	; (94e0 <_dtoa_r+0xe3c>)
    9230:	4bac      	ldr	r3, [pc, #688]	; (94e4 <_dtoa_r+0xe40>)
    9232:	9818      	ldr	r0, [sp, #96]	; 0x60
    9234:	9919      	ldr	r1, [sp, #100]	; 0x64
    9236:	f004 fd25 	bl	dc84 <____aeabi_dadd_from_thumb>
    923a:	1c02      	adds	r2, r0, #0
    923c:	1c0b      	adds	r3, r1, #0
    923e:	1c30      	adds	r0, r6, #0
    9240:	1c39      	adds	r1, r7, #0
    9242:	f004 fd3f 	bl	dcc4 <____aeabi_dcmpgt_from_thumb>
    9246:	2800      	cmp	r0, #0
    9248:	d001      	beq.n	924e <_dtoa_r+0xbaa>
    924a:	f7ff fc22 	bl	8a92 <_dtoa_r+0x3ee>
    924e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9250:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9252:	48a3      	ldr	r0, [pc, #652]	; (94e0 <_dtoa_r+0xe3c>)
    9254:	49a3      	ldr	r1, [pc, #652]	; (94e4 <_dtoa_r+0xe40>)
    9256:	f004 fcbf 	bl	dbd8 <____aeabi_dsub_from_thumb>
    925a:	1c02      	adds	r2, r0, #0
    925c:	1c0b      	adds	r3, r1, #0
    925e:	1c30      	adds	r0, r6, #0
    9260:	1c39      	adds	r1, r7, #0
    9262:	f004 fccd 	bl	dc00 <____aeabi_dcmplt_from_thumb>
    9266:	2800      	cmp	r0, #0
    9268:	d101      	bne.n	926e <_dtoa_r+0xbca>
    926a:	e74c      	b.n	9106 <_dtoa_r+0xa62>
    926c:	1c1d      	adds	r5, r3, #0
    926e:	1e6b      	subs	r3, r5, #1
    9270:	781a      	ldrb	r2, [r3, #0]
    9272:	2a30      	cmp	r2, #48	; 0x30
    9274:	d0fa      	beq.n	926c <_dtoa_r+0xbc8>
    9276:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9278:	9104      	str	r1, [sp, #16]
    927a:	e50c      	b.n	8c96 <_dtoa_r+0x5f2>
    927c:	2100      	movs	r1, #0
    927e:	9112      	str	r1, [sp, #72]	; 0x48
    9280:	f7ff fb05 	bl	888e <_dtoa_r+0x1ea>
    9284:	2200      	movs	r2, #0
    9286:	9212      	str	r2, [sp, #72]	; 0x48
    9288:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    928a:	2b00      	cmp	r3, #0
    928c:	dd39      	ble.n	9302 <_dtoa_r+0xc5e>
    928e:	1c18      	adds	r0, r3, #0
    9290:	9310      	str	r3, [sp, #64]	; 0x40
    9292:	930b      	str	r3, [sp, #44]	; 0x2c
    9294:	f7ff fb07 	bl	88a6 <_dtoa_r+0x202>
    9298:	2101      	movs	r1, #1
    929a:	9112      	str	r1, [sp, #72]	; 0x48
    929c:	e7f4      	b.n	9288 <_dtoa_r+0xbe4>
    929e:	9807      	ldr	r0, [sp, #28]
    92a0:	4641      	mov	r1, r8
    92a2:	f000 ff99 	bl	a1d8 <__mcmp>
    92a6:	2800      	cmp	r0, #0
    92a8:	db00      	blt.n	92ac <_dtoa_r+0xc08>
    92aa:	e5a0      	b.n	8dee <_dtoa_r+0x74a>
    92ac:	9804      	ldr	r0, [sp, #16]
    92ae:	3801      	subs	r0, #1
    92b0:	9004      	str	r0, [sp, #16]
    92b2:	9907      	ldr	r1, [sp, #28]
    92b4:	220a      	movs	r2, #10
    92b6:	1c20      	adds	r0, r4, #0
    92b8:	2300      	movs	r3, #0
    92ba:	f000 fd13 	bl	9ce4 <__multadd>
    92be:	9910      	ldr	r1, [sp, #64]	; 0x40
    92c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    92c2:	9007      	str	r0, [sp, #28]
    92c4:	910b      	str	r1, [sp, #44]	; 0x2c
    92c6:	2a00      	cmp	r2, #0
    92c8:	d100      	bne.n	92cc <_dtoa_r+0xc28>
    92ca:	e590      	b.n	8dee <_dtoa_r+0x74a>
    92cc:	1c20      	adds	r0, r4, #0
    92ce:	9902      	ldr	r1, [sp, #8]
    92d0:	220a      	movs	r2, #10
    92d2:	2300      	movs	r3, #0
    92d4:	f000 fd06 	bl	9ce4 <__multadd>
    92d8:	9002      	str	r0, [sp, #8]
    92da:	e588      	b.n	8dee <_dtoa_r+0x74a>
    92dc:	4641      	mov	r1, r8
    92de:	690b      	ldr	r3, [r1, #16]
    92e0:	3303      	adds	r3, #3
    92e2:	009b      	lsls	r3, r3, #2
    92e4:	4443      	add	r3, r8
    92e6:	6858      	ldr	r0, [r3, #4]
    92e8:	f000 fd92 	bl	9e10 <__hi0bits>
    92ec:	2320      	movs	r3, #32
    92ee:	1a1b      	subs	r3, r3, r0
    92f0:	e55b      	b.n	8daa <_dtoa_r+0x706>
    92f2:	2200      	movs	r2, #0
    92f4:	230e      	movs	r3, #14
    92f6:	4283      	cmp	r3, r0
    92f8:	4152      	adcs	r2, r2
    92fa:	4015      	ands	r5, r2
    92fc:	900b      	str	r0, [sp, #44]	; 0x2c
    92fe:	f7ff fc10 	bl	8b22 <_dtoa_r+0x47e>
    9302:	2001      	movs	r0, #1
    9304:	9010      	str	r0, [sp, #64]	; 0x40
    9306:	900b      	str	r0, [sp, #44]	; 0x2c
    9308:	9027      	str	r0, [sp, #156]	; 0x9c
    930a:	f7ff fc0a 	bl	8b22 <_dtoa_r+0x47e>
    930e:	454e      	cmp	r6, r9
    9310:	d000      	beq.n	9314 <_dtoa_r+0xc70>
    9312:	e545      	b.n	8da0 <_dtoa_r+0x6fc>
    9314:	033b      	lsls	r3, r7, #12
    9316:	1c3a      	adds	r2, r7, #0
    9318:	454b      	cmp	r3, r9
    931a:	d000      	beq.n	931e <_dtoa_r+0xc7a>
    931c:	e540      	b.n	8da0 <_dtoa_r+0x6fc>
    931e:	4b73      	ldr	r3, [pc, #460]	; (94ec <_dtoa_r+0xe48>)
    9320:	401a      	ands	r2, r3
    9322:	4691      	mov	r9, r2
    9324:	d100      	bne.n	9328 <_dtoa_r+0xc84>
    9326:	e53b      	b.n	8da0 <_dtoa_r+0x6fc>
    9328:	990f      	ldr	r1, [sp, #60]	; 0x3c
    932a:	2201      	movs	r2, #1
    932c:	3101      	adds	r1, #1
    932e:	910f      	str	r1, [sp, #60]	; 0x3c
    9330:	4492      	add	sl, r2
    9332:	4691      	mov	r9, r2
    9334:	e534      	b.n	8da0 <_dtoa_r+0x6fc>
    9336:	2d00      	cmp	r5, #0
    9338:	dd05      	ble.n	9346 <_dtoa_r+0xca2>
    933a:	1c20      	adds	r0, r4, #0
    933c:	9902      	ldr	r1, [sp, #8]
    933e:	1c2a      	adds	r2, r5, #0
    9340:	f000 fee2 	bl	a108 <__lshift>
    9344:	9002      	str	r0, [sp, #8]
    9346:	9a02      	ldr	r2, [sp, #8]
    9348:	2300      	movs	r3, #0
    934a:	4693      	mov	fp, r2
    934c:	4599      	cmp	r9, r3
    934e:	d000      	beq.n	9352 <_dtoa_r+0xcae>
    9350:	e0d0      	b.n	94f4 <_dtoa_r+0xe50>
    9352:	2301      	movs	r3, #1
    9354:	9802      	ldr	r0, [sp, #8]
    9356:	4033      	ands	r3, r6
    9358:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    935a:	9306      	str	r3, [sp, #24]
    935c:	1c07      	adds	r7, r0, #0
    935e:	46c1      	mov	r9, r8
    9360:	4649      	mov	r1, r9
    9362:	9807      	ldr	r0, [sp, #28]
    9364:	f7ff f8ec 	bl	8540 <quorem>
    9368:	3030      	adds	r0, #48	; 0x30
    936a:	9002      	str	r0, [sp, #8]
    936c:	1c39      	adds	r1, r7, #0
    936e:	9807      	ldr	r0, [sp, #28]
    9370:	f000 ff32 	bl	a1d8 <__mcmp>
    9374:	4649      	mov	r1, r9
    9376:	4682      	mov	sl, r0
    9378:	465a      	mov	r2, fp
    937a:	1c20      	adds	r0, r4, #0
    937c:	f000 ff4c 	bl	a218 <__mdiff>
    9380:	68c3      	ldr	r3, [r0, #12]
    9382:	4680      	mov	r8, r0
    9384:	2601      	movs	r6, #1
    9386:	2b00      	cmp	r3, #0
    9388:	d03a      	beq.n	9400 <_dtoa_r+0xd5c>
    938a:	4641      	mov	r1, r8
    938c:	1c20      	adds	r0, r4, #0
    938e:	f000 fc9d 	bl	9ccc <_Bfree>
    9392:	9926      	ldr	r1, [sp, #152]	; 0x98
    9394:	4331      	orrs	r1, r6
    9396:	d103      	bne.n	93a0 <_dtoa_r+0xcfc>
    9398:	9a06      	ldr	r2, [sp, #24]
    939a:	2a00      	cmp	r2, #0
    939c:	d100      	bne.n	93a0 <_dtoa_r+0xcfc>
    939e:	e0e7      	b.n	9570 <_dtoa_r+0xecc>
    93a0:	2000      	movs	r0, #0
    93a2:	4582      	cmp	sl, r0
    93a4:	db78      	blt.n	9498 <_dtoa_r+0xdf4>
    93a6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    93a8:	4651      	mov	r1, sl
    93aa:	4311      	orrs	r1, r2
    93ac:	d102      	bne.n	93b4 <_dtoa_r+0xd10>
    93ae:	9b06      	ldr	r3, [sp, #24]
    93b0:	4283      	cmp	r3, r0
    93b2:	d071      	beq.n	9498 <_dtoa_r+0xdf4>
    93b4:	2e00      	cmp	r6, #0
    93b6:	dd00      	ble.n	93ba <_dtoa_r+0xd16>
    93b8:	e0c3      	b.n	9542 <_dtoa_r+0xe9e>
    93ba:	2108      	movs	r1, #8
    93bc:	4668      	mov	r0, sp
    93be:	5c08      	ldrb	r0, [r1, r0]
    93c0:	7028      	strb	r0, [r5, #0]
    93c2:	990a      	ldr	r1, [sp, #40]	; 0x28
    93c4:	3501      	adds	r5, #1
    93c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    93c8:	1a6b      	subs	r3, r5, r1
    93ca:	4293      	cmp	r3, r2
    93cc:	d100      	bne.n	93d0 <_dtoa_r+0xd2c>
    93ce:	e0b1      	b.n	9534 <_dtoa_r+0xe90>
    93d0:	1c20      	adds	r0, r4, #0
    93d2:	9907      	ldr	r1, [sp, #28]
    93d4:	220a      	movs	r2, #10
    93d6:	2300      	movs	r3, #0
    93d8:	f000 fc84 	bl	9ce4 <__multadd>
    93dc:	9007      	str	r0, [sp, #28]
    93de:	455f      	cmp	r7, fp
    93e0:	d014      	beq.n	940c <_dtoa_r+0xd68>
    93e2:	1c39      	adds	r1, r7, #0
    93e4:	220a      	movs	r2, #10
    93e6:	2300      	movs	r3, #0
    93e8:	1c20      	adds	r0, r4, #0
    93ea:	f000 fc7b 	bl	9ce4 <__multadd>
    93ee:	4659      	mov	r1, fp
    93f0:	1c07      	adds	r7, r0, #0
    93f2:	220a      	movs	r2, #10
    93f4:	1c20      	adds	r0, r4, #0
    93f6:	2300      	movs	r3, #0
    93f8:	f000 fc74 	bl	9ce4 <__multadd>
    93fc:	4683      	mov	fp, r0
    93fe:	e7af      	b.n	9360 <_dtoa_r+0xcbc>
    9400:	9807      	ldr	r0, [sp, #28]
    9402:	4641      	mov	r1, r8
    9404:	f000 fee8 	bl	a1d8 <__mcmp>
    9408:	1c06      	adds	r6, r0, #0
    940a:	e7be      	b.n	938a <_dtoa_r+0xce6>
    940c:	1c39      	adds	r1, r7, #0
    940e:	1c20      	adds	r0, r4, #0
    9410:	220a      	movs	r2, #10
    9412:	2300      	movs	r3, #0
    9414:	f000 fc66 	bl	9ce4 <__multadd>
    9418:	1c07      	adds	r7, r0, #0
    941a:	4683      	mov	fp, r0
    941c:	e7a0      	b.n	9360 <_dtoa_r+0xcbc>
    941e:	464c      	mov	r4, r9
    9420:	e439      	b.n	8c96 <_dtoa_r+0x5f2>
    9422:	1c20      	adds	r0, r4, #0
    9424:	9907      	ldr	r1, [sp, #28]
    9426:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9428:	f000 fe14 	bl	a054 <__pow5mult>
    942c:	9007      	str	r0, [sp, #28]
    942e:	e4a4      	b.n	8d7a <_dtoa_r+0x6d6>
    9430:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9432:	4680      	mov	r8, r0
    9434:	9002      	str	r0, [sp, #8]
    9436:	f7ff fc1a 	bl	8c6e <_dtoa_r+0x5ca>
    943a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    943c:	9814      	ldr	r0, [sp, #80]	; 0x50
    943e:	1b52      	subs	r2, r2, r5
    9440:	1880      	adds	r0, r0, r2
    9442:	18ad      	adds	r5, r5, r2
    9444:	2100      	movs	r1, #0
    9446:	9014      	str	r0, [sp, #80]	; 0x50
    9448:	9513      	str	r5, [sp, #76]	; 0x4c
    944a:	4688      	mov	r8, r1
    944c:	e533      	b.n	8eb6 <_dtoa_r+0x812>
    944e:	1c20      	adds	r0, r4, #0
    9450:	9907      	ldr	r1, [sp, #28]
    9452:	f000 fdff 	bl	a054 <__pow5mult>
    9456:	9007      	str	r0, [sp, #28]
    9458:	e48f      	b.n	8d7a <_dtoa_r+0x6d6>
    945a:	4698      	mov	r8, r3
    945c:	9302      	str	r3, [sp, #8]
    945e:	f7ff fc06 	bl	8c6e <_dtoa_r+0x5ca>
    9462:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9464:	2b00      	cmp	r3, #0
    9466:	d05e      	beq.n	9526 <_dtoa_r+0xe82>
    9468:	4d21      	ldr	r5, [pc, #132]	; (94f0 <_dtoa_r+0xe4c>)
    946a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    946c:	1940      	adds	r0, r0, r5
    946e:	4688      	mov	r8, r1
    9470:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9472:	e526      	b.n	8ec2 <_dtoa_r+0x81e>
    9474:	3201      	adds	r2, #1
    9476:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9478:	0612      	lsls	r2, r2, #24
    947a:	0e12      	lsrs	r2, r2, #24
    947c:	910a      	str	r1, [sp, #40]	; 0x28
    947e:	9004      	str	r0, [sp, #16]
    9480:	701a      	strb	r2, [r3, #0]
    9482:	f7ff fc08 	bl	8c96 <_dtoa_r+0x5f2>
    9486:	4645      	mov	r5, r8
    9488:	990a      	ldr	r1, [sp, #40]	; 0x28
    948a:	465c      	mov	r4, fp
    948c:	f7ff fb04 	bl	8a98 <_dtoa_r+0x3f4>
    9490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9492:	2000      	movs	r0, #0
    9494:	1a9d      	subs	r5, r3, r2
    9496:	e514      	b.n	8ec2 <_dtoa_r+0x81e>
    9498:	9802      	ldr	r0, [sp, #8]
    949a:	46c8      	mov	r8, r9
    949c:	4682      	mov	sl, r0
    949e:	46b9      	mov	r9, r7
    94a0:	2e00      	cmp	r6, #0
    94a2:	dd0f      	ble.n	94c4 <_dtoa_r+0xe20>
    94a4:	9907      	ldr	r1, [sp, #28]
    94a6:	1c20      	adds	r0, r4, #0
    94a8:	2201      	movs	r2, #1
    94aa:	f000 fe2d 	bl	a108 <__lshift>
    94ae:	4641      	mov	r1, r8
    94b0:	9007      	str	r0, [sp, #28]
    94b2:	f000 fe91 	bl	a1d8 <__mcmp>
    94b6:	2800      	cmp	r0, #0
    94b8:	dd6d      	ble.n	9596 <_dtoa_r+0xef2>
    94ba:	2239      	movs	r2, #57	; 0x39
    94bc:	4592      	cmp	sl, r2
    94be:	d050      	beq.n	9562 <_dtoa_r+0xebe>
    94c0:	2301      	movs	r3, #1
    94c2:	449a      	add	sl, r3
    94c4:	4657      	mov	r7, sl
    94c6:	4658      	mov	r0, fp
    94c8:	702f      	strb	r7, [r5, #0]
    94ca:	3501      	adds	r5, #1
    94cc:	9002      	str	r0, [sp, #8]
    94ce:	f7ff fbd4 	bl	8c7a <_dtoa_r+0x5d6>
    94d2:	46c0      	nop			; (mov r8, r8)
    94d4:	46c0      	nop			; (mov r8, r8)
    94d6:	46c0      	nop			; (mov r8, r8)
    94d8:	00000000 	.word	0x00000000
    94dc:	40240000 	.word	0x40240000
    94e0:	00000000 	.word	0x00000000
    94e4:	3fe00000 	.word	0x3fe00000
    94e8:	0000e058 	.word	0x0000e058
    94ec:	7ff00000 	.word	0x7ff00000
    94f0:	00000433 	.word	0x00000433
    94f4:	6851      	ldr	r1, [r2, #4]
    94f6:	1c20      	adds	r0, r4, #0
    94f8:	f000 fbbe 	bl	9c78 <_Balloc>
    94fc:	9b02      	ldr	r3, [sp, #8]
    94fe:	691a      	ldr	r2, [r3, #16]
    9500:	9902      	ldr	r1, [sp, #8]
    9502:	3202      	adds	r2, #2
    9504:	1c05      	adds	r5, r0, #0
    9506:	310c      	adds	r1, #12
    9508:	0092      	lsls	r2, r2, #2
    950a:	300c      	adds	r0, #12
    950c:	f7fb fe62 	bl	51d4 <memcpy>
    9510:	1c20      	adds	r0, r4, #0
    9512:	1c29      	adds	r1, r5, #0
    9514:	2201      	movs	r2, #1
    9516:	f000 fdf7 	bl	a108 <__lshift>
    951a:	4683      	mov	fp, r0
    951c:	e719      	b.n	9352 <_dtoa_r+0xcae>
    951e:	3201      	adds	r2, #1
    9520:	701a      	strb	r2, [r3, #0]
    9522:	f7ff fbaa 	bl	8c7a <_dtoa_r+0x5d6>
    9526:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9528:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    952a:	2036      	movs	r0, #54	; 0x36
    952c:	1ac0      	subs	r0, r0, r3
    952e:	4690      	mov	r8, r2
    9530:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9532:	e4c6      	b.n	8ec2 <_dtoa_r+0x81e>
    9534:	9802      	ldr	r0, [sp, #8]
    9536:	4659      	mov	r1, fp
    9538:	46c8      	mov	r8, r9
    953a:	4682      	mov	sl, r0
    953c:	46b9      	mov	r9, r7
    953e:	9102      	str	r1, [sp, #8]
    9540:	e5ad      	b.n	909e <_dtoa_r+0x9fa>
    9542:	9802      	ldr	r0, [sp, #8]
    9544:	2139      	movs	r1, #57	; 0x39
    9546:	4682      	mov	sl, r0
    9548:	46c8      	mov	r8, r9
    954a:	46b9      	mov	r9, r7
    954c:	458a      	cmp	sl, r1
    954e:	d008      	beq.n	9562 <_dtoa_r+0xebe>
    9550:	2001      	movs	r0, #1
    9552:	1c03      	adds	r3, r0, #0
    9554:	4453      	add	r3, sl
    9556:	4659      	mov	r1, fp
    9558:	702b      	strb	r3, [r5, #0]
    955a:	182d      	adds	r5, r5, r0
    955c:	9102      	str	r1, [sp, #8]
    955e:	f7ff fb8c 	bl	8c7a <_dtoa_r+0x5d6>
    9562:	2339      	movs	r3, #57	; 0x39
    9564:	702b      	strb	r3, [r5, #0]
    9566:	465a      	mov	r2, fp
    9568:	3501      	adds	r5, #1
    956a:	9202      	str	r2, [sp, #8]
    956c:	990a      	ldr	r1, [sp, #40]	; 0x28
    956e:	e5a4      	b.n	90ba <_dtoa_r+0xa16>
    9570:	9b02      	ldr	r3, [sp, #8]
    9572:	46c8      	mov	r8, r9
    9574:	4656      	mov	r6, sl
    9576:	46b9      	mov	r9, r7
    9578:	469a      	mov	sl, r3
    957a:	2739      	movs	r7, #57	; 0x39
    957c:	45ba      	cmp	sl, r7
    957e:	d0f0      	beq.n	9562 <_dtoa_r+0xebe>
    9580:	17f3      	asrs	r3, r6, #31
    9582:	1b9b      	subs	r3, r3, r6
    9584:	0fdb      	lsrs	r3, r3, #31
    9586:	449a      	add	sl, r3
    9588:	4650      	mov	r0, sl
    958a:	4659      	mov	r1, fp
    958c:	7028      	strb	r0, [r5, #0]
    958e:	3501      	adds	r5, #1
    9590:	9102      	str	r1, [sp, #8]
    9592:	f7ff fb72 	bl	8c7a <_dtoa_r+0x5d6>
    9596:	2800      	cmp	r0, #0
    9598:	d194      	bne.n	94c4 <_dtoa_r+0xe20>
    959a:	4651      	mov	r1, sl
    959c:	07c9      	lsls	r1, r1, #31
    959e:	d591      	bpl.n	94c4 <_dtoa_r+0xe20>
    95a0:	e78b      	b.n	94ba <_dtoa_r+0xe16>
    95a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    95a4:	9204      	str	r2, [sp, #16]
    95a6:	f7ff fb76 	bl	8c96 <_dtoa_r+0x5f2>
    95aa:	2b04      	cmp	r3, #4
    95ac:	d101      	bne.n	95b2 <_dtoa_r+0xf0e>
    95ae:	f7ff fc08 	bl	8dc2 <_dtoa_r+0x71e>
    95b2:	331c      	adds	r3, #28
    95b4:	f7ff fc00 	bl	8db8 <_dtoa_r+0x714>
    95b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    95ba:	230e      	movs	r3, #14
    95bc:	1c08      	adds	r0, r1, #0
    95be:	4293      	cmp	r3, r2
    95c0:	4148      	adcs	r0, r1
    95c2:	4005      	ands	r5, r0
    95c4:	f7ff faaf 	bl	8b26 <_dtoa_r+0x482>

000095c8 <_fclose_r>:
    95c8:	b570      	push	{r4, r5, r6, lr}
    95ca:	1c05      	adds	r5, r0, #0
    95cc:	1c0c      	adds	r4, r1, #0
    95ce:	1e0e      	subs	r6, r1, #0
    95d0:	d033      	beq.n	963a <_fclose_r+0x72>
    95d2:	f7fb f9b9 	bl	4948 <__sfp_lock_acquire>
    95d6:	2d00      	cmp	r5, #0
    95d8:	d002      	beq.n	95e0 <_fclose_r+0x18>
    95da:	6bab      	ldr	r3, [r5, #56]	; 0x38
    95dc:	2b00      	cmp	r3, #0
    95de:	d030      	beq.n	9642 <_fclose_r+0x7a>
    95e0:	220c      	movs	r2, #12
    95e2:	5ea6      	ldrsh	r6, [r4, r2]
    95e4:	2e00      	cmp	r6, #0
    95e6:	d026      	beq.n	9636 <_fclose_r+0x6e>
    95e8:	1c28      	adds	r0, r5, #0
    95ea:	1c21      	adds	r1, r4, #0
    95ec:	f7fa fff0 	bl	45d0 <_fflush_r>
    95f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    95f2:	1c06      	adds	r6, r0, #0
    95f4:	2b00      	cmp	r3, #0
    95f6:	d005      	beq.n	9604 <_fclose_r+0x3c>
    95f8:	69e1      	ldr	r1, [r4, #28]
    95fa:	1c28      	adds	r0, r5, #0
    95fc:	f000 f83e 	bl	967c <fclose+0x18>
    9600:	2800      	cmp	r0, #0
    9602:	db2b      	blt.n	965c <_fclose_r+0x94>
    9604:	89a3      	ldrh	r3, [r4, #12]
    9606:	061a      	lsls	r2, r3, #24
    9608:	d423      	bmi.n	9652 <_fclose_r+0x8a>
    960a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    960c:	2900      	cmp	r1, #0
    960e:	d008      	beq.n	9622 <_fclose_r+0x5a>
    9610:	1c23      	adds	r3, r4, #0
    9612:	3340      	adds	r3, #64	; 0x40
    9614:	4299      	cmp	r1, r3
    9616:	d002      	beq.n	961e <_fclose_r+0x56>
    9618:	1c28      	adds	r0, r5, #0
    961a:	f7fb fa0b 	bl	4a34 <_free_r>
    961e:	2300      	movs	r3, #0
    9620:	6323      	str	r3, [r4, #48]	; 0x30
    9622:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9624:	2900      	cmp	r1, #0
    9626:	d004      	beq.n	9632 <_fclose_r+0x6a>
    9628:	1c28      	adds	r0, r5, #0
    962a:	f7fb fa03 	bl	4a34 <_free_r>
    962e:	2300      	movs	r3, #0
    9630:	6463      	str	r3, [r4, #68]	; 0x44
    9632:	2300      	movs	r3, #0
    9634:	81a3      	strh	r3, [r4, #12]
    9636:	f7fb f989 	bl	494c <__sfp_lock_release>
    963a:	1c30      	adds	r0, r6, #0
    963c:	bc70      	pop	{r4, r5, r6}
    963e:	bc02      	pop	{r1}
    9640:	4708      	bx	r1
    9642:	1c28      	adds	r0, r5, #0
    9644:	f7fb f8b8 	bl	47b8 <__sinit>
    9648:	220c      	movs	r2, #12
    964a:	5ea6      	ldrsh	r6, [r4, r2]
    964c:	2e00      	cmp	r6, #0
    964e:	d1cb      	bne.n	95e8 <_fclose_r+0x20>
    9650:	e7f1      	b.n	9636 <_fclose_r+0x6e>
    9652:	6921      	ldr	r1, [r4, #16]
    9654:	1c28      	adds	r0, r5, #0
    9656:	f7fb f9ed 	bl	4a34 <_free_r>
    965a:	e7d6      	b.n	960a <_fclose_r+0x42>
    965c:	2601      	movs	r6, #1
    965e:	4276      	negs	r6, r6
    9660:	e7d0      	b.n	9604 <_fclose_r+0x3c>
    9662:	46c0      	nop			; (mov r8, r8)

00009664 <fclose>:
    9664:	b508      	push	{r3, lr}
    9666:	4b04      	ldr	r3, [pc, #16]	; (9678 <fclose+0x14>)
    9668:	1c01      	adds	r1, r0, #0
    966a:	6818      	ldr	r0, [r3, #0]
    966c:	f7ff ffac 	bl	95c8 <_fclose_r>
    9670:	bc08      	pop	{r3}
    9672:	bc02      	pop	{r1}
    9674:	4708      	bx	r1
    9676:	46c0      	nop			; (mov r8, r8)
    9678:	40000000 	.word	0x40000000
    967c:	4718      	bx	r3
    967e:	46c0      	nop			; (mov r8, r8)

00009680 <__sfvwrite_r>:
    9680:	b5f0      	push	{r4, r5, r6, r7, lr}
    9682:	465f      	mov	r7, fp
    9684:	4656      	mov	r6, sl
    9686:	464d      	mov	r5, r9
    9688:	4644      	mov	r4, r8
    968a:	b4f0      	push	{r4, r5, r6, r7}
    968c:	b083      	sub	sp, #12
    968e:	9001      	str	r0, [sp, #4]
    9690:	6890      	ldr	r0, [r2, #8]
    9692:	1c0c      	adds	r4, r1, #0
    9694:	1c16      	adds	r6, r2, #0
    9696:	2800      	cmp	r0, #0
    9698:	d028      	beq.n	96ec <__sfvwrite_r+0x6c>
    969a:	898b      	ldrh	r3, [r1, #12]
    969c:	1c1a      	adds	r2, r3, #0
    969e:	0718      	lsls	r0, r3, #28
    96a0:	d52d      	bpl.n	96fe <__sfvwrite_r+0x7e>
    96a2:	6909      	ldr	r1, [r1, #16]
    96a4:	2900      	cmp	r1, #0
    96a6:	d02a      	beq.n	96fe <__sfvwrite_r+0x7e>
    96a8:	2102      	movs	r1, #2
    96aa:	6835      	ldr	r5, [r6, #0]
    96ac:	4011      	ands	r1, r2
    96ae:	d033      	beq.n	9718 <__sfvwrite_r+0x98>
    96b0:	2380      	movs	r3, #128	; 0x80
    96b2:	2200      	movs	r2, #0
    96b4:	00db      	lsls	r3, r3, #3
    96b6:	4691      	mov	r9, r2
    96b8:	1c17      	adds	r7, r2, #0
    96ba:	469a      	mov	sl, r3
    96bc:	46b0      	mov	r8, r6
    96be:	2f00      	cmp	r7, #0
    96c0:	d068      	beq.n	9794 <__sfvwrite_r+0x114>
    96c2:	69e1      	ldr	r1, [r4, #28]
    96c4:	1c3b      	adds	r3, r7, #0
    96c6:	4557      	cmp	r7, sl
    96c8:	d901      	bls.n	96ce <__sfvwrite_r+0x4e>
    96ca:	2380      	movs	r3, #128	; 0x80
    96cc:	00db      	lsls	r3, r3, #3
    96ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
    96d0:	9801      	ldr	r0, [sp, #4]
    96d2:	464a      	mov	r2, r9
    96d4:	f000 f974 	bl	99c0 <__sfvwrite_r+0x340>
    96d8:	2800      	cmp	r0, #0
    96da:	dd63      	ble.n	97a4 <__sfvwrite_r+0x124>
    96dc:	4641      	mov	r1, r8
    96de:	688b      	ldr	r3, [r1, #8]
    96e0:	4481      	add	r9, r0
    96e2:	1a3f      	subs	r7, r7, r0
    96e4:	1a18      	subs	r0, r3, r0
    96e6:	6088      	str	r0, [r1, #8]
    96e8:	2800      	cmp	r0, #0
    96ea:	d1e8      	bne.n	96be <__sfvwrite_r+0x3e>
    96ec:	b003      	add	sp, #12
    96ee:	bc3c      	pop	{r2, r3, r4, r5}
    96f0:	4690      	mov	r8, r2
    96f2:	4699      	mov	r9, r3
    96f4:	46a2      	mov	sl, r4
    96f6:	46ab      	mov	fp, r5
    96f8:	bcf0      	pop	{r4, r5, r6, r7}
    96fa:	bc02      	pop	{r1}
    96fc:	4708      	bx	r1
    96fe:	9801      	ldr	r0, [sp, #4]
    9700:	1c21      	adds	r1, r4, #0
    9702:	f7fe febd 	bl	8480 <__swsetup_r>
    9706:	2800      	cmp	r0, #0
    9708:	d000      	beq.n	970c <__sfvwrite_r+0x8c>
    970a:	e14d      	b.n	99a8 <__sfvwrite_r+0x328>
    970c:	89a3      	ldrh	r3, [r4, #12]
    970e:	2102      	movs	r1, #2
    9710:	1c1a      	adds	r2, r3, #0
    9712:	6835      	ldr	r5, [r6, #0]
    9714:	4011      	ands	r1, r2
    9716:	d1cb      	bne.n	96b0 <__sfvwrite_r+0x30>
    9718:	2001      	movs	r0, #1
    971a:	4002      	ands	r2, r0
    971c:	d049      	beq.n	97b2 <__sfvwrite_r+0x132>
    971e:	9100      	str	r1, [sp, #0]
    9720:	468a      	mov	sl, r1
    9722:	468b      	mov	fp, r1
    9724:	1c0f      	adds	r7, r1, #0
    9726:	2f00      	cmp	r7, #0
    9728:	d076      	beq.n	9818 <__sfvwrite_r+0x198>
    972a:	9a00      	ldr	r2, [sp, #0]
    972c:	2a00      	cmp	r2, #0
    972e:	d100      	bne.n	9732 <__sfvwrite_r+0xb2>
    9730:	e0c2      	b.n	98b8 <__sfvwrite_r+0x238>
    9732:	46d1      	mov	r9, sl
    9734:	45ba      	cmp	sl, r7
    9736:	d900      	bls.n	973a <__sfvwrite_r+0xba>
    9738:	46b9      	mov	r9, r7
    973a:	6963      	ldr	r3, [r4, #20]
    973c:	68a2      	ldr	r2, [r4, #8]
    973e:	18d2      	adds	r2, r2, r3
    9740:	4690      	mov	r8, r2
    9742:	6820      	ldr	r0, [r4, #0]
    9744:	2201      	movs	r2, #1
    9746:	45c1      	cmp	r9, r8
    9748:	dc00      	bgt.n	974c <__sfvwrite_r+0xcc>
    974a:	2200      	movs	r2, #0
    974c:	0612      	lsls	r2, r2, #24
    974e:	2a00      	cmp	r2, #0
    9750:	d000      	beq.n	9754 <__sfvwrite_r+0xd4>
    9752:	e09e      	b.n	9892 <__sfvwrite_r+0x212>
    9754:	4599      	cmp	r9, r3
    9756:	da00      	bge.n	975a <__sfvwrite_r+0xda>
    9758:	e07e      	b.n	9858 <__sfvwrite_r+0x1d8>
    975a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    975c:	69e1      	ldr	r1, [r4, #28]
    975e:	4684      	mov	ip, r0
    9760:	465a      	mov	r2, fp
    9762:	9801      	ldr	r0, [sp, #4]
    9764:	f000 f92d 	bl	99c2 <__sfvwrite_r+0x342>
    9768:	2100      	movs	r1, #0
    976a:	4680      	mov	r8, r0
    976c:	4588      	cmp	r8, r1
    976e:	dd19      	ble.n	97a4 <__sfvwrite_r+0x124>
    9770:	4653      	mov	r3, sl
    9772:	4640      	mov	r0, r8
    9774:	1a1b      	subs	r3, r3, r0
    9776:	469a      	mov	sl, r3
    9778:	2100      	movs	r1, #0
    977a:	458a      	cmp	sl, r1
    977c:	d100      	bne.n	9780 <__sfvwrite_r+0x100>
    977e:	e07f      	b.n	9880 <__sfvwrite_r+0x200>
    9780:	68b3      	ldr	r3, [r6, #8]
    9782:	4640      	mov	r0, r8
    9784:	1a1b      	subs	r3, r3, r0
    9786:	44c3      	add	fp, r8
    9788:	1a3f      	subs	r7, r7, r0
    978a:	60b3      	str	r3, [r6, #8]
    978c:	2b00      	cmp	r3, #0
    978e:	d1ca      	bne.n	9726 <__sfvwrite_r+0xa6>
    9790:	1c18      	adds	r0, r3, #0
    9792:	e7ab      	b.n	96ec <__sfvwrite_r+0x6c>
    9794:	682b      	ldr	r3, [r5, #0]
    9796:	686f      	ldr	r7, [r5, #4]
    9798:	4699      	mov	r9, r3
    979a:	3508      	adds	r5, #8
    979c:	e78f      	b.n	96be <__sfvwrite_r+0x3e>
    979e:	9a01      	ldr	r2, [sp, #4]
    97a0:	230c      	movs	r3, #12
    97a2:	6013      	str	r3, [r2, #0]
    97a4:	89a3      	ldrh	r3, [r4, #12]
    97a6:	2240      	movs	r2, #64	; 0x40
    97a8:	4313      	orrs	r3, r2
    97aa:	2001      	movs	r0, #1
    97ac:	81a3      	strh	r3, [r4, #12]
    97ae:	4240      	negs	r0, r0
    97b0:	e79c      	b.n	96ec <__sfvwrite_r+0x6c>
    97b2:	4691      	mov	r9, r2
    97b4:	1c17      	adds	r7, r2, #0
    97b6:	2f00      	cmp	r7, #0
    97b8:	d029      	beq.n	980e <__sfvwrite_r+0x18e>
    97ba:	68a1      	ldr	r1, [r4, #8]
    97bc:	2280      	movs	r2, #128	; 0x80
    97be:	0092      	lsls	r2, r2, #2
    97c0:	4688      	mov	r8, r1
    97c2:	4213      	tst	r3, r2
    97c4:	d02f      	beq.n	9826 <__sfvwrite_r+0x1a6>
    97c6:	468a      	mov	sl, r1
    97c8:	4547      	cmp	r7, r8
    97ca:	d340      	bcc.n	984e <__sfvwrite_r+0x1ce>
    97cc:	2090      	movs	r0, #144	; 0x90
    97ce:	00c0      	lsls	r0, r0, #3
    97d0:	4203      	tst	r3, r0
    97d2:	d000      	beq.n	97d6 <__sfvwrite_r+0x156>
    97d4:	e09d      	b.n	9912 <__sfvwrite_r+0x292>
    97d6:	6820      	ldr	r0, [r4, #0]
    97d8:	468b      	mov	fp, r1
    97da:	46b8      	mov	r8, r7
    97dc:	4652      	mov	r2, sl
    97de:	4649      	mov	r1, r9
    97e0:	f000 f9fc 	bl	9bdc <memmove>
    97e4:	68a3      	ldr	r3, [r4, #8]
    97e6:	465a      	mov	r2, fp
    97e8:	1a9b      	subs	r3, r3, r2
    97ea:	60a3      	str	r3, [r4, #8]
    97ec:	6823      	ldr	r3, [r4, #0]
    97ee:	4453      	add	r3, sl
    97f0:	6023      	str	r3, [r4, #0]
    97f2:	46ba      	mov	sl, r7
    97f4:	68b0      	ldr	r0, [r6, #8]
    97f6:	4643      	mov	r3, r8
    97f8:	4652      	mov	r2, sl
    97fa:	1ac0      	subs	r0, r0, r3
    97fc:	44d1      	add	r9, sl
    97fe:	1abf      	subs	r7, r7, r2
    9800:	60b0      	str	r0, [r6, #8]
    9802:	2800      	cmp	r0, #0
    9804:	d100      	bne.n	9808 <__sfvwrite_r+0x188>
    9806:	e771      	b.n	96ec <__sfvwrite_r+0x6c>
    9808:	89a3      	ldrh	r3, [r4, #12]
    980a:	2f00      	cmp	r7, #0
    980c:	d1d5      	bne.n	97ba <__sfvwrite_r+0x13a>
    980e:	6828      	ldr	r0, [r5, #0]
    9810:	686f      	ldr	r7, [r5, #4]
    9812:	4681      	mov	r9, r0
    9814:	3508      	adds	r5, #8
    9816:	e7ce      	b.n	97b6 <__sfvwrite_r+0x136>
    9818:	6828      	ldr	r0, [r5, #0]
    981a:	2100      	movs	r1, #0
    981c:	686f      	ldr	r7, [r5, #4]
    981e:	4683      	mov	fp, r0
    9820:	3508      	adds	r5, #8
    9822:	9100      	str	r1, [sp, #0]
    9824:	e77f      	b.n	9726 <__sfvwrite_r+0xa6>
    9826:	6820      	ldr	r0, [r4, #0]
    9828:	468a      	mov	sl, r1
    982a:	45b8      	cmp	r8, r7
    982c:	d35f      	bcc.n	98ee <__sfvwrite_r+0x26e>
    982e:	6963      	ldr	r3, [r4, #20]
    9830:	429f      	cmp	r7, r3
    9832:	d34f      	bcc.n	98d4 <__sfvwrite_r+0x254>
    9834:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9836:	69e1      	ldr	r1, [r4, #28]
    9838:	4684      	mov	ip, r0
    983a:	464a      	mov	r2, r9
    983c:	9801      	ldr	r0, [sp, #4]
    983e:	f000 f8c0 	bl	99c2 <__sfvwrite_r+0x342>
    9842:	2100      	movs	r1, #0
    9844:	4680      	mov	r8, r0
    9846:	4588      	cmp	r8, r1
    9848:	ddac      	ble.n	97a4 <__sfvwrite_r+0x124>
    984a:	4682      	mov	sl, r0
    984c:	e7d2      	b.n	97f4 <__sfvwrite_r+0x174>
    984e:	46bb      	mov	fp, r7
    9850:	6820      	ldr	r0, [r4, #0]
    9852:	46ba      	mov	sl, r7
    9854:	46b8      	mov	r8, r7
    9856:	e7c1      	b.n	97dc <__sfvwrite_r+0x15c>
    9858:	4659      	mov	r1, fp
    985a:	464a      	mov	r2, r9
    985c:	f000 f9be 	bl	9bdc <memmove>
    9860:	68a3      	ldr	r3, [r4, #8]
    9862:	464a      	mov	r2, r9
    9864:	1a9b      	subs	r3, r3, r2
    9866:	60a3      	str	r3, [r4, #8]
    9868:	6823      	ldr	r3, [r4, #0]
    986a:	46c8      	mov	r8, r9
    986c:	444b      	add	r3, r9
    986e:	6023      	str	r3, [r4, #0]
    9870:	4640      	mov	r0, r8
    9872:	4653      	mov	r3, sl
    9874:	1a1b      	subs	r3, r3, r0
    9876:	469a      	mov	sl, r3
    9878:	2100      	movs	r1, #0
    987a:	458a      	cmp	sl, r1
    987c:	d000      	beq.n	9880 <__sfvwrite_r+0x200>
    987e:	e77f      	b.n	9780 <__sfvwrite_r+0x100>
    9880:	9801      	ldr	r0, [sp, #4]
    9882:	1c21      	adds	r1, r4, #0
    9884:	f7fa fea4 	bl	45d0 <_fflush_r>
    9888:	2800      	cmp	r0, #0
    988a:	d18b      	bne.n	97a4 <__sfvwrite_r+0x124>
    988c:	4652      	mov	r2, sl
    988e:	9200      	str	r2, [sp, #0]
    9890:	e776      	b.n	9780 <__sfvwrite_r+0x100>
    9892:	6922      	ldr	r2, [r4, #16]
    9894:	4282      	cmp	r2, r0
    9896:	d300      	bcc.n	989a <__sfvwrite_r+0x21a>
    9898:	e75c      	b.n	9754 <__sfvwrite_r+0xd4>
    989a:	4659      	mov	r1, fp
    989c:	4642      	mov	r2, r8
    989e:	f000 f99d 	bl	9bdc <memmove>
    98a2:	6823      	ldr	r3, [r4, #0]
    98a4:	4443      	add	r3, r8
    98a6:	6023      	str	r3, [r4, #0]
    98a8:	9801      	ldr	r0, [sp, #4]
    98aa:	1c21      	adds	r1, r4, #0
    98ac:	f7fa fe90 	bl	45d0 <_fflush_r>
    98b0:	2800      	cmp	r0, #0
    98b2:	d100      	bne.n	98b6 <__sfvwrite_r+0x236>
    98b4:	e75c      	b.n	9770 <__sfvwrite_r+0xf0>
    98b6:	e775      	b.n	97a4 <__sfvwrite_r+0x124>
    98b8:	4658      	mov	r0, fp
    98ba:	210a      	movs	r1, #10
    98bc:	1c3a      	adds	r2, r7, #0
    98be:	f000 f945 	bl	9b4c <memchr>
    98c2:	2800      	cmp	r0, #0
    98c4:	d06b      	beq.n	999e <__sfvwrite_r+0x31e>
    98c6:	3001      	adds	r0, #1
    98c8:	465b      	mov	r3, fp
    98ca:	1ac3      	subs	r3, r0, r3
    98cc:	2001      	movs	r0, #1
    98ce:	469a      	mov	sl, r3
    98d0:	9000      	str	r0, [sp, #0]
    98d2:	e72e      	b.n	9732 <__sfvwrite_r+0xb2>
    98d4:	4649      	mov	r1, r9
    98d6:	1c3a      	adds	r2, r7, #0
    98d8:	f000 f980 	bl	9bdc <memmove>
    98dc:	68a3      	ldr	r3, [r4, #8]
    98de:	1bdb      	subs	r3, r3, r7
    98e0:	60a3      	str	r3, [r4, #8]
    98e2:	6823      	ldr	r3, [r4, #0]
    98e4:	19db      	adds	r3, r3, r7
    98e6:	46b8      	mov	r8, r7
    98e8:	6023      	str	r3, [r4, #0]
    98ea:	46ba      	mov	sl, r7
    98ec:	e782      	b.n	97f4 <__sfvwrite_r+0x174>
    98ee:	6923      	ldr	r3, [r4, #16]
    98f0:	4283      	cmp	r3, r0
    98f2:	d29c      	bcs.n	982e <__sfvwrite_r+0x1ae>
    98f4:	4649      	mov	r1, r9
    98f6:	4642      	mov	r2, r8
    98f8:	f000 f970 	bl	9bdc <memmove>
    98fc:	6823      	ldr	r3, [r4, #0]
    98fe:	4443      	add	r3, r8
    9900:	6023      	str	r3, [r4, #0]
    9902:	9801      	ldr	r0, [sp, #4]
    9904:	1c21      	adds	r1, r4, #0
    9906:	f7fa fe63 	bl	45d0 <_fflush_r>
    990a:	2800      	cmp	r0, #0
    990c:	d100      	bne.n	9910 <__sfvwrite_r+0x290>
    990e:	e771      	b.n	97f4 <__sfvwrite_r+0x174>
    9910:	e748      	b.n	97a4 <__sfvwrite_r+0x124>
    9912:	6921      	ldr	r1, [r4, #16]
    9914:	6822      	ldr	r2, [r4, #0]
    9916:	1a52      	subs	r2, r2, r1
    9918:	9200      	str	r2, [sp, #0]
    991a:	6962      	ldr	r2, [r4, #20]
    991c:	0050      	lsls	r0, r2, #1
    991e:	1882      	adds	r2, r0, r2
    9920:	0fd0      	lsrs	r0, r2, #31
    9922:	1882      	adds	r2, r0, r2
    9924:	9800      	ldr	r0, [sp, #0]
    9926:	1052      	asrs	r2, r2, #1
    9928:	3001      	adds	r0, #1
    992a:	4690      	mov	r8, r2
    992c:	19c0      	adds	r0, r0, r7
    992e:	4580      	cmp	r8, r0
    9930:	d201      	bcs.n	9936 <__sfvwrite_r+0x2b6>
    9932:	4680      	mov	r8, r0
    9934:	1c02      	adds	r2, r0, #0
    9936:	2080      	movs	r0, #128	; 0x80
    9938:	00c0      	lsls	r0, r0, #3
    993a:	4203      	tst	r3, r0
    993c:	d020      	beq.n	9980 <__sfvwrite_r+0x300>
    993e:	1c11      	adds	r1, r2, #0
    9940:	9801      	ldr	r0, [sp, #4]
    9942:	f7fb f9c1 	bl	4cc8 <_malloc_r>
    9946:	2100      	movs	r1, #0
    9948:	4682      	mov	sl, r0
    994a:	458a      	cmp	sl, r1
    994c:	d100      	bne.n	9950 <__sfvwrite_r+0x2d0>
    994e:	e726      	b.n	979e <__sfvwrite_r+0x11e>
    9950:	9a00      	ldr	r2, [sp, #0]
    9952:	6921      	ldr	r1, [r4, #16]
    9954:	f7fb fc3e 	bl	51d4 <memcpy>
    9958:	89a2      	ldrh	r2, [r4, #12]
    995a:	4b18      	ldr	r3, [pc, #96]	; (99bc <__sfvwrite_r+0x33c>)
    995c:	4013      	ands	r3, r2
    995e:	2280      	movs	r2, #128	; 0x80
    9960:	4313      	orrs	r3, r2
    9962:	81a3      	strh	r3, [r4, #12]
    9964:	9a00      	ldr	r2, [sp, #0]
    9966:	4643      	mov	r3, r8
    9968:	1c10      	adds	r0, r2, #0
    996a:	4651      	mov	r1, sl
    996c:	4450      	add	r0, sl
    996e:	6163      	str	r3, [r4, #20]
    9970:	1a9b      	subs	r3, r3, r2
    9972:	6121      	str	r1, [r4, #16]
    9974:	6020      	str	r0, [r4, #0]
    9976:	46bb      	mov	fp, r7
    9978:	60a3      	str	r3, [r4, #8]
    997a:	46ba      	mov	sl, r7
    997c:	46b8      	mov	r8, r7
    997e:	e72d      	b.n	97dc <__sfvwrite_r+0x15c>
    9980:	9801      	ldr	r0, [sp, #4]
    9982:	f000 fec1 	bl	a708 <_realloc_r>
    9986:	2300      	movs	r3, #0
    9988:	4682      	mov	sl, r0
    998a:	459a      	cmp	sl, r3
    998c:	d1ea      	bne.n	9964 <__sfvwrite_r+0x2e4>
    998e:	9801      	ldr	r0, [sp, #4]
    9990:	6921      	ldr	r1, [r4, #16]
    9992:	f7fb f84f 	bl	4a34 <_free_r>
    9996:	9801      	ldr	r0, [sp, #4]
    9998:	230c      	movs	r3, #12
    999a:	6003      	str	r3, [r0, #0]
    999c:	e702      	b.n	97a4 <__sfvwrite_r+0x124>
    999e:	1c79      	adds	r1, r7, #1
    99a0:	2201      	movs	r2, #1
    99a2:	468a      	mov	sl, r1
    99a4:	9200      	str	r2, [sp, #0]
    99a6:	e6c4      	b.n	9732 <__sfvwrite_r+0xb2>
    99a8:	89a3      	ldrh	r3, [r4, #12]
    99aa:	2240      	movs	r2, #64	; 0x40
    99ac:	4313      	orrs	r3, r2
    99ae:	9901      	ldr	r1, [sp, #4]
    99b0:	81a3      	strh	r3, [r4, #12]
    99b2:	2001      	movs	r0, #1
    99b4:	2309      	movs	r3, #9
    99b6:	600b      	str	r3, [r1, #0]
    99b8:	4240      	negs	r0, r0
    99ba:	e697      	b.n	96ec <__sfvwrite_r+0x6c>
    99bc:	fffffb7f 	.word	0xfffffb7f
    99c0:	4730      	bx	r6
    99c2:	4760      	bx	ip

000099c4 <_setlocale_r>:
    99c4:	b538      	push	{r3, r4, r5, lr}
    99c6:	1e14      	subs	r4, r2, #0
    99c8:	d005      	beq.n	99d6 <_setlocale_r+0x12>
    99ca:	1c20      	adds	r0, r4, #0
    99cc:	490d      	ldr	r1, [pc, #52]	; (9a04 <_setlocale_r+0x40>)
    99ce:	f001 f8fb 	bl	abc8 <strcmp>
    99d2:	2800      	cmp	r0, #0
    99d4:	d103      	bne.n	99de <_setlocale_r+0x1a>
    99d6:	480c      	ldr	r0, [pc, #48]	; (9a08 <_setlocale_r+0x44>)
    99d8:	bc38      	pop	{r3, r4, r5}
    99da:	bc02      	pop	{r1}
    99dc:	4708      	bx	r1
    99de:	4d0a      	ldr	r5, [pc, #40]	; (9a08 <_setlocale_r+0x44>)
    99e0:	1c20      	adds	r0, r4, #0
    99e2:	1c29      	adds	r1, r5, #0
    99e4:	f001 f8f0 	bl	abc8 <strcmp>
    99e8:	1c03      	adds	r3, r0, #0
    99ea:	1c28      	adds	r0, r5, #0
    99ec:	2b00      	cmp	r3, #0
    99ee:	d0f3      	beq.n	99d8 <_setlocale_r+0x14>
    99f0:	1c20      	adds	r0, r4, #0
    99f2:	4906      	ldr	r1, [pc, #24]	; (9a0c <_setlocale_r+0x48>)
    99f4:	f001 f8e8 	bl	abc8 <strcmp>
    99f8:	1c03      	adds	r3, r0, #0
    99fa:	2000      	movs	r0, #0
    99fc:	4283      	cmp	r3, r0
    99fe:	d1eb      	bne.n	99d8 <_setlocale_r+0x14>
    9a00:	1c28      	adds	r0, r5, #0
    9a02:	e7e9      	b.n	99d8 <_setlocale_r+0x14>
    9a04:	0000e94c 	.word	0x0000e94c
    9a08:	0000e8f4 	.word	0x0000e8f4
    9a0c:	0000e7fc 	.word	0x0000e7fc

00009a10 <__locale_charset>:
    9a10:	4800      	ldr	r0, [pc, #0]	; (9a14 <__locale_charset+0x4>)
    9a12:	4770      	bx	lr
    9a14:	40000840 	.word	0x40000840

00009a18 <__locale_mb_cur_max>:
    9a18:	4b01      	ldr	r3, [pc, #4]	; (9a20 <__locale_mb_cur_max+0x8>)
    9a1a:	6a18      	ldr	r0, [r3, #32]
    9a1c:	4770      	bx	lr
    9a1e:	46c0      	nop			; (mov r8, r8)
    9a20:	40000840 	.word	0x40000840

00009a24 <__locale_msgcharset>:
    9a24:	4801      	ldr	r0, [pc, #4]	; (9a2c <__locale_msgcharset+0x8>)
    9a26:	3024      	adds	r0, #36	; 0x24
    9a28:	4770      	bx	lr
    9a2a:	46c0      	nop			; (mov r8, r8)
    9a2c:	40000840 	.word	0x40000840

00009a30 <__locale_cjk_lang>:
    9a30:	2000      	movs	r0, #0
    9a32:	4770      	bx	lr

00009a34 <_localeconv_r>:
    9a34:	4801      	ldr	r0, [pc, #4]	; (9a3c <_localeconv_r+0x8>)
    9a36:	3044      	adds	r0, #68	; 0x44
    9a38:	4770      	bx	lr
    9a3a:	46c0      	nop			; (mov r8, r8)
    9a3c:	40000840 	.word	0x40000840

00009a40 <setlocale>:
    9a40:	b508      	push	{r3, lr}
    9a42:	1c0a      	adds	r2, r1, #0
    9a44:	4904      	ldr	r1, [pc, #16]	; (9a58 <setlocale+0x18>)
    9a46:	1c03      	adds	r3, r0, #0
    9a48:	6808      	ldr	r0, [r1, #0]
    9a4a:	1c19      	adds	r1, r3, #0
    9a4c:	f7ff ffba 	bl	99c4 <_setlocale_r>
    9a50:	bc08      	pop	{r3}
    9a52:	bc02      	pop	{r1}
    9a54:	4708      	bx	r1
    9a56:	46c0      	nop			; (mov r8, r8)
    9a58:	40000000 	.word	0x40000000

00009a5c <localeconv>:
    9a5c:	4801      	ldr	r0, [pc, #4]	; (9a64 <localeconv+0x8>)
    9a5e:	3044      	adds	r0, #68	; 0x44
    9a60:	4770      	bx	lr
    9a62:	46c0      	nop			; (mov r8, r8)
    9a64:	40000840 	.word	0x40000840

00009a68 <__smakebuf_r>:
    9a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a6a:	898b      	ldrh	r3, [r1, #12]
    9a6c:	b091      	sub	sp, #68	; 0x44
    9a6e:	1c05      	adds	r5, r0, #0
    9a70:	1c0c      	adds	r4, r1, #0
    9a72:	1c1a      	adds	r2, r3, #0
    9a74:	0798      	lsls	r0, r3, #30
    9a76:	d442      	bmi.n	9afe <__smakebuf_r+0x96>
    9a78:	200e      	movs	r0, #14
    9a7a:	5e09      	ldrsh	r1, [r1, r0]
    9a7c:	2900      	cmp	r1, #0
    9a7e:	db1b      	blt.n	9ab8 <__smakebuf_r+0x50>
    9a80:	1c28      	adds	r0, r5, #0
    9a82:	aa01      	add	r2, sp, #4
    9a84:	f7f8 f870 	bl	1b68 <_fstat_r>
    9a88:	2800      	cmp	r0, #0
    9a8a:	db13      	blt.n	9ab4 <__smakebuf_r+0x4c>
    9a8c:	9a02      	ldr	r2, [sp, #8]
    9a8e:	23f0      	movs	r3, #240	; 0xf0
    9a90:	021b      	lsls	r3, r3, #8
    9a92:	4013      	ands	r3, r2
    9a94:	4a2a      	ldr	r2, [pc, #168]	; (9b40 <__smakebuf_r+0xd8>)
    9a96:	189f      	adds	r7, r3, r2
    9a98:	427a      	negs	r2, r7
    9a9a:	4157      	adcs	r7, r2
    9a9c:	2280      	movs	r2, #128	; 0x80
    9a9e:	0212      	lsls	r2, r2, #8
    9aa0:	4293      	cmp	r3, r2
    9aa2:	d042      	beq.n	9b2a <__smakebuf_r+0xc2>
    9aa4:	89a2      	ldrh	r2, [r4, #12]
    9aa6:	2380      	movs	r3, #128	; 0x80
    9aa8:	011b      	lsls	r3, r3, #4
    9aaa:	4313      	orrs	r3, r2
    9aac:	2680      	movs	r6, #128	; 0x80
    9aae:	81a3      	strh	r3, [r4, #12]
    9ab0:	00f6      	lsls	r6, r6, #3
    9ab2:	e009      	b.n	9ac8 <__smakebuf_r+0x60>
    9ab4:	89a3      	ldrh	r3, [r4, #12]
    9ab6:	1c1a      	adds	r2, r3, #0
    9ab8:	2640      	movs	r6, #64	; 0x40
    9aba:	0611      	lsls	r1, r2, #24
    9abc:	d532      	bpl.n	9b24 <__smakebuf_r+0xbc>
    9abe:	2280      	movs	r2, #128	; 0x80
    9ac0:	0112      	lsls	r2, r2, #4
    9ac2:	4313      	orrs	r3, r2
    9ac4:	81a3      	strh	r3, [r4, #12]
    9ac6:	2700      	movs	r7, #0
    9ac8:	1c28      	adds	r0, r5, #0
    9aca:	1c31      	adds	r1, r6, #0
    9acc:	f7fb f8fc 	bl	4cc8 <_malloc_r>
    9ad0:	2800      	cmp	r0, #0
    9ad2:	d00e      	beq.n	9af2 <__smakebuf_r+0x8a>
    9ad4:	4b1b      	ldr	r3, [pc, #108]	; (9b44 <__smakebuf_r+0xdc>)
    9ad6:	63eb      	str	r3, [r5, #60]	; 0x3c
    9ad8:	89a3      	ldrh	r3, [r4, #12]
    9ada:	2280      	movs	r2, #128	; 0x80
    9adc:	4313      	orrs	r3, r2
    9ade:	81a3      	strh	r3, [r4, #12]
    9ae0:	6020      	str	r0, [r4, #0]
    9ae2:	6120      	str	r0, [r4, #16]
    9ae4:	6166      	str	r6, [r4, #20]
    9ae6:	2f00      	cmp	r7, #0
    9ae8:	d110      	bne.n	9b0c <__smakebuf_r+0xa4>
    9aea:	b011      	add	sp, #68	; 0x44
    9aec:	bcf0      	pop	{r4, r5, r6, r7}
    9aee:	bc01      	pop	{r0}
    9af0:	4700      	bx	r0
    9af2:	89a3      	ldrh	r3, [r4, #12]
    9af4:	0598      	lsls	r0, r3, #22
    9af6:	d4f8      	bmi.n	9aea <__smakebuf_r+0x82>
    9af8:	2202      	movs	r2, #2
    9afa:	4313      	orrs	r3, r2
    9afc:	81a3      	strh	r3, [r4, #12]
    9afe:	1c23      	adds	r3, r4, #0
    9b00:	3343      	adds	r3, #67	; 0x43
    9b02:	6023      	str	r3, [r4, #0]
    9b04:	6123      	str	r3, [r4, #16]
    9b06:	2301      	movs	r3, #1
    9b08:	6163      	str	r3, [r4, #20]
    9b0a:	e7ee      	b.n	9aea <__smakebuf_r+0x82>
    9b0c:	220e      	movs	r2, #14
    9b0e:	5ea1      	ldrsh	r1, [r4, r2]
    9b10:	1c28      	adds	r0, r5, #0
    9b12:	f002 fdd5 	bl	c6c0 <_isatty_r>
    9b16:	2800      	cmp	r0, #0
    9b18:	d0e7      	beq.n	9aea <__smakebuf_r+0x82>
    9b1a:	89a3      	ldrh	r3, [r4, #12]
    9b1c:	2201      	movs	r2, #1
    9b1e:	4313      	orrs	r3, r2
    9b20:	81a3      	strh	r3, [r4, #12]
    9b22:	e7e2      	b.n	9aea <__smakebuf_r+0x82>
    9b24:	19b6      	adds	r6, r6, r6
    9b26:	00f6      	lsls	r6, r6, #3
    9b28:	e7c9      	b.n	9abe <__smakebuf_r+0x56>
    9b2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9b2c:	4b06      	ldr	r3, [pc, #24]	; (9b48 <__smakebuf_r+0xe0>)
    9b2e:	429a      	cmp	r2, r3
    9b30:	d1b8      	bne.n	9aa4 <__smakebuf_r+0x3c>
    9b32:	89a3      	ldrh	r3, [r4, #12]
    9b34:	2680      	movs	r6, #128	; 0x80
    9b36:	00f6      	lsls	r6, r6, #3
    9b38:	4333      	orrs	r3, r6
    9b3a:	81a3      	strh	r3, [r4, #12]
    9b3c:	64e6      	str	r6, [r4, #76]	; 0x4c
    9b3e:	e7c3      	b.n	9ac8 <__smakebuf_r+0x60>
    9b40:	ffffe000 	.word	0xffffe000
    9b44:	00004765 	.word	0x00004765
    9b48:	00005541 	.word	0x00005541

00009b4c <memchr>:
    9b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b4e:	0609      	lsls	r1, r1, #24
    9b50:	2403      	movs	r4, #3
    9b52:	1c03      	adds	r3, r0, #0
    9b54:	0e09      	lsrs	r1, r1, #24
    9b56:	4220      	tst	r0, r4
    9b58:	d00f      	beq.n	9b7a <memchr+0x2e>
    9b5a:	1e10      	subs	r0, r2, #0
    9b5c:	d01f      	beq.n	9b9e <memchr+0x52>
    9b5e:	781d      	ldrb	r5, [r3, #0]
    9b60:	1c18      	adds	r0, r3, #0
    9b62:	428d      	cmp	r5, r1
    9b64:	d105      	bne.n	9b72 <memchr+0x26>
    9b66:	e01a      	b.n	9b9e <memchr+0x52>
    9b68:	2a00      	cmp	r2, #0
    9b6a:	d017      	beq.n	9b9c <memchr+0x50>
    9b6c:	7818      	ldrb	r0, [r3, #0]
    9b6e:	4288      	cmp	r0, r1
    9b70:	d018      	beq.n	9ba4 <memchr+0x58>
    9b72:	3301      	adds	r3, #1
    9b74:	3a01      	subs	r2, #1
    9b76:	4223      	tst	r3, r4
    9b78:	d1f6      	bne.n	9b68 <memchr+0x1c>
    9b7a:	2a03      	cmp	r2, #3
    9b7c:	d814      	bhi.n	9ba8 <memchr+0x5c>
    9b7e:	1e10      	subs	r0, r2, #0
    9b80:	d00d      	beq.n	9b9e <memchr+0x52>
    9b82:	781c      	ldrb	r4, [r3, #0]
    9b84:	1c18      	adds	r0, r3, #0
    9b86:	3a01      	subs	r2, #1
    9b88:	428c      	cmp	r4, r1
    9b8a:	d105      	bne.n	9b98 <memchr+0x4c>
    9b8c:	e007      	b.n	9b9e <memchr+0x52>
    9b8e:	3301      	adds	r3, #1
    9b90:	7818      	ldrb	r0, [r3, #0]
    9b92:	3a01      	subs	r2, #1
    9b94:	4288      	cmp	r0, r1
    9b96:	d005      	beq.n	9ba4 <memchr+0x58>
    9b98:	2a00      	cmp	r2, #0
    9b9a:	d1f8      	bne.n	9b8e <memchr+0x42>
    9b9c:	1c10      	adds	r0, r2, #0
    9b9e:	bcf0      	pop	{r4, r5, r6, r7}
    9ba0:	bc02      	pop	{r1}
    9ba2:	4708      	bx	r1
    9ba4:	1c18      	adds	r0, r3, #0
    9ba6:	e7fa      	b.n	9b9e <memchr+0x52>
    9ba8:	020f      	lsls	r7, r1, #8
    9baa:	430f      	orrs	r7, r1
    9bac:	0438      	lsls	r0, r7, #16
    9bae:	4307      	orrs	r7, r0
    9bb0:	4808      	ldr	r0, [pc, #32]	; (9bd4 <memchr+0x88>)
    9bb2:	4684      	mov	ip, r0
    9bb4:	1c18      	adds	r0, r3, #0
    9bb6:	cb10      	ldmia	r3!, {r4}
    9bb8:	4e07      	ldr	r6, [pc, #28]	; (9bd8 <memchr+0x8c>)
    9bba:	407c      	eors	r4, r7
    9bbc:	19a5      	adds	r5, r4, r6
    9bbe:	43a5      	bics	r5, r4
    9bc0:	1c2c      	adds	r4, r5, #0
    9bc2:	4665      	mov	r5, ip
    9bc4:	422c      	tst	r4, r5
    9bc6:	d103      	bne.n	9bd0 <memchr+0x84>
    9bc8:	3a04      	subs	r2, #4
    9bca:	1c18      	adds	r0, r3, #0
    9bcc:	2a03      	cmp	r2, #3
    9bce:	d8f1      	bhi.n	9bb4 <memchr+0x68>
    9bd0:	1c03      	adds	r3, r0, #0
    9bd2:	e7d4      	b.n	9b7e <memchr+0x32>
    9bd4:	80808080 	.word	0x80808080
    9bd8:	fefefeff 	.word	0xfefefeff

00009bdc <memmove>:
    9bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bde:	1c05      	adds	r5, r0, #0
    9be0:	1c0e      	adds	r6, r1, #0
    9be2:	4288      	cmp	r0, r1
    9be4:	d90f      	bls.n	9c06 <memmove+0x2a>
    9be6:	188b      	adds	r3, r1, r2
    9be8:	4298      	cmp	r0, r3
    9bea:	d20c      	bcs.n	9c06 <memmove+0x2a>
    9bec:	2a00      	cmp	r2, #0
    9bee:	d007      	beq.n	9c00 <memmove+0x24>
    9bf0:	1881      	adds	r1, r0, r2
    9bf2:	3b01      	subs	r3, #1
    9bf4:	781c      	ldrb	r4, [r3, #0]
    9bf6:	3901      	subs	r1, #1
    9bf8:	3a01      	subs	r2, #1
    9bfa:	700c      	strb	r4, [r1, #0]
    9bfc:	2a00      	cmp	r2, #0
    9bfe:	d1f8      	bne.n	9bf2 <memmove+0x16>
    9c00:	bcf0      	pop	{r4, r5, r6, r7}
    9c02:	bc02      	pop	{r1}
    9c04:	4708      	bx	r1
    9c06:	2a0f      	cmp	r2, #15
    9c08:	d92d      	bls.n	9c66 <memmove+0x8a>
    9c0a:	1c0b      	adds	r3, r1, #0
    9c0c:	4303      	orrs	r3, r0
    9c0e:	079c      	lsls	r4, r3, #30
    9c10:	d12b      	bne.n	9c6a <memmove+0x8e>
    9c12:	1c0c      	adds	r4, r1, #0
    9c14:	1c03      	adds	r3, r0, #0
    9c16:	1c15      	adds	r5, r2, #0
    9c18:	6826      	ldr	r6, [r4, #0]
    9c1a:	601e      	str	r6, [r3, #0]
    9c1c:	6866      	ldr	r6, [r4, #4]
    9c1e:	605e      	str	r6, [r3, #4]
    9c20:	68a6      	ldr	r6, [r4, #8]
    9c22:	609e      	str	r6, [r3, #8]
    9c24:	68e6      	ldr	r6, [r4, #12]
    9c26:	3d10      	subs	r5, #16
    9c28:	60de      	str	r6, [r3, #12]
    9c2a:	3410      	adds	r4, #16
    9c2c:	3310      	adds	r3, #16
    9c2e:	2d0f      	cmp	r5, #15
    9c30:	d8f2      	bhi.n	9c18 <memmove+0x3c>
    9c32:	3a10      	subs	r2, #16
    9c34:	0916      	lsrs	r6, r2, #4
    9c36:	3601      	adds	r6, #1
    9c38:	230f      	movs	r3, #15
    9c3a:	0136      	lsls	r6, r6, #4
    9c3c:	401a      	ands	r2, r3
    9c3e:	1985      	adds	r5, r0, r6
    9c40:	198e      	adds	r6, r1, r6
    9c42:	2a03      	cmp	r2, #3
    9c44:	d90f      	bls.n	9c66 <memmove+0x8a>
    9c46:	1c37      	adds	r7, r6, #0
    9c48:	1c2c      	adds	r4, r5, #0
    9c4a:	1c13      	adds	r3, r2, #0
    9c4c:	cf02      	ldmia	r7!, {r1}
    9c4e:	3b04      	subs	r3, #4
    9c50:	c402      	stmia	r4!, {r1}
    9c52:	2b03      	cmp	r3, #3
    9c54:	d8fa      	bhi.n	9c4c <memmove+0x70>
    9c56:	3a04      	subs	r2, #4
    9c58:	0893      	lsrs	r3, r2, #2
    9c5a:	3301      	adds	r3, #1
    9c5c:	009b      	lsls	r3, r3, #2
    9c5e:	18ed      	adds	r5, r5, r3
    9c60:	18f6      	adds	r6, r6, r3
    9c62:	2303      	movs	r3, #3
    9c64:	401a      	ands	r2, r3
    9c66:	2a00      	cmp	r2, #0
    9c68:	d0ca      	beq.n	9c00 <memmove+0x24>
    9c6a:	2300      	movs	r3, #0
    9c6c:	5cf4      	ldrb	r4, [r6, r3]
    9c6e:	54ec      	strb	r4, [r5, r3]
    9c70:	3301      	adds	r3, #1
    9c72:	4293      	cmp	r3, r2
    9c74:	d1fa      	bne.n	9c6c <memmove+0x90>
    9c76:	e7c3      	b.n	9c00 <memmove+0x24>

00009c78 <_Balloc>:
    9c78:	b570      	push	{r4, r5, r6, lr}
    9c7a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    9c7c:	1c04      	adds	r4, r0, #0
    9c7e:	1c0d      	adds	r5, r1, #0
    9c80:	2b00      	cmp	r3, #0
    9c82:	d00c      	beq.n	9c9e <_Balloc+0x26>
    9c84:	00aa      	lsls	r2, r5, #2
    9c86:	189b      	adds	r3, r3, r2
    9c88:	6818      	ldr	r0, [r3, #0]
    9c8a:	2800      	cmp	r0, #0
    9c8c:	d010      	beq.n	9cb0 <_Balloc+0x38>
    9c8e:	6802      	ldr	r2, [r0, #0]
    9c90:	601a      	str	r2, [r3, #0]
    9c92:	2300      	movs	r3, #0
    9c94:	6103      	str	r3, [r0, #16]
    9c96:	60c3      	str	r3, [r0, #12]
    9c98:	bc70      	pop	{r4, r5, r6}
    9c9a:	bc02      	pop	{r1}
    9c9c:	4708      	bx	r1
    9c9e:	2104      	movs	r1, #4
    9ca0:	2221      	movs	r2, #33	; 0x21
    9ca2:	f002 fc61 	bl	c568 <_calloc_r>
    9ca6:	1c03      	adds	r3, r0, #0
    9ca8:	64e0      	str	r0, [r4, #76]	; 0x4c
    9caa:	2800      	cmp	r0, #0
    9cac:	d0f4      	beq.n	9c98 <_Balloc+0x20>
    9cae:	e7e9      	b.n	9c84 <_Balloc+0xc>
    9cb0:	2101      	movs	r1, #1
    9cb2:	1c0e      	adds	r6, r1, #0
    9cb4:	40ae      	lsls	r6, r5
    9cb6:	1d72      	adds	r2, r6, #5
    9cb8:	0092      	lsls	r2, r2, #2
    9cba:	1c20      	adds	r0, r4, #0
    9cbc:	f002 fc54 	bl	c568 <_calloc_r>
    9cc0:	2800      	cmp	r0, #0
    9cc2:	d0e9      	beq.n	9c98 <_Balloc+0x20>
    9cc4:	6045      	str	r5, [r0, #4]
    9cc6:	6086      	str	r6, [r0, #8]
    9cc8:	e7e3      	b.n	9c92 <_Balloc+0x1a>
    9cca:	46c0      	nop			; (mov r8, r8)

00009ccc <_Bfree>:
    9ccc:	b500      	push	{lr}
    9cce:	2900      	cmp	r1, #0
    9cd0:	d006      	beq.n	9ce0 <_Bfree+0x14>
    9cd2:	684b      	ldr	r3, [r1, #4]
    9cd4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    9cd6:	009b      	lsls	r3, r3, #2
    9cd8:	18d3      	adds	r3, r2, r3
    9cda:	681a      	ldr	r2, [r3, #0]
    9cdc:	600a      	str	r2, [r1, #0]
    9cde:	6019      	str	r1, [r3, #0]
    9ce0:	bc01      	pop	{r0}
    9ce2:	4700      	bx	r0

00009ce4 <__multadd>:
    9ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ce6:	464f      	mov	r7, r9
    9ce8:	4646      	mov	r6, r8
    9cea:	b4c0      	push	{r6, r7}
    9cec:	1c0e      	adds	r6, r1, #0
    9cee:	1c1c      	adds	r4, r3, #0
    9cf0:	690d      	ldr	r5, [r1, #16]
    9cf2:	4681      	mov	r9, r0
    9cf4:	3114      	adds	r1, #20
    9cf6:	2300      	movs	r3, #0
    9cf8:	6808      	ldr	r0, [r1, #0]
    9cfa:	4680      	mov	r8, r0
    9cfc:	0400      	lsls	r0, r0, #16
    9cfe:	0c00      	lsrs	r0, r0, #16
    9d00:	4350      	muls	r0, r2
    9d02:	1820      	adds	r0, r4, r0
    9d04:	0c04      	lsrs	r4, r0, #16
    9d06:	4647      	mov	r7, r8
    9d08:	46a4      	mov	ip, r4
    9d0a:	0c3c      	lsrs	r4, r7, #16
    9d0c:	4354      	muls	r4, r2
    9d0e:	44a4      	add	ip, r4
    9d10:	4667      	mov	r7, ip
    9d12:	0c3c      	lsrs	r4, r7, #16
    9d14:	0400      	lsls	r0, r0, #16
    9d16:	043f      	lsls	r7, r7, #16
    9d18:	46bc      	mov	ip, r7
    9d1a:	0c00      	lsrs	r0, r0, #16
    9d1c:	4460      	add	r0, ip
    9d1e:	3301      	adds	r3, #1
    9d20:	c101      	stmia	r1!, {r0}
    9d22:	429d      	cmp	r5, r3
    9d24:	dce8      	bgt.n	9cf8 <__multadd+0x14>
    9d26:	2c00      	cmp	r4, #0
    9d28:	d008      	beq.n	9d3c <__multadd+0x58>
    9d2a:	68b3      	ldr	r3, [r6, #8]
    9d2c:	429d      	cmp	r5, r3
    9d2e:	da0c      	bge.n	9d4a <__multadd+0x66>
    9d30:	1d2b      	adds	r3, r5, #4
    9d32:	009b      	lsls	r3, r3, #2
    9d34:	18f3      	adds	r3, r6, r3
    9d36:	3501      	adds	r5, #1
    9d38:	605c      	str	r4, [r3, #4]
    9d3a:	6135      	str	r5, [r6, #16]
    9d3c:	1c30      	adds	r0, r6, #0
    9d3e:	bc0c      	pop	{r2, r3}
    9d40:	4690      	mov	r8, r2
    9d42:	4699      	mov	r9, r3
    9d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9d46:	bc02      	pop	{r1}
    9d48:	4708      	bx	r1
    9d4a:	6871      	ldr	r1, [r6, #4]
    9d4c:	4648      	mov	r0, r9
    9d4e:	3101      	adds	r1, #1
    9d50:	f7ff ff92 	bl	9c78 <_Balloc>
    9d54:	6932      	ldr	r2, [r6, #16]
    9d56:	210c      	movs	r1, #12
    9d58:	4680      	mov	r8, r0
    9d5a:	3202      	adds	r2, #2
    9d5c:	1c08      	adds	r0, r1, #0
    9d5e:	1c31      	adds	r1, r6, #0
    9d60:	0092      	lsls	r2, r2, #2
    9d62:	4440      	add	r0, r8
    9d64:	310c      	adds	r1, #12
    9d66:	f7fb fa35 	bl	51d4 <memcpy>
    9d6a:	464f      	mov	r7, r9
    9d6c:	6873      	ldr	r3, [r6, #4]
    9d6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    9d70:	009b      	lsls	r3, r3, #2
    9d72:	18d3      	adds	r3, r2, r3
    9d74:	681a      	ldr	r2, [r3, #0]
    9d76:	6032      	str	r2, [r6, #0]
    9d78:	601e      	str	r6, [r3, #0]
    9d7a:	4646      	mov	r6, r8
    9d7c:	e7d8      	b.n	9d30 <__multadd+0x4c>
    9d7e:	46c0      	nop			; (mov r8, r8)

00009d80 <__s2b>:
    9d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d82:	464f      	mov	r7, r9
    9d84:	4646      	mov	r6, r8
    9d86:	b4c0      	push	{r6, r7}
    9d88:	1c06      	adds	r6, r0, #0
    9d8a:	1c18      	adds	r0, r3, #0
    9d8c:	1c0d      	adds	r5, r1, #0
    9d8e:	3008      	adds	r0, #8
    9d90:	2109      	movs	r1, #9
    9d92:	4690      	mov	r8, r2
    9d94:	1c1f      	adds	r7, r3, #0
    9d96:	f003 ff2f 	bl	dbf8 <____aeabi_idiv_from_thumb>
    9d9a:	2100      	movs	r1, #0
    9d9c:	2801      	cmp	r0, #1
    9d9e:	dd04      	ble.n	9daa <__s2b+0x2a>
    9da0:	2301      	movs	r3, #1
    9da2:	005b      	lsls	r3, r3, #1
    9da4:	3101      	adds	r1, #1
    9da6:	4298      	cmp	r0, r3
    9da8:	dcfb      	bgt.n	9da2 <__s2b+0x22>
    9daa:	1c30      	adds	r0, r6, #0
    9dac:	f7ff ff64 	bl	9c78 <_Balloc>
    9db0:	9b08      	ldr	r3, [sp, #32]
    9db2:	6143      	str	r3, [r0, #20]
    9db4:	2301      	movs	r3, #1
    9db6:	6103      	str	r3, [r0, #16]
    9db8:	3308      	adds	r3, #8
    9dba:	1c01      	adds	r1, r0, #0
    9dbc:	4598      	cmp	r8, r3
    9dbe:	dd23      	ble.n	9e08 <__s2b+0x88>
    9dc0:	195b      	adds	r3, r3, r5
    9dc2:	4699      	mov	r9, r3
    9dc4:	2409      	movs	r4, #9
    9dc6:	5d2b      	ldrb	r3, [r5, r4]
    9dc8:	1c30      	adds	r0, r6, #0
    9dca:	3b30      	subs	r3, #48	; 0x30
    9dcc:	220a      	movs	r2, #10
    9dce:	f7ff ff89 	bl	9ce4 <__multadd>
    9dd2:	3401      	adds	r4, #1
    9dd4:	1c01      	adds	r1, r0, #0
    9dd6:	45a0      	cmp	r8, r4
    9dd8:	dcf5      	bgt.n	9dc6 <__s2b+0x46>
    9dda:	464d      	mov	r5, r9
    9ddc:	4445      	add	r5, r8
    9dde:	3d08      	subs	r5, #8
    9de0:	4644      	mov	r4, r8
    9de2:	e008      	b.n	9df6 <__s2b+0x76>
    9de4:	782b      	ldrb	r3, [r5, #0]
    9de6:	1c30      	adds	r0, r6, #0
    9de8:	3b30      	subs	r3, #48	; 0x30
    9dea:	220a      	movs	r2, #10
    9dec:	f7ff ff7a 	bl	9ce4 <__multadd>
    9df0:	3501      	adds	r5, #1
    9df2:	1c01      	adds	r1, r0, #0
    9df4:	3401      	adds	r4, #1
    9df6:	42a7      	cmp	r7, r4
    9df8:	dcf4      	bgt.n	9de4 <__s2b+0x64>
    9dfa:	1c08      	adds	r0, r1, #0
    9dfc:	bc0c      	pop	{r2, r3}
    9dfe:	4690      	mov	r8, r2
    9e00:	4699      	mov	r9, r3
    9e02:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9e04:	bc02      	pop	{r1}
    9e06:	4708      	bx	r1
    9e08:	350a      	adds	r5, #10
    9e0a:	2409      	movs	r4, #9
    9e0c:	e7f3      	b.n	9df6 <__s2b+0x76>
    9e0e:	46c0      	nop			; (mov r8, r8)

00009e10 <__hi0bits>:
    9e10:	b500      	push	{lr}
    9e12:	1c03      	adds	r3, r0, #0
    9e14:	0c02      	lsrs	r2, r0, #16
    9e16:	2000      	movs	r0, #0
    9e18:	4282      	cmp	r2, r0
    9e1a:	d101      	bne.n	9e20 <__hi0bits+0x10>
    9e1c:	041b      	lsls	r3, r3, #16
    9e1e:	3010      	adds	r0, #16
    9e20:	0e1a      	lsrs	r2, r3, #24
    9e22:	2a00      	cmp	r2, #0
    9e24:	d101      	bne.n	9e2a <__hi0bits+0x1a>
    9e26:	3008      	adds	r0, #8
    9e28:	021b      	lsls	r3, r3, #8
    9e2a:	0f1a      	lsrs	r2, r3, #28
    9e2c:	2a00      	cmp	r2, #0
    9e2e:	d101      	bne.n	9e34 <__hi0bits+0x24>
    9e30:	3004      	adds	r0, #4
    9e32:	011b      	lsls	r3, r3, #4
    9e34:	0f9a      	lsrs	r2, r3, #30
    9e36:	2a00      	cmp	r2, #0
    9e38:	d101      	bne.n	9e3e <__hi0bits+0x2e>
    9e3a:	3002      	adds	r0, #2
    9e3c:	009b      	lsls	r3, r3, #2
    9e3e:	2b00      	cmp	r3, #0
    9e40:	db03      	blt.n	9e4a <__hi0bits+0x3a>
    9e42:	3001      	adds	r0, #1
    9e44:	005a      	lsls	r2, r3, #1
    9e46:	d400      	bmi.n	9e4a <__hi0bits+0x3a>
    9e48:	2020      	movs	r0, #32
    9e4a:	bc02      	pop	{r1}
    9e4c:	4708      	bx	r1
    9e4e:	46c0      	nop			; (mov r8, r8)

00009e50 <__lo0bits>:
    9e50:	b500      	push	{lr}
    9e52:	6803      	ldr	r3, [r0, #0]
    9e54:	1c01      	adds	r1, r0, #0
    9e56:	2207      	movs	r2, #7
    9e58:	1c18      	adds	r0, r3, #0
    9e5a:	4010      	ands	r0, r2
    9e5c:	d00a      	beq.n	9e74 <__lo0bits+0x24>
    9e5e:	3a06      	subs	r2, #6
    9e60:	2000      	movs	r0, #0
    9e62:	4213      	tst	r3, r2
    9e64:	d104      	bne.n	9e70 <__lo0bits+0x20>
    9e66:	3002      	adds	r0, #2
    9e68:	4203      	tst	r3, r0
    9e6a:	d11f      	bne.n	9eac <__lo0bits+0x5c>
    9e6c:	089b      	lsrs	r3, r3, #2
    9e6e:	600b      	str	r3, [r1, #0]
    9e70:	bc02      	pop	{r1}
    9e72:	4708      	bx	r1
    9e74:	041a      	lsls	r2, r3, #16
    9e76:	2a00      	cmp	r2, #0
    9e78:	d101      	bne.n	9e7e <__lo0bits+0x2e>
    9e7a:	0c1b      	lsrs	r3, r3, #16
    9e7c:	2010      	movs	r0, #16
    9e7e:	22ff      	movs	r2, #255	; 0xff
    9e80:	4213      	tst	r3, r2
    9e82:	d101      	bne.n	9e88 <__lo0bits+0x38>
    9e84:	3008      	adds	r0, #8
    9e86:	0a1b      	lsrs	r3, r3, #8
    9e88:	071a      	lsls	r2, r3, #28
    9e8a:	d101      	bne.n	9e90 <__lo0bits+0x40>
    9e8c:	3004      	adds	r0, #4
    9e8e:	091b      	lsrs	r3, r3, #4
    9e90:	079a      	lsls	r2, r3, #30
    9e92:	d101      	bne.n	9e98 <__lo0bits+0x48>
    9e94:	3002      	adds	r0, #2
    9e96:	089b      	lsrs	r3, r3, #2
    9e98:	07da      	lsls	r2, r3, #31
    9e9a:	d403      	bmi.n	9ea4 <__lo0bits+0x54>
    9e9c:	085b      	lsrs	r3, r3, #1
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	d002      	beq.n	9ea8 <__lo0bits+0x58>
    9ea2:	3001      	adds	r0, #1
    9ea4:	600b      	str	r3, [r1, #0]
    9ea6:	e7e3      	b.n	9e70 <__lo0bits+0x20>
    9ea8:	2020      	movs	r0, #32
    9eaa:	e7e1      	b.n	9e70 <__lo0bits+0x20>
    9eac:	40d3      	lsrs	r3, r2
    9eae:	600b      	str	r3, [r1, #0]
    9eb0:	1c10      	adds	r0, r2, #0
    9eb2:	e7dd      	b.n	9e70 <__lo0bits+0x20>

00009eb4 <__i2b>:
    9eb4:	b510      	push	{r4, lr}
    9eb6:	1c0c      	adds	r4, r1, #0
    9eb8:	2101      	movs	r1, #1
    9eba:	f7ff fedd 	bl	9c78 <_Balloc>
    9ebe:	2301      	movs	r3, #1
    9ec0:	6144      	str	r4, [r0, #20]
    9ec2:	6103      	str	r3, [r0, #16]
    9ec4:	bc10      	pop	{r4}
    9ec6:	bc02      	pop	{r1}
    9ec8:	4708      	bx	r1
    9eca:	46c0      	nop			; (mov r8, r8)

00009ecc <__multiply>:
    9ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ece:	465f      	mov	r7, fp
    9ed0:	4656      	mov	r6, sl
    9ed2:	464d      	mov	r5, r9
    9ed4:	4644      	mov	r4, r8
    9ed6:	b4f0      	push	{r4, r5, r6, r7}
    9ed8:	1c0d      	adds	r5, r1, #0
    9eda:	690f      	ldr	r7, [r1, #16]
    9edc:	6911      	ldr	r1, [r2, #16]
    9ede:	4688      	mov	r8, r1
    9ee0:	b085      	sub	sp, #20
    9ee2:	1c16      	adds	r6, r2, #0
    9ee4:	4547      	cmp	r7, r8
    9ee6:	da05      	bge.n	9ef4 <__multiply+0x28>
    9ee8:	1c3b      	adds	r3, r7, #0
    9eea:	4698      	mov	r8, r3
    9eec:	1c2b      	adds	r3, r5, #0
    9eee:	1c0f      	adds	r7, r1, #0
    9ef0:	1c15      	adds	r5, r2, #0
    9ef2:	1c1e      	adds	r6, r3, #0
    9ef4:	1c3c      	adds	r4, r7, #0
    9ef6:	68ab      	ldr	r3, [r5, #8]
    9ef8:	4444      	add	r4, r8
    9efa:	6869      	ldr	r1, [r5, #4]
    9efc:	429c      	cmp	r4, r3
    9efe:	dd00      	ble.n	9f02 <__multiply+0x36>
    9f00:	3101      	adds	r1, #1
    9f02:	f7ff feb9 	bl	9c78 <_Balloc>
    9f06:	1d23      	adds	r3, r4, #4
    9f08:	009b      	lsls	r3, r3, #2
    9f0a:	1c02      	adds	r2, r0, #0
    9f0c:	181b      	adds	r3, r3, r0
    9f0e:	3304      	adds	r3, #4
    9f10:	3214      	adds	r2, #20
    9f12:	9002      	str	r0, [sp, #8]
    9f14:	9303      	str	r3, [sp, #12]
    9f16:	429a      	cmp	r2, r3
    9f18:	d205      	bcs.n	9f26 <__multiply+0x5a>
    9f1a:	9803      	ldr	r0, [sp, #12]
    9f1c:	1c13      	adds	r3, r2, #0
    9f1e:	2100      	movs	r1, #0
    9f20:	c302      	stmia	r3!, {r1}
    9f22:	4298      	cmp	r0, r3
    9f24:	d8fc      	bhi.n	9f20 <__multiply+0x54>
    9f26:	2314      	movs	r3, #20
    9f28:	195b      	adds	r3, r3, r5
    9f2a:	2104      	movs	r1, #4
    9f2c:	9300      	str	r3, [sp, #0]
    9f2e:	1c0b      	adds	r3, r1, #0
    9f30:	3704      	adds	r7, #4
    9f32:	4443      	add	r3, r8
    9f34:	00bf      	lsls	r7, r7, #2
    9f36:	009b      	lsls	r3, r3, #2
    9f38:	19ed      	adds	r5, r5, r7
    9f3a:	1c37      	adds	r7, r6, #0
    9f3c:	18f6      	adds	r6, r6, r3
    9f3e:	1876      	adds	r6, r6, r1
    9f40:	3714      	adds	r7, #20
    9f42:	46b4      	mov	ip, r6
    9f44:	3504      	adds	r5, #4
    9f46:	4567      	cmp	r7, ip
    9f48:	d26c      	bcs.n	a024 <__multiply+0x158>
    9f4a:	1c23      	adds	r3, r4, #0
    9f4c:	1c16      	adds	r6, r2, #0
    9f4e:	4664      	mov	r4, ip
    9f50:	469c      	mov	ip, r3
    9f52:	683b      	ldr	r3, [r7, #0]
    9f54:	041a      	lsls	r2, r3, #16
    9f56:	0c12      	lsrs	r2, r2, #16
    9f58:	4691      	mov	r9, r2
    9f5a:	2200      	movs	r2, #0
    9f5c:	4591      	cmp	r9, r2
    9f5e:	d029      	beq.n	9fb4 <__multiply+0xe8>
    9f60:	2100      	movs	r1, #0
    9f62:	4688      	mov	r8, r1
    9f64:	9a00      	ldr	r2, [sp, #0]
    9f66:	4649      	mov	r1, r9
    9f68:	1c33      	adds	r3, r6, #0
    9f6a:	46a1      	mov	r9, r4
    9f6c:	46ba      	mov	sl, r7
    9f6e:	4644      	mov	r4, r8
    9f70:	46b3      	mov	fp, r6
    9f72:	46a8      	mov	r8, r5
    9f74:	1c0d      	adds	r5, r1, #0
    9f76:	ca01      	ldmia	r2!, {r0}
    9f78:	0407      	lsls	r7, r0, #16
    9f7a:	0c3f      	lsrs	r7, r7, #16
    9f7c:	436f      	muls	r7, r5
    9f7e:	0c00      	lsrs	r0, r0, #16
    9f80:	4368      	muls	r0, r5
    9f82:	6819      	ldr	r1, [r3, #0]
    9f84:	040e      	lsls	r6, r1, #16
    9f86:	0c36      	lsrs	r6, r6, #16
    9f88:	19be      	adds	r6, r7, r6
    9f8a:	1936      	adds	r6, r6, r4
    9f8c:	0c09      	lsrs	r1, r1, #16
    9f8e:	0c34      	lsrs	r4, r6, #16
    9f90:	1841      	adds	r1, r0, r1
    9f92:	1909      	adds	r1, r1, r4
    9f94:	0436      	lsls	r6, r6, #16
    9f96:	0c0c      	lsrs	r4, r1, #16
    9f98:	0c36      	lsrs	r6, r6, #16
    9f9a:	0409      	lsls	r1, r1, #16
    9f9c:	4331      	orrs	r1, r6
    9f9e:	c302      	stmia	r3!, {r1}
    9fa0:	4590      	cmp	r8, r2
    9fa2:	d8e8      	bhi.n	9f76 <__multiply+0xaa>
    9fa4:	4645      	mov	r5, r8
    9fa6:	46a0      	mov	r8, r4
    9fa8:	4642      	mov	r2, r8
    9faa:	4657      	mov	r7, sl
    9fac:	601a      	str	r2, [r3, #0]
    9fae:	683b      	ldr	r3, [r7, #0]
    9fb0:	464c      	mov	r4, r9
    9fb2:	465e      	mov	r6, fp
    9fb4:	0c1b      	lsrs	r3, r3, #16
    9fb6:	4698      	mov	r8, r3
    9fb8:	2300      	movs	r3, #0
    9fba:	4598      	cmp	r8, r3
    9fbc:	d02c      	beq.n	a018 <__multiply+0x14c>
    9fbe:	6832      	ldr	r2, [r6, #0]
    9fc0:	9b00      	ldr	r3, [sp, #0]
    9fc2:	9401      	str	r4, [sp, #4]
    9fc4:	1c31      	adds	r1, r6, #0
    9fc6:	46b3      	mov	fp, r6
    9fc8:	9e01      	ldr	r6, [sp, #4]
    9fca:	469a      	mov	sl, r3
    9fcc:	46c1      	mov	r9, r8
    9fce:	2300      	movs	r3, #0
    9fd0:	1c1c      	adds	r4, r3, #0
    9fd2:	46a8      	mov	r8, r5
    9fd4:	4653      	mov	r3, sl
    9fd6:	464d      	mov	r5, r9
    9fd8:	1c10      	adds	r0, r2, #0
    9fda:	46ba      	mov	sl, r7
    9fdc:	46b1      	mov	r9, r6
    9fde:	1c1e      	adds	r6, r3, #0
    9fe0:	cb80      	ldmia	r3!, {r7}
    9fe2:	043f      	lsls	r7, r7, #16
    9fe4:	0c3f      	lsrs	r7, r7, #16
    9fe6:	436f      	muls	r7, r5
    9fe8:	0c00      	lsrs	r0, r0, #16
    9fea:	19e4      	adds	r4, r4, r7
    9fec:	1824      	adds	r4, r4, r0
    9fee:	0412      	lsls	r2, r2, #16
    9ff0:	0420      	lsls	r0, r4, #16
    9ff2:	0c12      	lsrs	r2, r2, #16
    9ff4:	4302      	orrs	r2, r0
    9ff6:	c104      	stmia	r1!, {r2}
    9ff8:	8876      	ldrh	r6, [r6, #2]
    9ffa:	436e      	muls	r6, r5
    9ffc:	6808      	ldr	r0, [r1, #0]
    9ffe:	0402      	lsls	r2, r0, #16
    a000:	0c12      	lsrs	r2, r2, #16
    a002:	0c24      	lsrs	r4, r4, #16
    a004:	18b2      	adds	r2, r6, r2
    a006:	1912      	adds	r2, r2, r4
    a008:	0c14      	lsrs	r4, r2, #16
    a00a:	4598      	cmp	r8, r3
    a00c:	d8e7      	bhi.n	9fde <__multiply+0x112>
    a00e:	600a      	str	r2, [r1, #0]
    a010:	4645      	mov	r5, r8
    a012:	464c      	mov	r4, r9
    a014:	4657      	mov	r7, sl
    a016:	465e      	mov	r6, fp
    a018:	3704      	adds	r7, #4
    a01a:	42bc      	cmp	r4, r7
    a01c:	d901      	bls.n	a022 <__multiply+0x156>
    a01e:	3604      	adds	r6, #4
    a020:	e797      	b.n	9f52 <__multiply+0x86>
    a022:	4664      	mov	r4, ip
    a024:	2c00      	cmp	r4, #0
    a026:	dd08      	ble.n	a03a <__multiply+0x16e>
    a028:	9b03      	ldr	r3, [sp, #12]
    a02a:	e002      	b.n	a032 <__multiply+0x166>
    a02c:	3c01      	subs	r4, #1
    a02e:	2c00      	cmp	r4, #0
    a030:	dd03      	ble.n	a03a <__multiply+0x16e>
    a032:	3b04      	subs	r3, #4
    a034:	681a      	ldr	r2, [r3, #0]
    a036:	2a00      	cmp	r2, #0
    a038:	d0f8      	beq.n	a02c <__multiply+0x160>
    a03a:	9902      	ldr	r1, [sp, #8]
    a03c:	b005      	add	sp, #20
    a03e:	1c08      	adds	r0, r1, #0
    a040:	610c      	str	r4, [r1, #16]
    a042:	bc3c      	pop	{r2, r3, r4, r5}
    a044:	4690      	mov	r8, r2
    a046:	4699      	mov	r9, r3
    a048:	46a2      	mov	sl, r4
    a04a:	46ab      	mov	fp, r5
    a04c:	bcf0      	pop	{r4, r5, r6, r7}
    a04e:	bc02      	pop	{r1}
    a050:	4708      	bx	r1
    a052:	46c0      	nop			; (mov r8, r8)

0000a054 <__pow5mult>:
    a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a056:	464f      	mov	r7, r9
    a058:	4646      	mov	r6, r8
    a05a:	b4c0      	push	{r6, r7}
    a05c:	2303      	movs	r3, #3
    a05e:	4680      	mov	r8, r0
    a060:	1c0e      	adds	r6, r1, #0
    a062:	1c14      	adds	r4, r2, #0
    a064:	4013      	ands	r3, r2
    a066:	d138      	bne.n	a0da <__pow5mult+0x86>
    a068:	10a4      	asrs	r4, r4, #2
    a06a:	2c00      	cmp	r4, #0
    a06c:	d023      	beq.n	a0b6 <__pow5mult+0x62>
    a06e:	4641      	mov	r1, r8
    a070:	6c8d      	ldr	r5, [r1, #72]	; 0x48
    a072:	2d00      	cmp	r5, #0
    a074:	d03a      	beq.n	a0ec <__pow5mult+0x98>
    a076:	2101      	movs	r1, #1
    a078:	4689      	mov	r9, r1
    a07a:	e006      	b.n	a08a <__pow5mult+0x36>
    a07c:	1064      	asrs	r4, r4, #1
    a07e:	2c00      	cmp	r4, #0
    a080:	d019      	beq.n	a0b6 <__pow5mult+0x62>
    a082:	682f      	ldr	r7, [r5, #0]
    a084:	2f00      	cmp	r7, #0
    a086:	d01d      	beq.n	a0c4 <__pow5mult+0x70>
    a088:	1c3d      	adds	r5, r7, #0
    a08a:	464b      	mov	r3, r9
    a08c:	421c      	tst	r4, r3
    a08e:	d0f5      	beq.n	a07c <__pow5mult+0x28>
    a090:	4640      	mov	r0, r8
    a092:	1c31      	adds	r1, r6, #0
    a094:	1c2a      	adds	r2, r5, #0
    a096:	f7ff ff19 	bl	9ecc <__multiply>
    a09a:	2e00      	cmp	r6, #0
    a09c:	d01b      	beq.n	a0d6 <__pow5mult+0x82>
    a09e:	6873      	ldr	r3, [r6, #4]
    a0a0:	4641      	mov	r1, r8
    a0a2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    a0a4:	009b      	lsls	r3, r3, #2
    a0a6:	18d3      	adds	r3, r2, r3
    a0a8:	681a      	ldr	r2, [r3, #0]
    a0aa:	1064      	asrs	r4, r4, #1
    a0ac:	6032      	str	r2, [r6, #0]
    a0ae:	601e      	str	r6, [r3, #0]
    a0b0:	1c06      	adds	r6, r0, #0
    a0b2:	2c00      	cmp	r4, #0
    a0b4:	d1e5      	bne.n	a082 <__pow5mult+0x2e>
    a0b6:	1c30      	adds	r0, r6, #0
    a0b8:	bc0c      	pop	{r2, r3}
    a0ba:	4690      	mov	r8, r2
    a0bc:	4699      	mov	r9, r3
    a0be:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a0c0:	bc02      	pop	{r1}
    a0c2:	4708      	bx	r1
    a0c4:	1c29      	adds	r1, r5, #0
    a0c6:	1c2a      	adds	r2, r5, #0
    a0c8:	4640      	mov	r0, r8
    a0ca:	f7ff feff 	bl	9ecc <__multiply>
    a0ce:	6028      	str	r0, [r5, #0]
    a0d0:	6007      	str	r7, [r0, #0]
    a0d2:	1c05      	adds	r5, r0, #0
    a0d4:	e7d9      	b.n	a08a <__pow5mult+0x36>
    a0d6:	1c06      	adds	r6, r0, #0
    a0d8:	e7d0      	b.n	a07c <__pow5mult+0x28>
    a0da:	4a09      	ldr	r2, [pc, #36]	; (a100 <__pow5mult+0xac>)
    a0dc:	3b01      	subs	r3, #1
    a0de:	009b      	lsls	r3, r3, #2
    a0e0:	589a      	ldr	r2, [r3, r2]
    a0e2:	2300      	movs	r3, #0
    a0e4:	f7ff fdfe 	bl	9ce4 <__multadd>
    a0e8:	1c06      	adds	r6, r0, #0
    a0ea:	e7bd      	b.n	a068 <__pow5mult+0x14>
    a0ec:	4640      	mov	r0, r8
    a0ee:	4905      	ldr	r1, [pc, #20]	; (a104 <__pow5mult+0xb0>)
    a0f0:	f7ff fee0 	bl	9eb4 <__i2b>
    a0f4:	4643      	mov	r3, r8
    a0f6:	6498      	str	r0, [r3, #72]	; 0x48
    a0f8:	2300      	movs	r3, #0
    a0fa:	1c05      	adds	r5, r0, #0
    a0fc:	6003      	str	r3, [r0, #0]
    a0fe:	e7ba      	b.n	a076 <__pow5mult+0x22>
    a100:	0000e048 	.word	0x0000e048
    a104:	00000271 	.word	0x00000271

0000a108 <__lshift>:
    a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a10a:	465f      	mov	r7, fp
    a10c:	4656      	mov	r6, sl
    a10e:	464d      	mov	r5, r9
    a110:	4644      	mov	r4, r8
    a112:	b4f0      	push	{r4, r5, r6, r7}
    a114:	1c0e      	adds	r6, r1, #0
    a116:	6934      	ldr	r4, [r6, #16]
    a118:	1155      	asrs	r5, r2, #5
    a11a:	3401      	adds	r4, #1
    a11c:	68b3      	ldr	r3, [r6, #8]
    a11e:	1964      	adds	r4, r4, r5
    a120:	4683      	mov	fp, r0
    a122:	4690      	mov	r8, r2
    a124:	6849      	ldr	r1, [r1, #4]
    a126:	429c      	cmp	r4, r3
    a128:	dd03      	ble.n	a132 <__lshift+0x2a>
    a12a:	005b      	lsls	r3, r3, #1
    a12c:	3101      	adds	r1, #1
    a12e:	429c      	cmp	r4, r3
    a130:	dcfb      	bgt.n	a12a <__lshift+0x22>
    a132:	4658      	mov	r0, fp
    a134:	f7ff fda0 	bl	9c78 <_Balloc>
    a138:	4682      	mov	sl, r0
    a13a:	2014      	movs	r0, #20
    a13c:	1c02      	adds	r2, r0, #0
    a13e:	4452      	add	r2, sl
    a140:	2d00      	cmp	r5, #0
    a142:	dd09      	ble.n	a158 <__lshift+0x50>
    a144:	2300      	movs	r3, #0
    a146:	1c19      	adds	r1, r3, #0
    a148:	3301      	adds	r3, #1
    a14a:	c202      	stmia	r2!, {r1}
    a14c:	42ab      	cmp	r3, r5
    a14e:	d1fb      	bne.n	a148 <__lshift+0x40>
    a150:	1d1a      	adds	r2, r3, #4
    a152:	0092      	lsls	r2, r2, #2
    a154:	4452      	add	r2, sl
    a156:	3204      	adds	r2, #4
    a158:	6935      	ldr	r5, [r6, #16]
    a15a:	211f      	movs	r1, #31
    a15c:	3504      	adds	r5, #4
    a15e:	468c      	mov	ip, r1
    a160:	1c33      	adds	r3, r6, #0
    a162:	00ad      	lsls	r5, r5, #2
    a164:	3314      	adds	r3, #20
    a166:	1975      	adds	r5, r6, r5
    a168:	4647      	mov	r7, r8
    a16a:	4660      	mov	r0, ip
    a16c:	3504      	adds	r5, #4
    a16e:	1c19      	adds	r1, r3, #0
    a170:	4007      	ands	r7, r0
    a172:	46b8      	mov	r8, r7
    a174:	d026      	beq.n	a1c4 <__lshift+0xbc>
    a176:	2120      	movs	r1, #32
    a178:	4647      	mov	r7, r8
    a17a:	1bcf      	subs	r7, r1, r7
    a17c:	46bc      	mov	ip, r7
    a17e:	3920      	subs	r1, #32
    a180:	6818      	ldr	r0, [r3, #0]
    a182:	1c07      	adds	r7, r0, #0
    a184:	4640      	mov	r0, r8
    a186:	4087      	lsls	r7, r0
    a188:	4339      	orrs	r1, r7
    a18a:	c202      	stmia	r2!, {r1}
    a18c:	cb02      	ldmia	r3!, {r1}
    a18e:	4667      	mov	r7, ip
    a190:	40f9      	lsrs	r1, r7
    a192:	429d      	cmp	r5, r3
    a194:	d8f4      	bhi.n	a180 <__lshift+0x78>
    a196:	6011      	str	r1, [r2, #0]
    a198:	1e4b      	subs	r3, r1, #1
    a19a:	4199      	sbcs	r1, r3
    a19c:	1864      	adds	r4, r4, r1
    a19e:	6873      	ldr	r3, [r6, #4]
    a1a0:	4659      	mov	r1, fp
    a1a2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    a1a4:	009b      	lsls	r3, r3, #2
    a1a6:	18d3      	adds	r3, r2, r3
    a1a8:	681a      	ldr	r2, [r3, #0]
    a1aa:	4650      	mov	r0, sl
    a1ac:	3c01      	subs	r4, #1
    a1ae:	6032      	str	r2, [r6, #0]
    a1b0:	6104      	str	r4, [r0, #16]
    a1b2:	601e      	str	r6, [r3, #0]
    a1b4:	bc3c      	pop	{r2, r3, r4, r5}
    a1b6:	4690      	mov	r8, r2
    a1b8:	4699      	mov	r9, r3
    a1ba:	46a2      	mov	sl, r4
    a1bc:	46ab      	mov	fp, r5
    a1be:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a1c0:	bc02      	pop	{r1}
    a1c2:	4708      	bx	r1
    a1c4:	c908      	ldmia	r1!, {r3}
    a1c6:	c208      	stmia	r2!, {r3}
    a1c8:	428d      	cmp	r5, r1
    a1ca:	d9e8      	bls.n	a19e <__lshift+0x96>
    a1cc:	c908      	ldmia	r1!, {r3}
    a1ce:	c208      	stmia	r2!, {r3}
    a1d0:	428d      	cmp	r5, r1
    a1d2:	d8f7      	bhi.n	a1c4 <__lshift+0xbc>
    a1d4:	e7e3      	b.n	a19e <__lshift+0x96>
    a1d6:	46c0      	nop			; (mov r8, r8)

0000a1d8 <__mcmp>:
    a1d8:	b570      	push	{r4, r5, r6, lr}
    a1da:	1c03      	adds	r3, r0, #0
    a1dc:	690e      	ldr	r6, [r1, #16]
    a1de:	6900      	ldr	r0, [r0, #16]
    a1e0:	1b80      	subs	r0, r0, r6
    a1e2:	2800      	cmp	r0, #0
    a1e4:	d10f      	bne.n	a206 <__mcmp+0x2e>
    a1e6:	3604      	adds	r6, #4
    a1e8:	00b6      	lsls	r6, r6, #2
    a1ea:	1c1d      	adds	r5, r3, #0
    a1ec:	1989      	adds	r1, r1, r6
    a1ee:	199b      	adds	r3, r3, r6
    a1f0:	3514      	adds	r5, #20
    a1f2:	3304      	adds	r3, #4
    a1f4:	3104      	adds	r1, #4
    a1f6:	3b04      	subs	r3, #4
    a1f8:	3904      	subs	r1, #4
    a1fa:	681c      	ldr	r4, [r3, #0]
    a1fc:	680a      	ldr	r2, [r1, #0]
    a1fe:	4294      	cmp	r4, r2
    a200:	d104      	bne.n	a20c <__mcmp+0x34>
    a202:	429d      	cmp	r5, r3
    a204:	d3f7      	bcc.n	a1f6 <__mcmp+0x1e>
    a206:	bc70      	pop	{r4, r5, r6}
    a208:	bc02      	pop	{r1}
    a20a:	4708      	bx	r1
    a20c:	4294      	cmp	r4, r2
    a20e:	4192      	sbcs	r2, r2
    a210:	2001      	movs	r0, #1
    a212:	4310      	orrs	r0, r2
    a214:	e7f7      	b.n	a206 <__mcmp+0x2e>
    a216:	46c0      	nop			; (mov r8, r8)

0000a218 <__mdiff>:
    a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a21a:	465f      	mov	r7, fp
    a21c:	4656      	mov	r6, sl
    a21e:	464d      	mov	r5, r9
    a220:	4644      	mov	r4, r8
    a222:	b4f0      	push	{r4, r5, r6, r7}
    a224:	1c07      	adds	r7, r0, #0
    a226:	1c0c      	adds	r4, r1, #0
    a228:	1c08      	adds	r0, r1, #0
    a22a:	1c11      	adds	r1, r2, #0
    a22c:	1c15      	adds	r5, r2, #0
    a22e:	f7ff ffd3 	bl	a1d8 <__mcmp>
    a232:	1e06      	subs	r6, r0, #0
    a234:	d067      	beq.n	a306 <__mdiff+0xee>
    a236:	2e00      	cmp	r6, #0
    a238:	db60      	blt.n	a2fc <__mdiff+0xe4>
    a23a:	2600      	movs	r6, #0
    a23c:	6861      	ldr	r1, [r4, #4]
    a23e:	1c38      	adds	r0, r7, #0
    a240:	f7ff fd1a 	bl	9c78 <_Balloc>
    a244:	6922      	ldr	r2, [r4, #16]
    a246:	2704      	movs	r7, #4
    a248:	4694      	mov	ip, r2
    a24a:	1c3b      	adds	r3, r7, #0
    a24c:	4463      	add	r3, ip
    a24e:	009b      	lsls	r3, r3, #2
    a250:	18e3      	adds	r3, r4, r3
    a252:	19db      	adds	r3, r3, r7
    a254:	692f      	ldr	r7, [r5, #16]
    a256:	3704      	adds	r7, #4
    a258:	00bf      	lsls	r7, r7, #2
    a25a:	19ef      	adds	r7, r5, r7
    a25c:	2214      	movs	r2, #20
    a25e:	3704      	adds	r7, #4
    a260:	1812      	adds	r2, r2, r0
    a262:	60c6      	str	r6, [r0, #12]
    a264:	4698      	mov	r8, r3
    a266:	46bb      	mov	fp, r7
    a268:	3414      	adds	r4, #20
    a26a:	3514      	adds	r5, #20
    a26c:	4691      	mov	r9, r2
    a26e:	2100      	movs	r1, #0
    a270:	cc40      	ldmia	r4!, {r6}
    a272:	cd04      	ldmia	r5!, {r2}
    a274:	0433      	lsls	r3, r6, #16
    a276:	0c1b      	lsrs	r3, r3, #16
    a278:	469a      	mov	sl, r3
    a27a:	0413      	lsls	r3, r2, #16
    a27c:	0c1b      	lsrs	r3, r3, #16
    a27e:	4657      	mov	r7, sl
    a280:	1afb      	subs	r3, r7, r3
    a282:	185b      	adds	r3, r3, r1
    a284:	0c12      	lsrs	r2, r2, #16
    a286:	0c36      	lsrs	r6, r6, #16
    a288:	1419      	asrs	r1, r3, #16
    a28a:	1ab6      	subs	r6, r6, r2
    a28c:	1876      	adds	r6, r6, r1
    a28e:	041b      	lsls	r3, r3, #16
    a290:	0c1b      	lsrs	r3, r3, #16
    a292:	1431      	asrs	r1, r6, #16
    a294:	0436      	lsls	r6, r6, #16
    a296:	431e      	orrs	r6, r3
    a298:	464b      	mov	r3, r9
    a29a:	c340      	stmia	r3!, {r6}
    a29c:	1c22      	adds	r2, r4, #0
    a29e:	4699      	mov	r9, r3
    a2a0:	45ab      	cmp	fp, r5
    a2a2:	d8e5      	bhi.n	a270 <__mdiff+0x58>
    a2a4:	45a0      	cmp	r8, r4
    a2a6:	d91b      	bls.n	a2e0 <__mdiff+0xc8>
    a2a8:	ca80      	ldmia	r2!, {r7}
    a2aa:	043d      	lsls	r5, r7, #16
    a2ac:	0c2d      	lsrs	r5, r5, #16
    a2ae:	194d      	adds	r5, r1, r5
    a2b0:	142e      	asrs	r6, r5, #16
    a2b2:	0c3f      	lsrs	r7, r7, #16
    a2b4:	19f6      	adds	r6, r6, r7
    a2b6:	042d      	lsls	r5, r5, #16
    a2b8:	1431      	asrs	r1, r6, #16
    a2ba:	0c2d      	lsrs	r5, r5, #16
    a2bc:	0436      	lsls	r6, r6, #16
    a2be:	432e      	orrs	r6, r5
    a2c0:	c340      	stmia	r3!, {r6}
    a2c2:	4590      	cmp	r8, r2
    a2c4:	d8f0      	bhi.n	a2a8 <__mdiff+0x90>
    a2c6:	43e3      	mvns	r3, r4
    a2c8:	4443      	add	r3, r8
    a2ca:	089b      	lsrs	r3, r3, #2
    a2cc:	3301      	adds	r3, #1
    a2ce:	009b      	lsls	r3, r3, #2
    a2d0:	444b      	add	r3, r9
    a2d2:	3b04      	subs	r3, #4
    a2d4:	681a      	ldr	r2, [r3, #0]
    a2d6:	2a00      	cmp	r2, #0
    a2d8:	d106      	bne.n	a2e8 <__mdiff+0xd0>
    a2da:	2201      	movs	r2, #1
    a2dc:	4252      	negs	r2, r2
    a2de:	4494      	add	ip, r2
    a2e0:	3b04      	subs	r3, #4
    a2e2:	681a      	ldr	r2, [r3, #0]
    a2e4:	2a00      	cmp	r2, #0
    a2e6:	d0f8      	beq.n	a2da <__mdiff+0xc2>
    a2e8:	4663      	mov	r3, ip
    a2ea:	6103      	str	r3, [r0, #16]
    a2ec:	bc3c      	pop	{r2, r3, r4, r5}
    a2ee:	4690      	mov	r8, r2
    a2f0:	4699      	mov	r9, r3
    a2f2:	46a2      	mov	sl, r4
    a2f4:	46ab      	mov	fp, r5
    a2f6:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a2f8:	bc02      	pop	{r1}
    a2fa:	4708      	bx	r1
    a2fc:	1c23      	adds	r3, r4, #0
    a2fe:	2601      	movs	r6, #1
    a300:	1c2c      	adds	r4, r5, #0
    a302:	1c1d      	adds	r5, r3, #0
    a304:	e79a      	b.n	a23c <__mdiff+0x24>
    a306:	1c38      	adds	r0, r7, #0
    a308:	1c31      	adds	r1, r6, #0
    a30a:	f7ff fcb5 	bl	9c78 <_Balloc>
    a30e:	2301      	movs	r3, #1
    a310:	6103      	str	r3, [r0, #16]
    a312:	6146      	str	r6, [r0, #20]
    a314:	e7ea      	b.n	a2ec <__mdiff+0xd4>
    a316:	46c0      	nop			; (mov r8, r8)

0000a318 <__ulp>:
    a318:	b510      	push	{r4, lr}
    a31a:	4b10      	ldr	r3, [pc, #64]	; (a35c <__ulp+0x44>)
    a31c:	4a10      	ldr	r2, [pc, #64]	; (a360 <__ulp+0x48>)
    a31e:	400b      	ands	r3, r1
    a320:	189b      	adds	r3, r3, r2
    a322:	2b00      	cmp	r3, #0
    a324:	dd04      	ble.n	a330 <__ulp+0x18>
    a326:	1c19      	adds	r1, r3, #0
    a328:	2000      	movs	r0, #0
    a32a:	bc10      	pop	{r4}
    a32c:	bc04      	pop	{r2}
    a32e:	4710      	bx	r2
    a330:	425b      	negs	r3, r3
    a332:	151b      	asrs	r3, r3, #20
    a334:	2b13      	cmp	r3, #19
    a336:	dd0a      	ble.n	a34e <__ulp+0x36>
    a338:	3b14      	subs	r3, #20
    a33a:	2000      	movs	r0, #0
    a33c:	2100      	movs	r1, #0
    a33e:	2201      	movs	r2, #1
    a340:	2b1e      	cmp	r3, #30
    a342:	dc02      	bgt.n	a34a <__ulp+0x32>
    a344:	241f      	movs	r4, #31
    a346:	1ae3      	subs	r3, r4, r3
    a348:	409a      	lsls	r2, r3
    a34a:	1c10      	adds	r0, r2, #0
    a34c:	e7ed      	b.n	a32a <__ulp+0x12>
    a34e:	2280      	movs	r2, #128	; 0x80
    a350:	0312      	lsls	r2, r2, #12
    a352:	1c11      	adds	r1, r2, #0
    a354:	4119      	asrs	r1, r3
    a356:	2000      	movs	r0, #0
    a358:	e7e7      	b.n	a32a <__ulp+0x12>
    a35a:	46c0      	nop			; (mov r8, r8)
    a35c:	7ff00000 	.word	0x7ff00000
    a360:	fcc00000 	.word	0xfcc00000

0000a364 <__b2d>:
    a364:	b5f0      	push	{r4, r5, r6, r7, lr}
    a366:	4647      	mov	r7, r8
    a368:	b480      	push	{r7}
    a36a:	6904      	ldr	r4, [r0, #16]
    a36c:	3404      	adds	r4, #4
    a36e:	00a4      	lsls	r4, r4, #2
    a370:	1904      	adds	r4, r0, r4
    a372:	6825      	ldr	r5, [r4, #0]
    a374:	1c07      	adds	r7, r0, #0
    a376:	1c28      	adds	r0, r5, #0
    a378:	1c0e      	adds	r6, r1, #0
    a37a:	f7ff fd49 	bl	9e10 <__hi0bits>
    a37e:	2320      	movs	r3, #32
    a380:	1a1b      	subs	r3, r3, r0
    a382:	3714      	adds	r7, #20
    a384:	6033      	str	r3, [r6, #0]
    a386:	280a      	cmp	r0, #10
    a388:	dc19      	bgt.n	a3be <__b2d+0x5a>
    a38a:	260b      	movs	r6, #11
    a38c:	1a36      	subs	r6, r6, r0
    a38e:	1c29      	adds	r1, r5, #0
    a390:	40f1      	lsrs	r1, r6
    a392:	4688      	mov	r8, r1
    a394:	491a      	ldr	r1, [pc, #104]	; (a400 <__b2d+0x9c>)
    a396:	1c0b      	adds	r3, r1, #0
    a398:	4641      	mov	r1, r8
    a39a:	430b      	orrs	r3, r1
    a39c:	2100      	movs	r1, #0
    a39e:	42a7      	cmp	r7, r4
    a3a0:	d202      	bcs.n	a3a8 <__b2d+0x44>
    a3a2:	3c04      	subs	r4, #4
    a3a4:	6821      	ldr	r1, [r4, #0]
    a3a6:	40f1      	lsrs	r1, r6
    a3a8:	3015      	adds	r0, #21
    a3aa:	4085      	lsls	r5, r0
    a3ac:	1c0a      	adds	r2, r1, #0
    a3ae:	432a      	orrs	r2, r5
    a3b0:	1c10      	adds	r0, r2, #0
    a3b2:	1c19      	adds	r1, r3, #0
    a3b4:	bc04      	pop	{r2}
    a3b6:	4690      	mov	r8, r2
    a3b8:	bcf0      	pop	{r4, r5, r6, r7}
    a3ba:	bc04      	pop	{r2}
    a3bc:	4710      	bx	r2
    a3be:	2100      	movs	r1, #0
    a3c0:	42a7      	cmp	r7, r4
    a3c2:	d201      	bcs.n	a3c8 <__b2d+0x64>
    a3c4:	3c04      	subs	r4, #4
    a3c6:	6821      	ldr	r1, [r4, #0]
    a3c8:	380b      	subs	r0, #11
    a3ca:	2800      	cmp	r0, #0
    a3cc:	d013      	beq.n	a3f6 <__b2d+0x92>
    a3ce:	4b0c      	ldr	r3, [pc, #48]	; (a400 <__b2d+0x9c>)
    a3d0:	4085      	lsls	r5, r0
    a3d2:	432b      	orrs	r3, r5
    a3d4:	2620      	movs	r6, #32
    a3d6:	1a36      	subs	r6, r6, r0
    a3d8:	469c      	mov	ip, r3
    a3da:	1c0d      	adds	r5, r1, #0
    a3dc:	40f5      	lsrs	r5, r6
    a3de:	4663      	mov	r3, ip
    a3e0:	432b      	orrs	r3, r5
    a3e2:	2500      	movs	r5, #0
    a3e4:	42bc      	cmp	r4, r7
    a3e6:	d902      	bls.n	a3ee <__b2d+0x8a>
    a3e8:	3c04      	subs	r4, #4
    a3ea:	6825      	ldr	r5, [r4, #0]
    a3ec:	40f5      	lsrs	r5, r6
    a3ee:	4081      	lsls	r1, r0
    a3f0:	1c2a      	adds	r2, r5, #0
    a3f2:	430a      	orrs	r2, r1
    a3f4:	e7dc      	b.n	a3b0 <__b2d+0x4c>
    a3f6:	4802      	ldr	r0, [pc, #8]	; (a400 <__b2d+0x9c>)
    a3f8:	1c03      	adds	r3, r0, #0
    a3fa:	432b      	orrs	r3, r5
    a3fc:	1c0a      	adds	r2, r1, #0
    a3fe:	e7d7      	b.n	a3b0 <__b2d+0x4c>
    a400:	3ff00000 	.word	0x3ff00000

0000a404 <__d2b>:
    a404:	b5f0      	push	{r4, r5, r6, r7, lr}
    a406:	464f      	mov	r7, r9
    a408:	4646      	mov	r6, r8
    a40a:	b4c0      	push	{r6, r7}
    a40c:	b083      	sub	sp, #12
    a40e:	990a      	ldr	r1, [sp, #40]	; 0x28
    a410:	4688      	mov	r8, r1
    a412:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a414:	4689      	mov	r9, r1
    a416:	2101      	movs	r1, #1
    a418:	1c1f      	adds	r7, r3, #0
    a41a:	1c16      	adds	r6, r2, #0
    a41c:	f7ff fc2c 	bl	9c78 <_Balloc>
    a420:	007d      	lsls	r5, r7, #1
    a422:	033b      	lsls	r3, r7, #12
    a424:	0b1b      	lsrs	r3, r3, #12
    a426:	0d6d      	lsrs	r5, r5, #21
    a428:	1c04      	adds	r4, r0, #0
    a42a:	9300      	str	r3, [sp, #0]
    a42c:	2d00      	cmp	r5, #0
    a42e:	d003      	beq.n	a438 <__d2b+0x34>
    a430:	2280      	movs	r2, #128	; 0x80
    a432:	0352      	lsls	r2, r2, #13
    a434:	4313      	orrs	r3, r2
    a436:	9300      	str	r3, [sp, #0]
    a438:	2e00      	cmp	r6, #0
    a43a:	d01a      	beq.n	a472 <__d2b+0x6e>
    a43c:	a801      	add	r0, sp, #4
    a43e:	9601      	str	r6, [sp, #4]
    a440:	f7ff fd06 	bl	9e50 <__lo0bits>
    a444:	2800      	cmp	r0, #0
    a446:	d134      	bne.n	a4b2 <__d2b+0xae>
    a448:	9b01      	ldr	r3, [sp, #4]
    a44a:	9e00      	ldr	r6, [sp, #0]
    a44c:	6163      	str	r3, [r4, #20]
    a44e:	61a6      	str	r6, [r4, #24]
    a450:	4273      	negs	r3, r6
    a452:	4173      	adcs	r3, r6
    a454:	2602      	movs	r6, #2
    a456:	1af6      	subs	r6, r6, r3
    a458:	6126      	str	r6, [r4, #16]
    a45a:	2d00      	cmp	r5, #0
    a45c:	d013      	beq.n	a486 <__d2b+0x82>
    a45e:	4b1b      	ldr	r3, [pc, #108]	; (a4cc <__d2b+0xc8>)
    a460:	18ed      	adds	r5, r5, r3
    a462:	2335      	movs	r3, #53	; 0x35
    a464:	182d      	adds	r5, r5, r0
    a466:	4641      	mov	r1, r8
    a468:	1a18      	subs	r0, r3, r0
    a46a:	464a      	mov	r2, r9
    a46c:	600d      	str	r5, [r1, #0]
    a46e:	6010      	str	r0, [r2, #0]
    a470:	e017      	b.n	a4a2 <__d2b+0x9e>
    a472:	4668      	mov	r0, sp
    a474:	f7ff fcec 	bl	9e50 <__lo0bits>
    a478:	9b00      	ldr	r3, [sp, #0]
    a47a:	2601      	movs	r6, #1
    a47c:	6163      	str	r3, [r4, #20]
    a47e:	6126      	str	r6, [r4, #16]
    a480:	3020      	adds	r0, #32
    a482:	2d00      	cmp	r5, #0
    a484:	d1eb      	bne.n	a45e <__d2b+0x5a>
    a486:	4b12      	ldr	r3, [pc, #72]	; (a4d0 <__d2b+0xcc>)
    a488:	18c0      	adds	r0, r0, r3
    a48a:	1cf3      	adds	r3, r6, #3
    a48c:	009b      	lsls	r3, r3, #2
    a48e:	4641      	mov	r1, r8
    a490:	18e3      	adds	r3, r4, r3
    a492:	6008      	str	r0, [r1, #0]
    a494:	6858      	ldr	r0, [r3, #4]
    a496:	f7ff fcbb 	bl	9e10 <__hi0bits>
    a49a:	0176      	lsls	r6, r6, #5
    a49c:	1a36      	subs	r6, r6, r0
    a49e:	464a      	mov	r2, r9
    a4a0:	6016      	str	r6, [r2, #0]
    a4a2:	b003      	add	sp, #12
    a4a4:	1c20      	adds	r0, r4, #0
    a4a6:	bc0c      	pop	{r2, r3}
    a4a8:	4690      	mov	r8, r2
    a4aa:	4699      	mov	r9, r3
    a4ac:	bcf0      	pop	{r4, r5, r6, r7}
    a4ae:	bc02      	pop	{r1}
    a4b0:	4708      	bx	r1
    a4b2:	9e00      	ldr	r6, [sp, #0]
    a4b4:	2320      	movs	r3, #32
    a4b6:	1a1b      	subs	r3, r3, r0
    a4b8:	1c32      	adds	r2, r6, #0
    a4ba:	409a      	lsls	r2, r3
    a4bc:	1c13      	adds	r3, r2, #0
    a4be:	9a01      	ldr	r2, [sp, #4]
    a4c0:	40c6      	lsrs	r6, r0
    a4c2:	4313      	orrs	r3, r2
    a4c4:	6163      	str	r3, [r4, #20]
    a4c6:	9600      	str	r6, [sp, #0]
    a4c8:	e7c1      	b.n	a44e <__d2b+0x4a>
    a4ca:	46c0      	nop			; (mov r8, r8)
    a4cc:	fffffbcd 	.word	0xfffffbcd
    a4d0:	fffffbce 	.word	0xfffffbce

0000a4d4 <__ratio>:
    a4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4d6:	4647      	mov	r7, r8
    a4d8:	b480      	push	{r7}
    a4da:	b086      	sub	sp, #24
    a4dc:	1c0f      	adds	r7, r1, #0
    a4de:	a905      	add	r1, sp, #20
    a4e0:	1c06      	adds	r6, r0, #0
    a4e2:	f7ff ff3f 	bl	a364 <__b2d>
    a4e6:	1c04      	adds	r4, r0, #0
    a4e8:	1c0d      	adds	r5, r1, #0
    a4ea:	1c38      	adds	r0, r7, #0
    a4ec:	a904      	add	r1, sp, #16
    a4ee:	9402      	str	r4, [sp, #8]
    a4f0:	9503      	str	r5, [sp, #12]
    a4f2:	f7ff ff37 	bl	a364 <__b2d>
    a4f6:	6936      	ldr	r6, [r6, #16]
    a4f8:	1c02      	adds	r2, r0, #0
    a4fa:	1c0b      	adds	r3, r1, #0
    a4fc:	9804      	ldr	r0, [sp, #16]
    a4fe:	9905      	ldr	r1, [sp, #20]
    a500:	46b0      	mov	r8, r6
    a502:	693e      	ldr	r6, [r7, #16]
    a504:	1a09      	subs	r1, r1, r0
    a506:	4640      	mov	r0, r8
    a508:	1b87      	subs	r7, r0, r6
    a50a:	017f      	lsls	r7, r7, #5
    a50c:	468c      	mov	ip, r1
    a50e:	1c3e      	adds	r6, r7, #0
    a510:	4466      	add	r6, ip
    a512:	9200      	str	r2, [sp, #0]
    a514:	9301      	str	r3, [sp, #4]
    a516:	2e00      	cmp	r6, #0
    a518:	dd0f      	ble.n	a53a <__ratio+0x66>
    a51a:	9903      	ldr	r1, [sp, #12]
    a51c:	0536      	lsls	r6, r6, #20
    a51e:	1989      	adds	r1, r1, r6
    a520:	9103      	str	r1, [sp, #12]
    a522:	9c02      	ldr	r4, [sp, #8]
    a524:	9d03      	ldr	r5, [sp, #12]
    a526:	1c29      	adds	r1, r5, #0
    a528:	1c20      	adds	r0, r4, #0
    a52a:	f003 fba3 	bl	dc74 <____aeabi_ddiv_from_thumb>
    a52e:	b006      	add	sp, #24
    a530:	bc04      	pop	{r2}
    a532:	4690      	mov	r8, r2
    a534:	bcf0      	pop	{r4, r5, r6, r7}
    a536:	bc04      	pop	{r2}
    a538:	4710      	bx	r2
    a53a:	9b01      	ldr	r3, [sp, #4]
    a53c:	0536      	lsls	r6, r6, #20
    a53e:	1b9e      	subs	r6, r3, r6
    a540:	9601      	str	r6, [sp, #4]
    a542:	9a00      	ldr	r2, [sp, #0]
    a544:	9b01      	ldr	r3, [sp, #4]
    a546:	e7ee      	b.n	a526 <__ratio+0x52>

0000a548 <_mprec_log10>:
    a548:	b510      	push	{r4, lr}
    a54a:	1c04      	adds	r4, r0, #0
    a54c:	2817      	cmp	r0, #23
    a54e:	dd0b      	ble.n	a568 <_mprec_log10+0x20>
    a550:	490a      	ldr	r1, [pc, #40]	; (a57c <_mprec_log10+0x34>)
    a552:	4809      	ldr	r0, [pc, #36]	; (a578 <_mprec_log10+0x30>)
    a554:	4a0a      	ldr	r2, [pc, #40]	; (a580 <_mprec_log10+0x38>)
    a556:	4b0b      	ldr	r3, [pc, #44]	; (a584 <_mprec_log10+0x3c>)
    a558:	3c01      	subs	r4, #1
    a55a:	f003 fb39 	bl	dbd0 <____aeabi_dmul_from_thumb>
    a55e:	2c00      	cmp	r4, #0
    a560:	d1f8      	bne.n	a554 <_mprec_log10+0xc>
    a562:	bc10      	pop	{r4}
    a564:	bc04      	pop	{r2}
    a566:	4710      	bx	r2
    a568:	4b07      	ldr	r3, [pc, #28]	; (a588 <_mprec_log10+0x40>)
    a56a:	00c4      	lsls	r4, r0, #3
    a56c:	191c      	adds	r4, r3, r4
    a56e:	6920      	ldr	r0, [r4, #16]
    a570:	6961      	ldr	r1, [r4, #20]
    a572:	e7f6      	b.n	a562 <_mprec_log10+0x1a>
    a574:	46c0      	nop			; (mov r8, r8)
    a576:	46c0      	nop			; (mov r8, r8)
    a578:	00000000 	.word	0x00000000
    a57c:	3ff00000 	.word	0x3ff00000
    a580:	00000000 	.word	0x00000000
    a584:	40240000 	.word	0x40240000
    a588:	0000e048 	.word	0x0000e048

0000a58c <__copybits>:
    a58c:	b570      	push	{r4, r5, r6, lr}
    a58e:	6915      	ldr	r5, [r2, #16]
    a590:	1e4e      	subs	r6, r1, #1
    a592:	3504      	adds	r5, #4
    a594:	1176      	asrs	r6, r6, #5
    a596:	00ad      	lsls	r5, r5, #2
    a598:	3601      	adds	r6, #1
    a59a:	1c13      	adds	r3, r2, #0
    a59c:	1955      	adds	r5, r2, r5
    a59e:	00b6      	lsls	r6, r6, #2
    a5a0:	3314      	adds	r3, #20
    a5a2:	3504      	adds	r5, #4
    a5a4:	1986      	adds	r6, r0, r6
    a5a6:	42ab      	cmp	r3, r5
    a5a8:	d20a      	bcs.n	a5c0 <__copybits+0x34>
    a5aa:	1c01      	adds	r1, r0, #0
    a5ac:	cb10      	ldmia	r3!, {r4}
    a5ae:	c110      	stmia	r1!, {r4}
    a5b0:	429d      	cmp	r5, r3
    a5b2:	d8fb      	bhi.n	a5ac <__copybits+0x20>
    a5b4:	1aab      	subs	r3, r5, r2
    a5b6:	3b15      	subs	r3, #21
    a5b8:	089b      	lsrs	r3, r3, #2
    a5ba:	3301      	adds	r3, #1
    a5bc:	009b      	lsls	r3, r3, #2
    a5be:	18c0      	adds	r0, r0, r3
    a5c0:	4286      	cmp	r6, r0
    a5c2:	d903      	bls.n	a5cc <__copybits+0x40>
    a5c4:	2300      	movs	r3, #0
    a5c6:	c008      	stmia	r0!, {r3}
    a5c8:	4286      	cmp	r6, r0
    a5ca:	d8fc      	bhi.n	a5c6 <__copybits+0x3a>
    a5cc:	bc70      	pop	{r4, r5, r6}
    a5ce:	bc01      	pop	{r0}
    a5d0:	4700      	bx	r0
    a5d2:	46c0      	nop			; (mov r8, r8)

0000a5d4 <__any_on>:
    a5d4:	b510      	push	{r4, lr}
    a5d6:	1c03      	adds	r3, r0, #0
    a5d8:	6900      	ldr	r0, [r0, #16]
    a5da:	114a      	asrs	r2, r1, #5
    a5dc:	4290      	cmp	r0, r2
    a5de:	da17      	bge.n	a610 <__any_on+0x3c>
    a5e0:	1c02      	adds	r2, r0, #0
    a5e2:	3204      	adds	r2, #4
    a5e4:	0092      	lsls	r2, r2, #2
    a5e6:	1c19      	adds	r1, r3, #0
    a5e8:	189b      	adds	r3, r3, r2
    a5ea:	3114      	adds	r1, #20
    a5ec:	1d1a      	adds	r2, r3, #4
    a5ee:	2000      	movs	r0, #0
    a5f0:	4291      	cmp	r1, r2
    a5f2:	d20a      	bcs.n	a60a <__any_on+0x36>
    a5f4:	681a      	ldr	r2, [r3, #0]
    a5f6:	3001      	adds	r0, #1
    a5f8:	2a00      	cmp	r2, #0
    a5fa:	d106      	bne.n	a60a <__any_on+0x36>
    a5fc:	4299      	cmp	r1, r3
    a5fe:	d218      	bcs.n	a632 <__any_on+0x5e>
    a600:	3b04      	subs	r3, #4
    a602:	681a      	ldr	r2, [r3, #0]
    a604:	2a00      	cmp	r2, #0
    a606:	d0f9      	beq.n	a5fc <__any_on+0x28>
    a608:	2001      	movs	r0, #1
    a60a:	bc10      	pop	{r4}
    a60c:	bc02      	pop	{r1}
    a60e:	4708      	bx	r1
    a610:	4290      	cmp	r0, r2
    a612:	dde6      	ble.n	a5e2 <__any_on+0xe>
    a614:	201f      	movs	r0, #31
    a616:	4001      	ands	r1, r0
    a618:	d0e3      	beq.n	a5e2 <__any_on+0xe>
    a61a:	1d10      	adds	r0, r2, #4
    a61c:	0080      	lsls	r0, r0, #2
    a61e:	1818      	adds	r0, r3, r0
    a620:	6844      	ldr	r4, [r0, #4]
    a622:	1c20      	adds	r0, r4, #0
    a624:	40c8      	lsrs	r0, r1
    a626:	4088      	lsls	r0, r1
    a628:	1c01      	adds	r1, r0, #0
    a62a:	2001      	movs	r0, #1
    a62c:	42a1      	cmp	r1, r4
    a62e:	d1ec      	bne.n	a60a <__any_on+0x36>
    a630:	e7d7      	b.n	a5e2 <__any_on+0xe>
    a632:	2000      	movs	r0, #0
    a634:	e7e9      	b.n	a60a <__any_on+0x36>
    a636:	46c0      	nop			; (mov r8, r8)

0000a638 <_putc_r>:
    a638:	b570      	push	{r4, r5, r6, lr}
    a63a:	1c05      	adds	r5, r0, #0
    a63c:	1c0e      	adds	r6, r1, #0
    a63e:	1c14      	adds	r4, r2, #0
    a640:	2800      	cmp	r0, #0
    a642:	d002      	beq.n	a64a <_putc_r+0x12>
    a644:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a646:	2b00      	cmp	r3, #0
    a648:	d01a      	beq.n	a680 <_putc_r+0x48>
    a64a:	68a3      	ldr	r3, [r4, #8]
    a64c:	3b01      	subs	r3, #1
    a64e:	60a3      	str	r3, [r4, #8]
    a650:	2b00      	cmp	r3, #0
    a652:	db08      	blt.n	a666 <_putc_r+0x2e>
    a654:	6823      	ldr	r3, [r4, #0]
    a656:	701e      	strb	r6, [r3, #0]
    a658:	6823      	ldr	r3, [r4, #0]
    a65a:	7818      	ldrb	r0, [r3, #0]
    a65c:	3301      	adds	r3, #1
    a65e:	6023      	str	r3, [r4, #0]
    a660:	bc70      	pop	{r4, r5, r6}
    a662:	bc02      	pop	{r1}
    a664:	4708      	bx	r1
    a666:	69a2      	ldr	r2, [r4, #24]
    a668:	4293      	cmp	r3, r2
    a66a:	db0c      	blt.n	a686 <_putc_r+0x4e>
    a66c:	6823      	ldr	r3, [r4, #0]
    a66e:	701e      	strb	r6, [r3, #0]
    a670:	6823      	ldr	r3, [r4, #0]
    a672:	7819      	ldrb	r1, [r3, #0]
    a674:	290a      	cmp	r1, #10
    a676:	d00c      	beq.n	a692 <_putc_r+0x5a>
    a678:	3301      	adds	r3, #1
    a67a:	1c08      	adds	r0, r1, #0
    a67c:	6023      	str	r3, [r4, #0]
    a67e:	e7ef      	b.n	a660 <_putc_r+0x28>
    a680:	f7fa f89a 	bl	47b8 <__sinit>
    a684:	e7e1      	b.n	a64a <_putc_r+0x12>
    a686:	1c28      	adds	r0, r5, #0
    a688:	1c31      	adds	r1, r6, #0
    a68a:	1c22      	adds	r2, r4, #0
    a68c:	f7fd fe88 	bl	83a0 <__swbuf_r>
    a690:	e7e6      	b.n	a660 <_putc_r+0x28>
    a692:	1c28      	adds	r0, r5, #0
    a694:	1c22      	adds	r2, r4, #0
    a696:	f7fd fe83 	bl	83a0 <__swbuf_r>
    a69a:	e7e1      	b.n	a660 <_putc_r+0x28>

0000a69c <putc>:
    a69c:	b570      	push	{r4, r5, r6, lr}
    a69e:	4d19      	ldr	r5, [pc, #100]	; (a704 <putc+0x68>)
    a6a0:	1c06      	adds	r6, r0, #0
    a6a2:	6828      	ldr	r0, [r5, #0]
    a6a4:	1c0c      	adds	r4, r1, #0
    a6a6:	2800      	cmp	r0, #0
    a6a8:	d002      	beq.n	a6b0 <putc+0x14>
    a6aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
    a6ac:	2b00      	cmp	r3, #0
    a6ae:	d01a      	beq.n	a6e6 <putc+0x4a>
    a6b0:	68a3      	ldr	r3, [r4, #8]
    a6b2:	3b01      	subs	r3, #1
    a6b4:	60a3      	str	r3, [r4, #8]
    a6b6:	2b00      	cmp	r3, #0
    a6b8:	db08      	blt.n	a6cc <putc+0x30>
    a6ba:	6823      	ldr	r3, [r4, #0]
    a6bc:	701e      	strb	r6, [r3, #0]
    a6be:	6823      	ldr	r3, [r4, #0]
    a6c0:	7818      	ldrb	r0, [r3, #0]
    a6c2:	3301      	adds	r3, #1
    a6c4:	6023      	str	r3, [r4, #0]
    a6c6:	bc70      	pop	{r4, r5, r6}
    a6c8:	bc02      	pop	{r1}
    a6ca:	4708      	bx	r1
    a6cc:	69a2      	ldr	r2, [r4, #24]
    a6ce:	4293      	cmp	r3, r2
    a6d0:	db0c      	blt.n	a6ec <putc+0x50>
    a6d2:	6823      	ldr	r3, [r4, #0]
    a6d4:	701e      	strb	r6, [r3, #0]
    a6d6:	6823      	ldr	r3, [r4, #0]
    a6d8:	7819      	ldrb	r1, [r3, #0]
    a6da:	290a      	cmp	r1, #10
    a6dc:	d00c      	beq.n	a6f8 <putc+0x5c>
    a6de:	3301      	adds	r3, #1
    a6e0:	1c08      	adds	r0, r1, #0
    a6e2:	6023      	str	r3, [r4, #0]
    a6e4:	e7ef      	b.n	a6c6 <putc+0x2a>
    a6e6:	f7fa f867 	bl	47b8 <__sinit>
    a6ea:	e7e1      	b.n	a6b0 <putc+0x14>
    a6ec:	6828      	ldr	r0, [r5, #0]
    a6ee:	1c31      	adds	r1, r6, #0
    a6f0:	1c22      	adds	r2, r4, #0
    a6f2:	f7fd fe55 	bl	83a0 <__swbuf_r>
    a6f6:	e7e6      	b.n	a6c6 <putc+0x2a>
    a6f8:	6828      	ldr	r0, [r5, #0]
    a6fa:	1c22      	adds	r2, r4, #0
    a6fc:	f7fd fe50 	bl	83a0 <__swbuf_r>
    a700:	e7e1      	b.n	a6c6 <putc+0x2a>
    a702:	46c0      	nop			; (mov r8, r8)
    a704:	40000000 	.word	0x40000000

0000a708 <_realloc_r>:
    a708:	b5f0      	push	{r4, r5, r6, r7, lr}
    a70a:	465f      	mov	r7, fp
    a70c:	4656      	mov	r6, sl
    a70e:	464d      	mov	r5, r9
    a710:	4644      	mov	r4, r8
    a712:	b4f0      	push	{r4, r5, r6, r7}
    a714:	b085      	sub	sp, #20
    a716:	4680      	mov	r8, r0
    a718:	1c0e      	adds	r6, r1, #0
    a71a:	1c17      	adds	r7, r2, #0
    a71c:	2900      	cmp	r1, #0
    a71e:	d100      	bne.n	a722 <_realloc_r+0x1a>
    a720:	e15f      	b.n	a9e2 <_realloc_r+0x2da>
    a722:	1c34      	adds	r4, r6, #0
    a724:	1c3d      	adds	r5, r7, #0
    a726:	3c08      	subs	r4, #8
    a728:	350b      	adds	r5, #11
    a72a:	f7fa fe17 	bl	535c <__malloc_lock>
    a72e:	6863      	ldr	r3, [r4, #4]
    a730:	2d16      	cmp	r5, #22
    a732:	d900      	bls.n	a736 <_realloc_r+0x2e>
    a734:	e085      	b.n	a842 <_realloc_r+0x13a>
    a736:	2210      	movs	r2, #16
    a738:	2100      	movs	r1, #0
    a73a:	9100      	str	r1, [sp, #0]
    a73c:	9201      	str	r2, [sp, #4]
    a73e:	1c15      	adds	r5, r2, #0
    a740:	42bd      	cmp	r5, r7
    a742:	d200      	bcs.n	a746 <_realloc_r+0x3e>
    a744:	e152      	b.n	a9ec <_realloc_r+0x2e4>
    a746:	9800      	ldr	r0, [sp, #0]
    a748:	2800      	cmp	r0, #0
    a74a:	d000      	beq.n	a74e <_realloc_r+0x46>
    a74c:	e14e      	b.n	a9ec <_realloc_r+0x2e4>
    a74e:	2203      	movs	r2, #3
    a750:	1c18      	adds	r0, r3, #0
    a752:	4390      	bics	r0, r2
    a754:	9901      	ldr	r1, [sp, #4]
    a756:	4681      	mov	r9, r0
    a758:	4692      	mov	sl, r2
    a75a:	4589      	cmp	r9, r1
    a75c:	da77      	bge.n	a84e <_realloc_r+0x146>
    a75e:	4abb      	ldr	r2, [pc, #748]	; (aa4c <_realloc_r+0x344>)
    a760:	6892      	ldr	r2, [r2, #8]
    a762:	1c21      	adds	r1, r4, #0
    a764:	4449      	add	r1, r9
    a766:	4694      	mov	ip, r2
    a768:	458c      	cmp	ip, r1
    a76a:	d100      	bne.n	a76e <_realloc_r+0x66>
    a76c:	e143      	b.n	a9f6 <_realloc_r+0x2ee>
    a76e:	6848      	ldr	r0, [r1, #4]
    a770:	2201      	movs	r2, #1
    a772:	9003      	str	r0, [sp, #12]
    a774:	4390      	bics	r0, r2
    a776:	4683      	mov	fp, r0
    a778:	448b      	add	fp, r1
    a77a:	4658      	mov	r0, fp
    a77c:	6840      	ldr	r0, [r0, #4]
    a77e:	4210      	tst	r0, r2
    a780:	d100      	bne.n	a784 <_realloc_r+0x7c>
    a782:	e081      	b.n	a888 <_realloc_r+0x180>
    a784:	9800      	ldr	r0, [sp, #0]
    a786:	1c01      	adds	r1, r0, #0
    a788:	07da      	lsls	r2, r3, #31
    a78a:	d500      	bpl.n	a78e <_realloc_r+0x86>
    a78c:	e09d      	b.n	a8ca <_realloc_r+0x1c2>
    a78e:	6823      	ldr	r3, [r4, #0]
    a790:	1ae3      	subs	r3, r4, r3
    a792:	469a      	mov	sl, r3
    a794:	685b      	ldr	r3, [r3, #4]
    a796:	469b      	mov	fp, r3
    a798:	465a      	mov	r2, fp
    a79a:	2303      	movs	r3, #3
    a79c:	439a      	bics	r2, r3
    a79e:	1c13      	adds	r3, r2, #0
    a7a0:	2900      	cmp	r1, #0
    a7a2:	d100      	bne.n	a7a6 <_realloc_r+0x9e>
    a7a4:	e0d6      	b.n	a954 <_realloc_r+0x24c>
    a7a6:	4561      	cmp	r1, ip
    a7a8:	d100      	bne.n	a7ac <_realloc_r+0xa4>
    a7aa:	e151      	b.n	aa50 <_realloc_r+0x348>
    a7ac:	444b      	add	r3, r9
    a7ae:	9303      	str	r3, [sp, #12]
    a7b0:	181b      	adds	r3, r3, r0
    a7b2:	469b      	mov	fp, r3
    a7b4:	9b01      	ldr	r3, [sp, #4]
    a7b6:	455b      	cmp	r3, fp
    a7b8:	dd00      	ble.n	a7bc <_realloc_r+0xb4>
    a7ba:	e0cd      	b.n	a958 <_realloc_r+0x250>
    a7bc:	68cb      	ldr	r3, [r1, #12]
    a7be:	688a      	ldr	r2, [r1, #8]
    a7c0:	60d3      	str	r3, [r2, #12]
    a7c2:	609a      	str	r2, [r3, #8]
    a7c4:	4650      	mov	r0, sl
    a7c6:	68c3      	ldr	r3, [r0, #12]
    a7c8:	6882      	ldr	r2, [r0, #8]
    a7ca:	60d3      	str	r3, [r2, #12]
    a7cc:	609a      	str	r2, [r3, #8]
    a7ce:	2304      	movs	r3, #4
    a7d0:	425b      	negs	r3, r3
    a7d2:	2108      	movs	r1, #8
    a7d4:	1c1a      	adds	r2, r3, #0
    a7d6:	1c0f      	adds	r7, r1, #0
    a7d8:	444a      	add	r2, r9
    a7da:	4457      	add	r7, sl
    a7dc:	2a24      	cmp	r2, #36	; 0x24
    a7de:	d900      	bls.n	a7e2 <_realloc_r+0xda>
    a7e0:	e194      	b.n	ab0c <_realloc_r+0x404>
    a7e2:	1c39      	adds	r1, r7, #0
    a7e4:	2a13      	cmp	r2, #19
    a7e6:	d920      	bls.n	a82a <_realloc_r+0x122>
    a7e8:	1c33      	adds	r3, r6, #0
    a7ea:	cb02      	ldmia	r3!, {r1}
    a7ec:	6081      	str	r1, [r0, #8]
    a7ee:	6871      	ldr	r1, [r6, #4]
    a7f0:	60c1      	str	r1, [r0, #12]
    a7f2:	2010      	movs	r0, #16
    a7f4:	1c01      	adds	r1, r0, #0
    a7f6:	4451      	add	r1, sl
    a7f8:	1d1e      	adds	r6, r3, #4
    a7fa:	2a1b      	cmp	r2, #27
    a7fc:	d915      	bls.n	a82a <_realloc_r+0x122>
    a7fe:	685b      	ldr	r3, [r3, #4]
    a800:	4651      	mov	r1, sl
    a802:	610b      	str	r3, [r1, #16]
    a804:	6871      	ldr	r1, [r6, #4]
    a806:	4650      	mov	r0, sl
    a808:	6141      	str	r1, [r0, #20]
    a80a:	2018      	movs	r0, #24
    a80c:	1c01      	adds	r1, r0, #0
    a80e:	1d33      	adds	r3, r6, #4
    a810:	4451      	add	r1, sl
    a812:	3608      	adds	r6, #8
    a814:	2a24      	cmp	r2, #36	; 0x24
    a816:	d108      	bne.n	a82a <_realloc_r+0x122>
    a818:	685b      	ldr	r3, [r3, #4]
    a81a:	4651      	mov	r1, sl
    a81c:	618b      	str	r3, [r1, #24]
    a81e:	6873      	ldr	r3, [r6, #4]
    a820:	3a04      	subs	r2, #4
    a822:	61cb      	str	r3, [r1, #28]
    a824:	1c11      	adds	r1, r2, #0
    a826:	4451      	add	r1, sl
    a828:	3608      	adds	r6, #8
    a82a:	1c32      	adds	r2, r6, #0
    a82c:	ca01      	ldmia	r2!, {r0}
    a82e:	1c0b      	adds	r3, r1, #0
    a830:	c301      	stmia	r3!, {r0}
    a832:	6870      	ldr	r0, [r6, #4]
    a834:	6048      	str	r0, [r1, #4]
    a836:	6852      	ldr	r2, [r2, #4]
    a838:	605a      	str	r2, [r3, #4]
    a83a:	4650      	mov	r0, sl
    a83c:	6843      	ldr	r3, [r0, #4]
    a83e:	4654      	mov	r4, sl
    a840:	e008      	b.n	a854 <_realloc_r+0x14c>
    a842:	2207      	movs	r2, #7
    a844:	4395      	bics	r5, r2
    a846:	0fe8      	lsrs	r0, r5, #31
    a848:	9501      	str	r5, [sp, #4]
    a84a:	9000      	str	r0, [sp, #0]
    a84c:	e778      	b.n	a740 <_realloc_r+0x38>
    a84e:	1c27      	adds	r7, r4, #0
    a850:	3708      	adds	r7, #8
    a852:	4683      	mov	fp, r0
    a854:	4658      	mov	r0, fp
    a856:	1b42      	subs	r2, r0, r5
    a858:	2a0f      	cmp	r2, #15
    a85a:	d825      	bhi.n	a8a8 <_realloc_r+0x1a0>
    a85c:	2201      	movs	r2, #1
    a85e:	4013      	ands	r3, r2
    a860:	4659      	mov	r1, fp
    a862:	430b      	orrs	r3, r1
    a864:	6063      	str	r3, [r4, #4]
    a866:	445c      	add	r4, fp
    a868:	6863      	ldr	r3, [r4, #4]
    a86a:	431a      	orrs	r2, r3
    a86c:	6062      	str	r2, [r4, #4]
    a86e:	4640      	mov	r0, r8
    a870:	f7fa fd76 	bl	5360 <__malloc_unlock>
    a874:	b005      	add	sp, #20
    a876:	1c38      	adds	r0, r7, #0
    a878:	bc3c      	pop	{r2, r3, r4, r5}
    a87a:	4690      	mov	r8, r2
    a87c:	4699      	mov	r9, r3
    a87e:	46a2      	mov	sl, r4
    a880:	46ab      	mov	fp, r5
    a882:	bcf0      	pop	{r4, r5, r6, r7}
    a884:	bc02      	pop	{r1}
    a886:	4708      	bx	r1
    a888:	9803      	ldr	r0, [sp, #12]
    a88a:	4652      	mov	r2, sl
    a88c:	4390      	bics	r0, r2
    a88e:	4683      	mov	fp, r0
    a890:	9a01      	ldr	r2, [sp, #4]
    a892:	44cb      	add	fp, r9
    a894:	455a      	cmp	r2, fp
    a896:	dd00      	ble.n	a89a <_realloc_r+0x192>
    a898:	e776      	b.n	a788 <_realloc_r+0x80>
    a89a:	68ca      	ldr	r2, [r1, #12]
    a89c:	6889      	ldr	r1, [r1, #8]
    a89e:	1c27      	adds	r7, r4, #0
    a8a0:	60ca      	str	r2, [r1, #12]
    a8a2:	6091      	str	r1, [r2, #8]
    a8a4:	3708      	adds	r7, #8
    a8a6:	e7d5      	b.n	a854 <_realloc_r+0x14c>
    a8a8:	2001      	movs	r0, #1
    a8aa:	4003      	ands	r3, r0
    a8ac:	1961      	adds	r1, r4, r5
    a8ae:	431d      	orrs	r5, r3
    a8b0:	1c03      	adds	r3, r0, #0
    a8b2:	4313      	orrs	r3, r2
    a8b4:	6065      	str	r5, [r4, #4]
    a8b6:	604b      	str	r3, [r1, #4]
    a8b8:	188a      	adds	r2, r1, r2
    a8ba:	6853      	ldr	r3, [r2, #4]
    a8bc:	4318      	orrs	r0, r3
    a8be:	6050      	str	r0, [r2, #4]
    a8c0:	3108      	adds	r1, #8
    a8c2:	4640      	mov	r0, r8
    a8c4:	f7fa f8b6 	bl	4a34 <_free_r>
    a8c8:	e7d1      	b.n	a86e <_realloc_r+0x166>
    a8ca:	1c39      	adds	r1, r7, #0
    a8cc:	4640      	mov	r0, r8
    a8ce:	f7fa f9fb 	bl	4cc8 <_malloc_r>
    a8d2:	1e07      	subs	r7, r0, #0
    a8d4:	d0cb      	beq.n	a86e <_realloc_r+0x166>
    a8d6:	6863      	ldr	r3, [r4, #4]
    a8d8:	2101      	movs	r1, #1
    a8da:	1c18      	adds	r0, r3, #0
    a8dc:	1c3a      	adds	r2, r7, #0
    a8de:	4388      	bics	r0, r1
    a8e0:	3a08      	subs	r2, #8
    a8e2:	1821      	adds	r1, r4, r0
    a8e4:	428a      	cmp	r2, r1
    a8e6:	d100      	bne.n	a8ea <_realloc_r+0x1e2>
    a8e8:	e108      	b.n	aafc <_realloc_r+0x3f4>
    a8ea:	2304      	movs	r3, #4
    a8ec:	425b      	negs	r3, r3
    a8ee:	1c1a      	adds	r2, r3, #0
    a8f0:	444a      	add	r2, r9
    a8f2:	2a24      	cmp	r2, #36	; 0x24
    a8f4:	d900      	bls.n	a8f8 <_realloc_r+0x1f0>
    a8f6:	e0a4      	b.n	aa42 <_realloc_r+0x33a>
    a8f8:	1c31      	adds	r1, r6, #0
    a8fa:	1c3b      	adds	r3, r7, #0
    a8fc:	2a13      	cmp	r2, #19
    a8fe:	d919      	bls.n	a934 <_realloc_r+0x22c>
    a900:	1c34      	adds	r4, r6, #0
    a902:	cc08      	ldmia	r4!, {r3}
    a904:	1c38      	adds	r0, r7, #0
    a906:	c008      	stmia	r0!, {r3}
    a908:	6873      	ldr	r3, [r6, #4]
    a90a:	1d21      	adds	r1, r4, #4
    a90c:	607b      	str	r3, [r7, #4]
    a90e:	1d03      	adds	r3, r0, #4
    a910:	2a1b      	cmp	r2, #27
    a912:	d90f      	bls.n	a934 <_realloc_r+0x22c>
    a914:	6864      	ldr	r4, [r4, #4]
    a916:	6044      	str	r4, [r0, #4]
    a918:	1d0c      	adds	r4, r1, #4
    a91a:	6849      	ldr	r1, [r1, #4]
    a91c:	1d18      	adds	r0, r3, #4
    a91e:	6059      	str	r1, [r3, #4]
    a920:	3308      	adds	r3, #8
    a922:	1d21      	adds	r1, r4, #4
    a924:	2a24      	cmp	r2, #36	; 0x24
    a926:	d105      	bne.n	a934 <_realloc_r+0x22c>
    a928:	6862      	ldr	r2, [r4, #4]
    a92a:	6042      	str	r2, [r0, #4]
    a92c:	684a      	ldr	r2, [r1, #4]
    a92e:	3108      	adds	r1, #8
    a930:	605a      	str	r2, [r3, #4]
    a932:	3308      	adds	r3, #8
    a934:	1c08      	adds	r0, r1, #0
    a936:	c810      	ldmia	r0!, {r4}
    a938:	1c1a      	adds	r2, r3, #0
    a93a:	c210      	stmia	r2!, {r4}
    a93c:	6849      	ldr	r1, [r1, #4]
    a93e:	6059      	str	r1, [r3, #4]
    a940:	6843      	ldr	r3, [r0, #4]
    a942:	6053      	str	r3, [r2, #4]
    a944:	4640      	mov	r0, r8
    a946:	1c31      	adds	r1, r6, #0
    a948:	f7fa f874 	bl	4a34 <_free_r>
    a94c:	4640      	mov	r0, r8
    a94e:	f7fa fd07 	bl	5360 <__malloc_unlock>
    a952:	e78f      	b.n	a874 <_realloc_r+0x16c>
    a954:	444b      	add	r3, r9
    a956:	9303      	str	r3, [sp, #12]
    a958:	9b01      	ldr	r3, [sp, #4]
    a95a:	9803      	ldr	r0, [sp, #12]
    a95c:	4283      	cmp	r3, r0
    a95e:	dcb4      	bgt.n	a8ca <_realloc_r+0x1c2>
    a960:	4651      	mov	r1, sl
    a962:	68cb      	ldr	r3, [r1, #12]
    a964:	688a      	ldr	r2, [r1, #8]
    a966:	60d3      	str	r3, [r2, #12]
    a968:	609a      	str	r2, [r3, #8]
    a96a:	2304      	movs	r3, #4
    a96c:	2208      	movs	r2, #8
    a96e:	425b      	negs	r3, r3
    a970:	1c17      	adds	r7, r2, #0
    a972:	1c1a      	adds	r2, r3, #0
    a974:	444a      	add	r2, r9
    a976:	4457      	add	r7, sl
    a978:	2a24      	cmp	r2, #36	; 0x24
    a97a:	d858      	bhi.n	aa2e <_realloc_r+0x326>
    a97c:	1c39      	adds	r1, r7, #0
    a97e:	2a13      	cmp	r2, #19
    a980:	d921      	bls.n	a9c6 <_realloc_r+0x2be>
    a982:	1c33      	adds	r3, r6, #0
    a984:	cb02      	ldmia	r3!, {r1}
    a986:	4650      	mov	r0, sl
    a988:	6081      	str	r1, [r0, #8]
    a98a:	6871      	ldr	r1, [r6, #4]
    a98c:	60c1      	str	r1, [r0, #12]
    a98e:	2010      	movs	r0, #16
    a990:	1c01      	adds	r1, r0, #0
    a992:	4451      	add	r1, sl
    a994:	1d1e      	adds	r6, r3, #4
    a996:	2a1b      	cmp	r2, #27
    a998:	d915      	bls.n	a9c6 <_realloc_r+0x2be>
    a99a:	685b      	ldr	r3, [r3, #4]
    a99c:	4651      	mov	r1, sl
    a99e:	610b      	str	r3, [r1, #16]
    a9a0:	6871      	ldr	r1, [r6, #4]
    a9a2:	4650      	mov	r0, sl
    a9a4:	6141      	str	r1, [r0, #20]
    a9a6:	2018      	movs	r0, #24
    a9a8:	1c01      	adds	r1, r0, #0
    a9aa:	1d33      	adds	r3, r6, #4
    a9ac:	4451      	add	r1, sl
    a9ae:	3608      	adds	r6, #8
    a9b0:	2a24      	cmp	r2, #36	; 0x24
    a9b2:	d108      	bne.n	a9c6 <_realloc_r+0x2be>
    a9b4:	685b      	ldr	r3, [r3, #4]
    a9b6:	4651      	mov	r1, sl
    a9b8:	618b      	str	r3, [r1, #24]
    a9ba:	6873      	ldr	r3, [r6, #4]
    a9bc:	3a04      	subs	r2, #4
    a9be:	61cb      	str	r3, [r1, #28]
    a9c0:	1c11      	adds	r1, r2, #0
    a9c2:	4451      	add	r1, sl
    a9c4:	3608      	adds	r6, #8
    a9c6:	1c32      	adds	r2, r6, #0
    a9c8:	ca01      	ldmia	r2!, {r0}
    a9ca:	1c0b      	adds	r3, r1, #0
    a9cc:	c301      	stmia	r3!, {r0}
    a9ce:	6870      	ldr	r0, [r6, #4]
    a9d0:	6048      	str	r0, [r1, #4]
    a9d2:	6852      	ldr	r2, [r2, #4]
    a9d4:	9903      	ldr	r1, [sp, #12]
    a9d6:	605a      	str	r2, [r3, #4]
    a9d8:	4650      	mov	r0, sl
    a9da:	6843      	ldr	r3, [r0, #4]
    a9dc:	468b      	mov	fp, r1
    a9de:	4654      	mov	r4, sl
    a9e0:	e738      	b.n	a854 <_realloc_r+0x14c>
    a9e2:	1c11      	adds	r1, r2, #0
    a9e4:	f7fa f970 	bl	4cc8 <_malloc_r>
    a9e8:	1c07      	adds	r7, r0, #0
    a9ea:	e743      	b.n	a874 <_realloc_r+0x16c>
    a9ec:	230c      	movs	r3, #12
    a9ee:	4641      	mov	r1, r8
    a9f0:	600b      	str	r3, [r1, #0]
    a9f2:	2700      	movs	r7, #0
    a9f4:	e73e      	b.n	a874 <_realloc_r+0x16c>
    a9f6:	6850      	ldr	r0, [r2, #4]
    a9f8:	1c11      	adds	r1, r2, #0
    a9fa:	4652      	mov	r2, sl
    a9fc:	4390      	bics	r0, r2
    a9fe:	4682      	mov	sl, r0
    aa00:	2210      	movs	r2, #16
    aa02:	44ca      	add	sl, r9
    aa04:	1952      	adds	r2, r2, r5
    aa06:	4592      	cmp	sl, r2
    aa08:	da00      	bge.n	aa0c <_realloc_r+0x304>
    aa0a:	e6bd      	b.n	a788 <_realloc_r+0x80>
    aa0c:	4b0f      	ldr	r3, [pc, #60]	; (aa4c <_realloc_r+0x344>)
    aa0e:	1962      	adds	r2, r4, r5
    aa10:	4650      	mov	r0, sl
    aa12:	609a      	str	r2, [r3, #8]
    aa14:	1b41      	subs	r1, r0, r5
    aa16:	2301      	movs	r3, #1
    aa18:	4319      	orrs	r1, r3
    aa1a:	6051      	str	r1, [r2, #4]
    aa1c:	6862      	ldr	r2, [r4, #4]
    aa1e:	4013      	ands	r3, r2
    aa20:	431d      	orrs	r5, r3
    aa22:	6065      	str	r5, [r4, #4]
    aa24:	4640      	mov	r0, r8
    aa26:	f7fa fc9b 	bl	5360 <__malloc_unlock>
    aa2a:	1c37      	adds	r7, r6, #0
    aa2c:	e722      	b.n	a874 <_realloc_r+0x16c>
    aa2e:	1c38      	adds	r0, r7, #0
    aa30:	1c31      	adds	r1, r6, #0
    aa32:	f7ff f8d3 	bl	9bdc <memmove>
    aa36:	9803      	ldr	r0, [sp, #12]
    aa38:	4652      	mov	r2, sl
    aa3a:	6853      	ldr	r3, [r2, #4]
    aa3c:	4683      	mov	fp, r0
    aa3e:	4654      	mov	r4, sl
    aa40:	e708      	b.n	a854 <_realloc_r+0x14c>
    aa42:	1c38      	adds	r0, r7, #0
    aa44:	1c31      	adds	r1, r6, #0
    aa46:	f7ff f8c9 	bl	9bdc <memmove>
    aa4a:	e77b      	b.n	a944 <_realloc_r+0x23c>
    aa4c:	40000430 	.word	0x40000430
    aa50:	444b      	add	r3, r9
    aa52:	9303      	str	r3, [sp, #12]
    aa54:	181b      	adds	r3, r3, r0
    aa56:	469b      	mov	fp, r3
    aa58:	1c2b      	adds	r3, r5, #0
    aa5a:	3310      	adds	r3, #16
    aa5c:	459b      	cmp	fp, r3
    aa5e:	da00      	bge.n	aa62 <_realloc_r+0x35a>
    aa60:	e77a      	b.n	a958 <_realloc_r+0x250>
    aa62:	4652      	mov	r2, sl
    aa64:	68d3      	ldr	r3, [r2, #12]
    aa66:	2004      	movs	r0, #4
    aa68:	6892      	ldr	r2, [r2, #8]
    aa6a:	4240      	negs	r0, r0
    aa6c:	60d3      	str	r3, [r2, #12]
    aa6e:	609a      	str	r2, [r3, #8]
    aa70:	2308      	movs	r3, #8
    aa72:	1c02      	adds	r2, r0, #0
    aa74:	1c1f      	adds	r7, r3, #0
    aa76:	444a      	add	r2, r9
    aa78:	4457      	add	r7, sl
    aa7a:	2a24      	cmp	r2, #36	; 0x24
    aa7c:	d84e      	bhi.n	ab1c <_realloc_r+0x414>
    aa7e:	1c39      	adds	r1, r7, #0
    aa80:	2a13      	cmp	r2, #19
    aa82:	d921      	bls.n	aac8 <_realloc_r+0x3c0>
    aa84:	1c33      	adds	r3, r6, #0
    aa86:	cb02      	ldmia	r3!, {r1}
    aa88:	4650      	mov	r0, sl
    aa8a:	6081      	str	r1, [r0, #8]
    aa8c:	6871      	ldr	r1, [r6, #4]
    aa8e:	60c1      	str	r1, [r0, #12]
    aa90:	2010      	movs	r0, #16
    aa92:	1c01      	adds	r1, r0, #0
    aa94:	4451      	add	r1, sl
    aa96:	1d1e      	adds	r6, r3, #4
    aa98:	2a1b      	cmp	r2, #27
    aa9a:	d915      	bls.n	aac8 <_realloc_r+0x3c0>
    aa9c:	685b      	ldr	r3, [r3, #4]
    aa9e:	4651      	mov	r1, sl
    aaa0:	610b      	str	r3, [r1, #16]
    aaa2:	6871      	ldr	r1, [r6, #4]
    aaa4:	4650      	mov	r0, sl
    aaa6:	6141      	str	r1, [r0, #20]
    aaa8:	2018      	movs	r0, #24
    aaaa:	1c01      	adds	r1, r0, #0
    aaac:	1d33      	adds	r3, r6, #4
    aaae:	4451      	add	r1, sl
    aab0:	3608      	adds	r6, #8
    aab2:	2a24      	cmp	r2, #36	; 0x24
    aab4:	d108      	bne.n	aac8 <_realloc_r+0x3c0>
    aab6:	685b      	ldr	r3, [r3, #4]
    aab8:	4651      	mov	r1, sl
    aaba:	618b      	str	r3, [r1, #24]
    aabc:	6873      	ldr	r3, [r6, #4]
    aabe:	3a04      	subs	r2, #4
    aac0:	61cb      	str	r3, [r1, #28]
    aac2:	1c11      	adds	r1, r2, #0
    aac4:	4451      	add	r1, sl
    aac6:	3608      	adds	r6, #8
    aac8:	1c32      	adds	r2, r6, #0
    aaca:	ca01      	ldmia	r2!, {r0}
    aacc:	1c0b      	adds	r3, r1, #0
    aace:	c301      	stmia	r3!, {r0}
    aad0:	6870      	ldr	r0, [r6, #4]
    aad2:	6048      	str	r0, [r1, #4]
    aad4:	6852      	ldr	r2, [r2, #4]
    aad6:	605a      	str	r2, [r3, #4]
    aad8:	1c2a      	adds	r2, r5, #0
    aada:	4b13      	ldr	r3, [pc, #76]	; (ab28 <_realloc_r+0x420>)
    aadc:	4452      	add	r2, sl
    aade:	4659      	mov	r1, fp
    aae0:	1b48      	subs	r0, r1, r5
    aae2:	609a      	str	r2, [r3, #8]
    aae4:	2301      	movs	r3, #1
    aae6:	4318      	orrs	r0, r3
    aae8:	6050      	str	r0, [r2, #4]
    aaea:	4650      	mov	r0, sl
    aaec:	6842      	ldr	r2, [r0, #4]
    aaee:	4013      	ands	r3, r2
    aaf0:	431d      	orrs	r5, r3
    aaf2:	6045      	str	r5, [r0, #4]
    aaf4:	4640      	mov	r0, r8
    aaf6:	f7fa fc33 	bl	5360 <__malloc_unlock>
    aafa:	e6bb      	b.n	a874 <_realloc_r+0x16c>
    aafc:	6852      	ldr	r2, [r2, #4]
    aafe:	2103      	movs	r1, #3
    ab00:	438a      	bics	r2, r1
    ab02:	4693      	mov	fp, r2
    ab04:	1c27      	adds	r7, r4, #0
    ab06:	44cb      	add	fp, r9
    ab08:	3708      	adds	r7, #8
    ab0a:	e6a3      	b.n	a854 <_realloc_r+0x14c>
    ab0c:	1c31      	adds	r1, r6, #0
    ab0e:	1c38      	adds	r0, r7, #0
    ab10:	f7ff f864 	bl	9bdc <memmove>
    ab14:	4651      	mov	r1, sl
    ab16:	684b      	ldr	r3, [r1, #4]
    ab18:	4654      	mov	r4, sl
    ab1a:	e69b      	b.n	a854 <_realloc_r+0x14c>
    ab1c:	1c38      	adds	r0, r7, #0
    ab1e:	1c31      	adds	r1, r6, #0
    ab20:	f7ff f85c 	bl	9bdc <memmove>
    ab24:	e7d8      	b.n	aad8 <_realloc_r+0x3d0>
    ab26:	46c0      	nop			; (mov r8, r8)
    ab28:	40000430 	.word	0x40000430

0000ab2c <__fpclassifyd>:
    ab2c:	b530      	push	{r4, r5, lr}
    ab2e:	1c02      	adds	r2, r0, #0
    ab30:	1c0b      	adds	r3, r1, #0
    ab32:	1c11      	adds	r1, r2, #0
    ab34:	2002      	movs	r0, #2
    ab36:	4319      	orrs	r1, r3
    ab38:	d028      	beq.n	ab8c <__fpclassifyd+0x60>
    ab3a:	4251      	negs	r1, r2
    ab3c:	414a      	adcs	r2, r1
    ab3e:	2a00      	cmp	r2, #0
    ab40:	d127      	bne.n	ab92 <__fpclassifyd+0x66>
    ab42:	4d1c      	ldr	r5, [pc, #112]	; (abb4 <__fpclassifyd+0x88>)
    ab44:	481c      	ldr	r0, [pc, #112]	; (abb8 <__fpclassifyd+0x8c>)
    ab46:	195c      	adds	r4, r3, r5
    ab48:	2100      	movs	r1, #0
    ab4a:	42a0      	cmp	r0, r4
    ab4c:	4149      	adcs	r1, r1
    ab4e:	2900      	cmp	r1, #0
    ab50:	d12c      	bne.n	abac <__fpclassifyd+0x80>
    ab52:	4d1a      	ldr	r5, [pc, #104]	; (abbc <__fpclassifyd+0x90>)
    ab54:	195c      	adds	r4, r3, r5
    ab56:	42a0      	cmp	r0, r4
    ab58:	4149      	adcs	r1, r1
    ab5a:	2900      	cmp	r1, #0
    ab5c:	d126      	bne.n	abac <__fpclassifyd+0x80>
    ab5e:	2080      	movs	r0, #128	; 0x80
    ab60:	0600      	lsls	r0, r0, #24
    ab62:	181c      	adds	r4, r3, r0
    ab64:	4816      	ldr	r0, [pc, #88]	; (abc0 <__fpclassifyd+0x94>)
    ab66:	42a0      	cmp	r0, r4
    ab68:	4149      	adcs	r1, r1
    ab6a:	2900      	cmp	r1, #0
    ab6c:	d120      	bne.n	abb0 <__fpclassifyd+0x84>
    ab6e:	4298      	cmp	r0, r3
    ab70:	4149      	adcs	r1, r1
    ab72:	2900      	cmp	r1, #0
    ab74:	d11c      	bne.n	abb0 <__fpclassifyd+0x84>
    ab76:	2180      	movs	r1, #128	; 0x80
    ab78:	4c12      	ldr	r4, [pc, #72]	; (abc4 <__fpclassifyd+0x98>)
    ab7a:	0349      	lsls	r1, r1, #13
    ab7c:	1858      	adds	r0, r3, r1
    ab7e:	191b      	adds	r3, r3, r4
    ab80:	4241      	negs	r1, r0
    ab82:	4148      	adcs	r0, r1
    ab84:	4259      	negs	r1, r3
    ab86:	414b      	adcs	r3, r1
    ab88:	4318      	orrs	r0, r3
    ab8a:	4010      	ands	r0, r2
    ab8c:	bc30      	pop	{r4, r5}
    ab8e:	bc02      	pop	{r1}
    ab90:	4708      	bx	r1
    ab92:	2480      	movs	r4, #128	; 0x80
    ab94:	0624      	lsls	r4, r4, #24
    ab96:	1919      	adds	r1, r3, r4
    ab98:	2900      	cmp	r1, #0
    ab9a:	d0f7      	beq.n	ab8c <__fpclassifyd+0x60>
    ab9c:	4d05      	ldr	r5, [pc, #20]	; (abb4 <__fpclassifyd+0x88>)
    ab9e:	4806      	ldr	r0, [pc, #24]	; (abb8 <__fpclassifyd+0x8c>)
    aba0:	195c      	adds	r4, r3, r5
    aba2:	2100      	movs	r1, #0
    aba4:	42a0      	cmp	r0, r4
    aba6:	4149      	adcs	r1, r1
    aba8:	2900      	cmp	r1, #0
    abaa:	d0d2      	beq.n	ab52 <__fpclassifyd+0x26>
    abac:	2004      	movs	r0, #4
    abae:	e7ed      	b.n	ab8c <__fpclassifyd+0x60>
    abb0:	2003      	movs	r0, #3
    abb2:	e7eb      	b.n	ab8c <__fpclassifyd+0x60>
    abb4:	7ff00000 	.word	0x7ff00000
    abb8:	7fdfffff 	.word	0x7fdfffff
    abbc:	fff00000 	.word	0xfff00000
    abc0:	000fffff 	.word	0x000fffff
    abc4:	80100000 	.word	0x80100000

0000abc8 <strcmp>:
    abc8:	7802      	ldrb	r2, [r0, #0]
    abca:	780b      	ldrb	r3, [r1, #0]
    abcc:	3001      	adds	r0, #1
    abce:	3101      	adds	r1, #1
    abd0:	2a00      	cmp	r2, #0
    abd2:	d001      	beq.n	abd8 <strcmp+0x10>
    abd4:	429a      	cmp	r2, r3
    abd6:	d0f7      	beq.n	abc8 <strcmp>
    abd8:	1ad0      	subs	r0, r2, r3
    abda:	4770      	bx	lr

0000abdc <__ssprint_r>:
    abdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    abde:	465f      	mov	r7, fp
    abe0:	4656      	mov	r6, sl
    abe2:	464d      	mov	r5, r9
    abe4:	4644      	mov	r4, r8
    abe6:	b4f0      	push	{r4, r5, r6, r7}
    abe8:	6894      	ldr	r4, [r2, #8]
    abea:	b083      	sub	sp, #12
    abec:	9001      	str	r0, [sp, #4]
    abee:	1c0d      	adds	r5, r1, #0
    abf0:	1c16      	adds	r6, r2, #0
    abf2:	6817      	ldr	r7, [r2, #0]
    abf4:	2c00      	cmp	r4, #0
    abf6:	d076      	beq.n	ace6 <__ssprint_r+0x10a>
    abf8:	6808      	ldr	r0, [r1, #0]
    abfa:	2100      	movs	r1, #0
    abfc:	1c0c      	adds	r4, r1, #0
    abfe:	468a      	mov	sl, r1
    ac00:	68ab      	ldr	r3, [r5, #8]
    ac02:	2c00      	cmp	r4, #0
    ac04:	d04a      	beq.n	ac9c <__ssprint_r+0xc0>
    ac06:	4698      	mov	r8, r3
    ac08:	4699      	mov	r9, r3
    ac0a:	4544      	cmp	r4, r8
    ac0c:	d350      	bcc.n	acb0 <__ssprint_r+0xd4>
    ac0e:	2190      	movs	r1, #144	; 0x90
    ac10:	89ab      	ldrh	r3, [r5, #12]
    ac12:	00c9      	lsls	r1, r1, #3
    ac14:	420b      	tst	r3, r1
    ac16:	d031      	beq.n	ac7c <__ssprint_r+0xa0>
    ac18:	6929      	ldr	r1, [r5, #16]
    ac1a:	696a      	ldr	r2, [r5, #20]
    ac1c:	1a40      	subs	r0, r0, r1
    ac1e:	4683      	mov	fp, r0
    ac20:	0050      	lsls	r0, r2, #1
    ac22:	1882      	adds	r2, r0, r2
    ac24:	0fd0      	lsrs	r0, r2, #31
    ac26:	1882      	adds	r2, r0, r2
    ac28:	1052      	asrs	r2, r2, #1
    ac2a:	1c60      	adds	r0, r4, #1
    ac2c:	4691      	mov	r9, r2
    ac2e:	4458      	add	r0, fp
    ac30:	4581      	cmp	r9, r0
    ac32:	d201      	bcs.n	ac38 <__ssprint_r+0x5c>
    ac34:	4681      	mov	r9, r0
    ac36:	1c02      	adds	r2, r0, #0
    ac38:	2080      	movs	r0, #128	; 0x80
    ac3a:	00c0      	lsls	r0, r0, #3
    ac3c:	4203      	tst	r3, r0
    ac3e:	d03a      	beq.n	acb6 <__ssprint_r+0xda>
    ac40:	1c11      	adds	r1, r2, #0
    ac42:	9801      	ldr	r0, [sp, #4]
    ac44:	f7fa f840 	bl	4cc8 <_malloc_r>
    ac48:	2100      	movs	r1, #0
    ac4a:	4680      	mov	r8, r0
    ac4c:	4588      	cmp	r8, r1
    ac4e:	d03d      	beq.n	accc <__ssprint_r+0xf0>
    ac50:	465a      	mov	r2, fp
    ac52:	6929      	ldr	r1, [r5, #16]
    ac54:	f7fa fabe 	bl	51d4 <memcpy>
    ac58:	89ab      	ldrh	r3, [r5, #12]
    ac5a:	4828      	ldr	r0, [pc, #160]	; (acfc <__ssprint_r+0x120>)
    ac5c:	2280      	movs	r2, #128	; 0x80
    ac5e:	4003      	ands	r3, r0
    ac60:	4313      	orrs	r3, r2
    ac62:	81ab      	strh	r3, [r5, #12]
    ac64:	4643      	mov	r3, r8
    ac66:	464a      	mov	r2, r9
    ac68:	4640      	mov	r0, r8
    ac6a:	4659      	mov	r1, fp
    ac6c:	612b      	str	r3, [r5, #16]
    ac6e:	4458      	add	r0, fp
    ac70:	1a53      	subs	r3, r2, r1
    ac72:	6028      	str	r0, [r5, #0]
    ac74:	616a      	str	r2, [r5, #20]
    ac76:	60ab      	str	r3, [r5, #8]
    ac78:	46a0      	mov	r8, r4
    ac7a:	46a1      	mov	r9, r4
    ac7c:	464a      	mov	r2, r9
    ac7e:	4651      	mov	r1, sl
    ac80:	f7fe ffac 	bl	9bdc <memmove>
    ac84:	68ab      	ldr	r3, [r5, #8]
    ac86:	4642      	mov	r2, r8
    ac88:	6828      	ldr	r0, [r5, #0]
    ac8a:	1a9b      	subs	r3, r3, r2
    ac8c:	68b2      	ldr	r2, [r6, #8]
    ac8e:	4448      	add	r0, r9
    ac90:	1b14      	subs	r4, r2, r4
    ac92:	60ab      	str	r3, [r5, #8]
    ac94:	6028      	str	r0, [r5, #0]
    ac96:	60b4      	str	r4, [r6, #8]
    ac98:	2c00      	cmp	r4, #0
    ac9a:	d024      	beq.n	ace6 <__ssprint_r+0x10a>
    ac9c:	683a      	ldr	r2, [r7, #0]
    ac9e:	687c      	ldr	r4, [r7, #4]
    aca0:	4692      	mov	sl, r2
    aca2:	3708      	adds	r7, #8
    aca4:	2c00      	cmp	r4, #0
    aca6:	d0f9      	beq.n	ac9c <__ssprint_r+0xc0>
    aca8:	4698      	mov	r8, r3
    acaa:	4699      	mov	r9, r3
    acac:	4544      	cmp	r4, r8
    acae:	d2ae      	bcs.n	ac0e <__ssprint_r+0x32>
    acb0:	46a0      	mov	r8, r4
    acb2:	46a1      	mov	r9, r4
    acb4:	e7e2      	b.n	ac7c <__ssprint_r+0xa0>
    acb6:	9801      	ldr	r0, [sp, #4]
    acb8:	f7ff fd26 	bl	a708 <_realloc_r>
    acbc:	2100      	movs	r1, #0
    acbe:	4680      	mov	r8, r0
    acc0:	4588      	cmp	r8, r1
    acc2:	d1cf      	bne.n	ac64 <__ssprint_r+0x88>
    acc4:	6929      	ldr	r1, [r5, #16]
    acc6:	9801      	ldr	r0, [sp, #4]
    acc8:	f7f9 feb4 	bl	4a34 <_free_r>
    accc:	9a01      	ldr	r2, [sp, #4]
    acce:	230c      	movs	r3, #12
    acd0:	6013      	str	r3, [r2, #0]
    acd2:	89ab      	ldrh	r3, [r5, #12]
    acd4:	2240      	movs	r2, #64	; 0x40
    acd6:	4313      	orrs	r3, r2
    acd8:	81ab      	strh	r3, [r5, #12]
    acda:	2001      	movs	r0, #1
    acdc:	2300      	movs	r3, #0
    acde:	60b3      	str	r3, [r6, #8]
    ace0:	6073      	str	r3, [r6, #4]
    ace2:	4240      	negs	r0, r0
    ace4:	e001      	b.n	acea <__ssprint_r+0x10e>
    ace6:	6074      	str	r4, [r6, #4]
    ace8:	1c20      	adds	r0, r4, #0
    acea:	b003      	add	sp, #12
    acec:	bc3c      	pop	{r2, r3, r4, r5}
    acee:	4690      	mov	r8, r2
    acf0:	4699      	mov	r9, r3
    acf2:	46a2      	mov	sl, r4
    acf4:	46ab      	mov	fp, r5
    acf6:	bcf0      	pop	{r4, r5, r6, r7}
    acf8:	bc02      	pop	{r1}
    acfa:	4708      	bx	r1
    acfc:	fffffb7f 	.word	0xfffffb7f

0000ad00 <_svfiprintf_r>:
    ad00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad02:	465f      	mov	r7, fp
    ad04:	4656      	mov	r6, sl
    ad06:	464d      	mov	r5, r9
    ad08:	4644      	mov	r4, r8
    ad0a:	b4f0      	push	{r4, r5, r6, r7}
    ad0c:	b0ad      	sub	sp, #180	; 0xb4
    ad0e:	9002      	str	r0, [sp, #8]
    ad10:	9307      	str	r3, [sp, #28]
    ad12:	898b      	ldrh	r3, [r1, #12]
    ad14:	468b      	mov	fp, r1
    ad16:	1c15      	adds	r5, r2, #0
    ad18:	0618      	lsls	r0, r3, #24
    ad1a:	d504      	bpl.n	ad26 <_svfiprintf_r+0x26>
    ad1c:	690b      	ldr	r3, [r1, #16]
    ad1e:	2b00      	cmp	r3, #0
    ad20:	d101      	bne.n	ad26 <_svfiprintf_r+0x26>
    ad22:	f000 fd30 	bl	b786 <_svfiprintf_r+0xa86>
    ad26:	2300      	movs	r3, #0
    ad28:	ac28      	add	r4, sp, #160	; 0xa0
    ad2a:	a90e      	add	r1, sp, #56	; 0x38
    ad2c:	46aa      	mov	sl, r5
    ad2e:	9128      	str	r1, [sp, #160]	; 0xa0
    ad30:	60a3      	str	r3, [r4, #8]
    ad32:	6063      	str	r3, [r4, #4]
    ad34:	930c      	str	r3, [sp, #48]	; 0x30
    ad36:	9305      	str	r3, [sp, #20]
    ad38:	1c0d      	adds	r5, r1, #0
    ad3a:	4657      	mov	r7, sl
    ad3c:	783b      	ldrb	r3, [r7, #0]
    ad3e:	2b00      	cmp	r3, #0
    ad40:	d100      	bne.n	ad44 <_svfiprintf_r+0x44>
    ad42:	e32a      	b.n	b39a <_svfiprintf_r+0x69a>
    ad44:	2b25      	cmp	r3, #37	; 0x25
    ad46:	d100      	bne.n	ad4a <_svfiprintf_r+0x4a>
    ad48:	e327      	b.n	b39a <_svfiprintf_r+0x69a>
    ad4a:	1c3e      	adds	r6, r7, #0
    ad4c:	e001      	b.n	ad52 <_svfiprintf_r+0x52>
    ad4e:	2b00      	cmp	r3, #0
    ad50:	d003      	beq.n	ad5a <_svfiprintf_r+0x5a>
    ad52:	3601      	adds	r6, #1
    ad54:	7833      	ldrb	r3, [r6, #0]
    ad56:	2b25      	cmp	r3, #37	; 0x25
    ad58:	d1f9      	bne.n	ad4e <_svfiprintf_r+0x4e>
    ad5a:	1bf2      	subs	r2, r6, r7
    ad5c:	4690      	mov	r8, r2
    ad5e:	2000      	movs	r0, #0
    ad60:	4580      	cmp	r8, r0
    ad62:	d010      	beq.n	ad86 <_svfiprintf_r+0x86>
    ad64:	68a3      	ldr	r3, [r4, #8]
    ad66:	4443      	add	r3, r8
    ad68:	602f      	str	r7, [r5, #0]
    ad6a:	606a      	str	r2, [r5, #4]
    ad6c:	60a3      	str	r3, [r4, #8]
    ad6e:	6863      	ldr	r3, [r4, #4]
    ad70:	3301      	adds	r3, #1
    ad72:	6063      	str	r3, [r4, #4]
    ad74:	3508      	adds	r5, #8
    ad76:	2b07      	cmp	r3, #7
    ad78:	dd00      	ble.n	ad7c <_svfiprintf_r+0x7c>
    ad7a:	e39f      	b.n	b4bc <_svfiprintf_r+0x7bc>
    ad7c:	9905      	ldr	r1, [sp, #20]
    ad7e:	1c0a      	adds	r2, r1, #0
    ad80:	4442      	add	r2, r8
    ad82:	9205      	str	r2, [sp, #20]
    ad84:	7833      	ldrb	r3, [r6, #0]
    ad86:	2b00      	cmp	r3, #0
    ad88:	d100      	bne.n	ad8c <_svfiprintf_r+0x8c>
    ad8a:	e31a      	b.n	b3c2 <_svfiprintf_r+0x6c2>
    ad8c:	23af      	movs	r3, #175	; 0xaf
    ad8e:	2000      	movs	r0, #0
    ad90:	446b      	add	r3, sp
    ad92:	7018      	strb	r0, [r3, #0]
    ad94:	2100      	movs	r1, #0
    ad96:	2240      	movs	r2, #64	; 0x40
    ad98:	7873      	ldrb	r3, [r6, #1]
    ad9a:	1c77      	adds	r7, r6, #1
    ad9c:	9104      	str	r1, [sp, #16]
    ad9e:	2601      	movs	r6, #1
    ada0:	9100      	str	r1, [sp, #0]
    ada2:	4690      	mov	r8, r2
    ada4:	2080      	movs	r0, #128	; 0x80
    ada6:	3a15      	subs	r2, #21
    ada8:	49cf      	ldr	r1, [pc, #828]	; (b0e8 <_svfiprintf_r+0x3e8>)
    adaa:	4276      	negs	r6, r6
    adac:	4684      	mov	ip, r0
    adae:	4692      	mov	sl, r2
    adb0:	3701      	adds	r7, #1
    adb2:	1c1a      	adds	r2, r3, #0
    adb4:	3a20      	subs	r2, #32
    adb6:	2a58      	cmp	r2, #88	; 0x58
    adb8:	d964      	bls.n	ae84 <_svfiprintf_r+0x184>
    adba:	2b00      	cmp	r3, #0
    adbc:	d100      	bne.n	adc0 <_svfiprintf_r+0xc0>
    adbe:	e300      	b.n	b3c2 <_svfiprintf_r+0x6c2>
    adc0:	aa1e      	add	r2, sp, #120	; 0x78
    adc2:	7013      	strb	r3, [r2, #0]
    adc4:	23af      	movs	r3, #175	; 0xaf
    adc6:	2101      	movs	r1, #1
    adc8:	2000      	movs	r0, #0
    adca:	446b      	add	r3, sp
    adcc:	7018      	strb	r0, [r3, #0]
    adce:	9101      	str	r1, [sp, #4]
    add0:	9103      	str	r1, [sp, #12]
    add2:	920b      	str	r2, [sp, #44]	; 0x2c
    add4:	2100      	movs	r1, #0
    add6:	9106      	str	r1, [sp, #24]
    add8:	9900      	ldr	r1, [sp, #0]
    adda:	2302      	movs	r3, #2
    addc:	4019      	ands	r1, r3
    adde:	4689      	mov	r9, r1
    ade0:	d002      	beq.n	ade8 <_svfiprintf_r+0xe8>
    ade2:	9a01      	ldr	r2, [sp, #4]
    ade4:	18d2      	adds	r2, r2, r3
    ade6:	9201      	str	r2, [sp, #4]
    ade8:	9800      	ldr	r0, [sp, #0]
    adea:	2384      	movs	r3, #132	; 0x84
    adec:	4018      	ands	r0, r3
    adee:	900d      	str	r0, [sp, #52]	; 0x34
    adf0:	d000      	beq.n	adf4 <_svfiprintf_r+0xf4>
    adf2:	e201      	b.n	b1f8 <_svfiprintf_r+0x4f8>
    adf4:	9904      	ldr	r1, [sp, #16]
    adf6:	9a01      	ldr	r2, [sp, #4]
    adf8:	1a8e      	subs	r6, r1, r2
    adfa:	2e00      	cmp	r6, #0
    adfc:	dc00      	bgt.n	ae00 <_svfiprintf_r+0x100>
    adfe:	e1fb      	b.n	b1f8 <_svfiprintf_r+0x4f8>
    ae00:	2e10      	cmp	r6, #16
    ae02:	dc01      	bgt.n	ae08 <_svfiprintf_r+0x108>
    ae04:	f000 fcd5 	bl	b7b2 <_svfiprintf_r+0xab2>
    ae08:	4bb8      	ldr	r3, [pc, #736]	; (b0ec <_svfiprintf_r+0x3ec>)
    ae0a:	469a      	mov	sl, r3
    ae0c:	4652      	mov	r2, sl
    ae0e:	2010      	movs	r0, #16
    ae10:	1c2b      	adds	r3, r5, #0
    ae12:	46ba      	mov	sl, r7
    ae14:	4680      	mov	r8, r0
    ae16:	465d      	mov	r5, fp
    ae18:	1c17      	adds	r7, r2, #0
    ae1a:	e005      	b.n	ae28 <_svfiprintf_r+0x128>
    ae1c:	3308      	adds	r3, #8
    ae1e:	1c1a      	adds	r2, r3, #0
    ae20:	3e10      	subs	r6, #16
    ae22:	3208      	adds	r2, #8
    ae24:	2e10      	cmp	r6, #16
    ae26:	dd18      	ble.n	ae5a <_svfiprintf_r+0x15a>
    ae28:	4642      	mov	r2, r8
    ae2a:	605a      	str	r2, [r3, #4]
    ae2c:	68a2      	ldr	r2, [r4, #8]
    ae2e:	3210      	adds	r2, #16
    ae30:	601f      	str	r7, [r3, #0]
    ae32:	60a2      	str	r2, [r4, #8]
    ae34:	6862      	ldr	r2, [r4, #4]
    ae36:	3201      	adds	r2, #1
    ae38:	6062      	str	r2, [r4, #4]
    ae3a:	2a07      	cmp	r2, #7
    ae3c:	ddee      	ble.n	ae1c <_svfiprintf_r+0x11c>
    ae3e:	9802      	ldr	r0, [sp, #8]
    ae40:	1c29      	adds	r1, r5, #0
    ae42:	1c22      	adds	r2, r4, #0
    ae44:	f7ff feca 	bl	abdc <__ssprint_r>
    ae48:	2800      	cmp	r0, #0
    ae4a:	d001      	beq.n	ae50 <_svfiprintf_r+0x150>
    ae4c:	f000 fbf0 	bl	b630 <_svfiprintf_r+0x930>
    ae50:	3e10      	subs	r6, #16
    ae52:	aa10      	add	r2, sp, #64	; 0x40
    ae54:	ab0e      	add	r3, sp, #56	; 0x38
    ae56:	2e10      	cmp	r6, #16
    ae58:	dce6      	bgt.n	ae28 <_svfiprintf_r+0x128>
    ae5a:	46ab      	mov	fp, r5
    ae5c:	1c1d      	adds	r5, r3, #0
    ae5e:	1c3b      	adds	r3, r7, #0
    ae60:	4657      	mov	r7, sl
    ae62:	469a      	mov	sl, r3
    ae64:	4653      	mov	r3, sl
    ae66:	602b      	str	r3, [r5, #0]
    ae68:	68a3      	ldr	r3, [r4, #8]
    ae6a:	18f3      	adds	r3, r6, r3
    ae6c:	606e      	str	r6, [r5, #4]
    ae6e:	60a3      	str	r3, [r4, #8]
    ae70:	6863      	ldr	r3, [r4, #4]
    ae72:	3301      	adds	r3, #1
    ae74:	6063      	str	r3, [r4, #4]
    ae76:	2b07      	cmp	r3, #7
    ae78:	dd00      	ble.n	ae7c <_svfiprintf_r+0x17c>
    ae7a:	e3ce      	b.n	b61a <_svfiprintf_r+0x91a>
    ae7c:	1c13      	adds	r3, r2, #0
    ae7e:	3308      	adds	r3, #8
    ae80:	1c15      	adds	r5, r2, #0
    ae82:	e1bb      	b.n	b1fc <_svfiprintf_r+0x4fc>
    ae84:	0092      	lsls	r2, r2, #2
    ae86:	588a      	ldr	r2, [r1, r2]
    ae88:	4697      	mov	pc, r2
    ae8a:	9800      	ldr	r0, [sp, #0]
    ae8c:	2310      	movs	r3, #16
    ae8e:	4318      	orrs	r0, r3
    ae90:	9000      	str	r0, [sp, #0]
    ae92:	9900      	ldr	r1, [sp, #0]
    ae94:	2220      	movs	r2, #32
    ae96:	400a      	ands	r2, r1
    ae98:	d100      	bne.n	ae9c <_svfiprintf_r+0x19c>
    ae9a:	e385      	b.n	b5a8 <_svfiprintf_r+0x8a8>
    ae9c:	9b07      	ldr	r3, [sp, #28]
    ae9e:	2207      	movs	r2, #7
    aea0:	3307      	adds	r3, #7
    aea2:	4393      	bics	r3, r2
    aea4:	6818      	ldr	r0, [r3, #0]
    aea6:	6859      	ldr	r1, [r3, #4]
    aea8:	3201      	adds	r2, #1
    aeaa:	18d2      	adds	r2, r2, r3
    aeac:	9008      	str	r0, [sp, #32]
    aeae:	9109      	str	r1, [sp, #36]	; 0x24
    aeb0:	9207      	str	r2, [sp, #28]
    aeb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    aeb4:	1c01      	adds	r1, r0, #0
    aeb6:	4311      	orrs	r1, r2
    aeb8:	1e4b      	subs	r3, r1, #1
    aeba:	4199      	sbcs	r1, r3
    aebc:	2301      	movs	r3, #1
    aebe:	22af      	movs	r2, #175	; 0xaf
    aec0:	2000      	movs	r0, #0
    aec2:	446a      	add	r2, sp
    aec4:	7010      	strb	r0, [r2, #0]
    aec6:	2e00      	cmp	r6, #0
    aec8:	db03      	blt.n	aed2 <_svfiprintf_r+0x1d2>
    aeca:	9800      	ldr	r0, [sp, #0]
    aecc:	2280      	movs	r2, #128	; 0x80
    aece:	4390      	bics	r0, r2
    aed0:	9000      	str	r0, [sp, #0]
    aed2:	2e00      	cmp	r6, #0
    aed4:	d102      	bne.n	aedc <_svfiprintf_r+0x1dc>
    aed6:	2900      	cmp	r1, #0
    aed8:	d100      	bne.n	aedc <_svfiprintf_r+0x1dc>
    aeda:	e261      	b.n	b3a0 <_svfiprintf_r+0x6a0>
    aedc:	2b01      	cmp	r3, #1
    aede:	d100      	bne.n	aee2 <_svfiprintf_r+0x1e2>
    aee0:	e31a      	b.n	b518 <_svfiprintf_r+0x818>
    aee2:	2b02      	cmp	r3, #2
    aee4:	d100      	bne.n	aee8 <_svfiprintf_r+0x1e8>
    aee6:	e340      	b.n	b56a <_svfiprintf_r+0x86a>
    aee8:	2107      	movs	r1, #7
    aeea:	940b      	str	r4, [sp, #44]	; 0x2c
    aeec:	9701      	str	r7, [sp, #4]
    aeee:	9a08      	ldr	r2, [sp, #32]
    aef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aef2:	4688      	mov	r8, r1
    aef4:	46ac      	mov	ip, r5
    aef6:	1c21      	adds	r1, r4, #0
    aef8:	0758      	lsls	r0, r3, #29
    aefa:	4682      	mov	sl, r0
    aefc:	4645      	mov	r5, r8
    aefe:	08d0      	lsrs	r0, r2, #3
    af00:	4657      	mov	r7, sl
    af02:	4307      	orrs	r7, r0
    af04:	4015      	ands	r5, r2
    af06:	08d8      	lsrs	r0, r3, #3
    af08:	3901      	subs	r1, #1
    af0a:	3530      	adds	r5, #48	; 0x30
    af0c:	1c03      	adds	r3, r0, #0
    af0e:	1c38      	adds	r0, r7, #0
    af10:	700d      	strb	r5, [r1, #0]
    af12:	1c3a      	adds	r2, r7, #0
    af14:	4318      	orrs	r0, r3
    af16:	d1ef      	bne.n	aef8 <_svfiprintf_r+0x1f8>
    af18:	910b      	str	r1, [sp, #44]	; 0x2c
    af1a:	9900      	ldr	r1, [sp, #0]
    af1c:	9208      	str	r2, [sp, #32]
    af1e:	9309      	str	r3, [sp, #36]	; 0x24
    af20:	1c2b      	adds	r3, r5, #0
    af22:	9f01      	ldr	r7, [sp, #4]
    af24:	4665      	mov	r5, ip
    af26:	469c      	mov	ip, r3
    af28:	07c9      	lsls	r1, r1, #31
    af2a:	d400      	bmi.n	af2e <_svfiprintf_r+0x22e>
    af2c:	e386      	b.n	b63c <_svfiprintf_r+0x93c>
    af2e:	2330      	movs	r3, #48	; 0x30
    af30:	459c      	cmp	ip, r3
    af32:	d101      	bne.n	af38 <_svfiprintf_r+0x238>
    af34:	f000 fc43 	bl	b7be <_svfiprintf_r+0xabe>
    af38:	990b      	ldr	r1, [sp, #44]	; 0x2c
    af3a:	3901      	subs	r1, #1
    af3c:	2330      	movs	r3, #48	; 0x30
    af3e:	1a62      	subs	r2, r4, r1
    af40:	910b      	str	r1, [sp, #44]	; 0x2c
    af42:	700b      	strb	r3, [r1, #0]
    af44:	9203      	str	r2, [sp, #12]
    af46:	9606      	str	r6, [sp, #24]
    af48:	9803      	ldr	r0, [sp, #12]
    af4a:	9906      	ldr	r1, [sp, #24]
    af4c:	9001      	str	r0, [sp, #4]
    af4e:	4288      	cmp	r0, r1
    af50:	da00      	bge.n	af54 <_svfiprintf_r+0x254>
    af52:	9101      	str	r1, [sp, #4]
    af54:	22af      	movs	r2, #175	; 0xaf
    af56:	446a      	add	r2, sp
    af58:	7813      	ldrb	r3, [r2, #0]
    af5a:	9801      	ldr	r0, [sp, #4]
    af5c:	1e5a      	subs	r2, r3, #1
    af5e:	4193      	sbcs	r3, r2
    af60:	18c0      	adds	r0, r0, r3
    af62:	9001      	str	r0, [sp, #4]
    af64:	e738      	b.n	add8 <_svfiprintf_r+0xd8>
    af66:	9900      	ldr	r1, [sp, #0]
    af68:	2310      	movs	r3, #16
    af6a:	4319      	orrs	r1, r3
    af6c:	9100      	str	r1, [sp, #0]
    af6e:	9a00      	ldr	r2, [sp, #0]
    af70:	2320      	movs	r3, #32
    af72:	4013      	ands	r3, r2
    af74:	d100      	bne.n	af78 <_svfiprintf_r+0x278>
    af76:	e32c      	b.n	b5d2 <_svfiprintf_r+0x8d2>
    af78:	9b07      	ldr	r3, [sp, #28]
    af7a:	2207      	movs	r2, #7
    af7c:	3307      	adds	r3, #7
    af7e:	4393      	bics	r3, r2
    af80:	6819      	ldr	r1, [r3, #0]
    af82:	685a      	ldr	r2, [r3, #4]
    af84:	9108      	str	r1, [sp, #32]
    af86:	9209      	str	r2, [sp, #36]	; 0x24
    af88:	9908      	ldr	r1, [sp, #32]
    af8a:	2008      	movs	r0, #8
    af8c:	18c0      	adds	r0, r0, r3
    af8e:	4311      	orrs	r1, r2
    af90:	1e4b      	subs	r3, r1, #1
    af92:	4199      	sbcs	r1, r3
    af94:	9007      	str	r0, [sp, #28]
    af96:	2300      	movs	r3, #0
    af98:	e791      	b.n	aebe <_svfiprintf_r+0x1be>
    af9a:	9a00      	ldr	r2, [sp, #0]
    af9c:	2310      	movs	r3, #16
    af9e:	431a      	orrs	r2, r3
    afa0:	9200      	str	r2, [sp, #0]
    afa2:	9b00      	ldr	r3, [sp, #0]
    afa4:	069b      	lsls	r3, r3, #26
    afa6:	d400      	bmi.n	afaa <_svfiprintf_r+0x2aa>
    afa8:	e327      	b.n	b5fa <_svfiprintf_r+0x8fa>
    afaa:	9b07      	ldr	r3, [sp, #28]
    afac:	2207      	movs	r2, #7
    afae:	3307      	adds	r3, #7
    afb0:	4393      	bics	r3, r2
    afb2:	6819      	ldr	r1, [r3, #0]
    afb4:	685a      	ldr	r2, [r3, #4]
    afb6:	2008      	movs	r0, #8
    afb8:	18c0      	adds	r0, r0, r3
    afba:	9108      	str	r1, [sp, #32]
    afbc:	9209      	str	r2, [sp, #36]	; 0x24
    afbe:	9007      	str	r0, [sp, #28]
    afc0:	9909      	ldr	r1, [sp, #36]	; 0x24
    afc2:	2900      	cmp	r1, #0
    afc4:	da00      	bge.n	afc8 <_svfiprintf_r+0x2c8>
    afc6:	e357      	b.n	b678 <_svfiprintf_r+0x978>
    afc8:	9908      	ldr	r1, [sp, #32]
    afca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    afcc:	4311      	orrs	r1, r2
    afce:	1e4b      	subs	r3, r1, #1
    afd0:	4199      	sbcs	r1, r3
    afd2:	2301      	movs	r3, #1
    afd4:	e777      	b.n	aec6 <_svfiprintf_r+0x1c6>
    afd6:	9b07      	ldr	r3, [sp, #28]
    afd8:	9a07      	ldr	r2, [sp, #28]
    afda:	681b      	ldr	r3, [r3, #0]
    afdc:	3204      	adds	r2, #4
    afde:	9304      	str	r3, [sp, #16]
    afe0:	2b00      	cmp	r3, #0
    afe2:	db00      	blt.n	afe6 <_svfiprintf_r+0x2e6>
    afe4:	e326      	b.n	b634 <_svfiprintf_r+0x934>
    afe6:	9804      	ldr	r0, [sp, #16]
    afe8:	4240      	negs	r0, r0
    afea:	9004      	str	r0, [sp, #16]
    afec:	9207      	str	r2, [sp, #28]
    afee:	9a00      	ldr	r2, [sp, #0]
    aff0:	2304      	movs	r3, #4
    aff2:	431a      	orrs	r2, r3
    aff4:	9200      	str	r2, [sp, #0]
    aff6:	783b      	ldrb	r3, [r7, #0]
    aff8:	e6da      	b.n	adb0 <_svfiprintf_r+0xb0>
    affa:	9b00      	ldr	r3, [sp, #0]
    affc:	069b      	lsls	r3, r3, #26
    affe:	d500      	bpl.n	b002 <_svfiprintf_r+0x302>
    b000:	e346      	b.n	b690 <_svfiprintf_r+0x990>
    b002:	9a00      	ldr	r2, [sp, #0]
    b004:	06d2      	lsls	r2, r2, #27
    b006:	d400      	bmi.n	b00a <_svfiprintf_r+0x30a>
    b008:	e38c      	b.n	b724 <_svfiprintf_r+0xa24>
    b00a:	9807      	ldr	r0, [sp, #28]
    b00c:	9905      	ldr	r1, [sp, #20]
    b00e:	6803      	ldr	r3, [r0, #0]
    b010:	3004      	adds	r0, #4
    b012:	6019      	str	r1, [r3, #0]
    b014:	9007      	str	r0, [sp, #28]
    b016:	e691      	b.n	ad3c <_svfiprintf_r+0x3c>
    b018:	9b00      	ldr	r3, [sp, #0]
    b01a:	2020      	movs	r0, #32
    b01c:	4303      	orrs	r3, r0
    b01e:	9300      	str	r3, [sp, #0]
    b020:	783b      	ldrb	r3, [r7, #0]
    b022:	e6c5      	b.n	adb0 <_svfiprintf_r+0xb0>
    b024:	9b07      	ldr	r3, [sp, #28]
    b026:	1c18      	adds	r0, r3, #0
    b028:	681b      	ldr	r3, [r3, #0]
    b02a:	9a00      	ldr	r2, [sp, #0]
    b02c:	9308      	str	r3, [sp, #32]
    b02e:	2302      	movs	r3, #2
    b030:	2100      	movs	r1, #0
    b032:	431a      	orrs	r2, r3
    b034:	9109      	str	r1, [sp, #36]	; 0x24
    b036:	9200      	str	r2, [sp, #0]
    b038:	3130      	adds	r1, #48	; 0x30
    b03a:	aa2b      	add	r2, sp, #172	; 0xac
    b03c:	3004      	adds	r0, #4
    b03e:	7011      	strb	r1, [r2, #0]
    b040:	3148      	adds	r1, #72	; 0x48
    b042:	7051      	strb	r1, [r2, #1]
    b044:	9007      	str	r0, [sp, #28]
    b046:	9908      	ldr	r1, [sp, #32]
    b048:	4829      	ldr	r0, [pc, #164]	; (b0f0 <_svfiprintf_r+0x3f0>)
    b04a:	1e4a      	subs	r2, r1, #1
    b04c:	4191      	sbcs	r1, r2
    b04e:	900c      	str	r0, [sp, #48]	; 0x30
    b050:	e735      	b.n	aebe <_svfiprintf_r+0x1be>
    b052:	4927      	ldr	r1, [pc, #156]	; (b0f0 <_svfiprintf_r+0x3f0>)
    b054:	9800      	ldr	r0, [sp, #0]
    b056:	910c      	str	r1, [sp, #48]	; 0x30
    b058:	2120      	movs	r1, #32
    b05a:	4001      	ands	r1, r0
    b05c:	d050      	beq.n	b100 <_svfiprintf_r+0x400>
    b05e:	9a07      	ldr	r2, [sp, #28]
    b060:	2107      	movs	r1, #7
    b062:	3207      	adds	r2, #7
    b064:	438a      	bics	r2, r1
    b066:	3101      	adds	r1, #1
    b068:	1889      	adds	r1, r1, r2
    b06a:	9107      	str	r1, [sp, #28]
    b06c:	6810      	ldr	r0, [r2, #0]
    b06e:	6851      	ldr	r1, [r2, #4]
    b070:	9008      	str	r0, [sp, #32]
    b072:	9109      	str	r1, [sp, #36]	; 0x24
    b074:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b076:	9908      	ldr	r1, [sp, #32]
    b078:	4311      	orrs	r1, r2
    b07a:	1e4a      	subs	r2, r1, #1
    b07c:	4191      	sbcs	r1, r2
    b07e:	2900      	cmp	r1, #0
    b080:	d00d      	beq.n	b09e <_svfiprintf_r+0x39e>
    b082:	9800      	ldr	r0, [sp, #0]
    b084:	2201      	movs	r2, #1
    b086:	4210      	tst	r0, r2
    b088:	d009      	beq.n	b09e <_svfiprintf_r+0x39e>
    b08a:	a92b      	add	r1, sp, #172	; 0xac
    b08c:	2030      	movs	r0, #48	; 0x30
    b08e:	704b      	strb	r3, [r1, #1]
    b090:	7008      	strb	r0, [r1, #0]
    b092:	9900      	ldr	r1, [sp, #0]
    b094:	2302      	movs	r3, #2
    b096:	4319      	orrs	r1, r3
    b098:	9100      	str	r1, [sp, #0]
    b09a:	1c11      	adds	r1, r2, #0
    b09c:	e70f      	b.n	aebe <_svfiprintf_r+0x1be>
    b09e:	2302      	movs	r3, #2
    b0a0:	e70d      	b.n	aebe <_svfiprintf_r+0x1be>
    b0a2:	21af      	movs	r1, #175	; 0xaf
    b0a4:	2200      	movs	r2, #0
    b0a6:	4469      	add	r1, sp
    b0a8:	9b07      	ldr	r3, [sp, #28]
    b0aa:	700a      	strb	r2, [r1, #0]
    b0ac:	1c18      	adds	r0, r3, #0
    b0ae:	681b      	ldr	r3, [r3, #0]
    b0b0:	3004      	adds	r0, #4
    b0b2:	9007      	str	r0, [sp, #28]
    b0b4:	930b      	str	r3, [sp, #44]	; 0x2c
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	d100      	bne.n	b0bc <_svfiprintf_r+0x3bc>
    b0ba:	e388      	b.n	b7ce <_svfiprintf_r+0xace>
    b0bc:	2e00      	cmp	r6, #0
    b0be:	da00      	bge.n	b0c2 <_svfiprintf_r+0x3c2>
    b0c0:	e313      	b.n	b6ea <_svfiprintf_r+0x9ea>
    b0c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b0c4:	2100      	movs	r1, #0
    b0c6:	1c32      	adds	r2, r6, #0
    b0c8:	f7fe fd40 	bl	9b4c <memchr>
    b0cc:	2800      	cmp	r0, #0
    b0ce:	d100      	bne.n	b0d2 <_svfiprintf_r+0x3d2>
    b0d0:	e391      	b.n	b7f6 <_svfiprintf_r+0xaf6>
    b0d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b0d4:	1a40      	subs	r0, r0, r1
    b0d6:	9003      	str	r0, [sp, #12]
    b0d8:	42b0      	cmp	r0, r6
    b0da:	dc00      	bgt.n	b0de <_svfiprintf_r+0x3de>
    b0dc:	e31e      	b.n	b71c <_svfiprintf_r+0xa1c>
    b0de:	2300      	movs	r3, #0
    b0e0:	9603      	str	r6, [sp, #12]
    b0e2:	9306      	str	r3, [sp, #24]
    b0e4:	e730      	b.n	af48 <_svfiprintf_r+0x248>
    b0e6:	46c0      	nop			; (mov r8, r8)
    b0e8:	0000e170 	.word	0x0000e170
    b0ec:	0000e2d4 	.word	0x0000e2d4
    b0f0:	0000e91c 	.word	0x0000e91c
    b0f4:	4abf      	ldr	r2, [pc, #764]	; (b3f4 <_svfiprintf_r+0x6f4>)
    b0f6:	9800      	ldr	r0, [sp, #0]
    b0f8:	2120      	movs	r1, #32
    b0fa:	920c      	str	r2, [sp, #48]	; 0x30
    b0fc:	4001      	ands	r1, r0
    b0fe:	d1ae      	bne.n	b05e <_svfiprintf_r+0x35e>
    b100:	9800      	ldr	r0, [sp, #0]
    b102:	2210      	movs	r2, #16
    b104:	4002      	ands	r2, r0
    b106:	d000      	beq.n	b10a <_svfiprintf_r+0x40a>
    b108:	e2cc      	b.n	b6a4 <_svfiprintf_r+0x9a4>
    b10a:	9800      	ldr	r0, [sp, #0]
    b10c:	2140      	movs	r1, #64	; 0x40
    b10e:	4001      	ands	r1, r0
    b110:	d100      	bne.n	b114 <_svfiprintf_r+0x414>
    b112:	e324      	b.n	b75e <_svfiprintf_r+0xa5e>
    b114:	9907      	ldr	r1, [sp, #28]
    b116:	8809      	ldrh	r1, [r1, #0]
    b118:	9209      	str	r2, [sp, #36]	; 0x24
    b11a:	9a07      	ldr	r2, [sp, #28]
    b11c:	3204      	adds	r2, #4
    b11e:	9108      	str	r1, [sp, #32]
    b120:	9207      	str	r2, [sp, #28]
    b122:	e7a7      	b.n	b074 <_svfiprintf_r+0x374>
    b124:	783b      	ldrb	r3, [r7, #0]
    b126:	2b6c      	cmp	r3, #108	; 0x6c
    b128:	d100      	bne.n	b12c <_svfiprintf_r+0x42c>
    b12a:	e2d6      	b.n	b6da <_svfiprintf_r+0x9da>
    b12c:	9800      	ldr	r0, [sp, #0]
    b12e:	2210      	movs	r2, #16
    b130:	4310      	orrs	r0, r2
    b132:	9000      	str	r0, [sp, #0]
    b134:	e63c      	b.n	adb0 <_svfiprintf_r+0xb0>
    b136:	9b00      	ldr	r3, [sp, #0]
    b138:	4640      	mov	r0, r8
    b13a:	4303      	orrs	r3, r0
    b13c:	9300      	str	r3, [sp, #0]
    b13e:	783b      	ldrb	r3, [r7, #0]
    b140:	e636      	b.n	adb0 <_svfiprintf_r+0xb0>
    b142:	9a07      	ldr	r2, [sp, #28]
    b144:	1c11      	adds	r1, r2, #0
    b146:	6812      	ldr	r2, [r2, #0]
    b148:	ab1e      	add	r3, sp, #120	; 0x78
    b14a:	3104      	adds	r1, #4
    b14c:	701a      	strb	r2, [r3, #0]
    b14e:	22af      	movs	r2, #175	; 0xaf
    b150:	9107      	str	r1, [sp, #28]
    b152:	2000      	movs	r0, #0
    b154:	2101      	movs	r1, #1
    b156:	446a      	add	r2, sp
    b158:	7010      	strb	r0, [r2, #0]
    b15a:	9101      	str	r1, [sp, #4]
    b15c:	9103      	str	r1, [sp, #12]
    b15e:	930b      	str	r3, [sp, #44]	; 0x2c
    b160:	e638      	b.n	add4 <_svfiprintf_r+0xd4>
    b162:	23af      	movs	r3, #175	; 0xaf
    b164:	446b      	add	r3, sp
    b166:	4650      	mov	r0, sl
    b168:	7018      	strb	r0, [r3, #0]
    b16a:	783b      	ldrb	r3, [r7, #0]
    b16c:	e620      	b.n	adb0 <_svfiprintf_r+0xb0>
    b16e:	9800      	ldr	r0, [sp, #0]
    b170:	2301      	movs	r3, #1
    b172:	4318      	orrs	r0, r3
    b174:	9000      	str	r0, [sp, #0]
    b176:	783b      	ldrb	r3, [r7, #0]
    b178:	e61a      	b.n	adb0 <_svfiprintf_r+0xb0>
    b17a:	20af      	movs	r0, #175	; 0xaf
    b17c:	4468      	add	r0, sp
    b17e:	7803      	ldrb	r3, [r0, #0]
    b180:	2b00      	cmp	r3, #0
    b182:	d000      	beq.n	b186 <_svfiprintf_r+0x486>
    b184:	e2a6      	b.n	b6d4 <_svfiprintf_r+0x9d4>
    b186:	2220      	movs	r2, #32
    b188:	7002      	strb	r2, [r0, #0]
    b18a:	783b      	ldrb	r3, [r7, #0]
    b18c:	e610      	b.n	adb0 <_svfiprintf_r+0xb0>
    b18e:	1c1a      	adds	r2, r3, #0
    b190:	2000      	movs	r0, #0
    b192:	3a30      	subs	r2, #48	; 0x30
    b194:	1c03      	adds	r3, r0, #0
    b196:	46a9      	mov	r9, r5
    b198:	009d      	lsls	r5, r3, #2
    b19a:	18eb      	adds	r3, r5, r3
    b19c:	783d      	ldrb	r5, [r7, #0]
    b19e:	005b      	lsls	r3, r3, #1
    b1a0:	18d3      	adds	r3, r2, r3
    b1a2:	1c2a      	adds	r2, r5, #0
    b1a4:	3a30      	subs	r2, #48	; 0x30
    b1a6:	3701      	adds	r7, #1
    b1a8:	2a09      	cmp	r2, #9
    b1aa:	d9f5      	bls.n	b198 <_svfiprintf_r+0x498>
    b1ac:	1c18      	adds	r0, r3, #0
    b1ae:	9004      	str	r0, [sp, #16]
    b1b0:	1c2b      	adds	r3, r5, #0
    b1b2:	464d      	mov	r5, r9
    b1b4:	e5fd      	b.n	adb2 <_svfiprintf_r+0xb2>
    b1b6:	9800      	ldr	r0, [sp, #0]
    b1b8:	4662      	mov	r2, ip
    b1ba:	4310      	orrs	r0, r2
    b1bc:	9000      	str	r0, [sp, #0]
    b1be:	783b      	ldrb	r3, [r7, #0]
    b1c0:	e5f6      	b.n	adb0 <_svfiprintf_r+0xb0>
    b1c2:	783b      	ldrb	r3, [r7, #0]
    b1c4:	3701      	adds	r7, #1
    b1c6:	2b2a      	cmp	r3, #42	; 0x2a
    b1c8:	d100      	bne.n	b1cc <_svfiprintf_r+0x4cc>
    b1ca:	e318      	b.n	b7fe <_svfiprintf_r+0xafe>
    b1cc:	1c1a      	adds	r2, r3, #0
    b1ce:	3a30      	subs	r2, #48	; 0x30
    b1d0:	2600      	movs	r6, #0
    b1d2:	2a09      	cmp	r2, #9
    b1d4:	d900      	bls.n	b1d8 <_svfiprintf_r+0x4d8>
    b1d6:	e5ec      	b.n	adb2 <_svfiprintf_r+0xb2>
    b1d8:	00b3      	lsls	r3, r6, #2
    b1da:	199e      	adds	r6, r3, r6
    b1dc:	783b      	ldrb	r3, [r7, #0]
    b1de:	0076      	lsls	r6, r6, #1
    b1e0:	18b6      	adds	r6, r6, r2
    b1e2:	1c1a      	adds	r2, r3, #0
    b1e4:	3a30      	subs	r2, #48	; 0x30
    b1e6:	3701      	adds	r7, #1
    b1e8:	2a09      	cmp	r2, #9
    b1ea:	d9f5      	bls.n	b1d8 <_svfiprintf_r+0x4d8>
    b1ec:	2e00      	cmp	r6, #0
    b1ee:	db00      	blt.n	b1f2 <_svfiprintf_r+0x4f2>
    b1f0:	e5df      	b.n	adb2 <_svfiprintf_r+0xb2>
    b1f2:	2601      	movs	r6, #1
    b1f4:	4276      	negs	r6, r6
    b1f6:	e5dc      	b.n	adb2 <_svfiprintf_r+0xb2>
    b1f8:	1c2b      	adds	r3, r5, #0
    b1fa:	3308      	adds	r3, #8
    b1fc:	20af      	movs	r0, #175	; 0xaf
    b1fe:	4468      	add	r0, sp
    b200:	7802      	ldrb	r2, [r0, #0]
    b202:	2a00      	cmp	r2, #0
    b204:	d00d      	beq.n	b222 <_svfiprintf_r+0x522>
    b206:	2201      	movs	r2, #1
    b208:	606a      	str	r2, [r5, #4]
    b20a:	68a2      	ldr	r2, [r4, #8]
    b20c:	3201      	adds	r2, #1
    b20e:	6028      	str	r0, [r5, #0]
    b210:	60a2      	str	r2, [r4, #8]
    b212:	6862      	ldr	r2, [r4, #4]
    b214:	3201      	adds	r2, #1
    b216:	6062      	str	r2, [r4, #4]
    b218:	2a07      	cmp	r2, #7
    b21a:	dd00      	ble.n	b21e <_svfiprintf_r+0x51e>
    b21c:	e16e      	b.n	b4fc <_svfiprintf_r+0x7fc>
    b21e:	1c1d      	adds	r5, r3, #0
    b220:	3308      	adds	r3, #8
    b222:	2100      	movs	r1, #0
    b224:	4589      	cmp	r9, r1
    b226:	d00e      	beq.n	b246 <_svfiprintf_r+0x546>
    b228:	aa2b      	add	r2, sp, #172	; 0xac
    b22a:	602a      	str	r2, [r5, #0]
    b22c:	2202      	movs	r2, #2
    b22e:	606a      	str	r2, [r5, #4]
    b230:	68a2      	ldr	r2, [r4, #8]
    b232:	3202      	adds	r2, #2
    b234:	60a2      	str	r2, [r4, #8]
    b236:	6862      	ldr	r2, [r4, #4]
    b238:	3201      	adds	r2, #1
    b23a:	6062      	str	r2, [r4, #4]
    b23c:	2a07      	cmp	r2, #7
    b23e:	dd00      	ble.n	b242 <_svfiprintf_r+0x542>
    b240:	e151      	b.n	b4e6 <_svfiprintf_r+0x7e6>
    b242:	1c1d      	adds	r5, r3, #0
    b244:	3308      	adds	r3, #8
    b246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b248:	2a80      	cmp	r2, #128	; 0x80
    b24a:	d100      	bne.n	b24e <_svfiprintf_r+0x54e>
    b24c:	e0d6      	b.n	b3fc <_svfiprintf_r+0x6fc>
    b24e:	9906      	ldr	r1, [sp, #24]
    b250:	9a03      	ldr	r2, [sp, #12]
    b252:	1a8e      	subs	r6, r1, r2
    b254:	2e00      	cmp	r6, #0
    b256:	dd42      	ble.n	b2de <_svfiprintf_r+0x5de>
    b258:	2e10      	cmp	r6, #16
    b25a:	dc00      	bgt.n	b25e <_svfiprintf_r+0x55e>
    b25c:	e25a      	b.n	b714 <_svfiprintf_r+0xa14>
    b25e:	4b66      	ldr	r3, [pc, #408]	; (b3f8 <_svfiprintf_r+0x6f8>)
    b260:	2010      	movs	r0, #16
    b262:	469a      	mov	sl, r3
    b264:	465a      	mov	r2, fp
    b266:	4680      	mov	r8, r0
    b268:	1c2b      	adds	r3, r5, #0
    b26a:	46bb      	mov	fp, r7
    b26c:	44d0      	add	r8, sl
    b26e:	4681      	mov	r9, r0
    b270:	9d02      	ldr	r5, [sp, #8]
    b272:	1c17      	adds	r7, r2, #0
    b274:	e005      	b.n	b282 <_svfiprintf_r+0x582>
    b276:	3308      	adds	r3, #8
    b278:	1c1a      	adds	r2, r3, #0
    b27a:	3e10      	subs	r6, #16
    b27c:	3208      	adds	r2, #8
    b27e:	2e10      	cmp	r6, #16
    b280:	dd18      	ble.n	b2b4 <_svfiprintf_r+0x5b4>
    b282:	464a      	mov	r2, r9
    b284:	605a      	str	r2, [r3, #4]
    b286:	68a2      	ldr	r2, [r4, #8]
    b288:	4641      	mov	r1, r8
    b28a:	3210      	adds	r2, #16
    b28c:	6019      	str	r1, [r3, #0]
    b28e:	60a2      	str	r2, [r4, #8]
    b290:	6862      	ldr	r2, [r4, #4]
    b292:	3201      	adds	r2, #1
    b294:	6062      	str	r2, [r4, #4]
    b296:	2a07      	cmp	r2, #7
    b298:	dded      	ble.n	b276 <_svfiprintf_r+0x576>
    b29a:	1c28      	adds	r0, r5, #0
    b29c:	1c39      	adds	r1, r7, #0
    b29e:	1c22      	adds	r2, r4, #0
    b2a0:	f7ff fc9c 	bl	abdc <__ssprint_r>
    b2a4:	2800      	cmp	r0, #0
    b2a6:	d000      	beq.n	b2aa <_svfiprintf_r+0x5aa>
    b2a8:	e106      	b.n	b4b8 <_svfiprintf_r+0x7b8>
    b2aa:	3e10      	subs	r6, #16
    b2ac:	aa10      	add	r2, sp, #64	; 0x40
    b2ae:	ab0e      	add	r3, sp, #56	; 0x38
    b2b0:	2e10      	cmp	r6, #16
    b2b2:	dce6      	bgt.n	b282 <_svfiprintf_r+0x582>
    b2b4:	1c1d      	adds	r5, r3, #0
    b2b6:	1c3b      	adds	r3, r7, #0
    b2b8:	465f      	mov	r7, fp
    b2ba:	469b      	mov	fp, r3
    b2bc:	2010      	movs	r0, #16
    b2be:	1c03      	adds	r3, r0, #0
    b2c0:	4453      	add	r3, sl
    b2c2:	602b      	str	r3, [r5, #0]
    b2c4:	68a3      	ldr	r3, [r4, #8]
    b2c6:	606e      	str	r6, [r5, #4]
    b2c8:	18f6      	adds	r6, r6, r3
    b2ca:	6863      	ldr	r3, [r4, #4]
    b2cc:	3301      	adds	r3, #1
    b2ce:	60a6      	str	r6, [r4, #8]
    b2d0:	6063      	str	r3, [r4, #4]
    b2d2:	2b07      	cmp	r3, #7
    b2d4:	dd00      	ble.n	b2d8 <_svfiprintf_r+0x5d8>
    b2d6:	e0fb      	b.n	b4d0 <_svfiprintf_r+0x7d0>
    b2d8:	1c13      	adds	r3, r2, #0
    b2da:	3308      	adds	r3, #8
    b2dc:	1c15      	adds	r5, r2, #0
    b2de:	9a03      	ldr	r2, [sp, #12]
    b2e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b2e2:	606a      	str	r2, [r5, #4]
    b2e4:	6029      	str	r1, [r5, #0]
    b2e6:	68a2      	ldr	r2, [r4, #8]
    b2e8:	9d03      	ldr	r5, [sp, #12]
    b2ea:	1952      	adds	r2, r2, r5
    b2ec:	60a2      	str	r2, [r4, #8]
    b2ee:	6862      	ldr	r2, [r4, #4]
    b2f0:	3201      	adds	r2, #1
    b2f2:	6062      	str	r2, [r4, #4]
    b2f4:	2a07      	cmp	r2, #7
    b2f6:	dd00      	ble.n	b2fa <_svfiprintf_r+0x5fa>
    b2f8:	e0c9      	b.n	b48e <_svfiprintf_r+0x78e>
    b2fa:	9800      	ldr	r0, [sp, #0]
    b2fc:	0740      	lsls	r0, r0, #29
    b2fe:	d539      	bpl.n	b374 <_svfiprintf_r+0x674>
    b300:	9904      	ldr	r1, [sp, #16]
    b302:	9a01      	ldr	r2, [sp, #4]
    b304:	1a8d      	subs	r5, r1, r2
    b306:	2d00      	cmp	r5, #0
    b308:	dd34      	ble.n	b374 <_svfiprintf_r+0x674>
    b30a:	2d10      	cmp	r5, #16
    b30c:	dc00      	bgt.n	b310 <_svfiprintf_r+0x610>
    b30e:	e25b      	b.n	b7c8 <_svfiprintf_r+0xac8>
    b310:	4939      	ldr	r1, [pc, #228]	; (b3f8 <_svfiprintf_r+0x6f8>)
    b312:	46b8      	mov	r8, r7
    b314:	2610      	movs	r6, #16
    b316:	1c0f      	adds	r7, r1, #0
    b318:	e002      	b.n	b320 <_svfiprintf_r+0x620>
    b31a:	3d10      	subs	r5, #16
    b31c:	2d10      	cmp	r5, #16
    b31e:	dd15      	ble.n	b34c <_svfiprintf_r+0x64c>
    b320:	68a2      	ldr	r2, [r4, #8]
    b322:	3210      	adds	r2, #16
    b324:	601f      	str	r7, [r3, #0]
    b326:	605e      	str	r6, [r3, #4]
    b328:	60a2      	str	r2, [r4, #8]
    b32a:	6862      	ldr	r2, [r4, #4]
    b32c:	3201      	adds	r2, #1
    b32e:	6062      	str	r2, [r4, #4]
    b330:	3308      	adds	r3, #8
    b332:	2a07      	cmp	r2, #7
    b334:	ddf1      	ble.n	b31a <_svfiprintf_r+0x61a>
    b336:	9802      	ldr	r0, [sp, #8]
    b338:	4659      	mov	r1, fp
    b33a:	1c22      	adds	r2, r4, #0
    b33c:	f7ff fc4e 	bl	abdc <__ssprint_r>
    b340:	2800      	cmp	r0, #0
    b342:	d146      	bne.n	b3d2 <_svfiprintf_r+0x6d2>
    b344:	3d10      	subs	r5, #16
    b346:	ab0e      	add	r3, sp, #56	; 0x38
    b348:	2d10      	cmp	r5, #16
    b34a:	dce9      	bgt.n	b320 <_svfiprintf_r+0x620>
    b34c:	46ba      	mov	sl, r7
    b34e:	4647      	mov	r7, r8
    b350:	4652      	mov	r2, sl
    b352:	605d      	str	r5, [r3, #4]
    b354:	601a      	str	r2, [r3, #0]
    b356:	68a3      	ldr	r3, [r4, #8]
    b358:	18ed      	adds	r5, r5, r3
    b35a:	6863      	ldr	r3, [r4, #4]
    b35c:	3301      	adds	r3, #1
    b35e:	60a5      	str	r5, [r4, #8]
    b360:	6063      	str	r3, [r4, #4]
    b362:	2b07      	cmp	r3, #7
    b364:	dd07      	ble.n	b376 <_svfiprintf_r+0x676>
    b366:	9802      	ldr	r0, [sp, #8]
    b368:	4659      	mov	r1, fp
    b36a:	1c22      	adds	r2, r4, #0
    b36c:	f7ff fc36 	bl	abdc <__ssprint_r>
    b370:	2800      	cmp	r0, #0
    b372:	d12e      	bne.n	b3d2 <_svfiprintf_r+0x6d2>
    b374:	68a5      	ldr	r5, [r4, #8]
    b376:	9b01      	ldr	r3, [sp, #4]
    b378:	9804      	ldr	r0, [sp, #16]
    b37a:	4283      	cmp	r3, r0
    b37c:	da00      	bge.n	b380 <_svfiprintf_r+0x680>
    b37e:	1c03      	adds	r3, r0, #0
    b380:	9905      	ldr	r1, [sp, #20]
    b382:	18c9      	adds	r1, r1, r3
    b384:	9105      	str	r1, [sp, #20]
    b386:	2d00      	cmp	r5, #0
    b388:	d000      	beq.n	b38c <_svfiprintf_r+0x68c>
    b38a:	e089      	b.n	b4a0 <_svfiprintf_r+0x7a0>
    b38c:	2200      	movs	r2, #0
    b38e:	6062      	str	r2, [r4, #4]
    b390:	783b      	ldrb	r3, [r7, #0]
    b392:	ad0e      	add	r5, sp, #56	; 0x38
    b394:	2b00      	cmp	r3, #0
    b396:	d000      	beq.n	b39a <_svfiprintf_r+0x69a>
    b398:	e4d4      	b.n	ad44 <_svfiprintf_r+0x44>
    b39a:	1c3e      	adds	r6, r7, #0
    b39c:	783b      	ldrb	r3, [r7, #0]
    b39e:	e4f2      	b.n	ad86 <_svfiprintf_r+0x86>
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	d000      	beq.n	b3a6 <_svfiprintf_r+0x6a6>
    b3a4:	e085      	b.n	b4b2 <_svfiprintf_r+0x7b2>
    b3a6:	9900      	ldr	r1, [sp, #0]
    b3a8:	07c9      	lsls	r1, r1, #31
    b3aa:	d400      	bmi.n	b3ae <_svfiprintf_r+0x6ae>
    b3ac:	e0b1      	b.n	b512 <_svfiprintf_r+0x812>
    b3ae:	3327      	adds	r3, #39	; 0x27
    b3b0:	aa1e      	add	r2, sp, #120	; 0x78
    b3b2:	2130      	movs	r1, #48	; 0x30
    b3b4:	54d1      	strb	r1, [r2, r3]
    b3b6:	466b      	mov	r3, sp
    b3b8:	339f      	adds	r3, #159	; 0x9f
    b3ba:	1ae2      	subs	r2, r4, r3
    b3bc:	9203      	str	r2, [sp, #12]
    b3be:	930b      	str	r3, [sp, #44]	; 0x2c
    b3c0:	e5c1      	b.n	af46 <_svfiprintf_r+0x246>
    b3c2:	68a3      	ldr	r3, [r4, #8]
    b3c4:	2b00      	cmp	r3, #0
    b3c6:	d004      	beq.n	b3d2 <_svfiprintf_r+0x6d2>
    b3c8:	9802      	ldr	r0, [sp, #8]
    b3ca:	4659      	mov	r1, fp
    b3cc:	1c22      	adds	r2, r4, #0
    b3ce:	f7ff fc05 	bl	abdc <__ssprint_r>
    b3d2:	465d      	mov	r5, fp
    b3d4:	89ab      	ldrh	r3, [r5, #12]
    b3d6:	0658      	lsls	r0, r3, #25
    b3d8:	d502      	bpl.n	b3e0 <_svfiprintf_r+0x6e0>
    b3da:	2301      	movs	r3, #1
    b3dc:	425b      	negs	r3, r3
    b3de:	9305      	str	r3, [sp, #20]
    b3e0:	9805      	ldr	r0, [sp, #20]
    b3e2:	b02d      	add	sp, #180	; 0xb4
    b3e4:	bc3c      	pop	{r2, r3, r4, r5}
    b3e6:	4690      	mov	r8, r2
    b3e8:	4699      	mov	r9, r3
    b3ea:	46a2      	mov	sl, r4
    b3ec:	46ab      	mov	fp, r5
    b3ee:	bcf0      	pop	{r4, r5, r6, r7}
    b3f0:	bc02      	pop	{r1}
    b3f2:	4708      	bx	r1
    b3f4:	0000e908 	.word	0x0000e908
    b3f8:	0000e2d4 	.word	0x0000e2d4
    b3fc:	9804      	ldr	r0, [sp, #16]
    b3fe:	9901      	ldr	r1, [sp, #4]
    b400:	1a46      	subs	r6, r0, r1
    b402:	2e00      	cmp	r6, #0
    b404:	dc00      	bgt.n	b408 <_svfiprintf_r+0x708>
    b406:	e177      	b.n	b6f8 <_svfiprintf_r+0x9f8>
    b408:	2e10      	cmp	r6, #16
    b40a:	dc00      	bgt.n	b40e <_svfiprintf_r+0x70e>
    b40c:	e1ef      	b.n	b7ee <_svfiprintf_r+0xaee>
    b40e:	4acc      	ldr	r2, [pc, #816]	; (b740 <_svfiprintf_r+0xa40>)
    b410:	2310      	movs	r3, #16
    b412:	4692      	mov	sl, r2
    b414:	4698      	mov	r8, r3
    b416:	465a      	mov	r2, fp
    b418:	4699      	mov	r9, r3
    b41a:	46bb      	mov	fp, r7
    b41c:	1c2b      	adds	r3, r5, #0
    b41e:	44d0      	add	r8, sl
    b420:	9d02      	ldr	r5, [sp, #8]
    b422:	1c17      	adds	r7, r2, #0
    b424:	e005      	b.n	b432 <_svfiprintf_r+0x732>
    b426:	3308      	adds	r3, #8
    b428:	1c1a      	adds	r2, r3, #0
    b42a:	3e10      	subs	r6, #16
    b42c:	3208      	adds	r2, #8
    b42e:	2e10      	cmp	r6, #16
    b430:	dd17      	ble.n	b462 <_svfiprintf_r+0x762>
    b432:	68a2      	ldr	r2, [r4, #8]
    b434:	4640      	mov	r0, r8
    b436:	3210      	adds	r2, #16
    b438:	4649      	mov	r1, r9
    b43a:	6018      	str	r0, [r3, #0]
    b43c:	6059      	str	r1, [r3, #4]
    b43e:	60a2      	str	r2, [r4, #8]
    b440:	6862      	ldr	r2, [r4, #4]
    b442:	3201      	adds	r2, #1
    b444:	6062      	str	r2, [r4, #4]
    b446:	2a07      	cmp	r2, #7
    b448:	dded      	ble.n	b426 <_svfiprintf_r+0x726>
    b44a:	1c28      	adds	r0, r5, #0
    b44c:	1c39      	adds	r1, r7, #0
    b44e:	1c22      	adds	r2, r4, #0
    b450:	f7ff fbc4 	bl	abdc <__ssprint_r>
    b454:	2800      	cmp	r0, #0
    b456:	d12f      	bne.n	b4b8 <_svfiprintf_r+0x7b8>
    b458:	3e10      	subs	r6, #16
    b45a:	aa10      	add	r2, sp, #64	; 0x40
    b45c:	ab0e      	add	r3, sp, #56	; 0x38
    b45e:	2e10      	cmp	r6, #16
    b460:	dce7      	bgt.n	b432 <_svfiprintf_r+0x732>
    b462:	1c1d      	adds	r5, r3, #0
    b464:	1c3b      	adds	r3, r7, #0
    b466:	465f      	mov	r7, fp
    b468:	469b      	mov	fp, r3
    b46a:	2010      	movs	r0, #16
    b46c:	1c03      	adds	r3, r0, #0
    b46e:	4453      	add	r3, sl
    b470:	602b      	str	r3, [r5, #0]
    b472:	68a3      	ldr	r3, [r4, #8]
    b474:	18f3      	adds	r3, r6, r3
    b476:	606e      	str	r6, [r5, #4]
    b478:	60a3      	str	r3, [r4, #8]
    b47a:	6863      	ldr	r3, [r4, #4]
    b47c:	3301      	adds	r3, #1
    b47e:	6063      	str	r3, [r4, #4]
    b480:	2b07      	cmp	r3, #7
    b482:	dd00      	ble.n	b486 <_svfiprintf_r+0x786>
    b484:	e13b      	b.n	b6fe <_svfiprintf_r+0x9fe>
    b486:	1c13      	adds	r3, r2, #0
    b488:	3308      	adds	r3, #8
    b48a:	1c15      	adds	r5, r2, #0
    b48c:	e6df      	b.n	b24e <_svfiprintf_r+0x54e>
    b48e:	9802      	ldr	r0, [sp, #8]
    b490:	4659      	mov	r1, fp
    b492:	1c22      	adds	r2, r4, #0
    b494:	f7ff fba2 	bl	abdc <__ssprint_r>
    b498:	2800      	cmp	r0, #0
    b49a:	d19a      	bne.n	b3d2 <_svfiprintf_r+0x6d2>
    b49c:	ab0e      	add	r3, sp, #56	; 0x38
    b49e:	e72c      	b.n	b2fa <_svfiprintf_r+0x5fa>
    b4a0:	9802      	ldr	r0, [sp, #8]
    b4a2:	4659      	mov	r1, fp
    b4a4:	1c22      	adds	r2, r4, #0
    b4a6:	f7ff fb99 	bl	abdc <__ssprint_r>
    b4aa:	2800      	cmp	r0, #0
    b4ac:	d100      	bne.n	b4b0 <_svfiprintf_r+0x7b0>
    b4ae:	e76d      	b.n	b38c <_svfiprintf_r+0x68c>
    b4b0:	e78f      	b.n	b3d2 <_svfiprintf_r+0x6d2>
    b4b2:	9103      	str	r1, [sp, #12]
    b4b4:	940b      	str	r4, [sp, #44]	; 0x2c
    b4b6:	e546      	b.n	af46 <_svfiprintf_r+0x246>
    b4b8:	46bb      	mov	fp, r7
    b4ba:	e78a      	b.n	b3d2 <_svfiprintf_r+0x6d2>
    b4bc:	9802      	ldr	r0, [sp, #8]
    b4be:	4659      	mov	r1, fp
    b4c0:	1c22      	adds	r2, r4, #0
    b4c2:	f7ff fb8b 	bl	abdc <__ssprint_r>
    b4c6:	2800      	cmp	r0, #0
    b4c8:	d000      	beq.n	b4cc <_svfiprintf_r+0x7cc>
    b4ca:	e782      	b.n	b3d2 <_svfiprintf_r+0x6d2>
    b4cc:	ad0e      	add	r5, sp, #56	; 0x38
    b4ce:	e455      	b.n	ad7c <_svfiprintf_r+0x7c>
    b4d0:	9802      	ldr	r0, [sp, #8]
    b4d2:	4659      	mov	r1, fp
    b4d4:	1c22      	adds	r2, r4, #0
    b4d6:	f7ff fb81 	bl	abdc <__ssprint_r>
    b4da:	2800      	cmp	r0, #0
    b4dc:	d000      	beq.n	b4e0 <_svfiprintf_r+0x7e0>
    b4de:	e778      	b.n	b3d2 <_svfiprintf_r+0x6d2>
    b4e0:	ab10      	add	r3, sp, #64	; 0x40
    b4e2:	ad0e      	add	r5, sp, #56	; 0x38
    b4e4:	e6fb      	b.n	b2de <_svfiprintf_r+0x5de>
    b4e6:	9802      	ldr	r0, [sp, #8]
    b4e8:	4659      	mov	r1, fp
    b4ea:	1c22      	adds	r2, r4, #0
    b4ec:	f7ff fb76 	bl	abdc <__ssprint_r>
    b4f0:	2800      	cmp	r0, #0
    b4f2:	d000      	beq.n	b4f6 <_svfiprintf_r+0x7f6>
    b4f4:	e76d      	b.n	b3d2 <_svfiprintf_r+0x6d2>
    b4f6:	ab10      	add	r3, sp, #64	; 0x40
    b4f8:	ad0e      	add	r5, sp, #56	; 0x38
    b4fa:	e6a4      	b.n	b246 <_svfiprintf_r+0x546>
    b4fc:	9802      	ldr	r0, [sp, #8]
    b4fe:	4659      	mov	r1, fp
    b500:	1c22      	adds	r2, r4, #0
    b502:	f7ff fb6b 	bl	abdc <__ssprint_r>
    b506:	2800      	cmp	r0, #0
    b508:	d000      	beq.n	b50c <_svfiprintf_r+0x80c>
    b50a:	e762      	b.n	b3d2 <_svfiprintf_r+0x6d2>
    b50c:	ab10      	add	r3, sp, #64	; 0x40
    b50e:	ad0e      	add	r5, sp, #56	; 0x38
    b510:	e687      	b.n	b222 <_svfiprintf_r+0x522>
    b512:	9303      	str	r3, [sp, #12]
    b514:	940b      	str	r4, [sp, #44]	; 0x2c
    b516:	e516      	b.n	af46 <_svfiprintf_r+0x246>
    b518:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b51a:	2b00      	cmp	r3, #0
    b51c:	d100      	bne.n	b520 <_svfiprintf_r+0x820>
    b51e:	e091      	b.n	b644 <_svfiprintf_r+0x944>
    b520:	46a9      	mov	r9, r5
    b522:	46b0      	mov	r8, r6
    b524:	940b      	str	r4, [sp, #44]	; 0x2c
    b526:	9d08      	ldr	r5, [sp, #32]
    b528:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b52a:	46ba      	mov	sl, r7
    b52c:	1c27      	adds	r7, r4, #0
    b52e:	1c28      	adds	r0, r5, #0
    b530:	1c31      	adds	r1, r6, #0
    b532:	220a      	movs	r2, #10
    b534:	2300      	movs	r3, #0
    b536:	f002 fba1 	bl	dc7c <____aeabi_uldivmod_from_thumb>
    b53a:	3f01      	subs	r7, #1
    b53c:	3230      	adds	r2, #48	; 0x30
    b53e:	703a      	strb	r2, [r7, #0]
    b540:	1c28      	adds	r0, r5, #0
    b542:	1c31      	adds	r1, r6, #0
    b544:	220a      	movs	r2, #10
    b546:	2300      	movs	r3, #0
    b548:	f002 fb98 	bl	dc7c <____aeabi_uldivmod_from_thumb>
    b54c:	1c02      	adds	r2, r0, #0
    b54e:	1c05      	adds	r5, r0, #0
    b550:	1c0e      	adds	r6, r1, #0
    b552:	430a      	orrs	r2, r1
    b554:	d1eb      	bne.n	b52e <_svfiprintf_r+0x82e>
    b556:	970b      	str	r7, [sp, #44]	; 0x2c
    b558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b55a:	1ae3      	subs	r3, r4, r3
    b55c:	9508      	str	r5, [sp, #32]
    b55e:	9609      	str	r6, [sp, #36]	; 0x24
    b560:	4657      	mov	r7, sl
    b562:	464d      	mov	r5, r9
    b564:	4646      	mov	r6, r8
    b566:	9303      	str	r3, [sp, #12]
    b568:	e4ed      	b.n	af46 <_svfiprintf_r+0x246>
    b56a:	200f      	movs	r0, #15
    b56c:	940b      	str	r4, [sp, #44]	; 0x2c
    b56e:	9a08      	ldr	r2, [sp, #32]
    b570:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b572:	4684      	mov	ip, r0
    b574:	1c21      	adds	r1, r4, #0
    b576:	46a8      	mov	r8, r5
    b578:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b57a:	4660      	mov	r0, ip
    b57c:	4010      	ands	r0, r2
    b57e:	5c28      	ldrb	r0, [r5, r0]
    b580:	3901      	subs	r1, #1
    b582:	0915      	lsrs	r5, r2, #4
    b584:	46a9      	mov	r9, r5
    b586:	7008      	strb	r0, [r1, #0]
    b588:	0718      	lsls	r0, r3, #28
    b58a:	1c05      	adds	r5, r0, #0
    b58c:	4648      	mov	r0, r9
    b58e:	4305      	orrs	r5, r0
    b590:	0918      	lsrs	r0, r3, #4
    b592:	1c2a      	adds	r2, r5, #0
    b594:	1c03      	adds	r3, r0, #0
    b596:	4305      	orrs	r5, r0
    b598:	d1ee      	bne.n	b578 <_svfiprintf_r+0x878>
    b59a:	1a60      	subs	r0, r4, r1
    b59c:	910b      	str	r1, [sp, #44]	; 0x2c
    b59e:	4645      	mov	r5, r8
    b5a0:	9208      	str	r2, [sp, #32]
    b5a2:	9309      	str	r3, [sp, #36]	; 0x24
    b5a4:	9003      	str	r0, [sp, #12]
    b5a6:	e4ce      	b.n	af46 <_svfiprintf_r+0x246>
    b5a8:	9800      	ldr	r0, [sp, #0]
    b5aa:	2310      	movs	r3, #16
    b5ac:	4003      	ands	r3, r0
    b5ae:	d000      	beq.n	b5b2 <_svfiprintf_r+0x8b2>
    b5b0:	e08b      	b.n	b6ca <_svfiprintf_r+0x9ca>
    b5b2:	9800      	ldr	r0, [sp, #0]
    b5b4:	2240      	movs	r2, #64	; 0x40
    b5b6:	4002      	ands	r2, r0
    b5b8:	d100      	bne.n	b5bc <_svfiprintf_r+0x8bc>
    b5ba:	e0c3      	b.n	b744 <_svfiprintf_r+0xa44>
    b5bc:	9907      	ldr	r1, [sp, #28]
    b5be:	8809      	ldrh	r1, [r1, #0]
    b5c0:	9309      	str	r3, [sp, #36]	; 0x24
    b5c2:	9108      	str	r1, [sp, #32]
    b5c4:	9a07      	ldr	r2, [sp, #28]
    b5c6:	3204      	adds	r2, #4
    b5c8:	1e4b      	subs	r3, r1, #1
    b5ca:	4199      	sbcs	r1, r3
    b5cc:	9207      	str	r2, [sp, #28]
    b5ce:	2301      	movs	r3, #1
    b5d0:	e475      	b.n	aebe <_svfiprintf_r+0x1be>
    b5d2:	9800      	ldr	r0, [sp, #0]
    b5d4:	2210      	movs	r2, #16
    b5d6:	4002      	ands	r2, r0
    b5d8:	d16c      	bne.n	b6b4 <_svfiprintf_r+0x9b4>
    b5da:	9800      	ldr	r0, [sp, #0]
    b5dc:	2340      	movs	r3, #64	; 0x40
    b5de:	4003      	ands	r3, r0
    b5e0:	d100      	bne.n	b5e4 <_svfiprintf_r+0x8e4>
    b5e2:	e0c4      	b.n	b76e <_svfiprintf_r+0xa6e>
    b5e4:	9907      	ldr	r1, [sp, #28]
    b5e6:	8809      	ldrh	r1, [r1, #0]
    b5e8:	9108      	str	r1, [sp, #32]
    b5ea:	1e4b      	subs	r3, r1, #1
    b5ec:	4199      	sbcs	r1, r3
    b5ee:	9b07      	ldr	r3, [sp, #28]
    b5f0:	3304      	adds	r3, #4
    b5f2:	9307      	str	r3, [sp, #28]
    b5f4:	9209      	str	r2, [sp, #36]	; 0x24
    b5f6:	1c13      	adds	r3, r2, #0
    b5f8:	e461      	b.n	aebe <_svfiprintf_r+0x1be>
    b5fa:	9a00      	ldr	r2, [sp, #0]
    b5fc:	06d2      	lsls	r2, r2, #27
    b5fe:	d430      	bmi.n	b662 <_svfiprintf_r+0x962>
    b600:	9900      	ldr	r1, [sp, #0]
    b602:	0649      	lsls	r1, r1, #25
    b604:	d52d      	bpl.n	b662 <_svfiprintf_r+0x962>
    b606:	9a07      	ldr	r2, [sp, #28]
    b608:	2300      	movs	r3, #0
    b60a:	5ed3      	ldrsh	r3, [r2, r3]
    b60c:	9308      	str	r3, [sp, #32]
    b60e:	17db      	asrs	r3, r3, #31
    b610:	9309      	str	r3, [sp, #36]	; 0x24
    b612:	9b07      	ldr	r3, [sp, #28]
    b614:	3304      	adds	r3, #4
    b616:	9307      	str	r3, [sp, #28]
    b618:	e4d2      	b.n	afc0 <_svfiprintf_r+0x2c0>
    b61a:	9802      	ldr	r0, [sp, #8]
    b61c:	4659      	mov	r1, fp
    b61e:	1c22      	adds	r2, r4, #0
    b620:	f7ff fadc 	bl	abdc <__ssprint_r>
    b624:	2800      	cmp	r0, #0
    b626:	d000      	beq.n	b62a <_svfiprintf_r+0x92a>
    b628:	e6d3      	b.n	b3d2 <_svfiprintf_r+0x6d2>
    b62a:	ab10      	add	r3, sp, #64	; 0x40
    b62c:	ad0e      	add	r5, sp, #56	; 0x38
    b62e:	e5e5      	b.n	b1fc <_svfiprintf_r+0x4fc>
    b630:	46ab      	mov	fp, r5
    b632:	e6ce      	b.n	b3d2 <_svfiprintf_r+0x6d2>
    b634:	783b      	ldrb	r3, [r7, #0]
    b636:	9207      	str	r2, [sp, #28]
    b638:	f7ff fbba 	bl	adb0 <_svfiprintf_r+0xb0>
    b63c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b63e:	1aa2      	subs	r2, r4, r2
    b640:	9203      	str	r2, [sp, #12]
    b642:	e480      	b.n	af46 <_svfiprintf_r+0x246>
    b644:	9808      	ldr	r0, [sp, #32]
    b646:	2809      	cmp	r0, #9
    b648:	d900      	bls.n	b64c <_svfiprintf_r+0x94c>
    b64a:	e769      	b.n	b520 <_svfiprintf_r+0x820>
    b64c:	1c01      	adds	r1, r0, #0
    b64e:	3130      	adds	r1, #48	; 0x30
    b650:	3327      	adds	r3, #39	; 0x27
    b652:	aa1e      	add	r2, sp, #120	; 0x78
    b654:	54d1      	strb	r1, [r2, r3]
    b656:	466b      	mov	r3, sp
    b658:	339f      	adds	r3, #159	; 0x9f
    b65a:	1ae1      	subs	r1, r4, r3
    b65c:	9103      	str	r1, [sp, #12]
    b65e:	930b      	str	r3, [sp, #44]	; 0x2c
    b660:	e471      	b.n	af46 <_svfiprintf_r+0x246>
    b662:	9807      	ldr	r0, [sp, #28]
    b664:	6803      	ldr	r3, [r0, #0]
    b666:	9308      	str	r3, [sp, #32]
    b668:	17db      	asrs	r3, r3, #31
    b66a:	9309      	str	r3, [sp, #36]	; 0x24
    b66c:	9909      	ldr	r1, [sp, #36]	; 0x24
    b66e:	3004      	adds	r0, #4
    b670:	9007      	str	r0, [sp, #28]
    b672:	2900      	cmp	r1, #0
    b674:	db00      	blt.n	b678 <_svfiprintf_r+0x978>
    b676:	e4a7      	b.n	afc8 <_svfiprintf_r+0x2c8>
    b678:	9a08      	ldr	r2, [sp, #32]
    b67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b67c:	2100      	movs	r1, #0
    b67e:	4250      	negs	r0, r2
    b680:	4199      	sbcs	r1, r3
    b682:	9008      	str	r0, [sp, #32]
    b684:	9109      	str	r1, [sp, #36]	; 0x24
    b686:	20af      	movs	r0, #175	; 0xaf
    b688:	232d      	movs	r3, #45	; 0x2d
    b68a:	4468      	add	r0, sp
    b68c:	7003      	strb	r3, [r0, #0]
    b68e:	e49b      	b.n	afc8 <_svfiprintf_r+0x2c8>
    b690:	9807      	ldr	r0, [sp, #28]
    b692:	9905      	ldr	r1, [sp, #20]
    b694:	6803      	ldr	r3, [r0, #0]
    b696:	17ca      	asrs	r2, r1, #31
    b698:	3004      	adds	r0, #4
    b69a:	6019      	str	r1, [r3, #0]
    b69c:	605a      	str	r2, [r3, #4]
    b69e:	9007      	str	r0, [sp, #28]
    b6a0:	f7ff fb4c 	bl	ad3c <_svfiprintf_r+0x3c>
    b6a4:	9a07      	ldr	r2, [sp, #28]
    b6a6:	9807      	ldr	r0, [sp, #28]
    b6a8:	6812      	ldr	r2, [r2, #0]
    b6aa:	3004      	adds	r0, #4
    b6ac:	9208      	str	r2, [sp, #32]
    b6ae:	9109      	str	r1, [sp, #36]	; 0x24
    b6b0:	9007      	str	r0, [sp, #28]
    b6b2:	e4df      	b.n	b074 <_svfiprintf_r+0x374>
    b6b4:	9907      	ldr	r1, [sp, #28]
    b6b6:	6809      	ldr	r1, [r1, #0]
    b6b8:	9108      	str	r1, [sp, #32]
    b6ba:	1e4a      	subs	r2, r1, #1
    b6bc:	4191      	sbcs	r1, r2
    b6be:	9a07      	ldr	r2, [sp, #28]
    b6c0:	3204      	adds	r2, #4
    b6c2:	9309      	str	r3, [sp, #36]	; 0x24
    b6c4:	9207      	str	r2, [sp, #28]
    b6c6:	f7ff fbfa 	bl	aebe <_svfiprintf_r+0x1be>
    b6ca:	9907      	ldr	r1, [sp, #28]
    b6cc:	6809      	ldr	r1, [r1, #0]
    b6ce:	9209      	str	r2, [sp, #36]	; 0x24
    b6d0:	9108      	str	r1, [sp, #32]
    b6d2:	e777      	b.n	b5c4 <_svfiprintf_r+0x8c4>
    b6d4:	783b      	ldrb	r3, [r7, #0]
    b6d6:	f7ff fb6b 	bl	adb0 <_svfiprintf_r+0xb0>
    b6da:	9a00      	ldr	r2, [sp, #0]
    b6dc:	3b4c      	subs	r3, #76	; 0x4c
    b6de:	431a      	orrs	r2, r3
    b6e0:	9200      	str	r2, [sp, #0]
    b6e2:	3701      	adds	r7, #1
    b6e4:	783b      	ldrb	r3, [r7, #0]
    b6e6:	f7ff fb63 	bl	adb0 <_svfiprintf_r+0xb0>
    b6ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b6ec:	f7f9 ff74 	bl	55d8 <strlen>
    b6f0:	2200      	movs	r2, #0
    b6f2:	9003      	str	r0, [sp, #12]
    b6f4:	9206      	str	r2, [sp, #24]
    b6f6:	e427      	b.n	af48 <_svfiprintf_r+0x248>
    b6f8:	1c2b      	adds	r3, r5, #0
    b6fa:	3308      	adds	r3, #8
    b6fc:	e5a7      	b.n	b24e <_svfiprintf_r+0x54e>
    b6fe:	9802      	ldr	r0, [sp, #8]
    b700:	4659      	mov	r1, fp
    b702:	1c22      	adds	r2, r4, #0
    b704:	f7ff fa6a 	bl	abdc <__ssprint_r>
    b708:	2800      	cmp	r0, #0
    b70a:	d000      	beq.n	b70e <_svfiprintf_r+0xa0e>
    b70c:	e661      	b.n	b3d2 <_svfiprintf_r+0x6d2>
    b70e:	ab10      	add	r3, sp, #64	; 0x40
    b710:	ad0e      	add	r5, sp, #56	; 0x38
    b712:	e59c      	b.n	b24e <_svfiprintf_r+0x54e>
    b714:	1c1a      	adds	r2, r3, #0
    b716:	4b0a      	ldr	r3, [pc, #40]	; (b740 <_svfiprintf_r+0xa40>)
    b718:	469a      	mov	sl, r3
    b71a:	e5cf      	b.n	b2bc <_svfiprintf_r+0x5bc>
    b71c:	2200      	movs	r2, #0
    b71e:	9206      	str	r2, [sp, #24]
    b720:	f7ff fc12 	bl	af48 <_svfiprintf_r+0x248>
    b724:	9a00      	ldr	r2, [sp, #0]
    b726:	0652      	lsls	r2, r2, #25
    b728:	d53b      	bpl.n	b7a2 <_svfiprintf_r+0xaa2>
    b72a:	9807      	ldr	r0, [sp, #28]
    b72c:	4669      	mov	r1, sp
    b72e:	2214      	movs	r2, #20
    b730:	6803      	ldr	r3, [r0, #0]
    b732:	5a51      	ldrh	r1, [r2, r1]
    b734:	3004      	adds	r0, #4
    b736:	8019      	strh	r1, [r3, #0]
    b738:	9007      	str	r0, [sp, #28]
    b73a:	f7ff faff 	bl	ad3c <_svfiprintf_r+0x3c>
    b73e:	46c0      	nop			; (mov r8, r8)
    b740:	0000e2d4 	.word	0x0000e2d4
    b744:	9b07      	ldr	r3, [sp, #28]
    b746:	9807      	ldr	r0, [sp, #28]
    b748:	681b      	ldr	r3, [r3, #0]
    b74a:	3004      	adds	r0, #4
    b74c:	1c19      	adds	r1, r3, #0
    b74e:	9308      	str	r3, [sp, #32]
    b750:	9209      	str	r2, [sp, #36]	; 0x24
    b752:	1e4b      	subs	r3, r1, #1
    b754:	4199      	sbcs	r1, r3
    b756:	9007      	str	r0, [sp, #28]
    b758:	2301      	movs	r3, #1
    b75a:	f7ff fbb0 	bl	aebe <_svfiprintf_r+0x1be>
    b75e:	9807      	ldr	r0, [sp, #28]
    b760:	6800      	ldr	r0, [r0, #0]
    b762:	9109      	str	r1, [sp, #36]	; 0x24
    b764:	9907      	ldr	r1, [sp, #28]
    b766:	3104      	adds	r1, #4
    b768:	9008      	str	r0, [sp, #32]
    b76a:	9107      	str	r1, [sp, #28]
    b76c:	e482      	b.n	b074 <_svfiprintf_r+0x374>
    b76e:	9807      	ldr	r0, [sp, #28]
    b770:	6800      	ldr	r0, [r0, #0]
    b772:	1c01      	adds	r1, r0, #0
    b774:	1e4a      	subs	r2, r1, #1
    b776:	4191      	sbcs	r1, r2
    b778:	9a07      	ldr	r2, [sp, #28]
    b77a:	3204      	adds	r2, #4
    b77c:	9008      	str	r0, [sp, #32]
    b77e:	9309      	str	r3, [sp, #36]	; 0x24
    b780:	9207      	str	r2, [sp, #28]
    b782:	f7ff fb9c 	bl	aebe <_svfiprintf_r+0x1be>
    b786:	2140      	movs	r1, #64	; 0x40
    b788:	9802      	ldr	r0, [sp, #8]
    b78a:	f7f9 fa9d 	bl	4cc8 <_malloc_r>
    b78e:	4659      	mov	r1, fp
    b790:	6008      	str	r0, [r1, #0]
    b792:	6108      	str	r0, [r1, #16]
    b794:	2800      	cmp	r0, #0
    b796:	d03f      	beq.n	b818 <_svfiprintf_r+0xb18>
    b798:	2340      	movs	r3, #64	; 0x40
    b79a:	4658      	mov	r0, fp
    b79c:	6143      	str	r3, [r0, #20]
    b79e:	f7ff fac2 	bl	ad26 <_svfiprintf_r+0x26>
    b7a2:	9a07      	ldr	r2, [sp, #28]
    b7a4:	9805      	ldr	r0, [sp, #20]
    b7a6:	6813      	ldr	r3, [r2, #0]
    b7a8:	3204      	adds	r2, #4
    b7aa:	6018      	str	r0, [r3, #0]
    b7ac:	9207      	str	r2, [sp, #28]
    b7ae:	f7ff fac5 	bl	ad3c <_svfiprintf_r+0x3c>
    b7b2:	491d      	ldr	r1, [pc, #116]	; (b828 <_svfiprintf_r+0xb28>)
    b7b4:	1c2a      	adds	r2, r5, #0
    b7b6:	3208      	adds	r2, #8
    b7b8:	468a      	mov	sl, r1
    b7ba:	f7ff fb53 	bl	ae64 <_svfiprintf_r+0x164>
    b7be:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b7c0:	1a20      	subs	r0, r4, r0
    b7c2:	9003      	str	r0, [sp, #12]
    b7c4:	f7ff fbbf 	bl	af46 <_svfiprintf_r+0x246>
    b7c8:	4817      	ldr	r0, [pc, #92]	; (b828 <_svfiprintf_r+0xb28>)
    b7ca:	4682      	mov	sl, r0
    b7cc:	e5c0      	b.n	b350 <_svfiprintf_r+0x650>
    b7ce:	9603      	str	r6, [sp, #12]
    b7d0:	2e06      	cmp	r6, #6
    b7d2:	d906      	bls.n	b7e2 <_svfiprintf_r+0xae2>
    b7d4:	2106      	movs	r1, #6
    b7d6:	9103      	str	r1, [sp, #12]
    b7d8:	9101      	str	r1, [sp, #4]
    b7da:	4b14      	ldr	r3, [pc, #80]	; (b82c <_svfiprintf_r+0xb2c>)
    b7dc:	930b      	str	r3, [sp, #44]	; 0x2c
    b7de:	f7ff faf9 	bl	add4 <_svfiprintf_r+0xd4>
    b7e2:	9a03      	ldr	r2, [sp, #12]
    b7e4:	43d3      	mvns	r3, r2
    b7e6:	17db      	asrs	r3, r3, #31
    b7e8:	401a      	ands	r2, r3
    b7ea:	9201      	str	r2, [sp, #4]
    b7ec:	e7f5      	b.n	b7da <_svfiprintf_r+0xada>
    b7ee:	1c1a      	adds	r2, r3, #0
    b7f0:	4b0d      	ldr	r3, [pc, #52]	; (b828 <_svfiprintf_r+0xb28>)
    b7f2:	469a      	mov	sl, r3
    b7f4:	e639      	b.n	b46a <_svfiprintf_r+0x76a>
    b7f6:	9603      	str	r6, [sp, #12]
    b7f8:	9006      	str	r0, [sp, #24]
    b7fa:	f7ff fba5 	bl	af48 <_svfiprintf_r+0x248>
    b7fe:	9b07      	ldr	r3, [sp, #28]
    b800:	9a07      	ldr	r2, [sp, #28]
    b802:	681e      	ldr	r6, [r3, #0]
    b804:	3204      	adds	r2, #4
    b806:	2e00      	cmp	r6, #0
    b808:	db00      	blt.n	b80c <_svfiprintf_r+0xb0c>
    b80a:	e713      	b.n	b634 <_svfiprintf_r+0x934>
    b80c:	2601      	movs	r6, #1
    b80e:	783b      	ldrb	r3, [r7, #0]
    b810:	4276      	negs	r6, r6
    b812:	9207      	str	r2, [sp, #28]
    b814:	f7ff facc 	bl	adb0 <_svfiprintf_r+0xb0>
    b818:	9a02      	ldr	r2, [sp, #8]
    b81a:	230c      	movs	r3, #12
    b81c:	6013      	str	r3, [r2, #0]
    b81e:	3b0b      	subs	r3, #11
    b820:	425b      	negs	r3, r3
    b822:	9305      	str	r3, [sp, #20]
    b824:	e5dc      	b.n	b3e0 <_svfiprintf_r+0x6e0>
    b826:	46c0      	nop			; (mov r8, r8)
    b828:	0000e2d4 	.word	0x0000e2d4
    b82c:	0000e930 	.word	0x0000e930

0000b830 <__sprint_r>:
    b830:	b5f0      	push	{r4, r5, r6, r7, lr}
    b832:	4657      	mov	r7, sl
    b834:	464e      	mov	r6, r9
    b836:	4645      	mov	r5, r8
    b838:	b4e0      	push	{r5, r6, r7}
    b83a:	4680      	mov	r8, r0
    b83c:	6890      	ldr	r0, [r2, #8]
    b83e:	1c0e      	adds	r6, r1, #0
    b840:	4691      	mov	r9, r2
    b842:	2800      	cmp	r0, #0
    b844:	d02d      	beq.n	b8a2 <__sprint_r+0x72>
    b846:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    b848:	049a      	lsls	r2, r3, #18
    b84a:	d52c      	bpl.n	b8a6 <__sprint_r+0x76>
    b84c:	464b      	mov	r3, r9
    b84e:	681b      	ldr	r3, [r3, #0]
    b850:	469a      	mov	sl, r3
    b852:	4652      	mov	r2, sl
    b854:	6857      	ldr	r7, [r2, #4]
    b856:	08bf      	lsrs	r7, r7, #2
    b858:	6815      	ldr	r5, [r2, #0]
    b85a:	2f00      	cmp	r7, #0
    b85c:	dd18      	ble.n	b890 <__sprint_r+0x60>
    b85e:	2400      	movs	r4, #0
    b860:	e002      	b.n	b868 <__sprint_r+0x38>
    b862:	3401      	adds	r4, #1
    b864:	42a7      	cmp	r7, r4
    b866:	dd11      	ble.n	b88c <__sprint_r+0x5c>
    b868:	cd02      	ldmia	r5!, {r1}
    b86a:	4640      	mov	r0, r8
    b86c:	1c32      	adds	r2, r6, #0
    b86e:	f000 feab 	bl	c5c8 <_fputwc_r>
    b872:	1c43      	adds	r3, r0, #1
    b874:	d1f5      	bne.n	b862 <__sprint_r+0x32>
    b876:	2300      	movs	r3, #0
    b878:	464a      	mov	r2, r9
    b87a:	6093      	str	r3, [r2, #8]
    b87c:	6053      	str	r3, [r2, #4]
    b87e:	bc1c      	pop	{r2, r3, r4}
    b880:	4690      	mov	r8, r2
    b882:	4699      	mov	r9, r3
    b884:	46a2      	mov	sl, r4
    b886:	bcf0      	pop	{r4, r5, r6, r7}
    b888:	bc02      	pop	{r1}
    b88a:	4708      	bx	r1
    b88c:	464a      	mov	r2, r9
    b88e:	6890      	ldr	r0, [r2, #8]
    b890:	00bf      	lsls	r7, r7, #2
    b892:	1bc0      	subs	r0, r0, r7
    b894:	464b      	mov	r3, r9
    b896:	6098      	str	r0, [r3, #8]
    b898:	2800      	cmp	r0, #0
    b89a:	d0ec      	beq.n	b876 <__sprint_r+0x46>
    b89c:	2208      	movs	r2, #8
    b89e:	4492      	add	sl, r2
    b8a0:	e7d7      	b.n	b852 <__sprint_r+0x22>
    b8a2:	6050      	str	r0, [r2, #4]
    b8a4:	e7eb      	b.n	b87e <__sprint_r+0x4e>
    b8a6:	4640      	mov	r0, r8
    b8a8:	464a      	mov	r2, r9
    b8aa:	f7fd fee9 	bl	9680 <__sfvwrite_r>
    b8ae:	e7e2      	b.n	b876 <__sprint_r+0x46>

0000b8b0 <_vfiprintf_r>:
    b8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8b2:	465f      	mov	r7, fp
    b8b4:	4656      	mov	r6, sl
    b8b6:	464d      	mov	r5, r9
    b8b8:	4644      	mov	r4, r8
    b8ba:	b4f0      	push	{r4, r5, r6, r7}
    b8bc:	4cd1      	ldr	r4, [pc, #836]	; (bc04 <_vfiprintf_r+0x354>)
    b8be:	44a5      	add	sp, r4
    b8c0:	9001      	str	r0, [sp, #4]
    b8c2:	468b      	mov	fp, r1
    b8c4:	1c15      	adds	r5, r2, #0
    b8c6:	9307      	str	r3, [sp, #28]
    b8c8:	2800      	cmp	r0, #0
    b8ca:	d004      	beq.n	b8d6 <_vfiprintf_r+0x26>
    b8cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    b8ce:	2b00      	cmp	r3, #0
    b8d0:	d101      	bne.n	b8d6 <_vfiprintf_r+0x26>
    b8d2:	f000 fc91 	bl	c1f8 <_vfiprintf_r+0x948>
    b8d6:	4658      	mov	r0, fp
    b8d8:	8982      	ldrh	r2, [r0, #12]
    b8da:	2180      	movs	r1, #128	; 0x80
    b8dc:	0189      	lsls	r1, r1, #6
    b8de:	1c13      	adds	r3, r2, #0
    b8e0:	420a      	tst	r2, r1
    b8e2:	d107      	bne.n	b8f4 <_vfiprintf_r+0x44>
    b8e4:	430a      	orrs	r2, r1
    b8e6:	4659      	mov	r1, fp
    b8e8:	818a      	strh	r2, [r1, #12]
    b8ea:	4bc7      	ldr	r3, [pc, #796]	; (bc08 <_vfiprintf_r+0x358>)
    b8ec:	6e49      	ldr	r1, [r1, #100]	; 0x64
    b8ee:	400b      	ands	r3, r1
    b8f0:	6643      	str	r3, [r0, #100]	; 0x64
    b8f2:	1c13      	adds	r3, r2, #0
    b8f4:	0719      	lsls	r1, r3, #28
    b8f6:	d401      	bmi.n	b8fc <_vfiprintf_r+0x4c>
    b8f8:	f000 fdf8 	bl	c4ec <_vfiprintf_r+0xc3c>
    b8fc:	4658      	mov	r0, fp
    b8fe:	6901      	ldr	r1, [r0, #16]
    b900:	2900      	cmp	r1, #0
    b902:	d101      	bne.n	b908 <_vfiprintf_r+0x58>
    b904:	f000 fdf2 	bl	c4ec <_vfiprintf_r+0xc3c>
    b908:	211a      	movs	r1, #26
    b90a:	400b      	ands	r3, r1
    b90c:	2b0a      	cmp	r3, #10
    b90e:	d101      	bne.n	b914 <_vfiprintf_r+0x64>
    b910:	f000 fc35 	bl	c17e <_vfiprintf_r+0x8ce>
    b914:	2194      	movs	r1, #148	; 0x94
    b916:	24a1      	movs	r4, #161	; 0xa1
    b918:	00c9      	lsls	r1, r1, #3
    b91a:	00e4      	lsls	r4, r4, #3
    b91c:	2300      	movs	r3, #0
    b91e:	446c      	add	r4, sp
    b920:	4469      	add	r1, sp
    b922:	46aa      	mov	sl, r5
    b924:	6021      	str	r1, [r4, #0]
    b926:	60a3      	str	r3, [r4, #8]
    b928:	6063      	str	r3, [r4, #4]
    b92a:	930c      	str	r3, [sp, #48]	; 0x30
    b92c:	9305      	str	r3, [sp, #20]
    b92e:	1c0d      	adds	r5, r1, #0
    b930:	4657      	mov	r7, sl
    b932:	783b      	ldrb	r3, [r7, #0]
    b934:	2b00      	cmp	r3, #0
    b936:	d100      	bne.n	b93a <_vfiprintf_r+0x8a>
    b938:	e352      	b.n	bfe0 <_vfiprintf_r+0x730>
    b93a:	2b25      	cmp	r3, #37	; 0x25
    b93c:	d100      	bne.n	b940 <_vfiprintf_r+0x90>
    b93e:	e34f      	b.n	bfe0 <_vfiprintf_r+0x730>
    b940:	1c3e      	adds	r6, r7, #0
    b942:	e001      	b.n	b948 <_vfiprintf_r+0x98>
    b944:	2b00      	cmp	r3, #0
    b946:	d003      	beq.n	b950 <_vfiprintf_r+0xa0>
    b948:	3601      	adds	r6, #1
    b94a:	7833      	ldrb	r3, [r6, #0]
    b94c:	2b25      	cmp	r3, #37	; 0x25
    b94e:	d1f9      	bne.n	b944 <_vfiprintf_r+0x94>
    b950:	1bf2      	subs	r2, r6, r7
    b952:	4690      	mov	r8, r2
    b954:	2000      	movs	r0, #0
    b956:	4580      	cmp	r8, r0
    b958:	d010      	beq.n	b97c <_vfiprintf_r+0xcc>
    b95a:	68a3      	ldr	r3, [r4, #8]
    b95c:	4443      	add	r3, r8
    b95e:	602f      	str	r7, [r5, #0]
    b960:	606a      	str	r2, [r5, #4]
    b962:	60a3      	str	r3, [r4, #8]
    b964:	6863      	ldr	r3, [r4, #4]
    b966:	3301      	adds	r3, #1
    b968:	6063      	str	r3, [r4, #4]
    b96a:	3508      	adds	r5, #8
    b96c:	2b07      	cmp	r3, #7
    b96e:	dd00      	ble.n	b972 <_vfiprintf_r+0xc2>
    b970:	e3cc      	b.n	c10c <_vfiprintf_r+0x85c>
    b972:	9905      	ldr	r1, [sp, #20]
    b974:	1c0a      	adds	r2, r1, #0
    b976:	4442      	add	r2, r8
    b978:	9205      	str	r2, [sp, #20]
    b97a:	7833      	ldrb	r3, [r6, #0]
    b97c:	2b00      	cmp	r3, #0
    b97e:	d100      	bne.n	b982 <_vfiprintf_r+0xd2>
    b980:	e344      	b.n	c00c <_vfiprintf_r+0x75c>
    b982:	4ba2      	ldr	r3, [pc, #648]	; (bc0c <_vfiprintf_r+0x35c>)
    b984:	2000      	movs	r0, #0
    b986:	446b      	add	r3, sp
    b988:	7018      	strb	r0, [r3, #0]
    b98a:	2100      	movs	r1, #0
    b98c:	2240      	movs	r2, #64	; 0x40
    b98e:	7873      	ldrb	r3, [r6, #1]
    b990:	1c77      	adds	r7, r6, #1
    b992:	9104      	str	r1, [sp, #16]
    b994:	2601      	movs	r6, #1
    b996:	9100      	str	r1, [sp, #0]
    b998:	4690      	mov	r8, r2
    b99a:	2080      	movs	r0, #128	; 0x80
    b99c:	3a15      	subs	r2, #21
    b99e:	499c      	ldr	r1, [pc, #624]	; (bc10 <_vfiprintf_r+0x360>)
    b9a0:	4276      	negs	r6, r6
    b9a2:	4684      	mov	ip, r0
    b9a4:	4692      	mov	sl, r2
    b9a6:	3701      	adds	r7, #1
    b9a8:	1c1a      	adds	r2, r3, #0
    b9aa:	3a20      	subs	r2, #32
    b9ac:	2a58      	cmp	r2, #88	; 0x58
    b9ae:	d96b      	bls.n	ba88 <_vfiprintf_r+0x1d8>
    b9b0:	2b00      	cmp	r3, #0
    b9b2:	d100      	bne.n	b9b6 <_vfiprintf_r+0x106>
    b9b4:	e32a      	b.n	c00c <_vfiprintf_r+0x75c>
    b9b6:	229c      	movs	r2, #156	; 0x9c
    b9b8:	00d2      	lsls	r2, r2, #3
    b9ba:	446a      	add	r2, sp
    b9bc:	7013      	strb	r3, [r2, #0]
    b9be:	4b93      	ldr	r3, [pc, #588]	; (bc0c <_vfiprintf_r+0x35c>)
    b9c0:	2101      	movs	r1, #1
    b9c2:	2000      	movs	r0, #0
    b9c4:	446b      	add	r3, sp
    b9c6:	7018      	strb	r0, [r3, #0]
    b9c8:	9102      	str	r1, [sp, #8]
    b9ca:	9103      	str	r1, [sp, #12]
    b9cc:	920b      	str	r2, [sp, #44]	; 0x2c
    b9ce:	2100      	movs	r1, #0
    b9d0:	9106      	str	r1, [sp, #24]
    b9d2:	9900      	ldr	r1, [sp, #0]
    b9d4:	2302      	movs	r3, #2
    b9d6:	4019      	ands	r1, r3
    b9d8:	4689      	mov	r9, r1
    b9da:	d002      	beq.n	b9e2 <_vfiprintf_r+0x132>
    b9dc:	9a02      	ldr	r2, [sp, #8]
    b9de:	18d2      	adds	r2, r2, r3
    b9e0:	9202      	str	r2, [sp, #8]
    b9e2:	9800      	ldr	r0, [sp, #0]
    b9e4:	2384      	movs	r3, #132	; 0x84
    b9e6:	4018      	ands	r0, r3
    b9e8:	900d      	str	r0, [sp, #52]	; 0x34
    b9ea:	d000      	beq.n	b9ee <_vfiprintf_r+0x13e>
    b9ec:	e213      	b.n	be16 <_vfiprintf_r+0x566>
    b9ee:	9904      	ldr	r1, [sp, #16]
    b9f0:	9a02      	ldr	r2, [sp, #8]
    b9f2:	1a8e      	subs	r6, r1, r2
    b9f4:	2e00      	cmp	r6, #0
    b9f6:	dc00      	bgt.n	b9fa <_vfiprintf_r+0x14a>
    b9f8:	e20d      	b.n	be16 <_vfiprintf_r+0x566>
    b9fa:	2e10      	cmp	r6, #16
    b9fc:	dc01      	bgt.n	ba02 <_vfiprintf_r+0x152>
    b9fe:	f000 fd61 	bl	c4c4 <_vfiprintf_r+0xc14>
    ba02:	4b84      	ldr	r3, [pc, #528]	; (bc14 <_vfiprintf_r+0x364>)
    ba04:	469a      	mov	sl, r3
    ba06:	4652      	mov	r2, sl
    ba08:	2010      	movs	r0, #16
    ba0a:	1c2b      	adds	r3, r5, #0
    ba0c:	46ba      	mov	sl, r7
    ba0e:	4680      	mov	r8, r0
    ba10:	465d      	mov	r5, fp
    ba12:	1c17      	adds	r7, r2, #0
    ba14:	e005      	b.n	ba22 <_vfiprintf_r+0x172>
    ba16:	3308      	adds	r3, #8
    ba18:	1c1a      	adds	r2, r3, #0
    ba1a:	3e10      	subs	r6, #16
    ba1c:	3208      	adds	r2, #8
    ba1e:	2e10      	cmp	r6, #16
    ba20:	dd1c      	ble.n	ba5c <_vfiprintf_r+0x1ac>
    ba22:	4642      	mov	r2, r8
    ba24:	605a      	str	r2, [r3, #4]
    ba26:	68a2      	ldr	r2, [r4, #8]
    ba28:	3210      	adds	r2, #16
    ba2a:	601f      	str	r7, [r3, #0]
    ba2c:	60a2      	str	r2, [r4, #8]
    ba2e:	6862      	ldr	r2, [r4, #4]
    ba30:	3201      	adds	r2, #1
    ba32:	6062      	str	r2, [r4, #4]
    ba34:	2a07      	cmp	r2, #7
    ba36:	ddee      	ble.n	ba16 <_vfiprintf_r+0x166>
    ba38:	9801      	ldr	r0, [sp, #4]
    ba3a:	1c29      	adds	r1, r5, #0
    ba3c:	1c22      	adds	r2, r4, #0
    ba3e:	f7ff fef7 	bl	b830 <__sprint_r>
    ba42:	2800      	cmp	r0, #0
    ba44:	d001      	beq.n	ba4a <_vfiprintf_r+0x19a>
    ba46:	f000 fcd8 	bl	c3fa <_vfiprintf_r+0xb4a>
    ba4a:	2295      	movs	r2, #149	; 0x95
    ba4c:	2394      	movs	r3, #148	; 0x94
    ba4e:	00d2      	lsls	r2, r2, #3
    ba50:	00db      	lsls	r3, r3, #3
    ba52:	3e10      	subs	r6, #16
    ba54:	446a      	add	r2, sp
    ba56:	446b      	add	r3, sp
    ba58:	2e10      	cmp	r6, #16
    ba5a:	dce2      	bgt.n	ba22 <_vfiprintf_r+0x172>
    ba5c:	46ab      	mov	fp, r5
    ba5e:	1c1d      	adds	r5, r3, #0
    ba60:	1c3b      	adds	r3, r7, #0
    ba62:	4657      	mov	r7, sl
    ba64:	469a      	mov	sl, r3
    ba66:	4653      	mov	r3, sl
    ba68:	602b      	str	r3, [r5, #0]
    ba6a:	68a3      	ldr	r3, [r4, #8]
    ba6c:	18f3      	adds	r3, r6, r3
    ba6e:	606e      	str	r6, [r5, #4]
    ba70:	60a3      	str	r3, [r4, #8]
    ba72:	6863      	ldr	r3, [r4, #4]
    ba74:	3301      	adds	r3, #1
    ba76:	6063      	str	r3, [r4, #4]
    ba78:	2b07      	cmp	r3, #7
    ba7a:	dd01      	ble.n	ba80 <_vfiprintf_r+0x1d0>
    ba7c:	f000 fc46 	bl	c30c <_vfiprintf_r+0xa5c>
    ba80:	1c13      	adds	r3, r2, #0
    ba82:	3308      	adds	r3, #8
    ba84:	1c15      	adds	r5, r2, #0
    ba86:	e1c8      	b.n	be1a <_vfiprintf_r+0x56a>
    ba88:	0092      	lsls	r2, r2, #2
    ba8a:	588a      	ldr	r2, [r1, r2]
    ba8c:	4697      	mov	pc, r2
    ba8e:	9800      	ldr	r0, [sp, #0]
    ba90:	2310      	movs	r3, #16
    ba92:	4318      	orrs	r0, r3
    ba94:	9000      	str	r0, [sp, #0]
    ba96:	9900      	ldr	r1, [sp, #0]
    ba98:	2220      	movs	r2, #32
    ba9a:	400a      	ands	r2, r1
    ba9c:	d101      	bne.n	baa2 <_vfiprintf_r+0x1f2>
    ba9e:	f000 fc0a 	bl	c2b6 <_vfiprintf_r+0xa06>
    baa2:	9b07      	ldr	r3, [sp, #28]
    baa4:	2207      	movs	r2, #7
    baa6:	3307      	adds	r3, #7
    baa8:	4393      	bics	r3, r2
    baaa:	6818      	ldr	r0, [r3, #0]
    baac:	6859      	ldr	r1, [r3, #4]
    baae:	3201      	adds	r2, #1
    bab0:	18d2      	adds	r2, r2, r3
    bab2:	9008      	str	r0, [sp, #32]
    bab4:	9109      	str	r1, [sp, #36]	; 0x24
    bab6:	9207      	str	r2, [sp, #28]
    bab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    baba:	1c01      	adds	r1, r0, #0
    babc:	4311      	orrs	r1, r2
    babe:	1e4b      	subs	r3, r1, #1
    bac0:	4199      	sbcs	r1, r3
    bac2:	2301      	movs	r3, #1
    bac4:	4a51      	ldr	r2, [pc, #324]	; (bc0c <_vfiprintf_r+0x35c>)
    bac6:	2000      	movs	r0, #0
    bac8:	446a      	add	r2, sp
    baca:	7010      	strb	r0, [r2, #0]
    bacc:	2e00      	cmp	r6, #0
    bace:	db03      	blt.n	bad8 <_vfiprintf_r+0x228>
    bad0:	9800      	ldr	r0, [sp, #0]
    bad2:	2280      	movs	r2, #128	; 0x80
    bad4:	4390      	bics	r0, r2
    bad6:	9000      	str	r0, [sp, #0]
    bad8:	2e00      	cmp	r6, #0
    bada:	d102      	bne.n	bae2 <_vfiprintf_r+0x232>
    badc:	2900      	cmp	r1, #0
    bade:	d100      	bne.n	bae2 <_vfiprintf_r+0x232>
    bae0:	e281      	b.n	bfe6 <_vfiprintf_r+0x736>
    bae2:	2b01      	cmp	r3, #1
    bae4:	d100      	bne.n	bae8 <_vfiprintf_r+0x238>
    bae6:	e3ad      	b.n	c244 <_vfiprintf_r+0x994>
    bae8:	2b02      	cmp	r3, #2
    baea:	d100      	bne.n	baee <_vfiprintf_r+0x23e>
    baec:	e38b      	b.n	c206 <_vfiprintf_r+0x956>
    baee:	2107      	movs	r1, #7
    baf0:	940b      	str	r4, [sp, #44]	; 0x2c
    baf2:	9702      	str	r7, [sp, #8]
    baf4:	9a08      	ldr	r2, [sp, #32]
    baf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    baf8:	4688      	mov	r8, r1
    bafa:	46ac      	mov	ip, r5
    bafc:	1c21      	adds	r1, r4, #0
    bafe:	0758      	lsls	r0, r3, #29
    bb00:	4682      	mov	sl, r0
    bb02:	4645      	mov	r5, r8
    bb04:	08d0      	lsrs	r0, r2, #3
    bb06:	4657      	mov	r7, sl
    bb08:	4307      	orrs	r7, r0
    bb0a:	4015      	ands	r5, r2
    bb0c:	08d8      	lsrs	r0, r3, #3
    bb0e:	3901      	subs	r1, #1
    bb10:	3530      	adds	r5, #48	; 0x30
    bb12:	1c03      	adds	r3, r0, #0
    bb14:	1c38      	adds	r0, r7, #0
    bb16:	700d      	strb	r5, [r1, #0]
    bb18:	1c3a      	adds	r2, r7, #0
    bb1a:	4318      	orrs	r0, r3
    bb1c:	d1ef      	bne.n	bafe <_vfiprintf_r+0x24e>
    bb1e:	910b      	str	r1, [sp, #44]	; 0x2c
    bb20:	9900      	ldr	r1, [sp, #0]
    bb22:	9208      	str	r2, [sp, #32]
    bb24:	9309      	str	r3, [sp, #36]	; 0x24
    bb26:	1c2b      	adds	r3, r5, #0
    bb28:	9f02      	ldr	r7, [sp, #8]
    bb2a:	4665      	mov	r5, ip
    bb2c:	469c      	mov	ip, r3
    bb2e:	07c9      	lsls	r1, r1, #31
    bb30:	d401      	bmi.n	bb36 <_vfiprintf_r+0x286>
    bb32:	f000 fc05 	bl	c340 <_vfiprintf_r+0xa90>
    bb36:	2330      	movs	r3, #48	; 0x30
    bb38:	459c      	cmp	ip, r3
    bb3a:	d101      	bne.n	bb40 <_vfiprintf_r+0x290>
    bb3c:	f000 fcc8 	bl	c4d0 <_vfiprintf_r+0xc20>
    bb40:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bb42:	3901      	subs	r1, #1
    bb44:	2330      	movs	r3, #48	; 0x30
    bb46:	1a62      	subs	r2, r4, r1
    bb48:	910b      	str	r1, [sp, #44]	; 0x2c
    bb4a:	700b      	strb	r3, [r1, #0]
    bb4c:	9203      	str	r2, [sp, #12]
    bb4e:	9606      	str	r6, [sp, #24]
    bb50:	9803      	ldr	r0, [sp, #12]
    bb52:	9906      	ldr	r1, [sp, #24]
    bb54:	9002      	str	r0, [sp, #8]
    bb56:	4288      	cmp	r0, r1
    bb58:	da00      	bge.n	bb5c <_vfiprintf_r+0x2ac>
    bb5a:	9102      	str	r1, [sp, #8]
    bb5c:	4a2b      	ldr	r2, [pc, #172]	; (bc0c <_vfiprintf_r+0x35c>)
    bb5e:	446a      	add	r2, sp
    bb60:	7813      	ldrb	r3, [r2, #0]
    bb62:	9802      	ldr	r0, [sp, #8]
    bb64:	1e5a      	subs	r2, r3, #1
    bb66:	4193      	sbcs	r3, r2
    bb68:	18c0      	adds	r0, r0, r3
    bb6a:	9002      	str	r0, [sp, #8]
    bb6c:	e731      	b.n	b9d2 <_vfiprintf_r+0x122>
    bb6e:	9a00      	ldr	r2, [sp, #0]
    bb70:	2310      	movs	r3, #16
    bb72:	431a      	orrs	r2, r3
    bb74:	9200      	str	r2, [sp, #0]
    bb76:	9b00      	ldr	r3, [sp, #0]
    bb78:	069b      	lsls	r3, r3, #26
    bb7a:	d400      	bmi.n	bb7e <_vfiprintf_r+0x2ce>
    bb7c:	e38b      	b.n	c296 <_vfiprintf_r+0x9e6>
    bb7e:	9b07      	ldr	r3, [sp, #28]
    bb80:	2207      	movs	r2, #7
    bb82:	3307      	adds	r3, #7
    bb84:	4393      	bics	r3, r2
    bb86:	6819      	ldr	r1, [r3, #0]
    bb88:	685a      	ldr	r2, [r3, #4]
    bb8a:	2008      	movs	r0, #8
    bb8c:	18c0      	adds	r0, r0, r3
    bb8e:	9108      	str	r1, [sp, #32]
    bb90:	9209      	str	r2, [sp, #36]	; 0x24
    bb92:	9007      	str	r0, [sp, #28]
    bb94:	9909      	ldr	r1, [sp, #36]	; 0x24
    bb96:	2900      	cmp	r1, #0
    bb98:	da01      	bge.n	bb9e <_vfiprintf_r+0x2ee>
    bb9a:	f000 fbf4 	bl	c386 <_vfiprintf_r+0xad6>
    bb9e:	9908      	ldr	r1, [sp, #32]
    bba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bba2:	4311      	orrs	r1, r2
    bba4:	1e4b      	subs	r3, r1, #1
    bba6:	4199      	sbcs	r1, r3
    bba8:	2301      	movs	r3, #1
    bbaa:	e78f      	b.n	bacc <_vfiprintf_r+0x21c>
    bbac:	9900      	ldr	r1, [sp, #0]
    bbae:	2310      	movs	r3, #16
    bbb0:	4319      	orrs	r1, r3
    bbb2:	9100      	str	r1, [sp, #0]
    bbb4:	9a00      	ldr	r2, [sp, #0]
    bbb6:	2320      	movs	r3, #32
    bbb8:	4013      	ands	r3, r2
    bbba:	d100      	bne.n	bbbe <_vfiprintf_r+0x30e>
    bbbc:	e391      	b.n	c2e2 <_vfiprintf_r+0xa32>
    bbbe:	9b07      	ldr	r3, [sp, #28]
    bbc0:	2207      	movs	r2, #7
    bbc2:	3307      	adds	r3, #7
    bbc4:	4393      	bics	r3, r2
    bbc6:	6819      	ldr	r1, [r3, #0]
    bbc8:	685a      	ldr	r2, [r3, #4]
    bbca:	9108      	str	r1, [sp, #32]
    bbcc:	9209      	str	r2, [sp, #36]	; 0x24
    bbce:	9908      	ldr	r1, [sp, #32]
    bbd0:	2008      	movs	r0, #8
    bbd2:	18c0      	adds	r0, r0, r3
    bbd4:	4311      	orrs	r1, r2
    bbd6:	1e4b      	subs	r3, r1, #1
    bbd8:	4199      	sbcs	r1, r3
    bbda:	9007      	str	r0, [sp, #28]
    bbdc:	2300      	movs	r3, #0
    bbde:	e771      	b.n	bac4 <_vfiprintf_r+0x214>
    bbe0:	9b07      	ldr	r3, [sp, #28]
    bbe2:	9a07      	ldr	r2, [sp, #28]
    bbe4:	681b      	ldr	r3, [r3, #0]
    bbe6:	3204      	adds	r2, #4
    bbe8:	9304      	str	r3, [sp, #16]
    bbea:	2b00      	cmp	r3, #0
    bbec:	db00      	blt.n	bbf0 <_vfiprintf_r+0x340>
    bbee:	e39c      	b.n	c32a <_vfiprintf_r+0xa7a>
    bbf0:	9804      	ldr	r0, [sp, #16]
    bbf2:	4240      	negs	r0, r0
    bbf4:	9004      	str	r0, [sp, #16]
    bbf6:	9207      	str	r2, [sp, #28]
    bbf8:	9a00      	ldr	r2, [sp, #0]
    bbfa:	2304      	movs	r3, #4
    bbfc:	431a      	orrs	r2, r3
    bbfe:	9200      	str	r2, [sp, #0]
    bc00:	783b      	ldrb	r3, [r7, #0]
    bc02:	e6d0      	b.n	b9a6 <_vfiprintf_r+0xf6>
    bc04:	fffffae4 	.word	0xfffffae4
    bc08:	ffffdfff 	.word	0xffffdfff
    bc0c:	00000517 	.word	0x00000517
    bc10:	0000e2f4 	.word	0x0000e2f4
    bc14:	0000e458 	.word	0x0000e458
    bc18:	9a07      	ldr	r2, [sp, #28]
    bc1a:	239c      	movs	r3, #156	; 0x9c
    bc1c:	1c11      	adds	r1, r2, #0
    bc1e:	00db      	lsls	r3, r3, #3
    bc20:	6812      	ldr	r2, [r2, #0]
    bc22:	446b      	add	r3, sp
    bc24:	701a      	strb	r2, [r3, #0]
    bc26:	4ac7      	ldr	r2, [pc, #796]	; (bf44 <_vfiprintf_r+0x694>)
    bc28:	3104      	adds	r1, #4
    bc2a:	9107      	str	r1, [sp, #28]
    bc2c:	2000      	movs	r0, #0
    bc2e:	2101      	movs	r1, #1
    bc30:	446a      	add	r2, sp
    bc32:	7010      	strb	r0, [r2, #0]
    bc34:	9102      	str	r1, [sp, #8]
    bc36:	9103      	str	r1, [sp, #12]
    bc38:	930b      	str	r3, [sp, #44]	; 0x2c
    bc3a:	e6c8      	b.n	b9ce <_vfiprintf_r+0x11e>
    bc3c:	49c1      	ldr	r1, [pc, #772]	; (bf44 <_vfiprintf_r+0x694>)
    bc3e:	2200      	movs	r2, #0
    bc40:	4469      	add	r1, sp
    bc42:	9b07      	ldr	r3, [sp, #28]
    bc44:	700a      	strb	r2, [r1, #0]
    bc46:	1c18      	adds	r0, r3, #0
    bc48:	681b      	ldr	r3, [r3, #0]
    bc4a:	3004      	adds	r0, #4
    bc4c:	9007      	str	r0, [sp, #28]
    bc4e:	930b      	str	r3, [sp, #44]	; 0x2c
    bc50:	2b00      	cmp	r3, #0
    bc52:	d101      	bne.n	bc58 <_vfiprintf_r+0x3a8>
    bc54:	f000 fc24 	bl	c4a0 <_vfiprintf_r+0xbf0>
    bc58:	2e00      	cmp	r6, #0
    bc5a:	da01      	bge.n	bc60 <_vfiprintf_r+0x3b0>
    bc5c:	f000 fc18 	bl	c490 <_vfiprintf_r+0xbe0>
    bc60:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bc62:	2100      	movs	r1, #0
    bc64:	1c32      	adds	r2, r6, #0
    bc66:	f7fd ff71 	bl	9b4c <memchr>
    bc6a:	2800      	cmp	r0, #0
    bc6c:	d101      	bne.n	bc72 <_vfiprintf_r+0x3c2>
    bc6e:	f000 fc4d 	bl	c50c <_vfiprintf_r+0xc5c>
    bc72:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bc74:	1a40      	subs	r0, r0, r1
    bc76:	9003      	str	r0, [sp, #12]
    bc78:	42b0      	cmp	r0, r6
    bc7a:	dc00      	bgt.n	bc7e <_vfiprintf_r+0x3ce>
    bc7c:	e3d5      	b.n	c42a <_vfiprintf_r+0xb7a>
    bc7e:	2300      	movs	r3, #0
    bc80:	9603      	str	r6, [sp, #12]
    bc82:	9306      	str	r3, [sp, #24]
    bc84:	e764      	b.n	bb50 <_vfiprintf_r+0x2a0>
    bc86:	49b0      	ldr	r1, [pc, #704]	; (bf48 <_vfiprintf_r+0x698>)
    bc88:	9800      	ldr	r0, [sp, #0]
    bc8a:	910c      	str	r1, [sp, #48]	; 0x30
    bc8c:	2120      	movs	r1, #32
    bc8e:	4001      	ands	r1, r0
    bc90:	d064      	beq.n	bd5c <_vfiprintf_r+0x4ac>
    bc92:	9a07      	ldr	r2, [sp, #28]
    bc94:	2107      	movs	r1, #7
    bc96:	3207      	adds	r2, #7
    bc98:	438a      	bics	r2, r1
    bc9a:	3101      	adds	r1, #1
    bc9c:	1889      	adds	r1, r1, r2
    bc9e:	9107      	str	r1, [sp, #28]
    bca0:	6810      	ldr	r0, [r2, #0]
    bca2:	6851      	ldr	r1, [r2, #4]
    bca4:	9008      	str	r0, [sp, #32]
    bca6:	9109      	str	r1, [sp, #36]	; 0x24
    bca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bcaa:	9908      	ldr	r1, [sp, #32]
    bcac:	4311      	orrs	r1, r2
    bcae:	1e4a      	subs	r2, r1, #1
    bcb0:	4191      	sbcs	r1, r2
    bcb2:	2900      	cmp	r1, #0
    bcb4:	d00e      	beq.n	bcd4 <_vfiprintf_r+0x424>
    bcb6:	9800      	ldr	r0, [sp, #0]
    bcb8:	2201      	movs	r2, #1
    bcba:	4210      	tst	r0, r2
    bcbc:	d00a      	beq.n	bcd4 <_vfiprintf_r+0x424>
    bcbe:	49a3      	ldr	r1, [pc, #652]	; (bf4c <_vfiprintf_r+0x69c>)
    bcc0:	2030      	movs	r0, #48	; 0x30
    bcc2:	4469      	add	r1, sp
    bcc4:	704b      	strb	r3, [r1, #1]
    bcc6:	7008      	strb	r0, [r1, #0]
    bcc8:	9900      	ldr	r1, [sp, #0]
    bcca:	2302      	movs	r3, #2
    bccc:	4319      	orrs	r1, r3
    bcce:	9100      	str	r1, [sp, #0]
    bcd0:	1c11      	adds	r1, r2, #0
    bcd2:	e6f7      	b.n	bac4 <_vfiprintf_r+0x214>
    bcd4:	2302      	movs	r3, #2
    bcd6:	e6f5      	b.n	bac4 <_vfiprintf_r+0x214>
    bcd8:	9b00      	ldr	r3, [sp, #0]
    bcda:	2020      	movs	r0, #32
    bcdc:	4303      	orrs	r3, r0
    bcde:	9300      	str	r3, [sp, #0]
    bce0:	783b      	ldrb	r3, [r7, #0]
    bce2:	e660      	b.n	b9a6 <_vfiprintf_r+0xf6>
    bce4:	9b07      	ldr	r3, [sp, #28]
    bce6:	1c18      	adds	r0, r3, #0
    bce8:	681b      	ldr	r3, [r3, #0]
    bcea:	9a00      	ldr	r2, [sp, #0]
    bcec:	9308      	str	r3, [sp, #32]
    bcee:	2302      	movs	r3, #2
    bcf0:	431a      	orrs	r2, r3
    bcf2:	9200      	str	r2, [sp, #0]
    bcf4:	4a95      	ldr	r2, [pc, #596]	; (bf4c <_vfiprintf_r+0x69c>)
    bcf6:	2100      	movs	r1, #0
    bcf8:	446a      	add	r2, sp
    bcfa:	9109      	str	r1, [sp, #36]	; 0x24
    bcfc:	3130      	adds	r1, #48	; 0x30
    bcfe:	3004      	adds	r0, #4
    bd00:	7011      	strb	r1, [r2, #0]
    bd02:	3148      	adds	r1, #72	; 0x48
    bd04:	7051      	strb	r1, [r2, #1]
    bd06:	9007      	str	r0, [sp, #28]
    bd08:	9908      	ldr	r1, [sp, #32]
    bd0a:	488f      	ldr	r0, [pc, #572]	; (bf48 <_vfiprintf_r+0x698>)
    bd0c:	1e4a      	subs	r2, r1, #1
    bd0e:	4191      	sbcs	r1, r2
    bd10:	900c      	str	r0, [sp, #48]	; 0x30
    bd12:	e6d7      	b.n	bac4 <_vfiprintf_r+0x214>
    bd14:	9b00      	ldr	r3, [sp, #0]
    bd16:	069b      	lsls	r3, r3, #26
    bd18:	d500      	bpl.n	bd1c <_vfiprintf_r+0x46c>
    bd1a:	e359      	b.n	c3d0 <_vfiprintf_r+0xb20>
    bd1c:	9a00      	ldr	r2, [sp, #0]
    bd1e:	06d2      	lsls	r2, r2, #27
    bd20:	d400      	bmi.n	bd24 <_vfiprintf_r+0x474>
    bd22:	e393      	b.n	c44c <_vfiprintf_r+0xb9c>
    bd24:	9807      	ldr	r0, [sp, #28]
    bd26:	9905      	ldr	r1, [sp, #20]
    bd28:	6803      	ldr	r3, [r0, #0]
    bd2a:	3004      	adds	r0, #4
    bd2c:	6019      	str	r1, [r3, #0]
    bd2e:	9007      	str	r0, [sp, #28]
    bd30:	e5ff      	b.n	b932 <_vfiprintf_r+0x82>
    bd32:	783b      	ldrb	r3, [r7, #0]
    bd34:	2b6c      	cmp	r3, #108	; 0x6c
    bd36:	d100      	bne.n	bd3a <_vfiprintf_r+0x48a>
    bd38:	e357      	b.n	c3ea <_vfiprintf_r+0xb3a>
    bd3a:	9800      	ldr	r0, [sp, #0]
    bd3c:	2210      	movs	r2, #16
    bd3e:	4310      	orrs	r0, r2
    bd40:	9000      	str	r0, [sp, #0]
    bd42:	e630      	b.n	b9a6 <_vfiprintf_r+0xf6>
    bd44:	9b00      	ldr	r3, [sp, #0]
    bd46:	4640      	mov	r0, r8
    bd48:	4303      	orrs	r3, r0
    bd4a:	9300      	str	r3, [sp, #0]
    bd4c:	783b      	ldrb	r3, [r7, #0]
    bd4e:	e62a      	b.n	b9a6 <_vfiprintf_r+0xf6>
    bd50:	4a7f      	ldr	r2, [pc, #508]	; (bf50 <_vfiprintf_r+0x6a0>)
    bd52:	9800      	ldr	r0, [sp, #0]
    bd54:	2120      	movs	r1, #32
    bd56:	920c      	str	r2, [sp, #48]	; 0x30
    bd58:	4001      	ands	r1, r0
    bd5a:	d19a      	bne.n	bc92 <_vfiprintf_r+0x3e2>
    bd5c:	9800      	ldr	r0, [sp, #0]
    bd5e:	2210      	movs	r2, #16
    bd60:	4002      	ands	r2, r0
    bd62:	d000      	beq.n	bd66 <_vfiprintf_r+0x4b6>
    bd64:	e31c      	b.n	c3a0 <_vfiprintf_r+0xaf0>
    bd66:	9800      	ldr	r0, [sp, #0]
    bd68:	2140      	movs	r1, #64	; 0x40
    bd6a:	4001      	ands	r1, r0
    bd6c:	d100      	bne.n	bd70 <_vfiprintf_r+0x4c0>
    bd6e:	e37a      	b.n	c466 <_vfiprintf_r+0xbb6>
    bd70:	9907      	ldr	r1, [sp, #28]
    bd72:	8809      	ldrh	r1, [r1, #0]
    bd74:	9209      	str	r2, [sp, #36]	; 0x24
    bd76:	9a07      	ldr	r2, [sp, #28]
    bd78:	3204      	adds	r2, #4
    bd7a:	9108      	str	r1, [sp, #32]
    bd7c:	9207      	str	r2, [sp, #28]
    bd7e:	e793      	b.n	bca8 <_vfiprintf_r+0x3f8>
    bd80:	4b70      	ldr	r3, [pc, #448]	; (bf44 <_vfiprintf_r+0x694>)
    bd82:	4650      	mov	r0, sl
    bd84:	446b      	add	r3, sp
    bd86:	7018      	strb	r0, [r3, #0]
    bd88:	783b      	ldrb	r3, [r7, #0]
    bd8a:	e60c      	b.n	b9a6 <_vfiprintf_r+0xf6>
    bd8c:	9800      	ldr	r0, [sp, #0]
    bd8e:	2301      	movs	r3, #1
    bd90:	4318      	orrs	r0, r3
    bd92:	9000      	str	r0, [sp, #0]
    bd94:	783b      	ldrb	r3, [r7, #0]
    bd96:	e606      	b.n	b9a6 <_vfiprintf_r+0xf6>
    bd98:	486a      	ldr	r0, [pc, #424]	; (bf44 <_vfiprintf_r+0x694>)
    bd9a:	4468      	add	r0, sp
    bd9c:	7803      	ldrb	r3, [r0, #0]
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d000      	beq.n	bda4 <_vfiprintf_r+0x4f4>
    bda2:	e31f      	b.n	c3e4 <_vfiprintf_r+0xb34>
    bda4:	2220      	movs	r2, #32
    bda6:	7002      	strb	r2, [r0, #0]
    bda8:	783b      	ldrb	r3, [r7, #0]
    bdaa:	e5fc      	b.n	b9a6 <_vfiprintf_r+0xf6>
    bdac:	1c1a      	adds	r2, r3, #0
    bdae:	2000      	movs	r0, #0
    bdb0:	3a30      	subs	r2, #48	; 0x30
    bdb2:	1c03      	adds	r3, r0, #0
    bdb4:	46a9      	mov	r9, r5
    bdb6:	009d      	lsls	r5, r3, #2
    bdb8:	18eb      	adds	r3, r5, r3
    bdba:	783d      	ldrb	r5, [r7, #0]
    bdbc:	005b      	lsls	r3, r3, #1
    bdbe:	18d3      	adds	r3, r2, r3
    bdc0:	1c2a      	adds	r2, r5, #0
    bdc2:	3a30      	subs	r2, #48	; 0x30
    bdc4:	3701      	adds	r7, #1
    bdc6:	2a09      	cmp	r2, #9
    bdc8:	d9f5      	bls.n	bdb6 <_vfiprintf_r+0x506>
    bdca:	1c18      	adds	r0, r3, #0
    bdcc:	9004      	str	r0, [sp, #16]
    bdce:	1c2b      	adds	r3, r5, #0
    bdd0:	464d      	mov	r5, r9
    bdd2:	e5e9      	b.n	b9a8 <_vfiprintf_r+0xf8>
    bdd4:	9800      	ldr	r0, [sp, #0]
    bdd6:	4662      	mov	r2, ip
    bdd8:	4310      	orrs	r0, r2
    bdda:	9000      	str	r0, [sp, #0]
    bddc:	783b      	ldrb	r3, [r7, #0]
    bdde:	e5e2      	b.n	b9a6 <_vfiprintf_r+0xf6>
    bde0:	783b      	ldrb	r3, [r7, #0]
    bde2:	3701      	adds	r7, #1
    bde4:	2b2a      	cmp	r3, #42	; 0x2a
    bde6:	d100      	bne.n	bdea <_vfiprintf_r+0x53a>
    bde8:	e398      	b.n	c51c <_vfiprintf_r+0xc6c>
    bdea:	1c1a      	adds	r2, r3, #0
    bdec:	3a30      	subs	r2, #48	; 0x30
    bdee:	2600      	movs	r6, #0
    bdf0:	2a09      	cmp	r2, #9
    bdf2:	d900      	bls.n	bdf6 <_vfiprintf_r+0x546>
    bdf4:	e5d8      	b.n	b9a8 <_vfiprintf_r+0xf8>
    bdf6:	00b3      	lsls	r3, r6, #2
    bdf8:	199e      	adds	r6, r3, r6
    bdfa:	783b      	ldrb	r3, [r7, #0]
    bdfc:	0076      	lsls	r6, r6, #1
    bdfe:	18b6      	adds	r6, r6, r2
    be00:	1c1a      	adds	r2, r3, #0
    be02:	3a30      	subs	r2, #48	; 0x30
    be04:	3701      	adds	r7, #1
    be06:	2a09      	cmp	r2, #9
    be08:	d9f5      	bls.n	bdf6 <_vfiprintf_r+0x546>
    be0a:	2e00      	cmp	r6, #0
    be0c:	db00      	blt.n	be10 <_vfiprintf_r+0x560>
    be0e:	e5cb      	b.n	b9a8 <_vfiprintf_r+0xf8>
    be10:	2601      	movs	r6, #1
    be12:	4276      	negs	r6, r6
    be14:	e5c8      	b.n	b9a8 <_vfiprintf_r+0xf8>
    be16:	1c2b      	adds	r3, r5, #0
    be18:	3308      	adds	r3, #8
    be1a:	484a      	ldr	r0, [pc, #296]	; (bf44 <_vfiprintf_r+0x694>)
    be1c:	4468      	add	r0, sp
    be1e:	7802      	ldrb	r2, [r0, #0]
    be20:	2a00      	cmp	r2, #0
    be22:	d00d      	beq.n	be40 <_vfiprintf_r+0x590>
    be24:	2201      	movs	r2, #1
    be26:	606a      	str	r2, [r5, #4]
    be28:	68a2      	ldr	r2, [r4, #8]
    be2a:	3201      	adds	r2, #1
    be2c:	6028      	str	r0, [r5, #0]
    be2e:	60a2      	str	r2, [r4, #8]
    be30:	6862      	ldr	r2, [r4, #4]
    be32:	3201      	adds	r2, #1
    be34:	6062      	str	r2, [r4, #4]
    be36:	2a07      	cmp	r2, #7
    be38:	dd00      	ble.n	be3c <_vfiprintf_r+0x58c>
    be3a:	e191      	b.n	c160 <_vfiprintf_r+0x8b0>
    be3c:	1c1d      	adds	r5, r3, #0
    be3e:	3308      	adds	r3, #8
    be40:	2100      	movs	r1, #0
    be42:	4589      	cmp	r9, r1
    be44:	d00f      	beq.n	be66 <_vfiprintf_r+0x5b6>
    be46:	4a41      	ldr	r2, [pc, #260]	; (bf4c <_vfiprintf_r+0x69c>)
    be48:	446a      	add	r2, sp
    be4a:	602a      	str	r2, [r5, #0]
    be4c:	2202      	movs	r2, #2
    be4e:	606a      	str	r2, [r5, #4]
    be50:	68a2      	ldr	r2, [r4, #8]
    be52:	3202      	adds	r2, #2
    be54:	60a2      	str	r2, [r4, #8]
    be56:	6862      	ldr	r2, [r4, #4]
    be58:	3201      	adds	r2, #1
    be5a:	6062      	str	r2, [r4, #4]
    be5c:	2a07      	cmp	r2, #7
    be5e:	dd00      	ble.n	be62 <_vfiprintf_r+0x5b2>
    be60:	e16f      	b.n	c142 <_vfiprintf_r+0x892>
    be62:	1c1d      	adds	r5, r3, #0
    be64:	3308      	adds	r3, #8
    be66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    be68:	2a80      	cmp	r2, #128	; 0x80
    be6a:	d100      	bne.n	be6e <_vfiprintf_r+0x5be>
    be6c:	e0e8      	b.n	c040 <_vfiprintf_r+0x790>
    be6e:	9906      	ldr	r1, [sp, #24]
    be70:	9a03      	ldr	r2, [sp, #12]
    be72:	1a8e      	subs	r6, r1, r2
    be74:	2e00      	cmp	r6, #0
    be76:	dd46      	ble.n	bf06 <_vfiprintf_r+0x656>
    be78:	2e10      	cmp	r6, #16
    be7a:	dc00      	bgt.n	be7e <_vfiprintf_r+0x5ce>
    be7c:	e2d1      	b.n	c422 <_vfiprintf_r+0xb72>
    be7e:	4b35      	ldr	r3, [pc, #212]	; (bf54 <_vfiprintf_r+0x6a4>)
    be80:	2010      	movs	r0, #16
    be82:	469a      	mov	sl, r3
    be84:	465a      	mov	r2, fp
    be86:	4680      	mov	r8, r0
    be88:	1c2b      	adds	r3, r5, #0
    be8a:	46bb      	mov	fp, r7
    be8c:	44d0      	add	r8, sl
    be8e:	4681      	mov	r9, r0
    be90:	9d01      	ldr	r5, [sp, #4]
    be92:	1c17      	adds	r7, r2, #0
    be94:	e005      	b.n	bea2 <_vfiprintf_r+0x5f2>
    be96:	3308      	adds	r3, #8
    be98:	1c1a      	adds	r2, r3, #0
    be9a:	3e10      	subs	r6, #16
    be9c:	3208      	adds	r2, #8
    be9e:	2e10      	cmp	r6, #16
    bea0:	dd1c      	ble.n	bedc <_vfiprintf_r+0x62c>
    bea2:	464a      	mov	r2, r9
    bea4:	605a      	str	r2, [r3, #4]
    bea6:	68a2      	ldr	r2, [r4, #8]
    bea8:	4641      	mov	r1, r8
    beaa:	3210      	adds	r2, #16
    beac:	6019      	str	r1, [r3, #0]
    beae:	60a2      	str	r2, [r4, #8]
    beb0:	6862      	ldr	r2, [r4, #4]
    beb2:	3201      	adds	r2, #1
    beb4:	6062      	str	r2, [r4, #4]
    beb6:	2a07      	cmp	r2, #7
    beb8:	dded      	ble.n	be96 <_vfiprintf_r+0x5e6>
    beba:	1c28      	adds	r0, r5, #0
    bebc:	1c39      	adds	r1, r7, #0
    bebe:	1c22      	adds	r2, r4, #0
    bec0:	f7ff fcb6 	bl	b830 <__sprint_r>
    bec4:	2800      	cmp	r0, #0
    bec6:	d000      	beq.n	beca <_vfiprintf_r+0x61a>
    bec8:	e11e      	b.n	c108 <_vfiprintf_r+0x858>
    beca:	2295      	movs	r2, #149	; 0x95
    becc:	2394      	movs	r3, #148	; 0x94
    bece:	00d2      	lsls	r2, r2, #3
    bed0:	00db      	lsls	r3, r3, #3
    bed2:	3e10      	subs	r6, #16
    bed4:	446a      	add	r2, sp
    bed6:	446b      	add	r3, sp
    bed8:	2e10      	cmp	r6, #16
    beda:	dce2      	bgt.n	bea2 <_vfiprintf_r+0x5f2>
    bedc:	1c1d      	adds	r5, r3, #0
    bede:	1c3b      	adds	r3, r7, #0
    bee0:	465f      	mov	r7, fp
    bee2:	469b      	mov	fp, r3
    bee4:	2010      	movs	r0, #16
    bee6:	1c03      	adds	r3, r0, #0
    bee8:	4453      	add	r3, sl
    beea:	602b      	str	r3, [r5, #0]
    beec:	68a3      	ldr	r3, [r4, #8]
    beee:	606e      	str	r6, [r5, #4]
    bef0:	18f6      	adds	r6, r6, r3
    bef2:	6863      	ldr	r3, [r4, #4]
    bef4:	3301      	adds	r3, #1
    bef6:	60a6      	str	r6, [r4, #8]
    bef8:	6063      	str	r3, [r4, #4]
    befa:	2b07      	cmp	r3, #7
    befc:	dd00      	ble.n	bf00 <_vfiprintf_r+0x650>
    befe:	e111      	b.n	c124 <_vfiprintf_r+0x874>
    bf00:	1c13      	adds	r3, r2, #0
    bf02:	3308      	adds	r3, #8
    bf04:	1c15      	adds	r5, r2, #0
    bf06:	9a03      	ldr	r2, [sp, #12]
    bf08:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bf0a:	606a      	str	r2, [r5, #4]
    bf0c:	6029      	str	r1, [r5, #0]
    bf0e:	68a2      	ldr	r2, [r4, #8]
    bf10:	9d03      	ldr	r5, [sp, #12]
    bf12:	1952      	adds	r2, r2, r5
    bf14:	60a2      	str	r2, [r4, #8]
    bf16:	6862      	ldr	r2, [r4, #4]
    bf18:	3201      	adds	r2, #1
    bf1a:	6062      	str	r2, [r4, #4]
    bf1c:	2a07      	cmp	r2, #7
    bf1e:	dd00      	ble.n	bf22 <_vfiprintf_r+0x672>
    bf20:	e0db      	b.n	c0da <_vfiprintf_r+0x82a>
    bf22:	9800      	ldr	r0, [sp, #0]
    bf24:	0740      	lsls	r0, r0, #29
    bf26:	d546      	bpl.n	bfb6 <_vfiprintf_r+0x706>
    bf28:	9904      	ldr	r1, [sp, #16]
    bf2a:	9a02      	ldr	r2, [sp, #8]
    bf2c:	1a8d      	subs	r5, r1, r2
    bf2e:	2d00      	cmp	r5, #0
    bf30:	dd41      	ble.n	bfb6 <_vfiprintf_r+0x706>
    bf32:	2d10      	cmp	r5, #16
    bf34:	dc00      	bgt.n	bf38 <_vfiprintf_r+0x688>
    bf36:	e2d6      	b.n	c4e6 <_vfiprintf_r+0xc36>
    bf38:	4906      	ldr	r1, [pc, #24]	; (bf54 <_vfiprintf_r+0x6a4>)
    bf3a:	46b8      	mov	r8, r7
    bf3c:	2610      	movs	r6, #16
    bf3e:	1c0f      	adds	r7, r1, #0
    bf40:	e00d      	b.n	bf5e <_vfiprintf_r+0x6ae>
    bf42:	46c0      	nop			; (mov r8, r8)
    bf44:	00000517 	.word	0x00000517
    bf48:	0000e91c 	.word	0x0000e91c
    bf4c:	00000514 	.word	0x00000514
    bf50:	0000e908 	.word	0x0000e908
    bf54:	0000e458 	.word	0x0000e458
    bf58:	3d10      	subs	r5, #16
    bf5a:	2d10      	cmp	r5, #16
    bf5c:	dd17      	ble.n	bf8e <_vfiprintf_r+0x6de>
    bf5e:	68a2      	ldr	r2, [r4, #8]
    bf60:	3210      	adds	r2, #16
    bf62:	601f      	str	r7, [r3, #0]
    bf64:	605e      	str	r6, [r3, #4]
    bf66:	60a2      	str	r2, [r4, #8]
    bf68:	6862      	ldr	r2, [r4, #4]
    bf6a:	3201      	adds	r2, #1
    bf6c:	6062      	str	r2, [r4, #4]
    bf6e:	3308      	adds	r3, #8
    bf70:	2a07      	cmp	r2, #7
    bf72:	ddf1      	ble.n	bf58 <_vfiprintf_r+0x6a8>
    bf74:	9801      	ldr	r0, [sp, #4]
    bf76:	4659      	mov	r1, fp
    bf78:	1c22      	adds	r2, r4, #0
    bf7a:	f7ff fc59 	bl	b830 <__sprint_r>
    bf7e:	2800      	cmp	r0, #0
    bf80:	d14c      	bne.n	c01c <_vfiprintf_r+0x76c>
    bf82:	2394      	movs	r3, #148	; 0x94
    bf84:	00db      	lsls	r3, r3, #3
    bf86:	3d10      	subs	r5, #16
    bf88:	446b      	add	r3, sp
    bf8a:	2d10      	cmp	r5, #16
    bf8c:	dce7      	bgt.n	bf5e <_vfiprintf_r+0x6ae>
    bf8e:	46ba      	mov	sl, r7
    bf90:	4647      	mov	r7, r8
    bf92:	4652      	mov	r2, sl
    bf94:	605d      	str	r5, [r3, #4]
    bf96:	601a      	str	r2, [r3, #0]
    bf98:	68a3      	ldr	r3, [r4, #8]
    bf9a:	18ed      	adds	r5, r5, r3
    bf9c:	6863      	ldr	r3, [r4, #4]
    bf9e:	3301      	adds	r3, #1
    bfa0:	60a5      	str	r5, [r4, #8]
    bfa2:	6063      	str	r3, [r4, #4]
    bfa4:	2b07      	cmp	r3, #7
    bfa6:	dd07      	ble.n	bfb8 <_vfiprintf_r+0x708>
    bfa8:	9801      	ldr	r0, [sp, #4]
    bfaa:	4659      	mov	r1, fp
    bfac:	1c22      	adds	r2, r4, #0
    bfae:	f7ff fc3f 	bl	b830 <__sprint_r>
    bfb2:	2800      	cmp	r0, #0
    bfb4:	d132      	bne.n	c01c <_vfiprintf_r+0x76c>
    bfb6:	68a5      	ldr	r5, [r4, #8]
    bfb8:	9b02      	ldr	r3, [sp, #8]
    bfba:	9804      	ldr	r0, [sp, #16]
    bfbc:	4283      	cmp	r3, r0
    bfbe:	da00      	bge.n	bfc2 <_vfiprintf_r+0x712>
    bfc0:	1c03      	adds	r3, r0, #0
    bfc2:	9905      	ldr	r1, [sp, #20]
    bfc4:	18c9      	adds	r1, r1, r3
    bfc6:	9105      	str	r1, [sp, #20]
    bfc8:	2d00      	cmp	r5, #0
    bfca:	d000      	beq.n	bfce <_vfiprintf_r+0x71e>
    bfcc:	e090      	b.n	c0f0 <_vfiprintf_r+0x840>
    bfce:	2200      	movs	r2, #0
    bfd0:	6062      	str	r2, [r4, #4]
    bfd2:	2594      	movs	r5, #148	; 0x94
    bfd4:	783b      	ldrb	r3, [r7, #0]
    bfd6:	00ed      	lsls	r5, r5, #3
    bfd8:	446d      	add	r5, sp
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d000      	beq.n	bfe0 <_vfiprintf_r+0x730>
    bfde:	e4ac      	b.n	b93a <_vfiprintf_r+0x8a>
    bfe0:	1c3e      	adds	r6, r7, #0
    bfe2:	783b      	ldrb	r3, [r7, #0]
    bfe4:	e4ca      	b.n	b97c <_vfiprintf_r+0xcc>
    bfe6:	2b00      	cmp	r3, #0
    bfe8:	d000      	beq.n	bfec <_vfiprintf_r+0x73c>
    bfea:	e08a      	b.n	c102 <_vfiprintf_r+0x852>
    bfec:	9900      	ldr	r1, [sp, #0]
    bfee:	07c9      	lsls	r1, r1, #31
    bff0:	d400      	bmi.n	bff4 <_vfiprintf_r+0x744>
    bff2:	e105      	b.n	c200 <_vfiprintf_r+0x950>
    bff4:	229c      	movs	r2, #156	; 0x9c
    bff6:	00d2      	lsls	r2, r2, #3
    bff8:	3327      	adds	r3, #39	; 0x27
    bffa:	446a      	add	r2, sp
    bffc:	2130      	movs	r1, #48	; 0x30
    bffe:	54d1      	strb	r1, [r2, r3]
    c000:	4bcc      	ldr	r3, [pc, #816]	; (c334 <_vfiprintf_r+0xa84>)
    c002:	446b      	add	r3, sp
    c004:	1ae2      	subs	r2, r4, r3
    c006:	9203      	str	r2, [sp, #12]
    c008:	930b      	str	r3, [sp, #44]	; 0x2c
    c00a:	e5a0      	b.n	bb4e <_vfiprintf_r+0x29e>
    c00c:	68a3      	ldr	r3, [r4, #8]
    c00e:	2b00      	cmp	r3, #0
    c010:	d004      	beq.n	c01c <_vfiprintf_r+0x76c>
    c012:	9801      	ldr	r0, [sp, #4]
    c014:	4659      	mov	r1, fp
    c016:	1c22      	adds	r2, r4, #0
    c018:	f7ff fc0a 	bl	b830 <__sprint_r>
    c01c:	465d      	mov	r5, fp
    c01e:	89ab      	ldrh	r3, [r5, #12]
    c020:	0658      	lsls	r0, r3, #25
    c022:	d502      	bpl.n	c02a <_vfiprintf_r+0x77a>
    c024:	2301      	movs	r3, #1
    c026:	425b      	negs	r3, r3
    c028:	9305      	str	r3, [sp, #20]
    c02a:	4bc3      	ldr	r3, [pc, #780]	; (c338 <_vfiprintf_r+0xa88>)
    c02c:	9805      	ldr	r0, [sp, #20]
    c02e:	449d      	add	sp, r3
    c030:	bc3c      	pop	{r2, r3, r4, r5}
    c032:	4690      	mov	r8, r2
    c034:	4699      	mov	r9, r3
    c036:	46a2      	mov	sl, r4
    c038:	46ab      	mov	fp, r5
    c03a:	bcf0      	pop	{r4, r5, r6, r7}
    c03c:	bc02      	pop	{r1}
    c03e:	4708      	bx	r1
    c040:	9804      	ldr	r0, [sp, #16]
    c042:	9902      	ldr	r1, [sp, #8]
    c044:	1a46      	subs	r6, r0, r1
    c046:	2e00      	cmp	r6, #0
    c048:	dc00      	bgt.n	c04c <_vfiprintf_r+0x79c>
    c04a:	e1d8      	b.n	c3fe <_vfiprintf_r+0xb4e>
    c04c:	2e10      	cmp	r6, #16
    c04e:	dc00      	bgt.n	c052 <_vfiprintf_r+0x7a2>
    c050:	e258      	b.n	c504 <_vfiprintf_r+0xc54>
    c052:	4aba      	ldr	r2, [pc, #744]	; (c33c <_vfiprintf_r+0xa8c>)
    c054:	2310      	movs	r3, #16
    c056:	4692      	mov	sl, r2
    c058:	4698      	mov	r8, r3
    c05a:	465a      	mov	r2, fp
    c05c:	4699      	mov	r9, r3
    c05e:	46bb      	mov	fp, r7
    c060:	1c2b      	adds	r3, r5, #0
    c062:	44d0      	add	r8, sl
    c064:	9d01      	ldr	r5, [sp, #4]
    c066:	1c17      	adds	r7, r2, #0
    c068:	e005      	b.n	c076 <_vfiprintf_r+0x7c6>
    c06a:	3308      	adds	r3, #8
    c06c:	1c1a      	adds	r2, r3, #0
    c06e:	3e10      	subs	r6, #16
    c070:	3208      	adds	r2, #8
    c072:	2e10      	cmp	r6, #16
    c074:	dd1b      	ble.n	c0ae <_vfiprintf_r+0x7fe>
    c076:	68a2      	ldr	r2, [r4, #8]
    c078:	4640      	mov	r0, r8
    c07a:	3210      	adds	r2, #16
    c07c:	4649      	mov	r1, r9
    c07e:	6018      	str	r0, [r3, #0]
    c080:	6059      	str	r1, [r3, #4]
    c082:	60a2      	str	r2, [r4, #8]
    c084:	6862      	ldr	r2, [r4, #4]
    c086:	3201      	adds	r2, #1
    c088:	6062      	str	r2, [r4, #4]
    c08a:	2a07      	cmp	r2, #7
    c08c:	dded      	ble.n	c06a <_vfiprintf_r+0x7ba>
    c08e:	1c28      	adds	r0, r5, #0
    c090:	1c39      	adds	r1, r7, #0
    c092:	1c22      	adds	r2, r4, #0
    c094:	f7ff fbcc 	bl	b830 <__sprint_r>
    c098:	2800      	cmp	r0, #0
    c09a:	d135      	bne.n	c108 <_vfiprintf_r+0x858>
    c09c:	2295      	movs	r2, #149	; 0x95
    c09e:	2394      	movs	r3, #148	; 0x94
    c0a0:	00d2      	lsls	r2, r2, #3
    c0a2:	00db      	lsls	r3, r3, #3
    c0a4:	3e10      	subs	r6, #16
    c0a6:	446a      	add	r2, sp
    c0a8:	446b      	add	r3, sp
    c0aa:	2e10      	cmp	r6, #16
    c0ac:	dce3      	bgt.n	c076 <_vfiprintf_r+0x7c6>
    c0ae:	1c1d      	adds	r5, r3, #0
    c0b0:	1c3b      	adds	r3, r7, #0
    c0b2:	465f      	mov	r7, fp
    c0b4:	469b      	mov	fp, r3
    c0b6:	2010      	movs	r0, #16
    c0b8:	1c03      	adds	r3, r0, #0
    c0ba:	4453      	add	r3, sl
    c0bc:	602b      	str	r3, [r5, #0]
    c0be:	68a3      	ldr	r3, [r4, #8]
    c0c0:	18f3      	adds	r3, r6, r3
    c0c2:	606e      	str	r6, [r5, #4]
    c0c4:	60a3      	str	r3, [r4, #8]
    c0c6:	6863      	ldr	r3, [r4, #4]
    c0c8:	3301      	adds	r3, #1
    c0ca:	6063      	str	r3, [r4, #4]
    c0cc:	2b07      	cmp	r3, #7
    c0ce:	dd00      	ble.n	c0d2 <_vfiprintf_r+0x822>
    c0d0:	e198      	b.n	c404 <_vfiprintf_r+0xb54>
    c0d2:	1c13      	adds	r3, r2, #0
    c0d4:	3308      	adds	r3, #8
    c0d6:	1c15      	adds	r5, r2, #0
    c0d8:	e6c9      	b.n	be6e <_vfiprintf_r+0x5be>
    c0da:	9801      	ldr	r0, [sp, #4]
    c0dc:	4659      	mov	r1, fp
    c0de:	1c22      	adds	r2, r4, #0
    c0e0:	f7ff fba6 	bl	b830 <__sprint_r>
    c0e4:	2800      	cmp	r0, #0
    c0e6:	d199      	bne.n	c01c <_vfiprintf_r+0x76c>
    c0e8:	2394      	movs	r3, #148	; 0x94
    c0ea:	00db      	lsls	r3, r3, #3
    c0ec:	446b      	add	r3, sp
    c0ee:	e718      	b.n	bf22 <_vfiprintf_r+0x672>
    c0f0:	9801      	ldr	r0, [sp, #4]
    c0f2:	4659      	mov	r1, fp
    c0f4:	1c22      	adds	r2, r4, #0
    c0f6:	f7ff fb9b 	bl	b830 <__sprint_r>
    c0fa:	2800      	cmp	r0, #0
    c0fc:	d100      	bne.n	c100 <_vfiprintf_r+0x850>
    c0fe:	e766      	b.n	bfce <_vfiprintf_r+0x71e>
    c100:	e78c      	b.n	c01c <_vfiprintf_r+0x76c>
    c102:	9103      	str	r1, [sp, #12]
    c104:	940b      	str	r4, [sp, #44]	; 0x2c
    c106:	e522      	b.n	bb4e <_vfiprintf_r+0x29e>
    c108:	46bb      	mov	fp, r7
    c10a:	e787      	b.n	c01c <_vfiprintf_r+0x76c>
    c10c:	9801      	ldr	r0, [sp, #4]
    c10e:	4659      	mov	r1, fp
    c110:	1c22      	adds	r2, r4, #0
    c112:	f7ff fb8d 	bl	b830 <__sprint_r>
    c116:	2800      	cmp	r0, #0
    c118:	d000      	beq.n	c11c <_vfiprintf_r+0x86c>
    c11a:	e77f      	b.n	c01c <_vfiprintf_r+0x76c>
    c11c:	2594      	movs	r5, #148	; 0x94
    c11e:	00ed      	lsls	r5, r5, #3
    c120:	446d      	add	r5, sp
    c122:	e426      	b.n	b972 <_vfiprintf_r+0xc2>
    c124:	9801      	ldr	r0, [sp, #4]
    c126:	4659      	mov	r1, fp
    c128:	1c22      	adds	r2, r4, #0
    c12a:	f7ff fb81 	bl	b830 <__sprint_r>
    c12e:	2800      	cmp	r0, #0
    c130:	d000      	beq.n	c134 <_vfiprintf_r+0x884>
    c132:	e773      	b.n	c01c <_vfiprintf_r+0x76c>
    c134:	2395      	movs	r3, #149	; 0x95
    c136:	2594      	movs	r5, #148	; 0x94
    c138:	00db      	lsls	r3, r3, #3
    c13a:	00ed      	lsls	r5, r5, #3
    c13c:	446b      	add	r3, sp
    c13e:	446d      	add	r5, sp
    c140:	e6e1      	b.n	bf06 <_vfiprintf_r+0x656>
    c142:	9801      	ldr	r0, [sp, #4]
    c144:	4659      	mov	r1, fp
    c146:	1c22      	adds	r2, r4, #0
    c148:	f7ff fb72 	bl	b830 <__sprint_r>
    c14c:	2800      	cmp	r0, #0
    c14e:	d000      	beq.n	c152 <_vfiprintf_r+0x8a2>
    c150:	e764      	b.n	c01c <_vfiprintf_r+0x76c>
    c152:	2395      	movs	r3, #149	; 0x95
    c154:	2594      	movs	r5, #148	; 0x94
    c156:	00db      	lsls	r3, r3, #3
    c158:	00ed      	lsls	r5, r5, #3
    c15a:	446b      	add	r3, sp
    c15c:	446d      	add	r5, sp
    c15e:	e682      	b.n	be66 <_vfiprintf_r+0x5b6>
    c160:	9801      	ldr	r0, [sp, #4]
    c162:	4659      	mov	r1, fp
    c164:	1c22      	adds	r2, r4, #0
    c166:	f7ff fb63 	bl	b830 <__sprint_r>
    c16a:	2800      	cmp	r0, #0
    c16c:	d000      	beq.n	c170 <_vfiprintf_r+0x8c0>
    c16e:	e755      	b.n	c01c <_vfiprintf_r+0x76c>
    c170:	2395      	movs	r3, #149	; 0x95
    c172:	2594      	movs	r5, #148	; 0x94
    c174:	00db      	lsls	r3, r3, #3
    c176:	00ed      	lsls	r5, r5, #3
    c178:	446b      	add	r3, sp
    c17a:	446d      	add	r5, sp
    c17c:	e660      	b.n	be40 <_vfiprintf_r+0x590>
    c17e:	465b      	mov	r3, fp
    c180:	89d9      	ldrh	r1, [r3, #14]
    c182:	040b      	lsls	r3, r1, #16
    c184:	141b      	asrs	r3, r3, #16
    c186:	2b00      	cmp	r3, #0
    c188:	da01      	bge.n	c18e <_vfiprintf_r+0x8de>
    c18a:	f7ff fbc3 	bl	b914 <_vfiprintf_r+0x64>
    c18e:	4658      	mov	r0, fp
    c190:	2302      	movs	r3, #2
    c192:	2487      	movs	r4, #135	; 0x87
    c194:	439a      	bics	r2, r3
    c196:	00e4      	lsls	r4, r4, #3
    c198:	6e43      	ldr	r3, [r0, #100]	; 0x64
    c19a:	446c      	add	r4, sp
    c19c:	6663      	str	r3, [r4, #100]	; 0x64
    c19e:	69c3      	ldr	r3, [r0, #28]
    c1a0:	61e3      	str	r3, [r4, #28]
    c1a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c1a4:	81a2      	strh	r2, [r4, #12]
    c1a6:	81e1      	strh	r1, [r4, #14]
    c1a8:	6263      	str	r3, [r4, #36]	; 0x24
    c1aa:	2487      	movs	r4, #135	; 0x87
    c1ac:	00e4      	lsls	r4, r4, #3
    c1ae:	2380      	movs	r3, #128	; 0x80
    c1b0:	446c      	add	r4, sp
    c1b2:	00db      	lsls	r3, r3, #3
    c1b4:	a90e      	add	r1, sp, #56	; 0x38
    c1b6:	60a3      	str	r3, [r4, #8]
    c1b8:	6163      	str	r3, [r4, #20]
    c1ba:	2300      	movs	r3, #0
    c1bc:	6021      	str	r1, [r4, #0]
    c1be:	6121      	str	r1, [r4, #16]
    c1c0:	61a3      	str	r3, [r4, #24]
    c1c2:	9801      	ldr	r0, [sp, #4]
    c1c4:	1c21      	adds	r1, r4, #0
    c1c6:	1c2a      	adds	r2, r5, #0
    c1c8:	9b07      	ldr	r3, [sp, #28]
    c1ca:	f7ff fb71 	bl	b8b0 <_vfiprintf_r>
    c1ce:	9005      	str	r0, [sp, #20]
    c1d0:	2800      	cmp	r0, #0
    c1d2:	db06      	blt.n	c1e2 <_vfiprintf_r+0x932>
    c1d4:	9801      	ldr	r0, [sp, #4]
    c1d6:	1c21      	adds	r1, r4, #0
    c1d8:	f7f8 f9fa 	bl	45d0 <_fflush_r>
    c1dc:	2800      	cmp	r0, #0
    c1de:	d000      	beq.n	c1e2 <_vfiprintf_r+0x932>
    c1e0:	e198      	b.n	c514 <_vfiprintf_r+0xc64>
    c1e2:	89a2      	ldrh	r2, [r4, #12]
    c1e4:	2340      	movs	r3, #64	; 0x40
    c1e6:	421a      	tst	r2, r3
    c1e8:	d100      	bne.n	c1ec <_vfiprintf_r+0x93c>
    c1ea:	e71e      	b.n	c02a <_vfiprintf_r+0x77a>
    c1ec:	465d      	mov	r5, fp
    c1ee:	89aa      	ldrh	r2, [r5, #12]
    c1f0:	4658      	mov	r0, fp
    c1f2:	4313      	orrs	r3, r2
    c1f4:	8183      	strh	r3, [r0, #12]
    c1f6:	e718      	b.n	c02a <_vfiprintf_r+0x77a>
    c1f8:	f7f8 fade 	bl	47b8 <__sinit>
    c1fc:	f7ff fb6b 	bl	b8d6 <_vfiprintf_r+0x26>
    c200:	9303      	str	r3, [sp, #12]
    c202:	940b      	str	r4, [sp, #44]	; 0x2c
    c204:	e4a3      	b.n	bb4e <_vfiprintf_r+0x29e>
    c206:	200f      	movs	r0, #15
    c208:	940b      	str	r4, [sp, #44]	; 0x2c
    c20a:	9a08      	ldr	r2, [sp, #32]
    c20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c20e:	4684      	mov	ip, r0
    c210:	1c21      	adds	r1, r4, #0
    c212:	46a8      	mov	r8, r5
    c214:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    c216:	4660      	mov	r0, ip
    c218:	4010      	ands	r0, r2
    c21a:	5c28      	ldrb	r0, [r5, r0]
    c21c:	3901      	subs	r1, #1
    c21e:	0915      	lsrs	r5, r2, #4
    c220:	46a9      	mov	r9, r5
    c222:	7008      	strb	r0, [r1, #0]
    c224:	0718      	lsls	r0, r3, #28
    c226:	1c05      	adds	r5, r0, #0
    c228:	4648      	mov	r0, r9
    c22a:	4305      	orrs	r5, r0
    c22c:	0918      	lsrs	r0, r3, #4
    c22e:	1c2a      	adds	r2, r5, #0
    c230:	1c03      	adds	r3, r0, #0
    c232:	4305      	orrs	r5, r0
    c234:	d1ee      	bne.n	c214 <_vfiprintf_r+0x964>
    c236:	1a60      	subs	r0, r4, r1
    c238:	910b      	str	r1, [sp, #44]	; 0x2c
    c23a:	4645      	mov	r5, r8
    c23c:	9208      	str	r2, [sp, #32]
    c23e:	9309      	str	r3, [sp, #36]	; 0x24
    c240:	9003      	str	r0, [sp, #12]
    c242:	e484      	b.n	bb4e <_vfiprintf_r+0x29e>
    c244:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c246:	2b00      	cmp	r3, #0
    c248:	d100      	bne.n	c24c <_vfiprintf_r+0x99c>
    c24a:	e07e      	b.n	c34a <_vfiprintf_r+0xa9a>
    c24c:	46a9      	mov	r9, r5
    c24e:	46b0      	mov	r8, r6
    c250:	940b      	str	r4, [sp, #44]	; 0x2c
    c252:	9d08      	ldr	r5, [sp, #32]
    c254:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c256:	46ba      	mov	sl, r7
    c258:	1c27      	adds	r7, r4, #0
    c25a:	1c28      	adds	r0, r5, #0
    c25c:	1c31      	adds	r1, r6, #0
    c25e:	220a      	movs	r2, #10
    c260:	2300      	movs	r3, #0
    c262:	f001 fd0b 	bl	dc7c <____aeabi_uldivmod_from_thumb>
    c266:	3f01      	subs	r7, #1
    c268:	3230      	adds	r2, #48	; 0x30
    c26a:	703a      	strb	r2, [r7, #0]
    c26c:	1c28      	adds	r0, r5, #0
    c26e:	1c31      	adds	r1, r6, #0
    c270:	220a      	movs	r2, #10
    c272:	2300      	movs	r3, #0
    c274:	f001 fd02 	bl	dc7c <____aeabi_uldivmod_from_thumb>
    c278:	1c02      	adds	r2, r0, #0
    c27a:	1c05      	adds	r5, r0, #0
    c27c:	1c0e      	adds	r6, r1, #0
    c27e:	430a      	orrs	r2, r1
    c280:	d1eb      	bne.n	c25a <_vfiprintf_r+0x9aa>
    c282:	970b      	str	r7, [sp, #44]	; 0x2c
    c284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c286:	1ae3      	subs	r3, r4, r3
    c288:	9508      	str	r5, [sp, #32]
    c28a:	9609      	str	r6, [sp, #36]	; 0x24
    c28c:	4657      	mov	r7, sl
    c28e:	464d      	mov	r5, r9
    c290:	4646      	mov	r6, r8
    c292:	9303      	str	r3, [sp, #12]
    c294:	e45b      	b.n	bb4e <_vfiprintf_r+0x29e>
    c296:	9a00      	ldr	r2, [sp, #0]
    c298:	06d2      	lsls	r2, r2, #27
    c29a:	d468      	bmi.n	c36e <_vfiprintf_r+0xabe>
    c29c:	9900      	ldr	r1, [sp, #0]
    c29e:	0649      	lsls	r1, r1, #25
    c2a0:	d565      	bpl.n	c36e <_vfiprintf_r+0xabe>
    c2a2:	9a07      	ldr	r2, [sp, #28]
    c2a4:	2300      	movs	r3, #0
    c2a6:	5ed3      	ldrsh	r3, [r2, r3]
    c2a8:	9308      	str	r3, [sp, #32]
    c2aa:	17db      	asrs	r3, r3, #31
    c2ac:	9309      	str	r3, [sp, #36]	; 0x24
    c2ae:	9b07      	ldr	r3, [sp, #28]
    c2b0:	3304      	adds	r3, #4
    c2b2:	9307      	str	r3, [sp, #28]
    c2b4:	e46e      	b.n	bb94 <_vfiprintf_r+0x2e4>
    c2b6:	9800      	ldr	r0, [sp, #0]
    c2b8:	2310      	movs	r3, #16
    c2ba:	4003      	ands	r3, r0
    c2bc:	d000      	beq.n	c2c0 <_vfiprintf_r+0xa10>
    c2be:	e082      	b.n	c3c6 <_vfiprintf_r+0xb16>
    c2c0:	9800      	ldr	r0, [sp, #0]
    c2c2:	2240      	movs	r2, #64	; 0x40
    c2c4:	4002      	ands	r2, r0
    c2c6:	d100      	bne.n	c2ca <_vfiprintf_r+0xa1a>
    c2c8:	e0b3      	b.n	c432 <_vfiprintf_r+0xb82>
    c2ca:	9907      	ldr	r1, [sp, #28]
    c2cc:	8809      	ldrh	r1, [r1, #0]
    c2ce:	9309      	str	r3, [sp, #36]	; 0x24
    c2d0:	9108      	str	r1, [sp, #32]
    c2d2:	9a07      	ldr	r2, [sp, #28]
    c2d4:	3204      	adds	r2, #4
    c2d6:	1e4b      	subs	r3, r1, #1
    c2d8:	4199      	sbcs	r1, r3
    c2da:	9207      	str	r2, [sp, #28]
    c2dc:	2301      	movs	r3, #1
    c2de:	f7ff fbf1 	bl	bac4 <_vfiprintf_r+0x214>
    c2e2:	9800      	ldr	r0, [sp, #0]
    c2e4:	2210      	movs	r2, #16
    c2e6:	4002      	ands	r2, r0
    c2e8:	d162      	bne.n	c3b0 <_vfiprintf_r+0xb00>
    c2ea:	9800      	ldr	r0, [sp, #0]
    c2ec:	2340      	movs	r3, #64	; 0x40
    c2ee:	4003      	ands	r3, r0
    c2f0:	d100      	bne.n	c2f4 <_vfiprintf_r+0xa44>
    c2f2:	e0c1      	b.n	c478 <_vfiprintf_r+0xbc8>
    c2f4:	9907      	ldr	r1, [sp, #28]
    c2f6:	8809      	ldrh	r1, [r1, #0]
    c2f8:	9108      	str	r1, [sp, #32]
    c2fa:	1e4b      	subs	r3, r1, #1
    c2fc:	4199      	sbcs	r1, r3
    c2fe:	9b07      	ldr	r3, [sp, #28]
    c300:	3304      	adds	r3, #4
    c302:	9307      	str	r3, [sp, #28]
    c304:	9209      	str	r2, [sp, #36]	; 0x24
    c306:	1c13      	adds	r3, r2, #0
    c308:	f7ff fbdc 	bl	bac4 <_vfiprintf_r+0x214>
    c30c:	9801      	ldr	r0, [sp, #4]
    c30e:	4659      	mov	r1, fp
    c310:	1c22      	adds	r2, r4, #0
    c312:	f7ff fa8d 	bl	b830 <__sprint_r>
    c316:	2800      	cmp	r0, #0
    c318:	d000      	beq.n	c31c <_vfiprintf_r+0xa6c>
    c31a:	e67f      	b.n	c01c <_vfiprintf_r+0x76c>
    c31c:	2395      	movs	r3, #149	; 0x95
    c31e:	2594      	movs	r5, #148	; 0x94
    c320:	00db      	lsls	r3, r3, #3
    c322:	00ed      	lsls	r5, r5, #3
    c324:	446b      	add	r3, sp
    c326:	446d      	add	r5, sp
    c328:	e577      	b.n	be1a <_vfiprintf_r+0x56a>
    c32a:	783b      	ldrb	r3, [r7, #0]
    c32c:	9207      	str	r2, [sp, #28]
    c32e:	f7ff fb3a 	bl	b9a6 <_vfiprintf_r+0xf6>
    c332:	46c0      	nop			; (mov r8, r8)
    c334:	00000507 	.word	0x00000507
    c338:	0000051c 	.word	0x0000051c
    c33c:	0000e458 	.word	0x0000e458
    c340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c342:	1aa2      	subs	r2, r4, r2
    c344:	9203      	str	r2, [sp, #12]
    c346:	f7ff fc02 	bl	bb4e <_vfiprintf_r+0x29e>
    c34a:	9808      	ldr	r0, [sp, #32]
    c34c:	2809      	cmp	r0, #9
    c34e:	d900      	bls.n	c352 <_vfiprintf_r+0xaa2>
    c350:	e77c      	b.n	c24c <_vfiprintf_r+0x99c>
    c352:	229c      	movs	r2, #156	; 0x9c
    c354:	1c01      	adds	r1, r0, #0
    c356:	00d2      	lsls	r2, r2, #3
    c358:	3130      	adds	r1, #48	; 0x30
    c35a:	3327      	adds	r3, #39	; 0x27
    c35c:	446a      	add	r2, sp
    c35e:	54d1      	strb	r1, [r2, r3]
    c360:	4b75      	ldr	r3, [pc, #468]	; (c538 <_vfiprintf_r+0xc88>)
    c362:	446b      	add	r3, sp
    c364:	1ae1      	subs	r1, r4, r3
    c366:	9103      	str	r1, [sp, #12]
    c368:	930b      	str	r3, [sp, #44]	; 0x2c
    c36a:	f7ff fbf0 	bl	bb4e <_vfiprintf_r+0x29e>
    c36e:	9807      	ldr	r0, [sp, #28]
    c370:	6803      	ldr	r3, [r0, #0]
    c372:	9308      	str	r3, [sp, #32]
    c374:	17db      	asrs	r3, r3, #31
    c376:	9309      	str	r3, [sp, #36]	; 0x24
    c378:	9909      	ldr	r1, [sp, #36]	; 0x24
    c37a:	3004      	adds	r0, #4
    c37c:	9007      	str	r0, [sp, #28]
    c37e:	2900      	cmp	r1, #0
    c380:	db01      	blt.n	c386 <_vfiprintf_r+0xad6>
    c382:	f7ff fc0c 	bl	bb9e <_vfiprintf_r+0x2ee>
    c386:	9a08      	ldr	r2, [sp, #32]
    c388:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c38a:	2100      	movs	r1, #0
    c38c:	4250      	negs	r0, r2
    c38e:	4199      	sbcs	r1, r3
    c390:	9008      	str	r0, [sp, #32]
    c392:	9109      	str	r1, [sp, #36]	; 0x24
    c394:	4869      	ldr	r0, [pc, #420]	; (c53c <_vfiprintf_r+0xc8c>)
    c396:	232d      	movs	r3, #45	; 0x2d
    c398:	4468      	add	r0, sp
    c39a:	7003      	strb	r3, [r0, #0]
    c39c:	f7ff fbff 	bl	bb9e <_vfiprintf_r+0x2ee>
    c3a0:	9a07      	ldr	r2, [sp, #28]
    c3a2:	9807      	ldr	r0, [sp, #28]
    c3a4:	6812      	ldr	r2, [r2, #0]
    c3a6:	3004      	adds	r0, #4
    c3a8:	9208      	str	r2, [sp, #32]
    c3aa:	9109      	str	r1, [sp, #36]	; 0x24
    c3ac:	9007      	str	r0, [sp, #28]
    c3ae:	e47b      	b.n	bca8 <_vfiprintf_r+0x3f8>
    c3b0:	9907      	ldr	r1, [sp, #28]
    c3b2:	6809      	ldr	r1, [r1, #0]
    c3b4:	9108      	str	r1, [sp, #32]
    c3b6:	1e4a      	subs	r2, r1, #1
    c3b8:	4191      	sbcs	r1, r2
    c3ba:	9a07      	ldr	r2, [sp, #28]
    c3bc:	3204      	adds	r2, #4
    c3be:	9309      	str	r3, [sp, #36]	; 0x24
    c3c0:	9207      	str	r2, [sp, #28]
    c3c2:	f7ff fb7f 	bl	bac4 <_vfiprintf_r+0x214>
    c3c6:	9907      	ldr	r1, [sp, #28]
    c3c8:	6809      	ldr	r1, [r1, #0]
    c3ca:	9209      	str	r2, [sp, #36]	; 0x24
    c3cc:	9108      	str	r1, [sp, #32]
    c3ce:	e780      	b.n	c2d2 <_vfiprintf_r+0xa22>
    c3d0:	9807      	ldr	r0, [sp, #28]
    c3d2:	9905      	ldr	r1, [sp, #20]
    c3d4:	6803      	ldr	r3, [r0, #0]
    c3d6:	17ca      	asrs	r2, r1, #31
    c3d8:	3004      	adds	r0, #4
    c3da:	6019      	str	r1, [r3, #0]
    c3dc:	605a      	str	r2, [r3, #4]
    c3de:	9007      	str	r0, [sp, #28]
    c3e0:	f7ff faa7 	bl	b932 <_vfiprintf_r+0x82>
    c3e4:	783b      	ldrb	r3, [r7, #0]
    c3e6:	f7ff fade 	bl	b9a6 <_vfiprintf_r+0xf6>
    c3ea:	9a00      	ldr	r2, [sp, #0]
    c3ec:	3b4c      	subs	r3, #76	; 0x4c
    c3ee:	431a      	orrs	r2, r3
    c3f0:	9200      	str	r2, [sp, #0]
    c3f2:	3701      	adds	r7, #1
    c3f4:	783b      	ldrb	r3, [r7, #0]
    c3f6:	f7ff fad6 	bl	b9a6 <_vfiprintf_r+0xf6>
    c3fa:	46ab      	mov	fp, r5
    c3fc:	e60e      	b.n	c01c <_vfiprintf_r+0x76c>
    c3fe:	1c2b      	adds	r3, r5, #0
    c400:	3308      	adds	r3, #8
    c402:	e534      	b.n	be6e <_vfiprintf_r+0x5be>
    c404:	9801      	ldr	r0, [sp, #4]
    c406:	4659      	mov	r1, fp
    c408:	1c22      	adds	r2, r4, #0
    c40a:	f7ff fa11 	bl	b830 <__sprint_r>
    c40e:	2800      	cmp	r0, #0
    c410:	d000      	beq.n	c414 <_vfiprintf_r+0xb64>
    c412:	e603      	b.n	c01c <_vfiprintf_r+0x76c>
    c414:	2395      	movs	r3, #149	; 0x95
    c416:	2594      	movs	r5, #148	; 0x94
    c418:	00db      	lsls	r3, r3, #3
    c41a:	00ed      	lsls	r5, r5, #3
    c41c:	446b      	add	r3, sp
    c41e:	446d      	add	r5, sp
    c420:	e525      	b.n	be6e <_vfiprintf_r+0x5be>
    c422:	1c1a      	adds	r2, r3, #0
    c424:	4b46      	ldr	r3, [pc, #280]	; (c540 <_vfiprintf_r+0xc90>)
    c426:	469a      	mov	sl, r3
    c428:	e55c      	b.n	bee4 <_vfiprintf_r+0x634>
    c42a:	2200      	movs	r2, #0
    c42c:	9206      	str	r2, [sp, #24]
    c42e:	f7ff fb8f 	bl	bb50 <_vfiprintf_r+0x2a0>
    c432:	9b07      	ldr	r3, [sp, #28]
    c434:	9807      	ldr	r0, [sp, #28]
    c436:	681b      	ldr	r3, [r3, #0]
    c438:	3004      	adds	r0, #4
    c43a:	1c19      	adds	r1, r3, #0
    c43c:	9308      	str	r3, [sp, #32]
    c43e:	9209      	str	r2, [sp, #36]	; 0x24
    c440:	1e4b      	subs	r3, r1, #1
    c442:	4199      	sbcs	r1, r3
    c444:	9007      	str	r0, [sp, #28]
    c446:	2301      	movs	r3, #1
    c448:	f7ff fb3c 	bl	bac4 <_vfiprintf_r+0x214>
    c44c:	9a00      	ldr	r2, [sp, #0]
    c44e:	0652      	lsls	r2, r2, #25
    c450:	d530      	bpl.n	c4b4 <_vfiprintf_r+0xc04>
    c452:	9807      	ldr	r0, [sp, #28]
    c454:	4669      	mov	r1, sp
    c456:	2214      	movs	r2, #20
    c458:	6803      	ldr	r3, [r0, #0]
    c45a:	5a51      	ldrh	r1, [r2, r1]
    c45c:	3004      	adds	r0, #4
    c45e:	8019      	strh	r1, [r3, #0]
    c460:	9007      	str	r0, [sp, #28]
    c462:	f7ff fa66 	bl	b932 <_vfiprintf_r+0x82>
    c466:	9807      	ldr	r0, [sp, #28]
    c468:	6800      	ldr	r0, [r0, #0]
    c46a:	9109      	str	r1, [sp, #36]	; 0x24
    c46c:	9907      	ldr	r1, [sp, #28]
    c46e:	3104      	adds	r1, #4
    c470:	9008      	str	r0, [sp, #32]
    c472:	9107      	str	r1, [sp, #28]
    c474:	f7ff fc18 	bl	bca8 <_vfiprintf_r+0x3f8>
    c478:	9807      	ldr	r0, [sp, #28]
    c47a:	6800      	ldr	r0, [r0, #0]
    c47c:	1c01      	adds	r1, r0, #0
    c47e:	1e4a      	subs	r2, r1, #1
    c480:	4191      	sbcs	r1, r2
    c482:	9a07      	ldr	r2, [sp, #28]
    c484:	3204      	adds	r2, #4
    c486:	9008      	str	r0, [sp, #32]
    c488:	9309      	str	r3, [sp, #36]	; 0x24
    c48a:	9207      	str	r2, [sp, #28]
    c48c:	f7ff fb1a 	bl	bac4 <_vfiprintf_r+0x214>
    c490:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c492:	f7f9 f8a1 	bl	55d8 <strlen>
    c496:	2200      	movs	r2, #0
    c498:	9003      	str	r0, [sp, #12]
    c49a:	9206      	str	r2, [sp, #24]
    c49c:	f7ff fb58 	bl	bb50 <_vfiprintf_r+0x2a0>
    c4a0:	9603      	str	r6, [sp, #12]
    c4a2:	2e06      	cmp	r6, #6
    c4a4:	d919      	bls.n	c4da <_vfiprintf_r+0xc2a>
    c4a6:	2106      	movs	r1, #6
    c4a8:	9103      	str	r1, [sp, #12]
    c4aa:	9102      	str	r1, [sp, #8]
    c4ac:	4b25      	ldr	r3, [pc, #148]	; (c544 <_vfiprintf_r+0xc94>)
    c4ae:	930b      	str	r3, [sp, #44]	; 0x2c
    c4b0:	f7ff fa8d 	bl	b9ce <_vfiprintf_r+0x11e>
    c4b4:	9a07      	ldr	r2, [sp, #28]
    c4b6:	9805      	ldr	r0, [sp, #20]
    c4b8:	6813      	ldr	r3, [r2, #0]
    c4ba:	3204      	adds	r2, #4
    c4bc:	6018      	str	r0, [r3, #0]
    c4be:	9207      	str	r2, [sp, #28]
    c4c0:	f7ff fa37 	bl	b932 <_vfiprintf_r+0x82>
    c4c4:	491e      	ldr	r1, [pc, #120]	; (c540 <_vfiprintf_r+0xc90>)
    c4c6:	1c2a      	adds	r2, r5, #0
    c4c8:	3208      	adds	r2, #8
    c4ca:	468a      	mov	sl, r1
    c4cc:	f7ff facb 	bl	ba66 <_vfiprintf_r+0x1b6>
    c4d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c4d2:	1a20      	subs	r0, r4, r0
    c4d4:	9003      	str	r0, [sp, #12]
    c4d6:	f7ff fb3a 	bl	bb4e <_vfiprintf_r+0x29e>
    c4da:	9a03      	ldr	r2, [sp, #12]
    c4dc:	43d3      	mvns	r3, r2
    c4de:	17db      	asrs	r3, r3, #31
    c4e0:	401a      	ands	r2, r3
    c4e2:	9202      	str	r2, [sp, #8]
    c4e4:	e7e2      	b.n	c4ac <_vfiprintf_r+0xbfc>
    c4e6:	4816      	ldr	r0, [pc, #88]	; (c540 <_vfiprintf_r+0xc90>)
    c4e8:	4682      	mov	sl, r0
    c4ea:	e552      	b.n	bf92 <_vfiprintf_r+0x6e2>
    c4ec:	9801      	ldr	r0, [sp, #4]
    c4ee:	4659      	mov	r1, fp
    c4f0:	f7fb ffc6 	bl	8480 <__swsetup_r>
    c4f4:	2800      	cmp	r0, #0
    c4f6:	d000      	beq.n	c4fa <_vfiprintf_r+0xc4a>
    c4f8:	e594      	b.n	c024 <_vfiprintf_r+0x774>
    c4fa:	4659      	mov	r1, fp
    c4fc:	898a      	ldrh	r2, [r1, #12]
    c4fe:	1c13      	adds	r3, r2, #0
    c500:	f7ff fa02 	bl	b908 <_vfiprintf_r+0x58>
    c504:	1c1a      	adds	r2, r3, #0
    c506:	4b0e      	ldr	r3, [pc, #56]	; (c540 <_vfiprintf_r+0xc90>)
    c508:	469a      	mov	sl, r3
    c50a:	e5d4      	b.n	c0b6 <_vfiprintf_r+0x806>
    c50c:	9603      	str	r6, [sp, #12]
    c50e:	9006      	str	r0, [sp, #24]
    c510:	f7ff fb1e 	bl	bb50 <_vfiprintf_r+0x2a0>
    c514:	2301      	movs	r3, #1
    c516:	425b      	negs	r3, r3
    c518:	9305      	str	r3, [sp, #20]
    c51a:	e662      	b.n	c1e2 <_vfiprintf_r+0x932>
    c51c:	9b07      	ldr	r3, [sp, #28]
    c51e:	9a07      	ldr	r2, [sp, #28]
    c520:	681e      	ldr	r6, [r3, #0]
    c522:	3204      	adds	r2, #4
    c524:	2e00      	cmp	r6, #0
    c526:	db00      	blt.n	c52a <_vfiprintf_r+0xc7a>
    c528:	e6ff      	b.n	c32a <_vfiprintf_r+0xa7a>
    c52a:	2601      	movs	r6, #1
    c52c:	783b      	ldrb	r3, [r7, #0]
    c52e:	4276      	negs	r6, r6
    c530:	9207      	str	r2, [sp, #28]
    c532:	f7ff fa38 	bl	b9a6 <_vfiprintf_r+0xf6>
    c536:	46c0      	nop			; (mov r8, r8)
    c538:	00000507 	.word	0x00000507
    c53c:	00000517 	.word	0x00000517
    c540:	0000e458 	.word	0x0000e458
    c544:	0000e930 	.word	0x0000e930

0000c548 <vfiprintf>:
    c548:	b538      	push	{r3, r4, r5, lr}
    c54a:	1c13      	adds	r3, r2, #0
    c54c:	4a05      	ldr	r2, [pc, #20]	; (c564 <vfiprintf+0x1c>)
    c54e:	1c05      	adds	r5, r0, #0
    c550:	1c0c      	adds	r4, r1, #0
    c552:	6810      	ldr	r0, [r2, #0]
    c554:	1c29      	adds	r1, r5, #0
    c556:	1c22      	adds	r2, r4, #0
    c558:	f7ff f9aa 	bl	b8b0 <_vfiprintf_r>
    c55c:	bc38      	pop	{r3, r4, r5}
    c55e:	bc02      	pop	{r1}
    c560:	4708      	bx	r1
    c562:	46c0      	nop			; (mov r8, r8)
    c564:	40000000 	.word	0x40000000

0000c568 <_calloc_r>:
    c568:	b510      	push	{r4, lr}
    c56a:	4351      	muls	r1, r2
    c56c:	f7f8 fbac 	bl	4cc8 <_malloc_r>
    c570:	1e04      	subs	r4, r0, #0
    c572:	d01f      	beq.n	c5b4 <_calloc_r+0x4c>
    c574:	1c23      	adds	r3, r4, #0
    c576:	3b08      	subs	r3, #8
    c578:	685a      	ldr	r2, [r3, #4]
    c57a:	2303      	movs	r3, #3
    c57c:	439a      	bics	r2, r3
    c57e:	3a04      	subs	r2, #4
    c580:	2a24      	cmp	r2, #36	; 0x24
    c582:	d81b      	bhi.n	c5bc <_calloc_r+0x54>
    c584:	1c23      	adds	r3, r4, #0
    c586:	2a13      	cmp	r2, #19
    c588:	d90f      	bls.n	c5aa <_calloc_r+0x42>
    c58a:	2100      	movs	r1, #0
    c58c:	1c20      	adds	r0, r4, #0
    c58e:	c002      	stmia	r0!, {r1}
    c590:	6061      	str	r1, [r4, #4]
    c592:	1d03      	adds	r3, r0, #4
    c594:	2a1b      	cmp	r2, #27
    c596:	d908      	bls.n	c5aa <_calloc_r+0x42>
    c598:	6041      	str	r1, [r0, #4]
    c59a:	1d18      	adds	r0, r3, #4
    c59c:	6059      	str	r1, [r3, #4]
    c59e:	3308      	adds	r3, #8
    c5a0:	2a24      	cmp	r2, #36	; 0x24
    c5a2:	d102      	bne.n	c5aa <_calloc_r+0x42>
    c5a4:	6041      	str	r1, [r0, #4]
    c5a6:	6059      	str	r1, [r3, #4]
    c5a8:	3308      	adds	r3, #8
    c5aa:	2100      	movs	r1, #0
    c5ac:	1c1a      	adds	r2, r3, #0
    c5ae:	c202      	stmia	r2!, {r1}
    c5b0:	6059      	str	r1, [r3, #4]
    c5b2:	6051      	str	r1, [r2, #4]
    c5b4:	1c20      	adds	r0, r4, #0
    c5b6:	bc10      	pop	{r4}
    c5b8:	bc02      	pop	{r1}
    c5ba:	4708      	bx	r1
    c5bc:	1c20      	adds	r0, r4, #0
    c5be:	2100      	movs	r1, #0
    c5c0:	f7f8 fe86 	bl	52d0 <memset>
    c5c4:	e7f6      	b.n	c5b4 <_calloc_r+0x4c>
    c5c6:	46c0      	nop			; (mov r8, r8)

0000c5c8 <_fputwc_r>:
    c5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5ca:	464f      	mov	r7, r9
    c5cc:	4646      	mov	r6, r8
    c5ce:	b4c0      	push	{r6, r7}
    c5d0:	1c14      	adds	r4, r2, #0
    c5d2:	2380      	movs	r3, #128	; 0x80
    c5d4:	8992      	ldrh	r2, [r2, #12]
    c5d6:	019b      	lsls	r3, r3, #6
    c5d8:	b083      	sub	sp, #12
    c5da:	4681      	mov	r9, r0
    c5dc:	4688      	mov	r8, r1
    c5de:	421a      	tst	r2, r3
    c5e0:	d104      	bne.n	c5ec <_fputwc_r+0x24>
    c5e2:	431a      	orrs	r2, r3
    c5e4:	81a2      	strh	r2, [r4, #12]
    c5e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c5e8:	4313      	orrs	r3, r2
    c5ea:	6663      	str	r3, [r4, #100]	; 0x64
    c5ec:	f7fd fa14 	bl	9a18 <__locale_mb_cur_max>
    c5f0:	2801      	cmp	r0, #1
    c5f2:	d044      	beq.n	c67e <_fputwc_r+0xb6>
    c5f4:	af01      	add	r7, sp, #4
    c5f6:	1c23      	adds	r3, r4, #0
    c5f8:	335c      	adds	r3, #92	; 0x5c
    c5fa:	4648      	mov	r0, r9
    c5fc:	1c39      	adds	r1, r7, #0
    c5fe:	4642      	mov	r2, r8
    c600:	f000 f8fe 	bl	c800 <_wcrtomb_r>
    c604:	1c06      	adds	r6, r0, #0
    c606:	1c43      	adds	r3, r0, #1
    c608:	d023      	beq.n	c652 <_fputwc_r+0x8a>
    c60a:	2800      	cmp	r0, #0
    c60c:	d02c      	beq.n	c668 <_fputwc_r+0xa0>
    c60e:	2500      	movs	r5, #0
    c610:	e008      	b.n	c624 <_fputwc_r+0x5c>
    c612:	6823      	ldr	r3, [r4, #0]
    c614:	5d7a      	ldrb	r2, [r7, r5]
    c616:	701a      	strb	r2, [r3, #0]
    c618:	6823      	ldr	r3, [r4, #0]
    c61a:	3301      	adds	r3, #1
    c61c:	6023      	str	r3, [r4, #0]
    c61e:	3501      	adds	r5, #1
    c620:	42b5      	cmp	r5, r6
    c622:	d221      	bcs.n	c668 <_fputwc_r+0xa0>
    c624:	68a3      	ldr	r3, [r4, #8]
    c626:	3b01      	subs	r3, #1
    c628:	60a3      	str	r3, [r4, #8]
    c62a:	2b00      	cmp	r3, #0
    c62c:	daf1      	bge.n	c612 <_fputwc_r+0x4a>
    c62e:	69a2      	ldr	r2, [r4, #24]
    c630:	4293      	cmp	r3, r2
    c632:	db1b      	blt.n	c66c <_fputwc_r+0xa4>
    c634:	6823      	ldr	r3, [r4, #0]
    c636:	5d7a      	ldrb	r2, [r7, r5]
    c638:	701a      	strb	r2, [r3, #0]
    c63a:	6823      	ldr	r3, [r4, #0]
    c63c:	7819      	ldrb	r1, [r3, #0]
    c63e:	290a      	cmp	r1, #10
    c640:	d015      	beq.n	c66e <_fputwc_r+0xa6>
    c642:	3301      	adds	r3, #1
    c644:	6023      	str	r3, [r4, #0]
    c646:	2200      	movs	r2, #0
    c648:	2a00      	cmp	r2, #0
    c64a:	d0e8      	beq.n	c61e <_fputwc_r+0x56>
    c64c:	2001      	movs	r0, #1
    c64e:	4240      	negs	r0, r0
    c650:	e003      	b.n	c65a <_fputwc_r+0x92>
    c652:	89a3      	ldrh	r3, [r4, #12]
    c654:	2240      	movs	r2, #64	; 0x40
    c656:	4313      	orrs	r3, r2
    c658:	81a3      	strh	r3, [r4, #12]
    c65a:	b003      	add	sp, #12
    c65c:	bc0c      	pop	{r2, r3}
    c65e:	4690      	mov	r8, r2
    c660:	4699      	mov	r9, r3
    c662:	bcf0      	pop	{r4, r5, r6, r7}
    c664:	bc02      	pop	{r1}
    c666:	4708      	bx	r1
    c668:	4640      	mov	r0, r8
    c66a:	e7f6      	b.n	c65a <_fputwc_r+0x92>
    c66c:	5d79      	ldrb	r1, [r7, r5]
    c66e:	1c22      	adds	r2, r4, #0
    c670:	4648      	mov	r0, r9
    c672:	f7fb fe95 	bl	83a0 <__swbuf_r>
    c676:	1c42      	adds	r2, r0, #1
    c678:	4253      	negs	r3, r2
    c67a:	415a      	adcs	r2, r3
    c67c:	e7e4      	b.n	c648 <_fputwc_r+0x80>
    c67e:	23ff      	movs	r3, #255	; 0xff
    c680:	4598      	cmp	r8, r3
    c682:	d8b7      	bhi.n	c5f4 <_fputwc_r+0x2c>
    c684:	3bff      	subs	r3, #255	; 0xff
    c686:	4598      	cmp	r8, r3
    c688:	d0b4      	beq.n	c5f4 <_fputwc_r+0x2c>
    c68a:	af01      	add	r7, sp, #4
    c68c:	4643      	mov	r3, r8
    c68e:	703b      	strb	r3, [r7, #0]
    c690:	1c06      	adds	r6, r0, #0
    c692:	e7bc      	b.n	c60e <_fputwc_r+0x46>

0000c694 <fputwc>:
    c694:	b570      	push	{r4, r5, r6, lr}
    c696:	4c09      	ldr	r4, [pc, #36]	; (c6bc <fputwc+0x28>)
    c698:	1c06      	adds	r6, r0, #0
    c69a:	6820      	ldr	r0, [r4, #0]
    c69c:	1c0d      	adds	r5, r1, #0
    c69e:	2800      	cmp	r0, #0
    c6a0:	d005      	beq.n	c6ae <fputwc+0x1a>
    c6a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    c6a4:	2b00      	cmp	r3, #0
    c6a6:	d102      	bne.n	c6ae <fputwc+0x1a>
    c6a8:	f7f8 f886 	bl	47b8 <__sinit>
    c6ac:	6820      	ldr	r0, [r4, #0]
    c6ae:	1c31      	adds	r1, r6, #0
    c6b0:	1c2a      	adds	r2, r5, #0
    c6b2:	f7ff ff89 	bl	c5c8 <_fputwc_r>
    c6b6:	bc70      	pop	{r4, r5, r6}
    c6b8:	bc02      	pop	{r1}
    c6ba:	4708      	bx	r1
    c6bc:	40000000 	.word	0x40000000

0000c6c0 <_isatty_r>:
    c6c0:	b538      	push	{r3, r4, r5, lr}
    c6c2:	4c08      	ldr	r4, [pc, #32]	; (c6e4 <_isatty_r+0x24>)
    c6c4:	2300      	movs	r3, #0
    c6c6:	1c05      	adds	r5, r0, #0
    c6c8:	6023      	str	r3, [r4, #0]
    c6ca:	1c08      	adds	r0, r1, #0
    c6cc:	f7f5 fa86 	bl	1bdc <_isatty>
    c6d0:	1c43      	adds	r3, r0, #1
    c6d2:	d002      	beq.n	c6da <_isatty_r+0x1a>
    c6d4:	bc38      	pop	{r3, r4, r5}
    c6d6:	bc02      	pop	{r1}
    c6d8:	4708      	bx	r1
    c6da:	6823      	ldr	r3, [r4, #0]
    c6dc:	2b00      	cmp	r3, #0
    c6de:	d0f9      	beq.n	c6d4 <_isatty_r+0x14>
    c6e0:	602b      	str	r3, [r5, #0]
    c6e2:	e7f7      	b.n	c6d4 <_isatty_r+0x14>
    c6e4:	40000b8c 	.word	0x40000b8c

0000c6e8 <cleanup_glue>:
    c6e8:	b538      	push	{r3, r4, r5, lr}
    c6ea:	1c0c      	adds	r4, r1, #0
    c6ec:	6809      	ldr	r1, [r1, #0]
    c6ee:	1c05      	adds	r5, r0, #0
    c6f0:	2900      	cmp	r1, #0
    c6f2:	d001      	beq.n	c6f8 <cleanup_glue+0x10>
    c6f4:	f7ff fff8 	bl	c6e8 <cleanup_glue>
    c6f8:	1c28      	adds	r0, r5, #0
    c6fa:	1c21      	adds	r1, r4, #0
    c6fc:	f7f8 f99a 	bl	4a34 <_free_r>
    c700:	bc38      	pop	{r3, r4, r5}
    c702:	bc01      	pop	{r0}
    c704:	4700      	bx	r0
    c706:	46c0      	nop			; (mov r8, r8)

0000c708 <_reclaim_reent>:
    c708:	b570      	push	{r4, r5, r6, lr}
    c70a:	4b28      	ldr	r3, [pc, #160]	; (c7ac <_reclaim_reent+0xa4>)
    c70c:	681b      	ldr	r3, [r3, #0]
    c70e:	1c05      	adds	r5, r0, #0
    c710:	4298      	cmp	r0, r3
    c712:	d03a      	beq.n	c78a <_reclaim_reent+0x82>
    c714:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    c716:	2b00      	cmp	r3, #0
    c718:	d016      	beq.n	c748 <_reclaim_reent+0x40>
    c71a:	2200      	movs	r2, #0
    c71c:	1c16      	adds	r6, r2, #0
    c71e:	0092      	lsls	r2, r2, #2
    c720:	5899      	ldr	r1, [r3, r2]
    c722:	2900      	cmp	r1, #0
    c724:	d101      	bne.n	c72a <_reclaim_reent+0x22>
    c726:	e007      	b.n	c738 <_reclaim_reent+0x30>
    c728:	1c21      	adds	r1, r4, #0
    c72a:	680c      	ldr	r4, [r1, #0]
    c72c:	1c28      	adds	r0, r5, #0
    c72e:	f7f8 f981 	bl	4a34 <_free_r>
    c732:	2c00      	cmp	r4, #0
    c734:	d1f8      	bne.n	c728 <_reclaim_reent+0x20>
    c736:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    c738:	3601      	adds	r6, #1
    c73a:	1c32      	adds	r2, r6, #0
    c73c:	2e20      	cmp	r6, #32
    c73e:	d1ee      	bne.n	c71e <_reclaim_reent+0x16>
    c740:	1c28      	adds	r0, r5, #0
    c742:	1c19      	adds	r1, r3, #0
    c744:	f7f8 f976 	bl	4a34 <_free_r>
    c748:	6c29      	ldr	r1, [r5, #64]	; 0x40
    c74a:	2900      	cmp	r1, #0
    c74c:	d002      	beq.n	c754 <_reclaim_reent+0x4c>
    c74e:	1c28      	adds	r0, r5, #0
    c750:	f7f8 f970 	bl	4a34 <_free_r>
    c754:	23a4      	movs	r3, #164	; 0xa4
    c756:	005b      	lsls	r3, r3, #1
    c758:	58e9      	ldr	r1, [r5, r3]
    c75a:	2900      	cmp	r1, #0
    c75c:	d00c      	beq.n	c778 <_reclaim_reent+0x70>
    c75e:	1c2e      	adds	r6, r5, #0
    c760:	364d      	adds	r6, #77	; 0x4d
    c762:	36ff      	adds	r6, #255	; 0xff
    c764:	42b1      	cmp	r1, r6
    c766:	d101      	bne.n	c76c <_reclaim_reent+0x64>
    c768:	e006      	b.n	c778 <_reclaim_reent+0x70>
    c76a:	1c21      	adds	r1, r4, #0
    c76c:	680c      	ldr	r4, [r1, #0]
    c76e:	1c28      	adds	r0, r5, #0
    c770:	f7f8 f960 	bl	4a34 <_free_r>
    c774:	42a6      	cmp	r6, r4
    c776:	d1f8      	bne.n	c76a <_reclaim_reent+0x62>
    c778:	6d69      	ldr	r1, [r5, #84]	; 0x54
    c77a:	2900      	cmp	r1, #0
    c77c:	d002      	beq.n	c784 <_reclaim_reent+0x7c>
    c77e:	1c28      	adds	r0, r5, #0
    c780:	f7f8 f958 	bl	4a34 <_free_r>
    c784:	6bab      	ldr	r3, [r5, #56]	; 0x38
    c786:	2b00      	cmp	r3, #0
    c788:	d102      	bne.n	c790 <_reclaim_reent+0x88>
    c78a:	bc70      	pop	{r4, r5, r6}
    c78c:	bc01      	pop	{r0}
    c78e:	4700      	bx	r0
    c790:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    c792:	1c28      	adds	r0, r5, #0
    c794:	f000 f832 	bl	c7fc <_wrapup_reent+0x4c>
    c798:	23b8      	movs	r3, #184	; 0xb8
    c79a:	009b      	lsls	r3, r3, #2
    c79c:	58e9      	ldr	r1, [r5, r3]
    c79e:	2900      	cmp	r1, #0
    c7a0:	d0f3      	beq.n	c78a <_reclaim_reent+0x82>
    c7a2:	1c28      	adds	r0, r5, #0
    c7a4:	f7ff ffa0 	bl	c6e8 <cleanup_glue>
    c7a8:	e7ef      	b.n	c78a <_reclaim_reent+0x82>
    c7aa:	46c0      	nop			; (mov r8, r8)
    c7ac:	40000000 	.word	0x40000000

0000c7b0 <_wrapup_reent>:
    c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7b2:	1e07      	subs	r7, r0, #0
    c7b4:	d01c      	beq.n	c7f0 <_wrapup_reent+0x40>
    c7b6:	23a4      	movs	r3, #164	; 0xa4
    c7b8:	005b      	lsls	r3, r3, #1
    c7ba:	58fe      	ldr	r6, [r7, r3]
    c7bc:	2e00      	cmp	r6, #0
    c7be:	d00e      	beq.n	c7de <_wrapup_reent+0x2e>
    c7c0:	6873      	ldr	r3, [r6, #4]
    c7c2:	1e5c      	subs	r4, r3, #1
    c7c4:	d408      	bmi.n	c7d8 <_wrapup_reent+0x28>
    c7c6:	1c5d      	adds	r5, r3, #1
    c7c8:	00ad      	lsls	r5, r5, #2
    c7ca:	1975      	adds	r5, r6, r5
    c7cc:	682b      	ldr	r3, [r5, #0]
    c7ce:	f000 f815 	bl	c7fc <_wrapup_reent+0x4c>
    c7d2:	3d04      	subs	r5, #4
    c7d4:	3c01      	subs	r4, #1
    c7d6:	d5f9      	bpl.n	c7cc <_wrapup_reent+0x1c>
    c7d8:	6836      	ldr	r6, [r6, #0]
    c7da:	2e00      	cmp	r6, #0
    c7dc:	d1f0      	bne.n	c7c0 <_wrapup_reent+0x10>
    c7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    c7e0:	2b00      	cmp	r3, #0
    c7e2:	d002      	beq.n	c7ea <_wrapup_reent+0x3a>
    c7e4:	1c38      	adds	r0, r7, #0
    c7e6:	f000 f809 	bl	c7fc <_wrapup_reent+0x4c>
    c7ea:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c7ec:	bc01      	pop	{r0}
    c7ee:	4700      	bx	r0
    c7f0:	4b01      	ldr	r3, [pc, #4]	; (c7f8 <_wrapup_reent+0x48>)
    c7f2:	681f      	ldr	r7, [r3, #0]
    c7f4:	e7df      	b.n	c7b6 <_wrapup_reent+0x6>
    c7f6:	46c0      	nop			; (mov r8, r8)
    c7f8:	40000000 	.word	0x40000000
    c7fc:	4718      	bx	r3
    c7fe:	46c0      	nop			; (mov r8, r8)

0000c800 <_wcrtomb_r>:
    c800:	b5f0      	push	{r4, r5, r6, r7, lr}
    c802:	4647      	mov	r7, r8
    c804:	b480      	push	{r7}
    c806:	b086      	sub	sp, #24
    c808:	1c05      	adds	r5, r0, #0
    c80a:	1c0c      	adds	r4, r1, #0
    c80c:	1c17      	adds	r7, r2, #0
    c80e:	1c1e      	adds	r6, r3, #0
    c810:	2900      	cmp	r1, #0
    c812:	d017      	beq.n	c844 <_wcrtomb_r+0x44>
    c814:	4b11      	ldr	r3, [pc, #68]	; (c85c <_wcrtomb_r+0x5c>)
    c816:	681b      	ldr	r3, [r3, #0]
    c818:	4698      	mov	r8, r3
    c81a:	f7fd f8f9 	bl	9a10 <__locale_charset>
    c81e:	9600      	str	r6, [sp, #0]
    c820:	1c03      	adds	r3, r0, #0
    c822:	1c21      	adds	r1, r4, #0
    c824:	1c28      	adds	r0, r5, #0
    c826:	1c3a      	adds	r2, r7, #0
    c828:	f000 f855 	bl	c8d6 <wcrtomb+0x76>
    c82c:	1c43      	adds	r3, r0, #1
    c82e:	d103      	bne.n	c838 <_wcrtomb_r+0x38>
    c830:	2300      	movs	r3, #0
    c832:	6033      	str	r3, [r6, #0]
    c834:	338a      	adds	r3, #138	; 0x8a
    c836:	602b      	str	r3, [r5, #0]
    c838:	b006      	add	sp, #24
    c83a:	bc04      	pop	{r2}
    c83c:	4690      	mov	r8, r2
    c83e:	bcf0      	pop	{r4, r5, r6, r7}
    c840:	bc02      	pop	{r1}
    c842:	4708      	bx	r1
    c844:	4b05      	ldr	r3, [pc, #20]	; (c85c <_wcrtomb_r+0x5c>)
    c846:	681f      	ldr	r7, [r3, #0]
    c848:	f7fd f8e2 	bl	9a10 <__locale_charset>
    c84c:	9600      	str	r6, [sp, #0]
    c84e:	1c03      	adds	r3, r0, #0
    c850:	a903      	add	r1, sp, #12
    c852:	1c28      	adds	r0, r5, #0
    c854:	1c22      	adds	r2, r4, #0
    c856:	f000 f83d 	bl	c8d4 <wcrtomb+0x74>
    c85a:	e7e7      	b.n	c82c <_wcrtomb_r+0x2c>
    c85c:	400008bc 	.word	0x400008bc

0000c860 <wcrtomb>:
    c860:	b5f0      	push	{r4, r5, r6, r7, lr}
    c862:	464f      	mov	r7, r9
    c864:	4646      	mov	r6, r8
    c866:	b4c0      	push	{r6, r7}
    c868:	b087      	sub	sp, #28
    c86a:	1c04      	adds	r4, r0, #0
    c86c:	1c0f      	adds	r7, r1, #0
    c86e:	1c16      	adds	r6, r2, #0
    c870:	2800      	cmp	r0, #0
    c872:	d01c      	beq.n	c8ae <wcrtomb+0x4e>
    c874:	4b15      	ldr	r3, [pc, #84]	; (c8cc <wcrtomb+0x6c>)
    c876:	4d16      	ldr	r5, [pc, #88]	; (c8d0 <wcrtomb+0x70>)
    c878:	681b      	ldr	r3, [r3, #0]
    c87a:	4699      	mov	r9, r3
    c87c:	682b      	ldr	r3, [r5, #0]
    c87e:	4698      	mov	r8, r3
    c880:	f7fd f8c6 	bl	9a10 <__locale_charset>
    c884:	9600      	str	r6, [sp, #0]
    c886:	1c03      	adds	r3, r0, #0
    c888:	1c21      	adds	r1, r4, #0
    c88a:	4640      	mov	r0, r8
    c88c:	1c3a      	adds	r2, r7, #0
    c88e:	f000 f823 	bl	c8d8 <wcrtomb+0x78>
    c892:	1c43      	adds	r3, r0, #1
    c894:	d104      	bne.n	c8a0 <wcrtomb+0x40>
    c896:	2300      	movs	r3, #0
    c898:	6033      	str	r3, [r6, #0]
    c89a:	682b      	ldr	r3, [r5, #0]
    c89c:	228a      	movs	r2, #138	; 0x8a
    c89e:	601a      	str	r2, [r3, #0]
    c8a0:	b007      	add	sp, #28
    c8a2:	bc0c      	pop	{r2, r3}
    c8a4:	4690      	mov	r8, r2
    c8a6:	4699      	mov	r9, r3
    c8a8:	bcf0      	pop	{r4, r5, r6, r7}
    c8aa:	bc02      	pop	{r1}
    c8ac:	4708      	bx	r1
    c8ae:	4b07      	ldr	r3, [pc, #28]	; (c8cc <wcrtomb+0x6c>)
    c8b0:	4d07      	ldr	r5, [pc, #28]	; (c8d0 <wcrtomb+0x70>)
    c8b2:	681b      	ldr	r3, [r3, #0]
    c8b4:	682f      	ldr	r7, [r5, #0]
    c8b6:	4698      	mov	r8, r3
    c8b8:	f7fd f8aa 	bl	9a10 <__locale_charset>
    c8bc:	9600      	str	r6, [sp, #0]
    c8be:	1c03      	adds	r3, r0, #0
    c8c0:	a903      	add	r1, sp, #12
    c8c2:	1c38      	adds	r0, r7, #0
    c8c4:	1c22      	adds	r2, r4, #0
    c8c6:	f000 f806 	bl	c8d6 <wcrtomb+0x76>
    c8ca:	e7e2      	b.n	c892 <wcrtomb+0x32>
    c8cc:	400008bc 	.word	0x400008bc
    c8d0:	40000000 	.word	0x40000000
    c8d4:	4738      	bx	r7
    c8d6:	4740      	bx	r8
    c8d8:	4748      	bx	r9
    c8da:	46c0      	nop			; (mov r8, r8)

0000c8dc <__ascii_wctomb>:
    c8dc:	b500      	push	{lr}
    c8de:	1c03      	adds	r3, r0, #0
    c8e0:	1e08      	subs	r0, r1, #0
    c8e2:	d003      	beq.n	c8ec <__ascii_wctomb+0x10>
    c8e4:	2aff      	cmp	r2, #255	; 0xff
    c8e6:	d803      	bhi.n	c8f0 <__ascii_wctomb+0x14>
    c8e8:	7002      	strb	r2, [r0, #0]
    c8ea:	2001      	movs	r0, #1
    c8ec:	bc02      	pop	{r1}
    c8ee:	4708      	bx	r1
    c8f0:	228a      	movs	r2, #138	; 0x8a
    c8f2:	2001      	movs	r0, #1
    c8f4:	601a      	str	r2, [r3, #0]
    c8f6:	4240      	negs	r0, r0
    c8f8:	e7f8      	b.n	c8ec <__ascii_wctomb+0x10>
    c8fa:	46c0      	nop			; (mov r8, r8)

0000c8fc <_wctomb_r>:
    c8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8fe:	4647      	mov	r7, r8
    c900:	b480      	push	{r7}
    c902:	1c1e      	adds	r6, r3, #0
    c904:	4b0a      	ldr	r3, [pc, #40]	; (c930 <_wctomb_r+0x34>)
    c906:	681b      	ldr	r3, [r3, #0]
    c908:	b082      	sub	sp, #8
    c90a:	4698      	mov	r8, r3
    c90c:	1c05      	adds	r5, r0, #0
    c90e:	1c17      	adds	r7, r2, #0
    c910:	1c0c      	adds	r4, r1, #0
    c912:	f7fd f87d 	bl	9a10 <__locale_charset>
    c916:	9600      	str	r6, [sp, #0]
    c918:	1c03      	adds	r3, r0, #0
    c91a:	1c3a      	adds	r2, r7, #0
    c91c:	1c28      	adds	r0, r5, #0
    c91e:	1c21      	adds	r1, r4, #0
    c920:	f000 f808 	bl	c934 <_wctomb_r+0x38>
    c924:	b002      	add	sp, #8
    c926:	bc04      	pop	{r2}
    c928:	4690      	mov	r8, r2
    c92a:	bcf0      	pop	{r4, r5, r6, r7}
    c92c:	bc02      	pop	{r1}
    c92e:	4708      	bx	r1
    c930:	400008bc 	.word	0x400008bc
    c934:	4740      	bx	r8
    c936:	46c0      	nop			; (mov r8, r8)

0000c938 <__aeabi_drsub>:
    c938:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    c93c:	ea000000 	b	c944 <__adddf3>

0000c940 <__aeabi_dsub>:
    c940:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

0000c944 <__adddf3>:
    c944:	e92d4030 	push	{r4, r5, lr}
    c948:	e1a04081 	lsl	r4, r1, #1
    c94c:	e1a05083 	lsl	r5, r3, #1
    c950:	e1340005 	teq	r4, r5
    c954:	01300002 	teqeq	r0, r2
    c958:	1194c000 	orrsne	ip, r4, r0
    c95c:	1195c002 	orrsne	ip, r5, r2
    c960:	11f0cac4 	mvnsne	ip, r4, asr #21
    c964:	11f0cac5 	mvnsne	ip, r5, asr #21
    c968:	0a00008c 	beq	cba0 <__adddf3+0x25c>
    c96c:	e1a04aa4 	lsr	r4, r4, #21
    c970:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    c974:	b2655000 	rsblt	r5, r5, #0
    c978:	da000006 	ble	c998 <__adddf3+0x54>
    c97c:	e0844005 	add	r4, r4, r5
    c980:	e0202002 	eor	r2, r0, r2
    c984:	e0213003 	eor	r3, r1, r3
    c988:	e0220000 	eor	r0, r2, r0
    c98c:	e0231001 	eor	r1, r3, r1
    c990:	e0202002 	eor	r2, r0, r2
    c994:	e0213003 	eor	r3, r1, r3
    c998:	e3550036 	cmp	r5, #54	; 0x36
    c99c:	88bd4030 	pophi	{r4, r5, lr}
    c9a0:	812fff1e 	bxhi	lr
    c9a4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    c9a8:	e1a01601 	lsl	r1, r1, #12
    c9ac:	e3a0c601 	mov	ip, #1048576	; 0x100000
    c9b0:	e18c1621 	orr	r1, ip, r1, lsr #12
    c9b4:	0a000001 	beq	c9c0 <__adddf3+0x7c>
    c9b8:	e2700000 	rsbs	r0, r0, #0
    c9bc:	e2e11000 	rsc	r1, r1, #0
    c9c0:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    c9c4:	e1a03603 	lsl	r3, r3, #12
    c9c8:	e18c3623 	orr	r3, ip, r3, lsr #12
    c9cc:	0a000001 	beq	c9d8 <__adddf3+0x94>
    c9d0:	e2722000 	rsbs	r2, r2, #0
    c9d4:	e2e33000 	rsc	r3, r3, #0
    c9d8:	e1340005 	teq	r4, r5
    c9dc:	0a000069 	beq	cb88 <__adddf3+0x244>
    c9e0:	e2444001 	sub	r4, r4, #1
    c9e4:	e275e020 	rsbs	lr, r5, #32
    c9e8:	ba000005 	blt	ca04 <__adddf3+0xc0>
    c9ec:	e1a0ce12 	lsl	ip, r2, lr
    c9f0:	e0900532 	adds	r0, r0, r2, lsr r5
    c9f4:	e2a11000 	adc	r1, r1, #0
    c9f8:	e0900e13 	adds	r0, r0, r3, lsl lr
    c9fc:	e0b11553 	adcs	r1, r1, r3, asr r5
    ca00:	ea000006 	b	ca20 <__adddf3+0xdc>
    ca04:	e2455020 	sub	r5, r5, #32
    ca08:	e28ee020 	add	lr, lr, #32
    ca0c:	e3520001 	cmp	r2, #1
    ca10:	e1a0ce13 	lsl	ip, r3, lr
    ca14:	238cc002 	orrcs	ip, ip, #2
    ca18:	e0900553 	adds	r0, r0, r3, asr r5
    ca1c:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    ca20:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    ca24:	5a000002 	bpl	ca34 <__adddf3+0xf0>
    ca28:	e27cc000 	rsbs	ip, ip, #0
    ca2c:	e2f00000 	rscs	r0, r0, #0
    ca30:	e2e11000 	rsc	r1, r1, #0
    ca34:	e3510601 	cmp	r1, #1048576	; 0x100000
    ca38:	3a00000f 	bcc	ca7c <__adddf3+0x138>
    ca3c:	e3510602 	cmp	r1, #2097152	; 0x200000
    ca40:	3a000006 	bcc	ca60 <__adddf3+0x11c>
    ca44:	e1b010a1 	lsrs	r1, r1, #1
    ca48:	e1b00060 	rrxs	r0, r0
    ca4c:	e1a0c06c 	rrx	ip, ip
    ca50:	e2844001 	add	r4, r4, #1
    ca54:	e1a02a84 	lsl	r2, r4, #21
    ca58:	e3720501 	cmn	r2, #4194304	; 0x400000
    ca5c:	2a00006b 	bcs	cc10 <__adddf3+0x2cc>
    ca60:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    ca64:	01b0c0a0 	lsrseq	ip, r0, #1
    ca68:	e2b00000 	adcs	r0, r0, #0
    ca6c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    ca70:	e1811005 	orr	r1, r1, r5
    ca74:	e8bd4030 	pop	{r4, r5, lr}
    ca78:	e12fff1e 	bx	lr
    ca7c:	e1b0c08c 	lsls	ip, ip, #1
    ca80:	e0b00000 	adcs	r0, r0, r0
    ca84:	e0a11001 	adc	r1, r1, r1
    ca88:	e3110601 	tst	r1, #1048576	; 0x100000
    ca8c:	e2444001 	sub	r4, r4, #1
    ca90:	1afffff2 	bne	ca60 <__adddf3+0x11c>
    ca94:	e3310000 	teq	r1, #0
    ca98:	13a03014 	movne	r3, #20
    ca9c:	03a03034 	moveq	r3, #52	; 0x34
    caa0:	01a01000 	moveq	r1, r0
    caa4:	03a00000 	moveq	r0, #0
    caa8:	e1a02001 	mov	r2, r1
    caac:	e3520801 	cmp	r2, #65536	; 0x10000
    cab0:	21a02822 	lsrcs	r2, r2, #16
    cab4:	22433010 	subcs	r3, r3, #16
    cab8:	e3520c01 	cmp	r2, #256	; 0x100
    cabc:	21a02422 	lsrcs	r2, r2, #8
    cac0:	22433008 	subcs	r3, r3, #8
    cac4:	e3520010 	cmp	r2, #16
    cac8:	21a02222 	lsrcs	r2, r2, #4
    cacc:	22433004 	subcs	r3, r3, #4
    cad0:	e3520004 	cmp	r2, #4
    cad4:	22433002 	subcs	r3, r3, #2
    cad8:	304330a2 	subcc	r3, r3, r2, lsr #1
    cadc:	e04331a2 	sub	r3, r3, r2, lsr #3
    cae0:	e2532020 	subs	r2, r3, #32
    cae4:	aa000007 	bge	cb08 <__adddf3+0x1c4>
    cae8:	e292200c 	adds	r2, r2, #12
    caec:	da000004 	ble	cb04 <__adddf3+0x1c0>
    caf0:	e282c014 	add	ip, r2, #20
    caf4:	e262200c 	rsb	r2, r2, #12
    caf8:	e1a00c11 	lsl	r0, r1, ip
    cafc:	e1a01231 	lsr	r1, r1, r2
    cb00:	ea000004 	b	cb18 <__adddf3+0x1d4>
    cb04:	e2822014 	add	r2, r2, #20
    cb08:	d262c020 	rsble	ip, r2, #32
    cb0c:	e1a01211 	lsl	r1, r1, r2
    cb10:	d1811c30 	orrle	r1, r1, r0, lsr ip
    cb14:	d1a00210 	lslle	r0, r0, r2
    cb18:	e0544003 	subs	r4, r4, r3
    cb1c:	a0811a04 	addge	r1, r1, r4, lsl #20
    cb20:	a1811005 	orrge	r1, r1, r5
    cb24:	a8bd4030 	popge	{r4, r5, lr}
    cb28:	a12fff1e 	bxge	lr
    cb2c:	e1e04004 	mvn	r4, r4
    cb30:	e254401f 	subs	r4, r4, #31
    cb34:	aa00000f 	bge	cb78 <__adddf3+0x234>
    cb38:	e294400c 	adds	r4, r4, #12
    cb3c:	ca000006 	bgt	cb5c <__adddf3+0x218>
    cb40:	e2844014 	add	r4, r4, #20
    cb44:	e2642020 	rsb	r2, r4, #32
    cb48:	e1a00430 	lsr	r0, r0, r4
    cb4c:	e1800211 	orr	r0, r0, r1, lsl r2
    cb50:	e1851431 	orr	r1, r5, r1, lsr r4
    cb54:	e8bd4030 	pop	{r4, r5, lr}
    cb58:	e12fff1e 	bx	lr
    cb5c:	e264400c 	rsb	r4, r4, #12
    cb60:	e2642020 	rsb	r2, r4, #32
    cb64:	e1a00230 	lsr	r0, r0, r2
    cb68:	e1800411 	orr	r0, r0, r1, lsl r4
    cb6c:	e1a01005 	mov	r1, r5
    cb70:	e8bd4030 	pop	{r4, r5, lr}
    cb74:	e12fff1e 	bx	lr
    cb78:	e1a00431 	lsr	r0, r1, r4
    cb7c:	e1a01005 	mov	r1, r5
    cb80:	e8bd4030 	pop	{r4, r5, lr}
    cb84:	e12fff1e 	bx	lr
    cb88:	e3340000 	teq	r4, #0
    cb8c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    cb90:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    cb94:	02844001 	addeq	r4, r4, #1
    cb98:	12455001 	subne	r5, r5, #1
    cb9c:	eaffff8f 	b	c9e0 <__adddf3+0x9c>
    cba0:	e1f0cac4 	mvns	ip, r4, asr #21
    cba4:	11f0cac5 	mvnsne	ip, r5, asr #21
    cba8:	0a00001d 	beq	cc24 <__adddf3+0x2e0>
    cbac:	e1340005 	teq	r4, r5
    cbb0:	01300002 	teqeq	r0, r2
    cbb4:	0a000004 	beq	cbcc <__adddf3+0x288>
    cbb8:	e194c000 	orrs	ip, r4, r0
    cbbc:	01a01003 	moveq	r1, r3
    cbc0:	01a00002 	moveq	r0, r2
    cbc4:	e8bd4030 	pop	{r4, r5, lr}
    cbc8:	e12fff1e 	bx	lr
    cbcc:	e1310003 	teq	r1, r3
    cbd0:	13a01000 	movne	r1, #0
    cbd4:	13a00000 	movne	r0, #0
    cbd8:	18bd4030 	popne	{r4, r5, lr}
    cbdc:	112fff1e 	bxne	lr
    cbe0:	e1b0caa4 	lsrs	ip, r4, #21
    cbe4:	1a000004 	bne	cbfc <__adddf3+0x2b8>
    cbe8:	e1b00080 	lsls	r0, r0, #1
    cbec:	e0b11001 	adcs	r1, r1, r1
    cbf0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    cbf4:	e8bd4030 	pop	{r4, r5, lr}
    cbf8:	e12fff1e 	bx	lr
    cbfc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    cc00:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    cc04:	38bd4030 	popcc	{r4, r5, lr}
    cc08:	312fff1e 	bxcc	lr
    cc0c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    cc10:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    cc14:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    cc18:	e3a00000 	mov	r0, #0
    cc1c:	e8bd4030 	pop	{r4, r5, lr}
    cc20:	e12fff1e 	bx	lr
    cc24:	e1f0cac4 	mvns	ip, r4, asr #21
    cc28:	11a01003 	movne	r1, r3
    cc2c:	11a00002 	movne	r0, r2
    cc30:	01f0cac5 	mvnseq	ip, r5, asr #21
    cc34:	11a03001 	movne	r3, r1
    cc38:	11a02000 	movne	r2, r0
    cc3c:	e1904601 	orrs	r4, r0, r1, lsl #12
    cc40:	01925603 	orrseq	r5, r2, r3, lsl #12
    cc44:	01310003 	teqeq	r1, r3
    cc48:	13811702 	orrne	r1, r1, #524288	; 0x80000
    cc4c:	e8bd4030 	pop	{r4, r5, lr}
    cc50:	e12fff1e 	bx	lr

0000cc54 <__aeabi_ui2d>:
    cc54:	e3300000 	teq	r0, #0
    cc58:	03a01000 	moveq	r1, #0
    cc5c:	012fff1e 	bxeq	lr
    cc60:	e92d4030 	push	{r4, r5, lr}
    cc64:	e3a04b01 	mov	r4, #1024	; 0x400
    cc68:	e2844032 	add	r4, r4, #50	; 0x32
    cc6c:	e3a05000 	mov	r5, #0
    cc70:	e3a01000 	mov	r1, #0
    cc74:	eaffff86 	b	ca94 <__adddf3+0x150>

0000cc78 <__aeabi_i2d>:
    cc78:	e3300000 	teq	r0, #0
    cc7c:	03a01000 	moveq	r1, #0
    cc80:	012fff1e 	bxeq	lr
    cc84:	e92d4030 	push	{r4, r5, lr}
    cc88:	e3a04b01 	mov	r4, #1024	; 0x400
    cc8c:	e2844032 	add	r4, r4, #50	; 0x32
    cc90:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    cc94:	42600000 	rsbmi	r0, r0, #0
    cc98:	e3a01000 	mov	r1, #0
    cc9c:	eaffff7c 	b	ca94 <__adddf3+0x150>

0000cca0 <__aeabi_f2d>:
    cca0:	e1b02080 	lsls	r2, r0, #1
    cca4:	e1a011c2 	asr	r1, r2, #3
    cca8:	e1a01061 	rrx	r1, r1
    ccac:	e1a00e02 	lsl	r0, r2, #28
    ccb0:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    ccb4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    ccb8:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    ccbc:	112fff1e 	bxne	lr
    ccc0:	e3320000 	teq	r2, #0
    ccc4:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    ccc8:	012fff1e 	bxeq	lr
    cccc:	e92d4030 	push	{r4, r5, lr}
    ccd0:	e3a04d0e 	mov	r4, #896	; 0x380
    ccd4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    ccd8:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    ccdc:	eaffff6c 	b	ca94 <__adddf3+0x150>

0000cce0 <__aeabi_ul2d>:
    cce0:	e1902001 	orrs	r2, r0, r1
    cce4:	012fff1e 	bxeq	lr
    cce8:	e92d4030 	push	{r4, r5, lr}
    ccec:	e3a05000 	mov	r5, #0
    ccf0:	ea000006 	b	cd10 <__aeabi_l2d+0x1c>

0000ccf4 <__aeabi_l2d>:
    ccf4:	e1902001 	orrs	r2, r0, r1
    ccf8:	012fff1e 	bxeq	lr
    ccfc:	e92d4030 	push	{r4, r5, lr}
    cd00:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    cd04:	5a000001 	bpl	cd10 <__aeabi_l2d+0x1c>
    cd08:	e2700000 	rsbs	r0, r0, #0
    cd0c:	e2e11000 	rsc	r1, r1, #0
    cd10:	e3a04b01 	mov	r4, #1024	; 0x400
    cd14:	e2844032 	add	r4, r4, #50	; 0x32
    cd18:	e1b0cb21 	lsrs	ip, r1, #22
    cd1c:	0affff44 	beq	ca34 <__adddf3+0xf0>
    cd20:	e3a02003 	mov	r2, #3
    cd24:	e1b0c1ac 	lsrs	ip, ip, #3
    cd28:	12822003 	addne	r2, r2, #3
    cd2c:	e1b0c1ac 	lsrs	ip, ip, #3
    cd30:	12822003 	addne	r2, r2, #3
    cd34:	e08221ac 	add	r2, r2, ip, lsr #3
    cd38:	e2623020 	rsb	r3, r2, #32
    cd3c:	e1a0c310 	lsl	ip, r0, r3
    cd40:	e1a00230 	lsr	r0, r0, r2
    cd44:	e1800311 	orr	r0, r0, r1, lsl r3
    cd48:	e1a01231 	lsr	r1, r1, r2
    cd4c:	e0844002 	add	r4, r4, r2
    cd50:	eaffff37 	b	ca34 <__adddf3+0xf0>

0000cd54 <__aeabi_dmul>:
    cd54:	e92d4070 	push	{r4, r5, r6, lr}
    cd58:	e3a0c0ff 	mov	ip, #255	; 0xff
    cd5c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    cd60:	e01c4a21 	ands	r4, ip, r1, lsr #20
    cd64:	101c5a23 	andsne	r5, ip, r3, lsr #20
    cd68:	1134000c 	teqne	r4, ip
    cd6c:	1135000c 	teqne	r5, ip
    cd70:	0b000075 	bleq	cf4c <__aeabi_dmul+0x1f8>
    cd74:	e0844005 	add	r4, r4, r5
    cd78:	e0216003 	eor	r6, r1, r3
    cd7c:	e1c11a8c 	bic	r1, r1, ip, lsl #21
    cd80:	e1c33a8c 	bic	r3, r3, ip, lsl #21
    cd84:	e1905601 	orrs	r5, r0, r1, lsl #12
    cd88:	11925603 	orrsne	r5, r2, r3, lsl #12
    cd8c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    cd90:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    cd94:	0a00001d 	beq	ce10 <__aeabi_dmul+0xbc>
    cd98:	e08ec290 	umull	ip, lr, r0, r2
    cd9c:	e3a05000 	mov	r5, #0
    cda0:	e0a5e291 	umlal	lr, r5, r1, r2
    cda4:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    cda8:	e0a5e390 	umlal	lr, r5, r0, r3
    cdac:	e3a06000 	mov	r6, #0
    cdb0:	e0a65391 	umlal	r5, r6, r1, r3
    cdb4:	e33c0000 	teq	ip, #0
    cdb8:	138ee001 	orrne	lr, lr, #1
    cdbc:	e24440ff 	sub	r4, r4, #255	; 0xff
    cdc0:	e3560c02 	cmp	r6, #512	; 0x200
    cdc4:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    cdc8:	2a000002 	bcs	cdd8 <__aeabi_dmul+0x84>
    cdcc:	e1b0e08e 	lsls	lr, lr, #1
    cdd0:	e0b55005 	adcs	r5, r5, r5
    cdd4:	e0a66006 	adc	r6, r6, r6
    cdd8:	e1821586 	orr	r1, r2, r6, lsl #11
    cddc:	e1811aa5 	orr	r1, r1, r5, lsr #21
    cde0:	e1a00585 	lsl	r0, r5, #11
    cde4:	e1800aae 	orr	r0, r0, lr, lsr #21
    cde8:	e1a0e58e 	lsl	lr, lr, #11
    cdec:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    cdf0:	835c0c07 	cmphi	ip, #1792	; 0x700
    cdf4:	8a000011 	bhi	ce40 <__aeabi_dmul+0xec>
    cdf8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    cdfc:	01b0e0a0 	lsrseq	lr, r0, #1
    ce00:	e2b00000 	adcs	r0, r0, #0
    ce04:	e0a11a04 	adc	r1, r1, r4, lsl #20
    ce08:	e8bd4070 	pop	{r4, r5, r6, lr}
    ce0c:	e12fff1e 	bx	lr
    ce10:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    ce14:	e1861001 	orr	r1, r6, r1
    ce18:	e1800002 	orr	r0, r0, r2
    ce1c:	e0211003 	eor	r1, r1, r3
    ce20:	e05440ac 	subs	r4, r4, ip, lsr #1
    ce24:	c074500c 	rsbsgt	r5, r4, ip
    ce28:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    ce2c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    ce30:	c12fff1e 	bxgt	lr
    ce34:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    ce38:	e3a0e000 	mov	lr, #0
    ce3c:	e2544001 	subs	r4, r4, #1
    ce40:	ca00005d 	bgt	cfbc <__aeabi_dmul+0x268>
    ce44:	e3740036 	cmn	r4, #54	; 0x36
    ce48:	d3a00000 	movle	r0, #0
    ce4c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    ce50:	d8bd4070 	pople	{r4, r5, r6, lr}
    ce54:	d12fff1e 	bxle	lr
    ce58:	e2644000 	rsb	r4, r4, #0
    ce5c:	e2544020 	subs	r4, r4, #32
    ce60:	aa00001a 	bge	ced0 <__aeabi_dmul+0x17c>
    ce64:	e294400c 	adds	r4, r4, #12
    ce68:	ca00000c 	bgt	cea0 <__aeabi_dmul+0x14c>
    ce6c:	e2844014 	add	r4, r4, #20
    ce70:	e2645020 	rsb	r5, r4, #32
    ce74:	e1a03510 	lsl	r3, r0, r5
    ce78:	e1a00430 	lsr	r0, r0, r4
    ce7c:	e1800511 	orr	r0, r0, r1, lsl r5
    ce80:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    ce84:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    ce88:	e0900fa3 	adds	r0, r0, r3, lsr #31
    ce8c:	e0a21431 	adc	r1, r2, r1, lsr r4
    ce90:	e19ee083 	orrs	lr, lr, r3, lsl #1
    ce94:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    ce98:	e8bd4070 	pop	{r4, r5, r6, lr}
    ce9c:	e12fff1e 	bx	lr
    cea0:	e264400c 	rsb	r4, r4, #12
    cea4:	e2645020 	rsb	r5, r4, #32
    cea8:	e1a03410 	lsl	r3, r0, r4
    ceac:	e1a00530 	lsr	r0, r0, r5
    ceb0:	e1800411 	orr	r0, r0, r1, lsl r4
    ceb4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    ceb8:	e0900fa3 	adds	r0, r0, r3, lsr #31
    cebc:	e2a11000 	adc	r1, r1, #0
    cec0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    cec4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    cec8:	e8bd4070 	pop	{r4, r5, r6, lr}
    cecc:	e12fff1e 	bx	lr
    ced0:	e2645020 	rsb	r5, r4, #32
    ced4:	e18ee510 	orr	lr, lr, r0, lsl r5
    ced8:	e1a03430 	lsr	r3, r0, r4
    cedc:	e1833511 	orr	r3, r3, r1, lsl r5
    cee0:	e1a00431 	lsr	r0, r1, r4
    cee4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    cee8:	e1c00431 	bic	r0, r0, r1, lsr r4
    ceec:	e0800fa3 	add	r0, r0, r3, lsr #31
    cef0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    cef4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    cef8:	e8bd4070 	pop	{r4, r5, r6, lr}
    cefc:	e12fff1e 	bx	lr
    cf00:	e3340000 	teq	r4, #0
    cf04:	1a000008 	bne	cf2c <__aeabi_dmul+0x1d8>
    cf08:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    cf0c:	e1b00080 	lsls	r0, r0, #1
    cf10:	e0a11001 	adc	r1, r1, r1
    cf14:	e3110601 	tst	r1, #1048576	; 0x100000
    cf18:	02444001 	subeq	r4, r4, #1
    cf1c:	0afffffa 	beq	cf0c <__aeabi_dmul+0x1b8>
    cf20:	e1811006 	orr	r1, r1, r6
    cf24:	e3350000 	teq	r5, #0
    cf28:	112fff1e 	bxne	lr
    cf2c:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    cf30:	e1b02082 	lsls	r2, r2, #1
    cf34:	e0a33003 	adc	r3, r3, r3
    cf38:	e3130601 	tst	r3, #1048576	; 0x100000
    cf3c:	02455001 	subeq	r5, r5, #1
    cf40:	0afffffa 	beq	cf30 <__aeabi_dmul+0x1dc>
    cf44:	e1833006 	orr	r3, r3, r6
    cf48:	e12fff1e 	bx	lr
    cf4c:	e134000c 	teq	r4, ip
    cf50:	e00c5a23 	and	r5, ip, r3, lsr #20
    cf54:	1135000c 	teqne	r5, ip
    cf58:	0a000007 	beq	cf7c <__aeabi_dmul+0x228>
    cf5c:	e1906081 	orrs	r6, r0, r1, lsl #1
    cf60:	11926083 	orrsne	r6, r2, r3, lsl #1
    cf64:	1affffe5 	bne	cf00 <__aeabi_dmul+0x1ac>
    cf68:	e0211003 	eor	r1, r1, r3
    cf6c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    cf70:	e3a00000 	mov	r0, #0
    cf74:	e8bd4070 	pop	{r4, r5, r6, lr}
    cf78:	e12fff1e 	bx	lr
    cf7c:	e1906081 	orrs	r6, r0, r1, lsl #1
    cf80:	01a00002 	moveq	r0, r2
    cf84:	01a01003 	moveq	r1, r3
    cf88:	11926083 	orrsne	r6, r2, r3, lsl #1
    cf8c:	0a000010 	beq	cfd4 <__aeabi_dmul+0x280>
    cf90:	e134000c 	teq	r4, ip
    cf94:	1a000001 	bne	cfa0 <__aeabi_dmul+0x24c>
    cf98:	e1906601 	orrs	r6, r0, r1, lsl #12
    cf9c:	1a00000c 	bne	cfd4 <__aeabi_dmul+0x280>
    cfa0:	e135000c 	teq	r5, ip
    cfa4:	1a000003 	bne	cfb8 <__aeabi_dmul+0x264>
    cfa8:	e1926603 	orrs	r6, r2, r3, lsl #12
    cfac:	11a00002 	movne	r0, r2
    cfb0:	11a01003 	movne	r1, r3
    cfb4:	1a000006 	bne	cfd4 <__aeabi_dmul+0x280>
    cfb8:	e0211003 	eor	r1, r1, r3
    cfbc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    cfc0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    cfc4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    cfc8:	e3a00000 	mov	r0, #0
    cfcc:	e8bd4070 	pop	{r4, r5, r6, lr}
    cfd0:	e12fff1e 	bx	lr
    cfd4:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    cfd8:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    cfdc:	e8bd4070 	pop	{r4, r5, r6, lr}
    cfe0:	e12fff1e 	bx	lr

0000cfe4 <__aeabi_ddiv>:
    cfe4:	e92d4070 	push	{r4, r5, r6, lr}
    cfe8:	e3a0c0ff 	mov	ip, #255	; 0xff
    cfec:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    cff0:	e01c4a21 	ands	r4, ip, r1, lsr #20
    cff4:	101c5a23 	andsne	r5, ip, r3, lsr #20
    cff8:	1134000c 	teqne	r4, ip
    cffc:	1135000c 	teqne	r5, ip
    d000:	0b00005e 	bleq	d180 <__aeabi_ddiv+0x19c>
    d004:	e0444005 	sub	r4, r4, r5
    d008:	e021e003 	eor	lr, r1, r3
    d00c:	e1925603 	orrs	r5, r2, r3, lsl #12
    d010:	e1a01601 	lsl	r1, r1, #12
    d014:	0a00004c 	beq	d14c <__aeabi_ddiv+0x168>
    d018:	e1a03603 	lsl	r3, r3, #12
    d01c:	e3a05201 	mov	r5, #268435456	; 0x10000000
    d020:	e1853223 	orr	r3, r5, r3, lsr #4
    d024:	e1833c22 	orr	r3, r3, r2, lsr #24
    d028:	e1a02402 	lsl	r2, r2, #8
    d02c:	e1855221 	orr	r5, r5, r1, lsr #4
    d030:	e1855c20 	orr	r5, r5, r0, lsr #24
    d034:	e1a06400 	lsl	r6, r0, #8
    d038:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    d03c:	e1550003 	cmp	r5, r3
    d040:	01560002 	cmpeq	r6, r2
    d044:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    d048:	e2844c03 	add	r4, r4, #768	; 0x300
    d04c:	2a000001 	bcs	d058 <__aeabi_ddiv+0x74>
    d050:	e1b030a3 	lsrs	r3, r3, #1
    d054:	e1a02062 	rrx	r2, r2
    d058:	e0566002 	subs	r6, r6, r2
    d05c:	e0c55003 	sbc	r5, r5, r3
    d060:	e1b030a3 	lsrs	r3, r3, #1
    d064:	e1a02062 	rrx	r2, r2
    d068:	e3a00601 	mov	r0, #1048576	; 0x100000
    d06c:	e3a0c702 	mov	ip, #524288	; 0x80000
    d070:	e056e002 	subs	lr, r6, r2
    d074:	e0d5e003 	sbcs	lr, r5, r3
    d078:	20466002 	subcs	r6, r6, r2
    d07c:	21a0500e 	movcs	r5, lr
    d080:	2180000c 	orrcs	r0, r0, ip
    d084:	e1b030a3 	lsrs	r3, r3, #1
    d088:	e1a02062 	rrx	r2, r2
    d08c:	e056e002 	subs	lr, r6, r2
    d090:	e0d5e003 	sbcs	lr, r5, r3
    d094:	20466002 	subcs	r6, r6, r2
    d098:	21a0500e 	movcs	r5, lr
    d09c:	218000ac 	orrcs	r0, r0, ip, lsr #1
    d0a0:	e1b030a3 	lsrs	r3, r3, #1
    d0a4:	e1a02062 	rrx	r2, r2
    d0a8:	e056e002 	subs	lr, r6, r2
    d0ac:	e0d5e003 	sbcs	lr, r5, r3
    d0b0:	20466002 	subcs	r6, r6, r2
    d0b4:	21a0500e 	movcs	r5, lr
    d0b8:	2180012c 	orrcs	r0, r0, ip, lsr #2
    d0bc:	e1b030a3 	lsrs	r3, r3, #1
    d0c0:	e1a02062 	rrx	r2, r2
    d0c4:	e056e002 	subs	lr, r6, r2
    d0c8:	e0d5e003 	sbcs	lr, r5, r3
    d0cc:	20466002 	subcs	r6, r6, r2
    d0d0:	21a0500e 	movcs	r5, lr
    d0d4:	218001ac 	orrcs	r0, r0, ip, lsr #3
    d0d8:	e195e006 	orrs	lr, r5, r6
    d0dc:	0a00000d 	beq	d118 <__aeabi_ddiv+0x134>
    d0e0:	e1a05205 	lsl	r5, r5, #4
    d0e4:	e1855e26 	orr	r5, r5, r6, lsr #28
    d0e8:	e1a06206 	lsl	r6, r6, #4
    d0ec:	e1a03183 	lsl	r3, r3, #3
    d0f0:	e1833ea2 	orr	r3, r3, r2, lsr #29
    d0f4:	e1a02182 	lsl	r2, r2, #3
    d0f8:	e1b0c22c 	lsrs	ip, ip, #4
    d0fc:	1affffdb 	bne	d070 <__aeabi_ddiv+0x8c>
    d100:	e3110601 	tst	r1, #1048576	; 0x100000
    d104:	1a000006 	bne	d124 <__aeabi_ddiv+0x140>
    d108:	e1811000 	orr	r1, r1, r0
    d10c:	e3a00000 	mov	r0, #0
    d110:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    d114:	eaffffd5 	b	d070 <__aeabi_ddiv+0x8c>
    d118:	e3110601 	tst	r1, #1048576	; 0x100000
    d11c:	01811000 	orreq	r1, r1, r0
    d120:	03a00000 	moveq	r0, #0
    d124:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    d128:	835c0c07 	cmphi	ip, #1792	; 0x700
    d12c:	8affff43 	bhi	ce40 <__aeabi_dmul+0xec>
    d130:	e055c003 	subs	ip, r5, r3
    d134:	0056c002 	subseq	ip, r6, r2
    d138:	01b0c0a0 	lsrseq	ip, r0, #1
    d13c:	e2b00000 	adcs	r0, r0, #0
    d140:	e0a11a04 	adc	r1, r1, r4, lsl #20
    d144:	e8bd4070 	pop	{r4, r5, r6, lr}
    d148:	e12fff1e 	bx	lr
    d14c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    d150:	e18e1621 	orr	r1, lr, r1, lsr #12
    d154:	e09440ac 	adds	r4, r4, ip, lsr #1
    d158:	c074500c 	rsbsgt	r5, r4, ip
    d15c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    d160:	c8bd4070 	popgt	{r4, r5, r6, lr}
    d164:	c12fff1e 	bxgt	lr
    d168:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    d16c:	e3a0e000 	mov	lr, #0
    d170:	e2544001 	subs	r4, r4, #1
    d174:	eaffff31 	b	ce40 <__aeabi_dmul+0xec>
    d178:	e185e006 	orr	lr, r5, r6
    d17c:	eaffff2f 	b	ce40 <__aeabi_dmul+0xec>
    d180:	e00c5a23 	and	r5, ip, r3, lsr #20
    d184:	e134000c 	teq	r4, ip
    d188:	0135000c 	teqeq	r5, ip
    d18c:	0affff90 	beq	cfd4 <__aeabi_dmul+0x280>
    d190:	e134000c 	teq	r4, ip
    d194:	1a000006 	bne	d1b4 <__aeabi_ddiv+0x1d0>
    d198:	e1904601 	orrs	r4, r0, r1, lsl #12
    d19c:	1affff8c 	bne	cfd4 <__aeabi_dmul+0x280>
    d1a0:	e135000c 	teq	r5, ip
    d1a4:	1affff83 	bne	cfb8 <__aeabi_dmul+0x264>
    d1a8:	e1a00002 	mov	r0, r2
    d1ac:	e1a01003 	mov	r1, r3
    d1b0:	eaffff87 	b	cfd4 <__aeabi_dmul+0x280>
    d1b4:	e135000c 	teq	r5, ip
    d1b8:	1a000004 	bne	d1d0 <__aeabi_ddiv+0x1ec>
    d1bc:	e1925603 	orrs	r5, r2, r3, lsl #12
    d1c0:	0affff68 	beq	cf68 <__aeabi_dmul+0x214>
    d1c4:	e1a00002 	mov	r0, r2
    d1c8:	e1a01003 	mov	r1, r3
    d1cc:	eaffff80 	b	cfd4 <__aeabi_dmul+0x280>
    d1d0:	e1906081 	orrs	r6, r0, r1, lsl #1
    d1d4:	11926083 	orrsne	r6, r2, r3, lsl #1
    d1d8:	1affff48 	bne	cf00 <__aeabi_dmul+0x1ac>
    d1dc:	e1904081 	orrs	r4, r0, r1, lsl #1
    d1e0:	1affff74 	bne	cfb8 <__aeabi_dmul+0x264>
    d1e4:	e1925083 	orrs	r5, r2, r3, lsl #1
    d1e8:	1affff5e 	bne	cf68 <__aeabi_dmul+0x214>
    d1ec:	eaffff78 	b	cfd4 <__aeabi_dmul+0x280>

0000d1f0 <__gedf2>:
    d1f0:	e3e0c000 	mvn	ip, #0
    d1f4:	ea000002 	b	d204 <__cmpdf2+0x4>

0000d1f8 <__ledf2>:
    d1f8:	e3a0c001 	mov	ip, #1
    d1fc:	ea000000 	b	d204 <__cmpdf2+0x4>

0000d200 <__cmpdf2>:
    d200:	e3a0c001 	mov	ip, #1
    d204:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    d208:	e1a0c081 	lsl	ip, r1, #1
    d20c:	e1f0cacc 	mvns	ip, ip, asr #21
    d210:	e1a0c083 	lsl	ip, r3, #1
    d214:	11f0cacc 	mvnsne	ip, ip, asr #21
    d218:	0a00000e 	beq	d258 <__cmpdf2+0x58>
    d21c:	e28dd004 	add	sp, sp, #4
    d220:	e190c081 	orrs	ip, r0, r1, lsl #1
    d224:	0192c083 	orrseq	ip, r2, r3, lsl #1
    d228:	11310003 	teqne	r1, r3
    d22c:	01300002 	teqeq	r0, r2
    d230:	03a00000 	moveq	r0, #0
    d234:	012fff1e 	bxeq	lr
    d238:	e3700000 	cmn	r0, #0
    d23c:	e1310003 	teq	r1, r3
    d240:	51510003 	cmppl	r1, r3
    d244:	01500002 	cmpeq	r0, r2
    d248:	21a00fc3 	asrcs	r0, r3, #31
    d24c:	31e00fc3 	mvncc	r0, r3, asr #31
    d250:	e3800001 	orr	r0, r0, #1
    d254:	e12fff1e 	bx	lr
    d258:	e1a0c081 	lsl	ip, r1, #1
    d25c:	e1f0cacc 	mvns	ip, ip, asr #21
    d260:	1a000001 	bne	d26c <__cmpdf2+0x6c>
    d264:	e190c601 	orrs	ip, r0, r1, lsl #12
    d268:	1a000004 	bne	d280 <__cmpdf2+0x80>
    d26c:	e1a0c083 	lsl	ip, r3, #1
    d270:	e1f0cacc 	mvns	ip, ip, asr #21
    d274:	1affffe8 	bne	d21c <__cmpdf2+0x1c>
    d278:	e192c603 	orrs	ip, r2, r3, lsl #12
    d27c:	0affffe6 	beq	d21c <__cmpdf2+0x1c>
    d280:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    d284:	e12fff1e 	bx	lr

0000d288 <__aeabi_cdrcmple>:
    d288:	e1a0c000 	mov	ip, r0
    d28c:	e1a00002 	mov	r0, r2
    d290:	e1a0200c 	mov	r2, ip
    d294:	e1a0c001 	mov	ip, r1
    d298:	e1a01003 	mov	r1, r3
    d29c:	e1a0300c 	mov	r3, ip
    d2a0:	eaffffff 	b	d2a4 <__aeabi_cdcmpeq>

0000d2a4 <__aeabi_cdcmpeq>:
    d2a4:	e92d4001 	push	{r0, lr}
    d2a8:	ebffffd4 	bl	d200 <__cmpdf2>
    d2ac:	e3500000 	cmp	r0, #0
    d2b0:	43700000 	cmnmi	r0, #0
    d2b4:	e8bd4001 	pop	{r0, lr}
    d2b8:	e12fff1e 	bx	lr

0000d2bc <__aeabi_dcmpeq>:
    d2bc:	e52de008 	str	lr, [sp, #-8]!
    d2c0:	ebfffff7 	bl	d2a4 <__aeabi_cdcmpeq>
    d2c4:	03a00001 	moveq	r0, #1
    d2c8:	13a00000 	movne	r0, #0
    d2cc:	e49de008 	ldr	lr, [sp], #8
    d2d0:	e12fff1e 	bx	lr

0000d2d4 <__aeabi_dcmplt>:
    d2d4:	e52de008 	str	lr, [sp, #-8]!
    d2d8:	ebfffff1 	bl	d2a4 <__aeabi_cdcmpeq>
    d2dc:	33a00001 	movcc	r0, #1
    d2e0:	23a00000 	movcs	r0, #0
    d2e4:	e49de008 	ldr	lr, [sp], #8
    d2e8:	e12fff1e 	bx	lr

0000d2ec <__aeabi_dcmple>:
    d2ec:	e52de008 	str	lr, [sp, #-8]!
    d2f0:	ebffffeb 	bl	d2a4 <__aeabi_cdcmpeq>
    d2f4:	93a00001 	movls	r0, #1
    d2f8:	83a00000 	movhi	r0, #0
    d2fc:	e49de008 	ldr	lr, [sp], #8
    d300:	e12fff1e 	bx	lr

0000d304 <__aeabi_dcmpge>:
    d304:	e52de008 	str	lr, [sp, #-8]!
    d308:	ebffffde 	bl	d288 <__aeabi_cdrcmple>
    d30c:	93a00001 	movls	r0, #1
    d310:	83a00000 	movhi	r0, #0
    d314:	e49de008 	ldr	lr, [sp], #8
    d318:	e12fff1e 	bx	lr

0000d31c <__aeabi_dcmpgt>:
    d31c:	e52de008 	str	lr, [sp, #-8]!
    d320:	ebffffd8 	bl	d288 <__aeabi_cdrcmple>
    d324:	33a00001 	movcc	r0, #1
    d328:	23a00000 	movcs	r0, #0
    d32c:	e49de008 	ldr	lr, [sp], #8
    d330:	e12fff1e 	bx	lr

0000d334 <__aeabi_d2iz>:
    d334:	e1a02081 	lsl	r2, r1, #1
    d338:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    d33c:	2a00000c 	bcs	d374 <__aeabi_d2iz+0x40>
    d340:	5a000009 	bpl	d36c <__aeabi_d2iz+0x38>
    d344:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    d348:	e0532ac2 	subs	r2, r3, r2, asr #21
    d34c:	9a00000a 	bls	d37c <__aeabi_d2iz+0x48>
    d350:	e1a03581 	lsl	r3, r1, #11
    d354:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    d358:	e1833aa0 	orr	r3, r3, r0, lsr #21
    d35c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    d360:	e1a00233 	lsr	r0, r3, r2
    d364:	12600000 	rsbne	r0, r0, #0
    d368:	e12fff1e 	bx	lr
    d36c:	e3a00000 	mov	r0, #0
    d370:	e12fff1e 	bx	lr
    d374:	e1900601 	orrs	r0, r0, r1, lsl #12
    d378:	1a000002 	bne	d388 <__aeabi_d2iz+0x54>
    d37c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    d380:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    d384:	e12fff1e 	bx	lr
    d388:	e3a00000 	mov	r0, #0
    d38c:	e12fff1e 	bx	lr

0000d390 <__aeabi_uldivmod>:
    d390:	e3530000 	cmp	r3, #0
    d394:	03520000 	cmpeq	r2, #0
    d398:	1a000004 	bne	d3b0 <__aeabi_uldivmod+0x20>
    d39c:	e3510000 	cmp	r1, #0
    d3a0:	03500000 	cmpeq	r0, #0
    d3a4:	13e01000 	mvnne	r1, #0
    d3a8:	13e00000 	mvnne	r0, #0
    d3ac:	ea000215 	b	dc08 <____aeabi_ldiv0_from_arm>
    d3b0:	e24dd008 	sub	sp, sp, #8
    d3b4:	e92d6000 	push	{sp, lr}
    d3b8:	eb000226 	bl	dc58 <____gnu_uldivmod_helper_from_arm>
    d3bc:	e59de004 	ldr	lr, [sp, #4]
    d3c0:	e28dd008 	add	sp, sp, #8
    d3c4:	e8bd000c 	pop	{r2, r3}
    d3c8:	e12fff1e 	bx	lr

0000d3cc <__gnu_ldivmod_helper>:
    d3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3ce:	b083      	sub	sp, #12
    d3d0:	1c1d      	adds	r5, r3, #0
    d3d2:	1c14      	adds	r4, r2, #0
    d3d4:	9000      	str	r0, [sp, #0]
    d3d6:	9101      	str	r1, [sp, #4]
    d3d8:	f000 f856 	bl	d488 <__divdi3>
    d3dc:	1c2b      	adds	r3, r5, #0
    d3de:	1c22      	adds	r2, r4, #0
    d3e0:	1c06      	adds	r6, r0, #0
    d3e2:	1c0f      	adds	r7, r1, #0
    d3e4:	f000 f82a 	bl	d43c <__aeabi_lmul>
    d3e8:	9b00      	ldr	r3, [sp, #0]
    d3ea:	9c01      	ldr	r4, [sp, #4]
    d3ec:	9a08      	ldr	r2, [sp, #32]
    d3ee:	1a1b      	subs	r3, r3, r0
    d3f0:	418c      	sbcs	r4, r1
    d3f2:	b003      	add	sp, #12
    d3f4:	1c30      	adds	r0, r6, #0
    d3f6:	1c39      	adds	r1, r7, #0
    d3f8:	6013      	str	r3, [r2, #0]
    d3fa:	6054      	str	r4, [r2, #4]
    d3fc:	bcf0      	pop	{r4, r5, r6, r7}
    d3fe:	bc04      	pop	{r2}
    d400:	4710      	bx	r2
    d402:	46c0      	nop			; (mov r8, r8)

0000d404 <__gnu_uldivmod_helper>:
    d404:	b5f0      	push	{r4, r5, r6, r7, lr}
    d406:	b083      	sub	sp, #12
    d408:	1c1d      	adds	r5, r3, #0
    d40a:	1c14      	adds	r4, r2, #0
    d40c:	9000      	str	r0, [sp, #0]
    d40e:	9101      	str	r1, [sp, #4]
    d410:	f000 fa0e 	bl	d830 <__udivdi3>
    d414:	1c2b      	adds	r3, r5, #0
    d416:	1c22      	adds	r2, r4, #0
    d418:	1c06      	adds	r6, r0, #0
    d41a:	1c0f      	adds	r7, r1, #0
    d41c:	f000 f80e 	bl	d43c <__aeabi_lmul>
    d420:	9b00      	ldr	r3, [sp, #0]
    d422:	9c01      	ldr	r4, [sp, #4]
    d424:	9a08      	ldr	r2, [sp, #32]
    d426:	1a1b      	subs	r3, r3, r0
    d428:	418c      	sbcs	r4, r1
    d42a:	b003      	add	sp, #12
    d42c:	1c30      	adds	r0, r6, #0
    d42e:	1c39      	adds	r1, r7, #0
    d430:	6013      	str	r3, [r2, #0]
    d432:	6054      	str	r4, [r2, #4]
    d434:	bcf0      	pop	{r4, r5, r6, r7}
    d436:	bc04      	pop	{r2}
    d438:	4710      	bx	r2
    d43a:	46c0      	nop			; (mov r8, r8)

0000d43c <__aeabi_lmul>:
    d43c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d43e:	0406      	lsls	r6, r0, #16
    d440:	0415      	lsls	r5, r2, #16
    d442:	0c2f      	lsrs	r7, r5, #16
    d444:	1c04      	adds	r4, r0, #0
    d446:	0c15      	lsrs	r5, r2, #16
    d448:	0c00      	lsrs	r0, r0, #16
    d44a:	469c      	mov	ip, r3
    d44c:	0c33      	lsrs	r3, r6, #16
    d44e:	1c1e      	adds	r6, r3, #0
    d450:	437e      	muls	r6, r7
    d452:	436b      	muls	r3, r5
    d454:	4347      	muls	r7, r0
    d456:	4345      	muls	r5, r0
    d458:	18fb      	adds	r3, r7, r3
    d45a:	0c30      	lsrs	r0, r6, #16
    d45c:	1818      	adds	r0, r3, r0
    d45e:	4287      	cmp	r7, r0
    d460:	d902      	bls.n	d468 <__aeabi_lmul+0x2c>
    d462:	2380      	movs	r3, #128	; 0x80
    d464:	025f      	lsls	r7, r3, #9
    d466:	19ed      	adds	r5, r5, r7
    d468:	0433      	lsls	r3, r6, #16
    d46a:	1c26      	adds	r6, r4, #0
    d46c:	4664      	mov	r4, ip
    d46e:	4374      	muls	r4, r6
    d470:	4351      	muls	r1, r2
    d472:	0c07      	lsrs	r7, r0, #16
    d474:	19ed      	adds	r5, r5, r7
    d476:	1861      	adds	r1, r4, r1
    d478:	0c1f      	lsrs	r7, r3, #16
    d47a:	0400      	lsls	r0, r0, #16
    d47c:	19c0      	adds	r0, r0, r7
    d47e:	1949      	adds	r1, r1, r5
    d480:	bcf0      	pop	{r4, r5, r6, r7}
    d482:	bc04      	pop	{r2}
    d484:	4710      	bx	r2
    d486:	46c0      	nop			; (mov r8, r8)

0000d488 <__divdi3>:
    d488:	b5f0      	push	{r4, r5, r6, r7, lr}
    d48a:	465f      	mov	r7, fp
    d48c:	4656      	mov	r6, sl
    d48e:	464d      	mov	r5, r9
    d490:	4644      	mov	r4, r8
    d492:	b4f0      	push	{r4, r5, r6, r7}
    d494:	1c04      	adds	r4, r0, #0
    d496:	2000      	movs	r0, #0
    d498:	1c0d      	adds	r5, r1, #0
    d49a:	4680      	mov	r8, r0
    d49c:	b085      	sub	sp, #20
    d49e:	1c19      	adds	r1, r3, #0
    d4a0:	4545      	cmp	r5, r8
    d4a2:	da00      	bge.n	d4a6 <__divdi3+0x1e>
    d4a4:	e0df      	b.n	d666 <__divdi3+0x1de>
    d4a6:	2900      	cmp	r1, #0
    d4a8:	da00      	bge.n	d4ac <__divdi3+0x24>
    d4aa:	e0d3      	b.n	d654 <__divdi3+0x1cc>
    d4ac:	46a3      	mov	fp, r4
    d4ae:	1c27      	adds	r7, r4, #0
    d4b0:	46a9      	mov	r9, r5
    d4b2:	4692      	mov	sl, r2
    d4b4:	1c16      	adds	r6, r2, #0
    d4b6:	1c2c      	adds	r4, r5, #0
    d4b8:	1e1d      	subs	r5, r3, #0
    d4ba:	d14f      	bne.n	d55c <__divdi3+0xd4>
    d4bc:	454a      	cmp	r2, r9
    d4be:	d800      	bhi.n	d4c2 <__divdi3+0x3a>
    d4c0:	e07a      	b.n	d5b8 <__divdi3+0x130>
    d4c2:	1c10      	adds	r0, r2, #0
    d4c4:	f000 fbaa 	bl	dc1c <____clzsi2_from_thumb>
    d4c8:	2800      	cmp	r0, #0
    d4ca:	d007      	beq.n	d4dc <__divdi3+0x54>
    d4cc:	2520      	movs	r5, #32
    d4ce:	1a2a      	subs	r2, r5, r0
    d4d0:	4659      	mov	r1, fp
    d4d2:	4084      	lsls	r4, r0
    d4d4:	40d1      	lsrs	r1, r2
    d4d6:	4086      	lsls	r6, r0
    d4d8:	430c      	orrs	r4, r1
    d4da:	4087      	lsls	r7, r0
    d4dc:	0c35      	lsrs	r5, r6, #16
    d4de:	0430      	lsls	r0, r6, #16
    d4e0:	0c03      	lsrs	r3, r0, #16
    d4e2:	1c29      	adds	r1, r5, #0
    d4e4:	1c20      	adds	r0, r4, #0
    d4e6:	469b      	mov	fp, r3
    d4e8:	f000 fbbc 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d4ec:	465a      	mov	r2, fp
    d4ee:	4342      	muls	r2, r0
    d4f0:	4681      	mov	r9, r0
    d4f2:	1c29      	adds	r1, r5, #0
    d4f4:	1c20      	adds	r0, r4, #0
    d4f6:	4692      	mov	sl, r2
    d4f8:	f000 fbc8 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d4fc:	0c3c      	lsrs	r4, r7, #16
    d4fe:	0409      	lsls	r1, r1, #16
    d500:	4321      	orrs	r1, r4
    d502:	458a      	cmp	sl, r1
    d504:	d909      	bls.n	d51a <__divdi3+0x92>
    d506:	2401      	movs	r4, #1
    d508:	4263      	negs	r3, r4
    d50a:	1989      	adds	r1, r1, r6
    d50c:	4499      	add	r9, r3
    d50e:	428e      	cmp	r6, r1
    d510:	d803      	bhi.n	d51a <__divdi3+0x92>
    d512:	458a      	cmp	sl, r1
    d514:	d901      	bls.n	d51a <__divdi3+0x92>
    d516:	4499      	add	r9, r3
    d518:	1989      	adds	r1, r1, r6
    d51a:	4650      	mov	r0, sl
    d51c:	1a08      	subs	r0, r1, r0
    d51e:	1c29      	adds	r1, r5, #0
    d520:	4682      	mov	sl, r0
    d522:	f000 fb9f 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d526:	4659      	mov	r1, fp
    d528:	4341      	muls	r1, r0
    d52a:	1c04      	adds	r4, r0, #0
    d52c:	468b      	mov	fp, r1
    d52e:	4650      	mov	r0, sl
    d530:	1c29      	adds	r1, r5, #0
    d532:	f000 fbab 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d536:	043f      	lsls	r7, r7, #16
    d538:	0409      	lsls	r1, r1, #16
    d53a:	0c3f      	lsrs	r7, r7, #16
    d53c:	430f      	orrs	r7, r1
    d53e:	45bb      	cmp	fp, r7
    d540:	d907      	bls.n	d552 <__divdi3+0xca>
    d542:	19bf      	adds	r7, r7, r6
    d544:	3c01      	subs	r4, #1
    d546:	42be      	cmp	r6, r7
    d548:	d803      	bhi.n	d552 <__divdi3+0xca>
    d54a:	455f      	cmp	r7, fp
    d54c:	41ad      	sbcs	r5, r5
    d54e:	426e      	negs	r6, r5
    d550:	1ba4      	subs	r4, r4, r6
    d552:	464b      	mov	r3, r9
    d554:	041a      	lsls	r2, r3, #16
    d556:	4322      	orrs	r2, r4
    d558:	2500      	movs	r5, #0
    d55a:	e003      	b.n	d564 <__divdi3+0xdc>
    d55c:	454d      	cmp	r5, r9
    d55e:	d916      	bls.n	d58e <__divdi3+0x106>
    d560:	2500      	movs	r5, #0
    d562:	1c2a      	adds	r2, r5, #0
    d564:	1c13      	adds	r3, r2, #0
    d566:	2200      	movs	r2, #0
    d568:	1c2c      	adds	r4, r5, #0
    d56a:	4590      	cmp	r8, r2
    d56c:	d004      	beq.n	d578 <__divdi3+0xf0>
    d56e:	1c19      	adds	r1, r3, #0
    d570:	1c2a      	adds	r2, r5, #0
    d572:	2400      	movs	r4, #0
    d574:	424b      	negs	r3, r1
    d576:	4194      	sbcs	r4, r2
    d578:	b005      	add	sp, #20
    d57a:	1c18      	adds	r0, r3, #0
    d57c:	1c21      	adds	r1, r4, #0
    d57e:	bc3c      	pop	{r2, r3, r4, r5}
    d580:	4690      	mov	r8, r2
    d582:	4699      	mov	r9, r3
    d584:	46a2      	mov	sl, r4
    d586:	46ab      	mov	fp, r5
    d588:	bcf0      	pop	{r4, r5, r6, r7}
    d58a:	bc04      	pop	{r2}
    d58c:	4710      	bx	r2
    d58e:	1c18      	adds	r0, r3, #0
    d590:	f000 fb44 	bl	dc1c <____clzsi2_from_thumb>
    d594:	1e04      	subs	r4, r0, #0
    d596:	d000      	beq.n	d59a <__divdi3+0x112>
    d598:	e0c1      	b.n	d71e <__divdi3+0x296>
    d59a:	465f      	mov	r7, fp
    d59c:	4650      	mov	r0, sl
    d59e:	4287      	cmp	r7, r0
    d5a0:	4164      	adcs	r4, r4
    d5a2:	0624      	lsls	r4, r4, #24
    d5a4:	2c00      	cmp	r4, #0
    d5a6:	d104      	bne.n	d5b2 <__divdi3+0x12a>
    d5a8:	454d      	cmp	r5, r9
    d5aa:	41ad      	sbcs	r5, r5
    d5ac:	426d      	negs	r5, r5
    d5ae:	2d00      	cmp	r5, #0
    d5b0:	d0d7      	beq.n	d562 <__divdi3+0xda>
    d5b2:	2500      	movs	r5, #0
    d5b4:	2201      	movs	r2, #1
    d5b6:	e7d5      	b.n	d564 <__divdi3+0xdc>
    d5b8:	2a00      	cmp	r2, #0
    d5ba:	d104      	bne.n	d5c6 <__divdi3+0x13e>
    d5bc:	2001      	movs	r0, #1
    d5be:	1c11      	adds	r1, r2, #0
    d5c0:	f000 fb50 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d5c4:	1c06      	adds	r6, r0, #0
    d5c6:	1c30      	adds	r0, r6, #0
    d5c8:	f000 fb28 	bl	dc1c <____clzsi2_from_thumb>
    d5cc:	2800      	cmp	r0, #0
    d5ce:	d153      	bne.n	d678 <__divdi3+0x1f0>
    d5d0:	0432      	lsls	r2, r6, #16
    d5d2:	3001      	adds	r0, #1
    d5d4:	1ba4      	subs	r4, r4, r6
    d5d6:	0c13      	lsrs	r3, r2, #16
    d5d8:	9000      	str	r0, [sp, #0]
    d5da:	46a3      	mov	fp, r4
    d5dc:	0c35      	lsrs	r5, r6, #16
    d5de:	469a      	mov	sl, r3
    d5e0:	1c29      	adds	r1, r5, #0
    d5e2:	4658      	mov	r0, fp
    d5e4:	f000 fb3e 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d5e8:	1c29      	adds	r1, r5, #0
    d5ea:	4681      	mov	r9, r0
    d5ec:	4654      	mov	r4, sl
    d5ee:	4344      	muls	r4, r0
    d5f0:	4658      	mov	r0, fp
    d5f2:	f000 fb4b 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d5f6:	0c3a      	lsrs	r2, r7, #16
    d5f8:	0409      	lsls	r1, r1, #16
    d5fa:	4311      	orrs	r1, r2
    d5fc:	428c      	cmp	r4, r1
    d5fe:	d908      	bls.n	d612 <__divdi3+0x18a>
    d600:	2001      	movs	r0, #1
    d602:	4242      	negs	r2, r0
    d604:	1989      	adds	r1, r1, r6
    d606:	4491      	add	r9, r2
    d608:	428e      	cmp	r6, r1
    d60a:	d802      	bhi.n	d612 <__divdi3+0x18a>
    d60c:	428c      	cmp	r4, r1
    d60e:	d900      	bls.n	d612 <__divdi3+0x18a>
    d610:	e10a      	b.n	d828 <__divdi3+0x3a0>
    d612:	1b09      	subs	r1, r1, r4
    d614:	468b      	mov	fp, r1
    d616:	1c08      	adds	r0, r1, #0
    d618:	1c29      	adds	r1, r5, #0
    d61a:	f000 fb23 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d61e:	4653      	mov	r3, sl
    d620:	4343      	muls	r3, r0
    d622:	1c29      	adds	r1, r5, #0
    d624:	1c04      	adds	r4, r0, #0
    d626:	4658      	mov	r0, fp
    d628:	469a      	mov	sl, r3
    d62a:	f000 fb2f 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d62e:	043f      	lsls	r7, r7, #16
    d630:	040d      	lsls	r5, r1, #16
    d632:	0c3f      	lsrs	r7, r7, #16
    d634:	432f      	orrs	r7, r5
    d636:	45ba      	cmp	sl, r7
    d638:	d907      	bls.n	d64a <__divdi3+0x1c2>
    d63a:	19bf      	adds	r7, r7, r6
    d63c:	3c01      	subs	r4, #1
    d63e:	42be      	cmp	r6, r7
    d640:	d803      	bhi.n	d64a <__divdi3+0x1c2>
    d642:	4557      	cmp	r7, sl
    d644:	4192      	sbcs	r2, r2
    d646:	4256      	negs	r6, r2
    d648:	1ba4      	subs	r4, r4, r6
    d64a:	464e      	mov	r6, r9
    d64c:	0432      	lsls	r2, r6, #16
    d64e:	4322      	orrs	r2, r4
    d650:	9d00      	ldr	r5, [sp, #0]
    d652:	e787      	b.n	d564 <__divdi3+0xdc>
    d654:	4647      	mov	r7, r8
    d656:	43ff      	mvns	r7, r7
    d658:	1c10      	adds	r0, r2, #0
    d65a:	1c19      	adds	r1, r3, #0
    d65c:	46b8      	mov	r8, r7
    d65e:	2300      	movs	r3, #0
    d660:	4242      	negs	r2, r0
    d662:	418b      	sbcs	r3, r1
    d664:	e722      	b.n	d4ac <__divdi3+0x24>
    d666:	3001      	adds	r0, #1
    d668:	1c26      	adds	r6, r4, #0
    d66a:	1c2f      	adds	r7, r5, #0
    d66c:	4240      	negs	r0, r0
    d66e:	2500      	movs	r5, #0
    d670:	4274      	negs	r4, r6
    d672:	41bd      	sbcs	r5, r7
    d674:	4680      	mov	r8, r0
    d676:	e716      	b.n	d4a6 <__divdi3+0x1e>
    d678:	2520      	movs	r5, #32
    d67a:	1a2b      	subs	r3, r5, r0
    d67c:	1c3a      	adds	r2, r7, #0
    d67e:	40da      	lsrs	r2, r3
    d680:	1c15      	adds	r5, r2, #0
    d682:	1c21      	adds	r1, r4, #0
    d684:	4084      	lsls	r4, r0
    d686:	4086      	lsls	r6, r0
    d688:	40d9      	lsrs	r1, r3
    d68a:	4325      	orrs	r5, r4
    d68c:	468b      	mov	fp, r1
    d68e:	9500      	str	r5, [sp, #0]
    d690:	0431      	lsls	r1, r6, #16
    d692:	0c35      	lsrs	r5, r6, #16
    d694:	0c0b      	lsrs	r3, r1, #16
    d696:	4087      	lsls	r7, r0
    d698:	1c29      	adds	r1, r5, #0
    d69a:	4658      	mov	r0, fp
    d69c:	469a      	mov	sl, r3
    d69e:	f000 fae1 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d6a2:	4653      	mov	r3, sl
    d6a4:	4343      	muls	r3, r0
    d6a6:	1c04      	adds	r4, r0, #0
    d6a8:	1c29      	adds	r1, r5, #0
    d6aa:	4658      	mov	r0, fp
    d6ac:	4699      	mov	r9, r3
    d6ae:	f000 faed 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d6b2:	9b00      	ldr	r3, [sp, #0]
    d6b4:	0409      	lsls	r1, r1, #16
    d6b6:	0c18      	lsrs	r0, r3, #16
    d6b8:	4301      	orrs	r1, r0
    d6ba:	4589      	cmp	r9, r1
    d6bc:	d907      	bls.n	d6ce <__divdi3+0x246>
    d6be:	1989      	adds	r1, r1, r6
    d6c0:	3c01      	subs	r4, #1
    d6c2:	428e      	cmp	r6, r1
    d6c4:	d803      	bhi.n	d6ce <__divdi3+0x246>
    d6c6:	4589      	cmp	r9, r1
    d6c8:	d901      	bls.n	d6ce <__divdi3+0x246>
    d6ca:	3c01      	subs	r4, #1
    d6cc:	1989      	adds	r1, r1, r6
    d6ce:	464a      	mov	r2, r9
    d6d0:	1a89      	subs	r1, r1, r2
    d6d2:	9101      	str	r1, [sp, #4]
    d6d4:	1c08      	adds	r0, r1, #0
    d6d6:	1c29      	adds	r1, r5, #0
    d6d8:	f000 fac4 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d6dc:	4653      	mov	r3, sl
    d6de:	4343      	muls	r3, r0
    d6e0:	4681      	mov	r9, r0
    d6e2:	1c29      	adds	r1, r5, #0
    d6e4:	9801      	ldr	r0, [sp, #4]
    d6e6:	469b      	mov	fp, r3
    d6e8:	f000 fad0 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d6ec:	9b00      	ldr	r3, [sp, #0]
    d6ee:	041a      	lsls	r2, r3, #16
    d6f0:	0409      	lsls	r1, r1, #16
    d6f2:	0c10      	lsrs	r0, r2, #16
    d6f4:	4301      	orrs	r1, r0
    d6f6:	458b      	cmp	fp, r1
    d6f8:	d909      	bls.n	d70e <__divdi3+0x286>
    d6fa:	2001      	movs	r0, #1
    d6fc:	4242      	negs	r2, r0
    d6fe:	1989      	adds	r1, r1, r6
    d700:	4491      	add	r9, r2
    d702:	428e      	cmp	r6, r1
    d704:	d803      	bhi.n	d70e <__divdi3+0x286>
    d706:	458b      	cmp	fp, r1
    d708:	d901      	bls.n	d70e <__divdi3+0x286>
    d70a:	4491      	add	r9, r2
    d70c:	1989      	adds	r1, r1, r6
    d70e:	465b      	mov	r3, fp
    d710:	0424      	lsls	r4, r4, #16
    d712:	4648      	mov	r0, r9
    d714:	1acb      	subs	r3, r1, r3
    d716:	4320      	orrs	r0, r4
    d718:	469b      	mov	fp, r3
    d71a:	9000      	str	r0, [sp, #0]
    d71c:	e760      	b.n	d5e0 <__divdi3+0x158>
    d71e:	2620      	movs	r6, #32
    d720:	1b33      	subs	r3, r6, r4
    d722:	4656      	mov	r6, sl
    d724:	40a5      	lsls	r5, r4
    d726:	40de      	lsrs	r6, r3
    d728:	4651      	mov	r1, sl
    d72a:	1c38      	adds	r0, r7, #0
    d72c:	432e      	orrs	r6, r5
    d72e:	40d8      	lsrs	r0, r3
    d730:	40a1      	lsls	r1, r4
    d732:	464a      	mov	r2, r9
    d734:	464d      	mov	r5, r9
    d736:	40da      	lsrs	r2, r3
    d738:	9100      	str	r1, [sp, #0]
    d73a:	40a5      	lsls	r5, r4
    d73c:	1c01      	adds	r1, r0, #0
    d73e:	4693      	mov	fp, r2
    d740:	4329      	orrs	r1, r5
    d742:	0432      	lsls	r2, r6, #16
    d744:	0c35      	lsrs	r5, r6, #16
    d746:	0c13      	lsrs	r3, r2, #16
    d748:	9101      	str	r1, [sp, #4]
    d74a:	4658      	mov	r0, fp
    d74c:	1c29      	adds	r1, r5, #0
    d74e:	9302      	str	r3, [sp, #8]
    d750:	f000 fa88 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d754:	4682      	mov	sl, r0
    d756:	9802      	ldr	r0, [sp, #8]
    d758:	4651      	mov	r1, sl
    d75a:	4341      	muls	r1, r0
    d75c:	4658      	mov	r0, fp
    d75e:	4689      	mov	r9, r1
    d760:	1c29      	adds	r1, r5, #0
    d762:	f000 fa93 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d766:	9a01      	ldr	r2, [sp, #4]
    d768:	0409      	lsls	r1, r1, #16
    d76a:	0c13      	lsrs	r3, r2, #16
    d76c:	4319      	orrs	r1, r3
    d76e:	4589      	cmp	r9, r1
    d770:	d909      	bls.n	d786 <__divdi3+0x2fe>
    d772:	2001      	movs	r0, #1
    d774:	4242      	negs	r2, r0
    d776:	1989      	adds	r1, r1, r6
    d778:	4492      	add	sl, r2
    d77a:	428e      	cmp	r6, r1
    d77c:	d803      	bhi.n	d786 <__divdi3+0x2fe>
    d77e:	4589      	cmp	r9, r1
    d780:	d901      	bls.n	d786 <__divdi3+0x2fe>
    d782:	4492      	add	sl, r2
    d784:	1989      	adds	r1, r1, r6
    d786:	464b      	mov	r3, r9
    d788:	1acb      	subs	r3, r1, r3
    d78a:	1c18      	adds	r0, r3, #0
    d78c:	1c29      	adds	r1, r5, #0
    d78e:	9303      	str	r3, [sp, #12]
    d790:	f000 fa68 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d794:	9902      	ldr	r1, [sp, #8]
    d796:	4683      	mov	fp, r0
    d798:	4658      	mov	r0, fp
    d79a:	4348      	muls	r0, r1
    d79c:	1c29      	adds	r1, r5, #0
    d79e:	4681      	mov	r9, r0
    d7a0:	9803      	ldr	r0, [sp, #12]
    d7a2:	f000 fa73 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d7a6:	9a01      	ldr	r2, [sp, #4]
    d7a8:	0413      	lsls	r3, r2, #16
    d7aa:	0409      	lsls	r1, r1, #16
    d7ac:	0c1d      	lsrs	r5, r3, #16
    d7ae:	4329      	orrs	r1, r5
    d7b0:	4589      	cmp	r9, r1
    d7b2:	d905      	bls.n	d7c0 <__divdi3+0x338>
    d7b4:	2501      	movs	r5, #1
    d7b6:	426b      	negs	r3, r5
    d7b8:	1989      	adds	r1, r1, r6
    d7ba:	449b      	add	fp, r3
    d7bc:	428e      	cmp	r6, r1
    d7be:	d92e      	bls.n	d81e <__divdi3+0x396>
    d7c0:	464e      	mov	r6, r9
    d7c2:	4650      	mov	r0, sl
    d7c4:	1b8e      	subs	r6, r1, r6
    d7c6:	0402      	lsls	r2, r0, #16
    d7c8:	4659      	mov	r1, fp
    d7ca:	430a      	orrs	r2, r1
    d7cc:	9900      	ldr	r1, [sp, #0]
    d7ce:	0415      	lsls	r5, r2, #16
    d7d0:	0408      	lsls	r0, r1, #16
    d7d2:	0c2b      	lsrs	r3, r5, #16
    d7d4:	0c00      	lsrs	r0, r0, #16
    d7d6:	0c15      	lsrs	r5, r2, #16
    d7d8:	46b1      	mov	r9, r6
    d7da:	0c0e      	lsrs	r6, r1, #16
    d7dc:	1c01      	adds	r1, r0, #0
    d7de:	4359      	muls	r1, r3
    d7e0:	4373      	muls	r3, r6
    d7e2:	4368      	muls	r0, r5
    d7e4:	4375      	muls	r5, r6
    d7e6:	18c3      	adds	r3, r0, r3
    d7e8:	0c0e      	lsrs	r6, r1, #16
    d7ea:	199b      	adds	r3, r3, r6
    d7ec:	468c      	mov	ip, r1
    d7ee:	4298      	cmp	r0, r3
    d7f0:	d902      	bls.n	d7f8 <__divdi3+0x370>
    d7f2:	2080      	movs	r0, #128	; 0x80
    d7f4:	0241      	lsls	r1, r0, #9
    d7f6:	186d      	adds	r5, r5, r1
    d7f8:	0c1e      	lsrs	r6, r3, #16
    d7fa:	19ad      	adds	r5, r5, r6
    d7fc:	45a9      	cmp	r9, r5
    d7fe:	d30b      	bcc.n	d818 <__divdi3+0x390>
    d800:	d001      	beq.n	d806 <__divdi3+0x37e>
    d802:	2500      	movs	r5, #0
    d804:	e6ae      	b.n	d564 <__divdi3+0xdc>
    d806:	40a7      	lsls	r7, r4
    d808:	1c3c      	adds	r4, r7, #0
    d80a:	4667      	mov	r7, ip
    d80c:	0439      	lsls	r1, r7, #16
    d80e:	041d      	lsls	r5, r3, #16
    d810:	0c0f      	lsrs	r7, r1, #16
    d812:	19eb      	adds	r3, r5, r7
    d814:	429c      	cmp	r4, r3
    d816:	d2f4      	bcs.n	d802 <__divdi3+0x37a>
    d818:	3a01      	subs	r2, #1
    d81a:	2500      	movs	r5, #0
    d81c:	e6a2      	b.n	d564 <__divdi3+0xdc>
    d81e:	4589      	cmp	r9, r1
    d820:	d9ce      	bls.n	d7c0 <__divdi3+0x338>
    d822:	449b      	add	fp, r3
    d824:	1989      	adds	r1, r1, r6
    d826:	e7cb      	b.n	d7c0 <__divdi3+0x338>
    d828:	4491      	add	r9, r2
    d82a:	1989      	adds	r1, r1, r6
    d82c:	e6f1      	b.n	d612 <__divdi3+0x18a>
    d82e:	46c0      	nop			; (mov r8, r8)

0000d830 <__udivdi3>:
    d830:	b5f0      	push	{r4, r5, r6, r7, lr}
    d832:	465f      	mov	r7, fp
    d834:	4656      	mov	r6, sl
    d836:	464d      	mov	r5, r9
    d838:	4644      	mov	r4, r8
    d83a:	b4f0      	push	{r4, r5, r6, r7}
    d83c:	b083      	sub	sp, #12
    d83e:	4680      	mov	r8, r0
    d840:	1c0d      	adds	r5, r1, #0
    d842:	1c17      	adds	r7, r2, #0
    d844:	1c1e      	adds	r6, r3, #0
    d846:	1c14      	adds	r4, r2, #0
    d848:	4681      	mov	r9, r0
    d84a:	468a      	mov	sl, r1
    d84c:	2b00      	cmp	r3, #0
    d84e:	d15b      	bne.n	d908 <__udivdi3+0xd8>
    d850:	4552      	cmp	r2, sl
    d852:	d96e      	bls.n	d932 <__udivdi3+0x102>
    d854:	1c10      	adds	r0, r2, #0
    d856:	f000 f9e1 	bl	dc1c <____clzsi2_from_thumb>
    d85a:	2800      	cmp	r0, #0
    d85c:	d00c      	beq.n	d878 <__udivdi3+0x48>
    d85e:	2620      	movs	r6, #32
    d860:	1c2b      	adds	r3, r5, #0
    d862:	4641      	mov	r1, r8
    d864:	1a35      	subs	r5, r6, r0
    d866:	40e9      	lsrs	r1, r5
    d868:	4083      	lsls	r3, r0
    d86a:	1c0a      	adds	r2, r1, #0
    d86c:	431a      	orrs	r2, r3
    d86e:	4692      	mov	sl, r2
    d870:	4642      	mov	r2, r8
    d872:	4082      	lsls	r2, r0
    d874:	4084      	lsls	r4, r0
    d876:	4691      	mov	r9, r2
    d878:	0c25      	lsrs	r5, r4, #16
    d87a:	0427      	lsls	r7, r4, #16
    d87c:	0c3b      	lsrs	r3, r7, #16
    d87e:	1c29      	adds	r1, r5, #0
    d880:	4650      	mov	r0, sl
    d882:	469b      	mov	fp, r3
    d884:	f000 f9ee 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d888:	1c29      	adds	r1, r5, #0
    d88a:	1c07      	adds	r7, r0, #0
    d88c:	465e      	mov	r6, fp
    d88e:	4346      	muls	r6, r0
    d890:	4650      	mov	r0, sl
    d892:	f000 f9fb 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d896:	464a      	mov	r2, r9
    d898:	0409      	lsls	r1, r1, #16
    d89a:	0c10      	lsrs	r0, r2, #16
    d89c:	4301      	orrs	r1, r0
    d89e:	428e      	cmp	r6, r1
    d8a0:	d907      	bls.n	d8b2 <__udivdi3+0x82>
    d8a2:	1909      	adds	r1, r1, r4
    d8a4:	3f01      	subs	r7, #1
    d8a6:	428c      	cmp	r4, r1
    d8a8:	d803      	bhi.n	d8b2 <__udivdi3+0x82>
    d8aa:	428e      	cmp	r6, r1
    d8ac:	d901      	bls.n	d8b2 <__udivdi3+0x82>
    d8ae:	3f01      	subs	r7, #1
    d8b0:	1909      	adds	r1, r1, r4
    d8b2:	1b89      	subs	r1, r1, r6
    d8b4:	4688      	mov	r8, r1
    d8b6:	1c08      	adds	r0, r1, #0
    d8b8:	1c29      	adds	r1, r5, #0
    d8ba:	f000 f9d3 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d8be:	465b      	mov	r3, fp
    d8c0:	4343      	muls	r3, r0
    d8c2:	1c29      	adds	r1, r5, #0
    d8c4:	1c06      	adds	r6, r0, #0
    d8c6:	4640      	mov	r0, r8
    d8c8:	469b      	mov	fp, r3
    d8ca:	f000 f9df 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d8ce:	464d      	mov	r5, r9
    d8d0:	0428      	lsls	r0, r5, #16
    d8d2:	0409      	lsls	r1, r1, #16
    d8d4:	0c05      	lsrs	r5, r0, #16
    d8d6:	4329      	orrs	r1, r5
    d8d8:	458b      	cmp	fp, r1
    d8da:	d907      	bls.n	d8ec <__udivdi3+0xbc>
    d8dc:	1909      	adds	r1, r1, r4
    d8de:	3e01      	subs	r6, #1
    d8e0:	428c      	cmp	r4, r1
    d8e2:	d803      	bhi.n	d8ec <__udivdi3+0xbc>
    d8e4:	4559      	cmp	r1, fp
    d8e6:	4192      	sbcs	r2, r2
    d8e8:	4254      	negs	r4, r2
    d8ea:	1b36      	subs	r6, r6, r4
    d8ec:	043f      	lsls	r7, r7, #16
    d8ee:	433e      	orrs	r6, r7
    d8f0:	2300      	movs	r3, #0
    d8f2:	b003      	add	sp, #12
    d8f4:	1c30      	adds	r0, r6, #0
    d8f6:	1c19      	adds	r1, r3, #0
    d8f8:	bc3c      	pop	{r2, r3, r4, r5}
    d8fa:	4690      	mov	r8, r2
    d8fc:	4699      	mov	r9, r3
    d8fe:	46a2      	mov	sl, r4
    d900:	46ab      	mov	fp, r5
    d902:	bcf0      	pop	{r4, r5, r6, r7}
    d904:	bc04      	pop	{r2}
    d906:	4710      	bx	r2
    d908:	42ab      	cmp	r3, r5
    d90a:	d860      	bhi.n	d9ce <__udivdi3+0x19e>
    d90c:	1c18      	adds	r0, r3, #0
    d90e:	f000 f985 	bl	dc1c <____clzsi2_from_thumb>
    d912:	1e04      	subs	r4, r0, #0
    d914:	d15e      	bne.n	d9d4 <__udivdi3+0x1a4>
    d916:	4643      	mov	r3, r8
    d918:	42bb      	cmp	r3, r7
    d91a:	4164      	adcs	r4, r4
    d91c:	0627      	lsls	r7, r4, #24
    d91e:	2f00      	cmp	r7, #0
    d920:	d104      	bne.n	d92c <__udivdi3+0xfc>
    d922:	42ae      	cmp	r6, r5
    d924:	41ad      	sbcs	r5, r5
    d926:	426b      	negs	r3, r5
    d928:	2b00      	cmp	r3, #0
    d92a:	d051      	beq.n	d9d0 <__udivdi3+0x1a0>
    d92c:	2300      	movs	r3, #0
    d92e:	2601      	movs	r6, #1
    d930:	e7df      	b.n	d8f2 <__udivdi3+0xc2>
    d932:	2a00      	cmp	r2, #0
    d934:	d104      	bne.n	d940 <__udivdi3+0x110>
    d936:	2001      	movs	r0, #1
    d938:	1c11      	adds	r1, r2, #0
    d93a:	f000 f993 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d93e:	1c04      	adds	r4, r0, #0
    d940:	1c20      	adds	r0, r4, #0
    d942:	f000 f96b 	bl	dc1c <____clzsi2_from_thumb>
    d946:	2800      	cmp	r0, #0
    d948:	d000      	beq.n	d94c <__udivdi3+0x11c>
    d94a:	e0b8      	b.n	dabe <__udivdi3+0x28e>
    d94c:	0426      	lsls	r6, r4, #16
    d94e:	1b2d      	subs	r5, r5, r4
    d950:	0c33      	lsrs	r3, r6, #16
    d952:	2101      	movs	r1, #1
    d954:	46aa      	mov	sl, r5
    d956:	0c27      	lsrs	r7, r4, #16
    d958:	4698      	mov	r8, r3
    d95a:	468b      	mov	fp, r1
    d95c:	1c39      	adds	r1, r7, #0
    d95e:	4650      	mov	r0, sl
    d960:	f000 f980 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d964:	1c39      	adds	r1, r7, #0
    d966:	1c06      	adds	r6, r0, #0
    d968:	4645      	mov	r5, r8
    d96a:	4345      	muls	r5, r0
    d96c:	4650      	mov	r0, sl
    d96e:	f000 f98d 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d972:	464a      	mov	r2, r9
    d974:	0409      	lsls	r1, r1, #16
    d976:	0c10      	lsrs	r0, r2, #16
    d978:	4301      	orrs	r1, r0
    d97a:	428d      	cmp	r5, r1
    d97c:	d906      	bls.n	d98c <__udivdi3+0x15c>
    d97e:	1909      	adds	r1, r1, r4
    d980:	3e01      	subs	r6, #1
    d982:	428c      	cmp	r4, r1
    d984:	d802      	bhi.n	d98c <__udivdi3+0x15c>
    d986:	428d      	cmp	r5, r1
    d988:	d900      	bls.n	d98c <__udivdi3+0x15c>
    d98a:	e0ed      	b.n	db68 <__udivdi3+0x338>
    d98c:	1b49      	subs	r1, r1, r5
    d98e:	468a      	mov	sl, r1
    d990:	1c08      	adds	r0, r1, #0
    d992:	1c39      	adds	r1, r7, #0
    d994:	f000 f966 	bl	dc64 <____aeabi_uidiv_from_thumb>
    d998:	4643      	mov	r3, r8
    d99a:	4343      	muls	r3, r0
    d99c:	1c39      	adds	r1, r7, #0
    d99e:	1c05      	adds	r5, r0, #0
    d9a0:	4650      	mov	r0, sl
    d9a2:	4698      	mov	r8, r3
    d9a4:	f000 f972 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    d9a8:	464a      	mov	r2, r9
    d9aa:	0413      	lsls	r3, r2, #16
    d9ac:	0409      	lsls	r1, r1, #16
    d9ae:	0c1f      	lsrs	r7, r3, #16
    d9b0:	4339      	orrs	r1, r7
    d9b2:	4588      	cmp	r8, r1
    d9b4:	d907      	bls.n	d9c6 <__udivdi3+0x196>
    d9b6:	1909      	adds	r1, r1, r4
    d9b8:	3d01      	subs	r5, #1
    d9ba:	428c      	cmp	r4, r1
    d9bc:	d803      	bhi.n	d9c6 <__udivdi3+0x196>
    d9be:	4541      	cmp	r1, r8
    d9c0:	4180      	sbcs	r0, r0
    d9c2:	4244      	negs	r4, r0
    d9c4:	1b2d      	subs	r5, r5, r4
    d9c6:	0436      	lsls	r6, r6, #16
    d9c8:	432e      	orrs	r6, r5
    d9ca:	465b      	mov	r3, fp
    d9cc:	e791      	b.n	d8f2 <__udivdi3+0xc2>
    d9ce:	2300      	movs	r3, #0
    d9d0:	1c1e      	adds	r6, r3, #0
    d9d2:	e78e      	b.n	d8f2 <__udivdi3+0xc2>
    d9d4:	2220      	movs	r2, #32
    d9d6:	1b10      	subs	r0, r2, r4
    d9d8:	1c3b      	adds	r3, r7, #0
    d9da:	4642      	mov	r2, r8
    d9dc:	40c2      	lsrs	r2, r0
    d9de:	40c3      	lsrs	r3, r0
    d9e0:	40a7      	lsls	r7, r4
    d9e2:	1c29      	adds	r1, r5, #0
    d9e4:	40a6      	lsls	r6, r4
    d9e6:	431e      	orrs	r6, r3
    d9e8:	40c1      	lsrs	r1, r0
    d9ea:	9700      	str	r7, [sp, #0]
    d9ec:	40a5      	lsls	r5, r4
    d9ee:	1c17      	adds	r7, r2, #0
    d9f0:	468b      	mov	fp, r1
    d9f2:	432f      	orrs	r7, r5
    d9f4:	0431      	lsls	r1, r6, #16
    d9f6:	0c35      	lsrs	r5, r6, #16
    d9f8:	0c0b      	lsrs	r3, r1, #16
    d9fa:	4658      	mov	r0, fp
    d9fc:	1c29      	adds	r1, r5, #0
    d9fe:	9701      	str	r7, [sp, #4]
    da00:	469a      	mov	sl, r3
    da02:	f000 f92f 	bl	dc64 <____aeabi_uidiv_from_thumb>
    da06:	4653      	mov	r3, sl
    da08:	4343      	muls	r3, r0
    da0a:	1c07      	adds	r7, r0, #0
    da0c:	1c29      	adds	r1, r5, #0
    da0e:	4658      	mov	r0, fp
    da10:	4699      	mov	r9, r3
    da12:	f000 f93b 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    da16:	9801      	ldr	r0, [sp, #4]
    da18:	0409      	lsls	r1, r1, #16
    da1a:	0c02      	lsrs	r2, r0, #16
    da1c:	4311      	orrs	r1, r2
    da1e:	4589      	cmp	r9, r1
    da20:	d907      	bls.n	da32 <__udivdi3+0x202>
    da22:	1989      	adds	r1, r1, r6
    da24:	3f01      	subs	r7, #1
    da26:	428e      	cmp	r6, r1
    da28:	d803      	bhi.n	da32 <__udivdi3+0x202>
    da2a:	4589      	cmp	r9, r1
    da2c:	d901      	bls.n	da32 <__udivdi3+0x202>
    da2e:	3f01      	subs	r7, #1
    da30:	1989      	adds	r1, r1, r6
    da32:	464b      	mov	r3, r9
    da34:	1acb      	subs	r3, r1, r3
    da36:	1c18      	adds	r0, r3, #0
    da38:	1c29      	adds	r1, r5, #0
    da3a:	469b      	mov	fp, r3
    da3c:	f000 f912 	bl	dc64 <____aeabi_uidiv_from_thumb>
    da40:	4651      	mov	r1, sl
    da42:	4341      	muls	r1, r0
    da44:	4681      	mov	r9, r0
    da46:	468a      	mov	sl, r1
    da48:	4658      	mov	r0, fp
    da4a:	1c29      	adds	r1, r5, #0
    da4c:	f000 f91e 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    da50:	9b01      	ldr	r3, [sp, #4]
    da52:	0418      	lsls	r0, r3, #16
    da54:	0409      	lsls	r1, r1, #16
    da56:	0c05      	lsrs	r5, r0, #16
    da58:	4329      	orrs	r1, r5
    da5a:	458a      	cmp	sl, r1
    da5c:	d905      	bls.n	da6a <__udivdi3+0x23a>
    da5e:	2201      	movs	r2, #1
    da60:	4253      	negs	r3, r2
    da62:	1989      	adds	r1, r1, r6
    da64:	4499      	add	r9, r3
    da66:	428e      	cmp	r6, r1
    da68:	d979      	bls.n	db5e <__udivdi3+0x32e>
    da6a:	043e      	lsls	r6, r7, #16
    da6c:	464a      	mov	r2, r9
    da6e:	9f00      	ldr	r7, [sp, #0]
    da70:	4655      	mov	r5, sl
    da72:	4316      	orrs	r6, r2
    da74:	0432      	lsls	r2, r6, #16
    da76:	1b49      	subs	r1, r1, r5
    da78:	043d      	lsls	r5, r7, #16
    da7a:	0c13      	lsrs	r3, r2, #16
    da7c:	0c30      	lsrs	r0, r6, #16
    da7e:	0c2a      	lsrs	r2, r5, #16
    da80:	0c3f      	lsrs	r7, r7, #16
    da82:	1c15      	adds	r5, r2, #0
    da84:	435d      	muls	r5, r3
    da86:	437b      	muls	r3, r7
    da88:	4342      	muls	r2, r0
    da8a:	4347      	muls	r7, r0
    da8c:	18d3      	adds	r3, r2, r3
    da8e:	0c28      	lsrs	r0, r5, #16
    da90:	181b      	adds	r3, r3, r0
    da92:	429a      	cmp	r2, r3
    da94:	d902      	bls.n	da9c <__udivdi3+0x26c>
    da96:	2280      	movs	r2, #128	; 0x80
    da98:	0250      	lsls	r0, r2, #9
    da9a:	183f      	adds	r7, r7, r0
    da9c:	0c18      	lsrs	r0, r3, #16
    da9e:	183f      	adds	r7, r7, r0
    daa0:	42b9      	cmp	r1, r7
    daa2:	d309      	bcc.n	dab8 <__udivdi3+0x288>
    daa4:	d109      	bne.n	daba <__udivdi3+0x28a>
    daa6:	4641      	mov	r1, r8
    daa8:	40a1      	lsls	r1, r4
    daaa:	042d      	lsls	r5, r5, #16
    daac:	1c0c      	adds	r4, r1, #0
    daae:	0c2f      	lsrs	r7, r5, #16
    dab0:	0419      	lsls	r1, r3, #16
    dab2:	19cb      	adds	r3, r1, r7
    dab4:	429c      	cmp	r4, r3
    dab6:	d200      	bcs.n	daba <__udivdi3+0x28a>
    dab8:	3e01      	subs	r6, #1
    daba:	2300      	movs	r3, #0
    dabc:	e719      	b.n	d8f2 <__udivdi3+0xc2>
    dabe:	2320      	movs	r3, #32
    dac0:	1a1e      	subs	r6, r3, r0
    dac2:	4641      	mov	r1, r8
    dac4:	40f1      	lsrs	r1, r6
    dac6:	1c2a      	adds	r2, r5, #0
    dac8:	1c0f      	adds	r7, r1, #0
    daca:	4085      	lsls	r5, r0
    dacc:	4084      	lsls	r4, r0
    dace:	40f2      	lsrs	r2, r6
    dad0:	432f      	orrs	r7, r5
    dad2:	4692      	mov	sl, r2
    dad4:	9700      	str	r7, [sp, #0]
    dad6:	4642      	mov	r2, r8
    dad8:	0c27      	lsrs	r7, r4, #16
    dada:	0421      	lsls	r1, r4, #16
    dadc:	4082      	lsls	r2, r0
    dade:	0c0b      	lsrs	r3, r1, #16
    dae0:	4650      	mov	r0, sl
    dae2:	1c39      	adds	r1, r7, #0
    dae4:	4691      	mov	r9, r2
    dae6:	4698      	mov	r8, r3
    dae8:	f000 f8bc 	bl	dc64 <____aeabi_uidiv_from_thumb>
    daec:	1c39      	adds	r1, r7, #0
    daee:	1c06      	adds	r6, r0, #0
    daf0:	4645      	mov	r5, r8
    daf2:	4345      	muls	r5, r0
    daf4:	4650      	mov	r0, sl
    daf6:	f000 f8c9 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    dafa:	9a00      	ldr	r2, [sp, #0]
    dafc:	0409      	lsls	r1, r1, #16
    dafe:	0c10      	lsrs	r0, r2, #16
    db00:	4301      	orrs	r1, r0
    db02:	428d      	cmp	r5, r1
    db04:	d907      	bls.n	db16 <__udivdi3+0x2e6>
    db06:	1909      	adds	r1, r1, r4
    db08:	3e01      	subs	r6, #1
    db0a:	428c      	cmp	r4, r1
    db0c:	d803      	bhi.n	db16 <__udivdi3+0x2e6>
    db0e:	428d      	cmp	r5, r1
    db10:	d901      	bls.n	db16 <__udivdi3+0x2e6>
    db12:	3e01      	subs	r6, #1
    db14:	1909      	adds	r1, r1, r4
    db16:	1b49      	subs	r1, r1, r5
    db18:	468a      	mov	sl, r1
    db1a:	1c08      	adds	r0, r1, #0
    db1c:	1c39      	adds	r1, r7, #0
    db1e:	f000 f8a1 	bl	dc64 <____aeabi_uidiv_from_thumb>
    db22:	4643      	mov	r3, r8
    db24:	4343      	muls	r3, r0
    db26:	1c05      	adds	r5, r0, #0
    db28:	1c39      	adds	r1, r7, #0
    db2a:	4650      	mov	r0, sl
    db2c:	469b      	mov	fp, r3
    db2e:	f000 f8ad 	bl	dc8c <____aeabi_uidivmod_from_thumb>
    db32:	9b00      	ldr	r3, [sp, #0]
    db34:	041a      	lsls	r2, r3, #16
    db36:	0409      	lsls	r1, r1, #16
    db38:	0c10      	lsrs	r0, r2, #16
    db3a:	4301      	orrs	r1, r0
    db3c:	458b      	cmp	fp, r1
    db3e:	d907      	bls.n	db50 <__udivdi3+0x320>
    db40:	1909      	adds	r1, r1, r4
    db42:	3d01      	subs	r5, #1
    db44:	428c      	cmp	r4, r1
    db46:	d803      	bhi.n	db50 <__udivdi3+0x320>
    db48:	458b      	cmp	fp, r1
    db4a:	d901      	bls.n	db50 <__udivdi3+0x320>
    db4c:	3d01      	subs	r5, #1
    db4e:	1909      	adds	r1, r1, r4
    db50:	465b      	mov	r3, fp
    db52:	0436      	lsls	r6, r6, #16
    db54:	1acb      	subs	r3, r1, r3
    db56:	4335      	orrs	r5, r6
    db58:	469a      	mov	sl, r3
    db5a:	46ab      	mov	fp, r5
    db5c:	e6fe      	b.n	d95c <__udivdi3+0x12c>
    db5e:	458a      	cmp	sl, r1
    db60:	d983      	bls.n	da6a <__udivdi3+0x23a>
    db62:	4499      	add	r9, r3
    db64:	1989      	adds	r1, r1, r6
    db66:	e780      	b.n	da6a <__udivdi3+0x23a>
    db68:	3e01      	subs	r6, #1
    db6a:	1909      	adds	r1, r1, r4
    db6c:	e70e      	b.n	d98c <__udivdi3+0x15c>
    db6e:	46c0      	nop			; (mov r8, r8)

0000db70 <__clzsi2>:
    db70:	e3a0101c 	mov	r1, #28
    db74:	e3500801 	cmp	r0, #65536	; 0x10000
    db78:	21a00820 	lsrcs	r0, r0, #16
    db7c:	22411010 	subcs	r1, r1, #16
    db80:	e3500c01 	cmp	r0, #256	; 0x100
    db84:	21a00420 	lsrcs	r0, r0, #8
    db88:	22411008 	subcs	r1, r1, #8
    db8c:	e3500010 	cmp	r0, #16
    db90:	21a00220 	lsrcs	r0, r0, #4
    db94:	22411004 	subcs	r1, r1, #4
    db98:	e28f2008 	add	r2, pc, #8
    db9c:	e7d20000 	ldrb	r0, [r2, r0]
    dba0:	e0800001 	add	r0, r0, r1
    dba4:	e12fff1e 	bx	lr
    dba8:	02020304 	.word	0x02020304
    dbac:	01010101 	.word	0x01010101
	...

0000dbb8 <__vTaskDelay_from_arm>:
    dbb8:	e59fc000 	ldr	ip, [pc]	; dbc0 <__vTaskDelay_from_arm+0x8>
    dbbc:	e12fff1c 	bx	ip
    dbc0:	00003cfd 	.word	0x00003cfd

0000dbc4 <__printf_from_arm>:
    dbc4:	e59fc000 	ldr	ip, [pc]	; dbcc <__printf_from_arm+0x8>
    dbc8:	e12fff1c 	bx	ip
    dbcc:	00005381 	.word	0x00005381

0000dbd0 <____aeabi_dmul_from_thumb>:
    dbd0:	4778      	bx	pc
    dbd2:	46c0      	nop			; (mov r8, r8)
    dbd4:	eafffc5e 	b	cd54 <__aeabi_dmul>

0000dbd8 <____aeabi_dsub_from_thumb>:
    dbd8:	4778      	bx	pc
    dbda:	46c0      	nop			; (mov r8, r8)
    dbdc:	eafffb57 	b	c940 <__aeabi_dsub>

0000dbe0 <__xQueueGenericSend_from_arm>:
    dbe0:	e59fc000 	ldr	ip, [pc]	; dbe8 <__xQueueGenericSend_from_arm+0x8>
    dbe4:	e12fff1c 	bx	ip
    dbe8:	00003015 	.word	0x00003015

0000dbec <____aeabi_idiv0_from_arm>:
    dbec:	e59fc000 	ldr	ip, [pc]	; dbf4 <____aeabi_idiv0_from_arm+0x8>
    dbf0:	e12fff1c 	bx	ip
    dbf4:	000045cd 	.word	0x000045cd

0000dbf8 <____aeabi_idiv_from_thumb>:
    dbf8:	4778      	bx	pc
    dbfa:	46c0      	nop			; (mov r8, r8)
    dbfc:	eaffda1e 	b	447c <__aeabi_idiv>

0000dc00 <____aeabi_dcmplt_from_thumb>:
    dc00:	4778      	bx	pc
    dc02:	46c0      	nop			; (mov r8, r8)
    dc04:	eafffdb2 	b	d2d4 <__aeabi_dcmplt>

0000dc08 <____aeabi_ldiv0_from_arm>:
    dc08:	e59fc000 	ldr	ip, [pc]	; dc10 <____aeabi_ldiv0_from_arm+0x8>
    dc0c:	e12fff1c 	bx	ip
    dc10:	000045cd 	.word	0x000045cd

0000dc14 <____aeabi_dcmpeq_from_thumb>:
    dc14:	4778      	bx	pc
    dc16:	46c0      	nop			; (mov r8, r8)
    dc18:	eafffda7 	b	d2bc <__aeabi_dcmpeq>

0000dc1c <____clzsi2_from_thumb>:
    dc1c:	4778      	bx	pc
    dc1e:	46c0      	nop			; (mov r8, r8)
    dc20:	eaffffd2 	b	db70 <__clzsi2>

0000dc24 <__vPortExitCritical_from_thumb>:
    dc24:	4778      	bx	pc
    dc26:	46c0      	nop			; (mov r8, r8)
    dc28:	eaffc98e 	b	268 <vPortExitCritical>

0000dc2c <__vPortEnterCritical_from_thumb>:
    dc2c:	4778      	bx	pc
    dc2e:	46c0      	nop			; (mov r8, r8)
    dc30:	eaffc981 	b	23c <vPortEnterCritical>

0000dc34 <__xQueueGenericReceive_from_arm>:
    dc34:	e59fc000 	ldr	ip, [pc]	; dc3c <__xQueueGenericReceive_from_arm+0x8>
    dc38:	e12fff1c 	bx	ip
    dc3c:	000031b5 	.word	0x000031b5

0000dc40 <__main_from_arm>:
    dc40:	e59fc000 	ldr	ip, [pc]	; dc48 <__main_from_arm+0x8>
    dc44:	e12fff1c 	bx	ip
    dc48:	00000d95 	.word	0x00000d95

0000dc4c <__vTaskIncrementTick_from_arm>:
    dc4c:	e59fc000 	ldr	ip, [pc]	; dc54 <__vTaskIncrementTick_from_arm+0x8>
    dc50:	e12fff1c 	bx	ip
    dc54:	000039b9 	.word	0x000039b9

0000dc58 <____gnu_uldivmod_helper_from_arm>:
    dc58:	e59fc000 	ldr	ip, [pc]	; dc60 <____gnu_uldivmod_helper_from_arm+0x8>
    dc5c:	e12fff1c 	bx	ip
    dc60:	0000d405 	.word	0x0000d405

0000dc64 <____aeabi_uidiv_from_thumb>:
    dc64:	4778      	bx	pc
    dc66:	46c0      	nop			; (mov r8, r8)
    dc68:	eaffd9bc 	b	4360 <__aeabi_uidiv>

0000dc6c <____aeabi_d2iz_from_thumb>:
    dc6c:	4778      	bx	pc
    dc6e:	46c0      	nop			; (mov r8, r8)
    dc70:	eafffdaf 	b	d334 <__aeabi_d2iz>

0000dc74 <____aeabi_ddiv_from_thumb>:
    dc74:	4778      	bx	pc
    dc76:	46c0      	nop			; (mov r8, r8)
    dc78:	eafffcd9 	b	cfe4 <__aeabi_ddiv>

0000dc7c <____aeabi_uldivmod_from_thumb>:
    dc7c:	4778      	bx	pc
    dc7e:	46c0      	nop			; (mov r8, r8)
    dc80:	eafffdc2 	b	d390 <__aeabi_uldivmod>

0000dc84 <____aeabi_dadd_from_thumb>:
    dc84:	4778      	bx	pc
    dc86:	46c0      	nop			; (mov r8, r8)
    dc88:	eafffb2d 	b	c944 <__adddf3>

0000dc8c <____aeabi_uidivmod_from_thumb>:
    dc8c:	4778      	bx	pc
    dc8e:	46c0      	nop			; (mov r8, r8)
    dc90:	eaffd9f1 	b	445c <__aeabi_uidivmod>

0000dc94 <__puts_from_arm>:
    dc94:	e59fc000 	ldr	ip, [pc]	; dc9c <__puts_from_arm+0x8>
    dc98:	e12fff1c 	bx	ip
    dc9c:	00005439 	.word	0x00005439

0000dca0 <__i2enable_from_thumb>:
    dca0:	4778      	bx	pc
    dca2:	46c0      	nop			; (mov r8, r8)
    dca4:	eaffc980 	b	2ac <i2enable>

0000dca8 <____aeabi_ui2d_from_thumb>:
    dca8:	4778      	bx	pc
    dcaa:	46c0      	nop			; (mov r8, r8)
    dcac:	eafffbe8 	b	cc54 <__aeabi_ui2d>

0000dcb0 <__fflush_from_arm>:
    dcb0:	e59fc000 	ldr	ip, [pc]	; dcb8 <__fflush_from_arm+0x8>
    dcb4:	e12fff1c 	bx	ip
    dcb8:	0000472d 	.word	0x0000472d

0000dcbc <__vPortDisableInterruptsFromThumb_from_thumb>:
    dcbc:	4778      	bx	pc
    dcbe:	46c0      	nop			; (mov r8, r8)
    dcc0:	eaffc951 	b	20c <vPortDisableInterruptsFromThumb>

0000dcc4 <____aeabi_dcmpgt_from_thumb>:
    dcc4:	4778      	bx	pc
    dcc6:	46c0      	nop			; (mov r8, r8)
    dcc8:	eafffd93 	b	d31c <__aeabi_dcmpgt>

0000dccc <__putchar_from_arm>:
    dccc:	e59fc000 	ldr	ip, [pc]	; dcd4 <__putchar_from_arm+0x8>
    dcd0:	e12fff1c 	bx	ip
    dcd4:	000053b5 	.word	0x000053b5

0000dcd8 <____aeabi_i2d_from_thumb>:
    dcd8:	4778      	bx	pc
    dcda:	46c0      	nop			; (mov r8, r8)
    dcdc:	eafffbe5 	b	cc78 <__aeabi_i2d>

0000dce0 <____aeabi_idivmod_from_thumb>:
    dce0:	4778      	bx	pc
    dce2:	46c0      	nop			; (mov r8, r8)
    dce4:	eaffda30 	b	45ac <__aeabi_idivmod>

0000dce8 <____aeabi_dcmpge_from_thumb>:
    dce8:	4778      	bx	pc
    dcea:	46c0      	nop			; (mov r8, r8)
    dcec:	eafffd84 	b	d304 <__aeabi_dcmpge>

0000dcf0 <__vPortISRStartFirstTask_from_thumb>:
    dcf0:	4778      	bx	pc
    dcf2:	46c0      	nop			; (mov r8, r8)
    dcf4:	eaffc8d2 	b	44 <vPortISRStartFirstTask>

0000dcf8 <__vTaskSwitchContext_from_arm>:
    dcf8:	e59fc000 	ldr	ip, [pc]	; dd00 <__vTaskSwitchContext_from_arm+0x8>
    dcfc:	e12fff1c 	bx	ip
    dd00:	00003de5 	.word	0x00003de5
	...

0000dd38 <_global_impure_ptr>:
    dd38:	40000008 00005cd4 0000572e 0000572e     ...@.\...W...W..
    dd48:	00005ce4 0000572e 0000572e 0000572e     .\...W...W...W..
    dd58:	0000572e 0000572e 0000572e 00005c7e     .W...W...W..~\..
    dd68:	00005c94 0000572e 00005998 00005c22     .\...W...Y.."\..
    dd78:	0000572e 00005c9e 00005caa 00005caa     .W...\...\...\..
    dd88:	00005caa 00005caa 00005caa 00005caa     .\...\...\...\..
    dd98:	00005caa 00005caa 00005caa 0000572e     .\...\...\...W..
    dda8:	0000572e 0000572e 0000572e 0000572e     .W...W...W...W..
    ddb8:	0000572e 0000572e 0000572e 0000572e     .W...W...W...W..
    ddc8:	0000572e 000059f4 00005acc 0000572e     .W...Y...Z...W..
    ddd8:	00005acc 0000572e 0000572e 0000572e     .Z...W...W...W..
    dde8:	0000572e 00005b40 0000572e 0000572e     .W..@[...W...W..
    ddf8:	00005b4c 0000572e 0000572e 0000572e     L[...W...W...W..
    de08:	0000572e 0000572e 00005b8c 0000572e     .W...W...[...W..
    de18:	0000572e 00005bc6 0000572e 0000572e     .W...[...W...W..
    de28:	0000572e 0000572e 0000572e 0000572e     .W...W...W...W..
    de38:	0000572e 0000572e 0000572e 0000572e     .W...W...W...W..
    de48:	00005cf0 00005e0e 00005acc 00005acc     .\...^...Z...Z..
    de58:	00005acc 00005c72 00005e0e 0000572e     .Z..r\...^...W..
    de68:	0000572e 00005ddc 0000572e 00005df0     .W...]...W...]..
    de78:	00005e1e 00005d18 00005d4c 0000572e     .^...]..L]...W..
    de88:	00005d56 0000572e 00005e16 0000572e     V]...W...^...W..
    de98:	0000572e 00005dae                       .W...]..

0000dea0 <blanks.3930>:
    dea0:	20202020 20202020 20202020 20202020                     

0000deb0 <zeroes.3931>:
    deb0:	30303030 30303030 30303030 30303030     0000000000000000
    dec0:	0000733a 00006cc6 00006cc6 0000734e     :s...l...l..Ns..
    ded0:	00006cc6 00006cc6 00006cc6 00006cc6     .l...l...l...l..
    dee0:	00006cc6 00006cc6 000072d8 000072f0     .l...l...r...r..
    def0:	00006cc6 00006f70 00007292 00006cc6     .l..po...r...l..
    df00:	000072fc 0000730a 0000730a 0000730a     .r...s...s...s..
    df10:	0000730a 0000730a 0000730a 0000730a     .s...s...s...s..
    df20:	0000730a 0000730a 00006cc6 00006cc6     .s...s...l...l..
    df30:	00006cc6 00006cc6 00006cc6 00006cc6     .l...l...l...l..
    df40:	00006cc6 00006cc6 00006cc6 00006cc6     .l...l...l...l..
    df50:	00007040 0000710a 00006cc6 0000710a     @p...q...l...q..
    df60:	00006cc6 00006cc6 00006cc6 00006cc6     .l...l...l...l..
    df70:	0000717a 00006cc6 00006cc6 00007200     zq...l...l...r..
    df80:	00006cc6 00006cc6 00006cc6 00006cc6     .l...l...l...l..
    df90:	00006cc6 0000725c 00006cc6 00006cc6     .l..\r...l...l..
    dfa0:	00007188 00006cc6 00006cc6 00006cc6     .q...l...l...l..
    dfb0:	00006cc6 00006cc6 00006cc6 00006cc6     .l...l...l...l..
    dfc0:	00006cc6 00006cc6 00006cc6 000071e6     .l...l...l...q..
    dfd0:	0000745e 0000710a 0000710a 0000710a     ^t...q...q...q..
    dfe0:	00007450 0000745e 00006cc6 00006cc6     Pt..^t...l...l..
    dff0:	0000741a 00006cc6 00007430 00007462     .t...l..0t..bt..
    e000:	0000735c 0000738e 00006cc6 0000739a     \s...s...l...s..
    e010:	00006cc6 00007466 00006cc6 00006cc6     .l..ft...l...l..
    e020:	000073ee                                .s..

0000e024 <blanks.3945>:
    e024:	20202020 20202020 20202020 20202020                     

0000e034 <zeroes.3946>:
    e034:	30303030 30303030 30303030 30303030     0000000000000000
    e044:	00000000                                ....

0000e048 <p05.2452>:
    e048:	00000005 00000019 0000007d 00000000     ........}.......

0000e058 <__mprec_tens>:
    e058:	00000000 3ff00000 00000000 40240000     .......?......$@
    e068:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    e078:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    e088:	00000000 412e8480 00000000 416312d0     .......A......cA
    e098:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    e0a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    e0b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    e0c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    e0d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    e0e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    e0f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    e108:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    e118:	79d99db4 44ea7843                       ...yCx.D

0000e120 <__mprec_bigtens>:
    e120:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    e130:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    e140:	7f73bf3c 75154fdd                       <.s..O.u

0000e148 <__mprec_tinytens>:
    e148:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    e158:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    e168:	64ac6f43 0ac80628 0000b17a 0000adba     Co.d(...z.......
    e178:	0000adba 0000b16e 0000adba 0000adba     ....n...........
    e188:	0000adba 0000adba 0000adba 0000adba     ................
    e198:	0000afd6 0000b162 0000adba 0000afee     ....b...........
    e1a8:	0000b1c2 0000adba 0000b1b6 0000b18e     ................
    e1b8:	0000b18e 0000b18e 0000b18e 0000b18e     ................
    e1c8:	0000b18e 0000b18e 0000b18e 0000b18e     ................
    e1d8:	0000adba 0000adba 0000adba 0000adba     ................
    e1e8:	0000adba 0000adba 0000adba 0000adba     ................
    e1f8:	0000adba 0000adba 0000af9a 0000adba     ................
    e208:	0000adba 0000adba 0000adba 0000adba     ................
    e218:	0000adba 0000adba 0000adba 0000adba     ................
    e228:	0000adba 0000af66 0000adba 0000adba     ....f...........
    e238:	0000adba 0000adba 0000adba 0000ae8a     ................
    e248:	0000adba 0000adba 0000b0f4 0000adba     ................
    e258:	0000adba 0000adba 0000adba 0000adba     ................
    e268:	0000adba 0000adba 0000adba 0000adba     ................
    e278:	0000adba 0000b142 0000afa2 0000adba     ....B...........
    e288:	0000adba 0000adba 0000b136 0000afa2     ........6.......
    e298:	0000adba 0000adba 0000b124 0000adba     ........$.......
    e2a8:	0000affa 0000af6e 0000b024 0000b018     ....n...$.......
    e2b8:	0000adba 0000b0a2 0000adba 0000ae92     ................
    e2c8:	0000adba 0000adba 0000b052              ........R...

0000e2d4 <blanks.3874>:
    e2d4:	20202020 20202020 20202020 20202020                     

0000e2e4 <zeroes.3875>:
    e2e4:	30303030 30303030 30303030 30303030     0000000000000000
    e2f4:	0000bd98 0000b9b0 0000b9b0 0000bd8c     ................
    e304:	0000b9b0 0000b9b0 0000b9b0 0000b9b0     ................
    e314:	0000b9b0 0000b9b0 0000bbe0 0000bd80     ................
    e324:	0000b9b0 0000bbf8 0000bde0 0000b9b0     ................
    e334:	0000bdd4 0000bdac 0000bdac 0000bdac     ................
    e344:	0000bdac 0000bdac 0000bdac 0000bdac     ................
    e354:	0000bdac 0000bdac 0000b9b0 0000b9b0     ................
    e364:	0000b9b0 0000b9b0 0000b9b0 0000b9b0     ................
    e374:	0000b9b0 0000b9b0 0000b9b0 0000b9b0     ................
    e384:	0000bb6e 0000b9b0 0000b9b0 0000b9b0     n...............
    e394:	0000b9b0 0000b9b0 0000b9b0 0000b9b0     ................
    e3a4:	0000b9b0 0000b9b0 0000b9b0 0000bbac     ................
    e3b4:	0000b9b0 0000b9b0 0000b9b0 0000b9b0     ................
    e3c4:	0000b9b0 0000ba8e 0000b9b0 0000b9b0     ................
    e3d4:	0000bd50 0000b9b0 0000b9b0 0000b9b0     P...............
    e3e4:	0000b9b0 0000b9b0 0000b9b0 0000b9b0     ................
    e3f4:	0000b9b0 0000b9b0 0000b9b0 0000bc18     ................
    e404:	0000bb76 0000b9b0 0000b9b0 0000b9b0     v...............
    e414:	0000bd44 0000bb76 0000b9b0 0000b9b0     D...v...........
    e424:	0000bd32 0000b9b0 0000bd14 0000bbb4     2...............
    e434:	0000bce4 0000bcd8 0000b9b0 0000bc3c     ............<...
    e444:	0000b9b0 0000ba96 0000b9b0 0000b9b0     ................
    e454:	0000bc86                                ....

0000e458 <blanks.3888>:
    e458:	20202020 20202020 20202020 20202020                     

0000e468 <zeroes.3889>:
    e468:	30303030 30303030 30303030 30303030     0000000000000000
    e478:	74736572 65747261 65722072 74726f70     restarter report
    e488:	252e2e2e 00000078 73206f4e 20686375     ...%x...No such 
    e498:	69766564 34256563 00000a78 61206f6e     device%4x...no a
    e4a8:	6f6e6b63 67656c77 78252865 00000a29     cknowlege(%x)...
    e4b8:	64616572 2e676e69 0020202e 74696157     reading..  .Wait
    e4c8:	00000009 65727825 78250967 00000000     ....%xreg.%x....
    e4d8:	74617453 69207375 78252073 0000000a     Status is %x....
    e4e8:	64616552 67656220 3e5b6e69 00002020     Read begin[>  ..
    e4f8:	3d080808 0063253e 656e6f64 2e2e2e2e     ...=>%c.done....
    e508:	0000002e 61746166 0000006c 75626544     ....fatal...Debu
    e518:	67313333 00000000 69676552 72657473     331g....Register
    e528:	73655220 00007465 75746553 65622070      Reset..Setup be
    e538:	5b6e6967 0020203e 7461440d 72742061     gin[>  ..Data tr
    e548:	6d736e61 6f697469 6e45206e 00002164     ansmition End!..

0000e558 <OV7670>:
    e558:	00001204 000040d0 00008c02 0000703a     .....@......:p..
    e568:	00007211 000040d0 00008c02 0000703a     .r...@......:p..
    e578:	00007135 00007211 000073f0 0000a202     5q...r...s......
    e588:	00001500 00007a20 00007b10 00007c1e     .... z...{...|..
    e598:	00007d35 00007e5a 00007f69 00008076     5}..Z~..i...v...
    e5a8:	00008180 00008288 0000838f 00008496     ................
    e5b8:	000085a3 000086af 000087c4 000088d7     ................
    e5c8:	000089e8 000013e0 00000000 00001000     ................
    e5d8:	00000d40 00001418 0000a505 0000ab07     @...............
    e5e8:	00002495 00002533 000026e3 00009f78     .$..3%...&..x...
    e5f8:	0000a068 0000a103 0000a6d8 0000a7d8     h...............
    e608:	0000a8f0 0000a990 0000aa94 000013e5     ................
    e618:	00000e61 00000f4b 00001602 00001e07     a...K...........
    e628:	00002102 00002291 00002907 0000330b     .!..."...)...3..
    e638:	0000350b 0000371d 00003871 0000392a     .5...7..q8..*9..
    e648:	00003c78 00004d34 00004e20 00006900     x<..4M.. N...i..
    e658:	00006b0a 00007410 00008d4f 00008e00     .k...t..O.......
    e668:	00008f00 00009000 00009100 00009600     ................
    e678:	00009a00 0000b084 0000b10c 0000b20e     ................
    e688:	0000b382 0000b80a 0000430a 000044f0     .........C...D..
    e698:	00004534 0000483a 00005999 00005a88     4E..:H...Y...Z..
    e6a8:	00005b44 00005c67 00005d49 00005e0e     D[..g\..I]...^..
    e6b8:	00006c0a 00006d55 00006e11 00006f9f     .l..Um...n...o..
    e6c8:	00006a40 00000140 00000260 000013e7     @j..@...`.......
    e6d8:	00004f80 00005080 00005100 00005222     .O...P...Q.."R..
    e6e8:	0000535e 00005480 0000589e 00004108     ^S...T...X...A..
    e6f8:	00003f00 00007505 000076e1 00004c00     .?...u...v...L..
    e708:	00007701 00003dc3 00004b09 0000c960     .w...=...K..`...
    e718:	00004138 00005640 00003411 00003b12     8A..@V...4...;..
    e728:	0000a488 00009600 00009730 00009820     ........0... ...
    e738:	00009930 00009a84 00009b29 00009c03     0.......).......
    e748:	00009d4c 00009e3f 00007804 00007901     L...?....x...y..
    e758:	0000c8f0 00000d60 00000d56 00000d50     ....`...V...P...
    e768:	00000d4c 00000d48 00000d44 00000d34     L...H...D...4...
    e778:	00000d5c 6c6c6548 00002c6f 726f7720     \...Hello,.. wor
    e788:	2521646c 64253a64 0000000a 0044454c     ld!%d:%d....LED.
    e798:	0000444c 00535449 72617473 53492074     LD..ITS.start IS
    e7a8:	63204953 656e6e6f 6f697463 0000006e     SI connection...
    e7b8:	646e6148 6b616853 00000065 25097075     HandShake...up.%
    e7c8:	00000a78 3d767270 00007825 253d7243     x...prv=%x..Cr=%
    e7d8:	00000064 0964252d 000a6425 616c6544     d...-%d.%d..Dela
    e7e8:	676e6979 00006425 78252020 2e2e2e2e     ying%d..  %x....
    e7f8:	09783425 00000000 00096425 6967696d     %4x.....%d..migi
    e808:	00000000 6f757974 00000075 58383025     ....tyuou...%08X
    e818:	00000000 32302520 00000058 6e6f4351     .... %02X...QCon
    e828:	00314273 6f725051 00324264 6f725051     sB1.QProdB2.QPro
    e838:	00334264 6e6f4351 00344273 6f725051     dB3.QConsB4.QPro
    e848:	00354264 6e6f4351 00364273 73655442     dB5.QConsB6.BTes
    e858:	00003174 73655442 00003274 4d746e49     t1..BTest2..IntM
    e868:	00687461 516e6547 00000000 6f4c754d     ath.GenQ....MuLo
    e878:	00000077 654d754d 00000064 6948754d     w...MuMed...MuHi
    e888:	00006867 6b656550 0000004c 6b656550     gh..PeekL...Peek
    e898:	0000004d 6b656550 00003148 6b656550     M...PeekH1..Peek
    e8a8:	00003248 5f544e43 00434e49 5f4d494c     H2..CNT_INC.LIM_
    e8b8:	00434e49 54435f43 00004c52 50535553     INC.C_CTRL..SUSP
    e8c8:	0058545f 50535553 0058525f 09097325     _TX.SUSP_RX.%s..
    e8d8:	25096325 75250975 0d752509 0000000a     %c.%u.%u.%u.....
    e8e8:	454c4449 00000000 00000a0d 00000043     IDLE........C...
    e8f8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
    e908:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    e918:	00000000 33323130 37363534 62613938     ....0123456789ab
    e928:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
    e938:	00000030 69666e49 7974696e 00000000     0...Infinity....
    e948:	004e614e 49534f50 00000058              NaN.POSIX...
